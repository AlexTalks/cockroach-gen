// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*scanner).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9247

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 966,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 802,
	193, 802,
	207, 230,
	279, 230,
	287, 658,
	314, 230,
	323, 658,
	360, 658,
	384, 230,
	407, 658,
	-2, 0,
	-1, 76,
	207, 234,
	-2, 0,
	-1, 77,
	105, 966,
	182, 966,
	393, 966,
	394, 966,
	-2, 0,
	-1, 88,
	118, 940,
	132, 940,
	190, 940,
	218, 940,
	247, 940,
	256, 940,
	389, 940,
	-2, 927,
	-1, 116,
	123, 582,
	206, 582,
	377, 582,
	-2, 0,
	-1, 117,
	4, 968,
	21, 968,
	22, 968,
	23, 968,
	24, 968,
	25, 968,
	27, 968,
	32, 968,
	37, 968,
	38, 968,
	39, 968,
	40, 968,
	41, 968,
	42, 968,
	43, 968,
	44, 968,
	45, 968,
	46, 968,
	48, 968,
	49, 968,
	50, 968,
	51, 968,
	52, 968,
	53, 968,
	56, 968,
	57, 968,
	58, 968,
	59, 968,
	61, 968,
	62, 968,
	66, 968,
	67, 968,
	68, 968,
	69, 968,
	70, 968,
	72, 968,
	73, 968,
	74, 968,
	75, 968,
	77, 968,
	79, 968,
	80, 968,
	81, 968,
	84, 968,
	85, 968,
	93, 968,
	94, 968,
	95, 968,
	96, 968,
	97, 968,
	98, 968,
	99, 968,
	100, 968,
	102, 968,
	104, 968,
	105, 968,
	107, 968,
	110, 968,
	111, 968,
	112, 968,
	114, 968,
	116, 968,
	117, 968,
	119, 968,
	120, 968,
	121, 968,
	122, 968,
	123, 968,
	124, 968,
	125, 968,
	126, 968,
	127, 968,
	128, 968,
	129, 968,
	131, 968,
	137, 968,
	138, 968,
	139, 968,
	140, 968,
	141, 968,
	142, 968,
	144, 968,
	146, 968,
	150, 968,
	151, 968,
	153, 968,
	154, 968,
	156, 968,
	157, 968,
	159, 968,
	160, 968,
	161, 968,
	162, 968,
	163, 968,
	164, 968,
	165, 968,
	166, 968,
	167, 968,
	168, 968,
	171, 968,
	172, 968,
	176, 968,
	177, 968,
	178, 968,
	179, 968,
	182, 968,
	183, 968,
	184, 968,
	185, 968,
	186, 968,
	187, 968,
	188, 968,
	189, 968,
	191, 968,
	193, 968,
	196, 968,
	197, 968,
	198, 968,
	200, 968,
	201, 968,
	204, 968,
	205, 968,
	206, 968,
	207, 968,
	209, 968,
	210, 968,
	212, 968,
	213, 968,
	215, 968,
	216, 968,
	219, 968,
	220, 968,
	223, 968,
	225, 968,
	226, 968,
	227, 968,
	228, 968,
	229, 968,
	230, 968,
	231, 968,
	232, 968,
	233, 968,
	235, 968,
	236, 968,
	237, 968,
	238, 968,
	240, 968,
	243, 968,
	244, 968,
	245, 968,
	246, 968,
	248, 968,
	249, 968,
	250, 968,
	252, 968,
	253, 968,
	254, 968,
	257, 968,
	258, 968,
	260, 968,
	262, 968,
	263, 968,
	264, 968,
	265, 968,
	266, 968,
	267, 968,
	268, 968,
	269, 968,
	270, 968,
	272, 968,
	273, 968,
	274, 968,
	275, 968,
	276, 968,
	278, 968,
	280, 968,
	281, 968,
	282, 968,
	283, 968,
	284, 968,
	285, 968,
	286, 968,
	287, 968,
	288, 968,
	290, 968,
	291, 968,
	292, 968,
	293, 968,
	294, 968,
	296, 968,
	297, 968,
	298, 968,
	299, 968,
	300, 968,
	301, 968,
	302, 968,
	303, 968,
	305, 968,
	307, 968,
	308, 968,
	309, 968,
	310, 968,
	311, 968,
	312, 968,
	314, 968,
	315, 968,
	316, 968,
	317, 968,
	318, 968,
	319, 968,
	320, 968,
	321, 968,
	323, 968,
	324, 968,
	325, 968,
	326, 968,
	327, 968,
	328, 968,
	329, 968,
	330, 968,
	331, 968,
	332, 968,
	334, 968,
	335, 968,
	336, 968,
	337, 968,
	339, 968,
	340, 968,
	341, 968,
	342, 968,
	344, 968,
	345, 968,
	346, 968,
	347, 968,
	348, 968,
	349, 968,
	350, 968,
	351, 968,
	352, 968,
	353, 968,
	354, 968,
	355, 968,
	357, 968,
	358, 968,
	359, 968,
	361, 968,
	362, 968,
	363, 968,
	364, 968,
	365, 968,
	366, 968,
	367, 968,
	368, 968,
	369, 968,
	371, 968,
	372, 968,
	373, 968,
	374, 968,
	377, 968,
	378, 968,
	379, 968,
	380, 968,
	381, 968,
	383, 968,
	384, 968,
	385, 968,
	387, 968,
	388, 968,
	391, 968,
	392, 968,
	393, 968,
	394, 968,
	395, 968,
	397, 968,
	399, 968,
	400, 968,
	401, 968,
	402, 968,
	403, 968,
	404, 968,
	405, 968,
	407, 968,
	408, 968,
	409, 968,
	414, 968,
	415, 968,
	416, 968,
	417, 968,
	418, 968,
	419, 968,
	-2, 0,
	-1, 118,
	1, 859,
	196, 859,
	278, 859,
	285, 859,
	445, 859,
	446, 859,
	-2, 0,
	-1, 120,
	1, 859,
	445, 859,
	446, 859,
	-2, 0,
	-1, 121,
	1, 859,
	445, 859,
	446, 859,
	-2, 0,
	-1, 122,
	1, 863,
	445, 863,
	446, 863,
	-2, 0,
	-1, 146,
	118, 939,
	132, 939,
	190, 939,
	218, 939,
	247, 939,
	256, 939,
	389, 939,
	-2, 936,
	-1, 176,
	4, 975,
	5, 975,
	6, 975,
	7, 975,
	8, 975,
	9, 975,
	10, 975,
	21, 975,
	22, 975,
	23, 975,
	24, 975,
	25, 975,
	27, 975,
	32, 975,
	33, 975,
	37, 975,
	38, 975,
	39, 975,
	40, 975,
	41, 975,
	42, 975,
	43, 975,
	44, 975,
	45, 975,
	46, 975,
	48, 975,
	49, 975,
	50, 975,
	51, 975,
	52, 975,
	53, 975,
	54, 975,
	55, 975,
	56, 975,
	57, 975,
	58, 975,
	59, 975,
	61, 975,
	62, 975,
	64, 975,
	66, 975,
	67, 975,
	68, 975,
	69, 975,
	70, 975,
	72, 975,
	73, 975,
	74, 975,
	75, 975,
	77, 975,
	79, 975,
	80, 975,
	81, 975,
	83, 975,
	84, 975,
	85, 975,
	86, 975,
	87, 975,
	88, 975,
	89, 975,
	90, 975,
	91, 975,
	92, 975,
	93, 975,
	94, 975,
	95, 975,
	96, 975,
	97, 975,
	98, 975,
	99, 975,
	100, 975,
	101, 975,
	102, 975,
	104, 975,
	105, 975,
	107, 975,
	110, 975,
	111, 975,
	112, 975,
	114, 975,
	116, 975,
	117, 975,
	119, 975,
	120, 975,
	121, 975,
	122, 975,
	123, 975,
	124, 975,
	125, 975,
	126, 975,
	127, 975,
	128, 975,
	129, 975,
	130, 975,
	131, 975,
	137, 975,
	138, 975,
	139, 975,
	140, 975,
	141, 975,
	142, 975,
	144, 975,
	146, 975,
	149, 975,
	150, 975,
	151, 975,
	153, 975,
	154, 975,
	156, 975,
	157, 975,
	159, 975,
	160, 975,
	161, 975,
	162, 975,
	163, 975,
	164, 975,
	165, 975,
	166, 975,
	167, 975,
	168, 975,
	169, 975,
	171, 975,
	172, 975,
	176, 975,
	177, 975,
	178, 975,
	179, 975,
	181, 975,
	182, 975,
	183, 975,
	184, 975,
	185, 975,
	186, 975,
	187, 975,
	188, 975,
	189, 975,
	191, 975,
	193, 975,
	194, 975,
	195, 975,
	196, 975,
	197, 975,
	198, 975,
	199, 975,
	200, 975,
	201, 975,
	204, 975,
	205, 975,
	206, 975,
	207, 975,
	209, 975,
	210, 975,
	212, 975,
	213, 975,
	214, 975,
	215, 975,
	216, 975,
	217, 975,
	219, 975,
	220, 975,
	223, 975,
	225, 975,
	226, 975,
	227, 975,
	228, 975,
	229, 975,
	230, 975,
	231, 975,
	232, 975,
	233, 975,
	234, 975,
	235, 975,
	236, 975,
	237, 975,
	238, 975,
	239, 975,
	240, 975,
	241, 975,
	242, 975,
	243, 975,
	244, 975,
	245, 975,
	246, 975,
	248, 975,
	249, 975,
	250, 975,
	253, 975,
	254, 975,
	257, 975,
	258, 975,
	259, 975,
	260, 975,
	261, 975,
	262, 975,
	263, 975,
	264, 975,
	265, 975,
	266, 975,
	267, 975,
	268, 975,
	269, 975,
	270, 975,
	272, 975,
	273, 975,
	274, 975,
	275, 975,
	276, 975,
	278, 975,
	280, 975,
	281, 975,
	282, 975,
	283, 975,
	284, 975,
	285, 975,
	286, 975,
	287, 975,
	288, 975,
	290, 975,
	291, 975,
	292, 975,
	293, 975,
	294, 975,
	296, 975,
	297, 975,
	298, 975,
	299, 975,
	300, 975,
	301, 975,
	302, 975,
	303, 975,
	305, 975,
	306, 975,
	307, 975,
	308, 975,
	309, 975,
	310, 975,
	311, 975,
	312, 975,
	314, 975,
	315, 975,
	316, 975,
	317, 975,
	318, 975,
	319, 975,
	320, 975,
	321, 975,
	323, 975,
	324, 975,
	325, 975,
	326, 975,
	327, 975,
	328, 975,
	329, 975,
	330, 975,
	331, 975,
	332, 975,
	333, 975,
	334, 975,
	335, 975,
	336, 975,
	337, 975,
	338, 975,
	339, 975,
	340, 975,
	341, 975,
	342, 975,
	344, 975,
	345, 975,
	346, 975,
	347, 975,
	348, 975,
	349, 975,
	350, 975,
	351, 975,
	352, 975,
	353, 975,
	354, 975,
	355, 975,
	357, 975,
	358, 975,
	359, 975,
	361, 975,
	362, 975,
	363, 975,
	364, 975,
	365, 975,
	366, 975,
	367, 975,
	368, 975,
	369, 975,
	371, 975,
	372, 975,
	373, 975,
	374, 975,
	377, 975,
	378, 975,
	379, 975,
	380, 975,
	381, 975,
	382, 975,
	383, 975,
	384, 975,
	385, 975,
	387, 975,
	388, 975,
	390, 975,
	391, 975,
	392, 975,
	393, 975,
	394, 975,
	395, 975,
	396, 975,
	397, 975,
	399, 975,
	400, 975,
	401, 975,
	402, 975,
	403, 975,
	404, 975,
	405, 975,
	407, 975,
	408, 975,
	409, 975,
	414, 975,
	415, 975,
	416, 975,
	417, 975,
	418, 975,
	419, 975,
	420, 975,
	428, 975,
	433, 975,
	434, 975,
	435, 975,
	442, 975,
	448, 975,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 966,
	-1, 537,
	148, 1631,
	375, 1631,
	425, 1631,
	444, 1631,
	-2, 0,
	-1, 538,
	148, 1707,
	375, 1707,
	425, 1707,
	444, 1707,
	-2, 0,
	-1, 539,
	148, 1621,
	375, 1621,
	425, 1621,
	444, 1621,
	-2, 0,
	-1, 541,
	148, 1789,
	375, 1789,
	425, 1789,
	444, 1789,
	-2, 0,
	-1, 543,
	148, 1817,
	375, 1817,
	425, 1817,
	444, 1817,
	-2, 0,
	-1, 550,
	148, 1715,
	375, 1715,
	425, 1715,
	444, 1715,
	-2, 457,
	-1, 567,
	444, 1581,
	447, 1581,
	-2, 627,
	-1, 568,
	444, 1583,
	447, 1583,
	-2, 628,
	-1, 569,
	444, 1582,
	447, 1582,
	-2, 629,
	-1, 570,
	447, 1530,
	-2, 630,
	-1, 714,
	1, 555,
	441, 555,
	443, 555,
	445, 555,
	446, 555,
	-2, 0,
	-1, 715,
	1, 626,
	145, 626,
	441, 626,
	443, 626,
	445, 626,
	446, 626,
	-2, 0,
	-1, 721,
	1, 569,
	441, 569,
	443, 569,
	445, 569,
	446, 569,
	-2, 0,
	-1, 723,
	1, 573,
	441, 573,
	443, 573,
	445, 573,
	446, 573,
	-2, 0,
	-1, 725,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	446, 583,
	-2, 0,
	-1, 726,
	1, 592,
	441, 592,
	443, 592,
	445, 592,
	446, 592,
	-2, 0,
	-1, 727,
	1, 594,
	441, 594,
	443, 594,
	445, 594,
	446, 594,
	-2, 0,
	-1, 731,
	1, 608,
	441, 608,
	443, 608,
	445, 608,
	446, 608,
	-2, 0,
	-1, 732,
	1, 610,
	441, 610,
	443, 610,
	445, 610,
	446, 610,
	-2, 0,
	-1, 775,
	132, 979,
	218, 979,
	247, 979,
	-2, 936,
	-1, 790,
	132, 978,
	218, 978,
	247, 978,
	-2, 936,
	-1, 814,
	444, 1580,
	-2, 465,
	-1, 843,
	442, 1572,
	-2, 1563,
	-1, 849,
	5, 1104,
	-2, 1612,
	-1, 850,
	5, 1105,
	-2, 1616,
	-1, 851,
	5, 1106,
	-2, 1615,
	-1, 852,
	5, 1107,
	-2, 1815,
	-1, 853,
	5, 1108,
	-2, 1717,
	-1, 854,
	5, 1109,
	-2, 1781,
	-1, 855,
	5, 1110,
	-2, 1783,
	-1, 856,
	5, 1111,
	-2, 1794,
	-1, 857,
	5, 1112,
	-2, 1784,
	-1, 858,
	5, 1113,
	-2, 1785,
	-1, 859,
	5, 1114,
	-2, 1611,
	-1, 860,
	5, 1115,
	-2, 1828,
	-1, 861,
	5, 1116,
	-2, 1682,
	-1, 862,
	5, 1117,
	-2, 1724,
	-1, 863,
	5, 1118,
	-2, 1726,
	-1, 864,
	5, 1119,
	-2, 1686,
	-1, 865,
	5, 1120,
	442, 1590,
	-2, 1581,
	-1, 866,
	5, 1176,
	442, 1176,
	-2, 1863,
	-1, 871,
	442, 1591,
	-2, 1582,
	-1, 873,
	5, 1124,
	-2, 1861,
	-1, 874,
	5, 1125,
	-2, 1862,
	-1, 875,
	5, 1126,
	-2, 1685,
	-1, 876,
	5, 1127,
	-2, 1874,
	-1, 877,
	5, 1128,
	-2, 1687,
	-1, 878,
	5, 1129,
	-2, 1688,
	-1, 879,
	5, 1130,
	-2, 1689,
	-1, 880,
	5, 1131,
	-2, 1843,
	-1, 881,
	5, 1132,
	-2, 1872,
	-1, 882,
	5, 1133,
	-2, 1666,
	-1, 883,
	5, 1134,
	-2, 1667,
	-1, 884,
	5, 1148,
	-2, 1855,
	-1, 886,
	5, 1123,
	-2, 1851,
	-1, 887,
	5, 1123,
	-2, 1850,
	-1, 888,
	5, 1123,
	-2, 1867,
	-1, 889,
	5, 1140,
	-2, 1845,
	-1, 890,
	5, 1141,
	-2, 1613,
	-1, 891,
	5, 1151,
	-2, 1844,
	-1, 892,
	5, 1153,
	-2, 1883,
	-1, 894,
	5, 1164,
	-2, 1641,
	-1, 895,
	5, 1175,
	-2, 1876,
	-1, 896,
	5, 1167,
	-2, 1877,
	-1, 897,
	5, 1175,
	-2, 1878,
	-1, 898,
	5, 1171,
	-2, 1879,
	-1, 899,
	5, 1091,
	-2, 1695,
	-1, 900,
	5, 1092,
	-2, 1696,
	-1, 901,
	444, 1578,
	-2, 1562,
	-1, 902,
	442, 1903,
	-2, 1579,
	-1, 922,
	5, 1159,
	-2, 1804,
	-1, 939,
	5, 1158,
	-2, 1884,
	-1, 949,
	5, 1160,
	408, 1160,
	-2, 1846,
	-1, 950,
	5, 1161,
	408, 1161,
	-2, 1847,
	-1, 986,
	442, 1590,
	-2, 1581,
	-1, 1015,
	148, 1817,
	375, 1817,
	425, 1817,
	444, 1817,
	-2, 0,
	-1, 1016,
	196, 871,
	278, 871,
	285, 871,
	-2, 445,
	-1, 1134,
	296, 1560,
	435, 1560,
	-2, 1559,
	-1, 1190,
	287, 658,
	407, 658,
	-2, 229,
	-1, 1210,
	268, 964,
	-2, 775,
	-1, 1219,
	251, 1585,
	-2, 0,
	-1, 1283,
	1, 336,
	441, 336,
	443, 336,
	445, 336,
	446, 336,
	-2, 938,
	-1, 1286,
	4, 1882,
	11, 1882,
	12, 1882,
	14, 1882,
	15, 1882,
	16, 1882,
	17, 1882,
	18, 1882,
	19, 1882,
	21, 1882,
	22, 1882,
	23, 1882,
	24, 1882,
	25, 1882,
	27, 1882,
	30, 1882,
	32, 1882,
	34, 1882,
	37, 1882,
	38, 1882,
	39, 1882,
	40, 1882,
	41, 1882,
	42, 1882,
	43, 1882,
	44, 1882,
	45, 1882,
	46, 1882,
	48, 1882,
	49, 1882,
	50, 1882,
	51, 1882,
	52, 1882,
	53, 1882,
	56, 1882,
	57, 1882,
	58, 1882,
	59, 1882,
	61, 1882,
	62, 1882,
	63, 1882,
	66, 1882,
	67, 1882,
	68, 1882,
	69, 1882,
	70, 1882,
	71, 1882,
	72, 1882,
	73, 1882,
	74, 1882,
	75, 1882,
	77, 1882,
	78, 1882,
	79, 1882,
	80, 1882,
	81, 1882,
	83, 1882,
	84, 1882,
	85, 1882,
	93, 1882,
	94, 1882,
	95, 1882,
	96, 1882,
	97, 1882,
	98, 1882,
	99, 1882,
	100, 1882,
	102, 1882,
	104, 1882,
	105, 1882,
	107, 1882,
	110, 1882,
	111, 1882,
	112, 1882,
	114, 1882,
	116, 1882,
	117, 1882,
	119, 1882,
	120, 1882,
	121, 1882,
	122, 1882,
	123, 1882,
	124, 1882,
	125, 1882,
	126, 1882,
	127, 1882,
	128, 1882,
	129, 1882,
	133, 1882,
	134, 1882,
	135, 1882,
	136, 1882,
	137, 1882,
	138, 1882,
	139, 1882,
	140, 1882,
	141, 1882,
	142, 1882,
	143, 1882,
	144, 1882,
	146, 1882,
	149, 1882,
	150, 1882,
	151, 1882,
	153, 1882,
	154, 1882,
	156, 1882,
	157, 1882,
	159, 1882,
	160, 1882,
	161, 1882,
	162, 1882,
	163, 1882,
	164, 1882,
	165, 1882,
	166, 1882,
	167, 1882,
	168, 1882,
	169, 1882,
	170, 1882,
	171, 1882,
	172, 1882,
	173, 1882,
	174, 1882,
	175, 1882,
	177, 1882,
	178, 1882,
	179, 1882,
	181, 1882,
	182, 1882,
	183, 1882,
	184, 1882,
	185, 1882,
	186, 1882,
	187, 1882,
	188, 1882,
	189, 1882,
	191, 1882,
	193, 1882,
	194, 1882,
	195, 1882,
	196, 1882,
	197, 1882,
	198, 1882,
	199, 1882,
	200, 1882,
	201, 1882,
	202, 1882,
	203, 1882,
	204, 1882,
	205, 1882,
	206, 1882,
	207, 1882,
	209, 1882,
	210, 1882,
	212, 1882,
	213, 1882,
	214, 1882,
	215, 1882,
	216, 1882,
	217, 1882,
	219, 1882,
	220, 1882,
	223, 1882,
	224, 1882,
	225, 1882,
	226, 1882,
	227, 1882,
	228, 1882,
	229, 1882,
	230, 1882,
	231, 1882,
	232, 1882,
	233, 1882,
	234, 1882,
	235, 1882,
	236, 1882,
	237, 1882,
	238, 1882,
	241, 1882,
	243, 1882,
	244, 1882,
	245, 1882,
	246, 1882,
	248, 1882,
	249, 1882,
	250, 1882,
	253, 1882,
	254, 1882,
	255, 1882,
	257, 1882,
	258, 1882,
	260, 1882,
	262, 1882,
	263, 1882,
	264, 1882,
	265, 1882,
	266, 1882,
	267, 1882,
	268, 1882,
	269, 1882,
	270, 1882,
	272, 1882,
	273, 1882,
	274, 1882,
	275, 1882,
	276, 1882,
	278, 1882,
	280, 1882,
	281, 1882,
	282, 1882,
	283, 1882,
	284, 1882,
	285, 1882,
	286, 1882,
	287, 1882,
	288, 1882,
	290, 1882,
	291, 1882,
	292, 1882,
	293, 1882,
	294, 1882,
	295, 1882,
	296, 1882,
	297, 1882,
	298, 1882,
	299, 1882,
	300, 1882,
	301, 1882,
	302, 1882,
	303, 1882,
	305, 1882,
	306, 1882,
	307, 1882,
	308, 1882,
	309, 1882,
	310, 1882,
	311, 1882,
	312, 1882,
	313, 1882,
	314, 1882,
	315, 1882,
	316, 1882,
	317, 1882,
	318, 1882,
	319, 1882,
	320, 1882,
	321, 1882,
	323, 1882,
	324, 1882,
	325, 1882,
	326, 1882,
	327, 1882,
	328, 1882,
	329, 1882,
	330, 1882,
	331, 1882,
	332, 1882,
	334, 1882,
	335, 1882,
	336, 1882,
	337, 1882,
	338, 1882,
	339, 1882,
	340, 1882,
	341, 1882,
	342, 1882,
	344, 1882,
	345, 1882,
	346, 1882,
	347, 1882,
	348, 1882,
	349, 1882,
	350, 1882,
	351, 1882,
	352, 1882,
	353, 1882,
	354, 1882,
	355, 1882,
	357, 1882,
	358, 1882,
	359, 1882,
	361, 1882,
	362, 1882,
	363, 1882,
	364, 1882,
	365, 1882,
	366, 1882,
	367, 1882,
	368, 1882,
	369, 1882,
	371, 1882,
	372, 1882,
	373, 1882,
	374, 1882,
	377, 1882,
	378, 1882,
	379, 1882,
	380, 1882,
	381, 1882,
	383, 1882,
	384, 1882,
	385, 1882,
	387, 1882,
	388, 1882,
	391, 1882,
	392, 1882,
	393, 1882,
	394, 1882,
	395, 1882,
	397, 1882,
	399, 1882,
	400, 1882,
	401, 1882,
	402, 1882,
	403, 1882,
	404, 1882,
	405, 1882,
	407, 1882,
	408, 1882,
	409, 1882,
	414, 1882,
	415, 1882,
	416, 1882,
	417, 1882,
	418, 1882,
	419, 1882,
	420, 1882,
	421, 1882,
	423, 1882,
	424, 1882,
	425, 1882,
	426, 1882,
	427, 1882,
	428, 1882,
	430, 1882,
	431, 1882,
	432, 1882,
	433, 1882,
	434, 1882,
	435, 1882,
	436, 1882,
	437, 1882,
	438, 1882,
	440, 1882,
	443, 1882,
	444, 1882,
	447, 1882,
	448, 1882,
	-2, 0,
	-1, 1289,
	148, 1789,
	375, 1789,
	425, 1789,
	444, 1789,
	-2, 0,
	-1, 1358,
	1, 1835,
	441, 1835,
	443, 1835,
	444, 1835,
	445, 1835,
	446, 1835,
	-2, 606,
	-1, 1359,
	1, 1787,
	441, 1787,
	443, 1787,
	444, 1787,
	445, 1787,
	446, 1787,
	-2, 607,
	-1, 1372,
	196, 871,
	278, 871,
	285, 871,
	-2, 866,
	-1, 1377,
	132, 978,
	218, 978,
	247, 978,
	-2, 936,
	-1, 1470,
	118, 940,
	132, 940,
	190, 940,
	218, 940,
	247, 940,
	256, 940,
	389, 940,
	-2, 1332,
	-1, 1523,
	443, 1465,
	-2, 0,
	-1, 1558,
	118, 940,
	132, 940,
	190, 940,
	218, 940,
	247, 940,
	256, 940,
	389, 940,
	-2, 1048,
	-1, 1611,
	442, 1163,
	-2, 1151,
	-1, 1650,
	196, 871,
	278, 871,
	285, 871,
	-2, 447,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1212,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1213,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1214,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1906,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1907,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1908,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1231,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1232,
	-1, 1922,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1233,
	-1, 1925,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 1931,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 1933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1250,
	-1, 1934,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1251,
	-1, 1935,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1252,
	-1, 1936,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1253,
	-1, 2029,
	5, 1120,
	148, 1476,
	442, 1590,
	-2, 1581,
	-1, 2030,
	148, 1477,
	-2, 1839,
	-1, 2031,
	148, 1478,
	-2, 1714,
	-1, 2032,
	148, 1479,
	-2, 1642,
	-1, 2033,
	148, 1480,
	-2, 1676,
	-1, 2034,
	148, 1481,
	-2, 1712,
	-1, 2035,
	148, 1482,
	-2, 1780,
	-1, 2103,
	1, 1049,
	83, 1049,
	118, 1049,
	132, 1049,
	145, 1049,
	149, 1049,
	155, 1049,
	158, 1049,
	181, 1049,
	190, 1049,
	199, 1049,
	214, 1049,
	218, 1049,
	234, 1049,
	247, 1049,
	251, 1049,
	256, 1049,
	304, 1049,
	306, 1049,
	389, 1049,
	398, 1049,
	411, 1049,
	412, 1049,
	413, 1049,
	422, 1049,
	441, 1049,
	443, 1049,
	445, 1049,
	446, 1049,
	447, 1049,
	-2, 1048,
	-1, 2108,
	442, 1564,
	-2, 1576,
	-1, 2127,
	442, 1162,
	-2, 1152,
	-1, 2339,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 2340,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 2346,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1246,
	-1, 2522,
	196, 871,
	278, 871,
	285, 871,
	-2, 444,
	-1, 2593,
	443, 1535,
	447, 1535,
	-2, 1551,
	-1, 2607,
	268, 964,
	-2, 775,
	-1, 2684,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1248,
	-1, 2691,
	194, 0,
	195, 0,
	241, 0,
	-2, 1267,
	-1, 2754,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2755,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1297,
	-1, 2756,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1298,
	-1, 2760,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1302,
	-1, 2761,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1303,
	-1, 2762,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1304,
	-1, 2804,
	442, 1565,
	-2, 1577,
	-1, 2884,
	444, 1985,
	-2, 913,
	-1, 2926,
	194, 0,
	195, 0,
	241, 0,
	-2, 1268,
	-1, 2929,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1271,
	-1, 2930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1273,
	-1, 3072,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1272,
	-1, 3073,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1274,
	-1, 3083,
	194, 0,
	-2, 1305,
	-1, 3174,
	194, 0,
	-2, 1306,
	-1, 3283,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1842,
}

const sqlPrivate = 57344

const sqlLast = 68534

var sqlAct = [...]int{

	871, 3365, 3111, 3282, 3114, 3292, 3254, 3355, 3137, 2252,
	3256, 3027, 3253, 2594, 3240, 3293, 3100, 3294, 2722, 1815,
	988, 3140, 2822, 3178, 2261, 3281, 2253, 3041, 1888, 1138,
	2875, 2870, 3064, 2985, 1275, 828, 2624, 800, 1948, 2095,
	209, 893, 209, 209, 1385, 2530, 209, 209, 209, 209,
	209, 1581, 2880, 209, 2616, 2591, 2367, 791, 1570, 2618,
	2060, 569, 3087, 2823, 2293, 1553, 548, 1039, 2365, 2332,
	2249, 1131, 2629, 2226, 2229, 2499, 979, 2488, 1551, 209,
	2961, 1343, 2448, 569, 1773, 1794, 1776, 2284, 2262, 2292,
	201, 33, 1532, 2155, 665, 1766, 2464, 1765, 2209, 1693,
	2157, 2475, 1961, 2286, 2096, 2447, 1496, 2777, 3179, 2148,
	1702, 1881, 1478, 799, 139, 1885, 2328, 2091, 1150, 5,
	1726, 867, 2628, 826, 1271, 1720, 1681, 2098, 1147, 2227,
	1979, 2504, 1991, 3138, 1679, 87, 1533, 1945, 2057, 2186,
	1372, 2210, 1468, 788, 1027, 2187, 2592, 1140, 1284, 1258,
	1268, 1204, 2255, 1762, 203, 971, 570, 571, 2296, 1973,
	516, 974, 1018, 202, 2083, 1542, 2068, 2025, 953, 500,
	1459, 209, 209, 146, 524, 1962, 1386, 1384, 565, 542,
	147, 1282, 532, 1782, 641, 1234, 610, 1158, 1692, 827,
	1582, 139, 519, 976, 1491, 951, 1371, 660, 706, 1216,
	1390, 2363, 2793, 1796, 790, 2794, 1796, 1816, 527, 661,
	1796, 2254, 1552, 3393, 3384, 574, 2211, 2077, 2077, 3383,
	795, 870, 3364, 2077, 577, 2679, 1733, 3351, 3349, 1179,
	795, 2999, 2999, 2077, 59, 3314, 663, 574, 3312, 2077,
	3309, 1808, 2077, 3236, 3310, 60, 577, 2635, 3306, 3303,
	3279, 3278, 3307, 1733, 1733, 1733, 3275, 2636, 3274, 64,
	1808, 674, 1808, 3235, 3226, 3225, 3219, 2120, 2999, 2999,
	1733, 3213, 3211, 3176, 3162, 2999, 2999, 2120, 1733, 1173,
	2520, 3159, 3128, 3127, 796, 2999, 1733, 1733, 3120, 70,
	2070, 3119, 1733, 139, 1561, 2999, 3093, 3074, 954, 954,
	1733, 2120, 3055, 3023, 3017, 2998, 2648, 2077, 2077, 2999,
	2928, 2894, 2886, 776, 2120, 2887, 2887, 2799, 2789, 76,
	775, 2800, 2790, 2783, 2211, 2715, 2655, 2077, 86, 1733,
	2656, 2461, 77, 2459, 2458, 2077, 2412, 2077, 2077, 2395,
	2077, 2384, 2382, 2396, 783, 2077, 2282, 2133, 2383, 2780,
	1812, 2077, 1976, 2119, 2117, 2114, 2110, 2120, 2076, 2077,
	1733, 1811, 2077, 1005, 1729, 1812, 1000, 955, 1398, 1399,
	78, 957, 3163, 958, 1808, 2780, 176, 2069, 3018, 1733,
	2656, 2201, 2146, 1653, 2648, 2236, 2331, 1732, 1733, 2144,
	1528, 1157, 179, 1178, 1401, 1672, 1345, 2637, 176, 959,
	982, 956, 782, 781, 780, 779, 778, 774, 773, 1469,
	772, 2077, 2258, 771, 178, 1977, 2638, 1467, 770, 2976,
	1400, 2366, 2094, 1167, 769, 1398, 1399, 2313, 1420, 768,
	1469, 767, 766, 765, 764, 763, 178, 704, 1001, 703,
	702, 701, 700, 1172, 699, 698, 697, 696, 695, 59,
	694, 1401, 1797, 693, 692, 1797, 691, 177, 690, 1797,
	60, 2420, 2421, 689, 2438, 2439, 2440, 170, 688, 687,
	686, 685, 684, 968, 64, 171, 79, 1400, 683, 177,
	2924, 682, 681, 1978, 1975, 680, 673, 672, 632, 631,
	1423, 1424, 1425, 1426, 590, 589, 148, 588, 580, 2940,
	1406, 579, 578, 798, 70, 209, 555, 145, 82, 554,
	83, 553, 552, 536, 209, 199, 198, 197, 148, 196,
	195, 2435, 194, 193, 192, 191, 190, 189, 188, 176,
	1428, 1429, 1430, 187, 76, 209, 2420, 2421, 186, 185,
	184, 664, 209, 86, 116, 183, 182, 77, 181, 176,
	180, 2888, 2797, 1738, 2502, 2389, 2635, 1406, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 2378, 178, 2242, 2214,
	2111, 2102, 1818, 209, 209, 1980, 1499, 1677, 1568, 1001,
	1485, 1421, 1498, 1554, 1026, 78, 1499, 178, 1031, 2069,
	117, 1163, 1498, 2426, 2420, 2421, 2435, 1804, 209, 176,
	1795, 3299, 149, 1502, 1861, 1397, 2420, 2421, 998, 1033,
	177, 990, 209, 1497, 1143, 1143, 209, 209, 3280, 209,
	170, 2016, 2014, 1480, 3209, 2012, 2420, 2421, 171, 2010,
	177, 209, 1161, 176, 3169, 3056, 3049, 178, 1817, 209,
	170, 3110, 2978, 2960, 2441, 2959, 2947, 2008, 171, 662,
	2659, 1134, 1427, 209, 209, 209, 209, 209, 1143, 1143,
	2946, 2945, 1001, 1143, 2944, 209, 1143, 209, 2426, 148,
	1422, 178, 1974, 3166, 2436, 1166, 3164, 1171, 2938, 1177,
	177, 2937, 2420, 2421, 1016, 2438, 2439, 2440, 843, 1153,
	170, 79, 2936, 1279, 1398, 1399, 2125, 1480, 171, 2935,
	2859, 2923, 2812, 2811, 2809, 2803, 1217, 1217, 2774, 2773,
	2772, 1143, 2699, 1035, 177, 1128, 1133, 2695, 2497, 148,
	1401, 1013, 145, 82, 170, 83, 2426, 574, 2455, 1160,
	1159, 209, 171, 2446, 2419, 2243, 577, 2416, 2426, 2415,
	2413, 2402, 2435, 176, 176, 209, 1400, 1221, 2401, 2436,
	2400, 2397, 1481, 2257, 1479, 1736, 664, 2394, 2426, 116,
	209, 2372, 1294, 2437, 2371, 2364, 2420, 2421, 2283, 1297,
	2103, 1984, 1397, 967, 1770, 1396, 3391, 139, 3363, 3362,
	3315, 178, 178, 1287, 989, 1272, 2724, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 3270, 3268, 796, 2514,
	3204, 3201, 3198, 1262, 1265, 117, 3197, 2436, 3193, 3187,
	1285, 3158, 3157, 1951, 2426, 3106, 1218, 149, 3085, 2436,
	1673, 2188, 3061, 176, 177, 177, 1406, 3048, 1957, 2327,
	3060, 3039, 1377, 1378, 170, 170, 3036, 3031, 2437, 2436,
	2975, 2958, 171, 171, 2481, 1398, 1399, 1402, 1403, 1404,
	1405, 1407, 1408, 2908, 1466, 2905, 1428, 1429, 1430, 2838,
	2837, 178, 2826, 148, 148, 2441, 2825, 985, 2785, 2690,
	2649, 1401, 2610, 2432, 2433, 2434, 1512, 2580, 2420, 2421,
	2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428, 2561,
	2540, 2539, 869, 2516, 2241, 2436, 2437, 1400, 2426, 2460,
	1370, 2393, 2392, 2377, 177, 1420, 1301, 1421, 2437, 2355,
	2223, 1503, 1398, 1399, 170, 1500, 2540, 1492, 1489, 1376,
	2129, 2128, 171, 2106, 2088, 2075, 1398, 1399, 2437, 2006,
	1463, 2204, 1819, 1567, 1383, 1531, 1527, 1526, 1401, 1525,
	1524, 1523, 1375, 148, 1522, 1521, 1520, 1373, 1519, 1517,
	1516, 2922, 1401, 209, 1515, 2431, 2429, 2430, 2422, 2423,
	2424, 2425, 2427, 2428, 1400, 1514, 1513, 1423, 1424, 1425,
	1426, 796, 1512, 776, 1511, 1530, 1510, 1406, 1400, 209,
	775, 1040, 1509, 1379, 2437, 1508, 1151, 1507, 1506, 1505,
	209, 1042, 209, 209, 1393, 1394, 1422, 1482, 1464, 1143,
	569, 209, 209, 1462, 1501, 569, 209, 1428, 1429, 1430,
	2426, 209, 1457, 2431, 2429, 2430, 2422, 2423, 2424, 2425,
	2427, 2428, 1012, 1003, 995, 2174, 3181, 1539, 2422, 2423,
	2424, 2425, 2427, 2428, 1042, 3035, 2122, 2977, 2932, 1588,
	2808, 176, 1562, 2792, 1406, 1613, 2429, 2430, 2422, 2423,
	2424, 2425, 2427, 2428, 1536, 1537, 1575, 2788, 1421, 1578,
	1563, 1668, 2015, 2013, 1645, 1675, 2011, 2420, 2421, 2381,
	2009, 981, 2089, 1648, 1428, 1429, 1430, 1647, 1512, 178,
	954, 3109, 1493, 1494, 139, 3202, 1398, 1399, 2007, 3167,
	1550, 1481, 3165, 2512, 2432, 2433, 2434, 1460, 2619, 2420,
	2421, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	1697, 796, 1401, 1549, 1573, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 177, 1672, 3054, 1421, 1672, 1585, 2564, 1427,
	1028, 3019, 170, 2795, 1672, 176, 1030, 1559, 1400, 2651,
	171, 2650, 2211, 1499, 1554, 1976, 1316, 1422, 1529, 1498,
	2399, 2398, 2337, 1368, 574, 2176, 1650, 1143, 209, 574,
	1025, 148, 2836, 577, 1042, 1487, 1816, 1556, 577, 1687,
	2596, 1671, 2595, 178, 2190, 1659, 1663, 1662, 1577, 761,
	1672, 1669, 1771, 1644, 3366, 3141, 1029, 1345, 2422, 2423,
	2424, 2425, 2427, 2428, 1579, 982, 1767, 982, 1344, 2426,
	2665, 2575, 1715, 209, 209, 3088, 2254, 2726, 1977, 2387,
	209, 2127, 1992, 966, 1422, 1664, 177, 762, 1406, 1518,
	209, 2589, 3300, 1495, 1758, 1194, 170, 3311, 3308, 209,
	2631, 209, 2513, 209, 171, 2818, 3250, 209, 2871, 2290,
	1305, 3338, 3339, 1541, 3009, 1182, 627, 1717, 1192, 209,
	1719, 755, 3218, 1723, 2524, 148, 2134, 757, 753, 3388,
	3135, 1701, 1850, 2352, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 1666, 556, 1754, 1978, 1975, 3301, 751,
	2436, 2150, 1340, 2159, 1848, 2350, 3131, 1727, 3130, 1143,
	209, 1143, 2841, 748, 1757, 3129, 1143, 2150, 3026, 2852,
	209, 209, 2424, 2425, 2427, 2428, 2849, 2848, 2149, 1545,
	1143, 1143, 574, 209, 1160, 1159, 1788, 1779, 1193, 209,
	2815, 577, 2814, 628, 569, 209, 2376, 209, 1682, 209,
	1820, 209, 1683, 209, 1402, 1403, 1404, 1405, 1407, 1408,
	1660, 1548, 1722, 209, 1342, 1731, 2375, 209, 1799, 2374,
	2373, 1801, 1694, 1408, 1803, 2341, 209, 1030, 1806, 1543,
	2206, 2200, 2197, 1614, 1786, 1339, 2178, 562, 1980, 2437,
	2162, 2116, 1932, 1374, 1546, 209, 1748, 1747, 2002, 1829,
	1691, 209, 794, 1303, 1156, 2001, 2347, 1890, 1227, 794,
	1226, 2250, 1667, 804, 1544, 2996, 1030, 2348, 1746, 622,
	2353, 1042, 1298, 1695, 1696, 3217, 512, 1029, 1205, 789,
	1943, 2477, 993, 1571, 1781, 1858, 1784, 1684, 745, 2563,
	1225, 2993, 1224, 1246, 796, 825, 1188, 3069, 1821, 1686,
	507, 1868, 1941, 2666, 1588, 1588, 1285, 2177, 810, 1859,
	1613, 1613, 1825, 2123, 1203, 2855, 1029, 1865, 564, 1947,
	3116, 2316, 2109, 2169, 793, 1860, 1678, 1947, 1381, 3272,
	2668, 793, 2994, 2828, 1832, 1974, 1547, 1313, 621, 1013,
	1813, 1563, 1955, 2168, 1785, 992, 1682, 1953, 574, 2667,
	1683, 1202, 3358, 1688, 2310, 1980, 1042, 577, 2430, 2422,
	2423, 2424, 2425, 2427, 2428, 1299, 1353, 3296, 679, 1011,
	2161, 3330, 1839, 3005, 1317, 2626, 1992, 3378, 2329, 2330,
	1404, 1405, 1407, 1408, 1697, 2706, 2043, 3233, 1190, 3194,
	795, 1863, 1585, 1585, 1963, 1964, 2428, 795, 1866, 209,
	3338, 2194, 2319, 1937, 630, 629, 1338, 2349, 1796, 558,
	2627, 1938, 1963, 1989, 1939, 1205, 2351, 1944, 1673, 2188,
	1689, 1673, 2188, 1042, 209, 563, 1864, 1862, 2476, 1673,
	2188, 2572, 1867, 209, 776, 1684, 209, 776, 776, 1042,
	1367, 1877, 1689, 2523, 1878, 1879, 2567, 1686, 2024, 2583,
	2028, 2028, 2041, 2707, 1963, 1022, 1734, 2061, 2063, 1886,
	1887, 2839, 2067, 2626, 1988, 560, 2115, 1335, 796, 1857,
	2989, 2558, 2104, 2990, 983, 1673, 1670, 2147, 1714, 1345,
	620, 796, 619, 2160, 3297, 796, 1699, 2090, 2525, 659,
	1682, 2100, 2101, 2318, 1683, 1490, 2709, 749, 2107, 1959,
	759, 1688, 557, 758, 749, 1999, 1304, 1849, 2992, 2315,
	623, 3003, 1302, 3231, 736, 2850, 2238, 209, 1336, 736,
	2995, 2137, 2198, 792, 1689, 750, 954, 1986, 1651, 1847,
	792, 2554, 985, 2139, 985, 3356, 787, 1023, 561, 749,
	2914, 787, 3232, 3079, 1024, 1980, 508, 3345, 1042, 559,
	2552, 1574, 2556, 209, 1940, 2829, 3329, 3298, 2036, 1245,
	1350, 209, 1187, 1942, 139, 2140, 796, 2065, 1703, 2052,
	2118, 209, 3261, 2073, 2074, 1983, 1685, 2391, 2138, 1684,
	2081, 2085, 2086, 3206, 209, 1707, 2317, 1143, 1980, 2551,
	1689, 1686, 1559, 3117, 1456, 2555, 2084, 2099, 509, 209,
	1042, 3357, 795, 209, 209, 737, 1718, 1697, 2909, 1588,
	737, 1929, 2806, 1501, 1017, 1613, 1314, 2151, 2124, 1680,
	2916, 2991, 1006, 3295, 3337, 3004, 3379, 1704, 3335, 209,
	1300, 209, 3147, 3359, 209, 982, 510, 3038, 511, 2343,
	991, 2614, 1351, 2224, 1322, 1688, 746, 1946, 2245, 209,
	581, 1760, 982, 1538, 2173, 2195, 209, 1797, 209, 1954,
	209, 1380, 2132, 2163, 2165, 1004, 209, 1315, 1831, 209,
	1312, 209, 999, 209, 1134, 209, 209, 2131, 209, 1143,
	1143, 1143, 2180, 1143, 2203, 2135, 3328, 209, 209, 2233,
	209, 3066, 499, 1889, 1493, 1494, 209, 1585, 1708, 2216,
	2861, 2218, 1010, 1545, 2763, 1389, 2915, 209, 2080, 209,
	2302, 2154, 1352, 2956, 2278, 2279, 2171, 2208, 2189, 2191,
	2192, 2193, 1022, 2207, 1685, 2586, 2179, 1698, 209, 209,
	209, 3122, 209, 2247, 1689, 1548, 981, 2505, 981, 2196,
	1927, 1930, 1388, 738, 2256, 3121, 2256, 3104, 738, 2265,
	3373, 3008, 3184, 2082, 3241, 209, 2817, 574, 3007, 1160,
	2212, 1709, 1710, 2615, 2181, 2308, 577, 2309, 1546, 2221,
	1705, 2536, 3207, 1658, 2532, 2246, 1541, 2228, 1993, 2225,
	2705, 1780, 2289, 1769, 1768, 2267, 1742, 2237, 1926, 2182,
	2304, 3065, 2305, 1388, 1854, 139, 1654, 1706, 2489, 2274,
	1689, 2280, 1456, 2314, 1023, 2876, 2276, 2260, 1022, 1873,
	3042, 1024, 3105, 2222, 1248, 2542, 1826, 2541, 2271, 678,
	2272, 2335, 2273, 901, 2478, 2079, 2275, 671, 1387, 1725,
	1285, 2281, 2303, 2078, 2113, 2764, 2291, 1656, 2112, 2344,
	1233, 2765, 1545, 739, 793, 582, 583, 1219, 739, 1724,
	2957, 1231, 1657, 2321, 209, 2235, 3112, 1389, 2660, 3189,
	1547, 2108, 3, 205, 1220, 502, 503, 514, 1685, 520,
	502, 520, 530, 535, 1548, 1778, 551, 1721, 2324, 1387,
	1711, 740, 3028, 3342, 205, 3067, 740, 2323, 2326, 2490,
	1023, 3372, 1543, 1323, 3139, 2585, 3006, 1024, 2369, 2370,
	1695, 1696, 668, 3102, 3244, 1874, 205, 1546, 3190, 1928,
	2962, 2778, 2380, 2379, 3208, 1997, 3344, 3313, 3203, 3084,
	1365, 2955, 2854, 2183, 2184, 2449, 2689, 1544, 1347, 585,
	584, 2508, 1333, 3113, 2414, 1331, 2354, 2342, 3103, 2232,
	1329, 1327, 1042, 1712, 2205, 1325, 1319, 2175, 2462, 2130,
	1229, 1569, 1996, 2469, 2470, 1566, 1366, 796, 209, 1295,
	2450, 209, 3245, 789, 2312, 1846, 3191, 2311, 209, 2307,
	2145, 209, 209, 1042, 2506, 1856, 1836, 1646, 1504, 586,
	587, 1209, 1042, 3291, 2617, 3238, 2982, 209, 2874, 2492,
	2457, 2834, 2832, 2386, 502, 502, 747, 2816, 2613, 1547,
	2485, 209, 205, 2598, 2597, 2251, 2471, 2240, 2239, 2219,
	2493, 2494, 1810, 1809, 676, 677, 1807, 1805, 209, 209,
	209, 1802, 669, 670, 209, 2484, 1588, 209, 1800, 1798,
	1232, 1789, 1613, 1739, 209, 209, 209, 209, 209, 2496,
	2521, 1230, 987, 1737, 1728, 2509, 2501, 1716, 209, 209,
	1713, 1700, 2526, 2500, 1690, 2717, 209, 513, 3151, 2519,
	3339, 1588, 2480, 2452, 2453, 2454, 1364, 1613, 209, 1143,
	1391, 209, 2538, 3264, 1346, 2333, 2463, 1042, 1332, 3058,
	2544, 1330, 2548, 2549, 3057, 1042, 1328, 1326, 2533, 1676,
	209, 1324, 1318, 209, 209, 2491, 1228, 1184, 3153, 2167,
	2885, 2483, 985, 209, 1697, 2486, 1143, 209, 1845, 1143,
	1143, 1143, 2529, 1852, 1585, 2507, 209, 752, 754, 985,
	2599, 2150, 209, 2566, 2603, 1362, 1363, 2543, 209, 2546,
	209, 963, 2166, 1833, 2559, 3196, 2560, 209, 3171, 2573,
	2150, 2517, 2518, 2527, 1472, 2522, 2334, 2963, 1477, 1585,
	1687, 2164, 1392, 2185, 2170, 964, 1395, 2202, 1757, 515,
	1143, 1143, 982, 2172, 2578, 3237, 2579, 2633, 209, 209,
	982, 982, 209, 2647, 982, 1687, 2557, 2568, 3210, 2622,
	2621, 2511, 1398, 1399, 209, 2865, 1042, 209, 209, 1042,
	209, 2562, 2577, 2663, 2581, 2571, 1398, 1399, 982, 2576,
	2569, 2860, 2802, 2582, 2570, 1727, 209, 526, 2180, 2259,
	2066, 1727, 1649, 1580, 3354, 2510, 2537, 3371, 2420, 2421,
	2933, 2630, 1401, 1398, 1399, 2142, 2141, 2641, 2642, 2643,
	2630, 2644, 2645, 1307, 1400, 2466, 1469, 965, 2807, 1306,
	2712, 2142, 2515, 2473, 2474, 2143, 2005, 2479, 1400, 1042,
	2620, 2004, 2003, 2658, 2000, 1998, 2673, 2632, 2662, 2639,
	1042, 1588, 209, 796, 1971, 1349, 139, 1613, 1348, 983,
	2704, 983, 2646, 1467, 1465, 3380, 3096, 2692, 3052, 3030,
	2904, 2893, 1278, 2869, 2858, 2857, 2856, 2831, 2640, 2611,
	2609, 2269, 2244, 2220, 1958, 1792, 1791, 1790, 1772, 1750,
	1749, 1745, 1744, 1743, 2670, 2996, 981, 2701, 2702, 2703,
	1588, 1588, 2675, 2677, 2674, 2671, 1613, 1613, 1741, 1740,
	2727, 1382, 1361, 981, 1360, 1341, 1588, 1588, 996, 1337,
	1334, 2993, 1613, 1613, 2986, 1320, 2697, 668, 1257, 1256,
	1255, 1254, 1253, 1252, 1251, 1250, 1249, 2984, 1247, 1585,
	1242, 1241, 1240, 2988, 1239, 209, 1238, 1588, 1007, 1201,
	1200, 1199, 1198, 1613, 2468, 551, 2716, 209, 1197, 1196,
	2723, 1195, 2994, 1042, 2729, 2708, 2710, 2711, 2730, 1189,
	1183, 205, 2796, 205, 205, 1181, 1148, 2775, 205, 1180,
	2732, 209, 1009, 2740, 2791, 2495, 205, 1162, 1585, 1585,
	2767, 1008, 2987, 938, 2503, 785, 2742, 736, 848, 2728,
	1652, 760, 614, 744, 1585, 1585, 3115, 1355, 75, 1191,
	601, 1186, 69, 2830, 2768, 3249, 734, 2550, 1835, 787,
	1321, 1761, 1837, 2779, 209, 1208, 2482, 2087, 3230, 205,
	205, 2941, 1148, 2390, 139, 1585, 2784, 2781, 2782, 2813,
	2776, 3177, 3078, 1995, 205, 1486, 71, 836, 921, 2983,
	2819, 2295, 1244, 2294, 786, 1886, 2733, 209, 209, 209,
	2805, 2798, 803, 1045, 2853, 1661, 205, 205, 205, 205,
	1148, 1886, 2743, 842, 1042, 209, 1674, 2126, 551, 1143,
	205, 2027, 2842, 1584, 845, 1586, 847, 846, 737, 1587,
	2846, 1488, 2833, 844, 2835, 1583, 209, 2503, 2234, 2820,
	2989, 2851, 2771, 2990, 2889, 2263, 1236, 724, 2878, 209,
	209, 1143, 1143, 1143, 1665, 209, 209, 209, 1952, 2810,
	209, 209, 2882, 1990, 2385, 2847, 2881, 209, 2840, 1483,
	2864, 816, 838, 2900, 1987, 1002, 815, 2877, 2992, 2913,
	1042, 2487, 2180, 2625, 205, 2801, 3047, 1872, 2325, 1757,
	2995, 1869, 617, 2417, 1972, 994, 2049, 2042, 205, 2866,
	982, 2038, 1369, 1458, 2264, 2868, 1032, 819, 1950, 1474,
	2359, 2498, 2634, 535, 2121, 1880, 2879, 1759, 962, 2883,
	961, 960, 3255, 3252, 2890, 209, 1588, 2912, 1655, 2265,
	2136, 2872, 1613, 2891, 1450, 2600, 832, 2896, 1151, 2467,
	2661, 1040, 2927, 1206, 2906, 2867, 2903, 2907, 2918, 2901,
	2902, 2911, 2895, 3195, 1449, 756, 3186, 2931, 1021, 985,
	1020, 1019, 2535, 3377, 2827, 175, 738, 985, 985, 172,
	174, 985, 173, 2787, 2844, 2584, 91, 38, 37, 36,
	18, 115, 114, 1876, 113, 112, 209, 111, 110, 109,
	108, 2991, 107, 106, 105, 985, 1042, 2919, 1042, 104,
	103, 2714, 102, 101, 100, 99, 98, 97, 96, 95,
	94, 93, 2720, 92, 1585, 209, 209, 209, 35, 547,
	544, 51, 50, 2954, 90, 89, 17, 209, 34, 15,
	55, 56, 14, 209, 30, 209, 31, 81, 209, 209,
	209, 209, 209, 80, 2967, 29, 16, 28, 3001, 209,
	209, 1143, 26, 1042, 27, 1143, 12, 9, 982, 8,
	11, 2980, 2965, 2966, 784, 13, 739, 2968, 25, 144,
	143, 2970, 209, 74, 1574, 1042, 2974, 2500, 1143, 142,
	3011, 2981, 73, 141, 3032, 3002, 140, 3016, 209, 3025,
	72, 1540, 24, 10, 3000, 1956, 3012, 3013, 23, 136,
	68, 138, 137, 65, 740, 135, 502, 3044, 2979, 209,
	134, 66, 133, 2971, 1472, 1042, 2044, 3046, 132, 67,
	131, 3021, 22, 3020, 6, 2804, 3010, 205, 3059, 205,
	54, 2466, 205, 2969, 3015, 7, 3043, 3063, 3033, 2664,
	1757, 1042, 84, 1162, 85, 205, 2622, 3053, 32, 63,
	3045, 62, 3029, 205, 1162, 520, 61, 3034, 205, 1162,
	3051, 2048, 21, 981, 551, 53, 20, 3062, 166, 983,
	3024, 981, 981, 165, 1136, 981, 164, 1042, 3050, 163,
	159, 2630, 3068, 209, 158, 209, 983, 1042, 209, 3070,
	162, 160, 3040, 161, 1588, 157, 209, 130, 168, 981,
	1613, 167, 982, 3075, 155, 152, 151, 154, 156, 153,
	3086, 150, 169, 129, 58, 3099, 128, 127, 126, 209,
	125, 124, 982, 57, 3090, 19, 1210, 1213, 3091, 3092,
	3098, 2, 209, 1, 3094, 0, 0, 0, 0, 209,
	0, 802, 0, 0, 1143, 1588, 3143, 3097, 0, 209,
	0, 1613, 0, 0, 0, 0, 0, 3134, 0, 3144,
	0, 0, 3146, 3118, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 3149, 0, 2964, 3156, 0, 1291, 0,
	0, 0, 1585, 3160, 3161, 3132, 0, 3142, 0, 209,
	0, 0, 0, 3155, 0, 209, 3125, 3126, 2881, 0,
	3150, 0, 3148, 209, 0, 0, 3154, 3152, 0, 0,
	0, 205, 0, 0, 0, 3095, 0, 0, 0, 3183,
	0, 1588, 0, 1308, 0, 0, 3192, 1613, 0, 0,
	209, 209, 3182, 1585, 3180, 2622, 3170, 3175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 1143,
	0, 3205, 0, 0, 209, 0, 205, 205, 1143, 1143,
	0, 0, 0, 205, 3224, 0, 209, 985, 209, 0,
	0, 0, 0, 1777, 0, 0, 3200, 3212, 3215, 0,
	0, 3216, 205, 0, 205, 0, 205, 0, 209, 0,
	502, 3221, 3222, 3223, 209, 209, 3227, 1042, 0, 3220,
	3124, 3246, 1793, 0, 0, 3257, 0, 209, 0, 1585,
	0, 0, 0, 0, 0, 0, 3267, 0, 3269, 0,
	2973, 3265, 0, 3199, 3228, 3251, 3229, 0, 0, 0,
	3277, 0, 3234, 0, 0, 0, 3276, 209, 0, 0,
	3259, 0, 0, 551, 3271, 0, 3273, 0, 0, 3302,
	0, 0, 3247, 1148, 205, 0, 3290, 0, 3287, 3288,
	3289, 0, 3258, 0, 0, 3262, 551, 0, 0, 3304,
	0, 0, 205, 209, 3316, 0, 0, 205, 205, 3318,
	205, 3320, 205, 0, 205, 3325, 205, 3327, 3317, 3326,
	0, 3319, 209, 3321, 3323, 3324, 1851, 3322, 0, 0,
	1853, 0, 3266, 0, 0, 0, 0, 0, 3333, 205,
	3336, 3334, 0, 0, 0, 0, 209, 3257, 0, 3340,
	3341, 3343, 0, 0, 0, 985, 0, 3348, 535, 3350,
	3347, 0, 3352, 0, 551, 3353, 0, 1040, 0, 2044,
	2044, 0, 0, 0, 0, 0, 3361, 3360, 0, 207,
	0, 0, 3368, 0, 3367, 0, 3369, 0, 3370, 0,
	0, 0, 0, 3076, 3374, 0, 2265, 0, 0, 0,
	0, 981, 0, 0, 3346, 0, 0, 0, 0, 3381,
	0, 3382, 0, 0, 2048, 2048, 0, 3389, 3390, 0,
	3385, 3386, 3387, 0, 0, 0, 0, 0, 0, 3076,
	0, 0, 3394, 0, 0, 0, 0, 0, 0, 1889,
	0, 1576, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 0, 3375, 3376, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 802, 2044,
	2044, 2044, 802, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 3392, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2356, 2357, 0, 0, 1398, 1399, 0, 985,
	0, 1400, 0, 0, 1164, 0, 1168, 0, 1174, 0,
	0, 0, 502, 0, 2048, 2048, 2048, 0, 0, 985,
	0, 0, 1401, 0, 0, 0, 983, 205, 0, 814,
	0, 0, 0, 0, 983, 983, 0, 502, 983, 0,
	0, 0, 0, 0, 205, 0, 502, 0, 1400, 205,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 981,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2420,
	2421, 1406, 2438, 2439, 2440, 0, 0, 0, 0, 0,
	0, 1293, 2443, 2444, 2445, 0, 0, 0, 1296, 1730,
	0, 0, 2688, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 2420, 2421, 0, 2438, 2439, 2440, 1406, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 2435,
	0, 2694, 0, 0, 0, 0, 0, 0, 0, 1889,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1429,
	1430, 0, 1421, 0, 0, 0, 2158, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 2435, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 1421,
	0, 2426, 205, 0, 0, 0, 205, 2213, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 1451, 1452, 1453,
	1454, 1455, 0, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 1162, 0, 0, 205, 0, 0,
	0, 1422, 1827, 1828, 2426, 0, 0, 1471, 0, 0,
	0, 0, 1777, 1484, 0, 0, 2044, 2044, 0, 2158,
	0, 502, 0, 2268, 0, 0, 0, 0, 0, 205,
	1427, 0, 205, 0, 205, 0, 205, 0, 205, 205,
	0, 1148, 2436, 0, 0, 0, 0, 0, 1422, 0,
	2287, 668, 0, 2158, 0, 2441, 0, 0, 0, 205,
	0, 2048, 2048, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2436, 0, 0, 0, 0,
	0, 205, 205, 205, 0, 205, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 0, 2044, 0, 205, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 2437, 1534, 1534, 1534, 0, 0, 0, 0, 2685,
	2686, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
	2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
	0, 2048, 0, 0, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 2437, 0, 814, 0, 0, 0,
	814, 0, 0, 0, 983, 0, 0, 0, 1126, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1162, 0, 2744,
	2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754,
	2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 0, 2766,
	1401, 2432, 2433, 2434, 0, 0, 0, 0, 2431, 2429,
	2430, 2422, 2423, 2424, 2425, 2427, 2428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2432, 2433, 2434, 0, 0, 0,
	0, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 205, 0, 0, 0,
	2683, 502, 0, 0, 502, 0, 0, 0, 0, 0,
	0, 502, 0, 0, 502, 502, 1423, 1424, 1425, 1426,
	205, 0, 983, 0, 0, 0, 1406, 0, 0, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1429, 1430, 0,
	0, 205, 2158, 2531, 0, 0, 0, 2158, 0, 0,
	2531, 0, 0, 0, 0, 0, 0, 2158, 2531, 2158,
	2531, 2531, 0, 0, 0, 0, 0, 0, 0, 2199,
	0, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 205, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2588, 0, 0, 2590, 2593, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 1148, 983, 0, 0, 0,
	0, 2158, 0, 502, 0, 0, 0, 0, 1427, 0,
	2158, 2277, 0, 0, 0, 0, 983, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1777, 0, 0, 1777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2669, 0, 0,
	1148, 205, 0, 205, 0, 0, 0, 0, 0, 1870,
	0, 1875, 0, 0, 0, 0, 0, 1882, 0, 205,
	0, 0, 0, 0, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 0,
	1931, 0, 1933, 1934, 1935, 1936, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 2725, 0, 0, 0, 2044,
	0, 0, 1960, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 1985, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 0, 1126, 0, 59, 0, 0, 2044, 0,
	0, 0, 0, 0, 2048, 0, 60, 0, 0, 0,
	0, 0, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 0,
	64, 0, 0, 2040, 0, 2051, 2053, 2058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 2048, 0, 0, 0, 0, 502, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	502, 0, 0, 0, 1398, 1399, 0, 902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 3083, 0, 1162, 0, 0, 0, 2044, 86,
	1401, 0, 0, 77, 0, 0, 0, 2420, 2421, 0,
	2438, 2439, 2440, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 3107, 0, 1126, 1420, 0, 0, 551, 206, 0,
	0, 78, 0, 2048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 2435, 0, 0,
	2862, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	2682, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 0, 1406, 0, 0, 2158,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3174, 2287, 2287, 0, 0, 0, 0, 668, 668,
	2158, 2574, 0, 1777, 1777, 0, 1428, 1429, 1430, 2426,
	205, 0, 0, 0, 0, 0, 0, 79, 2215, 0,
	2217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2442, 0, 2604, 0,
	0, 2606, 2607, 2608, 0, 0, 0, 0, 145, 82,
	0, 83, 0, 0, 0, 0, 0, 1421, 0, 0,
	2441, 0, 0, 0, 0, 0, 0, 0, 2942, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 116, 0, 0, 0, 0,
	2436, 0, 2653, 2654, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1401, 0, 205, 0, 0, 0, 1427, 1162,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 149, 205, 0, 1422, 0, 1400, 0,
	0, 177, 0, 0, 0, 0, 1420, 0, 2158, 2531,
	2158, 170, 0, 0, 0, 0, 0, 0, 0, 171,
	1162, 0, 0, 0, 0, 0, 2158, 0, 2531, 2437,
	0, 1162, 1162, 205, 2158, 2531, 0, 0, 0, 0,
	148, 0, 205, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 2345, 0, 0, 0, 0, 0, 2339, 2340,
	0, 0, 0, 0, 2346, 3037, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 1126, 0, 0, 1406, 0,
	0, 2158, 0, 2360, 2361, 0, 0, 0, 0, 1985,
	0, 0, 0, 0, 0, 0, 0, 0, 2368, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 1428, 1429,
	1430, 0, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 0, 2388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2403, 2432,
	2433, 2434, 1126, 0, 0, 0, 2431, 2429, 2430, 2422,
	2423, 2424, 2425, 2427, 2428, 0, 0, 0, 1126, 1421,
	0, 0, 0, 0, 0, 0, 2420, 2421, 0, 2438,
	2439, 2440, 0, 0, 0, 0, 2158, 0, 2531, 0,
	0, 3101, 0, 0, 0, 2693, 2058, 2058, 2058, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1534, 0, 0, 0, 0, 0, 0, 0, 2472,
	0, 0, 551, 2420, 2421, 0, 2438, 2439, 2440, 0,
	0, 0, 0, 0, 0, 2593, 2435, 0, 0, 0,
	1427, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 1398, 1399, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 206, 1047, 206, 206, 1047,
	0, 1047, 206, 205, 802, 0, 0, 1126, 0, 1401,
	206, 0, 0, 2435, 0, 0, 802, 0, 0, 0,
	0, 0, 2725, 0, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 1400, 3101, 0, 2426, 0,
	0, 2553, 0, 2897, 2898, 2899, 0, 0, 0, 0,
	0, 1047, 1047, 206, 206, 0, 0, 0, 0, 1126,
	0, 0, 0, 2158, 2531, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 2426, 0, 2531, 0, 2441,
	206, 206, 206, 206, 0, 1047, 1047, 0, 0, 1162,
	1047, 1162, 0, 1047, 206, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 1406, 0, 0, 0, 2436,
	0, 3242, 0, 0, 0, 0, 2623, 1162, 205, 0,
	0, 0, 0, 0, 0, 0, 2441, 0, 0, 0,
	205, 0, 0, 0, 0, 1428, 1429, 1430, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 2436, 0, 206, 0,
	2725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 204, 0, 2676,
	0, 0, 0, 1882, 0, 0, 2158, 0, 2437, 2680,
	2681, 0, 0, 2684, 0, 0, 0, 2687, 575, 0,
	0, 0, 0, 0, 0, 3101, 2691, 0, 0, 0,
	0, 0, 0, 0, 0, 2698, 1398, 1399, 2472, 0,
	575, 0, 0, 3022, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 2437, 0, 0, 0, 2718,
	0, 0, 1401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2734, 2735,
	0, 2736, 2737, 2738, 0, 1422, 2739, 0, 1400, 0,
	2741, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2432, 2433,
	2434, 2769, 2770, 0, 0, 2431, 2429, 2430, 2422, 2423,
	2424, 2425, 2427, 2428, 0, 0, 984, 0, 0, 0,
	0, 0, 2338, 0, 0, 0, 0, 0, 0, 2786,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 568, 2432, 2433, 2434, 1406, 0,
	0, 0, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427,
	2428, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1429,
	1430, 1126, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 2821, 2824, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 206,
	206, 0, 1126, 0, 2843, 0, 1047, 206, 0, 0,
	0, 1126, 206, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 1422, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2920, 2921, 0, 0, 0, 0,
	2925, 2926, 0, 0, 0, 2929, 2930, 0, 0, 0,
	0, 0, 2934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2939, 0, 0, 1047, 206, 0, 0, 2943, 0,
	0, 1047, 0, 0, 837, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	206, 206, 0, 1401, 0, 1126, 1447, 206, 1126, 0,
	0, 0, 0, 0, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 206, 0, 206, 1400,
	206, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 88, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
	0, 0, 0, 0, 0, 204, 0, 204, 204, 1126,
	0, 0, 204, 0, 0, 0, 1047, 0, 1047, 0,
	575, 0, 0, 1047, 0, 0, 0, 0, 206, 1423,
	1424, 1425, 1426, 0, 777, 0, 0, 1047, 1047, 1406,
	0, 0, 0, 797, 0, 0, 206, 0, 0, 0,
	0, 206, 206, 0, 206, 0, 206, 0, 206, 0,
	206, 0, 0, 204, 204, 1438, 1448, 2824, 0, 1428,
	1429, 1430, 0, 972, 88, 0, 0, 0, 204, 0,
	0, 0, 0, 206, 3071, 3072, 3073, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	204, 204, 204, 204, 0, 0, 0, 0, 0, 0,
	3081, 3082, 0, 1436, 204, 0, 0, 0, 0, 0,
	1421, 0, 1126, 0, 3089, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 1043, 0, 0, 1144, 0, 1043, 0, 0,
	0, 2824, 0, 0, 0, 0, 0, 0, 0, 3123,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 802, 0, 0, 0, 0, 0, 0, 3136, 0,
	0, 1427, 204, 0, 0, 0, 0, 0, 2824, 0,
	0, 2824, 0, 0, 0, 0, 0, 1144, 1144, 1422,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 2824, 2824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1126, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 1144, 0, 0, 0, 1144, 0, 0, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 3185, 0,
	0, 3188, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 1047, 0, 0, 1126,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 59, 0, 2950,
	0, 0, 0, 2949, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 3286, 3286, 3286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 3305, 0, 0, 1126, 0, 1126, 206, 0,
	0, 1557, 76, 984, 0, 0, 204, 0, 206, 0,
	2824, 86, 2824, 0, 0, 77, 0, 0, 0, 204,
	1557, 206, 872, 0, 1047, 3286, 0, 575, 0, 0,
	0, 0, 575, 0, 0, 0, 206, 1047, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 78, 0, 0, 0, 0, 88, 0,
	88, 0, 88, 0, 0, 0, 206, 0, 0, 0,
	0, 206, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3286, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 206, 0, 206, 0,
	206, 0, 206, 206, 1126, 0, 1047, 1047, 1047, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 797, 88, 0,
	1126, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 651, 88, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 1043, 206, 206, 206, 0, 206,
	0, 0, 1144, 568, 633, 0, 1126, 0, 568, 0,
	0, 0, 0, 0, 0, 575, 1126, 0, 0, 0,
	145, 82, 206, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 1043, 0, 0,
	0, 0, 176, 635, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 664, 0, 0, 116, 636, 0,
	204, 204, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 977, 0, 0, 656, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 204, 0, 204, 637,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 777, 0, 638, 0, 0, 0,
	0, 200, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 1461, 177, 0, 0, 639, 0, 0, 640,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	1470, 171, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 655, 0, 0, 204, 0,
	1144, 0, 1288, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 575, 204, 0, 204, 0, 204, 0, 204, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 642, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 643,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 1555, 0,
	1558, 0, 0, 0, 0, 206, 658, 0, 0, 0,
	0, 0, 1144, 644, 1144, 0, 645, 0, 0, 1144,
	0, 0, 653, 0, 0, 0, 0, 0, 0, 646,
	0, 0, 0, 1144, 1144, 206, 206, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 206, 1047, 0, 647, 654,
	0, 0, 0, 0, 1047, 0, 0, 0, 648, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 650,
	0, 0, 0, 0, 649, 0, 0, 0, 0, 0,
	206, 0, 0, 1047, 206, 657, 1047, 1047, 1047, 0,
	0, 0, 0, 206, 0, 0, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 1145, 0, 1044, 0, 984, 0,
	0, 0, 0, 204, 0, 0, 0, 1047, 1047, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 206, 1047, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 1145, 1145, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 1447, 0,
	1145, 1145, 0, 0, 0, 1145, 1047, 0, 1145, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 204, 0,
	0, 0, 0, 1145, 0, 0, 0, 0, 0, 0,
	0, 204, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	575, 0, 0, 797, 0, 0, 0, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 1037,
	0, 0, 0, 0, 0, 0, 1155, 1438, 1448, 0,
	1047, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 204, 0, 204, 0,
	204, 0, 204, 204, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 204, 0, 1436, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 777, 0, 0, 777, 777,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 204, 0, 204,
	1144, 0, 0, 0, 1261, 1261, 1261, 1155, 0, 0,
	0, 0, 0, 1043, 0, 206, 206, 0, 1292, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 206, 1949, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1422, 0, 0, 1470, 0, 0, 0, 1047, 1047,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 206, 0, 1439, 0, 0, 0,
	0, 0, 1144, 1144, 1144, 0, 1144, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 972, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 1044, 0, 1437, 0,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 1047, 0, 1047, 984, 984, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1557, 0, 0, 123, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 60, 118, 206, 206, 1047, 0,
	1047, 0, 1047, 0, 0, 0, 0, 88, 64, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 1145,
	0, 0, 1047, 40, 120, 1047, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 88, 70, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 88, 1557, 88, 0, 0, 0, 42, 0,
	1564, 0, 1047, 43, 0, 204, 0, 0, 76, 0,
	0, 121, 0, 1572, 0, 0, 41, 86, 0, 0,
	0, 77, 44, 0, 0, 1043, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 88,
	204, 0, 0, 0, 204, 0, 0, 0, 45, 0,
	0, 0, 0, 204, 0, 0, 1043, 0, 0, 78,
	0, 0, 0, 0, 1047, 1043, 88, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 1145, 0, 0, 0, 0, 1145, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 1145, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 206, 204, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 206, 0, 0,
	1043, 0, 0, 0, 0, 79, 0, 0, 1043, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1949, 0, 0, 0, 1144,
	0, 0, 1144, 1144, 1144, 49, 145, 82, 0, 83,
	0, 47, 0, 1044, 0, 122, 1470, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 1752, 0, 0, 0, 0, 0,
	52, 1764, 0, 116, 0, 206, 1047, 0, 0, 0,
	0, 0, 119, 1144, 1144, 1047, 1047, 0, 0, 0,
	1237, 0, 1783, 0, 1783, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 206, 0, 1047, 0, 984, 0, 1044, 0,
	0, 149, 0, 0, 206, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 1823, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 1043, 972, 972, 0, 0, 972, 148, 0,
	1834, 4, 0, 1043, 0, 0, 1840, 0, 1841, 0,
	1842, 0, 1843, 0, 1844, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 1855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 88, 0, 88,
	0, 0, 1398, 1399, 0, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 88, 1401, 88,
	0, 1447, 0, 0, 0, 0, 705, 0, 736, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	712, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 797, 0, 0, 0, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	713, 0, 1044, 0, 741, 0, 0, 88, 0, 0,
	719, 720, 0, 0, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 737,
	714, 0, 0, 0, 1406, 0, 0, 1043, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 2105, 984, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 1144, 1144, 1144, 0, 1557, 0,
	0, 1145, 1145, 1145, 0, 1145, 0, 715, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 1436, 0,
	716, 717, 0, 0, 0, 1421, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 204, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 1043,
	1155, 1043, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	2231, 0, 727, 0, 0, 1764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 707, 725, 739, 0, 0,
	0, 0, 0, 204, 1144, 0, 1043, 0, 1144, 0,
	0, 708, 0, 0, 0, 0, 0, 2270, 0, 0,
	1261, 728, 1261, 0, 1261, 726, 1155, 1155, 1043, 742,
	743, 1144, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 1437, 729, 0, 0, 0, 204, 2306, 0, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 731, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 1044, 0, 0, 204, 0, 2320,
	1155, 2322, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 2336, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1144, 1400, 0,
	0, 1145, 204, 0, 0, 0, 1420, 0, 0, 1044,
	0, 0, 0, 1417, 204, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 1145, 0,
	0, 1145, 1145, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1145, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 1144, 1144, 0, 0, 88, 0, 0, 1044, 0,
	88, 1044, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 1436, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2528,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 1044, 0, 0, 0, 0, 0, 0, 2565,
	2231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 2601, 0, 0, 0, 2605, 0,
	0, 0, 0, 0, 0, 0, 0, 2612, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1401, 0, 1044, 1447, 0, 0, 1949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 2672,
	0, 1155, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 2678, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 2408, 0,
	0, 0, 2409, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 1145, 1145, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 88, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1436, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 0, 0, 595, 0, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	618, 0, 0, 0, 0, 0, 596, 0, 1044, 0,
	1044, 0, 0, 0, 1439, 616, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 2863,
	0, 0, 597, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1401, 2873, 0, 1447, 0,
	0, 0, 598, 0, 0, 599, 622, 0, 0, 0,
	625, 0, 0, 1145, 0, 1044, 0, 1145, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 1044, 0, 0,
	1145, 0, 0, 0, 0, 0, 1437, 0, 2910, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 1981,
	0, 0, 0, 1982, 0, 621, 0, 1044, 0, 0,
	0, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 1406, 0, 1044, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 604, 0, 0, 0, 1044,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 1044,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 1434,
	1415, 1416, 624, 0, 0, 0, 1401, 0, 0, 1447,
	0, 0, 605, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 1446,
	1420, 0, 611, 0, 0, 0, 1145, 1417, 0, 0,
	0, 0, 0, 1435, 607, 0, 0, 620, 0, 619,
	0, 3014, 0, 0, 608, 0, 0, 0, 0, 0,
	2231, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 626, 0, 623, 0, 0,
	0, 613, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 1422, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 1145, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 3108, 1437, 0,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 2948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3145, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 3168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	0, 0, 1041, 0, 0, 0, 3248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3263, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 2092, 0,
	0, 0, 0, 0, 0, 0, 0, 2093, 214, 215,
	216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453,
	1053, 1054, 1055, 1056, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 1057, 226, 227, 228, 229, 230,
	231, 1058, 1059, 232, 458, 459, 460, 1060, 233, 461,
	1061, 1046, 1062, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1063, 243, 0, 244, 245, 246, 1064,
	923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071,
	249, 250, 251, 252, 253, 254, 462, 463, 1072, 255,
	1073, 257, 256, 1074, 258, 1075, 1076, 259, 260, 261,
	1077, 262, 1078, 263, 264, 1079, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 1080, 211, 1081,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 1082, 281, 1083, 1084, 924, 282, 283, 1085,
	284, 468, 1086, 469, 285, 1087, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 1088, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 1089, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 1090, 475, 1091,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 1092, 314, 313, 1093, 315,
	477, 930, 316, 317, 931, 1094, 318, 319, 1095, 1096,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 1097, 213, 933, 1098,
	478, 479, 334, 335, 1099, 336, 337, 338, 1100, 1101,
	340, 341, 1102, 1103, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 1104, 351,
	482, 352, 483, 353, 1105, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 1106, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 1107, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 1108,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	1109, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	1110, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 1111, 419, 420, 418, 1112, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 1113, 488, 489,
	490, 491, 1114, 1115, 428, 429, 492, 430, 493, 1116,
	431, 432, 433, 0, 434, 435, 1117, 1118, 436, 437,
	438, 439, 441, 1119, 442, 1120, 440, 443, 444, 445,
	494, 495, 496, 1121, 447, 446, 497, 1122, 1123, 1124,
	1125, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2972, 214, 215,
	216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453,
	1053, 1054, 1055, 1056, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 1057, 226, 227, 228, 229, 230,
	231, 1058, 1059, 232, 458, 459, 460, 1060, 233, 461,
	1061, 1046, 1062, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1063, 243, 0, 244, 245, 246, 1064,
	923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071,
	249, 250, 251, 252, 253, 254, 462, 463, 1072, 255,
	1073, 257, 256, 1074, 258, 1075, 1076, 259, 260, 261,
	1077, 262, 1078, 263, 264, 1079, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 1080, 211, 1081,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 1082, 281, 1083, 1084, 924, 282, 283, 1085,
	284, 468, 1086, 469, 285, 1087, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 1088, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 1089, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 1090, 475, 1091,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 1092, 314, 313, 1093, 315,
	477, 930, 316, 317, 931, 1094, 318, 319, 1095, 1096,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 1097, 213, 933, 1098,
	478, 479, 334, 335, 1099, 336, 337, 338, 1100, 1101,
	340, 341, 1102, 1103, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 1104, 351,
	482, 352, 483, 353, 1105, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 1106, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 1107, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 1108,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	1109, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	1110, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 1111, 419, 420, 418, 1112, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 1113, 488, 489,
	490, 491, 1114, 1115, 428, 429, 492, 430, 493, 1116,
	431, 432, 433, 0, 434, 435, 1117, 1118, 436, 437,
	438, 439, 441, 1119, 442, 1120, 440, 443, 444, 445,
	494, 495, 496, 1121, 447, 446, 497, 1122, 1123, 1124,
	1125, 448, 449, 498, 450, 451, 452, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3077, 0, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2721, 0,
	214, 215, 216, 217, 218, 1048, 219, 1049, 1050, 1051,
	1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 1057, 226, 227, 228,
	229, 230, 231, 1058, 1059, 232, 458, 459, 460, 1060,
	233, 461, 1061, 1046, 1062, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1063, 243, 0, 244, 245,
	246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069,
	1070, 1071, 249, 250, 251, 252, 253, 254, 462, 463,
	1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076, 259,
	260, 261, 1077, 262, 1078, 263, 264, 1079, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 1080,
	211, 1081, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 1082, 281, 1083, 1084, 924, 282,
	283, 1085, 284, 468, 1086, 469, 285, 1087, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 1088,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 1089,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 1090,
	475, 1091, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 1092, 314, 313,
	1093, 315, 477, 930, 316, 317, 931, 1094, 318, 319,
	1095, 1096, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 1097, 213,
	933, 1098, 478, 479, 334, 335, 1099, 336, 337, 338,
	1100, 1101, 340, 341, 1102, 1103, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	1104, 351, 482, 352, 483, 353, 1105, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 1106, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1107, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1108, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1109, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 1110, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 1111, 419, 420, 418, 1112,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 1113,
	488, 489, 490, 491, 1114, 1115, 428, 429, 492, 430,
	493, 1116, 431, 432, 433, 0, 434, 435, 1117, 1118,
	436, 437, 438, 439, 441, 1119, 442, 1120, 440, 443,
	444, 445, 494, 495, 496, 1121, 447, 446, 497, 1122,
	1123, 1124, 1125, 448, 449, 498, 450, 451, 452, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2713, 0, 214, 215, 216, 217,
	218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054,
	1055, 1056, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 1057, 226, 227, 228, 229, 230, 231, 1058,
	1059, 232, 458, 459, 460, 1060, 233, 461, 1061, 1046,
	1062, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1063, 243, 0, 244, 245, 246, 1064, 923, 247,
	248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250,
	251, 252, 253, 254, 462, 463, 1072, 255, 1073, 257,
	256, 1074, 258, 1075, 1076, 259, 260, 261, 1077, 262,
	1078, 263, 264, 1079, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 1080, 211, 1081, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	1082, 281, 1083, 1084, 924, 282, 283, 1085, 284, 468,
	1086, 469, 285, 1087, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 1088, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 1089, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 1090, 475, 1091, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 1092, 314, 313, 1093, 315, 477, 930,
	316, 317, 931, 1094, 318, 319, 1095, 1096, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 1097, 213, 933, 1098, 478, 479,
	334, 335, 1099, 336, 337, 338, 1100, 1101, 340, 341,
	1102, 1103, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 1104, 351, 482, 352,
	483, 353, 1105, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1106, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1107,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1108, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1109, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 1110, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1111, 419, 420, 418, 1112, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 1113, 488, 489, 490, 491,
	1114, 1115, 428, 429, 492, 430, 493, 1116, 431, 432,
	433, 0, 434, 435, 1117, 1118, 436, 437, 438, 439,
	441, 1119, 442, 1120, 440, 443, 444, 445, 494, 495,
	496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448,
	449, 498, 450, 451, 452, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2587, 0, 214, 215, 216, 217, 218, 1048, 219, 1049,
	1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 1057, 226,
	227, 228, 229, 230, 231, 1058, 1059, 232, 458, 459,
	460, 1060, 233, 461, 1061, 1046, 1062, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1063, 243, 0,
	244, 245, 246, 1064, 923, 247, 248, 1065, 1066, 1068,
	1067, 1069, 1070, 1071, 249, 250, 251, 252, 253, 254,
	462, 463, 1072, 255, 1073, 257, 256, 1074, 258, 1075,
	1076, 259, 260, 261, 1077, 262, 1078, 263, 264, 1079,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 1080, 211, 1081, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 1082, 281, 1083, 1084,
	924, 282, 283, 1085, 284, 468, 1086, 469, 285, 1087,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 1088, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 1089, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 1090, 475, 1091, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 1092,
	314, 313, 1093, 315, 477, 930, 316, 317, 931, 1094,
	318, 319, 1095, 1096, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	1097, 213, 933, 1098, 478, 479, 334, 335, 1099, 336,
	337, 338, 1100, 1101, 340, 341, 1102, 1103, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 1104, 351, 482, 352, 483, 353, 1105, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1106, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1107, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1108, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1109, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 1110, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1111, 419, 420,
	418, 1112, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 1113, 488, 489, 490, 491, 1114, 1115, 428, 429,
	492, 430, 493, 1116, 431, 432, 433, 0, 434, 435,
	1117, 1118, 436, 437, 438, 439, 441, 1119, 442, 1120,
	440, 443, 444, 445, 494, 495, 496, 1121, 447, 446,
	497, 1122, 1123, 1124, 1125, 448, 449, 498, 450, 451,
	452, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1994, 0, 214, 215,
	216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453,
	1053, 1054, 1055, 1056, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 1057, 226, 227, 228, 229, 230,
	231, 1058, 1059, 232, 458, 459, 460, 1060, 233, 461,
	1061, 1046, 1062, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1063, 243, 0, 244, 245, 246, 1064,
	923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071,
	249, 250, 251, 252, 253, 254, 462, 463, 1072, 255,
	1073, 257, 256, 1074, 258, 1075, 1076, 259, 260, 261,
	1077, 262, 1078, 263, 264, 1079, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 1080, 211, 1081,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 1082, 281, 1083, 1084, 924, 282, 283, 1085,
	284, 468, 1086, 469, 285, 1087, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 1088, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 1089, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 1090, 475, 1091,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 1092, 314, 313, 1093, 315,
	477, 930, 316, 317, 931, 1094, 318, 319, 1095, 1096,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 1097, 213, 933, 1098,
	478, 479, 334, 335, 1099, 336, 337, 338, 1100, 1101,
	340, 341, 1102, 1103, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 1104, 351,
	482, 352, 483, 353, 1105, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 1106, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 1107, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 1108,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	1109, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	1110, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 1111, 419, 420, 418, 1112, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 1113, 488, 489,
	490, 491, 1114, 1115, 428, 429, 492, 430, 493, 1116,
	431, 432, 433, 0, 434, 435, 1117, 1118, 436, 437,
	438, 439, 441, 1119, 442, 1120, 440, 443, 444, 445,
	494, 495, 496, 1121, 447, 446, 497, 1122, 1123, 1124,
	1125, 448, 449, 498, 450, 451, 452, 1149, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1735, 0, 0, 0, 214, 215, 216, 217,
	218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054,
	1055, 1056, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 1057, 226, 227, 228, 229, 230, 231, 1058,
	1059, 232, 458, 459, 460, 1060, 233, 461, 1061, 1046,
	1062, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1063, 243, 0, 244, 245, 246, 1064, 923, 247,
	248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250,
	251, 252, 253, 254, 462, 463, 1072, 255, 1073, 257,
	256, 1074, 258, 1075, 1076, 259, 260, 261, 1077, 262,
	1078, 263, 264, 1079, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 1080, 211, 1081, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	1082, 281, 1083, 1084, 924, 282, 283, 1085, 284, 468,
	1086, 469, 285, 1087, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 1088, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 1089, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 1090, 475, 1091, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 1092, 314, 313, 1093, 315, 477, 930,
	316, 317, 931, 1094, 318, 319, 1095, 1096, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 1097, 213, 933, 1098, 478, 479,
	334, 335, 1099, 336, 337, 338, 1100, 1101, 340, 341,
	1102, 1103, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 1104, 351, 482, 352,
	483, 353, 1105, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1106, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1107,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1108, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1109, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 1110, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1111, 419, 420, 418, 1112, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 1113, 488, 489, 490, 491,
	1114, 1115, 428, 429, 492, 430, 493, 1116, 431, 432,
	433, 0, 434, 435, 1117, 1118, 436, 437, 438, 439,
	441, 1119, 442, 1120, 440, 443, 444, 445, 494, 495,
	496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448,
	449, 498, 450, 451, 452, 1038, 0, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 1048, 219, 1049, 1050, 1051,
	1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 1057, 226, 227, 228,
	229, 230, 231, 1058, 1059, 232, 458, 459, 460, 1060,
	233, 461, 1061, 1046, 1062, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1063, 243, 0, 244, 245,
	246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069,
	1070, 1071, 249, 250, 251, 252, 253, 254, 462, 463,
	1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076, 259,
	260, 261, 1077, 262, 1078, 263, 264, 1079, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 1080,
	211, 1081, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 1082, 281, 1083, 1084, 924, 282,
	283, 1085, 284, 468, 1086, 469, 285, 1087, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 1088,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 1089,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 1090,
	475, 1091, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 1092, 314, 313,
	1093, 315, 477, 930, 316, 317, 931, 1094, 318, 319,
	1095, 1096, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 1097, 213,
	933, 1098, 478, 479, 334, 335, 1099, 336, 337, 338,
	1100, 1101, 340, 341, 1102, 1103, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	1104, 351, 482, 352, 483, 353, 1105, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 1106, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1107, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1108, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1109, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 1110, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 1111, 419, 420, 418, 1112,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 1113,
	488, 489, 490, 491, 1114, 1115, 428, 429, 492, 430,
	493, 1116, 431, 432, 433, 0, 434, 435, 1117, 1118,
	436, 437, 438, 439, 441, 1119, 442, 1120, 440, 443,
	444, 445, 494, 495, 496, 1121, 447, 446, 497, 1122,
	1123, 1124, 1125, 448, 449, 498, 450, 451, 452, 1970,
	0, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 1967, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 1968, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 1966, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 1969, 0, 0, 0, 0, 0, 0, 835,
	1965, 0, 0, 0, 798, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 176, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 178, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 1286, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 170, 448, 449, 498, 450,
	451, 452, 809, 171, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 1475, 1473, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 176, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 178, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 1286, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 170, 448, 449, 498,
	450, 451, 452, 809, 171, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 1475, 2358, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 176, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 178, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 1286, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 170, 448, 449,
	498, 450, 451, 452, 809, 171, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 1475, 1473, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 2054, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 2059, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 2055, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 2056, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 801, 833, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 813, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 3260, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 813, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 3133, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 813, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 2884, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 1535, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 2700, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 1884, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 1883, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 813, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 1535, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 2059, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	1473, 0, 0, 0, 2064, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 2062,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 2050, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 2039,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 2037, 833, 2029, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	2032, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 2033, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 2034, 2031, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 2035, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	2030, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 2026,
	833, 2029, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 2032, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 2033, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 2034, 2031, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 2035, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 2030, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 1481, 0,
	835, 0, 0, 0, 0, 0, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 1871,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	1176, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1175, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 1170, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1169,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	1165, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 3285, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 3284, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 3283, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 3285, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 3284, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 0, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	2047, 0, 0, 0, 0, 2045, 2046, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 0, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 3285, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 0, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 0, 0, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 0, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 0, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	3284, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 798, 0, 986,
	0, 0, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 214, 215, 216, 217,
	218, 833, 219, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	913, 232, 458, 459, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 973, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 0, 918, 479,
	334, 335, 0, 336, 337, 338, 0, 978, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 980, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	944, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 945, 430, 946, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 440, 443, 444, 445, 1286, 495,
	496, 0, 447, 446, 497, 986, 0, 0, 170, 448,
	449, 498, 450, 451, 452, 0, 171, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 0, 970, 0, 1560, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 913, 232, 458, 459,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 973,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 213, 933, 0, 918, 479, 334, 335, 0, 336,
	337, 338, 0, 978, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 980, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 176, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 944, 0, 419, 420,
	418, 178, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	945, 430, 946, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 912, 442, 0,
	440, 443, 444, 445, 1286, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 170, 448, 449, 498, 450, 451,
	452, 0, 171, 0, 0, 2465, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 1560, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 913, 232,
	458, 459, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 973, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 0, 918, 479, 334, 335,
	0, 336, 337, 338, 0, 978, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 980, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 945, 430, 946, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 912,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 0, 969, 0, 986, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 970, 914, 975, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 913, 232, 458,
	459, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	973, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 213, 933, 0, 918, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 980, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 945, 430, 946, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 912, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 986, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 0, 970, 0, 975, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 913, 232, 458, 459, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 973, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 213, 933,
	0, 918, 479, 334, 335, 0, 336, 337, 338, 0,
	978, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	980, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 945, 430, 946,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 912, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 986, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 0, 970, 0,
	975, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 913,
	232, 458, 459, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 213, 933, 0, 918, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 980, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 945, 430, 946, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	912, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 798, 0, 1142, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 1462, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 176, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 178, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 1286, 495, 496, 0, 447,
	446, 497, 1283, 0, 1142, 170, 448, 449, 498, 450,
	451, 452, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 148, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 176, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	178, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 1286, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 170, 448, 449, 498, 450, 451, 452,
	0, 171, 0, 0, 0, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 2652, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 986, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 0, 0, 0,
	1290, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 913,
	232, 458, 459, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 213, 933, 0, 918, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 945, 430, 946, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	912, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 798, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 176, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 178, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 1286, 495, 496, 0, 447,
	446, 497, 208, 0, 0, 170, 448, 449, 498, 450,
	451, 452, 0, 171, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 148, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 208, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	1565, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 208, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 2602, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	208, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 2266, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 675, 0, 567, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 2724, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 573,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 572, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 566, 0, 567, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 576,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 573, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 572, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 567,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 576, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	573, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 1838, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 572, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 567, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	576, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 573, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 572, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 576, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 1311,
	0, 1142, 1141, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 576, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 1310, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 1309, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 1281, 0, 1142,
	1141, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1280, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 1277, 0, 1142, 1141, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1276,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 1215, 0, 1142, 1141, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1214, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1212, 0, 1142, 1141, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1211, 471, 472, 926, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 1135,
	0, 1142, 1141, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1137, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 1142, 1141, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1142, 1141, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 1142, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 2159, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 2156,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 2301, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	2162, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 2298,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 2300, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	2297, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	2161, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 2299, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 2159, 233, 461, 0, 0,
	2153, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 2156, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 2162, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 2152, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 2161, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 2160, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1356, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 1359, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 1357, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	1358, 446, 497, 1130, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1132, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 978, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1127, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1129, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 978, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1034,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1036, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 978,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 529, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 528,
	218, 518, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 521, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 522, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 523, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 517, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 518,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 521, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 522, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 523, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 978, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 2230, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1824, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 1763, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1756, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1755, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1751, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1753, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1270,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1269, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1267, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1266, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1264, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1263,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1260, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1259, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1235, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1152,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1154, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 521, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 522, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 523, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 667, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 666,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 506,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 505, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 504, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 2097, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 208,
	2288, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 2845, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 208, 2288, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 2285, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 1830, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1822, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 549, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	1014, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 550, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 546, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 545, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1775, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1774, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 549,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 539, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	550, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 546, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 1289, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 545, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1274, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1273, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1223, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1222,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1207, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1146, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 549,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 1014, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	550, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 546, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 545, 489,
	490, 491, 0, 0, 428, 1015, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 997, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 549,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 539, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 537, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 538, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	550, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 540, 381,
	0, 382, 386, 387, 546, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 541, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 545, 489,
	490, 491, 0, 0, 428, 543, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 533, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	534, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 531, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 525, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 501, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 2547,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 2545, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 2534, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 2248, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 534, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 1787, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 0, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1243, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1185, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 952, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 0, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 0, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 0, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 0, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1401, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 1400, 0,
	0, 0, 0, 1406, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 1436, 1406, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1427, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1439, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 0, 1400, 0, 0, 2696, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 0, 1400,
	0, 0, 2411, 0, 1406, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 1436, 1406,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1427, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 1439, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 0, 1400, 0, 0, 2410, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 0,
	1400, 0, 0, 2407, 0, 1406, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 1436,
	1406, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1427, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 1439, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 0, 0, 0, 0, 1400, 0, 0, 2406,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426,
	0, 1400, 0, 0, 2405, 0, 1406, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	1436, 1406, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1427, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 1439, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 0, 0, 0, 0, 1400, 0, 0,
	1982, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425,
	1426, 3243, 1400, 0, 0, 0, 0, 1406, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 1436, 1406, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1427,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 1439, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 0, 3239, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424,
	1425, 1426, 3173, 1400, 0, 0, 0, 0, 1406, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 1436, 1406, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	1427, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1439, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 3172, 1400,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423,
	1424, 1425, 1426, 3080, 1400, 0, 0, 0, 0, 1406,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 1436, 1406, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1427, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 1439,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 2997,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	1423, 1424, 1425, 1426, 2953, 1400, 0, 0, 0, 0,
	1406, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 1436, 1406, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1427, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	1439, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	2952, 1400, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1423, 1424, 1425, 1426, 2951, 1400, 0, 0, 0,
	0, 1406, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 1436, 1406, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1427, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1439, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 2917, 1400, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1423, 1424, 1425, 1426, 2731, 1400, 0, 0,
	0, 0, 1406, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 1436, 1406, 3332, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1427, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 1439, 0, 0, 2333, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	2362, 0, 0, 1400, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 2334, 0, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0,
	0, 0, 0, 1406, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 1436, 1406, 0,
	2450, 0, 0, 2449, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1427, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2072, 0, 0, 1422, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1439, 0, 2071, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 0, 1400,
	0, 0, 0, 0, 1406, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 1436, 1406,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1427, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 795, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 1439, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 0, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1401, 0, 0,
	1447, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 1436,
	0, 1420, 0, 0, 0, 0, 1421, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 1427, 2456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	1439, 0, 0, 0, 1444, 1445, 0, 1434, 0, 0,
	0, 2451, 1415, 1416, 1401, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 2719, 0, 1421, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1446, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	1406, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 1438, 1448, 1439, 0,
	1428, 1429, 1430, 0, 1434, 0, 0, 0, 0, 0,
	0, 1401, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 1436, 1420, 0, 0, 0, 0,
	0, 1421, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 1435, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 0, 1406, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 1439, 0, 0, 1444, 1445,
	0, 1434, 0, 0, 0, 2404, 1415, 1416, 1401, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1446, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2418, 0, 1437, 0, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 1427,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 1406, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	1438, 1448, 1439, 0, 1428, 1429, 1430, 0, 1434, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 1436, 1420,
	0, 0, 0, 0, 0, 1421, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 1435, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 1439,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1446,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 1427, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 1439, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 1610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 1622,
	1604, 1611, 1594, 1632, 1631, 0, 0, 1596, 1595, 0,
	0, 0, 0, 0, 0, 1642, 1643, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 0, 1629, 1628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1626, 1624,
	1625, 0, 0, 0, 0, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 0, 0,
	1606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1615, 1609, 1617, 1619, 1620, 1621, 1616, 0, 1614,
	0, 0, 0, 0, 0, 0, 0, 0, 1638, 1639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1630, 0, 0, 0, 1607, 0, 1608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1623, 0, 0, 0, 1591, 1589,
	1590, 1593, 1592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1599, 1600, 1602, 1603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1618, 1601,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1597, 0, 1634,
	1635, 1636, 1637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1605, 0, 0,
	0, 0, 1612, 1640,
}
var sqlPact = [...]int{

	7266, -1000, -54, -1000, -1000, -1000, -1000, -1000, 105, 103,
	101, 100, 95, 94, 93, 88, 83, -1000, -1000, -1000,
	82, -1000, -1000, 81, -1000, 80, 79, 78, 77, -1000,
	75, 74, -1000, -1000, -1000, -1000, 72, 71, 70, 48159,
	1571, 57509, 49377, 1404, 1995, 42873, 57101, 42465, 56693, 56285,
	68, -1000, 55877, 67, 66, 64, -1000, -1000, 61, 1272,
	34683, 57, 56, 53, 1778, 52, 50, -1000, 49, -1000,
	8865, 1141, -1000, 44, 43, -1000, 6299, 207, 48969, 1955,
	42, 41, 34274, 1947, -1000, -1000, 1179, -1000, -1000, 40,
	37, 36, 33, 27, 26, 25, 24, 23, -1000, 18,
	13, 11, 9, 8, 5, 3, 2, 1, 0, -1,
	-3, -4, -5, -6, -8, -1000, 7834, 1416, 1291, 1277,
	1256, 1249, 1255, 801, -10, -11, -12, -13, -14, -16,
	-1000, -1000, -21, -27, -32, -35, -1000, -37, -38, 76,
	-39, -40, -41, -42, -43, 2533, 1948, 1271, 501, 16360,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	61529, 57911, -44, -74, -46, -1000, 2259, 771, 28962, 7266,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	342, -1000, -1000, -1000, 167, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1410,
	582, -1000, -1000, -1000, 55469, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57911, -1000, 1551, -9, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 581, -1000, 1544, 215, 1499, -1000,
	-1000, -1000, -1000, -1000, 57911, -1000, -1000, 2529, 2520, 1497,
	580, 55067, -1000, 1742, -1000, 741, 18960, -1000, 982, -1000,
	18960, 165, -1000, -1000, -1000, -1000, -1000, 42057, 13343, 41649,
	41241, 38397, 54659, 12925, 47757, 1009, -1000, -1000, -1000, -1000,
	-1000, -56, 35889, 57911, -1000, 147, -1000, -1000, -1000, -1000,
	-1000, -1000, 25148, 421, 24703, 277, 24258, 227, -1000, -1000,
	-1000, -1000, 2517, 2513, 865, 2508, 2148, 61127, 1332, 2507,
	1220, 934, 818, 2499, 2497, 2496, 2490, 2489, 2488, 2487,
	1121, 54251, 1966, 37979, 37561, 48159, 48159, 1801, 53843, -1000,
	-1000, 1058, 1026, -1000, -1000, -1000, -1000, 2078, 1979, 1968,
	47349, -1000, -1000, 2484, 2482, 2480, 2479, 2478, 60725, 1329,
	2476, 1737, 2474, 2473, 2472, 2471, 2470, 2469, 2468, 2467,
	2466, -1000, 46941, 46533, 46125, 45717, 53435, 37143, 36725, -1000,
	-1000, -1000, 30590, 6040, 53027, 31428, 48159, -1000, -1000, 25579,
	54, -1000, -1000, -1000, 1941, -1000, 25579, 54, -1000, 1400,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1640, 1238, 2361,
	36307, 1465, 1085, 2074, 2463, 1772, 2073, 2069, 2068, 2063,
	2060, 2458, 1316, 2457, 1159, 2453, 1196, 2056, 2393, 1494,
	40833, 2452, 2450, 2183, 2048, 1938, -1000, -1000, -1000, -1000,
	1151, -1000, -1000, -1000, 43275, -1000, -1000, 1389, -1000, -1000,
	1389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 998, 59921,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1264, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1645, -1000, 1456, -1000, -1000, 2449,
	1948, 1740, 2174, 2174, 2174, 2238, 332, 329, -1000, 76,
	-1000, -1000, 67688, -1000, -1000, 25579, 25579, 25579, 25579, 25579,
	1463, -1000, 570, -1000, -1000, 657, -1000, 561, 488, -1000,
	-1000, -1000, -1000, -1000, -1000, 556, 2399, -1000, 412, -1000,
	-1000, -1000, -1000, 2358, -1000, 15484, -1000, -1000, -1000, 312,
	555, 25579, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 136, 751,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 476, 1350, 475, 475, 475, -1000,
	-1000, 815, -1000, -1000, -1000, 171, 473, 161, 469, -1000,
	-1000, -1000, -1000, 1963, 547, 546, -1000, 545, 543, 540,
	-1000, -1000, -1000, 534, 532, 530, 524, 523, 512, 508,
	507, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 811, -1000,
	506, 504, 503, 502, 499, 498, 497, 495, 494, -1000,
	-1000, -57, 57911, -1000, 342, -57, -1000, -1000, 493, -1000,
	19391, 19391, 19391, -1000, -1000, 1532, 25579, -1000, 1823, -1000,
	422, -236, 723, 29774, -1000, 28131, 723, 625, 32648, -1000,
	1937, -1000, -1000, 491, 134, -1000, -1000, -1000, 1933, 57911,
	13759, 48159, 48159, -1000, -1000, 25579, -1000, -1000, 38813, 35487,
	57911, 48561, 2309, 68128, 35487, 57911, 1962, -1000, -1000, -1000,
	57911, -1000, 25579, -1000, 2308, 1656, -64, -1000, -1000, -1000,
	-1000, -1000, 1710, 1744, 923, 1172, -1000, 18960, 2134, -1000,
	-1000, -1000, 133, 13759, -1000, 1453, 2065, 1036, -1000, 1612,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1320, 2062,
	-1000, 1664, 2061, 1312, -1000, -1000, 789, 2058, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1440, -1000, -1000,
	2160, -1000, -1000, 1663, 2055, -84, 38813, 35889, -60, -1000,
	-1000, -68, -1000, 12507, 67688, -1000, -1000, -1000, 67688, 636,
	-1000, -1000, 2054, -1000, 67688, 434, -1000, -1000, 2044, -1000,
	-1000, -1000, 2447, -1000, 2446, 1677, 2431, 2430, 2429, -1000,
	1248, 1340, 2428, -1000, 2427, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45309, 44901, 817, -1000, 1530, -1000, -1000, 44493,
	783, 1675, -1000, -1000, 1674, -1000, 740, -1000, 2426, 52619,
	1829, 783, 1672, -1000, -1000, -1000, -1000, -1000, 48159, -1000,
	48159, -1000, 48159, -1000, 1140, -1000, 60323, -236, -1000, -1000,
	-1000, -1000, -1000, 2042, 2425, 2424, 2423, -1000, 57911, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2040,
	-1000, -1000, 153, 2039, -1000, 153, 2032, -1000, 150, 2028,
	-1000, -1000, 1485, 2027, -1000, -73, 2024, -1000, -1000, -73,
	2023, -1000, -82, -1000, -1000, -1000, 771, -1000, 30182, 52211,
	38813, 753, 490, 67688, -1000, 38813, 67688, -1000, -1000, 51803,
	44091, -1000, -1000, 1082, 1746, -1000, -1000, -1000, -1000, 38813,
	38813, -1000, 51395, -1000, -1000, -1000, 1462, 2190, 48159, -1000,
	-1000, 1961, -1000, 35085, 48159, -1000, 48159, -1000, 48159, -1000,
	48159, -1000, 48159, -1000, -1000, -1000, -1000, -1000, 2093, 1282,
	1260, -1000, 57911, -1000, -1000, 2176, 57911, -1000, -1000, -1000,
	1708, -1000, -1000, -1000, -1000, 48159, -1000, -1000, -1000, -1000,
	-1000, -1000, 1960, -1000, 1239, -1000, 1079, -1000, -1000, 157,
	-1000, -1000, -64, -1000, 59921, -1000, -1000, 1948, 1740, -1000,
	57911, -1000, -1000, -1000, 1948, 1588, 1791, 23813, 1800, 25579,
	76, -1000, -1000, 76, 76, 18529, -1000, -1000, 68128, 68128,
	13759, 1016, 25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579,
	25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579,
	25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579,
	25579, 25579, 25579, 25579, 25579, 25579, 25579, 1701, 25579, 997,
	25579, 25579, 25579, 25579, 1302, -1000, -1000, 1421, 371, 1446,
	-1000, 2342, 2342, 2342, 67855, 67855, 386, 2422, 657, -1000,
	25579, -1000, 54, 25579, 14177, -1000, 2386, 1047, -1000, -1000,
	329, 8636, 1671, -1000, 328, 14622, -1000, -1000, -1000, 15484,
	488, 23368, 25579, 802, 67688, 12091, 1944, 1890, -1000, 2377,
	-1000, -1000, 2358, -1000, -1000, -1000, -1000, 2376, 1014, 1007,
	2374, -1000, 2373, 2368, 487, 645, 627, 623, 620, 619,
	25579, 25579, 25579, 25579, 25579, 25579, 25579, 25579, -1000, 22937,
	22492, 22047, 26872, 21602, 25579, 15915, 21157, 20712, 57911, -57,
	2306, 25579, 142, -1000, 66531, -1000, 142, 142, 483, -85,
	67688, 1764, 1756, 29368, 1684, 1467, 1467, 1467, -1000, 482,
	631, 723, 9578, 49779, 1470, 723, 723, 127, 162, 327,
	27725, 1823, 49779, -1000, -1000, 48159, 481, 14177, 13759, 1103,
	-87, 126, 1774, 1770, -1000, -88, 753, 996, -59, -1000,
	4358, -90, -1000, 1003, -1000, -1000, -1000, -1000, 254, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 803, 479, 478, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 476, 1350, 475, 475,
	475, -1000, -1000, -1000, 171, 473, 161, 469, -1000, -1000,
	-1000, -1000, -1000, -1000, 1931, -68, 48561, 761, -96, 878,
	-64, -1000, 1389, -1000, 1366, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2398, -1000,
	2347, -1000, -1000, 2367, -58, -1000, -1000, 13759, -1000, -65,
	1232, -1000, 40425, 2205, 2186, 2153, 1139, -1000, 1106, 2236,
	43275, 2256, 813, -1000, 1929, -1000, -1000, 736, 1077, 991,
	43275, 1664, -1000, 68128, -1000, 1826, 2235, 1115, 1126, 1115,
	1115, 1118, -1000, 43275, 987, 1384, 38813, -1000, 986, -1000,
	-66, 2250, 719, -1000, 1926, 985, -1000, -1000, 48159, 13759,
	720, -60, 35889, 57911, 125, -1000, 25579, 54, 25579, 54,
	-1000, -1000, 2020, -1000, -1000, -1000, 2421, 1258, 1736, -1000,
	-1000, -1000, 468, 1670, 1664, 1668, -1000, -1000, 43683, 1921,
	57911, 1793, -62, 48159, -1000, -1000, 1378, -1000, 2019, 2018,
	452, 2420, -1000, 1527, 1666, -1000, -1000, -1000, 59519, 1028,
	2016, 795, 311, 2305, 311, 33460, -1000, 57911, -1000, 57911,
	-1000, -1000, -1000, 2419, -1000, 48159, -1000, -1000, 48159, -1000,
	48159, -1000, 48159, -1000, 48159, 48159, -1000, 57911, 38813, 38813,
	38813, 4358, 39621, -97, 325, -1000, 50993, 57911, 841, 40023,
	-206, 720, -1000, 720, -1000, 48159, 1954, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57911, -1000, 57911, -1000,
	-1000, -1000, -1000, -1000, -1000, 1153, -1000, 1952, -1000, 1949,
	-1000, -17, -1000, -1000, -1000, -1000, 1356, 48159, 48159, 48159,
	-1000, 43275, -1000, -1000, 1948, -1000, -1000, -1000, -1000, -1000,
	67688, -1000, 387, -1000, -1000, 67688, 1197, 1784, -1000, 1784,
	-61, -1000, 66150, 1747, 48159, -1000, -1000, -1000, -1000, -1000,
	733, 1075, 1075, 915, 915, 915, 915, 2315, 683, 901,
	3408, 7791, 7791, 7791, 7791, 7791, 7791, 7791, 7791, 4992,
	414, 414, 4992, 4992, 4992, 4992, 4992, 414, 414, 414,
	7791, 7791, 7791, 67855, 9139, 5245, 25579, 25579, 980, 1413,
	371, 4695, 25579, 357, 357, 357, 357, -1000, 1155, -1000,
	-1000, -1000, -1000, 1918, 467, 26872, 26872, -1000, -1000, -1000,
	-1000, 15053, 25579, -1000, -1000, -1000, -1000, 20267, -1000, -1000,
	65769, -250, 322, -214, -26, -1000, 25579, 25579, 25579, 321,
	-1000, 318, -1000, -1000, 975, -1000, 974, 971, 951, -1000,
	461, 122, 25579, 57911, -1000, 63483, 628, -99, -1000, -102,
	1096, -1000, 25579, 111, -1000, 1447, 460, 459, 314, -104,
	308, 732, 731, 307, 305, 298, 25579, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 67541, 63177, 63102,
	62796, 8305, 62721, 62415, -107, 297, -1000, 1916, -214, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 296, -1000, 294, -1000,
	67374, -214, 291, 4476, -1000, 26872, 26872, 26872, -1000, 290,
	-1000, 66225, -1000, 67227, 19836, 19836, 19836, 285, 67060, 25579,
	-214, -109, -1000, -110, -1000, -1000, 457, -112, 795, 19391,
	28553, 13759, -1000, 795, 795, 25579, -1000, 25579, 29368, 29368,
	1160, 1755, 29368, -1000, -1000, -1000, -1000, 49779, 401, 723,
	49779, -1000, 2358, 1782, -1000, -1000, -1000, 57911, 342, -1000,
	49779, 49779, 13759, 723, -1000, 275, 31834, -26, 110, -1000,
	-1000, 13759, 1862, 1862, -1000, 1913, 57911, 2321, -1000, -1000,
	68128, -1000, 653, 791, -1000, 2364, 451, -1000, 2358, 2358,
	57911, 132, 18960, -1000, 1389, -1000, -1000, 1185, -1000, 1333,
	-1000, -1000, -1000, -1000, 18960, -1000, 1597, 48159, 57911, 57911,
	-1000, -1000, 1665, 59117, 1662, 68128, 57911, -1000, -1000, 449,
	448, 1743, 1741, 57911, 57911, 58715, 58313, 57911, 1434, 25579,
	1442, 1305, 54, -1000, 54, 447, 1021, 48159, 48159, 1280,
	-1000, -1000, -1000, -1000, -1000, 48159, -1000, -1000, 2363, -1000,
	1115, -1000, -1000, -1000, 1115, 1664, 1265, 48159, 38813, 788,
	57911, 1387, 54, -1000, 54, 435, 13759, 1283, -1000, 1860,
	-1000, 1610, -1000, -1000, 11675, 67688, -1000, 67688, -1000, 57911,
	-1000, 814, 57911, 40023, 757, 2015, -1000, 1664, 2014, 342,
	-1000, -1000, 33054, -68, 753, 38813, 48159, -62, 38813, 38813,
	38813, 2418, 430, 2417, -1000, 48159, 2009, 1520, 1654, 2000,
	673, 57911, 1476, -1000, 25579, 1289, -1000, 32242, 827, 57911,
	1201, 109, -1000, -1000, -1000, -28, 57911, -1000, 2416, -1000,
	-1000, 153, 153, 153, -1000, 150, 1485, -1000, -73, -73,
	-1000, -1000, 4358, 753, -63, 428, -1000, 716, 714, 31012,
	38813, -117, -1000, -1000, -1000, -1000, -1000, 48159, 57911, 474,
	1812, 57911, -1000, 753, -1000, 787, -1000, 1073, -68, -68,
	-1000, 1148, 1129, 57911, -1000, 13759, 57911, 48159, 13759, 48159,
	-1000, -1000, -1000, -1000, -1000, 1197, -1000, 25579, -1000, -1000,
	-1000, 18529, -1000, -1000, -1000, 48159, -223, 25579, 25579, 4443,
	3923, 25579, 26872, 26872, -1000, 25579, 3455, -1000, -1000, -1000,
	-1000, -1000, 1908, 427, 25579, 68128, 4915, 3581, -1000, 274,
	62340, 4992, -1000, 25579, -1000, 269, 18098, -1000, 66606, -36,
	-36, -1000, 2395, 1680, 1354, 1397, 1164, 2362, 11259, -214,
	-118, -1000, -1000, 651, -1000, 2070, -1000, 25579, 66912, 10843,
	-1000, 33866, 796, 1476, -1000, -1000, 2358, 728, -1000, -1000,
	-1000, 728, -1000, 65463, 68128, 68128, 25579, 25579, -1000, 25579,
	25579, 25579, -1000, -1000, 25579, -1000, -1000, 1907, 25579, -1000,
	68128, 68128, 26872, 26872, 26872, 26872, 26872, 26872, 26872, 26872,
	26872, 26872, 26872, 26872, 26872, 26872, 26872, 26872, 26872, 26872,
	26872, 1726, 26872, 2337, 2337, 2337, -1000, 1945, 1907, 25579,
	25579, 68128, 267, 266, 265, -1000, 25579, -214, -1000, -1000,
	4358, -1000, 1886, -1000, -98, -1000, 1823, -1000, -1000, 1886,
	1886, -120, 67688, -1000, 1160, -1000, 426, 25579, 29368, -1000,
	616, -1000, -125, -1000, 49779, -1000, 602, -245, -1000, 708,
	-1000, 342, -1000, -1000, -1000, 108, 49779, -1000, -126, -1000,
	2298, 262, 13759, -1000, -1000, -1000, -1000, -1000, 54, -68,
	1489, -1000, 2360, -1000, 599, 261, 2358, 260, 259, -68,
	57911, -1000, -64, -1000, -1000, -1000, -1000, -1000, -1000, 947,
	945, -1000, 2008, -1000, 1647, -1000, 835, -1000, 1223, 25579,
	25579, 424, 420, 1351, 2415, 2003, 1485, 2002, 1485, -1000,
	-1000, 745, -1000, 67688, 418, 417, -1000, -65, 1216, -1000,
	-1000, 25579, 25579, 50587, -1000, 2160, -1000, 932, -1000, -1000,
	-1000, 1664, 931, -1000, -1000, 1377, -1000, -1000, -1000, -1000,
	25579, -1000, -66, 924, 753, 1904, 1087, -1000, 2414, 2413,
	2412, 257, -67, -1000, 2297, 1581, 57911, 48159, 48159, 2281,
	720, -1000, 2358, -1000, -1000, -1000, -1000, 783, -1000, -1000,
	2411, -1000, 840, 13759, 48159, 1999, 1725, 673, 39219, -1000,
	783, 1791, -1000, 67688, -1000, 1201, 17653, 2155, -131, -1000,
	107, -1000, -1000, -1000, 795, 33460, 29368, 25579, 2409, -132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50185, 50185,
	38813, 38813, 38813, 753, 57911, 57911, 40023, 2408, 413, 57911,
	57911, 411, -1000, -1000, -1000, 1484, 48159, -1000, -1000, 774,
	-1000, -1000, 1403, 1591, -1000, 1498, 65388, -1000, 2170, 13759,
	2301, 357, 25579, 25579, 834, 671, 450, 357, 25579, 25579,
	68128, 6788, -133, 25579, 25579, -1000, 25579, 597, 67688, 2345,
	25579, 256, 249, 238, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 235, -1000, -1000, -1000, -1000, -1000, 67688, 25579,
	55, -1000, -1000, -1000, 61931, -1000, 25579, 221, 218, -1000,
	-1000, -1000, 217, 203, 8968, 5626, 65082, 65007, 64701, 67688,
	1945, 67688, -1000, -1000, 867, 867, 1088, 1088, 1088, 1088,
	2337, 1056, 595, 615, 525, 525, 525, 583, 755, 755,
	525, 525, 525, 1903, 1735, 399, 4962, -1000, -1000, 67688,
	67688, 202, -1000, -1000, -1000, -214, 200, 1882, 2229, -1000,
	29368, 1882, 1882, -1000, -1000, 57911, 67688, -1000, -236, -1000,
	2358, -1000, -1000, 1782, -1000, 10007, -1000, 13759, -1000, -1000,
	31834, -1000, 398, -1000, -25, -1000, -1000, 596, -1000, -1000,
	199, -1000, -1000, -68, 57911, 57911, 57911, 1997, -1000, 2401,
	-1000, 64626, -138, -1000, 66150, 25579, 57911, -1000, 1402, 1787,
	859, -1000, 57911, -1000, 57911, -1000, -1000, 57911, 57911, 48159,
	57911, 57911, -139, 67688, -69, -1000, 706, -1000, 48159, 48159,
	38813, -140, 13759, -1000, 38813, 927, -1000, -1000, -1000, 1833,
	54, -1000, 2407, 395, 1664, 54, -1000, 594, -1000, -1000,
	394, 57911, 1516, 389, 13759, 1731, 673, 39219, -1000, 1028,
	1201, -1000, -1000, -70, -1000, 385, 54, 57911, 2406, 1476,
	-1000, -72, 67688, -1000, 699, -1000, -141, -1000, -1000, 192,
	-1000, 2120, 2115, -1000, -1000, 25579, 388, 380, 57911, 1745,
	-1000, -1000, -1000, -1000, 13759, 1067, -1000, -1000, -1000, 2170,
	357, 357, 25579, 25579, 25579, 357, 6788, -146, -1000, 357,
	357, -214, -1000, -1000, 66606, -1000, -1000, -1000, -1000, 67688,
	10427, 1406, -1000, 64320, -1000, -1000, -1000, -1000, 25579, 25579,
	-1000, -1000, -1000, -1000, -1000, 26872, 1901, 376, 68128, -1000,
	-1000, 793, 25579, 25579, 1823, 793, 793, -147, 723, -1000,
	-1000, -1000, 2358, -25, -1000, 2404, 13759, -1000, -1000, -1000,
	-1000, -1000, 57911, -1000, 57911, -1000, 13759, 57911, 1902, 1635,
	-1000, -1000, 1738, 373, 26872, 48159, 639, 1883, 1369, 25579,
	-1000, -152, -155, 1633, -1000, -1000, 1619, 25579, -1000, 68128,
	1485, 1485, -160, -161, -1000, 920, 913, 911, 57911, 17222,
	-1000, -1000, -1000, 885, -1000, -73, 25579, 1387, 1854, 772,
	-1000, 40023, 757, -1000, -1000, -1000, 25579, -1000, 48159, 25579,
	1511, -1000, 673, 39219, -1000, 2000, -1000, 2079, 57911, 2152,
	-1000, -1000, -1000, 1791, 371, -1000, 753, 370, 369, -162,
	25579, 25579, -169, -75, -1000, 650, 647, -1000, -1000, 48159,
	-1000, 357, 357, 357, -1000, 191, -1000, -1000, 1476, 2220,
	-1000, 64245, 63939, 3538, 26872, 68128, -170, -1000, 57911, 67688,
	-214, -1000, -1000, -1000, 49779, 585, -1000, -1000, 1361, -1000,
	-1000, -1000, 57911, 1643, -1000, -1000, 25579, 4962, 367, 25579,
	-1000, -1000, 1809, 1934, 1833, 366, -1000, -1000, -1000, -1000,
	1230, -1000, -1000, 67688, 2202, -1000, -1000, 364, 360, 57911,
	57911, 359, 660, 1900, -1000, 358, 67688, 757, -1000, 1448,
	-1000, 1808, 181, 2274, -171, 840, -172, 48159, 39219, -1000,
	1725, 1012, -177, 57911, 1201, -1000, -1000, 38813, 38813, 1369,
	-178, -179, -1000, 1745, -1000, 57911, -1000, 57911, -1000, -1000,
	1360, 25579, -1000, -1000, 3538, -180, -1000, -204, -1000, 2261,
	-1000, -1000, -1000, -1000, 1996, 63864, 1659, 57911, 63558, 1930,
	-1000, -1000, 1387, 57911, 48159, 838, 13759, 1403, 1403, -1000,
	-1000, 25579, 16791, 1437, 25579, -1000, 48159, -1000, 2109, 1833,
	54, 1369, 355, 1369, 354, -1000, 1731, 1125, -1000, 795,
	-1000, -1000, -185, -187, 1833, 1369, -1000, -1000, -192, -193,
	175, 26441, 26441, 26441, -214, -1000, 57911, 344, 1982, -1000,
	1502, 1348, 158, 869, -1000, -1000, 1883, -194, 342, -1000,
	25579, -1000, -195, -1000, 825, -203, -1000, 824, -205, -1000,
	1899, -1000, -208, 338, -1000, 1387, 772, 1833, 25579, 1833,
	25579, -1000, 33460, -1000, 753, 753, 1387, 1833, -1000, -1000,
	-1000, -1000, -1000, 27303, 1542, 1190, 65844, -1000, -1000, -1000,
	-1000, 57911, -1000, 1507, 1503, 1137, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1659, 67688, -1000, 1403, 1843, -1000,
	1403, 1898, -1000, 1412, -1000, 57911, 757, -1000, 1387, -215,
	1387, -216, -200, -1000, -1000, -1000, 1387, 2314, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2085, -1000, 848, 1429, 1429,
	1502, -1000, 337, -1000, 336, -1000, -221, -1000, 773, 1369,
	773, 1369, -1000, -1000, 26010, -1000, 2325, -1000, -1000, 1779,
	-1000, 1883, 25579, 25579, 1454, -1000, 2403, 1833, -1000, 1833,
	-1000, -1000, -1000, -1000, -1000, -224, -229, -1000, -1000, -1000,
	-1000, 1387, 1387, 1387, 884, 773, 773, -1000, 334, -1000,
	-1000, 25579, -230, 1387, -1000,
}
var sqlPgo = [...]int{

	0, 3033, 3031, 1992, 3025, 3023, 3021, 3020, 3018, 3017,
	3016, 3014, 3013, 3012, 3011, 3009, 3008, 3007, 3006, 3005,
	3004, 3001, 2998, 2997, 2995, 2993, 2991, 2990, 2984, 2980,
	2979, 2976, 2973, 2968, 2966, 2965, 2962, 2956, 2951, 2949,
	2948, 2944, 2942, 2939, 2937, 32, 2935, 2930, 2924, 2922,
	2920, 2919, 2918, 2912, 2911, 2910, 2905, 2903, 2902, 2901,
	2900, 2899, 2898, 2893, 2892, 2890, 2886, 2883, 2882, 2879,
	2873, 2870, 2869, 2868, 2865, 119, 2860, 2859, 2857, 2856,
	2854, 2852, 2847, 2846, 2845, 2843, 2837, 2836, 2834, 2832,
	91, 2831, 2830, 2829, 2828, 2826, 2825, 2824, 2822, 2821,
	2820, 179, 2819, 2818, 2813, 2811, 2810, 2809, 2808, 2807,
	2806, 2805, 2804, 2803, 2802, 2800, 2799, 2794, 2793, 2792,
	2790, 2789, 2788, 2787, 2785, 2784, 2782, 2781, 198, 131,
	2780, 2779, 2778, 2777, 2776, 2775, 103, 87, 19, 2774,
	94, 135, 180, 5624, 173, 2772, 2770, 2769, 2765, 2764,
	69, 126, 134, 120, 125, 85, 2763, 2762, 70, 54,
	30, 27, 97, 2761, 2760, 2758, 1953, 86, 2756, 2755,
	192, 182, 2754, 1425, 2753, 128, 117, 84, 93, 72,
	2743, 108, 16, 2740, 127, 45, 2739, 118, 67, 28,
	5177, 6391, 71, 199, 74, 90, 163, 154, 157, 156,
	121, 688, 2736, 183, 2735, 124, 150, 2734, 2730, 2728,
	55, 146, 11, 8, 133, 6, 2727, 12, 2723, 10,
	2722, 2721, 2720, 2718, 20, 122, 2717, 56, 57, 2715,
	22, 58, 160, 2714, 166, 2712, 96, 2711, 187, 153,
	149, 60, 175, 2710, 2709, 2708, 2707, 2706, 92, 24,
	88, 2704, 2703, 107, 177, 2702, 36, 129, 73, 110,
	200, 81, 164, 101, 165, 167, 2701, 2697, 2696, 138,
	2695, 2694, 130, 159, 2693, 2692, 31, 44, 176, 52,
	2691, 2688, 116, 2687, 152, 2686, 2685, 2683, 196, 140,
	162, 4, 64, 89, 26, 9, 170, 102, 78, 77,
	2681, 2891, 1516, 1393, 2676, 105, 82, 38, 80, 112,
	189, 51, 2675, 2674, 1438, 2672, 2671, 2669, 2664, 132,
	2663, 2658, 2654, 104, 39, 65, 2647, 111, 63, 294,
	193, 75, 161, 155, 185, 2646, 136, 2645, 141, 98,
	2638, 148, 181, 190, 2635, 123, 106, 2633, 194, 2631,
	2629, 2627, 2626, 35, 2625, 2624, 41, 2623, 115, 2621,
	2617, 145, 139, 142, 37, 2616, 66, 422, 2613, 147,
	29, 2605, 2412, 34, 0, 6172, 4457, 5323, 2603, 3349,
	2602, 158, 100, 2593, 2591, 2590, 2589, 33, 14, 5,
	7, 17, 15, 892, 221, 2588, 2587, 76, 95, 113,
	2586, 195, 168, 2585, 2583, 2582, 62, 2581, 23, 2573,
	18, 2571, 2568, 25, 3, 2567, 2566, 178, 2562, 2561,
	2560, 2558, 2289, 2557, 188, 2556, 99, 2555, 144, 109,
	2553, 2552, 2550, 2549, 184, 2548, 186, 2547, 13, 21,
	2, 2546, 2543, 2542, 151, 1, 2126, 2541, 2540, 59,
	143, 68, 2538, 2533, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 424, 424, 18, 28, 19, 29, 13, 426,
	426, 426, 426, 22, 20, 20, 30, 139, 139, 139,
	139, 17, 17, 25, 25, 152, 152, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 423, 423, 154, 154,
	153, 149, 149, 427, 427, 155, 155, 155, 157, 157,
	34, 34, 88, 88, 88, 140, 81, 81, 81, 81,
	81, 81, 81, 76, 76, 372, 372, 373, 373, 135,
	135, 136, 136, 136, 136, 137, 137, 138, 138, 138,
	48, 36, 36, 36, 36, 36, 36, 36, 37, 37,
	37, 37, 38, 38, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 46, 46, 46, 129, 129, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 432,
	432, 433, 433, 434, 434, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	60, 60, 226, 226, 204, 204, 50, 419, 419, 239,
	239, 340, 340, 62, 62, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 71, 71,
	71, 72, 72, 72, 69, 69, 69, 67, 67, 67,
	66, 66, 66, 70, 70, 70, 68, 68, 68, 240,
	240, 73, 73, 73, 73, 73, 73, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 342, 342,
	74, 74, 312, 312, 77, 77, 270, 270, 78, 78,
	78, 78, 78, 79, 79, 79, 79, 89, 89, 89,
	89, 422, 422, 232, 232, 170, 170, 170, 170, 84,
	84, 84, 84, 85, 85, 85, 86, 86, 134, 134,
	95, 95, 95, 95, 95, 94, 94, 94, 94, 94,
	94, 40, 40, 40, 41, 41, 42, 42, 43, 43,
	44, 44, 45, 45, 45, 45, 45, 97, 97, 428,
	428, 99, 96, 96, 96, 98, 98, 98, 98, 100,
	101, 101, 101, 101, 101, 101, 102, 102, 366, 366,
	247, 247, 364, 364, 380, 380, 365, 365, 208, 208,
	208, 208, 208, 209, 209, 209, 371, 371, 371, 371,
	371, 371, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 119,
	119, 119, 128, 128, 128, 128, 128, 128, 128, 121,
	121, 121, 112, 112, 104, 104, 104, 104, 108, 108,
	108, 108, 108, 105, 105, 109, 109, 111, 111, 113,
	113, 113, 113, 113, 113, 106, 106, 106, 106, 115,
	115, 115, 115, 114, 114, 124, 124, 124, 124, 124,
	124, 326, 326, 120, 120, 120, 120, 123, 123, 123,
	123, 261, 261, 118, 118, 118, 122, 122, 125, 125,
	125, 125, 107, 107, 107, 437, 437, 437, 126, 126,
	117, 117, 127, 127, 127, 127, 127, 127, 127, 116,
	116, 116, 425, 425, 110, 420, 420, 417, 417, 417,
	417, 417, 417, 417, 418, 418, 421, 421, 82, 82,
	82, 55, 55, 438, 438, 438, 56, 56, 439, 439,
	439, 436, 436, 436, 436, 436, 436, 436, 436, 210,
	210, 211, 211, 293, 293, 293, 293, 293, 212, 212,
	156, 156, 156, 215, 216, 216, 213, 213, 214, 214,
	214, 218, 218, 217, 220, 220, 219, 292, 385, 385,
	386, 386, 386, 386, 386, 386, 386, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 383, 383, 383,
	384, 381, 381, 382, 382, 382, 382, 440, 440, 440,
	440, 440, 440, 441, 441, 291, 291, 224, 224, 388,
	388, 388, 388, 389, 389, 389, 389, 389, 392, 391,
	390, 390, 390, 390, 390, 322, 322, 322, 59, 59,
	59, 258, 258, 257, 257, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 131,
	131, 57, 57, 57, 162, 162, 54, 54, 54, 443,
	443, 58, 58, 58, 444, 444, 61, 61, 61, 61,
	61, 61, 53, 53, 53, 53, 53, 445, 445, 276,
	276, 275, 275, 230, 230, 328, 174, 174, 150, 150,
	150, 21, 23, 23, 16, 16, 16, 16, 16, 16,
	31, 31, 32, 32, 27, 27, 429, 429, 430, 430,
	83, 83, 87, 87, 87, 93, 93, 130, 130, 130,
	130, 130, 130, 130, 35, 35, 35, 35, 47, 47,
	47, 47, 91, 447, 447, 447, 92, 92, 446, 446,
	169, 169, 169, 169, 171, 171, 288, 288, 289, 289,
	448, 448, 290, 290, 290, 164, 163, 165, 165, 52,
	52, 52, 158, 158, 159, 159, 160, 160, 161, 161,
	449, 449, 80, 80, 80, 133, 133, 203, 203, 284,
	284, 284, 225, 225, 179, 179, 287, 287, 285, 285,
	285, 285, 256, 256, 256, 132, 132, 235, 235, 249,
	249, 250, 250, 337, 337, 251, 90, 90, 143, 143,
	141, 141, 141, 141, 141, 141, 450, 450, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 147, 147,
	147, 147, 148, 148, 148, 146, 146, 399, 399, 399,
	401, 401, 402, 398, 398, 400, 400, 442, 442, 260,
	260, 260, 222, 223, 221, 221, 451, 451, 228, 228,
	227, 229, 229, 327, 327, 327, 254, 254, 254, 254,
	279, 279, 277, 277, 278, 278, 280, 280, 281, 281,
	281, 282, 282, 283, 283, 253, 253, 308, 308, 145,
	145, 145, 234, 234, 234, 236, 236, 299, 299, 299,
	300, 300, 298, 298, 298, 298, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 330, 330, 237, 237, 331,
	286, 286, 415, 415, 415, 416, 416, 325, 325, 332,
	332, 332, 332, 332, 332, 323, 323, 324, 324, 338,
	339, 339, 264, 264, 264, 264, 262, 262, 263, 263,
	333, 333, 333, 333, 255, 255, 334, 334, 334, 335,
	294, 295, 295, 343, 343, 343, 343, 358, 233, 233,
	233, 452, 452, 344, 344, 344, 344, 344, 344, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 348, 348, 348, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 357, 357, 357, 357, 357, 349, 349, 354,
	354, 355, 355, 355, 350, 351, 356, 356, 356, 356,
	453, 453, 360, 360, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 346, 346, 346, 353, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	271, 271, 272, 272, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 303,
	303, 303, 303, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 393, 393,
	393, 393, 393, 393, 393, 393, 396, 396, 397, 397,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 403,
	403, 404, 404, 406, 406, 407, 407, 408, 409, 409,
	409, 410, 411, 411, 405, 405, 412, 412, 412, 412,
	413, 413, 414, 414, 414, 414, 414, 314, 314, 315,
	315, 321, 321, 321, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	172, 172, 172, 172, 172, 245, 245, 243, 243, 243,
	246, 246, 244, 244, 242, 242, 241, 241, 311, 311,
	309, 309, 313, 313, 265, 265, 359, 359, 359, 359,
	359, 359, 359, 266, 266, 266, 274, 267, 267, 268,
	268, 268, 268, 268, 305, 306, 269, 269, 269, 307,
	307, 316, 320, 320, 319, 318, 318, 317, 317, 296,
	296, 297, 297, 252, 252, 454, 454, 248, 248, 336,
	336, 336, 336, 206, 206, 238, 238, 205, 205, 198,
	198, 199, 199, 199, 199, 231, 231, 361, 361, 361,
	362, 363, 310, 189, 188, 176, 177, 187, 186, 185,
	175, 178, 182, 183, 184, 180, 181, 194, 193, 192,
	191, 341, 200, 200, 201, 201, 201, 202, 202, 202,
	202, 173, 173, 195, 195, 196, 197, 197, 190, 190,
	190, 166, 166, 166, 167, 167, 168, 168, 370, 370,
	368, 368, 368, 369, 369, 369, 369, 367, 367, 367,
	367, 367, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 376, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 379, 379,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 5, 3, 5,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 5, 6, 6, 4, 8, 3, 4,
	3, 6, 4, 3, 1, 3, 2, 1, 1, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 6, 4, 9, 7,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 3, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 6, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 3, 3, 1, 2, 1, 2, 1,
	2, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 3, 1,
	1, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	1, 3, 2, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 6, 3, 4, 5,
	5, 3, 1, 1, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 2, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 2, 5, 1, 4, 2,
	5, 1, 4, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -431,
	82, -400, -65, -68, -70, -435, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -399,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -376, -379, 4, -374,
	-377, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 374, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -422, -232, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -422, -232, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -366, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -417, 2, 4, -377, -374,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -432, 226, 264, 280, 317, 330, 359, 369, 380,
	-436, 347, 56, 396, -443, 385, 110, -275, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -434, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -417, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -326, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -425, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -442, 2, 360, -446, 2, 378,
	378, 2, -446, 2, -446, 2, -169, 2, 378, 375,
	-447, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -450, 145,
	-227, -228, 389, 190, 118, 256, -141, -143, 2, -399,
	-364, 2, -301, -380, -303, 433, 434, 428, 239, 420,
	-314, 101, 390, 251, -379, -304, -316, 119, 311, -246,
	8, 9, 5, 6, 7, -173, -345, -310, -353, 382,
	130, 242, -202, 448, 10, 442, -396, -143, -315, 33,
	156, 54, -368, -201, -347, -355, -351, -352, -452, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -393,
	-394, -374, -375, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -356, 97, 371, 372, 373, 374, 200,
	201, -166, -376, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -395, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -453, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -401, 287, -402, -184, -401, 445, 445, 447, 445,
	-221, -222, -223, 2, 26, 108, 442, 2, -329, 2,
	440, -333, -143, 208, -332, 442, -330, -191, 252, -397,
	312, -393, -394, -173, -190, -201, 4, -3, -224, 442,
	444, 360, 65, 2, -270, 442, -166, 26, -140, 251,
	375, 447, -312, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -289, 2, -290, -163,
	-164, -165, 196, 278, 285, 419, -364, -428, 148, 425,
	375, -364, -247, 444, 2, -333, 166, -191, 2, -188,
	-367, 4, -374, -377, -375, -378, 64, -376, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -379, 2, -333, 166,
	2, -192, 166, -333, -195, 2, -372, 166, -370, 10,
	-369, 5, 4, -374, -377, -375, 2, -175, -166, 2,
	-187, -367, 2, -205, 166, -191, 375, 447, -238, -198,
	-199, -231, -166, 444, -301, 2, -90, 2, -301, 166,
	2, -90, 166, 2, -301, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -433, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -444, 287, -180, 2, -166, 145,
	-372, 166, 2, -372, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -334, 2, -335, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -240, 166,
	2, -191, -240, 166, 2, -240, 166, 2, -206, 166,
	2, -205, -175, 166, 2, -373, 166, 2, -372, -373,
	166, 2, -342, 2, -341, -369, 403, -75, 442, 331,
	442, -372, -191, -301, -90, 148, -301, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -372, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -420, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, -261, 2, 413, 148, 2, 5, 2,
	196, 278, 348, 2, -191, -437, 2, 360, 407, 323,
	2, 2, 72, 73, 148, 2, 148, 419, 2, -255,
	-333, -288, -289, -288, 375, -171, -450, -227, -228, -128,
	335, 2, 2, -450, -254, -277, -278, 218, 132, 247,
	-260, 26, 108, -260, -260, 48, 443, 443, 11, 12,
	63, 37, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 427, 202, 203, 78, 426, 425,
	71, 224, 313, 133, 134, 135, 136, 295, 173, 174,
	175, 14, 15, 16, 30, 255, 217, 420, 169, 338,
	428, 17, 18, 19, 194, 195, 241, 40, 170, -172,
	-207, -301, -301, -301, -301, -301, 261, 442, -252, -296,
	440, -143, 442, 442, 442, 5, 442, 5, -363, 8,
	-143, -301, -314, 443, -244, 442, -143, -314, -309, 442,
	311, 440, 442, -317, -301, 444, -403, 414, -349, 442,
	275, -348, 442, -348, -348, 408, -346, 442, 421, 415,
	442, -346, 442, 442, 145, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 408, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 447, -401,
	-224, 442, -248, -336, -301, 435, -248, -248, 251, -241,
	-301, 83, -264, 199, 234, 149, 214, 306, 181, -363,
	-75, -298, 448, -325, 421, -143, -330, -190, -143, -332,
	442, -329, -325, 435, -191, 442, 148, 442, 444, 148,
	-231, -367, -191, -200, -201, -241, -372, -417, -231, -170,
	34, -311, -343, -344, -357, -345, -354, -350, -353, 291,
	292, 290, 294, 293, 44, 50, 49, 369, 232, 325,
	326, 341, 327, 328, 42, 399, 172, 248, 250, 184,
	4, 43, 404, -356, 191, 183, 189, 185, 340, 186,
	187, 188, 41, 286, 141, 142, 140, 111, 100, 99,
	244, 46, 45, 97, 371, 372, 373, 374, 200, 201,
	405, 351, 57, 58, -417, -231, 145, -366, -241, 34,
	-289, 2, -448, 447, 216, -209, 223, 238, 159, 252,
	417, -371, 5, 4, -310, -322, 101, 220, -353, 9,
	434, -361, 8, 433, -365, -364, 85, 444, -367, -152,
	296, -151, 23, 27, 112, 401, 124, -214, 178, 267,
	119, 344, -424, -426, 316, 367, 368, 74, 245, 296,
	119, -257, -259, 34, 93, 236, 263, 51, 164, 227,
	228, 346, 409, 119, 296, 413, 119, -426, 296, -426,
	-154, 344, -424, -426, 316, 296, -153, -214, 119, 448,
	-372, -238, 447, 447, -367, 435, 119, 119, 119, 119,
	2, 2, 239, 2, 2, 2, 150, -436, -434, 2,
	2, 2, -191, 166, -192, 166, 2, -195, 407, -226,
	251, -419, -239, 360, -191, -162, -398, 413, 239, 239,
	34, 442, 2, -177, 166, 2, -167, -166, 176, -398,
	239, -334, -203, -191, -203, 334, -184, 34, -298, 119,
	2, 2, 2, -166, -155, 447, 53, 302, 119, -155,
	119, -155, 119, -155, 447, 119, -155, 119, 447, 119,
	119, 443, 447, -342, -372, -138, 413, 148, 82, 442,
	-373, -175, 2, -191, 2, 360, 200, -372, -372, -366,
	26, 336, 2, 73, -191, -421, 145, -418, 307, -417,
	-191, -191, -191, -191, -191, 145, 2, 377, 2, 377,
	2, -166, 67, -166, 216, -191, 145, 360, 176, 360,
	-155, 447, -171, -450, -254, -366, -450, -278, -277, -280,
	-301, 26, -283, 139, 235, -301, -303, -142, -142, -142,
	-229, -327, -301, 277, 176, -358, -343, -343, -189, -367,
	371, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, 217, 169, 338, 40,
	170, -301, 375, -301, -301, -301, -301, 231, 239, 242,
	382, 130, 391, 108, 245, -454, 356, 36, -307, -143,
	-245, 442, -321, 31, 343, 26, -314, 442, 2, -296,
	-301, -297, -242, -241, -241, 443, 406, 26, 108, 435,
	2, 8, -271, -273, 418, 230, 98, 161, 229, -272,
	321, 443, 447, 34, 443, -301, -242, -313, -309, -241,
	-320, -319, 410, -367, 435, -404, 138, 155, 8, -363,
	8, 371, 371, 8, 8, 8, 442, 443, 2, 443,
	2, 443, 2, 443, 2, 443, 2, -301, -301, -301,
	-301, -301, -301, -301, -241, -265, 2, -359, -241, 4,
	418, 230, 98, 161, 229, 321, -265, 2, -266, 2,
	-301, -241, -267, -302, -303, 433, 434, 428, -314, -268,
	2, -301, -242, -301, 47, 211, 376, -269, -301, 148,
	-241, -241, 2, -241, 2, -402, 34, -241, -234, 447,
	148, 34, 4, -234, -234, 442, 443, 447, 199, 199,
	-329, -264, 199, -262, 259, -262, -262, -415, 442, 441,
	-325, -176, 440, 449, -367, -324, -323, 34, -184, 257,
	-325, -325, 444, 443, -324, -191, 442, -241, -367, 349,
	443, 444, 194, 194, 443, -138, 375, 413, -75, 443,
	447, -233, 33, 440, -273, 442, -360, 408, 442, 442,
	148, -232, -428, 443, 378, -290, -208, 285, 342, 297,
	329, 9, 8, 8, 447, -367, 447, 375, -429, 76,
	65, -292, 166, 65, -381, -178, 76, -382, -166, 60,
	390, 277, 147, -429, 76, -429, 76, 76, 334, 347,
	48, -333, 37, -90, 212, 148, 419, 360, 375, -333,
	-259, -343, 93, 227, 228, 48, -362, -361, 434, -362,
	48, -362, -362, -362, 413, -192, -333, 375, 268, -372,
	375, 447, 37, -90, 212, 148, 375, -205, -176, -339,
	-338, 422, -198, -166, 444, -301, -90, -301, -90, 119,
	2, -444, 207, 442, -224, 239, -258, -257, 239, -194,
	2, -191, 148, -231, -340, 192, 447, -239, 268, 119,
	119, 442, 116, 283, 2, 251, 239, -177, 166, -158,
	363, 119, -295, -294, 411, -284, -90, 442, 101, 34,
	-284, -249, -250, -337, -251, -178, 442, -184, -166, 2,
	-191, -240, -240, -240, -205, -206, -175, -372, -373, -373,
	-75, -341, 443, 443, -137, 254, -136, -166, 5, -140,
	398, -211, -293, -292, -383, -384, -381, 217, 176, 390,
	193, 131, -138, -338, -339, -339, -191, 145, -231, -231,
	331, 145, 145, 444, -261, 283, 95, 360, 267, 176,
	-191, -205, -191, -333, -450, -281, -361, 442, -282, 311,
	312, 447, -150, 35, 106, 204, -191, 419, 117, -301,
	-301, 375, -454, 356, -307, 117, -301, 231, 242, 382,
	130, 391, 108, 245, 148, 442, -302, -302, 443, -243,
	-301, -301, 441, 451, 443, -451, 447, -227, -301, -241,
	-241, 443, 443, 375, 375, 375, 375, 442, 444, -241,
	-231, 441, 441, 447, 443, -318, -319, 113, -301, 444,
	-409, 260, 442, 442, 443, 443, 447, 443, 419, 419,
	443, 443, 443, -301, 34, 447, 447, 447, 443, 447,
	447, 447, 443, 443, 148, 443, 443, -274, 271, 443,
	11, 12, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 425, 71, 224, 313, 14, 15,
	16, 194, 170, -302, -302, -302, 443, -305, -306, 148,
	145, 34, -269, -269, -269, 443, 148, -241, 443, 443,
	442, 443, -295, -336, -236, 2, -329, -186, -367, -295,
	-295, -241, -301, -329, -329, -263, 398, 251, 199, -329,
	-323, 443, -416, -363, -325, -324, -363, -300, -299, 146,
	237, -184, -224, -324, -324, -367, -325, 443, -237, -331,
	-397, -451, 444, -367, -129, 5, 242, -129, 148, -231,
	24, -343, 440, 441, 8, 8, 442, -363, -363, -231,
	148, -364, -289, 388, 69, 285, -364, -151, -191, -178,
	-185, -166, 239, -292, 166, -157, 239, -343, -185, 442,
	442, 204, 204, -178, -185, 166, -178, 166, -185, -185,
	-423, 285, 246, -301, 219, 283, 240, -152, 296, -90,
	-90, 442, -428, 398, 107, -191, -194, 296, -200, -362,
	-362, -257, 296, -192, -372, 413, -175, -153, -90, -90,
	442, -176, -154, 296, -135, 165, 245, 435, -166, 407,
	-166, -210, -211, -166, -438, 415, 413, 119, 119, -224,
	-204, -191, 440, -138, -372, -191, -372, -372, -372, 2,
	442, 2, -191, 119, 251, 239, -159, 114, -449, 425,
	-175, -228, -227, -301, -256, -287, 304, 251, -225, -179,
	-178, 403, -184, -256, -235, 447, 148, 425, 444, -225,
	2, -155, -155, -155, -155, -155, -75, -138, 447, 442,
	425, 425, 442, -372, -372, 443, 447, -191, -177, 176,
	176, -183, -167, -138, -43, 413, 360, 331, 331, -166,
	-187, -175, -191, -188, -205, -282, -301, -327, -191, 448,
	-301, -301, 117, 117, -301, -302, -302, -301, 117, 148,
	442, -301, -311, 30, 30, 443, 447, -297, -301, 443,
	406, -451, -451, -451, 5, 230, 161, 229, -272, 229,
	-272, -272, 8, 435, -367, 443, -309, 115, -301, 370,
	-367, 435, -410, -181, 442, -166, 411, -227, -363, -346,
	-346, 443, -358, -343, -301, -301, -301, -301, -301, -301,
	-305, -301, -358, -343, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, 108, 239, 245, -302, -306, -305, -301,
	-301, -343, 443, 443, 443, -241, -75, -253, 155, -339,
	447, -253, -253, 443, -263, 442, -301, -329, 441, 443,
	447, -324, 441, 447, 450, 425, -224, 444, -323, 443,
	447, -286, 34, 443, -367, -90, 253, 8, 441, 443,
	-363, 443, 443, -231, 375, 375, 119, 239, 400, -385,
	-382, -301, -230, -328, -301, 442, 442, -149, 112, 334,
	-430, 2, 119, -155, 119, -155, 417, 442, 442, 375,
	-429, 76, -241, -301, -139, 101, -366, -426, 375, 375,
	268, -241, 375, -138, 148, 358, 2, 2, 2, 443,
	34, 249, -166, -191, -192, 34, -339, -363, -162, 2,
	-276, 398, -176, -191, 119, -160, 210, -449, -370, -398,
	-279, -277, -256, -248, 240, 75, 443, 447, 444, -295,
	-250, -236, -301, 2, 443, -136, -137, -372, -372, -372,
	-138, -140, -140, -293, 2, 442, -177, -167, 442, 254,
	-191, -261, -216, -215, 267, 245, 252, 443, -150, -176,
	-301, -301, 117, 30, 30, -301, -301, -311, 443, -301,
	-301, -241, 441, 5, -301, 443, 443, 443, 443, -301,
	444, -411, -166, -301, 443, 443, 443, 443, 447, 447,
	443, 443, 443, 443, -306, 148, 108, 245, 442, 443,
	443, -308, 158, 48, -329, -308, -308, -231, -298, -363,
	-299, -176, 440, -367, -331, 442, 444, 441, 443, -178,
	-185, -292, 119, -386, 76, -387, 63, 131, 82, 239,
	242, 390, 277, 60, 101, 289, 34, 443, 443, 447,
	-150, -230, -231, 239, 353, 101, 239, 101, 94, 385,
	-178, -185, -231, -231, -191, -178, -185, 443, 447, 425,
	-194, -192, -372, 443, -176, -373, 371, -212, 179, -90,
	2, 442, -224, -258, -90, 441, 442, -166, 251, 442,
	-176, -161, 209, -449, -370, -158, -256, -285, 442, 251,
	-90, -179, 2, -228, 425, 443, 443, 94, 94, -230,
	442, 442, -231, -44, -45, 176, 76, 270, -188, 360,
	-150, -301, -301, -301, 443, -451, -367, 435, -405, 267,
	443, -301, -301, -302, 148, 442, -311, -406, 412, -301,
	-241, -406, -406, 443, -325, -363, 2, -292, -185, -189,
	-182, -166, 131, 166, 242, 204, 442, -302, -191, 442,
	2, -440, 103, 180, -291, -441, 81, 354, -328, 443,
	443, 242, 242, -301, -343, -155, -155, 443, 443, 375,
	375, 375, -366, 80, -364, 375, -301, -213, -214, 170,
	-439, 413, -210, -438, -230, -191, -230, 251, -449, -370,
	-159, 109, -231, 76, -279, -307, -138, 442, 442, 443,
	-230, -230, 443, 447, 26, 442, 26, 442, -191, 443,
	-228, 48, 443, 443, -302, -311, 443, -407, -408, -181,
	-324, 441, -387, -182, 239, -301, -168, 442, -301, 180,
	104, 162, -212, 442, 289, -174, 63, 442, 442, -178,
	-185, 442, 425, 148, 442, -438, 265, 94, 236, 443,
	34, 443, -276, 443, -191, -370, -160, 393, 240, 443,
	-185, -256, -373, -373, -291, 443, 443, -45, -231, -231,
	-412, 283, 312, 157, -241, 443, 447, 34, 119, 443,
	-388, 225, -166, 443, 104, 162, -213, -231, -191, -427,
	398, -189, -218, -217, -215, -220, -219, -215, -241, -364,
	80, 265, -241, -191, 94, -212, -90, -291, 442, -291,
	442, -161, 334, -294, 443, 443, -212, -291, 443, 443,
	443, -413, -414, 40, 387, 85, -301, -413, -413, -408,
	-410, 131, -389, -392, -391, 251, 149, 266, 339, 443,
	353, 409, -440, 443, -224, -301, 443, 447, 403, 443,
	447, 403, 443, 148, 443, 442, -213, -439, -212, -230,
	-212, -230, -249, -138, -138, -213, -212, -414, 274, 144,
	311, 274, 144, -182, -391, 251, -392, 251, 393, 105,
	-388, -217, 170, -219, 148, 265, -231, -438, -213, 443,
	-213, 443, -295, -213, 30, -390, 236, 302, 53, 334,
	-390, -389, 442, 442, 443, -445, 411, -291, -445, -291,
	-414, 22, 242, 101, -440, -241, -241, -156, 53, 302,
	2, -212, -212, 443, 443, -213, -213, -213, 375, -445,
	-445, 442, -241, 443, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 337,
	338, 340, 341, 342, 344, 345, 347, 349, 351, 353,
	354, 356, 358, 359, 360, 361, 362, 364, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	410, 412, 0, 837, 839, 841, 843, 29, 30, 0,
	0, 171, 173, 175, 0, 199, 201, 203, 204, 206,
	-2, 0, 291, 292, 294, 296, -2, -2, 0, 0,
	399, 401, 0, 0, 421, 422, 0, 926, -2, 415,
	417, 419, 482, 484, 486, 488, 490, 492, 494, 495,
	497, 499, 501, 503, 505, 507, 509, 511, 513, 515,
	517, 519, 521, 523, 525, 527, -2, -2, -2, 0,
	-2, -2, -2, 855, 33, 35, 37, 39, 41, 43,
	61, 255, 256, 258, 260, 262, 265, 266, 268, 965,
	298, 300, 302, 304, 306, 0, -2, 979, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 941, 943, 945, 947, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 339,
	343, 346, 348, 350, 352, 355, 357, 363, 365, 367,
	728, 1560, 1573, 1574, 1575, 1578, 1579, 1580, 1581, 1582,
	1583, 1904, 1984, 1985, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 0,
	377, 375, 1554, 378, 1741, 380, 382, 285, 286, 287,
	288, 289, 290, 0, 154, 0, 392, 386, 391, 393,
	395, 396, 397, 398, 373, 371, 0, 392, 1605, 390,
	835, 836, 830, 831, 1774, 865, 411, -2, -2, -2,
	1873, -2, 443, -2, 450, 1876, 1776, 453, 0, 455,
	-2, 458, 838, 840, 842, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, -2, -2, -2,
	-2, 0, 0, 1639, 1531, 1575, 1534, 1529, 172, 174,
	176, 177, 0, 0, 0, 0, 0, 0, 200, 202,
	205, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	784, 0, 0, 0, 0, 0, 0, 0, 0, 651,
	652, 0, 0, 657, 779, 780, 801, 0, 0, 0,
	0, 293, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 233,
	331, 332, 0, 966, 0, 0, 0, 152, 145, 0,
	0, 640, 400, 402, 0, 144, 0, 0, 834, 0,
	416, 418, 420, 483, 485, 487, 489, 491, 493, 496,
	498, 500, 502, 504, 506, 508, 510, 512, 514, 516,
	518, 520, 522, 524, 526, 528, 529, 0, 0, 0,
	0, 0, 533, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 532, 534, 535, 536,
	0, 581, 622, 623, 0, 770, 967, 867, 845, 858,
	867, 847, 848, 849, 850, 851, 856, 857, 860, 0,
	852, 853, 854, 34, 36, 38, 40, 42, 44, 257,
	259, 261, 263, 267, 269, -2, 939, 940, 299, 301,
	303, 305, 307, 403, 0, 405, 0, 533, 930, 0,
	-2, 0, 971, 971, 971, 0, 0, 940, 938, 0,
	408, 409, 462, 463, 1194, 0, 0, 0, 0, 0,
	1429, 1278, 0, 464, -2, 1309, 1311, 1852, 1873, 1428,
	1313, 1314, 1315, 1316, 1317, 0, 0, 1320, 0, 1322,
	1323, 1324, 1325, 0, 1327, 0, 1331, 1332, 1333, 0,
	1857, 1508, 1571, -2, 1099, 1100, 1101, 1102, 1103, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1567, 0, 1400,
	1347, -2, 1592, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1648, -2, -2, -2, -2,
	-2, -2, -2, 1155, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1887, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 0, 1841, 1858, 1859, 1864, 1866, 1860,
	1849, 1370, -2, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1156, -2,
	1853, 1854, 1869, 1870, 1875, 1880, 1881, 1856, 1865, -2,
	-2, 957, 1749, 960, 728, 958, 942, 944, 0, 946,
	0, 0, 0, 951, 974, 972, 0, 1010, 955, 956,
	966, 1025, 1048, 0, 1030, 0, 1048, 1070, 0, 1035,
	1769, 1348, 1349, 0, 1575, 1572, -2, 2, 0, 0,
	0, 0, 0, 196, 374, 0, 379, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 413, 414,
	0, 438, 0, 442, 1848, -2, -2, 446, 868, 872,
	873, 874, 0, 0, 0, 0, 452, 0, 0, 439,
	440, 456, 459, 0, 52, 0, 1858, 1070, 53, 0,
	1544, 1597, 1598, 1599, 1600, 1601, 1887, 1903, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 55, 0, 1858,
	58, 0, 1858, 0, -2, 62, 0, 1858, 155, 156,
	1588, 1589, 1593, 1594, 1595, 1596, 65, 0, 1550, 67,
	0, 1547, 75, 0, 1858, 1528, 0, 0, 632, 1525,
	1530, 633, 1535, 0, 178, 179, 180, 181, 182, 1858,
	184, 185, 0, 187, 188, 1858, 190, 191, 0, 193,
	208, 209, 0, 211, 0, 1858, 0, 0, 0, 217,
	-2, 234, 0, 231, 0, 221, 222, 224, 225, 226,
	227, 228, 0, 0, 0, 785, 273, 271, 1555, 0,
	-2, 1858, 773, 776, 1858, 778, 790, 1558, 0, -2,
	0, 964, 1858, 881, 653, 654, 655, 656, 0, 284,
	0, 894, 0, 896, 0, 916, 1076, 1025, 235, 236,
	237, 238, 239, 1858, 0, 0, 0, 244, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 137, 1858,
	310, 329, 137, 1858, 313, 137, 1858, 316, 137, 1858,
	319, 1523, 137, 1858, 322, 323, 1858, 325, 157, 326,
	1858, 328, 0, -2, 368, 1561, -2, 334, 0, -2,
	0, 169, 0, 638, 639, 0, 832, 833, 423, 0,
	0, 530, 531, 0, 0, 541, 542, 543, 544, 1747,
	1663, 547, 0, 550, 571, 585, 0, 0, 0, 554,
	556, 637, 558, 0, 0, 560, 0, 562, 0, 564,
	0, 566, 0, 568, 570, 572, 586, 574, 0, 0,
	0, 584, 0, 589, 590, 0, 0, 595, 596, 597,
	0, 599, 600, 601, 602, 0, 604, 605, -2, -2,
	609, 611, 0, 617, 0, 621, 0, 537, 538, 137,
	1074, 844, -2, 846, 0, 862, 933, -2, 0, 404,
	0, 407, 937, 931, 936, 988, 989, 0, 0, 0,
	0, 969, 970, 0, 0, 0, 928, 929, 0, 0,
	0, 0, 1434, 1435, 1436, 1437, 1438, 1439, 1442, 1443,
	1440, 1441, 1444, 1445, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 1451, 0, 1453, 0,
	0, 0, 0, 0, 0, 1257, 1259, 1516, 0, 0,
	1450, 1199, 1200, 1201, 1236, 1237, 0, 0, 1310, 1513,
	1512, 1312, 0, 1465, 0, 1319, 0, 1191, 1326, 1541,
	-2, 0, 1429, 1460, 0, 0, 1334, 1335, 1336, 0,
	0, 1465, 0, 0, 1507, 0, 1402, 0, 1135, 0,
	1136, 1137, 0, 1138, 1139, 1152, 1165, 0, 0, 0,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
	0, 0, 1488, -2, 0, 0, 0, 0, 0, 959,
	0, 0, 1014, 1517, 1521, 1522, 1014, 1014, 0, 0,
	1466, 0, 0, 0, 0, 1067, 1067, 1067, 1065, 1042,
	0, 1048, 0, 1058, 0, 1048, 1048, 0, -2, 1030,
	0, 0, 1058, 1071, 1072, 0, 0, 0, 0, 0,
	0, 1576, 0, 0, 1563, 0, 169, 0, 384, 394,
	966, 0, 1468, 1090, 1086, 1093, 1094, 1095, 1096, 1142,
	1143, 1144, 1145, 1146, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, -2, 1153, 1155, 1176, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1148, 0, 1123, 1123,
	1123, 1140, 1141, 1164, 1175, 1167, 1175, 1171, 1091, 1092,
	1158, 1159, 1160, 1161, 0, 388, 0, 0, 0, 0,
	-2, 448, 0, 870, 0, 875, 473, 474, 475, 877,
	878, 451, 476, 477, 478, 479, 480, 481, 0, 745,
	0, 747, 1537, 0, 449, 466, 454, 0, 460, 76,
	827, 105, 0, 827, 827, 0, 0, 124, 0, 0,
	0, 0, 0, 94, 101, 82, 83, 0, 0, 0,
	0, 59, 753, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 93, 0, 88,
	78, 0, 0, 96, 103, 0, 128, 130, 0, 0,
	1061, 631, 0, 0, 1576, 1533, 0, 0, 0, 0,
	210, 212, 0, 214, 215, 216, 0, 784, 0, 223,
	220, 264, 728, 1858, 752, 1858, 750, 1559, 0, 0,
	0, 282, 277, 0, 279, 771, 0, 963, 0, 0,
	0, 0, 791, 0, 1858, 796, 1546, 1584, 1585, 883,
	0, 1082, 0, 897, 0, 0, 1077, 0, 1079, 0,
	241, 242, 243, 0, 308, 0, 135, 136, 0, 311,
	0, 314, 0, 317, 0, 0, 320, 0, 0, 0,
	0, 966, 0, 0, 0, 147, 0, 0, 0, 0,
	169, 1061, 425, 1061, 427, 0, 0, 545, 546, 548,
	549, 551, 552, 618, 553, 557, 0, 625, 1765, 635,
	559, 561, 563, 565, 567, 0, 576, 0, 578, 0,
	580, 592, 591, 593, 598, 603, 0, 0, 0, 0,
	769, 0, 861, 934, 936, 406, 932, 986, 987, 992,
	996, 997, 1000, 1003, 1004, 994, 1194, 952, 953, 954,
	980, 981, 810, 0, 1984, 1195, 1087, 1196, 1197, 1543,
	0, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, -2, -2, -2, -2, -2, -2, -2, -2, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	-2, -2, -2, 1234, 1235, -2, 1452, 1454, 0, 1516,
	0, -2, 0, -2, -2, -2, -2, 1254, 0, 1256,
	1261, 1263, 1265, 0, 0, 0, 0, 1515, 1275, 1499,
	1500, 0, 0, 1431, 1432, 1433, 1260, 0, 1279, 1514,
	1511, 0, 0, 1464, 977, 1338, 0, 0, 0, 0,
	1345, 0, 1542, 1190, 1177, 1178, 1179, 1180, 1181, 1182,
	1192, 1330, 1462, 0, 1461, 0, 0, 0, 1472, 0,
	1506, 1502, 0, 1564, 1570, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1382, 0, 1475, -2,
	-2, -2, -2, -2, -2, -2, 0, 1384, 0, 1386,
	1466, 1485, 0, 0, 1280, 0, 0, 0, 1429, 0,
	1389, 1466, 1493, 0, 0, 0, 0, 0, 1466, 0,
	1498, 0, 1396, 0, 1398, 961, 0, 0, 1082, 0,
	0, 0, 1520, 1082, 1082, 0, 1009, 0, 0, 0,
	0, 0, 0, 1062, 1066, 1063, 1064, 0, 0, 1048,
	1058, 1022, 0, 0, 1545, 1028, 1057, 0, 728, 1047,
	1058, 1058, 0, -2, 1032, 0, 0, 977, -2, 170,
	727, 0, 0, 0, 376, 0, 0, 0, 370, 372,
	0, 1083, 1085, 0, 1097, 0, 0, -2, 0, 0,
	0, 0, 0, 441, 0, 869, 876, 0, 470, 0,
	472, 746, 1539, 1538, 0, 461, 0, 0, 0, 0,
	826, 107, 1858, 0, 139, 0, 0, 712, 1551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	754, 755, 757, 763, 765, 0, 759, 1540, 0, 760,
	0, 762, 764, 766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 1527, 160,
	1060, 0, 1526, 1536, 0, 183, 186, 189, 192, 0,
	218, 0, 0, 660, 643, 0, 748, 751, 0, 728,
	783, 1557, 0, 272, 169, 0, 0, 278, 0, 0,
	0, 0, 0, 0, 789, 0, 0, 0, 1858, 885,
	891, 0, 979, 1081, 0, 914, 899, 0, 0, 0,
	914, 918, 919, 921, 922, 0, 0, 1078, 0, 245,
	330, 137, 137, 137, 1524, 137, 137, 158, 324, 327,
	333, 369, 966, 169, 167, 1729, 165, 162, 164, 0,
	0, 0, 661, 663, 664, 665, 666, 0, 1585, 0,
	1691, 1585, 142, 169, 424, 429, 539, 0, 636, 634,
	575, 0, 0, 0, 588, 0, 0, 0, 0, 0,
	619, 620, 624, 1075, 935, 0, 998, 0, 995, 1001,
	1002, 0, 983, 808, 809, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1276, 0, -2, 1255, 1258, 1262,
	1264, 1266, 0, 0, 0, 0, 0, 0, 1455, 0,
	1457, 1277, 1509, 1512, 1427, 0, 0, 976, 977, 977,
	977, 1344, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 1470, 1471, 0, 1337, 0, 1503, 0, 0, 0,
	1346, 0, 0, 0, 1147, 1121, 0, 1175, 1173, 1174,
	1168, 1175, 1172, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 1369, 1381, 0, 1383, 1385, 0, 0, 1387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 1284, 1285, 1388, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1394, 0, 1497, 1395, 1397,
	966, 1011, 1006, 1518, 1061, 1013, 1015, 1519, 1548, 1006,
	1006, 0, 1467, 1050, 0, 1052, 0, 0, 0, 1054,
	0, 1043, 0, 1045, 1058, 1027, 0, 0, 1020, 0,
	1019, 728, 1056, 1029, 1033, 1564, 0, 1073, 0, 1037,
	1040, 0, 0, 1577, 194, 197, 198, 195, 0, 383,
	0, 1469, 0, 1088, 0, 0, 0, 0, 0, 387,
	0, 437, -2, 468, 469, 471, 467, 106, 814, 0,
	0, 1549, 0, 109, 1858, 118, 0, 689, 0, 0,
	0, 0, 0, 829, 0, 1858, 137, 1858, 137, 120,
	123, 0, 127, 125, 0, 0, 680, 77, 827, 80,
	86, 0, 0, 0, 92, 0, 820, 0, 758, 761,
	767, 60, 0, 822, 812, 0, 811, 129, 81, 87,
	0, 824, 79, 0, 169, 0, 0, 1532, 0, 0,
	0, 0, 659, -2, 0, 0, 0, 0, 0, 0,
	1061, 274, 0, 276, 281, 280, 774, -2, 777, 786,
	0, 788, 800, 0, 0, 0, 887, 891, 0, 890,
	964, 991, 978, 1080, 892, 914, 0, 0, 0, 902,
	904, 901, 898, 895, 1082, 0, 0, 0, 0, 0,
	240, 309, 312, 315, 318, 321, 335, 146, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 1585,
	1585, 0, 1553, 143, 426, 0, 0, 577, 579, 592,
	612, 613, 675, 0, 616, 0, 0, 982, 810, 0,
	1198, 1239, 0, 0, -2, 0, 0, 1243, 0, 0,
	0, -2, 0, 0, 0, 1456, 1458, 0, 1511, 1339,
	0, 0, 0, 0, 1321, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 0, 1328, 1329, 1430, 1473, 1501, 1505, 0,
	1565, 1569, 1408, 1409, 1413, 1556, 0, 0, 0, 1166,
	1170, 1350, 0, 0, 0, 0, 0, 0, 0, 1474,
	1484, 1486, 1281, 1282, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, -2, -2, -2, 1299, 1300, 1301,
	-2, -2, -2, 0, 0, 0, 1487, 1489, 1490, 1494,
	1495, 0, 1391, 1392, 1393, 1496, 0, 1008, 0, 1012,
	0, 1008, 1008, 973, 1051, 0, 1069, 1053, 1025, 1044,
	0, 1034, 1023, 0, 1024, 0, 1055, 0, 1031, 1036,
	0, 1039, 0, 1339, -2, 153, 385, 0, 1089, 1098,
	0, 1150, 1154, 389, 0, 0, 0, 0, 138, 687,
	711, 0, 0, 803, 810, 0, 0, 111, 0, 0,
	0, 119, 0, 116, 0, 122, 126, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 0, 95, 0, 0,
	0, 0, 0, 140, 0, 0, 213, 782, 219, 669,
	0, 644, 0, 728, 752, 0, 270, 0, 772, 787,
	0, 0, 0, 0, 0, 889, 891, 0, 882, 883,
	914, 990, 893, 912, -2, 911, 0, 0, 0, 979,
	920, 917, 923, 924, 0, 166, 0, 161, 163, 0,
	149, 0, 0, 662, 667, 0, 0, 0, 0, 0,
	540, 587, 614, 674, 0, 0, 993, 999, 984, 810,
	1241, 1245, 0, 0, 0, 1247, -2, 0, 1269, -2,
	-2, 1459, 1510, 1318, 977, 1340, 1342, 1343, 1193, 1504,
	0, 1415, 1412, 0, 1399, 1122, 1360, 1361, 0, 0,
	1364, 1366, 1367, 1368, 1483, 0, 0, 0, 0, 1390,
	962, 1404, 0, 0, 1016, 1404, 1404, 0, 1048, 1046,
	1021, 1017, 0, 1565, 1038, 0, 0, 1084, 1149, 816,
	818, 108, 0, 688, 0, 691, 0, 0, 0, 0,
	698, 699, 0, 0, 0, 0, 0, 717, 726, 0,
	805, 0, 0, 0, 113, 132, 0, 0, 828, 0,
	137, 137, 0, 0, 815, 0, 0, 0, 0, 0,
	821, 823, 813, 0, 825, 159, 0, 677, 0, 648,
	645, 660, 643, 749, 781, 275, 0, 799, 0, 0,
	0, 879, 891, 0, 884, 885, 283, 0, 0, 0,
	900, 903, 905, 991, 0, 168, 169, 0, 0, 0,
	0, 0, 0, 428, 430, 0, 0, 436, 673, 0,
	985, 1249, -2, -2, 1270, 0, 1566, 1568, 979, 0,
	1401, 0, 0, -2, 0, 0, 0, 948, 0, 1007,
	1005, 949, 950, 1068, 1058, 0, 1041, 110, 0, 692,
	693, 1552, 695, 0, 697, 700, 0, 702, 1587, 0,
	706, 713, 718, 0, 669, 0, 723, 724, 804, 715,
	0, 112, 114, 131, 807, 115, 121, 0, 0, 0,
	0, 0, 0, 1633, 98, 0, 1059, 643, 676, 0,
	646, 0, 0, 0, 0, 800, 0, 0, 0, 886,
	887, 0, 0, 0, 914, 925, 148, 0, 0, 726,
	0, 0, 710, 0, 432, 0, 434, 0, 615, 1341,
	1419, 0, 1362, 1363, -2, 0, 1307, 1403, 1405, 0,
	1026, 1018, 690, 694, 0, 0, 732, 0, 0, 0,
	721, 722, 677, 0, 0, 134, 0, 0, 0, 817,
	819, 0, 0, 0, 0, 641, 0, 649, 0, 669,
	0, 726, 0, 726, 0, 888, 889, 0, 907, 908,
	910, 915, 0, 0, 669, 726, 709, 431, 0, 0,
	0, 0, 0, 0, 1414, 1308, 0, 0, 0, 701,
	737, 0, 0, 0, 719, 720, 717, 0, 728, 117,
	0, 806, 0, 681, 0, 0, 684, 0, 0, 99,
	1633, 97, 0, 0, 650, 677, 648, 669, 0, 669,
	0, 880, 0, 909, 169, 169, 677, 669, 433, 435,
	1411, 1416, 1420, -2, 1822, 1636, 0, 1417, 1418, 1406,
	1407, 0, 703, 733, 734, 0, 729, 730, 731, 1586,
	704, 705, 714, 725, 732, 133, 678, 0, 0, 679,
	0, 0, 102, 0, 104, 0, 643, 647, 677, 0,
	677, 0, 1082, 150, 151, 707, 677, 0, 1422, 1423,
	1424, 1425, 1426, 696, 735, 0, 736, 0, 0, 0,
	737, 682, 0, 685, 0, 100, 0, 642, 797, 726,
	797, 726, 906, 708, 0, 738, 0, 741, 742, 0,
	739, 717, 0, 0, 672, 792, 0, 669, 794, 669,
	1421, 740, 743, 744, 716, 0, 0, 668, 670, 671,
	798, 677, 677, 677, 0, 797, 797, 683, 0, 793,
	795, 0, 0, 677, 686,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1031
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1037
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1046
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1171
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1180
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1250
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1254
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1263
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1284
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1295
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1305
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1317
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1324
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1343
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1356
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1360
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1371
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1392
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1408
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1418
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1422
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 100:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1445
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1466
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1470
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1511
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1552
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1562
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1585
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1592
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1688
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1691
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1718
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1721
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1725
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1762
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1771
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1781
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1790
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1799
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1807
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1826
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1892
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = nil
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1902
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1919
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1940
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1945
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1955
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1964
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1972
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2000
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2008
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2021
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2030
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2034
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2056
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2057
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2060
		{
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2061
		{
			return helpWith(sqllex, "CREATE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "create cast")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "create operator")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "create publication")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "create rule")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "create server")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2087
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2088
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2091
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2092
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2095
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2096
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2111
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "drop server")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2122
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2123
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2128
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2152
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2156
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2162
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2171
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2180
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2215
		{

			sqlVAL.union.val = nil
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2264
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2265
		{
			return helpWith(sqllex, "DROP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2295
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2333
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2363
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2375
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2378
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2393
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2397
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2406
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2442
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2446
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			return helpWith(sqllex, "DELETE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "INSERT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2507
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2584
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2588
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "GRANT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2631
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2642
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2660
		{
			return helpWith(sqllex, "RESET")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2673
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "RESET")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2684
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "USE")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2705
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2706
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2707
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2713
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "USE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2766
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2783
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2787
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2811
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2833
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2890
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2893
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2897
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2916
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2923
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2929
		{
			return unimplemented(sqllex, "set from current")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2938
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2943
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2971
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = tree.Low
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = tree.Normal
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = tree.High
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3082
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3087
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3088
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3093
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.str = "client_encoding"
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.str = "timezone"
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3120
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3134
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3143
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3152
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3163
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3180
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3187
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3195
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3212
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3216
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3221
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3232
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3264
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3272
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3290
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3300
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3316
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3326
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3347
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3373
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3383
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3387
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = true
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3391
		{
			sqlVAL.union.val = false
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3438
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = true
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3445
		{
			sqlVAL.union.val = false
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3466
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3470
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3478
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3492
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3509
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3518
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3557
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3568
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3601
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3613
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3621
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3633
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3766
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3809
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3814
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3827
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3838
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3850
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3859
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3862
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3898
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3915
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3933
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3934
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3939
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3955
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3972
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3973
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3974
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3988
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3989
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3990
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3991
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3992
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3993
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3994
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3995
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4006
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4016
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4022
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4025
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4029
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4042
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4049
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4054
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.str = ""
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4125
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4146
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4167
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4187
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4233
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4246
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4250
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4333
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4343
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4358
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4359
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4360
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4361
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4362
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4363
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4416
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match full")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4417
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4418
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match simple")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4419
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4426
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4488
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4513
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4522
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4530
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4541
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4542
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4545
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4546
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4553
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4556
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4558
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4559
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4561
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4574
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4582
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4589
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4597
		{
			sqlVAL.union.val = nil
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4607
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4614
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4620
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4628
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4640
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4641
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4644
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4645
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4651
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4653
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4655
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4657
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4659
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4661
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4677
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4695
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4714
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4732
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4750
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4753
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4754
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4758
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = true
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = false
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4802
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.str = ""
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.Descending
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4849
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4863
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4877
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4891
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4905
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4907
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4911
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4925
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4941
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4955
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4980
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4981
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4984
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4985
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5018
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5033
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5034
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5035
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5054
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5059
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5072
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5086
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5087
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5088
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5096
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5103
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5106
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5107
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.str = ""
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.str = ""
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5153
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5166
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5168
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5172
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5187
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5233
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.str = ""
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.str = ""
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5267
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5271
		{
			sqlVAL.str = ""
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5276
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5277
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5296
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5303
		{
			return helpWith(sqllex, "INSERT")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5314
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5325
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5338
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5349
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5387
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5395
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5401
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5404
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5405
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5413
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5418
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 915:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5450
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5454
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5455
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5479
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5532
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5576
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5577
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5582
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5617
		{
			return helpWith(sqllex, "SELECT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5618
		{
			return helpWith(sqllex, "VALUES")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			return helpWith(sqllex, "TABLE")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5641
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5680
		{
			return helpWith(sqllex, "SELECT")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5724
		{
			return helpWith(sqllex, "TABLE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5740
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5744
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5758
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5766
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5767
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = nil
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5780
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5781
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = true
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = false
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = false
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5799
		{
			sqlVAL.union.val = true
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5810
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5811
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5814
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5815
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5823
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5845
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5849
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5858
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5877
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5897
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5901
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5930
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5939
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5953
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5954
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5957
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5958
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5985
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6011
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6013
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6028
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6046
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6050
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6067
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6083
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6118
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6132
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6153
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6163
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6167
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6211
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6213
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = nil
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6217
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = true
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6236
		{
			sqlVAL.union.val = false
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6256
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6282
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6316
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6324
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6330
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6331
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6358
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6367
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6385
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6389
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6395
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6403
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6436
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6450
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6459
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6483
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6503
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6504
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = sqllex.(*scanner).nakedSerialType
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6589
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = nil
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = sqllex.(*scanner).nakedIntType
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = sqllex.(*scanner).nakedIntType
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6663
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6719
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6741
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6756
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6762
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6768
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6790
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = true
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = false
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6840
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6844
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6845
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6846
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6848
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6855
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6860
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = true
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = false
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = false
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = tree.Year
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = tree.Month
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = tree.Day
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = tree.Month
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = nil
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = tree.Second
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6941
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6976
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6985
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7295
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7317
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7511
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7516
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7525
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7543
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7589
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7600
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7601
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7625
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7646
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7666
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7744
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7749
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7764
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7779
		{
			return unimplemented(sqllex, "treat")
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7785
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7805
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7810
		{
			return unimplemented(sqllex, "within group")
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7811
		{
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7815
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7846
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.str = ""
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7937
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7950
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8024
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = tree.Any
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Some
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.All
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.Div
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.LT
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.GT
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.LE
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = tree.GE
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = tree.NE
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = tree.Like
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8385
		{
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8444
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8519
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8541
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8699
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.str = ""
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
