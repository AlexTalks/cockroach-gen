// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8264

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 895,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 732,
	-2, 0,
	-1, 60,
	101, 895,
	173, 895,
	373, 895,
	374, 895,
	-2, 0,
	-1, 74,
	113, 869,
	127, 869,
	181, 869,
	207, 869,
	238, 869,
	246, 869,
	370, 869,
	-2, 858,
	-1, 110,
	197, 549,
	360, 549,
	-2, 0,
	-1, 115,
	4, 897,
	20, 897,
	21, 897,
	22, 897,
	23, 897,
	25, 897,
	30, 897,
	35, 897,
	36, 897,
	37, 897,
	38, 897,
	39, 897,
	40, 897,
	41, 897,
	42, 897,
	43, 897,
	44, 897,
	46, 897,
	47, 897,
	48, 897,
	49, 897,
	50, 897,
	51, 897,
	54, 897,
	55, 897,
	56, 897,
	58, 897,
	59, 897,
	63, 897,
	64, 897,
	65, 897,
	66, 897,
	67, 897,
	69, 897,
	70, 897,
	71, 897,
	72, 897,
	74, 897,
	76, 897,
	77, 897,
	80, 897,
	81, 897,
	82, 897,
	90, 897,
	91, 897,
	92, 897,
	93, 897,
	94, 897,
	95, 897,
	96, 897,
	97, 897,
	99, 897,
	101, 897,
	103, 897,
	106, 897,
	107, 897,
	109, 897,
	110, 897,
	114, 897,
	115, 897,
	116, 897,
	117, 897,
	118, 897,
	119, 897,
	120, 897,
	121, 897,
	122, 897,
	123, 897,
	124, 897,
	132, 897,
	133, 897,
	134, 897,
	135, 897,
	136, 897,
	138, 897,
	140, 897,
	144, 897,
	146, 897,
	147, 897,
	149, 897,
	151, 897,
	152, 897,
	153, 897,
	154, 897,
	155, 897,
	156, 897,
	157, 897,
	158, 897,
	159, 897,
	162, 897,
	163, 897,
	168, 897,
	169, 897,
	170, 897,
	173, 897,
	174, 897,
	175, 897,
	176, 897,
	177, 897,
	178, 897,
	179, 897,
	180, 897,
	182, 897,
	184, 897,
	187, 897,
	188, 897,
	189, 897,
	191, 897,
	192, 897,
	195, 897,
	196, 897,
	197, 897,
	199, 897,
	200, 897,
	202, 897,
	204, 897,
	205, 897,
	208, 897,
	209, 897,
	212, 897,
	214, 897,
	217, 897,
	218, 897,
	219, 897,
	220, 897,
	221, 897,
	222, 897,
	223, 897,
	225, 897,
	226, 897,
	227, 897,
	228, 897,
	233, 897,
	234, 897,
	235, 897,
	236, 897,
	237, 897,
	239, 897,
	240, 897,
	242, 897,
	243, 897,
	244, 897,
	247, 897,
	248, 897,
	250, 897,
	252, 897,
	253, 897,
	254, 897,
	255, 897,
	256, 897,
	257, 897,
	258, 897,
	259, 897,
	261, 897,
	262, 897,
	263, 897,
	264, 897,
	265, 897,
	267, 897,
	268, 897,
	269, 897,
	270, 897,
	271, 897,
	272, 897,
	273, 897,
	274, 897,
	276, 897,
	277, 897,
	278, 897,
	279, 897,
	280, 897,
	282, 897,
	283, 897,
	284, 897,
	285, 897,
	286, 897,
	287, 897,
	288, 897,
	290, 897,
	292, 897,
	293, 897,
	294, 897,
	295, 897,
	296, 897,
	297, 897,
	299, 897,
	300, 897,
	301, 897,
	302, 897,
	303, 897,
	304, 897,
	305, 897,
	307, 897,
	308, 897,
	309, 897,
	310, 897,
	311, 897,
	312, 897,
	313, 897,
	314, 897,
	315, 897,
	317, 897,
	318, 897,
	319, 897,
	320, 897,
	322, 897,
	323, 897,
	324, 897,
	325, 897,
	327, 897,
	328, 897,
	329, 897,
	330, 897,
	331, 897,
	332, 897,
	333, 897,
	334, 897,
	335, 897,
	336, 897,
	337, 897,
	338, 897,
	340, 897,
	341, 897,
	343, 897,
	344, 897,
	345, 897,
	346, 897,
	347, 897,
	348, 897,
	349, 897,
	350, 897,
	351, 897,
	352, 897,
	354, 897,
	355, 897,
	356, 897,
	357, 897,
	360, 897,
	361, 897,
	362, 897,
	363, 897,
	365, 897,
	366, 897,
	368, 897,
	369, 897,
	372, 897,
	373, 897,
	374, 897,
	375, 897,
	377, 897,
	379, 897,
	380, 897,
	381, 897,
	382, 897,
	383, 897,
	384, 897,
	387, 897,
	388, 897,
	393, 897,
	394, 897,
	395, 897,
	396, 897,
	397, 897,
	398, 897,
	-2, 0,
	-1, 136,
	113, 868,
	127, 868,
	181, 868,
	207, 868,
	238, 868,
	246, 868,
	370, 868,
	-2, 861,
	-1, 141,
	1, 791,
	187, 791,
	267, 791,
	271, 791,
	424, 791,
	425, 791,
	-2, 0,
	-1, 143,
	1, 791,
	424, 791,
	425, 791,
	-2, 0,
	-1, 144,
	1, 791,
	424, 791,
	425, 791,
	-2, 0,
	-1, 145,
	1, 795,
	424, 795,
	425, 795,
	-2, 0,
	-1, 171,
	4, 904,
	5, 904,
	6, 904,
	7, 904,
	8, 904,
	9, 904,
	20, 904,
	21, 904,
	22, 904,
	23, 904,
	25, 904,
	30, 904,
	31, 904,
	35, 904,
	36, 904,
	37, 904,
	38, 904,
	39, 904,
	40, 904,
	41, 904,
	42, 904,
	43, 904,
	44, 904,
	46, 904,
	47, 904,
	48, 904,
	49, 904,
	50, 904,
	51, 904,
	52, 904,
	53, 904,
	54, 904,
	55, 904,
	56, 904,
	58, 904,
	59, 904,
	61, 904,
	63, 904,
	64, 904,
	65, 904,
	66, 904,
	67, 904,
	69, 904,
	70, 904,
	71, 904,
	72, 904,
	74, 904,
	76, 904,
	77, 904,
	79, 904,
	80, 904,
	81, 904,
	82, 904,
	83, 904,
	84, 904,
	85, 904,
	86, 904,
	87, 904,
	88, 904,
	89, 904,
	90, 904,
	91, 904,
	92, 904,
	93, 904,
	94, 904,
	95, 904,
	96, 904,
	97, 904,
	98, 904,
	99, 904,
	101, 904,
	103, 904,
	106, 904,
	107, 904,
	109, 904,
	110, 904,
	114, 904,
	115, 904,
	116, 904,
	117, 904,
	118, 904,
	119, 904,
	120, 904,
	121, 904,
	122, 904,
	123, 904,
	124, 904,
	125, 904,
	126, 904,
	132, 904,
	133, 904,
	134, 904,
	135, 904,
	136, 904,
	138, 904,
	140, 904,
	143, 904,
	144, 904,
	146, 904,
	147, 904,
	149, 904,
	151, 904,
	152, 904,
	153, 904,
	154, 904,
	155, 904,
	156, 904,
	157, 904,
	158, 904,
	159, 904,
	160, 904,
	162, 904,
	163, 904,
	168, 904,
	169, 904,
	170, 904,
	172, 904,
	173, 904,
	174, 904,
	175, 904,
	176, 904,
	177, 904,
	178, 904,
	179, 904,
	180, 904,
	182, 904,
	184, 904,
	185, 904,
	186, 904,
	187, 904,
	188, 904,
	189, 904,
	190, 904,
	191, 904,
	192, 904,
	195, 904,
	196, 904,
	197, 904,
	199, 904,
	200, 904,
	202, 904,
	203, 904,
	204, 904,
	205, 904,
	206, 904,
	208, 904,
	209, 904,
	212, 904,
	214, 904,
	215, 904,
	216, 904,
	217, 904,
	218, 904,
	219, 904,
	220, 904,
	221, 904,
	222, 904,
	223, 904,
	224, 904,
	225, 904,
	226, 904,
	227, 904,
	228, 904,
	229, 904,
	231, 904,
	232, 904,
	233, 904,
	234, 904,
	235, 904,
	236, 904,
	237, 904,
	239, 904,
	240, 904,
	243, 904,
	244, 904,
	247, 904,
	248, 904,
	249, 904,
	250, 904,
	251, 904,
	252, 904,
	253, 904,
	254, 904,
	255, 904,
	256, 904,
	257, 904,
	258, 904,
	259, 904,
	261, 904,
	262, 904,
	263, 904,
	264, 904,
	265, 904,
	267, 904,
	268, 904,
	269, 904,
	270, 904,
	271, 904,
	272, 904,
	273, 904,
	274, 904,
	276, 904,
	277, 904,
	278, 904,
	279, 904,
	280, 904,
	282, 904,
	283, 904,
	284, 904,
	285, 904,
	286, 904,
	287, 904,
	288, 904,
	290, 904,
	291, 904,
	292, 904,
	293, 904,
	294, 904,
	295, 904,
	296, 904,
	297, 904,
	299, 904,
	300, 904,
	301, 904,
	302, 904,
	303, 904,
	304, 904,
	305, 904,
	307, 904,
	308, 904,
	309, 904,
	310, 904,
	311, 904,
	312, 904,
	313, 904,
	314, 904,
	315, 904,
	316, 904,
	317, 904,
	318, 904,
	319, 904,
	320, 904,
	321, 904,
	322, 904,
	323, 904,
	324, 904,
	325, 904,
	327, 904,
	328, 904,
	329, 904,
	330, 904,
	331, 904,
	332, 904,
	333, 904,
	334, 904,
	335, 904,
	336, 904,
	337, 904,
	338, 904,
	340, 904,
	341, 904,
	343, 904,
	344, 904,
	345, 904,
	346, 904,
	347, 904,
	348, 904,
	349, 904,
	350, 904,
	351, 904,
	352, 904,
	354, 904,
	355, 904,
	356, 904,
	357, 904,
	360, 904,
	361, 904,
	362, 904,
	363, 904,
	364, 904,
	365, 904,
	366, 904,
	368, 904,
	369, 904,
	372, 904,
	373, 904,
	374, 904,
	375, 904,
	376, 904,
	377, 904,
	379, 904,
	380, 904,
	381, 904,
	382, 904,
	383, 904,
	384, 904,
	387, 904,
	388, 904,
	393, 904,
	394, 904,
	395, 904,
	396, 904,
	397, 904,
	398, 904,
	399, 904,
	407, 904,
	412, 904,
	413, 904,
	414, 904,
	421, 904,
	427, 904,
	-2, 0,
	-1, 174,
	1, 57,
	425, 57,
	-2, 895,
	-1, 207,
	423, 1473,
	426, 1473,
	-2, 592,
	-1, 208,
	423, 1475,
	426, 1475,
	-2, 593,
	-1, 209,
	423, 1474,
	426, 1474,
	-2, 594,
	-1, 210,
	426, 1415,
	-2, 595,
	-1, 618,
	142, 1588,
	358, 1588,
	404, 1588,
	423, 1588,
	-2, 0,
	-1, 619,
	142, 1511,
	358, 1511,
	404, 1511,
	423, 1511,
	-2, 0,
	-1, 621,
	142, 1663,
	358, 1663,
	404, 1663,
	423, 1663,
	-2, 0,
	-1, 623,
	142, 1692,
	358, 1692,
	404, 1692,
	423, 1692,
	-2, 0,
	-1, 630,
	142, 1595,
	358, 1595,
	404, 1595,
	423, 1595,
	-2, 423,
	-1, 665,
	1, 521,
	420, 521,
	422, 521,
	424, 521,
	425, 521,
	-2, 0,
	-1, 666,
	1, 591,
	139, 591,
	420, 591,
	422, 591,
	424, 591,
	425, 591,
	-2, 0,
	-1, 672,
	1, 535,
	420, 535,
	422, 535,
	424, 535,
	425, 535,
	-2, 0,
	-1, 674,
	1, 539,
	420, 539,
	422, 539,
	424, 539,
	425, 539,
	-2, 0,
	-1, 677,
	1, 550,
	420, 550,
	422, 550,
	424, 550,
	425, 550,
	-2, 0,
	-1, 678,
	1, 556,
	420, 556,
	422, 556,
	424, 556,
	425, 556,
	-2, 0,
	-1, 679,
	1, 559,
	420, 559,
	422, 559,
	424, 559,
	425, 559,
	-2, 0,
	-1, 683,
	1, 573,
	420, 573,
	422, 573,
	424, 573,
	425, 573,
	-2, 0,
	-1, 684,
	1, 575,
	420, 575,
	422, 575,
	424, 575,
	425, 575,
	-2, 0,
	-1, 712,
	127, 908,
	207, 908,
	238, 908,
	-2, 864,
	-1, 720,
	127, 907,
	207, 907,
	238, 907,
	-2, 862,
	-1, 747,
	421, 1767,
	-2, 1187,
	-1, 748,
	421, 1768,
	-2, 1188,
	-1, 777,
	421, 1467,
	-2, 1458,
	-1, 778,
	5, 1043,
	421, 1482,
	-2, 1473,
	-1, 779,
	421, 1483,
	-2, 1474,
	-1, 786,
	5, 1027,
	-2, 1503,
	-1, 787,
	5, 1028,
	-2, 1507,
	-1, 788,
	5, 1029,
	-2, 1506,
	-1, 789,
	5, 1030,
	-2, 1688,
	-1, 790,
	5, 1031,
	-2, 1597,
	-1, 791,
	5, 1032,
	-2, 1656,
	-1, 792,
	5, 1033,
	-2, 1658,
	-1, 793,
	5, 1034,
	-2, 1659,
	-1, 794,
	5, 1035,
	-2, 1660,
	-1, 795,
	5, 1036,
	-2, 1668,
	-1, 796,
	5, 1037,
	-2, 1700,
	-1, 797,
	5, 1038,
	-2, 1565,
	-1, 798,
	5, 1039,
	-2, 1502,
	-1, 799,
	5, 1040,
	-2, 1605,
	-1, 800,
	5, 1041,
	-2, 1606,
	-1, 801,
	5, 1042,
	-2, 1569,
	-1, 802,
	5, 1091,
	421, 1091,
	-2, 1734,
	-1, 822,
	5, 1064,
	-2, 1504,
	-1, 823,
	5, 1082,
	-2, 1531,
	-1, 825,
	5, 1056,
	-2, 1552,
	-1, 826,
	5, 1057,
	-2, 1553,
	-1, 827,
	5, 1048,
	-2, 1568,
	-1, 828,
	5, 1049,
	-2, 1570,
	-1, 829,
	5, 1050,
	-2, 1571,
	-1, 830,
	5, 1051,
	-2, 1572,
	-1, 831,
	5, 1015,
	-2, 1578,
	-1, 832,
	5, 1016,
	-2, 1579,
	-1, 833,
	5, 1079,
	-2, 1678,
	-1, 834,
	5, 1089,
	-2, 1690,
	-1, 835,
	5, 1054,
	-2, 1714,
	-1, 836,
	5, 1081,
	-2, 1715,
	-1, 837,
	5, 1063,
	-2, 1716,
	-1, 838,
	5, 1081,
	-2, 1717,
	-1, 839,
	5, 1081,
	-2, 1718,
	-1, 840,
	5, 1046,
	-2, 1721,
	-1, 841,
	5, 1046,
	-2, 1722,
	-1, 844,
	5, 1071,
	-2, 1726,
	-1, 846,
	5, 1047,
	-2, 1732,
	-1, 847,
	5, 1052,
	-2, 1733,
	-1, 849,
	5, 1046,
	-2, 1738,
	-1, 852,
	5, 1055,
	-2, 1743,
	-1, 853,
	5, 1053,
	-2, 1745,
	-1, 855,
	5, 1083,
	-2, 1747,
	-1, 856,
	5, 1085,
	-2, 1748,
	-1, 857,
	5, 1087,
	-2, 1749,
	-1, 860,
	5, 1078,
	-2, 1753,
	-1, 930,
	421, 1482,
	-2, 1473,
	-1, 947,
	282, 1455,
	414, 1455,
	-2, 1454,
	-1, 1096,
	257, 893,
	-2, 718,
	-1, 1105,
	241, 1477,
	-2, 0,
	-1, 1148,
	1, 290,
	420, 290,
	422, 290,
	424, 290,
	425, 290,
	-2, 867,
	-1, 1151,
	4, 1752,
	10, 1752,
	11, 1752,
	13, 1752,
	14, 1752,
	15, 1752,
	16, 1752,
	17, 1752,
	18, 1752,
	20, 1752,
	21, 1752,
	22, 1752,
	23, 1752,
	25, 1752,
	28, 1752,
	30, 1752,
	32, 1752,
	35, 1752,
	36, 1752,
	37, 1752,
	38, 1752,
	39, 1752,
	40, 1752,
	41, 1752,
	42, 1752,
	43, 1752,
	44, 1752,
	46, 1752,
	47, 1752,
	48, 1752,
	49, 1752,
	50, 1752,
	51, 1752,
	54, 1752,
	55, 1752,
	56, 1752,
	58, 1752,
	59, 1752,
	60, 1752,
	63, 1752,
	64, 1752,
	65, 1752,
	66, 1752,
	67, 1752,
	68, 1752,
	69, 1752,
	70, 1752,
	71, 1752,
	72, 1752,
	74, 1752,
	75, 1752,
	76, 1752,
	77, 1752,
	79, 1752,
	80, 1752,
	81, 1752,
	82, 1752,
	90, 1752,
	91, 1752,
	92, 1752,
	93, 1752,
	94, 1752,
	95, 1752,
	96, 1752,
	97, 1752,
	99, 1752,
	101, 1752,
	103, 1752,
	106, 1752,
	107, 1752,
	109, 1752,
	110, 1752,
	114, 1752,
	115, 1752,
	116, 1752,
	117, 1752,
	118, 1752,
	119, 1752,
	120, 1752,
	121, 1752,
	122, 1752,
	123, 1752,
	124, 1752,
	128, 1752,
	129, 1752,
	130, 1752,
	131, 1752,
	132, 1752,
	133, 1752,
	134, 1752,
	135, 1752,
	136, 1752,
	137, 1752,
	138, 1752,
	140, 1752,
	143, 1752,
	144, 1752,
	146, 1752,
	147, 1752,
	149, 1752,
	151, 1752,
	152, 1752,
	153, 1752,
	154, 1752,
	155, 1752,
	156, 1752,
	157, 1752,
	158, 1752,
	159, 1752,
	160, 1752,
	161, 1752,
	162, 1752,
	163, 1752,
	164, 1752,
	165, 1752,
	166, 1752,
	168, 1752,
	169, 1752,
	170, 1752,
	172, 1752,
	173, 1752,
	174, 1752,
	175, 1752,
	176, 1752,
	177, 1752,
	178, 1752,
	179, 1752,
	180, 1752,
	182, 1752,
	184, 1752,
	185, 1752,
	186, 1752,
	187, 1752,
	188, 1752,
	189, 1752,
	190, 1752,
	191, 1752,
	192, 1752,
	193, 1752,
	194, 1752,
	195, 1752,
	196, 1752,
	197, 1752,
	199, 1752,
	200, 1752,
	202, 1752,
	203, 1752,
	204, 1752,
	205, 1752,
	206, 1752,
	208, 1752,
	209, 1752,
	212, 1752,
	213, 1752,
	214, 1752,
	217, 1752,
	218, 1752,
	219, 1752,
	220, 1752,
	221, 1752,
	222, 1752,
	223, 1752,
	224, 1752,
	225, 1752,
	226, 1752,
	227, 1752,
	228, 1752,
	231, 1752,
	233, 1752,
	234, 1752,
	235, 1752,
	236, 1752,
	237, 1752,
	239, 1752,
	240, 1752,
	243, 1752,
	244, 1752,
	245, 1752,
	247, 1752,
	248, 1752,
	250, 1752,
	252, 1752,
	253, 1752,
	254, 1752,
	255, 1752,
	256, 1752,
	257, 1752,
	258, 1752,
	259, 1752,
	261, 1752,
	262, 1752,
	263, 1752,
	264, 1752,
	265, 1752,
	267, 1752,
	268, 1752,
	269, 1752,
	270, 1752,
	271, 1752,
	272, 1752,
	273, 1752,
	274, 1752,
	276, 1752,
	277, 1752,
	278, 1752,
	279, 1752,
	280, 1752,
	281, 1752,
	282, 1752,
	283, 1752,
	284, 1752,
	285, 1752,
	286, 1752,
	287, 1752,
	288, 1752,
	290, 1752,
	291, 1752,
	292, 1752,
	293, 1752,
	294, 1752,
	295, 1752,
	296, 1752,
	297, 1752,
	298, 1752,
	299, 1752,
	300, 1752,
	301, 1752,
	302, 1752,
	303, 1752,
	304, 1752,
	305, 1752,
	307, 1752,
	308, 1752,
	309, 1752,
	310, 1752,
	311, 1752,
	312, 1752,
	313, 1752,
	314, 1752,
	315, 1752,
	317, 1752,
	318, 1752,
	319, 1752,
	320, 1752,
	321, 1752,
	322, 1752,
	323, 1752,
	324, 1752,
	325, 1752,
	327, 1752,
	328, 1752,
	329, 1752,
	330, 1752,
	331, 1752,
	332, 1752,
	333, 1752,
	334, 1752,
	335, 1752,
	336, 1752,
	337, 1752,
	338, 1752,
	340, 1752,
	341, 1752,
	343, 1752,
	344, 1752,
	345, 1752,
	346, 1752,
	347, 1752,
	348, 1752,
	349, 1752,
	350, 1752,
	351, 1752,
	352, 1752,
	354, 1752,
	355, 1752,
	356, 1752,
	357, 1752,
	360, 1752,
	361, 1752,
	362, 1752,
	363, 1752,
	365, 1752,
	366, 1752,
	368, 1752,
	369, 1752,
	372, 1752,
	373, 1752,
	374, 1752,
	375, 1752,
	377, 1752,
	379, 1752,
	380, 1752,
	381, 1752,
	382, 1752,
	383, 1752,
	384, 1752,
	387, 1752,
	388, 1752,
	393, 1752,
	394, 1752,
	395, 1752,
	396, 1752,
	397, 1752,
	398, 1752,
	399, 1752,
	400, 1752,
	402, 1752,
	403, 1752,
	404, 1752,
	405, 1752,
	406, 1752,
	407, 1752,
	409, 1752,
	410, 1752,
	411, 1752,
	412, 1752,
	413, 1752,
	414, 1752,
	415, 1752,
	416, 1752,
	417, 1752,
	419, 1752,
	422, 1752,
	423, 1752,
	426, 1752,
	427, 1752,
	-2, 0,
	-1, 1170,
	142, 1663,
	358, 1663,
	404, 1663,
	423, 1663,
	-2, 0,
	-1, 1201,
	142, 1692,
	358, 1692,
	404, 1692,
	423, 1692,
	-2, 0,
	-1, 1202,
	187, 803,
	267, 803,
	271, 803,
	-2, 410,
	-1, 1279,
	127, 907,
	207, 907,
	238, 907,
	-2, 865,
	-1, 1363,
	113, 869,
	127, 869,
	181, 869,
	207, 869,
	238, 869,
	246, 869,
	370, 869,
	-2, 1230,
	-1, 1413,
	422, 1350,
	-2, 0,
	-1, 1421,
	187, 803,
	267, 803,
	271, 803,
	-2, 798,
	-1, 1450,
	422, 1350,
	-2, 0,
	-1, 1458,
	113, 869,
	127, 869,
	181, 869,
	207, 869,
	238, 869,
	246, 869,
	370, 869,
	-2, 974,
	-1, 1660,
	187, 803,
	267, 803,
	271, 803,
	-2, 412,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1126,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1127,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1128,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1129,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1130,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1131,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1132,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1133,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1145,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1146,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1147,
	-1, 1792,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1152,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1154,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1158,
	-1, 1801,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1159,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1160,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1161,
	-1, 1884,
	5, 1043,
	142, 1361,
	421, 1482,
	-2, 1473,
	-1, 1885,
	142, 1362,
	-2, 1710,
	-1, 1886,
	142, 1363,
	-2, 1592,
	-1, 1887,
	142, 1364,
	-2, 1532,
	-1, 1888,
	142, 1365,
	-2, 1560,
	-1, 1889,
	142, 1366,
	-2, 1591,
	-1, 1890,
	142, 1367,
	-2, 1655,
	-1, 1958,
	422, 1350,
	-2, 0,
	-1, 1968,
	1, 975,
	79, 975,
	113, 975,
	127, 975,
	143, 975,
	148, 975,
	150, 975,
	172, 975,
	181, 975,
	190, 975,
	203, 975,
	207, 975,
	224, 975,
	238, 975,
	241, 975,
	246, 975,
	289, 975,
	291, 975,
	370, 975,
	378, 975,
	390, 975,
	391, 975,
	401, 975,
	420, 975,
	422, 975,
	424, 975,
	425, 975,
	426, 975,
	-2, 974,
	-1, 1970,
	421, 1459,
	-2, 1471,
	-1, 2052,
	422, 1420,
	426, 1420,
	-2, 1447,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1153,
	-1, 2176,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1155,
	-1, 2181,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1156,
	-1, 2410,
	257, 893,
	-2, 718,
	-1, 2476,
	187, 803,
	267, 803,
	271, 803,
	-2, 409,
	-1, 2491,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1157,
	-1, 2496,
	185, 0,
	186, 0,
	231, 0,
	-2, 1175,
	-1, 2557,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1205,
	-1, 2558,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1206,
	-1, 2559,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1207,
	-1, 2563,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1211,
	-1, 2564,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1212,
	-1, 2565,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1213,
	-1, 2604,
	421, 1460,
	-2, 1472,
	-1, 2718,
	185, 0,
	186, 0,
	231, 0,
	-2, 1176,
	-1, 2721,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1179,
	-1, 2722,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1181,
	-1, 2867,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1180,
	-1, 2868,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1182,
	-1, 2878,
	185, 0,
	-2, 1214,
	-1, 2967,
	185, 0,
	-2, 1215,
	-1, 3065,
	38, 0,
	160, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1713,
}

const sqlPrivate = 57344

const sqlLast = 59134

var sqlAct = [...]int{

	779, 3064, 2820, 2653, 2906, 3073, 2078, 3127, 3040, 3027,
	3043, 3041, 3075, 3074, 2086, 2527, 1526, 2895, 2971, 2107,
	3063, 2835, 776, 1138, 2858, 1755, 2671, 2666, 2425, 2676,
	1282, 755, 2209, 1080, 1054, 2774, 2169, 2789, 2211, 1815,
	2417, 209, 721, 2614, 1590, 2419, 495, 2430, 966, 1591,
	2054, 2882, 2448, 495, 2050, 775, 951, 2450, 490, 1962,
	495, 1102, 2075, 495, 1448, 2318, 495, 209, 2276, 495,
	495, 2294, 1134, 1461, 944, 1171, 495, 2613, 2752, 2087,
	1429, 1457, 1541, 2335, 495, 2035, 1540, 1537, 960, 1549,
	1982, 2305, 1546, 2053, 1973, 1963, 1487, 1827, 1371, 2275,
	1746, 1741, 545, 541, 2580, 1952, 2165, 2972, 1685, 2429,
	1421, 1141, 1503, 1509, 821, 1965, 1538, 1855, 762, 2393,
	1430, 1466, 2821, 1812, 1468, 73, 1837, 2010, 2009, 1828,
	915, 2036, 1399, 1204, 1849, 729, 130, 580, 2051, 953,
	1131, 1121, 210, 2080, 211, 2057, 1401, 1368, 1149, 920,
	1944, 1439, 1880, 492, 136, 897, 1929, 1358, 628, 1281,
	137, 608, 1684, 770, 1283, 205, 495, 495, 583, 1147,
	1058, 1556, 622, 1118, 1479, 538, 720, 895, 657, 1921,
	1420, 593, 2596, 2196, 1287, 2597, 3154, 1564, 1564, 3148,
	1938, 1564, 2079, 1938, 475, 491, 130, 725, 495, 495,
	495, 956, 495, 495, 969, 969, 601, 2108, 3147, 725,
	1449, 3124, 1938, 495, 495, 2788, 2037, 3121, 3099, 3093,
	475, 1518, 2788, 1938, 1938, 1562, 2489, 3092, 2436, 3089,
	1061, 1938, 595, 3090, 3086, 3083, 478, 2466, 3087, 1518,
	3061, 1576, 3060, 2437, 1518, 3023, 1518, 912, 1512, 735,
	3059, 3058, 1079, 3022, 1576, 1576, 3009, 2118, 947, 3002,
	1518, 3000, 478, 2788, 726, 2788, 2998, 2969, 2952, 2942,
	2788, 2118, 2692, 2788, 2937, 963, 2935, 2955, 1518, 2925,
	2788, 898, 898, 1518, 2406, 713, 1073, 1576, 918, 2924,
	2917, 712, 2916, 1518, 1518, 2888, 2788, 2869, 2815, 1518,
	2811, 2118, 1938, 2787, 1938, 1518, 2583, 2788, 566, 28,
	130, 2720, 949, 2690, 573, 2118, 2037, 2683, 730, 2682,
	1298, 1299, 2592, 2683, 1930, 40, 2593, 2586, 937, 941,
	946, 1938, 2505, 901, 2202, 902, 1518, 2114, 2615, 44,
	2203, 2583, 2248, 2249, 899, 1301, 2500, 2456, 40, 2291,
	1938, 2398, 2243, 1938, 2242, 1060, 1938, 1059, 1938, 2236,
	1829, 2235, 44, 2237, 2136, 1938, 475, 572, 1938, 2117,
	1300, 1931, 1663, 2118, 1187, 1298, 1299, 1938, 1331, 1332,
	1333, 1341, 1342, 1343, 2110, 2692, 2025, 2106, 2103, 2210,
	2115, 1581, 1938, 1334, 2046, 1937, 574, 1580, 1518, 1938,
	1301, 1581, 1971, 1347, 1176, 59, 576, 1078, 478, 2083,
	60, 2398, 2248, 2249, 2168, 2266, 2267, 2268, 1518, 2116,
	2147, 1517, 1425, 1565, 1565, 1300, 1852, 1565, 1832, 576,
	2717, 1057, 174, 1320, 1169, 1168, 2438, 1167, 1166, 1165,
	1317, 1072, 1164, 63, 1163, 1162, 1161, 1306, 1160, 1159,
	1158, 1157, 1156, 2248, 2249, 2439, 2266, 2267, 2268, 1155,
	1154, 1153, 903, 900, 1298, 1299, 63, 1682, 719, 2254,
	2263, 2716, 1177, 718, 1328, 1329, 1330, 717, 716, 715,
	711, 710, 709, 28, 1853, 708, 707, 706, 705, 1301,
	704, 703, 171, 1323, 1324, 1325, 1326, 702, 701, 697,
	696, 695, 1306, 655, 495, 495, 654, 495, 956, 956,
	495, 2263, 653, 495, 1300, 652, 495, 651, 650, 1369,
	649, 1177, 495, 1321, 648, 1338, 1348, 2436, 173, 1328,
	1329, 1330, 495, 495, 495, 495, 495, 956, 956, 2254,
	647, 646, 645, 644, 956, 2264, 643, 64, 1854, 1851,
	1344, 1345, 642, 641, 640, 639, 171, 638, 1315, 1316,
	1870, 1142, 1572, 1563, 2767, 1095, 1725, 637, 1518, 172,
	64, 1336, 636, 635, 139, 66, 495, 67, 1321, 634,
	2254, 1092, 633, 1067, 632, 728, 617, 2269, 616, 495,
	171, 1306, 173, 615, 614, 171, 1346, 139, 66, 613,
	67, 1107, 612, 2482, 529, 528, 575, 138, 1322, 110,
	1335, 495, 501, 500, 499, 2264, 481, 171, 171, 1096,
	1099, 171, 495, 480, 1135, 479, 173, 195, 2269, 575,
	2265, 173, 110, 172, 194, 193, 1856, 192, 191, 2248,
	2249, 190, 165, 189, 188, 187, 1327, 186, 185, 184,
	166, 183, 1120, 173, 173, 1930, 2264, 173, 1177, 182,
	181, 180, 956, 1322, 179, 178, 177, 172, 176, 726,
	175, 138, 172, 1868, 1125, 1128, 165, 1961, 2725, 2684,
	2601, 165, 2331, 1150, 166, 2208, 1339, 2198, 2157, 166,
	2047, 2040, 1456, 1688, 172, 172, 2248, 2249, 172, 495,
	2265, 1465, 1866, 165, 165, 138, 1375, 165, 1864, 1862,
	138, 166, 166, 1218, 1294, 166, 1082, 1063, 3080, 1311,
	1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 1850, 3062,
	3045, 3034, 2082, 138, 1202, 1212, 138, 2958, 2962, 1216,
	2956, 2265, 2257, 2258, 2250, 2251, 2252, 2253, 2255, 2256,
	2938, 1279, 2123, 2401, 2905, 1280, 2856, 2843, 2751, 2750,
	2744, 2737, 2736, 2735, 1337, 2731, 2254, 1312, 1313, 1319,
	1318, 1314, 1340, 1226, 1311, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 2730, 2729, 2728, 2703, 2740, 2701, 1955,
	2600, 2739, 2577, 1066, 1199, 1071, 2576, 1077, 2575, 2513,
	2397, 2330, 2321, 2287, 2260, 2261, 2262, 2274, 2248, 2249,
	2247, 2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255, 2256,
	2244, 2241, 2240, 2254, 1823, 2238, 2216, 2215, 2197, 1278,
	1968, 1294, 1587, 911, 1379, 1523, 1521, 1219, 1293, 1372,
	542, 1361, 2264, 3152, 3135, 2260, 2261, 2262, 3134, 777,
	1081, 2529, 2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255,
	2256, 3053, 3048, 573, 2460, 544, 1302, 1303, 1304, 1305,
	1307, 1308, 1683, 2011, 40, 2120, 3004, 2995, 2994, 726,
	2990, 2164, 2989, 2983, 713, 2980, 2954, 171, 44, 171,
	712, 2953, 495, 1817, 2901, 2880, 2830, 495, 2825, 2264,
	1180, 2248, 2249, 2823, 2810, 2793, 2749, 1185, 1290, 1291,
	1295, 2693, 2669, 1298, 1299, 2660, 572, 2659, 2657, 2634,
	2633, 2623, 2622, 173, 495, 173, 2588, 2265, 2495, 2462,
	2382, 2366, 1427, 2974, 2311, 2254, 2345, 2842, 1301, 2344,
	2290, 2225, 2224, 2221, 1362, 574, 2190, 1402, 1407, 1824,
	2125, 1298, 1299, 1958, 59, 576, 1949, 1936, 1860, 60,
	1298, 1299, 1532, 1300, 172, 1387, 172, 1386, 1385, 1397,
	1384, 1383, 1400, 165, 1450, 165, 1301, 1428, 1419, 2855,
	1869, 166, 1418, 166, 2265, 1301, 1433, 1434, 1403, 1413,
	1412, 768, 63, 967, 1055, 1411, 1410, 1409, 1408, 1405,
	1455, 1300, 138, 1404, 138, 1298, 1299, 2345, 1395, 1394,
	1300, 1393, 898, 1392, 2248, 2249, 1391, 1390, 1447, 1389,
	1388, 1376, 1361, 924, 1198, 1182, 1152, 1146, 2254, 2723,
	1301, 2700, 1452, 2595, 2591, 2201, 918, 1950, 1372, 2458,
	1306, 2250, 2251, 2252, 2253, 2255, 2256, 726, 1682, 1359,
	130, 1462, 2420, 1424, 771, 1300, 1682, 956, 495, 1215,
	1474, 1486, 1446, 1422, 969, 2248, 2249, 1328, 1329, 1330,
	2848, 1459, 2263, 2135, 1426, 1682, 1673, 1672, 2695, 1682,
	1679, 2694, 495, 969, 495, 495, 1510, 1306, 2598, 2037,
	1456, 2931, 209, 1867, 1276, 2013, 64, 2258, 2250, 2251,
	2252, 2253, 2255, 2256, 1416, 1414, 495, 495, 1193, 2108,
	1417, 1415, 2386, 495, 1366, 495, 1321, 495, 2381, 2134,
	1533, 495, 1865, 139, 66, 2377, 67, 2365, 1863, 1861,
	2282, 2281, 1306, 2280, 2959, 2279, 1545, 2957, 1505, 2174,
	1480, 2254, 1390, 1390, 171, 1656, 1211, 2632, 893, 1381,
	1542, 2468, 2376, 956, 1499, 575, 1669, 2883, 110, 1328,
	1329, 1330, 2079, 2531, 3081, 916, 1838, 1398, 1515, 3091,
	1676, 495, 956, 2904, 3088, 1588, 209, 495, 495, 2432,
	173, 2609, 894, 2206, 956, 1269, 3037, 209, 495, 2667,
	1553, 495, 495, 1585, 1223, 2111, 537, 495, 200, 1551,
	1060, 1322, 1059, 1529, 1648, 508, 3114, 1646, 1321, 2802,
	3008, 475, 2252, 2253, 2255, 2256, 3082, 2264, 1254, 969,
	1267, 172, 518, 2137, 2478, 3115, 1255, 862, 1516, 495,
	165, 3151, 2930, 887, 495, 2929, 1560, 885, 166, 209,
	495, 889, 495, 1120, 495, 475, 495, 883, 495, 1710,
	1378, 2927, 910, 478, 1616, 880, 2926, 1536, 495, 543,
	495, 1810, 2652, 2121, 1268, 1975, 2647, 724, 495, 495,
	495, 1436, 2819, 2642, 2641, 1213, 2637, 2459, 2606, 1650,
	536, 1677, 1808, 1583, 2605, 2220, 1555, 478, 1558, 507,
	1984, 2219, 1150, 1322, 519, 2218, 2217, 495, 2177, 1916,
	2109, 969, 2265, 2250, 2251, 2252, 2253, 2255, 2256, 2065,
	1670, 2030, 1660, 1975, 1728, 1302, 1303, 1304, 1305, 1307,
	1308, 1214, 1582, 1481, 1974, 2024, 2020, 2001, 1095, 475,
	1717, 1221, 1799, 1423, 1056, 723, 1915, 1852, 1914, 1681,
	475, 1584, 1913, 1199, 1719, 1757, 1586, 2076, 1747, 1754,
	1478, 1567, 1647, 3007, 1569, 1657, 1722, 1571, 1308, 2961,
	1084, 1574, 2481, 2045, 1304, 1305, 1307, 1308, 2034, 1723,
	1690, 478, 1482, 1483, 1987, 1674, 969, 1686, 1804, 1189,
	699, 1253, 478, 2908, 1994, 2140, 1805, 1692, 2625, 1806,
	607, 3056, 475, 1811, 589, 1853, 1993, 2142, 1469, 1559,
	725, 1470, 1856, 2523, 1701, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 2259, 2257, 2258, 2250, 2251, 2252, 2253,
	2255, 2256, 1695, 3106, 495, 2427, 495, 2143, 1814, 2373,
	1814, 2428, 606, 2017, 478, 2368, 1297, 1462, 1821, 2141,
	1726, 1469, 713, 1819, 1470, 713, 713, 1727, 1737, 607,
	969, 1738, 1739, 1683, 2011, 1745, 495, 535, 495, 1854,
	1851, 1683, 2011, 1498, 1838, 495, 969, 1197, 2798, 1190,
	495, 1835, 2256, 2166, 2167, 1484, 2248, 2249, 495, 2427,
	1683, 2011, 1192, 1471, 1683, 1680, 495, 726, 1501, 2520,
	1275, 1856, 2986, 726, 521, 520, 1473, 3114, 495, 1986,
	527, 956, 1833, 1724, 1250, 2479, 745, 1579, 1396, 2643,
	3130, 2067, 495, 969, 1941, 1825, 2021, 1967, 495, 495,
	1976, 1807, 522, 502, 722, 3077, 1471, 2477, 1476, 1809,
	1951, 1721, 534, 495, 1959, 1960, 495, 3137, 2004, 1473,
	3105, 898, 2187, 1912, 530, 1475, 1564, 1856, 2864, 2874,
	1879, 1251, 2064, 2521, 2470, 918, 947, 1266, 1891, 1658,
	495, 2635, 495, 2185, 495, 1988, 1990, 495, 1208, 495,
	1222, 495, 2018, 495, 495, 918, 495, 956, 956, 956,
	1956, 1926, 956, 2003, 2031, 1925, 726, 2357, 1475, 495,
	1934, 1935, 881, 1942, 1946, 1947, 881, 891, 2626, 2796,
	890, 2101, 2102, 2254, 1985, 1476, 882, 1709, 1996, 1972,
	1459, 3019, 2022, 512, 881, 1979, 2002, 2933, 2032, 1356,
	201, 2356, 2012, 2014, 2015, 2016, 1966, 763, 2019, 2473,
	739, 2385, 1476, 1831, 535, 2003, 505, 3078, 3020, 1850,
	1083, 1856, 1945, 2909, 725, 2097, 2696, 2223, 1209, 2705,
	495, 1188, 1210, 1502, 196, 2712, 1237, 537, 2363, 2182,
	1060, 1286, 2038, 3076, 2099, 3104, 2126, 3113, 476, 2860,
	2183, 475, 532, 493, 2188, 1476, 3111, 2092, 2834, 2264,
	514, 2832, 2073, 2071, 2104, 3128, 1535, 540, 2100, 969,
	584, 495, 2113, 540, 476, 202, 584, 604, 1796, 495,
	2865, 495, 2085, 611, 3079, 511, 2797, 533, 2094, 534,
	2095, 631, 2096, 478, 2098, 2151, 130, 2152, 2472, 1191,
	700, 1150, 495, 495, 495, 130, 495, 2112, 1366, 1229,
	2105, 2122, 2469, 2179, 588, 1813, 2130, 1842, 2131, 1694,
	1820, 536, 1263, 1435, 201, 495, 3129, 2124, 1186, 1175,
	498, 531, 1296, 2390, 1514, 3143, 1878, 1472, 2394, 523,
	2977, 2919, 2566, 2859, 2265, 1883, 1883, 924, 1661, 1894,
	1896, 924, 1901, 3138, 2747, 1400, 3131, 1403, 2127, 1410,
	1924, 2918, 1565, 1196, 204, 2899, 2608, 2129, 1998, 1928,
	2341, 2337, 2801, 540, 540, 2159, 2138, 2074, 203, 2800,
	1472, 931, 2184, 2072, 2471, 1554, 524, 1544, 1980, 1543,
	2186, 2154, 769, 508, 2027, 2156, 1539, 1534, 1903, 202,
	1794, 1797, 1264, 2359, 1438, 493, 493, 493, 506, 961,
	493, 2042, 495, 2044, 537, 199, 1220, 2180, 687, 1203,
	476, 1062, 525, 130, 526, 2361, 1733, 130, 2199, 532,
	2519, 504, 1356, 1519, 1668, 2861, 2161, 1285, 734, 2319,
	2163, 1172, 2005, 503, 1442, 2081, 1793, 2081, 1714, 3028,
	197, 1980, 1527, 1664, 1285, 2259, 2257, 2258, 2250, 2251,
	2252, 2253, 2255, 2256, 533, 2360, 1265, 2567, 1442, 3142,
	2672, 2836, 513, 1445, 2568, 1238, 2049, 507, 2090, 2900,
	2347, 2346, 2172, 1691, 200, 2308, 2748, 509, 204, 1451,
	1940, 1943, 1939, 916, 198, 1666, 2048, 1445, 536, 599,
	2178, 723, 203, 2399, 1443, 2654, 688, 1980, 531, 592,
	2799, 1667, 3, 969, 1531, 1440, 2292, 1284, 1734, 1117,
	1106, 2299, 2300, 726, 1105, 3118, 2320, 1115, 1443, 495,
	2822, 687, 495, 1208, 1284, 1469, 2389, 512, 1470, 199,
	495, 495, 969, 2205, 2753, 495, 2581, 2897, 1286, 1441,
	1859, 734, 578, 495, 495, 495, 2831, 3120, 2879, 495,
	505, 1795, 495, 2278, 1273, 2395, 2307, 2006, 2007, 495,
	495, 495, 495, 495, 197, 1230, 571, 36, 2898, 2328,
	1174, 1173, 495, 2746, 2651, 2296, 2277, 1858, 1689, 495,
	2494, 2315, 1444, 2303, 2304, 570, 35, 2309, 2447, 2324,
	2325, 495, 956, 2239, 1208, 495, 2189, 1260, 200, 2338,
	2342, 969, 2314, 1209, 1258, 495, 1444, 1210, 198, 688,
	1471, 969, 1231, 2128, 2310, 1228, 918, 1248, 969, 511,
	2329, 2293, 879, 1473, 918, 918, 2029, 689, 918, 2155,
	495, 2000, 495, 2367, 495, 2343, 956, 495, 956, 956,
	956, 1525, 495, 2349, 495, 2353, 2354, 1274, 495, 1095,
	2327, 1246, 1244, 495, 1183, 495, 569, 32, 2322, 1242,
	1756, 1240, 495, 1708, 1474, 2374, 2332, 2313, 2284, 2285,
	2286, 2316, 1475, 2150, 1209, 597, 598, 935, 1210, 495,
	495, 2132, 956, 2378, 2434, 590, 591, 2423, 2362, 1474,
	1116, 2422, 1711, 2306, 1272, 1095, 2453, 2369, 1114, 495,
	1698, 493, 1090, 2375, 493, 2372, 2383, 493, 1649, 2379,
	961, 2408, 2370, 1110, 2384, 2465, 2371, 2464, 1510, 493,
	690, 2403, 2400, 577, 1510, 1234, 1113, 508, 495, 493,
	493, 493, 493, 961, 3072, 1839, 2421, 1259, 2457, 2396,
	689, 36, 506, 495, 1257, 568, 79, 2407, 2193, 2409,
	2410, 2411, 1382, 567, 78, 1366, 2649, 1247, 691, 1476,
	35, 564, 23, 1513, 1438, 504, 884, 886, 3025, 969,
	2433, 2440, 2771, 631, 2630, 2213, 2214, 503, 726, 969,
	2446, 565, 24, 563, 30, 1467, 493, 562, 21, 560,
	20, 1245, 1243, 2455, 495, 2628, 2607, 2416, 2414, 1241,
	1707, 1239, 2077, 1506, 2069, 2497, 513, 1596, 1194, 561,
	19, 507, 130, 2474, 2475, 2515, 2516, 2517, 2476, 631,
	2068, 509, 550, 15, 2066, 1970, 2480, 2785, 1442, 2483,
	1365, 32, 482, 690, 2532, 2063, 1678, 2508, 2418, 2485,
	2487, 551, 16, 2463, 1578, 559, 57, 1747, 2535, 1924,
	1924, 1924, 2782, 1577, 2289, 558, 56, 1445, 549, 55,
	924, 130, 1575, 1573, 2501, 1233, 1112, 2301, 1747, 2546,
	1570, 691, 2507, 1568, 1566, 1440, 2364, 1524, 1522, 1511,
	924, 1500, 2334, 1497, 1472, 495, 1485, 1980, 1443, 1477,
	2441, 2442, 2443, 2783, 2444, 2445, 493, 2348, 2534, 2351,
	495, 2528, 969, 2574, 907, 2380, 2522, 2524, 2525, 1441,
	557, 12, 548, 50, 2570, 2543, 555, 47, 1091, 2545,
	79, 2947, 3115, 1596, 1596, 732, 908, 687, 78, 556,
	48, 2602, 547, 49, 554, 7, 23, 1288, 2620, 553,
	6, 2404, 1476, 2854, 2594, 2170, 2571, 734, 2853, 2412,
	2582, 1687, 2590, 552, 38, 2541, 24, 2949, 30, 546,
	37, 1992, 21, 2579, 20, 2681, 2587, 2638, 1508, 495,
	495, 2619, 495, 2599, 2584, 2585, 1444, 495, 2650, 2644,
	1615, 733, 2817, 2645, 19, 969, 1507, 969, 2648, 2033,
	956, 2431, 1975, 918, 1975, 2603, 130, 15, 2028, 2023,
	2431, 2133, 916, 1991, 2611, 1989, 909, 495, 1999, 2661,
	1654, 1655, 2685, 1504, 2171, 688, 16, 1289, 483, 484,
	57, 2988, 916, 2677, 2778, 2678, 2790, 2779, 2636, 1232,
	56, 2964, 2754, 55, 2673, 1482, 1483, 495, 2008, 2003,
	969, 495, 495, 969, 495, 1995, 2674, 1292, 2148, 579,
	2026, 1997, 495, 2704, 3024, 1298, 1299, 2828, 2084, 2656,
	969, 2781, 2655, 2663, 2658, 2070, 2664, 2665, 2062, 1927,
	2784, 1659, 1589, 2454, 2675, 1298, 1299, 2709, 2679, 2687,
	1301, 2296, 3126, 3141, 1369, 12, 2686, 50, 2706, 611,
	2668, 47, 2670, 2699, 540, 2714, 1615, 1615, 486, 485,
	495, 2697, 2698, 2526, 48, 1300, 2461, 49, 2726, 7,
	2719, 2248, 2249, 1596, 6, 1454, 2710, 2145, 600, 931,
	2518, 493, 918, 1298, 1299, 1300, 2145, 2144, 38, 2707,
	1225, 2146, 1893, 1848, 37, 1224, 1262, 1379, 1377, 1261,
	2846, 2689, 1271, 1270, 487, 488, 689, 2629, 1256, 2631,
	1252, 1249, 1235, 1195, 1662, 892, 698, 2907, 3036, 495,
	2987, 685, 2355, 1697, 1236, 2715, 2780, 1699, 2312, 969,
	495, 1948, 969, 3018, 2732, 2758, 495, 495, 495, 2222,
	2702, 2970, 2745, 2873, 1857, 1380, 53, 2616, 758, 2772,
	2610, 2056, 2055, 972, 495, 1671, 780, 1882, 1748, 495,
	782, 495, 1594, 785, 495, 495, 495, 495, 495, 784,
	2795, 783, 495, 495, 956, 2620, 1595, 1406, 969, 2578,
	2805, 2806, 956, 781, 2791, 1592, 2759, 2755, 2770, 2764,
	495, 495, 2761, 2756, 2757, 2088, 675, 731, 1675, 690,
	1818, 1836, 2204, 1373, 956, 2818, 2826, 750, 2619, 1834,
	2620, 1181, 2765, 2829, 495, 476, 749, 2317, 2426, 2841,
	2769, 1732, 2620, 495, 495, 956, 956, 2162, 918, 1729,
	2794, 1095, 2627, 2812, 2762, 2840, 510, 691, 2245, 1062,
	1145, 493, 1530, 2619, 2804, 2827, 1615, 2813, 2837, 476,
	2863, 2809, 2298, 1909, 2423, 2619, 969, 2640, 2847, 1902,
	2838, 2845, 1898, 1550, 1550, 2824, 1277, 1980, 2839, 1357,
	493, 2760, 493, 2646, 493, 2089, 2850, 2833, 540, 1217,
	2849, 2326, 2866, 2816, 2435, 2814, 2691, 2119, 1740, 906,
	2872, 905, 904, 3042, 3039, 2862, 495, 1665, 969, 2139,
	1350, 754, 495, 2297, 495, 2090, 969, 495, 2402, 1088,
	1349, 924, 888, 2979, 1207, 495, 1206, 1205, 2340, 924,
	924, 969, 3136, 924, 2881, 2624, 170, 167, 631, 169,
	168, 2894, 2388, 476, 1062, 584, 2851, 2852, 2886, 2887,
	1437, 2620, 82, 34, 476, 1062, 2912, 33, 961, 493,
	109, 108, 2892, 107, 631, 2891, 2911, 106, 2913, 105,
	2392, 104, 2910, 495, 103, 495, 102, 2392, 956, 101,
	100, 2889, 99, 495, 2619, 98, 2620, 97, 2620, 96,
	95, 2932, 2921, 2620, 94, 93, 631, 2893, 1531, 2948,
	92, 493, 91, 1822, 90, 969, 476, 493, 89, 493,
	88, 493, 87, 493, 1365, 493, 86, 2950, 2677, 2619,
	2946, 2619, 2944, 85, 495, 1712, 2619, 1713, 2951, 84,
	495, 627, 624, 81, 2945, 493, 493, 493, 495, 2960,
	80, 2934, 31, 2936, 26, 113, 114, 25, 2940, 77,
	2982, 2890, 2423, 76, 29, 2976, 2963, 1736, 18, 1908,
	11, 17, 22, 916, 631, 2968, 135, 495, 495, 2975,
	134, 916, 916, 133, 495, 916, 132, 131, 14, 13,
	2999, 128, 3001, 129, 2768, 956, 1980, 127, 2985, 2973,
	495, 737, 2984, 126, 956, 956, 125, 124, 495, 123,
	495, 2993, 495, 2996, 10, 8, 112, 2803, 9, 3003,
	2857, 2467, 70, 3006, 3015, 2808, 3016, 3012, 3013, 3011,
	3014, 495, 71, 27, 495, 3031, 43, 495, 2504, 969,
	42, 2844, 41, 111, 161, 1593, 160, 159, 2511, 1980,
	3032, 3005, 3044, 3049, 3051, 3050, 158, 3052, 154, 2785,
	157, 2992, 155, 156, 3038, 153, 3057, 122, 163, 162,
	151, 3033, 2431, 148, 495, 150, 152, 2620, 3055, 2922,
	2923, 149, 147, 3010, 2782, 1596, 164, 2775, 121, 120,
	3071, 3069, 3070, 1904, 119, 118, 117, 116, 5, 495,
	2773, 611, 3095, 540, 3096, 2777, 3097, 495, 2, 1,
	2619, 0, 0, 0, 0, 3094, 0, 3103, 931, 3084,
	0, 3100, 0, 495, 1488, 2783, 2620, 0, 3101, 3102,
	0, 0, 3054, 540, 0, 540, 0, 3110, 931, 3112,
	3109, 1492, 493, 0, 3116, 0, 3117, 1983, 0, 3122,
	3123, 3119, 3044, 2776, 0, 493, 0, 3125, 0, 2619,
	1980, 1593, 1593, 493, 0, 2885, 0, 0, 0, 1298,
	1299, 2604, 3133, 3132, 0, 493, 0, 0, 3140, 3139,
	0, 3098, 1489, 0, 0, 0, 0, 2939, 0, 493,
	0, 0, 0, 3146, 1301, 476, 2039, 0, 0, 3149,
	3150, 0, 0, 0, 2915, 0, 0, 3155, 924, 0,
	2052, 0, 0, 1062, 0, 0, 0, 0, 0, 1300,
	0, 2928, 0, 1596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 496, 0, 0, 1983, 0, 540,
	0, 493, 0, 0, 493, 924, 493, 1493, 493, 0,
	493, 493, 0, 961, 0, 0, 2778, 0, 1615, 2779,
	0, 0, 0, 0, 0, 924, 1983, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 924, 0, 0,
	0, 924, 0, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 2781, 0, 1596, 1306, 0, 0, 0,
	0, 208, 2784, 0, 0, 0, 0, 1494, 1495, 967,
	0, 0, 1055, 0, 0, 2991, 0, 0, 1490, 0,
	0, 0, 0, 1328, 1329, 1330, 0, 584, 0, 0,
	0, 0, 1596, 1596, 0, 0, 0, 924, 0, 0,
	0, 0, 0, 0, 1064, 1491, 1068, 0, 1074, 0,
	916, 1593, 0, 1596, 1596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 493, 1908,
	1908, 0, 1321, 0, 0, 3021, 1062, 0, 1062, 0,
	861, 0, 0, 0, 0, 0, 0, 2621, 1596, 2248,
	2249, 0, 2266, 2267, 2268, 0, 1615, 0, 2780, 493,
	493, 493, 0, 493, 0, 3046, 3047, 2639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2639,
	0, 1496, 493, 2639, 0, 0, 0, 0, 2639, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 970, 970,
	0, 2766, 0, 0, 0, 2090, 0, 2263, 0, 0,
	0, 1179, 0, 0, 0, 0, 0, 1322, 1184, 0,
	0, 0, 1908, 1908, 1908, 0, 0, 0, 1615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 924, 0, 0, 0, 737, 0, 0,
	0, 737, 0, 1904, 1904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1615, 1615, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 2254, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 1615, 1615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2270, 0, 0, 0, 0, 3144, 3145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 1615, 0, 3153, 2269, 2870, 0, 0, 0, 924,
	1310, 1302, 1303, 1304, 1305, 1307, 1308, 0, 0, 0,
	0, 958, 0, 0, 971, 971, 1904, 1904, 1904, 0,
	0, 0, 2264, 0, 0, 0, 0, 0, 0, 0,
	1596, 1351, 1352, 1353, 1354, 1355, 0, 2870, 0, 931,
	0, 0, 0, 0, 1364, 1756, 0, 931, 931, 0,
	0, 931, 1374, 0, 0, 916, 540, 0, 0, 540,
	1756, 0, 0, 0, 0, 0, 0, 540, 540, 0,
	0, 0, 540, 0, 0, 0, 0, 0, 0, 0,
	493, 1983, 2336, 0, 0, 0, 1983, 0, 0, 2336,
	0, 0, 0, 0, 2621, 0, 1983, 2336, 1983, 2336,
	2336, 0, 0, 0, 0, 0, 0, 2265, 0, 493,
	0, 2191, 2192, 0, 0, 0, 1530, 0, 924, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 493, 2621,
	0, 0, 961, 0, 1055, 0, 0, 0, 0, 0,
	0, 2621, 493, 0, 0, 0, 0, 0, 0, 924,
	0, 0, 0, 924, 0, 924, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 1908, 1908, 1550, 0, 1550,
	0, 493, 957, 957, 493, 0, 0, 0, 0, 493,
	0, 493, 0, 0, 0, 961, 0, 0, 0, 0,
	1983, 0, 540, 0, 0, 1431, 1431, 1431, 0, 1983,
	0, 957, 957, 1615, 2271, 2272, 2273, 0, 957, 0,
	0, 2260, 2261, 2262, 0, 0, 2451, 1062, 2259, 2257,
	2258, 2250, 2251, 2252, 2253, 2255, 2256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 1908, 1908, 1908,
	1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908,
	1908, 1908, 1908, 1908, 1908, 1908, 0, 1908, 1756, 0,
	2621, 924, 0, 0, 0, 2484, 0, 0, 0, 0,
	0, 0, 0, 1593, 0, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 1596, 0, 0, 0, 0, 1904,
	1904, 2639, 0, 0, 0, 2621, 0, 2621, 0, 0,
	0, 0, 2621, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 958,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 2530, 0, 0, 924, 0, 0, 1596, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 958, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
	1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
	0, 1904, 0, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2639, 0, 0, 0, 0, 0, 0,
	0, 1593, 0, 0, 0, 1596, 931, 0, 0, 0,
	0, 0, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2618, 0, 0, 0, 1615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 1454, 0, 0, 2621, 2492, 2493, 0,
	0, 0, 0, 1593, 0, 1454, 0, 0, 0, 1454,
	0, 0, 0, 0, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 737, 1983, 1550, 0, 1550,
	1615, 0, 0, 0, 493, 0, 0, 0, 0, 0,
	1593, 1593, 0, 0, 0, 2621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1593, 1593, 0, 1983, 931, 0, 0, 0, 2547,
	2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557,
	2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 0, 2569,
	0, 0, 0, 0, 1062, 1730, 1593, 1735, 961, 493,
	0, 493, 0, 1742, 0, 0, 0, 0, 1615, 493,
	0, 0, 0, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 0, 1798,
	0, 1800, 1801, 1802, 1803, 0, 0, 2733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1826, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 1900, 0, 1911, 0, 0, 540, 0, 1917,
	1922, 0, 0, 1983, 2336, 1983, 0, 0, 0, 0,
	0, 957, 0, 922, 0, 0, 0, 0, 970, 0,
	2618, 1062, 0, 1908, 0, 0, 1983, 0, 2336, 0,
	0, 1062, 1062, 493, 1983, 2336, 0, 970, 0, 493,
	493, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 2618, 0, 1062, 2052, 489,
	1908, 0, 0, 0, 0, 0, 0, 2618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1593, 0,
	0, 1983, 0, 0, 0, 0, 0, 0, 0, 0,
	2451, 2451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2041, 0, 2043, 0, 0, 957, 573, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	208, 759, 74, 44, 0, 0, 0, 0, 957, 0,
	0, 208, 0, 0, 0, 0, 0, 1904, 0, 0,
	0, 0, 0, 0, 0, 0, 1908, 958, 0, 0,
	0, 572, 0, 540, 971, 0, 0, 0, 0, 1983,
	0, 2336, 0, 970, 2896, 0, 0, 0, 0, 0,
	0, 0, 493, 971, 1904, 0, 2618, 0, 0, 0,
	574, 0, 74, 208, 0, 0, 0, 0, 0, 59,
	576, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 965, 1454, 0, 0,
	0, 2618, 0, 2618, 0, 0, 0, 0, 2618, 0,
	493, 0, 493, 0, 0, 0, 0, 63, 0, 0,
	1062, 0, 0, 0, 0, 0, 2248, 2249, 0, 2266,
	2267, 2268, 0, 958, 0, 970, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	1904, 2530, 0, 0, 958, 0, 0, 540, 0, 0,
	0, 0, 0, 0, 0, 2896, 0, 0, 0, 0,
	0, 0, 0, 0, 2263, 919, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 1983, 2336, 0, 0, 0, 1454,
	970, 493, 1593, 0, 0, 2878, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 2336, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 1062, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 66,
	0, 67, 2902, 2254, 2175, 2176, 0, 0, 3029, 0,
	2181, 1062, 0, 0, 493, 1593, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 2153, 0, 2194,
	575, 971, 2618, 110, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 2200, 0, 0, 0, 0, 0, 2207,
	970, 2530, 0, 0, 2212, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2226, 0, 0, 0, 0, 1062, 0, 0, 2264,
	0, 2618, 0, 0, 1983, 957, 0, 0, 0, 0,
	0, 0, 0, 1593, 0, 0, 172, 970, 2967, 0,
	2896, 0, 0, 0, 0, 165, 971, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 1922,
	1922, 1922, 39, 0, 138, 0, 0, 0, 0, 0,
	0, 1431, 0, 40, 141, 0, 0, 1086, 0, 2302,
	0, 0, 0, 1104, 0, 0, 0, 44, 0, 0,
	0, 957, 957, 957, 2265, 0, 957, 0, 0, 0,
	0, 46, 143, 0, 0, 1124, 1124, 1124, 965, 0,
	971, 0, 0, 45, 1369, 51, 2248, 2249, 0, 2266,
	2267, 2268, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 573, 0, 2499, 2358, 52, 0, 0, 0,
	54, 0, 0, 40, 58, 0, 0, 0, 144, 0,
	0, 0, 0, 59, 72, 0, 0, 44, 60, 61,
	0, 958, 1178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 2263, 0, 74, 0, 74, 0,
	74, 0, 62, 0, 0, 572, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 2260, 2261,
	2262, 0, 0, 970, 0, 2259, 2257, 2258, 2250, 2251,
	2252, 2253, 2255, 2256, 574, 0, 0, 0, 0, 0,
	2424, 0, 0, 59, 576, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 727, 0, 958, 958, 958,
	0, 0, 958, 2254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 737, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 737, 0,
	74, 2269, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 2486, 0, 0, 0, 1742,
	0, 0, 0, 0, 0, 2490, 0, 0, 2491, 2264,
	0, 75, 139, 66, 0, 67, 0, 68, 0, 0,
	2496, 145, 0, 0, 0, 0, 69, 2502, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 2509, 0, 971,
	0, 2302, 0, 0, 83, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 64, 142, 0, 0, 0,
	2536, 2537, 0, 2538, 2539, 2540, 0, 0, 0, 173,
	2542, 0, 0, 0, 0, 0, 0, 2544, 0, 0,
	0, 0, 139, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 115, 0, 2265, 0, 0, 0, 0, 0,
	0, 0, 140, 171, 0, 0, 0, 0, 2572, 2573,
	172, 714, 0, 0, 575, 0, 0, 110, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 1360, 0, 1363, 0, 970, 2589, 173,
	0, 0, 1370, 0, 0, 0, 0, 0, 138, 0,
	0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 2612, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 1463, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 2260, 2261,
	2262, 0, 0, 0, 0, 2259, 2257, 2258, 2250, 2251,
	2252, 2253, 2255, 2256, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 1298, 1299, 1431, 1331,
	1332, 1333, 1341, 1342, 1343, 0, 0, 0, 0, 2688,
	957, 0, 957, 957, 957, 0, 0, 0, 0, 0,
	0, 1301, 0, 971, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 1453,
	0, 0, 0, 1458, 0, 0, 1300, 0, 0, 1298,
	1299, 0, 971, 0, 1320, 0, 957, 0, 0, 0,
	0, 1317, 0, 0, 0, 2718, 0, 0, 0, 2721,
	2722, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 2724, 0, 0, 0, 2727, 0, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 2734, 0, 0, 0, 0, 1320, 0, 0,
	0, 0, 958, 0, 1323, 1324, 1325, 1326, 1557, 0,
	1557, 971, 0, 1306, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 970, 0, 0, 1338, 1348, 0, 0,
	1328, 1329, 1330, 970, 0, 0, 958, 0, 958, 958,
	958, 0, 0, 0, 0, 0, 0, 1323, 1324, 1325,
	1326, 1344, 1345, 0, 0, 0, 1306, 0, 0, 1315,
	1316, 0, 573, 0, 0, 0, 0, 0, 2792, 0,
	0, 0, 1336, 40, 0, 1652, 0, 0, 0, 1321,
	0, 0, 958, 1328, 1329, 1330, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 572, 0, 1696, 0, 0,
	0, 0, 0, 1702, 0, 1703, 0, 1704, 0, 1705,
	0, 1706, 1321, 0, 0, 0, 0, 2248, 2249, 0,
	2266, 2267, 2268, 0, 574, 0, 0, 1327, 0, 0,
	0, 1715, 1104, 59, 576, 2498, 970, 0, 60, 0,
	0, 0, 0, 0, 1322, 0, 0, 2867, 2868, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 2876,
	2877, 63, 0, 0, 0, 2263, 0, 0, 0, 0,
	1327, 0, 0, 0, 2884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2248, 2249, 0, 2266, 2267, 2268, 970,
	0, 970, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 2920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2254, 1337, 0, 0, 1312, 1313,
	1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303,
	1304, 1305, 1307, 1308, 0, 0, 0, 0, 0, 714,
	0, 2263, 714, 714, 970, 64, 0, 970, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2269, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 139, 66, 0, 67, 0, 0, 1311, 1309,
	1310, 1302, 1303, 1304, 1305, 1307, 1308, 0, 0, 0,
	2264, 0, 0, 171, 0, 0, 0, 0, 1969, 0,
	1816, 0, 2978, 0, 575, 2981, 0, 110, 0, 0,
	2254, 0, 0, 727, 0, 0, 0, 0, 0, 1363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 0, 971, 0, 971, 0, 0,
	958, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 970, 0, 2265, 970, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 2264, 166, 0, 0,
	971, 0, 919, 971, 0, 0, 0, 2093, 0, 0,
	1124, 0, 1124, 0, 1124, 0, 965, 965, 138, 0,
	971, 0, 1458, 0, 0, 0, 0, 0, 957, 0,
	3068, 3068, 970, 0, 0, 0, 957, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 3085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 3068, 0, 0, 957,
	957, 2265, 0, 0, 74, 0, 74, 0, 0, 2260,
	2261, 2262, 0, 0, 0, 0, 2259, 2257, 2258, 2250,
	2251, 2252, 2253, 2255, 2256, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 971, 0, 2149, 0, 0, 3068, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 970, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 2158, 965, 2160, 0, 0,
	0, 0, 0, 0, 958, 970, 0, 0, 971, 0,
	0, 0, 958, 0, 0, 2260, 2261, 2262, 2173, 0,
	0, 0, 2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255,
	2256, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 958, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 1334, 0, 0, 0, 0, 971, 0, 1301, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 1300, 0, 0, 0, 0, 957, 957,
	0, 1320, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 1363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 2333, 0, 0, 0,
	0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342,
	1343, 0, 0, 1338, 1348, 0, 0, 1328, 1329, 1330,
	1334, 0, 0, 0, 0, 1104, 0, 1301, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	0, 0, 1300, 0, 0, 958, 0, 0, 2387, 1336,
	1320, 0, 0, 0, 958, 958, 1321, 1317, 0, 0,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 919, 919, 0, 1346, 919, 0, 2405, 0, 0,
	0, 0, 0, 0, 0, 2413, 0, 2415, 1335, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1324, 1325, 1326, 0, 0, 0, 0, 0, 1306,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1338, 1348, 0, 0, 1328, 1329, 1330, 0,
	0, 0, 0, 0, 1298, 1299, 0, 0, 74, 0,
	1341, 1342, 1343, 0, 1339, 0, 0, 1344, 1345, 0,
	0, 0, 0, 0, 0, 1315, 1316, 0, 0, 1301,
	0, 0, 1347, 0, 0, 0, 2488, 0, 1336, 0,
	0, 0, 0, 0, 74, 1321, 0, 0, 0, 0,
	0, 0, 74, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 1320, 1346, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 0, 0, 1327, 0, 2231, 0, 0, 0, 2232,
	0, 0, 1323, 1324, 1325, 1326, 0, 0, 0, 0,
	1322, 1306, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333,
	1341, 1342, 1343, 1339, 1338, 1348, 0, 0, 1328, 1329,
	1330, 0, 1334, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 1347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	1336, 0, 1320, 0, 0, 0, 0, 1321, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 1312, 1313, 1319, 1318, 1314, 1340,
	0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 2738, 0,
	0, 0, 1323, 1324, 1325, 1326, 0, 0, 0, 0,
	2662, 1306, 74, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 1322, 0, 1338, 1348, 0, 0, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 1344,
	1345, 0, 0, 0, 0, 0, 0, 1315, 1316, 0,
	0, 0, 0, 0, 0, 2708, 0, 965, 0, 0,
	1336, 0, 0, 0, 0, 2711, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 1301, 0, 0, 1347, 0,
	0, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 0, 0, 0, 1327, 0, 0, 0, 919,
	1300, 0, 0, 0, 0, 0, 0, 0, 1320, 74,
	0, 0, 1322, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 1306, 0, 2807,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 1348, 0, 0, 1328, 1329, 1330, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318,
	1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 0, 1315, 1316, 0, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 919, 1336, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 2903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2941, 0, 2943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0, 1311,
	1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3017, 0, 0, 0, 0,
	1816, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3035, 258, 259, 260, 261, 973, 262, 974, 975, 976,
	977, 214, 978, 979, 980, 981, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 982, 269, 270, 271,
	272, 273, 274, 983, 984, 219, 220, 221, 985, 275,
	222, 986, 932, 987, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 988, 285, 0, 286, 287, 989,
	863, 288, 289, 290, 990, 991, 993, 992, 994, 995,
	996, 291, 292, 497, 293, 294, 295, 223, 224, 997,
	296, 998, 297, 999, 298, 1000, 1001, 299, 300, 1002,
	301, 302, 1003, 0, 1004, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1005, 864, 1006, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1007, 318, 1008, 1009, 865, 319, 1010, 320, 229, 1011,
	230, 1012, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 867, 1013, 237, 328, 0, 0, 0, 1014, 327,
	329, 336, 1015, 866, 330, 234, 332, 331, 333, 334,
	335, 235, 1016, 236, 1017, 337, 868, 869, 338, 339,
	340, 870, 341, 342, 0, 0, 343, 344, 345, 1018,
	347, 346, 1019, 238, 871, 348, 349, 872, 1020, 350,
	351, 1021, 1022, 352, 0, 353, 934, 933, 354, 355,
	356, 357, 359, 360, 358, 873, 361, 362, 364, 363,
	1023, 1024, 874, 1025, 239, 365, 240, 366, 367, 1026,
	368, 369, 1027, 1028, 370, 371, 1029, 1030, 372, 241,
	875, 373, 876, 242, 374, 375, 376, 377, 378, 379,
	380, 1031, 381, 243, 382, 244, 383, 1032, 384, 385,
	386, 387, 388, 245, 389, 390, 1033, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	1034, 403, 877, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 1035, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 1036, 428, 409,
	410, 429, 878, 430, 247, 431, 432, 1037, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	1038, 443, 444, 1039, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 1040, 249, 250, 251, 453, 1041,
	1042, 454, 455, 252, 253, 1043, 456, 457, 0, 458,
	459, 1044, 1045, 460, 461, 462, 464, 1046, 465, 1047,
	463, 466, 467, 468, 254, 255, 1048, 1049, 469, 256,
	1050, 1051, 1052, 1053, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	1953, 0, 0, 0, 0, 0, 0, 0, 0, 1954,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 983, 984, 219, 220, 221, 985, 275, 222,
	986, 932, 987, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 988, 285, 0, 286, 287, 989, 863,
	288, 289, 290, 990, 991, 993, 992, 994, 995, 996,
	291, 292, 497, 293, 294, 295, 223, 224, 997, 296,
	998, 297, 999, 298, 1000, 1001, 299, 300, 1002, 301,
	302, 1003, 0, 1004, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1005, 864, 1006, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1007,
	318, 1008, 1009, 865, 319, 1010, 320, 229, 1011, 230,
	1012, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 1013, 237, 328, 0, 0, 0, 1014, 327, 329,
	336, 1015, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 1016, 236, 1017, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 1018, 347,
	346, 1019, 238, 871, 348, 349, 872, 1020, 350, 351,
	1021, 1022, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 1023,
	1024, 874, 1025, 239, 365, 240, 366, 367, 1026, 368,
	369, 1027, 1028, 370, 371, 1029, 1030, 372, 241, 875,
	373, 876, 242, 374, 375, 376, 377, 378, 379, 380,
	1031, 381, 243, 382, 244, 383, 1032, 384, 385, 386,
	387, 388, 245, 389, 390, 1033, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1034,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1035, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1036, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 1037, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1038,
	443, 444, 1039, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1040, 249, 250, 251, 453, 1041, 1042,
	454, 455, 252, 253, 1043, 456, 457, 0, 458, 459,
	1044, 1045, 460, 461, 462, 464, 1046, 465, 1047, 463,
	466, 467, 468, 254, 255, 1048, 1049, 469, 256, 1050,
	1051, 1052, 1053, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2763,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 983, 984, 219, 220, 221, 985, 275, 222,
	986, 932, 987, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 988, 285, 0, 286, 287, 989, 863,
	288, 289, 290, 990, 991, 993, 992, 994, 995, 996,
	291, 292, 497, 293, 294, 295, 223, 224, 997, 296,
	998, 297, 999, 298, 1000, 1001, 299, 300, 1002, 301,
	302, 1003, 0, 1004, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1005, 864, 1006, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1007,
	318, 1008, 1009, 865, 319, 1010, 320, 229, 1011, 230,
	1012, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 1013, 237, 328, 0, 0, 0, 1014, 327, 329,
	336, 1015, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 1016, 236, 1017, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 1018, 347,
	346, 1019, 238, 871, 348, 349, 872, 1020, 350, 351,
	1021, 1022, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 1023,
	1024, 874, 1025, 239, 365, 240, 366, 367, 1026, 368,
	369, 1027, 1028, 370, 371, 1029, 1030, 372, 241, 875,
	373, 876, 242, 374, 375, 376, 377, 378, 379, 380,
	1031, 381, 243, 382, 244, 383, 1032, 384, 385, 386,
	387, 388, 245, 389, 390, 1033, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1034,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1035, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1036, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 1037, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1038,
	443, 444, 1039, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1040, 249, 250, 251, 453, 1041, 1042,
	454, 455, 252, 253, 1043, 456, 457, 0, 458, 459,
	1044, 1045, 460, 461, 462, 464, 1046, 465, 1047, 463,
	466, 467, 468, 254, 255, 1048, 1049, 469, 256, 1050,
	1051, 1052, 1053, 470, 471, 257, 472, 473, 474, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2871, 258, 259, 260, 261, 973,
	262, 974, 975, 976, 977, 214, 978, 979, 980, 981,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	982, 269, 270, 271, 272, 273, 274, 983, 984, 219,
	220, 221, 985, 275, 222, 986, 932, 987, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 988, 285,
	0, 286, 287, 989, 863, 288, 289, 290, 990, 991,
	993, 992, 994, 995, 996, 291, 292, 497, 293, 294,
	295, 223, 224, 997, 296, 998, 297, 999, 298, 1000,
	1001, 299, 300, 1002, 301, 302, 1003, 0, 1004, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1005, 864, 1006, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1007, 318, 1008, 1009, 865, 319,
	1010, 320, 229, 1011, 230, 1012, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 867, 1013, 237, 328, 0,
	0, 0, 1014, 327, 329, 336, 1015, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 1016, 236, 1017, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 1018, 347, 346, 1019, 238, 871, 348,
	349, 872, 1020, 350, 351, 1021, 1022, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 1023, 1024, 874, 1025, 239, 365,
	240, 366, 367, 1026, 368, 369, 1027, 1028, 370, 371,
	1029, 1030, 372, 241, 875, 373, 876, 242, 374, 375,
	376, 377, 378, 379, 380, 1031, 381, 243, 382, 244,
	383, 1032, 384, 385, 386, 387, 388, 245, 389, 390,
	1033, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1034, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1035, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1036, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 1037, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1038, 443, 444, 1039, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1040, 249,
	250, 251, 453, 1041, 1042, 454, 455, 252, 253, 1043,
	456, 457, 0, 458, 459, 1044, 1045, 460, 461, 462,
	464, 1046, 465, 1047, 463, 466, 467, 468, 254, 255,
	1048, 1049, 469, 256, 1050, 1051, 1052, 1053, 470, 471,
	257, 472, 473, 474, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2512,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 983, 984, 219, 220, 221, 985, 275, 222,
	986, 932, 987, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 988, 285, 0, 286, 287, 989, 863,
	288, 289, 290, 990, 991, 993, 992, 994, 995, 996,
	291, 292, 497, 293, 294, 295, 223, 224, 997, 296,
	998, 297, 999, 298, 1000, 1001, 299, 300, 1002, 301,
	302, 1003, 0, 1004, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1005, 864, 1006, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1007,
	318, 1008, 1009, 865, 319, 1010, 320, 229, 1011, 230,
	1012, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 1013, 237, 328, 0, 0, 0, 1014, 327, 329,
	336, 1015, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 1016, 236, 1017, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 1018, 347,
	346, 1019, 238, 871, 348, 349, 872, 1020, 350, 351,
	1021, 1022, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 1023,
	1024, 874, 1025, 239, 365, 240, 366, 367, 1026, 368,
	369, 1027, 1028, 370, 371, 1029, 1030, 372, 241, 875,
	373, 876, 242, 374, 375, 376, 377, 378, 379, 380,
	1031, 381, 243, 382, 244, 383, 1032, 384, 385, 386,
	387, 388, 245, 389, 390, 1033, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1034,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1035, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1036, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 1037, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1038,
	443, 444, 1039, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1040, 249, 250, 251, 453, 1041, 1042,
	454, 455, 252, 253, 1043, 456, 457, 0, 458, 459,
	1044, 1045, 460, 461, 462, 464, 1046, 465, 1047, 463,
	466, 467, 468, 254, 255, 1048, 1049, 469, 256, 1050,
	1051, 1052, 1053, 470, 471, 257, 472, 473, 474, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2503, 258, 259, 260, 261, 973,
	262, 974, 975, 976, 977, 214, 978, 979, 980, 981,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	982, 269, 270, 271, 272, 273, 274, 983, 984, 219,
	220, 221, 985, 275, 222, 986, 932, 987, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 988, 285,
	0, 286, 287, 989, 863, 288, 289, 290, 990, 991,
	993, 992, 994, 995, 996, 291, 292, 497, 293, 294,
	295, 223, 224, 997, 296, 998, 297, 999, 298, 1000,
	1001, 299, 300, 1002, 301, 302, 1003, 0, 1004, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1005, 864, 1006, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1007, 318, 1008, 1009, 865, 319,
	1010, 320, 229, 1011, 230, 1012, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 867, 1013, 237, 328, 0,
	0, 0, 1014, 327, 329, 336, 1015, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 1016, 236, 1017, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 1018, 347, 346, 1019, 238, 871, 348,
	349, 872, 1020, 350, 351, 1021, 1022, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 1023, 1024, 874, 1025, 239, 365,
	240, 366, 367, 1026, 368, 369, 1027, 1028, 370, 371,
	1029, 1030, 372, 241, 875, 373, 876, 242, 374, 375,
	376, 377, 378, 379, 380, 1031, 381, 243, 382, 244,
	383, 1032, 384, 385, 386, 387, 388, 245, 389, 390,
	1033, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1034, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1035, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1036, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 1037, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1038, 443, 444, 1039, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1040, 249,
	250, 251, 453, 1041, 1042, 454, 455, 252, 253, 1043,
	456, 457, 0, 458, 459, 1044, 1045, 460, 461, 462,
	464, 1046, 465, 1047, 463, 466, 467, 468, 254, 255,
	1048, 1049, 469, 256, 1050, 1051, 1052, 1053, 470, 471,
	257, 472, 473, 474, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2391,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 983, 984, 219, 220, 221, 985, 275, 222,
	986, 932, 987, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 988, 285, 0, 286, 287, 989, 863,
	288, 289, 290, 990, 991, 993, 992, 994, 995, 996,
	291, 292, 497, 293, 294, 295, 223, 224, 997, 296,
	998, 297, 999, 298, 1000, 1001, 299, 300, 1002, 301,
	302, 1003, 0, 1004, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1005, 864, 1006, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1007,
	318, 1008, 1009, 865, 319, 1010, 320, 229, 1011, 230,
	1012, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 1013, 237, 328, 0, 0, 0, 1014, 327, 329,
	336, 1015, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 1016, 236, 1017, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 1018, 347,
	346, 1019, 238, 871, 348, 349, 872, 1020, 350, 351,
	1021, 1022, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 1023,
	1024, 874, 1025, 239, 365, 240, 366, 367, 1026, 368,
	369, 1027, 1028, 370, 371, 1029, 1030, 372, 241, 875,
	373, 876, 242, 374, 375, 376, 377, 378, 379, 380,
	1031, 381, 243, 382, 244, 383, 1032, 384, 385, 386,
	387, 388, 245, 389, 390, 1033, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1034,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1035, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1036, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 1037, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1038,
	443, 444, 1039, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1040, 249, 250, 251, 453, 1041, 1042,
	454, 455, 252, 253, 1043, 456, 457, 0, 458, 459,
	1044, 1045, 460, 461, 462, 464, 1046, 465, 1047, 463,
	466, 467, 468, 254, 255, 1048, 1049, 469, 256, 1050,
	1051, 1052, 1053, 470, 471, 257, 472, 473, 474, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1840, 258, 259, 260, 261, 973,
	262, 974, 975, 976, 977, 214, 978, 979, 980, 981,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	982, 269, 270, 271, 272, 273, 274, 983, 984, 219,
	220, 221, 985, 275, 222, 986, 932, 987, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 988, 285,
	0, 286, 287, 989, 863, 288, 289, 290, 990, 991,
	993, 992, 994, 995, 996, 291, 292, 497, 293, 294,
	295, 223, 224, 997, 296, 998, 297, 999, 298, 1000,
	1001, 299, 300, 1002, 301, 302, 1003, 0, 1004, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1005, 864, 1006, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1007, 318, 1008, 1009, 865, 319,
	1010, 320, 229, 1011, 230, 1012, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 867, 1013, 237, 328, 0,
	0, 0, 1014, 327, 329, 336, 1015, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 1016, 236, 1017, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 1018, 347, 346, 1019, 238, 871, 348,
	349, 872, 1020, 350, 351, 1021, 1022, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 1023, 1024, 874, 1025, 239, 365,
	240, 366, 367, 1026, 368, 369, 1027, 1028, 370, 371,
	1029, 1030, 372, 241, 875, 373, 876, 242, 374, 375,
	376, 377, 378, 379, 380, 1031, 381, 243, 382, 244,
	383, 1032, 384, 385, 386, 387, 388, 245, 389, 390,
	1033, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1034, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1035, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1036, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 1037, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1038, 443, 444, 1039, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1040, 249,
	250, 251, 453, 1041, 1042, 454, 455, 252, 253, 1043,
	456, 457, 0, 458, 459, 1044, 1045, 460, 461, 462,
	464, 1046, 465, 1047, 463, 466, 467, 468, 254, 255,
	1048, 1049, 469, 256, 1050, 1051, 1052, 1053, 470, 471,
	257, 472, 473, 474, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 983, 984, 219, 220, 221, 985, 275, 222,
	986, 932, 987, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 988, 285, 0, 286, 287, 989, 863,
	288, 289, 290, 990, 991, 993, 992, 994, 995, 996,
	291, 292, 497, 293, 294, 295, 223, 224, 997, 296,
	998, 297, 999, 298, 1000, 1001, 299, 300, 1002, 301,
	302, 1003, 0, 1004, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1005, 864, 1006, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1007,
	318, 1008, 1009, 865, 319, 1010, 320, 229, 1011, 230,
	1012, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 1013, 237, 328, 0, 0, 0, 1014, 327, 329,
	336, 1015, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 1016, 236, 1017, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 1018, 347,
	346, 1019, 238, 871, 348, 349, 872, 1020, 350, 351,
	1021, 1022, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 1023,
	1024, 874, 1025, 239, 365, 240, 366, 367, 1026, 368,
	369, 1027, 1028, 370, 371, 1029, 1030, 372, 241, 875,
	373, 876, 242, 374, 375, 376, 377, 378, 379, 380,
	1031, 381, 243, 382, 244, 383, 1032, 384, 385, 386,
	387, 388, 245, 389, 390, 1033, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1034,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1035, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1036, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 1037, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1038,
	443, 444, 1039, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1040, 249, 250, 251, 453, 1041, 1042,
	454, 455, 252, 253, 1043, 456, 457, 0, 458, 459,
	1044, 1045, 460, 461, 462, 464, 1046, 465, 1047, 463,
	466, 467, 468, 254, 255, 1048, 1049, 469, 256, 1050,
	1051, 1052, 1053, 470, 471, 257, 472, 473, 474, 1847,
	0, 778, 766, 767, 764, 765, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 1844, 262, 0, 0, 0, 0, 814, 760, 0,
	0, 0, 263, 264, 265, 215, 835, 798, 836, 786,
	822, 837, 0, 269, 788, 787, 272, 273, 274, 761,
	813, 838, 839, 221, 0, 275, 820, 0, 803, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 863, 288, 289, 290,
	806, 804, 805, 810, 808, 807, 809, 291, 292, 497,
	293, 823, 295, 840, 841, 746, 296, 0, 297, 0,
	298, 1845, 0, 824, 300, 0, 301, 302, 0, 0,
	0, 751, 306, 303, 304, 307, 310, 305, 311, 312,
	842, 843, 773, 864, 0, 0, 0, 0, 0, 313,
	314, 844, 825, 826, 0, 317, 0, 318, 0, 0,
	865, 319, 0, 320, 845, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 815, 816, 819, 867, 0, 817,
	797, 0, 0, 0, 0, 327, 329, 336, 0, 866,
	330, 846, 801, 827, 828, 829, 830, 847, 0, 802,
	0, 337, 868, 869, 338, 339, 340, 870, 831, 832,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 848,
	871, 348, 349, 872, 0, 350, 351, 0, 0, 352,
	0, 353, 748, 747, 354, 355, 356, 357, 359, 790,
	358, 873, 361, 362, 364, 363, 743, 0, 874, 774,
	818, 365, 849, 366, 367, 0, 799, 800, 0, 0,
	370, 371, 0, 0, 372, 241, 875, 373, 876, 850,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 851,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 852,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 877, 404,
	405, 406, 407, 752, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 791, 792, 793, 794,
	420, 426, 427, 811, 428, 409, 410, 429, 878, 430,
	853, 795, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 833, 437, 438, 439, 854, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 789, 452,
	0, 855, 856, 857, 834, 0, 0, 454, 455, 858,
	859, 772, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 812, 465, 0, 796, 466, 467, 468,
	254, 860, 1843, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 744, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 740,
	741, 1846, 0, 0, 0, 0, 0, 0, 753, 1841,
	0, 0, 0, 728, 756, 778, 766, 767, 764, 765,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 171, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 173, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 1151, 860, 0, 0, 469, 256,
	0, 0, 0, 165, 470, 471, 257, 472, 473, 474,
	744, 166, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 778, 766, 767, 764, 765,
	757, 0, 1367, 0, 0, 0, 0, 0, 756, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 171, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 173, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 1151, 860, 0, 0, 469, 256,
	0, 0, 0, 165, 470, 471, 257, 472, 473, 474,
	744, 166, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 778, 766, 767, 764, 765,
	757, 0, 1367, 0, 0, 0, 0, 0, 756, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 1918, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 1923, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 1919, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	1920, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 254, 860, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	744, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 778, 766, 767, 764, 765,
	757, 0, 753, 0, 0, 0, 0, 0, 756, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 2680, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 254, 860, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	744, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 1432, 778, 766, 767, 764,
	765, 757, 753, 0, 0, 0, 0, 0, 756, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 814, 760, 0, 0, 0, 263, 264, 265,
	215, 835, 798, 836, 786, 822, 837, 0, 269, 788,
	787, 272, 273, 274, 761, 813, 838, 839, 221, 0,
	275, 820, 0, 803, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 863, 288, 289, 290, 806, 804, 805, 810, 808,
	807, 809, 291, 292, 497, 293, 823, 295, 840, 841,
	746, 296, 0, 297, 0, 298, 0, 0, 824, 300,
	0, 301, 302, 0, 0, 0, 751, 306, 303, 304,
	307, 310, 305, 311, 312, 842, 843, 773, 864, 0,
	0, 0, 0, 0, 313, 314, 844, 825, 826, 0,
	317, 0, 318, 0, 0, 865, 319, 0, 320, 845,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 815,
	816, 819, 867, 0, 817, 797, 0, 0, 0, 1744,
	327, 329, 336, 0, 866, 330, 846, 801, 827, 828,
	829, 830, 847, 0, 802, 0, 337, 868, 869, 338,
	339, 340, 870, 831, 832, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 848, 871, 348, 349, 872, 0,
	350, 351, 0, 0, 352, 0, 353, 748, 747, 354,
	355, 356, 357, 359, 790, 358, 873, 361, 362, 364,
	363, 743, 0, 874, 774, 818, 365, 849, 366, 367,
	0, 799, 800, 0, 0, 370, 371, 0, 0, 372,
	241, 875, 373, 876, 850, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 851, 382, 244, 383, 1743, 384,
	385, 386, 387, 388, 852, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 877, 404, 405, 406, 407, 752, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 791, 792, 793, 794, 420, 426, 427, 811, 428,
	409, 410, 429, 878, 430, 853, 795, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 833, 437, 438, 439,
	854, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 789, 452, 0, 855, 856, 857, 834,
	0, 0, 454, 455, 858, 859, 772, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 812, 465,
	0, 796, 466, 467, 468, 254, 860, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 744, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 740, 741, 0, 0, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 736, 756,
	778, 766, 767, 764, 765, 757, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 814, 760, 0, 0,
	0, 263, 264, 265, 215, 835, 798, 836, 786, 822,
	837, 0, 269, 788, 787, 272, 273, 274, 761, 813,
	838, 839, 221, 0, 275, 820, 0, 803, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 806,
	804, 805, 810, 808, 807, 809, 291, 292, 497, 293,
	823, 295, 840, 841, 746, 296, 0, 297, 0, 298,
	0, 0, 824, 300, 0, 301, 302, 0, 0, 0,
	751, 306, 303, 304, 307, 310, 305, 311, 312, 842,
	843, 773, 864, 0, 0, 0, 0, 0, 313, 314,
	844, 825, 826, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 845, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 815, 816, 819, 867, 0, 817, 797,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	846, 801, 827, 828, 829, 830, 847, 0, 802, 0,
	337, 868, 869, 338, 339, 340, 870, 831, 832, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 848, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 748, 747, 354, 355, 356, 357, 359, 790, 358,
	873, 361, 362, 364, 363, 743, 0, 874, 774, 818,
	365, 849, 366, 367, 0, 799, 800, 738, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 850, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 851, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 852, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 752, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 791, 792, 793, 794, 420,
	426, 427, 811, 428, 409, 410, 429, 878, 430, 853,
	795, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	833, 437, 438, 439, 854, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 789, 452, 0,
	855, 856, 857, 834, 0, 0, 454, 455, 858, 859,
	772, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 812, 465, 0, 796, 466, 467, 468, 254,
	860, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 744, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 740, 741,
	778, 766, 767, 764, 765, 757, 0, 753, 0, 0,
	0, 0, 0, 756, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 814, 760, 0, 0,
	0, 263, 264, 265, 215, 835, 798, 836, 786, 822,
	837, 0, 269, 788, 787, 272, 273, 274, 761, 813,
	838, 839, 221, 0, 275, 820, 0, 803, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 806,
	804, 805, 810, 808, 807, 809, 291, 292, 497, 293,
	823, 295, 840, 841, 746, 296, 0, 297, 0, 298,
	0, 0, 824, 300, 0, 301, 302, 0, 0, 0,
	751, 306, 303, 304, 307, 310, 305, 311, 312, 842,
	843, 773, 864, 0, 0, 0, 0, 0, 313, 314,
	844, 825, 826, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 845, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 815, 816, 819, 867, 0, 817, 797,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	846, 801, 827, 828, 829, 830, 847, 0, 802, 0,
	337, 868, 869, 338, 339, 340, 870, 831, 832, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 848, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 748, 747, 354, 355, 356, 357, 359, 790, 358,
	873, 361, 362, 364, 363, 743, 0, 874, 774, 818,
	365, 849, 366, 367, 0, 799, 800, 0, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 850, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 851, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 852, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 752, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 791, 792, 793, 794, 420,
	426, 427, 811, 428, 409, 410, 429, 878, 430, 853,
	795, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	833, 437, 438, 439, 854, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 789, 452, 0,
	855, 856, 857, 834, 0, 0, 454, 455, 858, 859,
	772, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 812, 465, 0, 796, 466, 467, 468, 254,
	860, 2514, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 744, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 740, 741,
	778, 766, 767, 764, 765, 757, 0, 753, 0, 0,
	0, 0, 0, 756, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 814, 760, 0, 0,
	0, 263, 264, 265, 215, 835, 798, 836, 786, 822,
	837, 0, 269, 788, 787, 272, 273, 274, 761, 813,
	838, 839, 221, 0, 275, 820, 0, 803, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 806,
	804, 805, 810, 808, 807, 809, 291, 292, 497, 293,
	823, 295, 840, 841, 746, 296, 0, 297, 0, 298,
	0, 0, 824, 300, 0, 301, 302, 0, 0, 0,
	751, 306, 303, 304, 307, 310, 305, 311, 312, 842,
	843, 773, 864, 0, 0, 0, 0, 0, 313, 314,
	844, 825, 826, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 845, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 815, 816, 819, 867, 0, 817, 797,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	846, 801, 827, 828, 829, 830, 847, 0, 802, 0,
	337, 868, 869, 338, 339, 340, 870, 831, 832, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 848, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 748, 747, 354, 355, 356, 357, 359, 790, 358,
	873, 361, 362, 364, 363, 743, 0, 874, 774, 818,
	365, 849, 366, 367, 0, 799, 800, 738, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 850, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 851, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 852, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 752, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 791, 792, 793, 794, 420,
	426, 427, 811, 428, 409, 410, 429, 878, 430, 853,
	795, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	833, 437, 438, 439, 854, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 789, 452, 0,
	855, 856, 857, 834, 0, 0, 454, 455, 858, 859,
	772, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 812, 465, 0, 796, 466, 467, 468, 254,
	860, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 744, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 740, 741,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 0, 2323, 756, 778, 766, 767, 764, 765, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	814, 760, 0, 0, 0, 263, 264, 265, 215, 835,
	798, 836, 786, 822, 837, 0, 269, 788, 787, 272,
	273, 274, 761, 813, 838, 839, 221, 0, 275, 820,
	0, 803, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 863,
	288, 289, 290, 806, 804, 805, 810, 808, 807, 809,
	291, 292, 497, 293, 823, 295, 840, 841, 746, 296,
	0, 297, 0, 298, 0, 0, 824, 300, 0, 301,
	302, 0, 0, 0, 751, 306, 303, 304, 307, 310,
	305, 311, 312, 842, 843, 773, 864, 0, 0, 0,
	0, 0, 313, 314, 844, 825, 826, 0, 317, 0,
	318, 0, 0, 865, 319, 0, 320, 845, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 815, 816, 819,
	867, 0, 817, 797, 0, 0, 0, 0, 327, 329,
	336, 0, 866, 330, 846, 801, 827, 828, 829, 830,
	847, 0, 802, 0, 337, 868, 869, 338, 339, 340,
	870, 831, 832, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 848, 871, 348, 349, 872, 0, 350, 351,
	0, 0, 352, 0, 353, 748, 747, 354, 355, 356,
	357, 359, 790, 358, 873, 361, 362, 364, 363, 743,
	0, 874, 774, 818, 365, 849, 366, 367, 0, 799,
	800, 0, 0, 370, 371, 0, 0, 372, 241, 875,
	373, 876, 850, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 851, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 852, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 877, 404, 405, 406, 407, 752, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 791,
	792, 793, 794, 420, 426, 427, 811, 428, 409, 410,
	429, 878, 430, 853, 795, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 833, 437, 438, 439, 854, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 789, 452, 0, 855, 856, 857, 834, 0, 0,
	454, 455, 858, 859, 772, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 812, 465, 0, 796,
	466, 467, 468, 254, 860, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 744,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 740, 741, 778, 766, 767, 764, 765, 757,
	0, 753, 0, 0, 0, 0, 0, 756, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	814, 760, 0, 0, 0, 263, 264, 265, 215, 835,
	798, 836, 786, 822, 837, 0, 269, 788, 787, 272,
	273, 274, 761, 813, 838, 839, 221, 0, 275, 820,
	0, 803, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 863,
	288, 289, 290, 806, 804, 805, 810, 808, 807, 809,
	291, 292, 497, 293, 823, 295, 840, 841, 746, 296,
	0, 297, 0, 298, 0, 0, 824, 300, 0, 301,
	302, 0, 0, 0, 751, 306, 303, 304, 307, 310,
	305, 311, 312, 842, 843, 773, 864, 0, 0, 0,
	0, 0, 313, 314, 844, 825, 826, 0, 317, 0,
	318, 0, 0, 865, 319, 0, 320, 845, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 815, 816, 819,
	867, 0, 817, 797, 0, 0, 0, 0, 327, 329,
	336, 0, 866, 330, 846, 801, 827, 828, 829, 830,
	847, 0, 802, 0, 337, 868, 869, 338, 339, 340,
	870, 831, 832, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 848, 871, 348, 349, 872, 0, 350, 351,
	0, 0, 352, 0, 353, 748, 747, 354, 355, 356,
	357, 359, 790, 358, 873, 361, 362, 364, 363, 743,
	0, 874, 774, 818, 365, 849, 366, 367, 0, 799,
	800, 0, 0, 370, 371, 0, 0, 372, 241, 875,
	373, 876, 850, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 851, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 852, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 877, 404, 405, 406, 407, 752, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 791,
	792, 793, 794, 420, 426, 427, 811, 428, 409, 410,
	429, 878, 430, 853, 795, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 833, 437, 438, 439, 854, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 789, 452, 0, 855, 856, 857, 834, 0, 0,
	454, 455, 858, 859, 772, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 812, 465, 0, 796,
	466, 467, 468, 254, 860, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 744,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 740, 741, 1432, 778, 766, 767, 764, 765,
	757, 753, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 1923, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 254, 860, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	744, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 1957, 756, 778,
	766, 767, 764, 765, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	0, 1910, 756, 778, 766, 767, 764, 765, 757, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 814,
	760, 0, 0, 0, 263, 264, 265, 215, 835, 798,
	836, 786, 822, 837, 0, 269, 788, 787, 272, 273,
	274, 761, 813, 838, 839, 221, 0, 275, 820, 0,
	803, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 863, 288,
	289, 290, 806, 804, 805, 810, 808, 807, 809, 291,
	292, 497, 293, 823, 295, 840, 841, 746, 296, 0,
	297, 0, 298, 0, 0, 824, 300, 0, 301, 302,
	0, 0, 0, 751, 306, 303, 304, 307, 310, 305,
	311, 312, 842, 843, 773, 864, 0, 0, 0, 0,
	0, 313, 314, 844, 825, 826, 0, 317, 0, 318,
	0, 0, 865, 319, 0, 320, 845, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 815, 816, 819, 867,
	0, 817, 797, 0, 0, 0, 0, 327, 329, 336,
	0, 866, 330, 846, 801, 827, 828, 829, 830, 847,
	0, 802, 0, 337, 868, 869, 338, 339, 340, 870,
	831, 832, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 848, 871, 348, 349, 872, 0, 350, 351, 0,
	0, 352, 0, 353, 748, 747, 354, 355, 356, 357,
	359, 790, 358, 873, 361, 362, 364, 363, 743, 0,
	874, 774, 818, 365, 849, 366, 367, 0, 799, 800,
	0, 0, 370, 371, 0, 0, 372, 241, 875, 373,
	876, 850, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 851, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 852, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	877, 404, 405, 406, 407, 752, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 791, 792,
	793, 794, 420, 426, 427, 811, 428, 409, 410, 429,
	878, 430, 853, 795, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 833, 437, 438, 439, 854, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	789, 452, 0, 855, 856, 857, 834, 0, 0, 454,
	455, 858, 859, 772, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 812, 465, 0, 796, 466,
	467, 468, 254, 860, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 744, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 740, 741, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 1899, 756, 778, 766, 767,
	764, 765, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 814, 760, 0, 0, 0, 263, 264,
	265, 215, 835, 798, 836, 786, 822, 837, 0, 269,
	788, 787, 272, 273, 274, 761, 813, 838, 839, 221,
	0, 275, 820, 0, 803, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 863, 288, 289, 290, 806, 804, 805, 810,
	808, 807, 809, 291, 292, 497, 293, 823, 295, 840,
	841, 746, 296, 0, 297, 0, 298, 0, 0, 824,
	300, 0, 301, 302, 0, 0, 0, 751, 306, 303,
	304, 307, 310, 305, 311, 312, 842, 843, 773, 864,
	0, 0, 0, 0, 0, 313, 314, 844, 825, 826,
	0, 317, 0, 318, 0, 0, 865, 319, 0, 320,
	845, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	815, 816, 819, 867, 0, 817, 797, 0, 0, 0,
	0, 327, 329, 336, 0, 866, 330, 846, 801, 827,
	828, 829, 830, 847, 0, 802, 0, 337, 868, 869,
	338, 339, 340, 870, 831, 832, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 848, 871, 348, 349, 872,
	0, 350, 351, 0, 0, 352, 0, 353, 748, 747,
	354, 355, 356, 357, 359, 790, 358, 873, 361, 362,
	364, 363, 743, 0, 874, 774, 818, 365, 849, 366,
	367, 0, 799, 800, 0, 0, 370, 371, 0, 0,
	372, 241, 875, 373, 876, 850, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 851, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 852, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 877, 404, 405, 406, 407, 752,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 791, 792, 793, 794, 420, 426, 427, 811,
	428, 409, 410, 429, 878, 430, 853, 795, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 833, 437, 438,
	439, 854, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 789, 452, 0, 855, 856, 857,
	834, 0, 0, 454, 455, 858, 859, 772, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 812,
	465, 0, 796, 466, 467, 468, 254, 860, 0, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 744, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 740, 741, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 1897,
	756, 778, 766, 767, 764, 765, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 814, 760, 0,
	0, 0, 263, 264, 265, 215, 835, 798, 836, 786,
	822, 837, 0, 269, 788, 787, 272, 273, 274, 761,
	813, 838, 839, 221, 0, 275, 820, 0, 803, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 863, 288, 289, 290,
	806, 804, 805, 810, 808, 807, 809, 291, 292, 497,
	293, 823, 295, 840, 841, 746, 296, 0, 297, 0,
	298, 0, 0, 824, 300, 0, 301, 302, 0, 0,
	0, 751, 306, 303, 304, 307, 310, 305, 311, 312,
	842, 843, 773, 864, 0, 0, 0, 0, 0, 313,
	314, 844, 825, 826, 0, 317, 0, 318, 0, 0,
	865, 319, 0, 320, 845, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 815, 816, 819, 867, 0, 817,
	797, 0, 0, 0, 0, 327, 329, 336, 0, 866,
	330, 846, 801, 827, 828, 829, 830, 847, 0, 802,
	0, 337, 868, 869, 338, 339, 340, 870, 831, 832,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 848,
	871, 348, 349, 872, 0, 350, 351, 0, 0, 352,
	0, 353, 748, 747, 354, 355, 356, 357, 359, 790,
	358, 873, 361, 362, 364, 363, 743, 0, 874, 774,
	818, 365, 849, 366, 367, 0, 799, 800, 0, 0,
	370, 371, 0, 0, 372, 241, 875, 373, 876, 850,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 851,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 852,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 877, 404,
	405, 406, 407, 752, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 791, 792, 793, 794,
	420, 426, 427, 811, 428, 409, 410, 429, 878, 430,
	853, 795, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 833, 437, 438, 439, 854, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 789, 452,
	0, 855, 856, 857, 834, 0, 0, 454, 455, 858,
	859, 772, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 812, 465, 0, 796, 466, 467, 468,
	254, 860, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 744, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 740,
	741, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 1895, 756, 778, 766, 767, 764, 765,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 815, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 254, 860, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	744, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 1892, 756, 1884,
	766, 767, 764, 765, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	1887, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 1888, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 1889, 1886, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	1890, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 1885, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	0, 1881, 756, 1884, 766, 767, 764, 765, 757, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 814,
	760, 0, 0, 0, 263, 264, 265, 215, 835, 798,
	836, 786, 822, 837, 0, 269, 788, 787, 272, 273,
	274, 761, 813, 838, 839, 221, 0, 275, 820, 0,
	803, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 863, 288,
	289, 290, 806, 804, 805, 810, 808, 807, 809, 291,
	292, 497, 293, 823, 1887, 840, 841, 746, 296, 0,
	297, 0, 298, 0, 0, 824, 300, 0, 301, 302,
	0, 0, 0, 751, 306, 303, 304, 307, 310, 305,
	311, 312, 842, 843, 773, 864, 0, 0, 0, 0,
	0, 313, 314, 844, 825, 826, 0, 317, 0, 318,
	0, 0, 865, 319, 0, 320, 845, 0, 230, 0,
	321, 322, 1888, 324, 325, 326, 815, 816, 819, 867,
	0, 817, 797, 0, 0, 0, 0, 327, 329, 336,
	0, 866, 330, 846, 801, 827, 828, 829, 830, 847,
	0, 802, 0, 337, 868, 869, 338, 339, 340, 870,
	831, 832, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 848, 871, 348, 349, 872, 0, 350, 351, 0,
	0, 352, 0, 353, 748, 747, 1889, 1886, 356, 357,
	359, 790, 358, 873, 361, 362, 364, 363, 743, 0,
	874, 774, 818, 365, 849, 366, 367, 0, 799, 800,
	0, 0, 370, 371, 0, 0, 372, 241, 875, 373,
	876, 850, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 851, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 852, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	877, 404, 405, 406, 407, 752, 408, 0, 412, 413,
	414, 415, 416, 417, 1890, 0, 424, 425, 791, 792,
	793, 794, 420, 426, 427, 811, 428, 409, 410, 429,
	878, 430, 853, 795, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 833, 437, 438, 439, 854, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	789, 452, 0, 855, 856, 857, 834, 0, 0, 454,
	455, 858, 859, 772, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 812, 465, 0, 796, 466,
	467, 468, 254, 860, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 1885, 474, 744, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 740, 741, 778, 766, 767, 764, 765, 757, 0,
	753, 0, 0, 0, 0, 0, 756, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 814,
	760, 0, 0, 0, 263, 264, 265, 215, 835, 798,
	836, 786, 822, 837, 0, 269, 788, 787, 272, 273,
	274, 761, 813, 838, 839, 221, 0, 275, 820, 0,
	803, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 863, 288,
	289, 290, 806, 804, 805, 810, 808, 807, 809, 291,
	292, 497, 293, 823, 295, 840, 841, 746, 296, 0,
	297, 0, 298, 0, 0, 824, 300, 0, 301, 302,
	0, 0, 0, 751, 306, 303, 304, 307, 310, 305,
	311, 312, 842, 843, 773, 864, 0, 0, 0, 0,
	0, 313, 314, 844, 825, 826, 0, 317, 0, 318,
	0, 0, 865, 319, 0, 320, 845, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 815, 816, 819, 867,
	0, 817, 797, 0, 0, 0, 0, 327, 329, 336,
	0, 866, 330, 846, 801, 827, 828, 829, 830, 847,
	0, 802, 0, 337, 868, 869, 338, 339, 340, 870,
	831, 832, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 848, 871, 348, 349, 872, 0, 350, 351, 0,
	0, 352, 0, 353, 748, 747, 354, 355, 356, 357,
	359, 790, 358, 873, 361, 362, 364, 363, 743, 0,
	874, 774, 818, 365, 849, 366, 367, 0, 799, 800,
	0, 0, 370, 371, 0, 0, 372, 241, 875, 373,
	876, 850, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 851, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 852, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	877, 404, 405, 406, 407, 752, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 791, 792,
	793, 794, 420, 426, 427, 811, 428, 409, 410, 429,
	878, 430, 853, 795, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 833, 437, 438, 439, 854, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	789, 452, 0, 855, 856, 857, 834, 0, 0, 454,
	455, 858, 859, 772, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 812, 465, 0, 796, 466,
	467, 468, 254, 860, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 744, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 740, 741, 0, 0, 0, 0, 0, 1372, 0,
	753, 0, 0, 0, 0, 0, 756, 778, 766, 767,
	764, 765, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1731, 262, 0,
	0, 0, 0, 814, 760, 0, 0, 0, 263, 264,
	265, 215, 835, 798, 836, 786, 822, 837, 0, 269,
	788, 787, 272, 273, 274, 761, 813, 838, 839, 221,
	0, 275, 820, 0, 803, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 863, 288, 289, 290, 806, 804, 805, 810,
	808, 807, 809, 291, 292, 497, 293, 823, 295, 840,
	841, 746, 296, 0, 297, 0, 298, 0, 0, 824,
	300, 0, 301, 302, 0, 0, 0, 751, 306, 303,
	304, 307, 310, 305, 311, 312, 842, 843, 773, 864,
	0, 0, 0, 0, 0, 313, 314, 844, 825, 826,
	0, 317, 0, 318, 0, 0, 865, 319, 0, 320,
	845, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	815, 816, 819, 867, 0, 817, 797, 0, 0, 0,
	0, 327, 329, 336, 0, 866, 330, 846, 801, 827,
	828, 829, 830, 847, 0, 802, 0, 337, 868, 869,
	338, 339, 340, 870, 831, 832, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 848, 871, 348, 349, 872,
	0, 350, 351, 0, 0, 352, 0, 353, 748, 747,
	354, 355, 356, 357, 359, 790, 358, 873, 361, 362,
	364, 363, 743, 0, 874, 774, 818, 365, 849, 366,
	367, 0, 799, 800, 0, 0, 370, 371, 0, 0,
	372, 241, 875, 373, 876, 850, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 851, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 852, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 877, 404, 405, 406, 407, 752,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 791, 792, 793, 794, 420, 426, 427, 811,
	428, 409, 410, 429, 878, 430, 853, 795, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 833, 437, 438,
	439, 854, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 789, 452, 0, 855, 856, 857,
	834, 0, 0, 454, 455, 858, 859, 772, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 812,
	465, 0, 796, 466, 467, 468, 254, 860, 0, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 744, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 740, 741, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 0, 0, 1076,
	756, 778, 766, 767, 764, 765, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 814, 760, 0,
	0, 0, 263, 264, 265, 215, 835, 798, 836, 786,
	822, 837, 0, 269, 788, 787, 272, 273, 274, 761,
	813, 838, 839, 221, 0, 275, 820, 0, 803, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 863, 288, 289, 290,
	806, 804, 805, 810, 808, 807, 809, 291, 292, 497,
	293, 823, 295, 840, 841, 746, 296, 0, 297, 0,
	298, 0, 0, 824, 300, 0, 301, 302, 0, 0,
	0, 751, 306, 303, 304, 307, 310, 305, 311, 312,
	842, 843, 773, 864, 0, 0, 0, 0, 0, 313,
	314, 844, 825, 826, 0, 317, 0, 318, 0, 0,
	865, 319, 0, 320, 845, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1075, 816, 819, 867, 0, 817,
	797, 0, 0, 0, 0, 327, 329, 336, 0, 866,
	330, 846, 801, 827, 828, 829, 830, 847, 0, 802,
	0, 337, 868, 869, 338, 339, 340, 870, 831, 832,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 848,
	871, 348, 349, 872, 0, 350, 351, 0, 0, 352,
	0, 353, 748, 747, 354, 355, 356, 357, 359, 790,
	358, 873, 361, 362, 364, 363, 743, 0, 874, 774,
	818, 365, 849, 366, 367, 0, 799, 800, 0, 0,
	370, 371, 0, 0, 372, 241, 875, 373, 876, 850,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 851,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 852,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 877, 404,
	405, 406, 407, 752, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 791, 792, 793, 794,
	420, 426, 427, 811, 428, 409, 410, 429, 878, 430,
	853, 795, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 833, 437, 438, 439, 854, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 789, 452,
	0, 855, 856, 857, 834, 0, 0, 454, 455, 858,
	859, 772, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 812, 465, 0, 796, 466, 467, 468,
	254, 860, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 744, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 740,
	741, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 1070, 756, 778, 766, 767, 764, 765,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 814, 760, 0, 0, 0, 263, 264, 265, 215,
	835, 798, 836, 786, 822, 837, 0, 269, 788, 787,
	272, 273, 274, 761, 813, 838, 839, 221, 0, 275,
	820, 0, 803, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 806, 804, 805, 810, 808, 807,
	809, 291, 292, 497, 293, 823, 295, 840, 841, 746,
	296, 0, 297, 0, 298, 0, 0, 824, 300, 0,
	301, 302, 0, 0, 0, 751, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 773, 864, 0, 0,
	0, 0, 0, 313, 314, 844, 825, 826, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1069, 816,
	819, 867, 0, 817, 797, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 846, 801, 827, 828, 829,
	830, 847, 0, 802, 0, 337, 868, 869, 338, 339,
	340, 870, 831, 832, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 748, 747, 354, 355,
	356, 357, 359, 790, 358, 873, 361, 362, 364, 363,
	743, 0, 874, 774, 818, 365, 849, 366, 367, 0,
	799, 800, 0, 0, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 852, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 752, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	791, 792, 793, 794, 420, 426, 427, 811, 428, 409,
	410, 429, 878, 430, 853, 795, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 833, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 789, 452, 0, 855, 856, 857, 834, 0,
	0, 454, 455, 858, 859, 772, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 812, 465, 0,
	796, 466, 467, 468, 254, 860, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	744, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 1065, 756, 778,
	766, 767, 764, 765, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 778,
	766, 767, 764, 765, 757, 0, 753, 0, 0, 0,
	0, 0, 756, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 778,
	766, 767, 764, 765, 757, 0, 753, 0, 0, 0,
	0, 0, 756, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 3067, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 3066, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 778,
	766, 767, 764, 765, 757, 0, 753, 0, 0, 0,
	0, 0, 756, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 3065, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 3067, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 746, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	748, 747, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 743, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 3066, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 744, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 740, 741, 778,
	766, 767, 764, 765, 757, 0, 753, 0, 0, 0,
	0, 0, 756, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 814, 760, 0, 0, 0,
	263, 264, 265, 215, 835, 798, 836, 786, 822, 837,
	0, 269, 788, 787, 272, 273, 274, 761, 813, 838,
	839, 221, 0, 275, 820, 0, 803, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 806, 804,
	805, 810, 808, 807, 809, 291, 292, 497, 293, 823,
	295, 840, 841, 0, 296, 0, 297, 0, 298, 0,
	0, 824, 300, 0, 301, 302, 0, 0, 0, 751,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	773, 864, 0, 0, 0, 0, 0, 313, 314, 844,
	825, 826, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 815, 816, 819, 867, 0, 817, 797, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 846,
	801, 827, 828, 829, 830, 847, 0, 802, 0, 337,
	868, 869, 338, 339, 340, 870, 831, 832, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 790, 358, 873,
	361, 362, 364, 363, 0, 0, 874, 774, 818, 365,
	849, 366, 367, 0, 799, 800, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 852, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 752, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 791, 792, 793, 794, 420, 426,
	427, 811, 428, 409, 410, 429, 878, 430, 853, 795,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 833,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 789, 452, 0, 855,
	856, 857, 834, 0, 0, 454, 455, 858, 859, 772,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 812, 465, 0, 796, 466, 467, 468, 254, 860,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 778, 766, 767, 764, 765, 757,
	0, 0, 1907, 0, 0, 0, 0, 1905, 1906, 0,
	258, 259, 260, 261, 0, 262, 753, 0, 0, 0,
	814, 760, 756, 0, 0, 263, 264, 265, 0, 835,
	798, 836, 786, 822, 837, 0, 269, 788, 787, 272,
	273, 274, 761, 813, 838, 839, 221, 0, 275, 820,
	0, 803, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 863,
	288, 289, 3067, 806, 804, 805, 810, 808, 807, 809,
	291, 292, 497, 293, 823, 295, 840, 841, 746, 296,
	0, 297, 0, 298, 0, 0, 824, 300, 0, 301,
	302, 0, 0, 0, 751, 306, 303, 304, 307, 310,
	305, 311, 312, 842, 843, 773, 864, 0, 0, 0,
	0, 0, 313, 314, 844, 825, 826, 0, 317, 0,
	318, 0, 0, 865, 319, 0, 320, 845, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 815, 816, 819,
	0, 0, 817, 797, 0, 0, 0, 0, 327, 329,
	336, 0, 866, 330, 846, 801, 827, 828, 829, 830,
	847, 0, 802, 0, 337, 0, 0, 338, 339, 340,
	870, 831, 832, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 848, 871, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 748, 747, 354, 355, 356,
	357, 359, 790, 358, 873, 361, 362, 364, 363, 743,
	0, 0, 774, 818, 365, 849, 366, 367, 0, 799,
	800, 0, 0, 370, 371, 0, 0, 372, 241, 875,
	373, 876, 850, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 851, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 852, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 877, 404, 405, 406, 407, 752, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 791,
	792, 793, 794, 420, 426, 427, 811, 428, 409, 410,
	429, 0, 430, 853, 795, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 833, 437, 438, 439, 854, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 789, 452, 0, 855, 856, 857, 834, 0, 0,
	454, 455, 858, 859, 772, 456, 457, 0, 3066, 459,
	0, 0, 460, 461, 462, 464, 812, 465, 0, 796,
	466, 467, 468, 254, 860, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 728, 0, 930, 0, 0,
	0, 0, 740, 741, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 258, 259, 260, 261, 756, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 932, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 863, 288, 289, 290, 0, 925, 926, 0,
	928, 927, 929, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 842, 843, 0, 864,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 865, 319, 0, 320,
	845, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 867, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 866, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 868, 869,
	338, 339, 340, 870, 341, 342, 0, 0, 343, 344,
	345, 917, 347, 346, 0, 848, 871, 348, 349, 872,
	0, 350, 351, 0, 0, 352, 0, 353, 934, 933,
	354, 355, 356, 357, 359, 360, 358, 873, 361, 362,
	364, 363, 0, 0, 874, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 923, 370, 371, 0, 0,
	372, 241, 875, 373, 876, 850, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 851, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 877, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 171,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 878, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 854, 0, 443, 444, 173, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 858, 859, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 1151, 255, 0, 0,
	469, 256, 0, 0, 930, 165, 470, 471, 257, 472,
	473, 474, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 914, 0, 1460, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 932, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 863,
	288, 289, 290, 0, 925, 926, 0, 928, 927, 929,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 842, 843, 0, 864, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 865, 319, 0, 320, 845, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	867, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 866, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 868, 869, 338, 339, 340,
	870, 341, 342, 0, 0, 343, 344, 345, 917, 347,
	346, 0, 848, 871, 348, 349, 872, 0, 350, 351,
	0, 0, 352, 0, 353, 934, 933, 354, 355, 356,
	357, 359, 360, 358, 873, 361, 362, 364, 363, 0,
	0, 874, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 923, 370, 371, 0, 0, 372, 241, 875,
	373, 876, 850, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 851, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 877, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 171, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 878, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 854, 0,
	443, 444, 173, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 858, 859, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 1151, 255, 0, 0, 469, 256, 0,
	0, 930, 165, 470, 471, 257, 472, 473, 474, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 814, 0, 914,
	0, 1460, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	813, 219, 220, 221, 0, 275, 820, 0, 803, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 863, 288, 289, 290,
	806, 804, 805, 810, 808, 807, 809, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	842, 843, 0, 864, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	865, 319, 0, 320, 845, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 815, 816, 819, 867, 0, 817,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 866,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 868, 869, 338, 339, 340, 870, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 848,
	871, 348, 349, 872, 0, 350, 351, 0, 0, 352,
	0, 353, 934, 933, 354, 355, 356, 357, 359, 360,
	358, 873, 361, 362, 364, 363, 0, 0, 874, 0,
	818, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 875, 373, 876, 850,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 851,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 877, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 811, 428, 409, 410, 429, 878, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 854, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 858,
	859, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 812, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 2295, 0, 930, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2617, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 932, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 863, 288, 289, 290, 0, 925, 926,
	0, 928, 927, 929, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 842, 843, 0,
	864, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 865, 319, 0,
	320, 845, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 867, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 866, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 868,
	869, 338, 339, 340, 870, 341, 342, 0, 0, 343,
	344, 345, 917, 347, 346, 0, 848, 871, 348, 349,
	872, 0, 350, 351, 0, 0, 352, 0, 353, 934,
	933, 354, 355, 356, 357, 359, 360, 358, 873, 361,
	362, 364, 363, 0, 0, 874, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 923, 370, 371, 0,
	0, 372, 241, 875, 373, 876, 850, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 851, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 877, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 878, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 854, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 858, 859, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 913, 0, 930, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 914, 0, 921, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 932, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	863, 288, 289, 290, 0, 925, 926, 0, 928, 927,
	929, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 842, 843, 0, 864, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 865, 319, 0, 320, 845, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 867, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 866, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 868, 869, 338, 339,
	340, 870, 341, 342, 0, 0, 343, 344, 345, 917,
	347, 346, 0, 848, 871, 348, 349, 872, 0, 350,
	351, 0, 0, 352, 0, 353, 934, 933, 354, 355,
	356, 357, 359, 360, 358, 873, 361, 362, 364, 363,
	0, 0, 874, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 923, 370, 371, 0, 0, 372, 241,
	875, 373, 876, 850, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 851, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 877, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 878, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 854,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 858, 859, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 930, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	914, 0, 921, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 932,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 863, 288, 289,
	290, 0, 925, 926, 0, 928, 927, 929, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 842, 843, 0, 864, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 865, 319, 0, 320, 845, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 867, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	866, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 868, 869, 338, 339, 340, 870, 341,
	342, 0, 0, 343, 344, 345, 917, 347, 346, 0,
	848, 871, 348, 349, 872, 0, 350, 351, 0, 0,
	352, 0, 353, 934, 933, 354, 355, 356, 357, 359,
	360, 358, 873, 361, 362, 364, 363, 0, 0, 874,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	923, 370, 371, 0, 0, 372, 241, 875, 373, 876,
	850, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	851, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 877,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 878,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 854, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	858, 859, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 0, 0, 930,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 914, 0, 921,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 932, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 0, 925,
	926, 0, 928, 927, 929, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 842, 843,
	0, 864, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 845, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 867, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 848, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 0, 0, 874, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 850, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 851, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 854, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 858, 859, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 1148, 0, 955, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 1361, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 932, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 863, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 864, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 865, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 867, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 866, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 868, 869, 338,
	339, 340, 870, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 871, 348, 349, 872, 0,
	350, 351, 0, 0, 352, 0, 353, 934, 933, 354,
	355, 356, 357, 359, 360, 358, 873, 361, 362, 364,
	363, 0, 0, 874, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 875, 373, 876, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 877, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 171, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 878, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 173, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 1151, 255, 0, 0, 469,
	256, 728, 0, 494, 165, 470, 471, 257, 472, 473,
	474, 0, 166, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 138, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 171, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 173, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 1151, 255, 0, 0, 469, 256, 0, 0,
	0, 165, 470, 471, 257, 472, 473, 474, 0, 166,
	778, 766, 767, 764, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	138, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 835, 798, 836, 786, 822,
	837, 0, 269, 788, 787, 272, 273, 274, 0, 0,
	838, 839, 221, 0, 275, 222, 0, 932, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	823, 295, 840, 841, 0, 296, 0, 297, 0, 298,
	0, 0, 824, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 773, 864, 0, 0, 0, 0, 0, 313, 314,
	844, 825, 826, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 867, 0, 237, 797,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	846, 801, 827, 828, 829, 830, 847, 0, 802, 0,
	337, 868, 869, 338, 339, 340, 870, 831, 832, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 934, 933, 354, 355, 356, 357, 359, 790, 358,
	873, 361, 362, 364, 363, 0, 0, 874, 774, 239,
	365, 849, 366, 367, 0, 799, 800, 0, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 852, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 791, 792, 793, 794, 420,
	426, 427, 0, 428, 409, 410, 429, 878, 430, 853,
	795, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	833, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 789, 452, 0,
	855, 856, 857, 834, 0, 0, 454, 455, 252, 253,
	772, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 796, 466, 467, 468, 254,
	860, 494, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 0, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2091, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 0, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 2529, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	1227, 0, 955, 954, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 1464, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 932,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 863, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 864, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 865, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 867, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	866, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 868, 869, 338, 339, 340, 870, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 871, 348, 349, 872, 0, 350, 351, 0, 0,
	352, 0, 353, 934, 933, 354, 355, 356, 357, 359,
	360, 358, 873, 361, 362, 364, 363, 0, 0, 874,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 875, 373, 876,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 877,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 878,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 1144, 0, 955,
	954, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 932, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 864, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1143, 232, 233, 867, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 0, 0, 874, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 1140, 0, 955, 954, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 932, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 863, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 864, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 865, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1139,
	232, 233, 867, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 866, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 868, 869, 338,
	339, 340, 870, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 871, 348, 349, 872, 0,
	350, 351, 0, 0, 352, 0, 353, 934, 933, 354,
	355, 356, 357, 359, 360, 358, 873, 361, 362, 364,
	363, 0, 0, 874, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 875, 373, 876, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 877, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 878, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 1101, 0, 955, 954, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	932, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 863, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 864, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 865, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1100, 232, 233, 867,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 866, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 868, 869, 338, 339, 340, 870,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 871, 348, 349, 872, 0, 350, 351, 0,
	0, 352, 0, 353, 934, 933, 354, 355, 356, 357,
	359, 360, 358, 873, 361, 362, 364, 363, 0, 0,
	874, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 875, 373,
	876, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	877, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	878, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 1098, 0,
	955, 954, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 932, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 864, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1097, 232, 233, 867, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 868, 869, 338, 339, 340, 870, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 934, 933, 354, 355, 356, 357, 359, 360, 358,
	873, 361, 362, 364, 363, 0, 0, 874, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 878, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 948, 0, 955, 954, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 932, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 863, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 864,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 865, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	950, 232, 233, 867, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 866, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 868, 869,
	338, 339, 340, 870, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 871, 348, 349, 872,
	0, 350, 351, 0, 0, 352, 0, 353, 934, 933,
	354, 355, 356, 357, 359, 360, 358, 873, 361, 362,
	364, 363, 0, 0, 874, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 875, 373, 876, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 877, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 878, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 955, 954,
	469, 256, 0, 952, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 932, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 863, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	864, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 865, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 867, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 866, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 868,
	869, 338, 339, 340, 870, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 871, 348, 349,
	872, 0, 350, 351, 0, 0, 352, 0, 353, 934,
	933, 354, 355, 356, 357, 359, 360, 358, 873, 361,
	362, 364, 363, 0, 0, 874, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 875, 373, 876, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 877, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 878, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 955,
	954, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 932, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 863, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 864, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 865, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 867, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 866, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	868, 869, 338, 339, 340, 870, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 871, 348,
	349, 872, 0, 350, 351, 0, 0, 352, 0, 353,
	934, 933, 354, 355, 356, 357, 359, 360, 358, 873,
	361, 362, 364, 363, 0, 0, 874, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 875, 373, 876, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 877, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 878, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	955, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 932, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 863, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 864, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 865,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 867, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 866, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 868, 869, 338, 339, 340, 870, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 871,
	348, 349, 872, 0, 350, 351, 0, 0, 352, 0,
	353, 934, 933, 354, 355, 356, 357, 359, 360, 358,
	873, 361, 362, 364, 363, 0, 0, 874, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 875, 373, 876, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 877, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 878, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 596, 0, 207, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 213, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 212, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 206, 0, 207, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 477, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 213, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 212, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 207, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 477, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 213, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 1700, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 212, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 207, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 477, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 213, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 212, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 477, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 477, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 1984, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 1981, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	2061, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 1987, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 2059, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 2058, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	1986, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 2060, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 1984, 275, 222, 0, 0, 1978, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 1981, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 1987, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1977, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 1986, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 1985, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 603, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 602, 582, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	585, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 586, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 587, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 581, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 582, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 585, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 586, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 587, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 585, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 586, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 587, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1119,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 923,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 943, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 945, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 923, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 940, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 942, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 923, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	936, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 938, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	923, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 517, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 516,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	515, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	494, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1964, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 494, 2452, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 2452, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 2449, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 923, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 1720, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 1718, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1716, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 1693, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1653, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 1651, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 629, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 1200, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 630, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 626, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 625, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1548, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1547, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 629, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 1200, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 630,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 626, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	625, 250, 251, 453, 0, 0, 454, 1201, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 629, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 619, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 630, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 626, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 1170, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 625, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1137, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1136, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1133,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1132, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1130, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1129, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 1127, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1126, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1123, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1122, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 1111, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 1109, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1108, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 1103, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1094, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1093, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1089,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1085, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1087, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 962, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 964, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	959, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 629, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 619, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 618, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 630, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 620, 408, 0, 412, 413, 626, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 621,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 625,
	250, 251, 453, 0, 0, 454, 623, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 609, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 610, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 605, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 594, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 539, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 2352, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	494, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 2350, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 494, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 2339, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 610, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 1561, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 0, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1552, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 896, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 494, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 0, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 0, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 0,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 0, 1301, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	1324, 1325, 1326, 1300, 0, 0, 0, 0, 1306, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1348, 0, 0, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1345, 0, 0,
	0, 0, 0, 0, 1315, 1316, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 1336, 0, 0,
	1306, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1338, 1348, 0, 0, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343, 1336,
	0, 0, 1327, 0, 0, 0, 1321, 0, 1334, 0,
	0, 0, 0, 0, 0, 1301, 0, 0, 1347, 1322,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	1300, 0, 1339, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1324,
	1325, 1326, 0, 0, 1339, 0, 0, 1306, 0, 0,
	1337, 0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0,
	1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 0,
	1338, 1348, 0, 0, 1328, 1329, 1330, 2233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 1345, 0, 0, 0,
	0, 0, 0, 1315, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 1337, 1321, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 1346, 0, 0, 0, 0, 0, 0, 0, 2230,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 1299,
	0, 1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 1347, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 1339, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 1337,
	0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0, 1311,
	1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 1338, 1348,
	0, 0, 1328, 1329, 1330, 0, 2229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 1345, 0, 0, 0, 0, 0,
	0, 1315, 1316, 0, 0, 1298, 1299, 0, 1331, 1332,
	1333, 1341, 1342, 1343, 1336, 0, 0, 0, 0, 0,
	0, 1321, 0, 1334, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 1347, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 1298, 1299, 0,
	1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 0, 1301, 0, 0, 1347, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 1326, 1300, 0, 1339,
	0, 0, 1306, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1348, 0, 0, 1328,
	1329, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 0, 0, 0, 0, 0, 0, 1315, 1316,
	0, 0, 0, 0, 0, 1323, 1324, 1325, 1326, 0,
	0, 1336, 0, 0, 1306, 0, 0, 1337, 1321, 0,
	1312, 1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310,
	1302, 1303, 1304, 1305, 1307, 1308, 1346, 1338, 1348, 0,
	0, 1328, 1329, 1330, 2228, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 1345, 0, 0, 0, 0, 0, 0,
	1315, 1316, 0, 0, 1298, 1299, 0, 1331, 1332, 1333,
	1341, 1342, 1343, 1336, 0, 0, 1327, 0, 0, 0,
	1321, 0, 1334, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 1347, 1322, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 1300, 0, 1339, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 1324, 1325, 1326, 0, 0, 1339, 0,
	0, 1306, 0, 0, 1337, 0, 0, 1312, 1313, 1319,
	1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 0, 1338, 1348, 0, 3030, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	1345, 0, 0, 0, 0, 0, 0, 1315, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 1337, 1321, 0, 1312,
	1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302,
	1303, 1304, 1305, 1307, 1308, 1346, 0, 0, 0, 3026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 0, 1301, 0,
	0, 1347, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 1339, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 1299, 0,
	1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 0, 1301, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 1300, 0, 0,
	1306, 0, 0, 1337, 0, 1320, 1312, 1313, 1319, 1318,
	1314, 1340, 1317, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 0, 1338, 1348, 0, 2966, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	0, 0, 0, 0, 0, 1323, 1324, 1325, 1326, 1336,
	0, 0, 0, 0, 1306, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 1338, 1348, 0,
	0, 1328, 1329, 1330, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 1345, 0, 0, 0, 0, 0, 0,
	1315, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 1327, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 1299, 0, 1331,
	1332, 1333, 1341, 1342, 1343, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 1347, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 1339, 0,
	0, 0, 1337, 0, 1320, 1312, 1313, 1319, 1318, 1314,
	1340, 1317, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 0, 0, 0, 0, 2965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 1306, 0, 0, 1337, 0, 0, 1312,
	1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302,
	1303, 1304, 1305, 1307, 1308, 0, 1338, 1348, 0, 2914,
	1328, 1329, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 1345, 0, 0, 0, 0, 0, 0, 1315,
	1316, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 1336, 0, 0, 0, 0, 0, 0, 1321,
	0, 1334, 0, 0, 0, 0, 0, 0, 1301, 0,
	0, 1347, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 1298, 1299, 0, 1331, 1332,
	1333, 1341, 1342, 1343, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 1347, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 1300, 0, 1339, 0, 0,
	1306, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 1348, 0, 0, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 1326, 0, 0, 1336,
	0, 0, 1306, 0, 0, 1337, 1321, 0, 1312, 1313,
	1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303,
	1304, 1305, 1307, 1308, 1346, 1338, 1348, 0, 2875, 1328,
	1329, 1330, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 0, 0, 0, 0, 0, 0, 1315, 1316,
	0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342,
	1343, 1336, 0, 0, 1327, 0, 0, 0, 1321, 0,
	1334, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	1347, 1322, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 1300, 0, 1339, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1324, 1325, 1326, 0, 0, 1339, 0, 0, 1306,
	0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 0, 1338, 1348, 0, 2786, 1328, 1329, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 1345, 0,
	0, 0, 0, 0, 0, 1315, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 1337, 1321, 0, 1312, 1313, 1319,
	1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 1346, 0, 0, 0, 2743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 1347,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 1339, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 1299, 0, 1331, 1332,
	1333, 1341, 1342, 1343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	1324, 1325, 1326, 0, 0, 1300, 0, 0, 1306, 0,
	0, 1337, 0, 1320, 1312, 1313, 1319, 1318, 1314, 1340,
	1317, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308,
	0, 1338, 1348, 0, 2742, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1345, 0, 0,
	0, 0, 0, 0, 1315, 1316, 0, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 1326, 1336, 0, 0,
	0, 0, 1306, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 0, 1338, 1348, 0, 0, 1328,
	1329, 1330, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 0, 0, 0, 0, 0, 0, 1315, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 1327, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333,
	1341, 1342, 1343, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 1347, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 1339, 0, 0, 0,
	1337, 0, 1320, 1312, 1313, 1319, 1318, 1314, 1340, 1317,
	1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 0,
	0, 0, 0, 2741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 1324, 1325, 1326, 0, 0, 0, 0,
	0, 1306, 0, 0, 1337, 0, 0, 1312, 1313, 1319,
	1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 0, 1338, 1348, 0, 2713, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	1345, 0, 0, 0, 0, 0, 0, 1315, 1316, 0,
	0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343,
	1336, 0, 0, 0, 0, 0, 0, 1321, 0, 1334,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 1347,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 0, 1301, 0,
	0, 1347, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	1324, 1325, 1326, 1300, 0, 1339, 0, 0, 1306, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1348, 0, 0, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1345, 0, 0,
	0, 0, 0, 0, 1315, 1316, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 1336, 0, 0,
	1306, 0, 0, 1337, 1321, 0, 1312, 1313, 1319, 1318,
	1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 1346, 1338, 1348, 0, 2533, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343, 1336,
	0, 0, 1327, 0, 0, 0, 1321, 0, 1334, 0,
	0, 0, 0, 0, 0, 1301, 0, 0, 1347, 1322,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	1300, 0, 1339, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1324,
	1325, 1326, 0, 0, 1339, 0, 0, 1306, 0, 0,
	1337, 0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0,
	1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 0,
	1338, 1348, 0, 2506, 1328, 1329, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 1345, 0, 0, 0,
	0, 0, 0, 1315, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 1337, 1321, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 1346, 0, 0, 0, 1830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 1299,
	0, 1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 1347, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 1339, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 1306, 3108, 0, 0, 1337,
	0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0, 1311,
	1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 1338, 1348,
	2195, 0, 1328, 1329, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 1345, 0, 0, 0, 0, 0,
	0, 1315, 1316, 0, 0, 1298, 1299, 0, 1331, 1332,
	1333, 1341, 1342, 1343, 1336, 0, 0, 0, 0, 0,
	0, 1321, 0, 1334, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 1347, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	1317, 3107, 0, 0, 0, 0, 0, 1298, 1299, 0,
	1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	2170, 0, 1301, 0, 0, 1347, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 1326, 1300, 0, 1339,
	0, 0, 1306, 0, 2278, 1320, 0, 2277, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1348, 0, 0, 1328,
	1329, 1330, 0, 0, 0, 0, 0, 0, 0, 2171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 0, 0, 0, 0, 0, 0, 1315, 1316,
	0, 0, 0, 0, 0, 1323, 1324, 1325, 1326, 0,
	0, 1336, 0, 0, 1306, 0, 0, 1337, 1321, 0,
	1312, 1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310,
	1302, 1303, 1304, 1305, 1307, 1308, 1346, 1338, 1348, 0,
	0, 1328, 1329, 1330, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 1345, 0, 0, 0, 0, 1933, 0,
	1315, 1316, 0, 0, 1298, 1299, 0, 1331, 1332, 1333,
	1341, 1342, 1343, 1336, 0, 0, 1327, 0, 0, 0,
	1321, 0, 1334, 0, 0, 0, 1932, 0, 0, 1301,
	0, 0, 1347, 1322, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 1300, 0, 1339, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 1324, 1325, 1326, 0, 0, 1339, 0,
	0, 1306, 0, 0, 1337, 0, 0, 1312, 1313, 1319,
	1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304,
	1305, 1307, 1308, 0, 1338, 1348, 0, 0, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	1345, 0, 0, 0, 0, 0, 0, 1315, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 1337, 1321, 0, 1312,
	1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302,
	1303, 1304, 1305, 1307, 1308, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342,
	1343, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	1347, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 1339, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1324, 1325, 1326, 0, 0, 0, 0, 0, 1306,
	0, 0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318,
	1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 1338, 1348, 0, 0, 1328, 1329, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 1345, 0,
	0, 0, 0, 0, 0, 1315, 1316, 0, 0, 1298,
	1299, 0, 1331, 1332, 1333, 1341, 1342, 1343, 1336, 0,
	0, 0, 0, 0, 0, 1321, 0, 1334, 0, 0,
	0, 0, 0, 0, 1301, 0, 0, 1347, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 725, 1300,
	0, 0, 0, 0, 0, 0, 0, 1320, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 1324, 1325,
	1326, 0, 0, 1339, 0, 0, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1348, 0, 0, 1328, 1329, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 1345, 0, 0, 0, 0,
	0, 0, 1315, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 1337, 1321, 0, 1312, 1313, 1319, 1318, 1314, 1340,
	0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 1299, 0,
	1331, 1332, 1333, 1341, 1342, 1343, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 0, 1301, 0, 0, 1347, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	1339, 0, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 1306, 0, 0, 0, 1337, 2288,
	0, 1312, 1313, 1319, 1318, 1314, 1340, 0, 1311, 1309,
	1310, 1302, 1303, 1304, 1305, 1307, 1308, 1338, 1348, 0,
	0, 1328, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 1345, 0, 0, 0, 0, 0, 0,
	1315, 1316, 0, 0, 1298, 1299, 0, 1331, 1332, 1333,
	1341, 1342, 1343, 1336, 0, 0, 0, 0, 0, 0,
	1321, 0, 1334, 0, 0, 0, 2283, 0, 0, 1301,
	0, 0, 1347, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 1298, 1299, 0, 1331,
	1332, 1333, 1341, 1342, 1343, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 1347, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 1324, 1325, 1326, 1300, 0, 1339, 0,
	0, 1306, 0, 0, 1320, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 1348, 0, 0, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	1345, 0, 0, 0, 0, 0, 0, 1315, 1316, 0,
	0, 0, 0, 0, 1323, 1324, 1325, 1326, 0, 0,
	1336, 0, 0, 1306, 0, 0, 1337, 1321, 0, 1312,
	1313, 1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302,
	1303, 1304, 1305, 1307, 1308, 1346, 1338, 1348, 0, 0,
	1328, 1329, 1330, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 1345, 0, 0, 0, 0, 0, 0, 1315,
	1316, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 1336, 0, 0, 1327, 0, 0, 0, 1321,
	0, 1334, 0, 0, 0, 2227, 0, 0, 1301, 0,
	0, 1347, 1322, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 1300, 0, 1339, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 0, 2246, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 1339, 0, 0,
	1306, 0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318,
	1314, 1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305,
	1307, 1308, 0, 1338, 1348, 0, 0, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 1337, 1321, 0, 1312, 1313,
	1319, 1318, 1314, 1340, 0, 1311, 1309, 1310, 1302, 1303,
	1304, 1305, 1307, 1308, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 0, 1331, 1332, 1333, 1341, 1342, 1343,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 1347,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 1339, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	1324, 1325, 1326, 0, 0, 0, 0, 0, 1306, 0,
	0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 1338, 1348, 0, 0, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 1298, 1299, 0, 1331, 1332, 1333, 1341,
	1342, 1343, 0, 0, 0, 0, 1344, 1345, 0, 0,
	0, 1334, 0, 0, 1315, 1316, 0, 0, 1301, 0,
	0, 1347, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 1320, 1346, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1324, 1325, 1326, 0, 0, 0, 0, 1322,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 1338, 1348, 0, 0, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	0, 0, 0, 0, 0, 0, 1315, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 0,
	1337, 0, 0, 1312, 1313, 1319, 1318, 1314, 1340, 0,
	1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 1613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 0, 0, 0, 0,
	0, 1322, 1624, 1609, 1614, 1597, 1634, 1633, 0, 0,
	1599, 1598, 0, 0, 0, 0, 0, 1643, 1642, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 1624, 1609,
	1614, 1597, 1634, 1633, 0, 0, 1599, 1598, 0, 0,
	0, 0, 0, 1643, 1642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1635, 0, 1631,
	1630, 0, 0, 0, 0, 0, 0, 0, 0, 1629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1635, 0, 1631, 1630, 0, 0, 0,
	0, 0, 0, 0, 0, 1629, 0, 1628, 1626, 1627,
	0, 0, 1337, 0, 0, 1312, 1313, 1319, 1318, 1314,
	1340, 0, 1311, 1309, 1310, 1302, 1303, 1304, 1305, 1307,
	1308, 0, 0, 1628, 1626, 1627, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1617, 1612, 1618,
	1619, 1620, 1621, 1622, 0, 1616, 0, 0, 0, 0,
	0, 0, 1608, 0, 1640, 1641, 0, 0, 0, 0,
	0, 0, 0, 1617, 1612, 1618, 1619, 1620, 1621, 1622,
	0, 1616, 0, 0, 0, 0, 0, 0, 0, 0,
	1640, 1641, 0, 0, 0, 1601, 0, 0, 656, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 1632, 0,
	0, 0, 1610, 1611, 0, 0, 0, 0, 0, 0,
	663, 1601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 661, 0, 1632, 0, 0, 0, 1610, 1611,
	0, 0, 0, 0, 0, 1625, 0, 0, 0, 1751,
	1749, 1750, 1753, 1752, 662, 0, 0, 0, 0, 664,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 670,
	671, 1625, 0, 0, 682, 0, 0, 0, 0, 0,
	0, 0, 1602, 1603, 1604, 1605, 0, 0, 688, 665,
	0, 0, 0, 0, 0, 0, 1623, 1606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 1602, 1603,
	1604, 1605, 0, 0, 686, 676, 0, 0, 0, 0,
	0, 0, 1623, 1606, 1600, 0, 0, 1636, 1637, 1638,
	1639, 0, 0, 1645, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 0, 660, 0,
	1600, 0, 1607, 1636, 1637, 1638, 1639, 1644, 0, 0,
	0, 0, 0, 667, 668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1607, 0,
	0, 0, 0, 1644, 0, 674, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	658, 677, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 678,
	0, 0, 0, 693, 694, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683,
}
var sqlPact = [...]int{

	4707, -1000, 7, -1000, -1000, -1000, 246, -1000, -1000, -1000,
	-1000, 244, 242, 241, -1000, 240, 237, 236, 235, 227,
	225, 224, 223, 221, 220, 219, 217, -1000, -1000, 214,
	-1000, -1000, -1000, -1000, 213, 211, 210, -1000, 203, 1652,
	31800, 201, 199, 192, 2260, 49524, 1509, 190, 189, -1000,
	188, 1521, 36795, 1121, 1498, -1000, 181, 180, 1542, 49143,
	838, 1970, 34479, 1392, 1927, 48756, 31413, 1917, 34092, 48369,
	-1000, -1000, 1129, -1000, -1000, 47982, 178, 175, 170, 169,
	164, -1000, 162, 47595, 160, 158, 155, 149, 148, 143,
	133, 131, -1000, 130, 129, 128, 122, 119, 118, 117,
	116, 100, 96, 94, 93, 91, 88, 82, 79, -1000,
	58756, 77, 76, 75, -1000, 1378, 74, 73, 67, 66,
	64, -1000, -1000, 63, 62, 61, 58, 57, 56, -1000,
	186, 55, 54, 53, 49, 44, -1000, 1154, 583, 2353,
	13276, 1253, 1245, 1235, 1231, 1239, 787, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52191, 49524, 39, -91, 38,
	-1000, 2332, 831, 24401, 4707, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36408, 36021, 35634,
	29883, 47208, 46821, 10390, 10390, 976, -1000, -1000, -1000, -1000,
	-1000, 5, 32943, 49524, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 294, -1000, -1000, -1000,
	-1000, -1000, -1000, 20415, 581, 19991, 284, 19567, 250, 429,
	-1000, -1000, -1000, 293, -1000, -1000, -1000, -1000, 1298, -1000,
	-1000, -1000, -1000, 46434, 46047, 2239, 45660, 29486, 29089, 45273,
	1777, 1773, 44886, -1000, -1000, 44499, -1000, -1000, 2154, 1945,
	1937, 35247, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44118, 43731, 43344, 42957, 42570, 28692, 28295, 606, -1000,
	-1000, -1000, -1000, 25562, 605, -1000, -1000, -1000, -1000, -1000,
	37, -1000, 36, 35, -1000, 28, 27, 26, 25, 24,
	22, 21, 20, -1000, 18, 15, -1000, 14, 13, -1000,
	11, 10, 1865, 1528, 1365, 42183, 1070, 1781, -1000, 1508,
	46, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49524, -1000,
	20825, 315, -1000, 604, -1000, 1942, -1000, 20825, 315, -1000,
	1507, 232, 1408, -1000, -1000, -1000, 1377, 1084, -1000, -1000,
	49524, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2581, 1465,
	603, 41796, -1000, 1837, -1000, 748, 14096, -1000, 917, -1000,
	14096, 290, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1834, 1192,
	2558, 27898, 1727, 2401, 2153, 2580, 1654, 2089, 2087, 2080,
	2079, 2045, 2579, 1236, 2578, 1021, 866, 2576, 2032, 2025,
	2564, 1555, 878, 2571, 2570, 1982, 1935, -1000, -1000, -1000,
	-1000, 1092, -1000, -1000, -1000, -1000, -1000, -1000, 38319, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1730, 2343, 2343, 2343, 2431, 416, 409, -1000, 186,
	-1000, 1947, -1000, 1434, -1000, -1000, -1000, 58111, -1000, -1000,
	20825, 20825, 20825, 20825, 20825, 1368, -1000, -1000, -1000, 630,
	-1000, 601, 523, 11621, -1000, -1000, 2507, -1000, -1000, -1000,
	420, 20825, -1000, 283, -1000, -1000, -1000, -1000, 600, 2563,
	-1000, 829, -1000, -1000, -1000, 756, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2043, 550, 549, -1000, 547, 546, 544,
	-1000, -1000, -1000, 599, 598, 596, 595, 592, 590, 588,
	587, -1000, -1000, -1000, 1244, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 780, -1000, 780, 780,
	526, 526, 582, 578, 527, 577, -1000, -1000, 576, 526,
	574, 569, -1000, -1000, 568, 711, -1000, 710, 561, 557,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1381,
	-1000, -1000, 1381, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	975, 51048, -1000, -1000, -1000, -4, 49524, -1000, 429, -4,
	-1000, -1000, 556, -1000, 14930, 14930, 14930, -1000, -1000, 1502,
	20825, -1000, 2115, -1000, 4777, -217, 553, 25175, 690, 690,
	-1000, 23240, 637, 27501, -1000, 550, 549, 547, 546, 544,
	-1000, 278, -1000, -1000, -1000, -1000, -1000, 1933, 2205, 1023,
	-1000, 1193, 2202, -1000, 3042, 2199, 1181, -1000, -1000, 762,
	2197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1371, -1000, -1000, 2116, 2195, -179, 2076, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1518, -1000, 30264, 32943, -5, -1000,
	-1000, -121, -1000, 9995, 58111, -1000, -1000, -1000, 58111, 722,
	-1000, -1000, 2194, -1000, 58111, 721, -1000, -1000, 2193, -1000,
	1929, 49524, 10390, 49524, 49524, -1000, 541, 1588, 1445, -1000,
	-1000, 32562, 3042, 1587, -1000, -1000, 758, 1580, -1000, -1000,
	1578, -1000, 429, -1000, -1000, 41409, 51810, 758, 1576, -1000,
	-1000, -1000, 38319, -1000, 49524, -1000, 49524, -1000, 1082, -1000,
	51429, 137, 2190, -1000, -1000, 137, 2189, -1000, 137, 2186,
	-1000, 136, 2179, -1000, -1000, 1495, 2178, -1000, -139, 2169,
	-1000, -1000, -139, 2160, -1000, -1000, 20825, -25, -1000, -1000,
	-1000, 831, 31026, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41022, 30264, -1000, -1000, -1000, 32562, 49524, 34860, 754, 58111,
	-1000, 2470, 58559, 30264, 58111, -1000, 32562, 49524, 1999, -1000,
	40635, 40248, 2371, 747, -1000, -1000, 49524, -1000, 20825, -1000,
	2469, 1766, -54, -1000, -1000, -1000, -1000, -1000, 1668, 1703,
	914, 1072, -1000, 14096, 14096, 2299, -1000, 270, 10390, -1000,
	-1000, 1028, 1712, -1000, -1000, -1000, -1000, -1000, 39861, -1000,
	-1000, -1000, 1420, 49524, -1000, -1000, 1991, -1000, 32181, 49524,
	-1000, 49524, -1000, 49524, -1000, 49524, -1000, 49524, -1000, -1000,
	-1000, -1000, -1000, 2091, 1247, 1983, -1000, 49524, -1000, 49524,
	-1000, -1000, -1000, 1663, -1000, -1000, -1000, 39480, 39093, 38706,
	-1000, -1000, 1189, -1000, 1027, -1000, -1000, 140, -1000, -1000,
	1730, -1000, 1423, 1747, 19143, 1713, 20825, 186, -1000, -1000,
	186, 186, 12852, -1000, -1000, -1000, 49524, -1000, 58533, 58559,
	10390, 991, 20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825,
	20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825,
	20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825, 20825,
	20825, 20825, 20825, 20825, 20825, 20825, 20825, 1660, 20825, 974,
	20825, 20825, 20825, 20825, 1157, -1000, -1000, 1396, 472, 1414,
	-1000, 2543, 2543, 2543, 5226, 5226, 528, 630, -1000, 20825,
	-1000, 315, 20825, 409, 55813, 1601, 2, 11211, -1000, -1000,
	-1000, -1000, 18719, 777, 58111, 9600, 10787, -1000, 2556, 1242,
	1875, 1822, 537, 707, 706, 700, 671, 558, 20825, 20825,
	20825, 20825, 20825, 20825, 20825, 20825, -1000, -1000, -1000, -1000,
	-1000, -1000, 2507, -1000, 18309, 17885, -1000, 2555, 17461, 17037,
	-1000, 16613, 22055, 16189, 988, 984, 982, 945, 20825, 12031,
	-1000, -54, -1000, 51048, -1000, 49524, -4, 2467, 20825, 229,
	-1000, 56704, -1000, 229, 229, 536, -27, 58111, 1722, 1720,
	24788, 1721, 1393, 1393, 1393, -1000, 535, 617, 690, 7211,
	15765, 532, 690, 690, 254, 37176, 1379, 37176, 292, 408,
	22853, 2115, -1000, -1000, 49524, 10390, -24, 1251, -1000, 33705,
	2362, 2360, 2318, 1079, -1000, 1054, 2429, 38319, 2446, 315,
	2367, 1919, -1000, -1000, 969, 38319, 3042, -1000, 58559, -1000,
	1772, 2422, 1068, 1049, 1068, 1068, 1041, 38319, 968, 1259,
	30264, 2358, 967, -40, 2445, 315, 2357, 1914, 953, -1000,
	-1000, 49524, 10390, 2348, 1026, 688, -5, 32943, 49524, 268,
	-1000, 20825, 315, 20825, 315, 1031, -28, 267, 1731, 1711,
	254, -1000, 33324, 2466, 2151, 49524, 951, -1000, 3042, 2140,
	-1000, 1254, -1000, 2136, 2120, 2463, 1442, 1574, -1000, -1000,
	-1000, 1441, 1568, 1002, 2118, 772, 311, 2456, 311, 26727,
	-1000, 49524, -1000, 49524, -1000, -1000, 49524, -1000, 49524, -1000,
	49524, -1000, 49524, 49524, -1000, 49524, 30264, 30264, 30264, -34,
	5397, 31026, -35, 717, 942, -8, -1000, 817, 33324, 312,
	-53, -1000, 844, -1000, -1000, -1000, 331, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 780, 529, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, 1244,
	526, 526, 526, -1000, -1000, -1000, 711, -1000, 710, -1000,
	-1000, -1000, 780, 780, -1000, -1000, -185, 1901, -121, 34860,
	688, -1000, 688, -1000, 1972, -1000, 2361, 715, -58, 862,
	-54, -1000, 1381, -1000, 1114, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2562, -1000,
	2549, -1000, -1000, 2554, -6, -1000, -6, -1000, 10390, -1000,
	49524, 1964, -1000, -1000, -1000, -1000, -1000, -1000, 49524, -1000,
	49524, -1000, -1000, -1000, -1000, -1000, -1000, 4313, -1000, 1920,
	-1000, 5397, 265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49524, 49524, 49524, -1000, 38319, -1000, -1000, -1000, -1000,
	58111, -1000, 460, -1000, -1000, 58111, 1177, 1740, -1000, 1740,
	-12, -1000, 56517, 1707, 49524, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 741, 950, 950,
	941, 941, 941, 941, 2475, 3109, 903, 995, 6374, 6374,
	6374, 6374, 6374, 6374, 6374, 6374, 310, 454, 454, 310,
	310, 310, 310, 310, 454, 454, 454, 6374, 6374, 6374,
	5226, 58273, 5279, 20825, 20825, 940, 1394, 472, 5279, 20825,
	5279, 5279, 5279, 5279, -1000, 1438, -1000, -1000, -1000, -1000,
	1884, 525, 22055, 22055, -1000, -1000, -1000, 11621, 20825, -1000,
	-1000, -1000, -1000, 523, 20825, -1000, 56000, -247, 406, -202,
	264, 49524, 20825, 615, -86, -1000, 1075, -1000, 20825, 262,
	-1000, -1000, -37, 20825, 20825, 20825, 405, -1000, 404, -1000,
	938, -1000, 937, 933, 927, -1000, 522, 1397, 521, 520,
	20825, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57853, 53478, 53220, 53033, 6073, 52961, 6514, -61, -63,
	403, -1000, 1881, -202, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 400, -1000, 399, -68, -1000, -70, -1000, 398, -1000,
	57666, -202, 388, 3329, -1000, 22055, 22055, 22055, -1000, 385,
	-1000, 56445, -1000, 737, 735, 733, 732, 57594, 15341, 15341,
	15341, 381, 57407, 20825, -202, -1000, -1000, 519, -73, 772,
	14930, 24014, 10390, -1000, 772, 772, 20825, -1000, 20825, 24788,
	24788, 1745, 1715, 24788, -1000, -1000, -1000, -1000, 37176, 512,
	690, 37176, -1000, 2507, 1719, -1000, 380, -1000, 14520, 37176,
	37176, 10390, -1000, -1000, 49524, 429, -1000, -1000, 690, 379,
	259, 1419, 49524, 49524, 49524, -1000, -1000, 1562, 50667, 1561,
	58559, 49524, -1000, -1000, 518, 515, 1706, 1705, 49524, 49524,
	50286, 49905, 49524, 1350, 20825, 1615, 1376, 315, -1000, 729,
	510, 49524, 1153, -1000, -1000, -1000, -1000, -1000, 49524, -1000,
	-1000, 2540, -1000, 1068, -1000, -1000, -1000, 1068, 3042, 1147,
	49524, 30264, 760, 727, 49524, 1272, 315, -1000, 720, 509,
	10390, 1349, -1000, 714, 49524, 1800, -1000, 1517, -1000, -1000,
	9205, 58111, -1000, 58111, -1000, -1000, -1000, 10390, 1753, 1753,
	378, -15, -1000, -1000, -1000, -1000, -1000, -1000, 1756, 49524,
	586, 49524, 315, 49524, 142, 30264, 49524, 30264, 30264, 30264,
	315, 49524, 2114, 49524, 2113, 2158, 648, 49524, 1398, 20825,
	1190, -1000, 25949, 796, 49524, 1136, 101, -1000, -1000, -1000,
	32, 49524, -1000, -1000, 137, 137, 137, -1000, 136, 1495,
	-1000, -139, -139, -1000, -1000, -1000, 5397, 1876, 37938, 49524,
	2480, 30264, -75, -1000, 822, 913, 904, -1000, 58559, -1000,
	620, 857, -1000, 2529, 508, 2507, -1000, 717, 49524, 95,
	-1000, 759, 1462, -1000, 14096, 14096, -1000, 1381, -1000, -1000,
	1158, -1000, 1234, -1000, -1000, -1000, -1000, 14096, -1000, -1000,
	1020, -121, -121, -1000, -1000, 289, -1000, 49524, -1000, -1000,
	-1000, -1000, 1177, -1000, 20825, -1000, -1000, -1000, 12852, -1000,
	-1000, -1000, 49524, -201, 20825, 5279, 5279, 20825, 22055, 22055,
	-1000, 5279, -1000, -1000, -1000, -1000, -1000, 1868, 507, 20825,
	58559, 5487, 4776, -76, 310, -1000, 20825, -1000, 8810, -90,
	55741, -1000, -1000, 619, 2156, -1000, 20825, 57149, 8415, 377,
	13686, -1000, 56962, -49, -49, -1000, 2545, 1632, 1336, 1186,
	1097, 2526, -1000, 27114, 773, 1398, 55554, 58533, 58559, 20825,
	20825, -1000, 20825, 20825, 20825, -1000, -1000, 2507, -1000, 20825,
	-1000, -1000, -1000, -1000, -1000, 1864, 20825, -1000, 58533, 58559,
	22055, 22055, 22055, 22055, 22055, 22055, 22055, 22055, 22055, 22055,
	22055, 22055, 22055, 22055, 22055, 22055, 22055, 22055, 22055, 1658,
	22055, 2531, 2531, 2531, -1000, 1844, 1864, 20825, 20825, -1000,
	-1000, -1000, -1000, 58559, 376, 374, 370, -1000, 20825, -202,
	312, -1000, 1818, -1000, -85, -1000, 2115, -1000, -1000, 1818,
	1818, -95, 58111, -1000, 1745, -1000, 505, 20825, 24788, -1000,
	614, -1000, -100, -1000, 37176, -1000, 613, -244, -1000, 684,
	-1000, 690, 368, -1000, -1000, -1000, 257, 429, -1000, 37176,
	-1000, 10390, -1000, -1000, 926, 920, -1000, 2112, -1000, 1557,
	-1000, 801, -1000, 1233, 20825, 23627, 501, 500, 1281, -1000,
	2111, 1495, 2090, 1495, -1000, -1000, 751, -1000, 58111, 499,
	498, -1000, -24, 1203, -1000, 26346, 20825, -1000, 916, -1000,
	-1000, -1000, 3042, 915, -1000, -1000, 1252, 26346, -1000, -1000,
	-1000, 26346, 20825, -1000, -40, 908, 26346, 2069, 717, 1862,
	921, -1000, -1000, -1000, -1000, -1000, -1000, 1755, 33324, 49524,
	497, 49524, 496, -1000, -1000, 494, 49524, 688, 3042, -1000,
	758, -1000, -1000, 811, 10390, 491, 10390, 1690, 648, 30645,
	-1000, 758, 1747, -1000, 58111, -1000, 1136, 12441, 2323, -103,
	-1000, 256, -1000, -1000, -1000, 772, 26727, 24788, 20825, 2569,
	-109, -1000, -1000, -1000, -1000, -1000, -1000, 315, -41, 490,
	-1000, 677, 674, -121, 1403, 1781, 1781, -1000, 2516, -1000,
	611, 366, 2507, 364, -1000, -121, 49524, -1000, 1405, 10390,
	49524, 49524, 10390, 49524, -1000, -1000, -54, -1000, -1000, -1000,
	-1000, 49524, -1000, -1000, -1000, 1413, 55295, -1000, 2342, 10390,
	2495, 5279, 443, 402, 20825, 58559, 6740, -111, 20825, 20825,
	-1000, 609, 58111, -1000, -1000, -1000, -1000, -1000, -1000, 58111,
	20825, 255, -1000, 2533, 20825, 363, 362, 361, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 343, -1000, -1000, 52572,
	-1000, 20825, 341, -1000, 340, 339, 6212, 365, 55221, 54962,
	54775, 338, 58111, 1844, 58111, -1000, -1000, 798, 798, 1055,
	1055, 1055, 1055, 2531, 686, 629, 332, 1004, 1004, 1004,
	1466, 891, 891, 1004, 1004, 1004, 1861, 1670, 485, 5583,
	-1000, -1000, 58111, 58111, 337, -1000, -1000, -1000, -202, 336,
	1814, 2416, -1000, 24788, 1814, 1814, -1000, -1000, 49524, 58111,
	-1000, -217, -1000, 2507, -1000, -1000, 1719, -1000, 7620, 37176,
	690, 10390, -1000, -1000, 141, 49524, 49524, 49524, 2088, -1000,
	2977, -1000, 54703, -119, -1000, 2396, 2396, 20825, 254, -1000,
	-1000, 484, 23627, 49524, -1000, 1370, 1701, 843, 49524, -1000,
	49524, -1000, -1000, 49524, 49524, 49524, 49524, 49524, -1000, 483,
	-122, 49524, 49524, 30264, -1000, -1000, -124, 10390, -1000, 2341,
	-1000, 30264, 918, 1272, 1789, -1000, 482, 23627, 477, 49524,
	33324, 2455, -1000, 717, -1000, -1000, 475, 1832, 1440, 23627,
	1437, 1692, 648, 30645, -1000, 1002, 1136, -1000, -1000, -102,
	-1000, 516, 315, 49524, 2568, 1398, -1000, -120, 58111, -1000,
	666, -1000, 37557, 37557, 30264, 30264, -1000, 2287, 2282, 559,
	-1000, -1000, 334, -1000, -121, 1596, -1000, -1000, 1292, 1464,
	-1000, -1000, -1000, -1000, -1000, 2342, 20825, 20825, 6740, -125,
	-1000, 5279, 5279, -1000, 58111, 8020, -1000, 56962, -1000, -1000,
	-1000, -1000, 1293, -1000, 54516, -1000, -1000, -1000, 20825, 20825,
	-1000, -1000, -1000, -1000, -1000, -1000, 22055, 1836, 474, 58559,
	-1000, -1000, 766, 20825, 20825, 2115, 766, 766, -127, 690,
	-1000, -1000, -1000, 2507, -1000, 37176, 141, 10390, -1000, -1000,
	-1000, 49524, -1000, 49524, -1000, 10390, 49524, 1841, 1553, -1000,
	-1000, 1704, 473, 22055, 49524, 752, -1000, 1306, 23627, 2342,
	10390, 2342, 54257, 10787, -130, -132, 1549, -1000, -1000, 1529,
	20825, -1000, 58559, 1495, 1495, -133, -143, -1000, 898, 893,
	20825, 877, -1000, -1000, -1000, 874, -1000, 693, -139, 26346,
	-1000, -1000, 1363, 23627, -146, 23627, -148, 328, 315, -1000,
	23627, -1000, 49524, -153, 49524, -1000, 648, 30645, -1000, 2158,
	-1000, 2246, 49524, 2314, -1000, -1000, -1000, 1747, 472, -1000,
	-154, -1000, -1000, 470, 465, -1000, -1000, -149, -1000, 716,
	713, -1000, -1000, -1000, 10390, 1017, -1000, 5279, 5279, -1000,
	-1000, -1000, 316, 1398, 2415, -1000, 54183, 53924, 4466, 22055,
	58559, -155, -1000, 49524, 58111, -202, -1000, -1000, -1000, 37176,
	513, -1000, -1000, 2225, -1000, -1000, -1000, 49524, 1531, -1000,
	-1000, 20825, 5583, 464, 20825, -1000, 1755, 462, -1000, -1000,
	-1000, -1000, -1000, -1000, 2396, -37, -1000, 1217, -1000, -1000,
	58111, 2391, -1000, -1000, 461, 459, 49524, 49524, -49, 457,
	456, 26346, -1000, 49524, -156, 1306, -161, -1000, 1755, -1000,
	-163, 811, -1000, 455, 30645, -1000, 1690, 980, -166, 49524,
	1136, -1000, -1000, 30264, 30264, 1596, -1000, 49524, -1000, 49524,
	-1000, 49524, -1000, 1341, 20825, -1000, -1000, 4466, -169, -1000,
	-181, -1000, 2452, -1000, -1000, -1000, -1000, 2084, 53737, 1655,
	49524, 53665, 1272, 49524, 2342, 309, 49524, 808, 10390, 1292,
	1292, -1000, -1000, 308, 20825, 20825, -1000, 441, -1000, 1755,
	1306, 1272, 1306, 440, 23627, -1000, 1692, 1074, -1000, 772,
	-1000, -1000, -171, -172, -1000, -180, -182, -1000, 307, 21645,
	21645, -202, -1000, 49524, 430, 2038, -1000, 1422, 1382, 296,
	828, -1000, -187, -1000, -1000, 429, -1000, 20825, -1000, -188,
	-1000, 791, -193, -1000, 786, 2533, -195, -203, 49524, 1272,
	1755, -1000, 1755, 23627, -204, -1000, 26727, -1000, 717, 717,
	-1000, -1000, -1000, -1000, -1000, 22450, 1402, 1127, 56258, -1000,
	-1000, -1000, 49524, -1000, 1435, 1426, 1124, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1655, 58111, -1000, 1292, 1784, -1000,
	1292, 1835, -1000, -1000, -205, -1000, 1272, 1272, -211, -1000,
	-198, -1000, -1000, 2484, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2251, -1000, 833, 1459, 1459, 1422, -1000, 427, -1000,
	423, 1486, -1000, -1000, 1306, -1000, 21235, -1000, 2492, -1000,
	-1000, 1657, -1000, -1000, 20825, 20825, -1000, -1000, -1000, 1755,
	-1000, -1000, -1000, -1000, -214, -233, 1272, 1272, 873, -1000,
	-1000, 422, 20825, -236, 1272, -1000,
}
var sqlPgo = [...]int{

	0, 3059, 3058, 1932, 3048, 2389, 3047, 3046, 3045, 3044,
	3039, 2383, 3038, 3036, 3032, 3031, 3026, 3025, 3023, 3020,
	3019, 3018, 3017, 3015, 3013, 3012, 3010, 3008, 3006, 2997,
	2996, 2994, 2369, 2993, 2364, 2992, 2990, 2986, 2983, 2982,
	2972, 2971, 2970, 24, 2968, 2966, 2965, 2964, 2362, 2959,
	2957, 2359, 2956, 2953, 2346, 2947, 2943, 2941, 2342, 2340,
	2939, 2938, 2288, 2937, 2936, 2285, 2933, 2275, 2930, 2926,
	2271, 2922, 102, 103, 2921, 2252, 2920, 2918, 2239, 2219,
	2217, 2914, 2213, 2913, 2909, 2211, 2191, 2907, 308, 2906,
	2905, 2904, 2902, 2183, 2175, 2900, 2893, 2892, 172, 2891,
	2086, 2889, 2883, 2876, 2872, 2870, 2868, 2864, 2862, 2860,
	2855, 2854, 2850, 2849, 2847, 2845, 2842, 2840, 2839, 2836,
	2834, 2831, 2829, 2827, 2823, 2821, 2820, 178, 119, 2817,
	2813, 2015, 1996, 2812, 2802, 57, 52, 19, 75, 125,
	160, 4361, 154, 2800, 2799, 2797, 2796, 2795, 36, 124,
	121, 113, 112, 2795, 225, 2792, 2788, 62, 40, 26,
	21, 86, 2787, 2786, 2784, 1627, 89, 2783, 2782, 168,
	161, 2780, 991, 37, 88, 105, 92, 338, 47, 2779,
	107, 17, 2778, 115, 83, 2773, 48, 34, 25, 4243,
	74, 61, 58, 195, 153, 144, 142, 118, 849, 2771,
	171, 72, 140, 2770, 2769, 2767, 54, 138, 3, 2,
	122, 11, 2765, 8, 2764, 10, 2763, 2762, 2761, 2759,
	33, 109, 38, 42, 2758, 77, 16, 137, 2757, 156,
	2754, 71, 170, 141, 360, 129, 2749, 80, 14, 79,
	2745, 2739, 104, 159, 2736, 28, 116, 87, 96, 184,
	150, 91, 151, 152, 2732, 2729, 2723, 179, 2710, 134,
	117, 2708, 2706, 94, 27, 2702, 30, 164, 29, 2699,
	2697, 106, 2691, 143, 2689, 2688, 180, 110, 133, 4,
	50, 93, 6, 157, 97, 64, 65, 2687, 2810, 1818,
	1630, 31, 2686, 99, 68, 39, 78, 98, 163, 44,
	2681, 2679, 1506, 2677, 2673, 2672, 126, 2671, 2670, 2668,
	95, 59, 81, 2666, 101, 43, 73, 149, 130, 173,
	120, 2665, 131, 85, 148, 169, 49, 2655, 1812, 2653,
	146, 2647, 2646, 2641, 2639, 1054, 2633, 2632, 2630, 1227,
	2628, 100, 2627, 132, 127, 128, 147, 108, 162, 158,
	789, 2626, 139, 56, 2625, 111, 23, 0, 3330, 3184,
	2623, 145, 90, 2622, 2621, 2620, 2619, 35, 9, 5,
	7, 12, 13, 55, 22, 114, 2618, 2617, 82, 135,
	2616, 177, 155, 2615, 2614, 2613, 51, 2611, 18, 2609,
	15, 2604, 2603, 20, 1, 2601, 2598, 165, 2597, 2594,
	2593, 2479, 2592, 174, 2591, 2590, 2588, 2587, 2586, 2052,
	2585, 2584, 45, 32, 123,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	402, 402, 152, 152, 151, 147, 147, 405, 405, 406,
	406, 154, 154, 154, 156, 156, 153, 153, 32, 32,
	86, 86, 86, 138, 138, 138, 79, 79, 79, 74,
	74, 355, 355, 356, 356, 134, 134, 135, 135, 135,
	135, 136, 136, 137, 137, 137, 46, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	44, 44, 128, 128, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 58, 58, 56, 59,
	59, 60, 60, 60, 60, 60, 60, 61, 61, 61,
	61, 61, 61, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 68, 68, 68, 69, 69, 69, 66,
	66, 66, 64, 64, 64, 63, 63, 63, 67, 67,
	67, 65, 65, 65, 233, 233, 70, 70, 70, 70,
	70, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 73, 325, 325, 71, 71, 300,
	300, 75, 75, 258, 258, 76, 76, 76, 76, 76,
	77, 77, 77, 77, 87, 87, 87, 87, 401, 401,
	227, 227, 169, 169, 169, 169, 82, 82, 82, 82,
	83, 83, 83, 84, 84, 133, 133, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 43, 94, 94, 94, 96, 93, 93, 93,
	95, 95, 95, 95, 97, 97, 98, 98, 98, 98,
	98, 98, 99, 99, 349, 349, 236, 236, 347, 347,
	348, 348, 204, 204, 204, 204, 204, 205, 205, 205,
	354, 354, 354, 354, 354, 354, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 118, 118, 118,
	127, 127, 127, 127, 127, 127, 127, 120, 120, 120,
	111, 111, 101, 101, 107, 107, 107, 107, 107, 102,
	102, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 103, 103, 103, 103, 114, 114, 114, 114, 113,
	113, 123, 123, 123, 123, 123, 123, 123, 313, 313,
	119, 119, 119, 119, 122, 122, 122, 122, 117, 117,
	117, 121, 121, 124, 124, 124, 124, 104, 104, 105,
	105, 106, 106, 125, 125, 116, 116, 126, 126, 126,
	126, 126, 126, 126, 115, 115, 115, 404, 404, 109,
	399, 399, 397, 397, 397, 397, 397, 397, 397, 398,
	398, 400, 400, 80, 80, 80, 52, 52, 53, 53,
	206, 206, 207, 207, 281, 281, 281, 281, 208, 208,
	155, 155, 155, 211, 212, 212, 209, 209, 210, 210,
	210, 214, 214, 213, 216, 216, 215, 280, 365, 365,
	366, 366, 366, 366, 366, 366, 366, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 363, 363, 363,
	364, 361, 361, 362, 362, 362, 362, 407, 407, 279,
	279, 220, 220, 368, 368, 368, 368, 369, 369, 369,
	369, 369, 372, 371, 370, 370, 370, 370, 370, 309,
	309, 309, 57, 57, 57, 247, 247, 246, 246, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 130, 130, 54, 54, 54, 161, 161, 51,
	51, 51, 55, 55, 50, 50, 50, 50, 50, 264,
	264, 262, 262, 225, 225, 315, 315, 315, 173, 173,
	148, 148, 148, 20, 22, 22, 16, 16, 16, 16,
	16, 16, 29, 29, 30, 30, 26, 26, 263, 263,
	265, 265, 81, 81, 85, 85, 85, 91, 91, 129,
	129, 129, 129, 129, 129, 129, 33, 33, 33, 33,
	45, 45, 45, 45, 89, 410, 410, 410, 90, 90,
	409, 409, 168, 168, 168, 168, 170, 170, 276, 276,
	277, 277, 411, 411, 278, 278, 278, 163, 162, 164,
	164, 49, 49, 49, 157, 157, 158, 158, 159, 159,
	160, 160, 412, 412, 78, 78, 78, 132, 132, 200,
	200, 273, 273, 273, 221, 221, 178, 178, 275, 275,
	274, 274, 274, 245, 245, 245, 131, 131, 230, 230,
	238, 238, 239, 239, 321, 321, 240, 88, 88, 141,
	141, 139, 139, 139, 139, 139, 139, 140, 140, 140,
	142, 142, 142, 142, 142, 142, 142, 145, 145, 145,
	145, 146, 146, 146, 144, 144, 379, 379, 379, 381,
	381, 382, 378, 378, 380, 380, 408, 408, 249, 249,
	249, 218, 219, 217, 217, 413, 413, 223, 223, 222,
	224, 224, 314, 314, 314, 243, 243, 243, 243, 268,
	268, 266, 266, 267, 267, 269, 269, 270, 270, 270,
	271, 271, 272, 272, 242, 242, 296, 296, 143, 143,
	143, 229, 229, 229, 231, 231, 286, 286, 286, 287,
	287, 285, 285, 285, 285, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 395, 395,
	395, 396, 396, 312, 312, 317, 317, 317, 317, 317,
	317, 310, 310, 311, 311, 322, 323, 323, 252, 252,
	252, 252, 250, 250, 251, 251, 318, 318, 318, 318,
	244, 244, 319, 319, 319, 282, 282, 326, 326, 326,
	341, 341, 228, 228, 228, 336, 336, 327, 327, 327,
	327, 327, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 330, 330, 330, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 340, 340, 340, 340, 340,
	331, 331, 337, 338, 332, 333, 339, 339, 339, 339,
	343, 343, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 335, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 260, 260, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 290, 290,
	290, 290, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 373, 373, 373, 373, 373,
	373, 373, 373, 376, 376, 377, 377, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 383, 383, 384, 384,
	386, 386, 387, 387, 388, 389, 389, 389, 390, 391,
	391, 385, 385, 392, 392, 392, 393, 393, 394, 394,
	394, 394, 394, 302, 302, 308, 308, 308, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 171, 171, 171, 171, 171, 235,
	235, 234, 234, 299, 299, 297, 297, 301, 301, 253,
	253, 342, 342, 342, 342, 342, 342, 342, 254, 254,
	254, 261, 255, 255, 256, 256, 256, 256, 256, 293,
	294, 257, 257, 257, 295, 295, 303, 307, 307, 306,
	305, 305, 304, 304, 283, 283, 284, 284, 241, 241,
	414, 414, 237, 237, 320, 320, 320, 320, 202, 202,
	232, 232, 201, 201, 195, 195, 196, 196, 196, 196,
	226, 226, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 344, 344, 344, 345, 346, 298, 188,
	187, 175, 176, 186, 185, 184, 174, 177, 181, 182,
	183, 179, 180, 191, 190, 189, 324, 197, 197, 198,
	198, 198, 199, 199, 199, 199, 172, 172, 192, 192,
	193, 194, 194, 165, 165, 165, 166, 166, 167, 167,
	353, 353, 351, 351, 351, 352, 352, 352, 352, 350,
	350, 350, 350, 350, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 2,
	0, 1, 1, 0, 2, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 1, 1, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 8, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 2, 2, 5, 6,
	3, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 5, 2, 3,
	0, 3, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 3, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 2, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 5, 6, 5, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 13, 16, 9, 12, 4, 2,
	0, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 7, 3,
	4, 3, 4, 3, 4, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 2, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 2, 2, 1, 5, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 258, 265, 286, 288, 290, 299,
	-40, -39, 117, -139, -141, 284, -83, -84, -93, -94,
	-95, -96, -133, 317, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	320, -33, -45, -90, -89, 365, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 421, 285,
	375, 37, 329, 65, 111, 294, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 392, 400, -145, -143, -144,
	-146, 306, 383, 342, 425, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, 342, 386, 307,
	376, 92, 167, 270, 256, -397, 2, 4, -359, -357,
	-196, -195, 342, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 233,
	235, 248, 252, 262, 264, 272, 296, 323, 338, 354,
	355, 356, 362, 363, 383, 384, 388, 395, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 348, 350,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 220, 223, 221,
	222, 225, 226, 228, 227, 234, 236, 237, 239, 240,
	243, 244, 247, 250, 253, 254, 255, 256, 257, 258,
	259, 261, 263, 265, 267, 268, 269, 270, 271, 273,
	274, 276, 277, 278, 279, 280, 284, 282, 283, 285,
	286, 287, 288, 290, 292, 293, 294, 295, 297, 318,
	319, 331, 299, 300, 301, 302, 303, 304, 305, 309,
	313, 310, 311, 312, 307, 308, 314, 315, 317, 320,
	322, 324, 325, 328, 329, 330, 332, 335, 336, 337,
	333, 334, 327, 340, 341, 343, 344, 345, 346, 347,
	349, 351, 352, 357, 360, 361, 365, 366, 368, 369,
	372, 373, 374, 379, 375, 377, 380, 381, 382, 387,
	393, 394, 396, 397, 398, -194, -165, 414, -193, 424,
	424, 424, 2, 188, 189, 269, 268, 314, 315, -189,
	-192, -193, -194, -165, 4, -357, -359, 92, 241, 424,
	424, 424, 2, 342, 330, 115, 307, 376, 292, 386,
	-262, 184, 92, 371, -165, 265, 24, 2, 101, 173,
	374, 373, 24, 261, 308, 344, 346, 2, 424, 424,
	2, 386, 307, 342, 167, 92, 376, 292, -183, 2,
	-165, -73, 2, 421, 27, -72, -5, -48, -58, -62,
	-75, -70, -11, -32, -34, -54, -51, -59, -65, -67,
	-79, -78, -80, -82, -86, -85, -88, -93, -94, -100,
	-131, -132, 78, 25, 107, 317, 117, 183, 2, -401,
	-227, 2, 24, -169, -165, 78, 145, 306, 342, 2,
	188, 189, 2, -183, 2, -397, 2, 188, 189, 2,
	-401, -227, 23, 2, -165, 2, 303, 320, -170, 2,
	299, -165, 424, 424, 424, 424, 424, 424, 209, 58,
	296, 314, -98, 361, -97, 354, 301, -99, -349, 2,
	223, -165, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, -127, 314, 330,
	152, 36, 58, 24, 63, 93, 146, 167, 168, 196,
	73, 74, 268, 209, 189, -313, 119, 315, 343, 302,
	340, 361, 78, 377, 293, -404, 118, 4, 92, 223,
	316, 354, 67, 347, 348, 424, 424, 424, -408, 2,
	342, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, -140, -142, -141, 424, 424, 424, 424, 424,
	-222, -223, 370, 181, 113, 246, -139, -141, 2, -379,
	-127, 314, 2, 58, 24, -347, 2, -288, 241, -290,
	412, 413, 407, 229, 399, -302, 98, 216, 215, -292,
	-303, 114, 296, 421, -199, -291, 427, 9, -376, -141,
	31, 52, -197, -165, 7, 8, 5, 6, -172, -328,
	-298, -335, 364, 125, 232, -373, -374, -198, 4, -357,
	-351, -329, -338, -333, -334, -336, 42, 48, 47, 351,
	222, 309, 310, 311, 312, 324, 379, 163, 40, 239,
	240, 175, 182, 61, 84, 85, 83, 88, 87, 89,
	86, 316, 376, 53, 30, 157, 158, 162, 233, 159,
	59, -375, 43, 94, 106, 135, 136, 176, 177, 178,
	179, 191, 192, 334, 357, 39, 41, 44, 54, 55,
	96, 97, 123, 124, 134, 147, 174, 180, 202, 235,
	252, 262, 272, 323, 338, 354, 355, 356, 362, 363,
	384, -358, -339, 79, 126, 143, 172, 160, 185, 186,
	190, 203, 206, 224, 231, 249, 251, 291, 321, -409,
	2, 361, 361, 2, -409, 2, -409, 2, -168, 2,
	361, 358, -410, 361, 395, -381, 273, -382, -183, -381,
	424, 424, 426, 424, -217, -218, -219, 2, 24, 104,
	421, 2, -316, 2, 419, -318, -172, 198, -375, -141,
	-317, 421, -189, 242, -198, 84, 85, 88, 87, 89,
	4, -165, 61, 216, 215, -3, 2, -318, 157, -189,
	2, -318, 157, 2, -190, 157, -318, -192, 2, -355,
	157, -353, 9, -352, 5, 4, -357, -359, -358, 2,
	-174, -165, 2, -201, 157, -189, -186, -350, 4, -357,
	-359, -358, -360, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 111, 113, 125, 127, 139, 141, 142,
	145, 148, 150, 161, 167, 171, 181, 183, 198, 201,
	207, 210, 211, 229, 230, 232, 238, 241, 242, 245,
	246, 260, 266, 275, 289, 306, 316, 326, 339, 342,
	353, 358, 359, 364, 370, 371, 376, 378, 385, 386,
	389, 390, 391, 392, -187, -350, 358, 426, -232, -195,
	-196, -226, -165, 423, -288, 2, -88, 2, -288, 157,
	2, -88, 157, 2, -288, 157, 2, -88, 157, 2,
	-220, 421, 423, 342, 62, 2, -189, 157, -179, 2,
	-165, 109, -190, 157, 2, -192, -355, 157, 2, -355,
	157, 2, -191, 2, -189, 167, 167, -174, 157, 2,
	-165, 24, 142, 2, 183, 2, 183, 2, -319, 2,
	-318, -233, 157, 2, -189, -233, 157, 2, -233, 157,
	2, -202, 157, 2, -201, -174, 157, 2, -356, 157,
	2, -355, -356, 157, 2, -258, 421, -325, 2, -324,
	-352, 383, 421, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	314, -138, 80, 220, 219, 241, 358, 426, -189, -288,
	-88, -300, 421, 142, -288, -88, 241, 142, 243, 2,
	92, 342, 398, 24, -165, 2, 318, 2, 421, -98,
	56, 361, -277, 2, -278, -162, -163, -164, 187, 267,
	271, 398, -347, 358, 404, 142, -347, -236, 423, -127,
	2, 139, 378, 2, 7, 2, -355, 2, 318, 2,
	268, 315, 58, 142, 2, 2, -399, 2, 241, 142,
	2, 142, 2, 142, 2, 142, 2, 142, 2, 2,
	268, 315, 2, 360, 197, 360, 2, 142, 2, 142,
	2, 5, 2, 187, 267, 331, 2, 342, 386, 307,
	2, 2, 142, 2, 142, 398, 2, -244, -318, -222,
	-223, -243, -266, -267, 207, 127, 238, -249, 24, 104,
	-249, -249, 46, 422, 422, -127, 318, 2, 10, 11,
	60, 35, 412, 413, 414, 415, 137, 416, 417, 410,
	411, 409, 402, 403, 406, 193, 194, 75, 405, 404,
	68, 213, 298, 128, 129, 130, 131, 281, 164, 165,
	166, 13, 14, 15, 28, 245, 206, 399, 160, 321,
	407, 16, 17, 18, 185, 186, 231, 38, 161, -171,
	-203, -288, -288, -288, -288, -288, 251, -241, -283, 419,
	-141, 421, 421, -141, -288, -302, -234, 421, -346, 7,
	-141, -297, 419, -304, -288, 423, 421, 5, 421, 5,
	-383, 393, 139, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 264, -343, 387, -343,
	-343, -330, 421, -330, 421, 421, -331, 421, 421, 421,
	-330, 421, 421, 421, 394, 400, 394, 400, 421, 421,
	-276, -277, -276, 358, -170, 426, -381, -220, 421, -237,
	-320, -288, 414, -237, -237, 241, -234, -288, 79, -252,
	190, 224, 143, 203, 291, 172, -346, -73, -285, 427,
	421, -172, -375, -141, -165, -312, 400, -312, -141, -317,
	421, -316, 414, -189, 421, 423, -150, 282, -149, 22,
	25, 107, 381, 120, -210, 169, 256, 114, 327, -403,
	117, 300, 349, 350, 282, 114, -246, -248, 32, 90,
	226, 253, 49, 155, 215, 216, 329, 114, 282, 392,
	114, 117, 282, -152, 327, -403, 117, 300, 282, -151,
	-210, 114, 427, 117, 236, -355, -232, 426, 426, -350,
	414, 114, 114, 114, 114, 142, -226, -350, -189, -197,
	-165, -198, 421, -220, 229, 241, -397, -247, -246, 229,
	-161, -378, 392, 229, 229, -220, -176, 157, 2, -166,
	-165, -176, 157, -378, 229, -319, -200, -189, -200, 317,
	-183, 32, -154, 426, 51, 287, 114, -154, 114, -154,
	114, -154, 426, 114, -154, 114, 426, 114, 114, -234,
	422, 426, -325, -355, -397, -226, -169, 78, 421, 32,
	-299, -326, -327, -328, -337, -332, -335, 42, 48, 47,
	351, 222, 309, 310, 311, 312, 324, 379, 163, 40,
	239, 240, 175, 4, 41, -339, 182, 174, 176, 177,
	178, 179, 180, 323, 39, 272, 135, 136, 134, 106,
	97, 96, 235, 44, 43, 94, 354, 355, 356, 357,
	191, 192, 55, 54, 384, 334, -356, -397, -226, 139,
	-174, 2, -189, 2, 69, 70, 398, -349, -234, 32,
	-277, 2, -411, 426, 205, -205, 212, 228, 151, 242,
	396, -354, 5, 4, -298, -309, 98, 209, -335, 8,
	413, -344, 7, 412, -348, -347, -348, 82, 423, -350,
	342, 191, -349, 24, 319, 2, -189, -400, 139, -398,
	292, -397, -189, -189, -189, -189, -189, 139, 2, 360,
	2, 139, -165, -165, 205, -189, 2, -191, 2, -190,
	2, 342, 167, 342, -154, 426, -243, -267, -266, -269,
	-288, 24, -272, 133, 225, -288, -290, -140, -140, -140,
	-224, -314, -288, 266, 167, -349, -341, -326, -340, 277,
	278, 276, 280, 279, -326, -188, -350, 354, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, 206, 160, 321, 38, 161, -288, 358,
	-288, -288, -288, -288, 221, 229, 232, 364, 125, 372,
	104, 236, -414, 339, 34, -295, -141, 421, -308, 29,
	326, 24, -302, 296, 421, -283, -288, -284, -235, -234,
	422, 32, 426, -235, -301, -297, -307, -306, 389, -350,
	414, 422, -234, 385, 24, 104, 414, 2, 7, -259,
	397, 218, 95, 153, 217, -260, 305, -384, 132, 148,
	421, 422, 2, 422, 2, 422, 2, 422, 2, 422,
	2, -288, -288, -288, -288, -288, -288, -288, -234, -346,
	-253, 2, -342, -234, 4, 397, 218, 95, 153, 217,
	305, -253, 2, 7, -234, 2, -234, 2, -254, 2,
	-288, -234, -255, -289, -290, 412, 413, 407, -302, -256,
	2, -288, -235, 354, 354, 354, 354, -288, 45, 201,
	359, -257, -288, 142, -234, -170, -382, 32, -234, -229,
	426, 142, 32, 4, -229, -229, 421, 422, 426, 190,
	190, -316, -252, 190, -250, 249, -250, -250, -395, 421,
	420, -312, -175, 419, 428, -350, -235, 2, 421, -312,
	-312, 423, -311, -310, 32, -183, 247, -311, 422, -189,
	-350, 426, 358, -263, 73, 62, -280, 157, 62, -361,
	-177, 73, -362, -165, 57, 371, 266, 141, -263, 73,
	-263, 73, 73, 317, 330, 46, -318, 35, -88, 71,
	142, 358, -318, -248, -326, 90, 215, 216, 46, -345,
	-344, 413, -345, 46, -345, -345, -345, 392, -190, -318,
	358, 257, -355, 71, 358, 426, 35, -88, 71, 142,
	358, -201, -175, 71, 342, -323, -322, 401, -195, -165,
	423, -288, -88, -288, -88, 332, 422, 423, 185, 185,
	-206, -207, -165, -281, -280, -363, -364, -361, 184, 167,
	371, 126, 32, 114, -226, 358, 114, 257, 114, 114,
	32, 241, 229, 241, 229, -157, 345, 114, -282, 390,
	-273, -88, 421, 98, 32, -273, -238, -239, -321, -240,
	-177, 421, -183, -189, -233, -233, -233, -201, -202, -174,
	-355, -356, -356, 422, -73, -324, 422, -137, 392, 358,
	392, 378, -207, -72, 25, 78, 107, 422, 426, -228,
	31, 419, -259, 421, -343, 421, -137, -322, 142, -227,
	-323, -323, 139, 70, 404, 358, 422, 361, -278, -204,
	271, 325, 283, 313, 8, 7, 7, 426, -350, -189,
	139, -226, -226, 314, -73, 139, -73, 423, -189, -201,
	-189, -318, -270, -344, 421, -271, 296, 297, 426, -148,
	33, 102, 195, -189, 398, -288, -288, 358, -414, 339,
	-295, -288, 221, 232, 364, 125, 372, 104, 236, 142,
	421, -289, -289, -234, -288, 420, 430, 422, 423, -226,
	-288, 420, 420, 426, -305, -306, 108, -288, 423, -413,
	426, -222, -288, -234, -234, 422, 422, 358, 358, 358,
	358, 421, -389, 250, 421, 421, -288, 32, 426, 426,
	426, 422, 426, 426, 426, 422, 422, 426, 422, 142,
	422, 422, 422, 422, 422, -261, 260, 422, 10, 11,
	412, 413, 414, 415, 137, 416, 417, 410, 411, 409,
	402, 403, 404, 68, 213, 298, 13, 14, 15, 185,
	161, -289, -289, -289, 422, -293, -294, 142, 139, 398,
	398, 398, 398, 32, -257, -257, -257, 422, 142, -234,
	421, 422, -282, -320, -231, 2, -316, -185, -350, -282,
	-282, -234, -288, -316, -316, -251, 378, 241, 190, -316,
	-310, 422, -396, -346, -312, -311, -346, -287, -286, 140,
	227, 422, -235, 2, -311, -311, -350, -183, -220, -312,
	422, 423, -149, -189, -177, -184, -165, 229, -280, 157,
	-156, 229, -326, -184, 421, 421, 195, 195, -177, -184,
	157, -177, 157, -184, -184, -402, 271, 237, -288, 208,
	270, 230, -150, 282, -88, 398, 421, -191, 282, -197,
	-345, -345, -246, 282, -190, -355, 392, 398, -174, -151,
	-88, 398, 421, -175, -152, 282, 398, -189, -134, 156,
	236, 414, -350, -128, 5, 232, -128, 422, 426, 167,
	-176, 167, -182, -166, -88, -189, 142, -355, -190, -355,
	-355, -355, -88, -189, 114, -189, 114, -158, 110, -412,
	404, -174, -223, -222, -288, -245, -275, 289, 241, -221,
	-178, -177, 383, -183, -245, -230, 426, 142, 404, 423,
	-221, -154, -154, -154, -154, -154, -73, 142, -136, 244,
	-135, -165, 5, -226, 23, -355, 422, -326, 419, 420,
	7, 7, 421, -346, -137, -226, 142, -41, 392, 270,
	92, 342, 256, 167, -347, -347, -277, 369, 66, 271,
	-347, 342, 314, -73, -165, -271, -288, -314, -189, 427,
	-288, -288, -289, -289, 142, 421, -288, -299, 28, 28,
	422, -284, -288, 414, -350, 422, 422, -297, 111, -288,
	353, -350, 414, 422, 385, -413, -413, -413, 5, 218,
	153, 217, -260, 217, -260, -260, 7, -390, -180, 421,
	-165, 390, -222, 422, -341, -326, -288, -288, -288, -288,
	-288, -346, -288, -293, -288, -341, -326, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, 104, 229, 236, -289,
	-294, -293, -288, -288, -326, 422, 422, 422, -234, -72,
	-242, 148, -323, 426, -242, -242, 422, -251, 421, -288,
	-316, 420, 422, 426, -311, 420, 426, 429, 404, -312,
	422, 423, -220, -310, -350, 358, 358, 114, 229, 380,
	-365, -362, -288, -225, -315, -177, -377, 421, -165, -373,
	-374, -172, 421, 421, -147, 107, 317, -265, 114, -154,
	114, -154, 396, 421, 421, 358, -263, 73, -291, -172,
	-234, 358, 358, 257, -291, -291, -234, 358, -291, 117,
	-137, 142, 341, -208, 170, -281, -166, 421, -176, 421,
	421, -220, -189, -323, -247, -161, -264, 378, -175, 421,
	-175, -159, 200, -412, -353, -378, -268, -266, -245, -237,
	230, 72, 422, 426, 423, -282, -239, -231, -288, 2,
	422, -88, 426, 421, 404, 404, 243, -138, -138, 7,
	420, 422, -346, 422, -226, 244, -186, -174, -189, -187,
	-201, -189, 242, 422, -148, -175, 28, 28, -288, -299,
	422, -288, -288, 420, -288, 423, 5, -288, 422, 422,
	422, 422, -391, -165, -288, 422, 422, 422, 426, 426,
	422, 422, 422, 422, 422, -294, 142, 104, 236, 421,
	422, 422, -296, 150, 46, -316, -296, -296, -226, -285,
	-346, -286, -175, 419, -311, -312, -350, 423, -177, -184,
	-280, 114, -366, 73, -367, 60, 126, 78, 229, 232,
	371, 266, 57, 98, 275, 32, 422, 422, 426, -173,
	60, -173, -288, 421, -225, -226, 229, 336, 98, 229,
	98, 91, 366, -177, -184, -226, -226, -189, -177, -184,
	421, 422, -191, -190, -355, 422, -175, 71, -356, 354,
	-209, -210, 161, 421, -225, 421, -226, -206, 32, -137,
	421, 144, 241, -225, 241, -160, 199, -412, -353, -157,
	-245, -274, 421, 241, -88, -178, 2, -223, 404, -135,
	-136, -355, -355, 91, 91, 420, 422, -42, -43, 167,
	73, 259, -212, -211, 256, 236, -148, -288, -288, 422,
	-350, 414, -413, -385, 256, 422, -288, -288, -289, 142,
	421, -299, -386, 391, -288, -234, -386, -386, 422, -312,
	-346, -311, -280, -184, -188, -181, -165, 126, 157, 232,
	195, 421, -289, -189, 421, 2, -279, -407, 77, 337,
	-315, -148, -188, -148, 422, -234, 422, 422, 232, 232,
	-288, -326, -154, -154, 422, 422, 358, 358, -234, 358,
	358, 398, -291, 254, -225, 422, -225, 422, 422, -88,
	-225, -189, 422, -189, -412, -353, -158, 105, -226, 73,
	-268, -295, 422, 421, 421, 426, 24, 421, 24, 421,
	-187, 342, 422, -223, 46, 422, 422, -289, -299, 422,
	-387, -388, -180, -311, 420, -367, -181, 229, -288, -167,
	421, -288, -208, 421, -173, -413, 275, -405, 60, 421,
	421, -177, -184, -413, 421, 421, -291, -189, 422, -279,
	422, -208, 422, -264, 421, -353, -159, 373, 230, 422,
	-184, -245, -356, -356, -43, -226, -226, -189, -392, 270,
	297, -234, 422, 426, 32, 114, 422, -368, 214, -165,
	422, -209, -226, -148, 422, -189, -406, 378, -188, -214,
	-213, -211, -216, -215, -211, 422, -234, -234, 421, -208,
	-279, -209, -279, 421, -225, -160, 317, -282, 422, 422,
	422, 422, 422, -393, -394, 38, 368, 82, -288, -393,
	-388, -390, 126, -369, -372, -371, 241, 143, 255, 322,
	422, 336, 388, 422, -220, -288, 422, 426, 383, 422,
	426, 383, 422, 422, -226, -209, -208, -208, -225, 422,
	-238, -137, -137, -394, 263, 138, 296, 263, 138, -181,
	-371, 241, -372, 241, 373, 101, -368, -213, 161, -215,
	142, 422, -209, -209, 422, -282, 28, -370, 226, 287,
	51, 317, -370, -369, 421, 421, -155, 51, 287, -279,
	-394, 21, 232, 98, -234, -234, -208, 422, 422, -209,
	-209, 358, 421, -234, 422, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 247, 248, 250, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 0, 857, -2, 0, 366, 368, 377, 379,
	381, 383, 384, 0, 446, 448, 450, 452, 454, 456,
	458, 460, 462, 463, 465, 467, 469, 471, 473, 475,
	477, 479, 481, 483, 485, 487, 489, 491, 493, 495,
	-2, 769, 771, 773, 775, -2, 62, 64, 66, 68,
	70, 72, 87, 222, 224, 226, 228, 231, 233, 235,
	894, 253, 255, 257, 259, 261, -2, 908, 0, 0,
	0, -2, 0, -2, -2, -2, 787, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 870, 872, 874,
	876, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1529, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1416, 1470, 1419, 1414, 188,
	190, 192, 193, 0, 0, 0, 0, 0, 0, 672,
	1455, 1468, 1469, 1470, 1473, 1474, 1475, 1529, 0, 215,
	217, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 345, 1620, 347, 349, 0, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 249, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 344, 342,
	1450, 286, 287, 0, 0, 327, 328, 329, 330, 331,
	332, 334, 291, 293, 295, 296, 298, 300, 302, 304,
	306, 308, 310, 312, 313, 315, 317, 318, 320, 322,
	323, 325, 732, 0, 0, 0, 0, 0, 170, 0,
	359, 353, 358, 360, 362, 363, 364, 365, 0, 168,
	0, 0, 605, 340, 338, 0, 162, 0, 0, 766,
	0, 359, 1497, 357, 767, 768, 0, 0, 762, 763,
	1649, 797, 367, 369, 378, 380, 382, 385, -2, -2,
	1744, -2, 408, -2, 416, 1747, 1651, 419, 0, 421,
	-2, 424, 447, 449, 451, 453, 455, 457, 459, 461,
	464, 466, 468, 470, 472, 474, 476, 478, 480, 482,
	484, 486, 488, 490, 492, 494, 496, 497, 0, 0,
	0, 0, 0, 501, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 500, 502, 503,
	504, 0, 548, 587, 588, 770, 772, 774, 0, 713,
	896, 63, 65, 67, 69, 71, 223, 225, 227, 229,
	232, 234, -2, 868, 869, 254, 256, 258, 260, 262,
	-2, 0, 900, 900, 900, 0, 0, 869, 867, 0,
	370, 0, 372, 0, 501, 375, 376, 428, 429, 1108,
	0, 0, 0, 0, 0, 1233, 1186, -2, -2, 1218,
	1220, 1723, 1744, 0, 1222, 1223, 0, 1225, 1229, 1230,
	0, 1393, 1462, 1457, 1422, 1423, 1424, 1425, 0, 0,
	1428, 0, 1430, 1431, 1432, 1297, 1244, -2, -2, -2,
	1466, 1022, 1023, 1024, 1025, 1026, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1756, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 0, 1712, 1729, 1730, 1735, 1737, 1731,
	1720, 1267, -2, -2, 1536, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1724, 1725, -2, 1727, -2, -2, 1736, -2,
	1740, 1741, -2, -2, 1746, -2, -2, -2, 1750, 1751,
	-2, 1484, 1075, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1769, 1770, 1771, 1772, 1773, 1774, 799,
	777, 790, 799, 779, 780, 781, 782, 783, 788, 789,
	792, 0, 784, 785, 786, 886, 1626, 889, 672, 887,
	871, 873, 0, 875, 0, 0, 0, 880, 903, 901,
	0, 939, 884, 885, 895, 954, 0, 0, 974, 974,
	965, 0, 996, 0, 1467, 0, 0, 0, 0, 0,
	-2, 1470, 1756, 1767, 1768, 2, 79, 0, 1729, 996,
	81, 0, 1729, 84, 0, 1729, 0, -2, 88, 0,
	1729, 171, 172, 1480, 1481, 1485, 1486, 1487, 1488, 91,
	0, 1446, 99, 0, 1729, 1413, 0, 1443, 1489, 1490,
	1491, 1492, 1493, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 0, 1440, 0, 0, 597, 1410,
	1415, 598, 1420, 0, 194, 195, 196, 197, 198, 1729,
	200, 201, 0, 203, 204, 1729, 206, 207, 0, 209,
	0, 0, 0, 0, 0, 230, 672, 1729, 0, 237,
	1451, 0, 696, 1729, 694, 1454, -2, 1729, 716, 719,
	1729, 721, 672, 723, 1453, -2, 1477, 893, 1729, 813,
	346, 348, 0, 240, 0, 826, 0, 828, 0, 847,
	1002, 153, 1729, 265, 284, 153, 1729, 268, 153, 1729,
	271, 153, 1729, 274, 1408, 153, 1729, 277, 278, 1729,
	280, 173, 281, 1729, 283, 341, 0, 0, -2, 335,
	1456, -2, 0, 333, 292, 294, 297, 299, 301, 303,
	305, 307, 309, 311, 314, 316, 319, 321, 324, 326,
	-2, 0, 163, 164, 165, 0, 0, 0, 0, 603,
	604, 0, 0, 0, 764, 765, 0, 0, 0, 389,
	0, 0, 0, 0, 796, 386, 0, 405, 0, 407,
	1719, -2, -2, 411, 800, 804, 805, 806, 0, 0,
	0, 0, 418, 0, 0, 0, 422, 425, 0, 498,
	499, 0, 0, 509, 510, 511, 512, 513, 0, 516,
	537, 552, 0, 0, 520, 522, 602, 524, 0, 0,
	526, 0, 528, 0, 530, 0, 532, 0, 534, 536,
	538, 553, 540, 0, 0, 0, 551, 0, 557, 0,
	560, 561, 562, 0, 564, 565, 566, 0, 0, 0,
	574, 576, 0, 586, 0, 505, 506, 153, 1000, -2,
	0, 863, 917, 918, 0, 0, 0, 0, 898, 899,
	0, 0, 0, 859, 860, 371, 0, 374, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 1332, 1333, 1336, 1337,
	1334, 1335, 1338, 1339, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 1342, 1343, 0, 0, 1345, 0, 1347, 0,
	0, 0, 0, 0, 0, 1165, 1167, 1401, 0, 0,
	1344, 1113, 1114, 1115, 1150, 1151, 0, 1219, 1398, 1397,
	1221, 0, 1350, -2, 1351, 1233, 0, 0, 1224, 1437,
	1231, 1232, 1350, 0, 1392, 0, 0, 1427, 0, 1105,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 1073, 1080, 1077,
	1076, 1061, 0, 1060, 0, 0, 1058, 0, 0, 0,
	1062, 0, 1373, -2, 0, 0, 0, 0, 0, 0,
	776, -2, 778, 0, 794, 0, 888, 0, 0, 943,
	1402, 1406, 1407, 943, 943, 0, 0, 1351, 0, 0,
	0, 0, 993, 993, 993, 991, 968, 0, 974, 0,
	-2, 0, 974, 974, 0, 984, 0, 984, -2, 965,
	0, 0, 997, 998, 0, 0, 100, 759, 119, 0,
	759, 759, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 115, 107, 108, 0, 0, 85, 697, 0, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 117, 0, 142,
	144, 0, 0, 0, 0, 987, 596, 0, 0, 1471,
	1418, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	1457, 1458, 611, 0, 0, 0, 0, 692, 695, 0,
	714, 0, 892, 0, 0, 0, 0, 1729, 728, 1442,
	1476, 0, 1729, 815, 0, 1006, 0, 829, 0, 0,
	1003, 0, 263, 0, 151, 152, 0, 266, 0, 269,
	0, 272, 0, 0, 275, 0, 0, 0, 0, 0,
	895, 0, 0, 185, 0, 351, 361, 0, 0, 895,
	0, 1353, 1014, 1017, 1018, 1019, 1105, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1081, 1075, 1091, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1071, 0,
	1046, 1046, 1046, 1063, 1064, 1082, 1083, 1085, 1087, 1089,
	1015, 1016, 1081, 1081, 1078, 1079, 185, 0, 355, 0,
	987, 391, 987, 393, 0, 582, 0, 0, 0, 0,
	-2, 413, 0, 802, 0, 807, 437, 438, 439, 809,
	810, 417, 440, 441, 442, 443, 444, 445, 0, 689,
	0, 691, 1433, 0, 414, 430, 415, 420, 0, 426,
	0, 0, 514, 515, 517, 518, 519, 523, 0, 590,
	1641, 600, 525, 527, 529, 531, 533, 895, 542, 0,
	544, 895, 555, 558, 563, 567, 568, 569, 570, 571,
	572, 0, 0, 0, 712, 0, 866, 915, 916, 921,
	925, 926, 929, 932, 933, 923, 1108, 881, 882, 883,
	909, 910, 742, 0, 0, 373, 1109, 1010, 1011, 1065,
	1066, 1067, 1068, 1069, 1110, 1111, 1439, 0, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, -2, -2,
	-2, -2, -2, -2, -2, -2, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, -2, -2, -2,
	1148, 1149, -2, 1346, 1348, 0, 1401, 0, -2, 0,
	-2, -2, -2, -2, 1162, 0, 1164, 1169, 1171, 1173,
	0, 0, 0, 0, 1400, 1183, 1384, 0, 0, 1325,
	1326, 1327, 1168, 0, 0, 1399, 1396, 0, 0, 1349,
	1228, 0, 0, 0, 0, 1357, 1391, 1387, 0, 1459,
	1465, 1235, 906, 0, 0, 0, 0, 1242, 0, 1438,
	1092, 1093, 1094, 1095, 1096, 1097, 1106, 1307, 0, 0,
	0, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 1360, -2, -2, -2, -2, -2, -2,
	-2, 0, 1281, 0, 0, 1293, 0, 1295, 0, 1283,
	1351, 1370, 0, 0, 1189, 0, 0, 0, 1233, 0,
	1286, 1351, 1378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 0, 1383, 793, 890, 0, 0, 1006,
	0, 0, 0, 1405, 1006, 1006, 0, 938, 0, 0,
	0, 0, 0, 0, 988, 992, 989, 990, 0, 0,
	974, 984, 951, 0, 0, 1441, 0, 959, -2, 984,
	984, 0, 961, 983, 0, 672, 973, 963, -2, 0,
	-2, 0, 0, 0, 0, 758, 121, 1729, 0, 155,
	0, 0, 662, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 698, 699, 701, 707, 709, 0, 703,
	1436, 0, 704, 0, 706, 708, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 1412, 0, 0, 176, 986, 0, 1411, 1421,
	0, 199, 202, 205, 208, 186, 671, 0, 0, 0,
	0, 610, -2, 612, 614, 615, 616, 617, 1574, 1477,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 823, 0, 908, 0,
	845, 831, 0, 0, 0, 845, 849, 850, 852, 853,
	0, 0, 1004, 285, 153, 153, 153, 1409, 153, 153,
	174, 279, 282, 343, 288, 336, 895, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 0, 339, 0, 1007,
	1009, 0, 1020, 0, 1073, 0, 160, 185, 0, 0,
	390, 395, 0, 583, 0, 0, 406, 0, 801, 808,
	0, 434, 0, 436, 690, 1435, 1434, 0, 427, 507,
	0, 601, 599, 541, 545, 895, 547, 0, 584, 585,
	589, 1001, 0, 927, 0, 924, 930, 931, 0, 912,
	740, 741, 0, 0, 0, -2, -2, 0, 0, 0,
	1184, -2, 1163, 1166, 1170, 1172, 1174, 0, 0, 0,
	0, 0, 0, 0, 1185, 1394, 1397, 1323, 0, 0,
	1352, 1355, 1356, 0, 0, 1388, 0, 0, 0, 0,
	0, 905, 906, 906, 906, 1241, 0, 0, 0, 0,
	0, 0, 1243, 0, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 1266, 1044, 0, 1278, 0,
	1280, 1070, 1292, 1294, 1282, 0, 0, 1284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1192, 1193, 1194, 1285, 1376, 1377, 0, 0, 1084,
	1086, 1088, 1090, 0, 0, 0, 0, 1291, 0, 1382,
	895, 940, 935, 1403, 987, 942, 944, 1404, 1444, 935,
	935, 0, 1352, 976, 0, 978, 0, 0, 0, 980,
	0, 969, 0, 971, 984, 956, 0, 0, 949, 0,
	948, 974, 0, 960, 962, 964, 1459, 672, 982, 0,
	999, 0, 120, 746, 0, 0, 1445, 0, 123, 1729,
	132, 0, 639, 0, 0, 0, 0, 0, 761, 133,
	1729, 153, 1729, 153, 134, 137, 0, 141, 139, 0,
	0, 630, 101, 759, 104, 0, 0, 752, 0, 702,
	705, 711, 86, 0, 754, 744, 0, 0, 743, 143,
	105, 0, 0, 756, 103, 0, 0, 0, 185, 0,
	0, 1417, 1472, 210, 212, 213, 211, 619, 0, 1477,
	0, 1477, 0, 1449, 608, 672, 0, 987, 696, 717,
	-2, 720, 722, 730, 0, 0, 0, 819, 823, 0,
	822, 893, 920, 907, 1005, 824, 845, 0, 0, 0,
	834, 836, 833, 830, 827, 1006, 0, 0, 0, 0,
	0, 264, 267, 270, 273, 276, 289, 0, 183, 1608,
	181, 178, 180, 350, 0, 0, 0, 1354, 0, 1012,
	0, 0, 0, 0, 161, 354, 0, 392, 0, 0,
	0, 0, 0, 0, 403, 404, -2, 432, 433, 435,
	431, 0, 543, 546, 554, 0, 0, 911, 742, 0,
	1112, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1385, 0, 1396, 1226, 1227, 1234, 1324, 1358, 1386, 1390,
	0, 1460, 1464, 1236, 0, 0, 0, 0, 1429, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 0, 1305, 1306, 1310,
	1452, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	0, 0, 1359, 1369, 1371, 1190, 1191, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, -2, -2, -2,
	1208, 1209, 1210, -2, -2, -2, 0, 0, 0, 1372,
	1374, 1375, 1379, 1380, 0, 1288, 1289, 1290, 1381, 0,
	937, 0, 941, 0, 937, 937, 902, 977, 0, 995,
	979, 954, 970, 0, 967, 952, 0, 953, 0, 984,
	974, 0, 981, 966, -2, 0, 0, 0, 0, 154,
	637, 661, 0, 0, 733, 739, 739, 0, 1447, 1245,
	1246, 0, 0, 0, 125, 0, 0, 0, 0, 130,
	0, 136, 140, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 111, 114, 0, 0, 110, 0,
	158, 0, 0, 627, 0, 613, 0, 0, 0, 0,
	611, 0, 236, 185, 693, 715, 0, 0, 0, 0,
	0, 821, 823, 0, 814, 815, 845, 919, 825, 843,
	844, 842, 0, 0, 0, 908, 851, 848, 854, 855,
	0, 169, 0, 0, 0, 0, 352, 0, 0, 0,
	1013, 1021, 0, 1074, 356, 0, 577, 578, 625, 0,
	581, 508, 922, 928, 913, 742, 0, 0, -2, 0,
	1177, -2, -2, 1395, 1389, 0, 1426, 906, 1237, 1239,
	1240, 1107, 1312, 1309, 0, 1296, 1257, 1258, 0, 0,
	1261, 1263, 1264, 1265, 1045, 1368, 0, 0, 0, 0,
	1287, 891, 1301, 0, 0, 945, 1301, 1301, 0, 974,
	972, 950, 946, 0, 957, 984, 1460, 0, 748, 750,
	122, 0, 638, 0, 641, 0, 0, 0, 0, 648,
	649, 0, 0, 0, 0, 0, 663, 670, 0, 742,
	0, 742, 0, 0, 0, 0, 0, 127, 146, 0,
	0, 760, 0, 153, 153, 0, 0, 747, 0, 0,
	0, 0, 753, 755, 745, 0, 757, 0, 175, 0,
	606, 626, 0, 0, 0, 0, 0, 0, 0, 238,
	0, 729, 0, 0, 0, 811, 823, 0, 816, 817,
	239, 0, 0, 0, 832, 835, 837, 920, 0, 182,
	0, 177, 179, 0, 0, 1008, 1072, 394, 396, 0,
	0, 402, 579, 624, 0, 0, 914, -2, -2, 1178,
	1461, 1463, 0, 908, 0, 1298, 0, 0, -2, 0,
	0, 0, 877, 0, 936, 934, 878, 879, 994, 984,
	0, 958, 124, 0, 642, 643, 1448, 645, 0, 647,
	650, 0, 652, 1479, 0, 656, 619, 0, 667, 668,
	734, 735, 738, 736, 739, 906, 665, 0, 126, 128,
	145, 148, 129, 135, 0, 0, 0, 0, 906, 0,
	0, 0, 985, 0, 0, 670, 0, 660, 619, 609,
	0, 730, 726, 0, 0, 818, 819, 0, 0, 0,
	845, 856, 184, 0, 0, 0, 398, 0, 400, 0,
	623, 0, 1238, 1315, 0, 1259, 1260, -2, 0, 1216,
	1300, 1302, 0, 955, 947, 640, 644, 0, 0, 676,
	0, 0, 627, 0, 742, 0, 0, 150, 0, 0,
	0, 749, 751, 0, 0, 0, 113, 0, 659, 619,
	670, 627, 670, 0, 0, 820, 821, 0, 839, 1006,
	841, 846, 0, 0, 397, 0, 0, 580, 0, 0,
	0, 1311, 1217, 0, 0, 0, 651, 681, 0, 0,
	0, 664, 0, 737, 1236, 672, 131, 0, 147, 0,
	631, 0, 0, 634, 0, 0, 0, 0, 0, 627,
	619, 607, 619, 0, 0, 812, 0, 840, 185, 185,
	399, 401, 1308, 1313, 1316, -2, 1695, 1526, 0, 1314,
	1303, 1304, 0, 653, 677, 678, 0, 673, 674, 675,
	1478, 654, 655, 669, 676, 149, 628, 0, 0, 629,
	0, 0, 116, 118, 0, 657, 627, 627, 0, 727,
	1006, 166, 167, 0, 1318, 1319, 1320, 1321, 1322, 646,
	679, 0, 680, 0, 0, 0, 681, 632, 0, 635,
	0, 622, 658, 724, 670, 838, 0, 682, 0, 685,
	686, 0, 683, 666, 0, 0, 618, 620, 621, 619,
	1317, 684, 687, 688, 0, 0, 627, 627, 0, 725,
	633, 0, 0, 0, 627, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1156
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1212
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1222
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1244
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1255
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1262
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1272
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1292
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1337
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1382
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1427
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1437
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.str = ""
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1513
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1522
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1532
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1541
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1542
		{
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1569
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1599
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.str = "CSV"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1607
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1611
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1645
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1648
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1665
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1668
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1672
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1676
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1737
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1741
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1753
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1754
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1755
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1756
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1774
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1798
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1806
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1848
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1855
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1860
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1867
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1880
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1883
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1912
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1944
		{
			return helpWith(sqllex, "DELETE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "DROP")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1984
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1991
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2060
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2067
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2101
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2135
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "DELETE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2152
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "INSERT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2160
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2175
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2176
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2180
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2201
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2205
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2219
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2225
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2231
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2235
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2253
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2257
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2260
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2291
		{
			return helpWith(sqllex, "GRANT")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2319
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2322
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2327
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2331
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2360
		{
			return helpWith(sqllex, "RESET")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2361
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2373
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2376
		{
			return helpWith(sqllex, "RESET")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2387
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			return helpWith(sqllex, "USE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2407
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2408
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2409
		{
			return helpWith(sqllex, "USE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return unimplemented(sqllex, "set local")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2426
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2444
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2462
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2470
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2478
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2528
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2550
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2554
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2579
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2584
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2588
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2598
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2614
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2621
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2627
		{
			return unimplemented(sqllex, "set from current")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2628
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2636
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2641
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2669
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2693
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2697
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2701
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = tree.Low
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = tree.Normal
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2715
		{
			sqlVAL.union.val = tree.High
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2726
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2739
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2801
		{
			sqlVAL.str = "client_encoding"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			sqlVAL.str = "timezone"
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2826
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2837
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2845
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2873
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2886
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2889
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2897
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2900
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2975
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3008
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3012
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3016
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3023
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3031
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3059
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3092
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3104
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3109
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3169
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3181
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3186
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3193
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3201
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3208
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3225
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3229
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3232
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3240
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3247
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3252
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3372
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3376
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3380
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3419
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3423
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3428
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3432
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3441
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3448
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3452
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3476
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3524
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3563
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3569
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3585
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3606
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3611
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3616
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3629
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3636
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3649
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3662
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3703
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3718
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3732
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3736
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3790
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3802
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3806
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3823
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3845
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3857
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3862
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3868
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3885
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3923
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3929
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3933
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3938
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3940
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3941
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3952
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3956
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3964
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4032
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4040
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4048
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4055
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4059
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4060
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4062
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4063
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4064
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4067
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4069
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4071
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4074
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4076
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4077
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4079
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4088
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4106
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4110
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4114
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4146
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4164
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4177
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4191
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4200
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4209
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4214
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4218
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4250
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4251
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4254
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4255
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = tree.Descending
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4280
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4306
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = true
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.union.val = false
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = false
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4363
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4382
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4385
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4401
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4402
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4421
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4423
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4436
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4439
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4448
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4453
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4454
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4455
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4463
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4470
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4473
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4474
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4478
		{
			sqlVAL.str = ""
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4482
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4490
		{
			sqlVAL.str = ""
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4500
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4516
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4520
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4533
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4535
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4539
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4547
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 811:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4599
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4603
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.str = ""
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4642
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4643
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4662
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4669
		{
			return helpWith(sqllex, "INSERT")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4687
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4691
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4699
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4713
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4743
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4751
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4757
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4761
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4769
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4778
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 846:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4806
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4810
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4811
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4815
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4832
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4835
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4839
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4882
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4888
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4892
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4907
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4911
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4915
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4919
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4923
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4934
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4969
		{
			return helpWith(sqllex, "SELECT")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4970
		{
			return helpWith(sqllex, "VALUES")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4971
		{
			return helpWith(sqllex, "TABLE")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5020
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5032
		{
			return helpWith(sqllex, "SELECT")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5045
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5069
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5076
		{
			return helpWith(sqllex, "TABLE")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5091
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5092
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5096
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5106
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5114
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5115
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5119
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5122
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5125
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5126
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5130
		{
			sqlVAL.union.val = true
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = false
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5138
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
			sqlVAL.union.val = true
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5150
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5155
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5156
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5160
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5168
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5198
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5207
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5227
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5231
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5240
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5246
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5260
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5273
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5277
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5283
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5284
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5287
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5288
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5315
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5319
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5338
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5341
		{
			return helpWith(sqllex, "VALUES")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5343
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5355
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5358
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5380
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5397
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5428
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5432
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5459
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5480
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5481
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5482
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5487
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5492
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5494
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5498
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = nil
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5524
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = true
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5543
		{
			sqlVAL.union.val = false
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5583
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5600
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5613
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5619
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5627
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5631
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5637
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5638
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5660
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5686
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5712
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5726
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5735
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5750
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5757
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5776
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5785
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5811
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5831
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5835
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5839
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5843
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5847
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5851
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5855
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5859
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5863
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5867
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5887
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5891
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5895
		{
			sqlVAL.union.val = nil
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5926
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5930
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5942
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5946
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5978
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6014
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6024
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6030
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6041
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6073
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6077
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6083
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6108
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6112
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6120
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = tree.Year
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = tree.Month
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = tree.Day
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6151
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = tree.Month
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = nil
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6191
		{
			sqlVAL.union.val = tree.Second
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6194
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6229
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6258
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6274
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6278
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6523
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6734
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6756
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6769
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6773
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6778
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6796
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6797
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6810
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6821
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6837
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6838
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6842
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6862
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6908
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6930
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6935
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6940
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6945
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6955
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6960
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6965
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6974
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6975
		{
			return unimplemented(sqllex, "treat")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7006
		{
			return unimplemented(sqllex, "within group")
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7007
		{
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7042
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7050
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7058
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.str = ""
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7104
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7105
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7106
		{
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7109
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7110
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7116
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7117
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7118
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7119
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7120
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = tree.Any
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.Some
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = tree.All
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Div
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7161
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.LT
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7165
		{
			sqlVAL.union.val = tree.GT
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = tree.LE
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = tree.GE
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7169
		{
			sqlVAL.union.val = tree.NE
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7173
		{
			sqlVAL.union.val = tree.Like
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7175
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7234
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7238
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7302
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7318
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7431
		{
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7432
		{
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7436
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7463
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7498
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7559
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7563
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7566
		{
			return unimplemented(sqllex, "func const")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7575
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7605
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7616
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7626
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7818
		{
			sqlVAL.str = ""
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7824
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7828
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
