// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:588
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9607

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1047,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	181, 886,
	198, 886,
	213, 248,
	291, 248,
	299, 726,
	326, 248,
	335, 726,
	372, 726,
	396, 248,
	420, 726,
	-2, 0,
	-1, 74,
	213, 252,
	-2, 0,
	-1, 75,
	107, 1047,
	187, 1047,
	406, 1047,
	407, 1047,
	-2, 0,
	-1, 87,
	120, 1021,
	136, 1021,
	195, 1021,
	224, 1021,
	255, 1021,
	265, 1021,
	401, 1021,
	-2, 1008,
	-1, 117,
	126, 647,
	212, 647,
	293, 627,
	344, 627,
	389, 647,
	-2, 0,
	-1, 118,
	4, 1049,
	21, 1049,
	22, 1049,
	23, 1049,
	24, 1049,
	25, 1049,
	27, 1049,
	32, 1049,
	37, 1049,
	38, 1049,
	39, 1049,
	40, 1049,
	41, 1049,
	42, 1049,
	43, 1049,
	44, 1049,
	45, 1049,
	46, 1049,
	47, 1049,
	49, 1049,
	50, 1049,
	51, 1049,
	52, 1049,
	53, 1049,
	54, 1049,
	57, 1049,
	58, 1049,
	59, 1049,
	60, 1049,
	62, 1049,
	63, 1049,
	67, 1049,
	68, 1049,
	69, 1049,
	70, 1049,
	71, 1049,
	72, 1049,
	74, 1049,
	75, 1049,
	76, 1049,
	77, 1049,
	79, 1049,
	81, 1049,
	82, 1049,
	83, 1049,
	86, 1049,
	87, 1049,
	95, 1049,
	96, 1049,
	97, 1049,
	98, 1049,
	99, 1049,
	100, 1049,
	101, 1049,
	102, 1049,
	104, 1049,
	106, 1049,
	107, 1049,
	109, 1049,
	112, 1049,
	113, 1049,
	114, 1049,
	116, 1049,
	118, 1049,
	119, 1049,
	121, 1049,
	122, 1049,
	123, 1049,
	124, 1049,
	125, 1049,
	126, 1049,
	127, 1049,
	128, 1049,
	129, 1049,
	130, 1049,
	131, 1049,
	132, 1049,
	133, 1049,
	135, 1049,
	141, 1049,
	142, 1049,
	143, 1049,
	144, 1049,
	145, 1049,
	146, 1049,
	148, 1049,
	150, 1049,
	154, 1049,
	155, 1049,
	157, 1049,
	158, 1049,
	160, 1049,
	161, 1049,
	163, 1049,
	164, 1049,
	165, 1049,
	166, 1049,
	167, 1049,
	168, 1049,
	169, 1049,
	170, 1049,
	172, 1049,
	173, 1049,
	175, 1049,
	176, 1049,
	177, 1049,
	181, 1049,
	182, 1049,
	183, 1049,
	184, 1049,
	187, 1049,
	188, 1049,
	189, 1049,
	190, 1049,
	191, 1049,
	192, 1049,
	193, 1049,
	194, 1049,
	196, 1049,
	198, 1049,
	200, 1049,
	202, 1049,
	203, 1049,
	204, 1049,
	206, 1049,
	207, 1049,
	210, 1049,
	211, 1049,
	212, 1049,
	213, 1049,
	215, 1049,
	216, 1049,
	218, 1049,
	219, 1049,
	221, 1049,
	222, 1049,
	225, 1049,
	226, 1049,
	229, 1049,
	230, 1049,
	232, 1049,
	233, 1049,
	234, 1049,
	235, 1049,
	236, 1049,
	237, 1049,
	238, 1049,
	239, 1049,
	240, 1049,
	241, 1049,
	243, 1049,
	244, 1049,
	245, 1049,
	246, 1049,
	248, 1049,
	251, 1049,
	252, 1049,
	253, 1049,
	254, 1049,
	256, 1049,
	257, 1049,
	258, 1049,
	260, 1049,
	261, 1049,
	262, 1049,
	263, 1049,
	266, 1049,
	267, 1049,
	268, 1049,
	270, 1049,
	272, 1049,
	273, 1049,
	274, 1049,
	275, 1049,
	276, 1049,
	277, 1049,
	278, 1049,
	279, 1049,
	280, 1049,
	281, 1049,
	283, 1049,
	284, 1049,
	285, 1049,
	286, 1049,
	287, 1049,
	288, 1049,
	290, 1049,
	292, 1049,
	293, 1049,
	294, 1049,
	295, 1049,
	296, 1049,
	297, 1049,
	298, 1049,
	299, 1049,
	300, 1049,
	302, 1049,
	303, 1049,
	304, 1049,
	305, 1049,
	306, 1049,
	308, 1049,
	309, 1049,
	310, 1049,
	311, 1049,
	312, 1049,
	313, 1049,
	314, 1049,
	315, 1049,
	317, 1049,
	319, 1049,
	320, 1049,
	321, 1049,
	322, 1049,
	323, 1049,
	324, 1049,
	326, 1049,
	327, 1049,
	328, 1049,
	329, 1049,
	330, 1049,
	331, 1049,
	332, 1049,
	333, 1049,
	335, 1049,
	336, 1049,
	337, 1049,
	338, 1049,
	339, 1049,
	340, 1049,
	341, 1049,
	342, 1049,
	343, 1049,
	344, 1049,
	346, 1049,
	347, 1049,
	348, 1049,
	349, 1049,
	351, 1049,
	352, 1049,
	353, 1049,
	354, 1049,
	356, 1049,
	357, 1049,
	358, 1049,
	359, 1049,
	360, 1049,
	361, 1049,
	362, 1049,
	363, 1049,
	364, 1049,
	365, 1049,
	366, 1049,
	367, 1049,
	369, 1049,
	370, 1049,
	371, 1049,
	373, 1049,
	374, 1049,
	375, 1049,
	376, 1049,
	377, 1049,
	378, 1049,
	379, 1049,
	381, 1049,
	382, 1049,
	383, 1049,
	384, 1049,
	385, 1049,
	387, 1049,
	389, 1049,
	390, 1049,
	391, 1049,
	392, 1049,
	393, 1049,
	395, 1049,
	396, 1049,
	397, 1049,
	399, 1049,
	400, 1049,
	403, 1049,
	404, 1049,
	405, 1049,
	406, 1049,
	407, 1049,
	408, 1049,
	410, 1049,
	412, 1049,
	413, 1049,
	414, 1049,
	415, 1049,
	416, 1049,
	417, 1049,
	418, 1049,
	420, 1049,
	421, 1049,
	422, 1049,
	427, 1049,
	428, 1049,
	429, 1049,
	430, 1049,
	431, 1049,
	432, 1049,
	-2, 0,
	-1, 119,
	1, 939,
	202, 939,
	290, 939,
	297, 939,
	435, 939,
	458, 939,
	-2, 0,
	-1, 121,
	1, 939,
	458, 939,
	-2, 0,
	-1, 122,
	1, 939,
	458, 939,
	-2, 0,
	-1, 123,
	1, 943,
	458, 943,
	-2, 0,
	-1, 148,
	120, 1020,
	136, 1020,
	195, 1020,
	224, 1020,
	255, 1020,
	265, 1020,
	401, 1020,
	-2, 1017,
	-1, 181,
	4, 1056,
	5, 1056,
	6, 1056,
	7, 1056,
	8, 1056,
	9, 1056,
	10, 1056,
	21, 1056,
	22, 1056,
	23, 1056,
	24, 1056,
	25, 1056,
	27, 1056,
	32, 1056,
	33, 1056,
	37, 1056,
	38, 1056,
	39, 1056,
	40, 1056,
	41, 1056,
	42, 1056,
	43, 1056,
	44, 1056,
	45, 1056,
	46, 1056,
	47, 1056,
	49, 1056,
	50, 1056,
	51, 1056,
	52, 1056,
	53, 1056,
	54, 1056,
	55, 1056,
	56, 1056,
	57, 1056,
	58, 1056,
	59, 1056,
	60, 1056,
	62, 1056,
	63, 1056,
	65, 1056,
	67, 1056,
	68, 1056,
	69, 1056,
	70, 1056,
	71, 1056,
	72, 1056,
	74, 1056,
	75, 1056,
	76, 1056,
	77, 1056,
	79, 1056,
	81, 1056,
	82, 1056,
	83, 1056,
	85, 1056,
	86, 1056,
	87, 1056,
	88, 1056,
	89, 1056,
	90, 1056,
	91, 1056,
	92, 1056,
	93, 1056,
	94, 1056,
	95, 1056,
	96, 1056,
	97, 1056,
	98, 1056,
	99, 1056,
	100, 1056,
	101, 1056,
	102, 1056,
	103, 1056,
	104, 1056,
	106, 1056,
	107, 1056,
	109, 1056,
	112, 1056,
	113, 1056,
	114, 1056,
	116, 1056,
	118, 1056,
	119, 1056,
	121, 1056,
	122, 1056,
	123, 1056,
	124, 1056,
	125, 1056,
	126, 1056,
	127, 1056,
	128, 1056,
	129, 1056,
	130, 1056,
	131, 1056,
	132, 1056,
	133, 1056,
	134, 1056,
	135, 1056,
	141, 1056,
	142, 1056,
	143, 1056,
	144, 1056,
	145, 1056,
	146, 1056,
	148, 1056,
	150, 1056,
	153, 1056,
	154, 1056,
	155, 1056,
	157, 1056,
	158, 1056,
	160, 1056,
	161, 1056,
	163, 1056,
	164, 1056,
	165, 1056,
	166, 1056,
	167, 1056,
	168, 1056,
	169, 1056,
	170, 1056,
	171, 1056,
	172, 1056,
	173, 1056,
	175, 1056,
	176, 1056,
	177, 1056,
	181, 1056,
	182, 1056,
	183, 1056,
	184, 1056,
	186, 1056,
	187, 1056,
	188, 1056,
	189, 1056,
	190, 1056,
	191, 1056,
	192, 1056,
	193, 1056,
	194, 1056,
	196, 1056,
	198, 1056,
	199, 1056,
	200, 1056,
	201, 1056,
	202, 1056,
	203, 1056,
	204, 1056,
	205, 1056,
	206, 1056,
	207, 1056,
	210, 1056,
	211, 1056,
	212, 1056,
	213, 1056,
	215, 1056,
	216, 1056,
	218, 1056,
	219, 1056,
	220, 1056,
	221, 1056,
	222, 1056,
	223, 1056,
	225, 1056,
	226, 1056,
	229, 1056,
	230, 1056,
	232, 1056,
	233, 1056,
	234, 1056,
	235, 1056,
	236, 1056,
	237, 1056,
	238, 1056,
	239, 1056,
	240, 1056,
	241, 1056,
	242, 1056,
	243, 1056,
	244, 1056,
	245, 1056,
	246, 1056,
	247, 1056,
	248, 1056,
	249, 1056,
	250, 1056,
	251, 1056,
	252, 1056,
	253, 1056,
	254, 1056,
	256, 1056,
	257, 1056,
	258, 1056,
	261, 1056,
	262, 1056,
	263, 1056,
	266, 1056,
	267, 1056,
	268, 1056,
	269, 1056,
	270, 1056,
	271, 1056,
	272, 1056,
	273, 1056,
	274, 1056,
	275, 1056,
	276, 1056,
	277, 1056,
	278, 1056,
	279, 1056,
	280, 1056,
	281, 1056,
	283, 1056,
	284, 1056,
	285, 1056,
	286, 1056,
	287, 1056,
	288, 1056,
	290, 1056,
	292, 1056,
	293, 1056,
	294, 1056,
	295, 1056,
	296, 1056,
	297, 1056,
	298, 1056,
	299, 1056,
	300, 1056,
	302, 1056,
	303, 1056,
	304, 1056,
	305, 1056,
	306, 1056,
	308, 1056,
	309, 1056,
	310, 1056,
	311, 1056,
	312, 1056,
	313, 1056,
	314, 1056,
	315, 1056,
	317, 1056,
	318, 1056,
	319, 1056,
	320, 1056,
	321, 1056,
	322, 1056,
	323, 1056,
	324, 1056,
	326, 1056,
	327, 1056,
	328, 1056,
	329, 1056,
	330, 1056,
	331, 1056,
	332, 1056,
	333, 1056,
	335, 1056,
	336, 1056,
	337, 1056,
	338, 1056,
	339, 1056,
	340, 1056,
	341, 1056,
	342, 1056,
	343, 1056,
	344, 1056,
	345, 1056,
	346, 1056,
	347, 1056,
	348, 1056,
	349, 1056,
	350, 1056,
	351, 1056,
	352, 1056,
	353, 1056,
	354, 1056,
	356, 1056,
	357, 1056,
	358, 1056,
	359, 1056,
	360, 1056,
	361, 1056,
	362, 1056,
	363, 1056,
	364, 1056,
	365, 1056,
	366, 1056,
	367, 1056,
	369, 1056,
	370, 1056,
	371, 1056,
	373, 1056,
	374, 1056,
	375, 1056,
	376, 1056,
	377, 1056,
	378, 1056,
	379, 1056,
	381, 1056,
	382, 1056,
	383, 1056,
	384, 1056,
	385, 1056,
	387, 1056,
	389, 1056,
	390, 1056,
	391, 1056,
	392, 1056,
	393, 1056,
	394, 1056,
	395, 1056,
	396, 1056,
	397, 1056,
	399, 1056,
	400, 1056,
	402, 1056,
	403, 1056,
	404, 1056,
	405, 1056,
	406, 1056,
	407, 1056,
	408, 1056,
	409, 1056,
	410, 1056,
	412, 1056,
	413, 1056,
	414, 1056,
	415, 1056,
	416, 1056,
	417, 1056,
	418, 1056,
	420, 1056,
	421, 1056,
	422, 1056,
	427, 1056,
	428, 1056,
	429, 1056,
	430, 1056,
	431, 1056,
	432, 1056,
	433, 1056,
	441, 1056,
	446, 1056,
	447, 1056,
	448, 1056,
	455, 1056,
	459, 1056,
	-2, 0,
	-1, 552,
	152, 1729,
	386, 1729,
	438, 1729,
	457, 1729,
	-2, 0,
	-1, 553,
	152, 1807,
	386, 1807,
	438, 1807,
	457, 1807,
	-2, 0,
	-1, 554,
	152, 1718,
	386, 1718,
	438, 1718,
	457, 1718,
	-2, 0,
	-1, 556,
	152, 1896,
	386, 1896,
	438, 1896,
	457, 1896,
	-2, 0,
	-1, 558,
	152, 1924,
	386, 1924,
	438, 1924,
	457, 1924,
	-2, 0,
	-1, 565,
	152, 1817,
	386, 1817,
	438, 1817,
	457, 1817,
	-2, 499,
	-1, 582,
	457, 1677,
	460, 1677,
	-2, 695,
	-1, 583,
	457, 1679,
	460, 1679,
	-2, 696,
	-1, 584,
	457, 1678,
	460, 1678,
	-2, 697,
	-1, 585,
	460, 1624,
	-2, 698,
	-1, 732,
	293, 628,
	344, 628,
	-2, 0,
	-1, 733,
	293, 627,
	344, 627,
	-2, 579,
	-1, 736,
	1, 657,
	454, 657,
	456, 657,
	458, 657,
	-2, 0,
	-1, 737,
	1, 694,
	149, 694,
	454, 694,
	456, 694,
	458, 694,
	-2, 0,
	-1, 745,
	1, 631,
	454, 631,
	456, 631,
	458, 631,
	-2, 0,
	-1, 748,
	1, 657,
	454, 657,
	456, 657,
	458, 657,
	-2, 0,
	-1, 749,
	1, 659,
	454, 659,
	456, 659,
	458, 659,
	-2, 0,
	-1, 750,
	1, 662,
	454, 662,
	456, 662,
	458, 662,
	-2, 0,
	-1, 754,
	1, 676,
	454, 676,
	456, 676,
	458, 676,
	-2, 0,
	-1, 755,
	1, 678,
	454, 678,
	456, 678,
	458, 678,
	-2, 0,
	-1, 798,
	136, 1058,
	224, 1058,
	255, 1058,
	-2, 1017,
	-1, 813,
	136, 1057,
	224, 1057,
	255, 1057,
	-2, 1017,
	-1, 837,
	457, 1676,
	-2, 507,
	-1, 866,
	455, 1668,
	-2, 1659,
	-1, 872,
	5, 1193,
	-2, 1709,
	-1, 873,
	5, 1194,
	-2, 1713,
	-1, 874,
	5, 1195,
	-2, 1712,
	-1, 875,
	5, 1196,
	-2, 1921,
	-1, 876,
	5, 1197,
	-2, 1819,
	-1, 877,
	5, 1198,
	-2, 1888,
	-1, 878,
	5, 1199,
	-2, 1890,
	-1, 879,
	5, 1200,
	-2, 1901,
	-1, 880,
	5, 1201,
	-2, 1891,
	-1, 881,
	5, 1202,
	-2, 1892,
	-1, 882,
	5, 1203,
	-2, 1708,
	-1, 883,
	5, 1204,
	-2, 1937,
	-1, 884,
	5, 1205,
	-2, 1782,
	-1, 885,
	5, 1206,
	-2, 1827,
	-1, 886,
	5, 1207,
	-2, 1829,
	-1, 887,
	5, 1208,
	-2, 1786,
	-1, 888,
	5, 1209,
	455, 1686,
	-2, 1677,
	-1, 889,
	5, 1265,
	455, 1265,
	-2, 1972,
	-1, 894,
	455, 1687,
	-2, 1678,
	-1, 896,
	5, 1213,
	-2, 1970,
	-1, 897,
	5, 1214,
	-2, 1971,
	-1, 898,
	5, 1215,
	-2, 1785,
	-1, 899,
	5, 1216,
	-2, 1983,
	-1, 900,
	5, 1217,
	-2, 1787,
	-1, 901,
	5, 1218,
	-2, 1788,
	-1, 902,
	5, 1219,
	-2, 1789,
	-1, 903,
	5, 1220,
	-2, 1952,
	-1, 904,
	5, 1221,
	-2, 1981,
	-1, 905,
	5, 1222,
	-2, 1765,
	-1, 906,
	5, 1223,
	-2, 1766,
	-1, 907,
	5, 1237,
	-2, 1964,
	-1, 909,
	5, 1212,
	-2, 1960,
	-1, 910,
	5, 1212,
	-2, 1959,
	-1, 911,
	5, 1212,
	-2, 1976,
	-1, 912,
	5, 1229,
	-2, 1954,
	-1, 913,
	5, 1230,
	-2, 1710,
	-1, 914,
	5, 1240,
	-2, 1953,
	-1, 915,
	5, 1242,
	-2, 1992,
	-1, 917,
	5, 1253,
	-2, 1739,
	-1, 918,
	5, 1264,
	-2, 1985,
	-1, 919,
	5, 1256,
	-2, 1986,
	-1, 920,
	5, 1264,
	-2, 1987,
	-1, 921,
	5, 1260,
	-2, 1988,
	-1, 922,
	5, 1180,
	-2, 1795,
	-1, 923,
	5, 1181,
	-2, 1796,
	-1, 924,
	457, 1674,
	-2, 1658,
	-1, 925,
	455, 2012,
	-2, 1675,
	-1, 945,
	5, 1248,
	-2, 1911,
	-1, 962,
	5, 1247,
	-2, 1993,
	-1, 972,
	5, 1249,
	421, 1249,
	-2, 1955,
	-1, 973,
	5, 1250,
	421, 1250,
	-2, 1956,
	-1, 1009,
	455, 1686,
	-2, 1677,
	-1, 1037,
	152, 1924,
	386, 1924,
	438, 1924,
	457, 1924,
	-2, 0,
	-1, 1038,
	1, 487,
	458, 487,
	-2, 951,
	-1, 1158,
	308, 1655,
	448, 1655,
	-2, 1654,
	-1, 1181,
	459, 1655,
	-2, 1656,
	-1, 1216,
	299, 726,
	420, 726,
	-2, 247,
	-1, 1236,
	279, 1045,
	-2, 859,
	-1, 1245,
	259, 1681,
	-2, 0,
	-1, 1309,
	1, 362,
	454, 362,
	456, 362,
	458, 362,
	-2, 1019,
	-1, 1312,
	4, 1991,
	11, 1991,
	12, 1991,
	14, 1991,
	15, 1991,
	16, 1991,
	17, 1991,
	18, 1991,
	19, 1991,
	21, 1991,
	22, 1991,
	23, 1991,
	24, 1991,
	25, 1991,
	27, 1991,
	30, 1991,
	32, 1991,
	34, 1991,
	37, 1991,
	38, 1991,
	39, 1991,
	40, 1991,
	41, 1991,
	42, 1991,
	43, 1991,
	44, 1991,
	45, 1991,
	46, 1991,
	47, 1991,
	49, 1991,
	50, 1991,
	51, 1991,
	52, 1991,
	53, 1991,
	54, 1991,
	57, 1991,
	58, 1991,
	59, 1991,
	60, 1991,
	62, 1991,
	63, 1991,
	64, 1991,
	67, 1991,
	68, 1991,
	69, 1991,
	70, 1991,
	71, 1991,
	72, 1991,
	73, 1991,
	74, 1991,
	75, 1991,
	76, 1991,
	77, 1991,
	79, 1991,
	80, 1991,
	81, 1991,
	82, 1991,
	83, 1991,
	85, 1991,
	86, 1991,
	87, 1991,
	95, 1991,
	96, 1991,
	97, 1991,
	98, 1991,
	99, 1991,
	100, 1991,
	101, 1991,
	102, 1991,
	104, 1991,
	106, 1991,
	107, 1991,
	109, 1991,
	112, 1991,
	113, 1991,
	114, 1991,
	116, 1991,
	118, 1991,
	119, 1991,
	121, 1991,
	122, 1991,
	123, 1991,
	124, 1991,
	125, 1991,
	126, 1991,
	127, 1991,
	128, 1991,
	129, 1991,
	130, 1991,
	131, 1991,
	132, 1991,
	133, 1991,
	137, 1991,
	138, 1991,
	139, 1991,
	140, 1991,
	141, 1991,
	142, 1991,
	143, 1991,
	144, 1991,
	145, 1991,
	146, 1991,
	147, 1991,
	148, 1991,
	150, 1991,
	153, 1991,
	154, 1991,
	155, 1991,
	157, 1991,
	158, 1991,
	160, 1991,
	161, 1991,
	163, 1991,
	164, 1991,
	165, 1991,
	166, 1991,
	167, 1991,
	168, 1991,
	169, 1991,
	170, 1991,
	171, 1991,
	172, 1991,
	173, 1991,
	174, 1991,
	175, 1991,
	176, 1991,
	177, 1991,
	178, 1991,
	179, 1991,
	180, 1991,
	182, 1991,
	183, 1991,
	184, 1991,
	186, 1991,
	187, 1991,
	188, 1991,
	189, 1991,
	190, 1991,
	191, 1991,
	192, 1991,
	193, 1991,
	194, 1991,
	196, 1991,
	198, 1991,
	199, 1991,
	200, 1991,
	201, 1991,
	202, 1991,
	203, 1991,
	204, 1991,
	205, 1991,
	206, 1991,
	207, 1991,
	208, 1991,
	209, 1991,
	210, 1991,
	211, 1991,
	212, 1991,
	213, 1991,
	215, 1991,
	216, 1991,
	218, 1991,
	219, 1991,
	220, 1991,
	221, 1991,
	222, 1991,
	223, 1991,
	225, 1991,
	226, 1991,
	229, 1991,
	230, 1991,
	231, 1991,
	232, 1991,
	233, 1991,
	234, 1991,
	235, 1991,
	236, 1991,
	237, 1991,
	238, 1991,
	239, 1991,
	240, 1991,
	241, 1991,
	242, 1991,
	243, 1991,
	244, 1991,
	245, 1991,
	246, 1991,
	249, 1991,
	251, 1991,
	252, 1991,
	253, 1991,
	254, 1991,
	256, 1991,
	257, 1991,
	258, 1991,
	261, 1991,
	262, 1991,
	263, 1991,
	264, 1991,
	266, 1991,
	267, 1991,
	268, 1991,
	270, 1991,
	272, 1991,
	273, 1991,
	274, 1991,
	275, 1991,
	276, 1991,
	277, 1991,
	278, 1991,
	279, 1991,
	280, 1991,
	281, 1991,
	283, 1991,
	284, 1991,
	285, 1991,
	286, 1991,
	287, 1991,
	288, 1991,
	290, 1991,
	292, 1991,
	293, 1991,
	294, 1991,
	295, 1991,
	296, 1991,
	297, 1991,
	298, 1991,
	299, 1991,
	300, 1991,
	302, 1991,
	303, 1991,
	304, 1991,
	305, 1991,
	306, 1991,
	307, 1991,
	308, 1991,
	309, 1991,
	310, 1991,
	311, 1991,
	312, 1991,
	313, 1991,
	314, 1991,
	315, 1991,
	317, 1991,
	318, 1991,
	319, 1991,
	320, 1991,
	321, 1991,
	322, 1991,
	323, 1991,
	324, 1991,
	325, 1991,
	326, 1991,
	327, 1991,
	328, 1991,
	329, 1991,
	330, 1991,
	331, 1991,
	332, 1991,
	333, 1991,
	335, 1991,
	336, 1991,
	337, 1991,
	338, 1991,
	339, 1991,
	340, 1991,
	341, 1991,
	342, 1991,
	343, 1991,
	344, 1991,
	346, 1991,
	347, 1991,
	348, 1991,
	349, 1991,
	350, 1991,
	351, 1991,
	352, 1991,
	353, 1991,
	354, 1991,
	356, 1991,
	357, 1991,
	358, 1991,
	359, 1991,
	360, 1991,
	361, 1991,
	362, 1991,
	363, 1991,
	364, 1991,
	365, 1991,
	366, 1991,
	367, 1991,
	369, 1991,
	370, 1991,
	371, 1991,
	373, 1991,
	374, 1991,
	375, 1991,
	376, 1991,
	377, 1991,
	378, 1991,
	379, 1991,
	381, 1991,
	382, 1991,
	383, 1991,
	384, 1991,
	385, 1991,
	387, 1991,
	389, 1991,
	390, 1991,
	391, 1991,
	392, 1991,
	393, 1991,
	395, 1991,
	396, 1991,
	397, 1991,
	399, 1991,
	400, 1991,
	403, 1991,
	404, 1991,
	405, 1991,
	406, 1991,
	407, 1991,
	408, 1991,
	410, 1991,
	412, 1991,
	413, 1991,
	414, 1991,
	415, 1991,
	416, 1991,
	417, 1991,
	418, 1991,
	420, 1991,
	421, 1991,
	422, 1991,
	427, 1991,
	428, 1991,
	429, 1991,
	430, 1991,
	431, 1991,
	432, 1991,
	433, 1991,
	434, 1991,
	436, 1991,
	437, 1991,
	438, 1991,
	439, 1991,
	440, 1991,
	441, 1991,
	443, 1991,
	444, 1991,
	445, 1991,
	446, 1991,
	447, 1991,
	448, 1991,
	449, 1991,
	450, 1991,
	451, 1991,
	453, 1991,
	456, 1991,
	457, 1991,
	459, 1991,
	460, 1991,
	-2, 0,
	-1, 1315,
	152, 1896,
	386, 1896,
	438, 1896,
	457, 1896,
	-2, 0,
	-1, 1344,
	293, 628,
	344, 628,
	-2, 0,
	-1, 1367,
	1, 623,
	454, 623,
	456, 623,
	458, 623,
	-2, 0,
	-1, 1368,
	1, 648,
	454, 648,
	456, 648,
	458, 648,
	-2, 0,
	-1, 1369,
	1, 630,
	454, 630,
	456, 630,
	458, 630,
	-2, 0,
	-1, 1371,
	1, 634,
	454, 634,
	456, 634,
	458, 634,
	-2, 0,
	-1, 1396,
	1, 1944,
	454, 1944,
	456, 1944,
	457, 1944,
	458, 1944,
	-2, 674,
	-1, 1397,
	1, 1894,
	454, 1894,
	456, 1894,
	457, 1894,
	458, 1894,
	-2, 675,
	-1, 1410,
	1, 946,
	458, 946,
	-2, 951,
	-1, 1415,
	136, 1057,
	224, 1057,
	255, 1057,
	-2, 1017,
	-1, 1508,
	120, 1021,
	136, 1021,
	195, 1021,
	224, 1021,
	255, 1021,
	265, 1021,
	401, 1021,
	-2, 1421,
	-1, 1561,
	456, 1559,
	-2, 0,
	-1, 1603,
	120, 1021,
	136, 1021,
	195, 1021,
	224, 1021,
	255, 1021,
	265, 1021,
	401, 1021,
	-2, 1130,
	-1, 1657,
	455, 1252,
	-2, 1240,
	-1, 1696,
	1, 489,
	458, 489,
	-2, 951,
	-1, 1890,
	1, 625,
	454, 625,
	456, 625,
	458, 625,
	-2, 0,
	-1, 1891,
	1, 650,
	454, 650,
	456, 650,
	458, 650,
	-2, 0,
	-1, 1974,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1301,
	-1, 1975,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1302,
	-1, 1976,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1303,
	-1, 1977,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1304,
	-1, 1978,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1305,
	-1, 1979,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1306,
	-1, 1980,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1307,
	-1, 1981,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1308,
	-1, 1993,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1320,
	-1, 1994,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1321,
	-1, 1995,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1322,
	-1, 1998,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1327,
	-1, 2004,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1331,
	-1, 2006,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1339,
	-1, 2007,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1340,
	-1, 2008,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1341,
	-1, 2009,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1342,
	-1, 2103,
	5, 1209,
	152, 1570,
	455, 1686,
	-2, 1677,
	-1, 2104,
	152, 1571,
	-2, 1948,
	-1, 2105,
	152, 1572,
	-2, 1816,
	-1, 2106,
	152, 1573,
	-2, 1740,
	-1, 2107,
	152, 1574,
	-2, 1776,
	-1, 2108,
	152, 1575,
	-2, 1814,
	-1, 2109,
	152, 1576,
	-2, 1887,
	-1, 2185,
	1, 1131,
	2, 1131,
	85, 1131,
	120, 1131,
	136, 1131,
	149, 1131,
	153, 1131,
	159, 1131,
	162, 1131,
	186, 1131,
	195, 1131,
	205, 1131,
	220, 1131,
	224, 1131,
	242, 1131,
	255, 1131,
	259, 1131,
	265, 1131,
	316, 1131,
	318, 1131,
	401, 1131,
	411, 1131,
	424, 1131,
	425, 1131,
	426, 1131,
	435, 1131,
	454, 1131,
	456, 1131,
	458, 1131,
	460, 1131,
	-2, 1130,
	-1, 2190,
	455, 1660,
	-2, 1672,
	-1, 2211,
	455, 1251,
	-2, 1241,
	-1, 2448,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1329,
	-1, 2449,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1333,
	-1, 2455,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1335,
	-1, 2635,
	202, 951,
	290, 951,
	297, 951,
	435, 951,
	-2, 486,
	-1, 2727,
	279, 1045,
	-2, 859,
	-1, 2807,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1337,
	-1, 2814,
	199, 0,
	201, 0,
	249, 0,
	-2, 1356,
	-1, 2877,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1385,
	-1, 2878,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1386,
	-1, 2879,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1387,
	-1, 2883,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1391,
	-1, 2884,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1392,
	-1, 2885,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1393,
	-1, 2928,
	455, 1661,
	-2, 1673,
	-1, 3016,
	457, 2094,
	-2, 994,
	-1, 3062,
	199, 0,
	201, 0,
	249, 0,
	-2, 1357,
	-1, 3065,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1360,
	-1, 3066,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1362,
	-1, 3222,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1361,
	-1, 3223,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1363,
	-1, 3233,
	199, 0,
	-2, 1394,
	-1, 3337,
	199, 0,
	-2, 1395,
	-1, 3453,
	41, 0,
	171, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1951,
}

const sqlPrivate = 57344

const sqlLast = 74686

var sqlAct = [...]int{

	894, 3547, 3166, 3263, 3462, 3266, 3537, 3452, 2342, 3289,
	2134, 3431, 3422, 3419, 3406, 2714, 3048, 3463, 3252, 3464,
	3500, 3296, 2845, 2351, 3341, 1010, 2343, 3190, 2948, 3451,
	1961, 3213, 1301, 3007, 2743, 3002, 3301, 1044, 3124, 213,
	2652, 213, 213, 823, 213, 213, 213, 213, 213, 2021,
	1627, 213, 3012, 1423, 2736, 1162, 2989, 851, 814, 584,
	2738, 2949, 2383, 2710, 2314, 1741, 563, 3237, 2339, 1155,
	1063, 2177, 1866, 2385, 1002, 2441, 2298, 213, 2316, 2319,
	2597, 584, 1596, 2584, 680, 3096, 3047, 2393, 2611, 1598,
	1570, 2573, 2382, 1351, 2374, 1297, 2376, 2352, 1827, 1817,
	2240, 1816, 2242, 1506, 1824, 2178, 2557, 2900, 833, 2556,
	2034, 2072, 822, 141, 1516, 2176, 1750, 1534, 2299, 4,
	2476, 3342, 1954, 2437, 2317, 1779, 1174, 1775, 890, 1171,
	1051, 1768, 2274, 1728, 1726, 2152, 1571, 2064, 2018, 1606,
	811, 2052, 2275, 2392, 1410, 1958, 1310, 32, 2712, 1164,
	1284, 1294, 2131, 2345, 1628, 2180, 2616, 1230, 1813, 1040,
	531, 585, 997, 1497, 3290, 2160, 1529, 2232, 2046, 1580,
	586, 86, 2142, 2386, 976, 2099, 213, 213, 2035, 1422,
	1424, 547, 1845, 1187, 148, 580, 207, 1812, 141, 1308,
	557, 1833, 1260, 205, 656, 675, 517, 149, 625, 1304,
	539, 1740, 850, 1184, 534, 999, 542, 37, 1428, 36,
	34, 25, 994, 974, 1409, 23, 21, 206, 1242, 743,
	2917, 2472, 2918, 727, 1867, 2529, 2530, 2344, 2547, 2548,
	2549, 1847, 1847, 1048, 3577, 3568, 1847, 3567, 2151, 2151,
	818, 2151, 3546, 3529, 3060, 589, 1784, 3138, 3527, 3486,
	3484, 3482, 3138, 3487, 2151, 2151, 3479, 3476, 2398, 2753,
	3480, 3477, 2633, 2752, 3473, 3449, 690, 589, 1784, 1784,
	813, 916, 818, 3448, 3447, 3444, 592, 1784, 1859, 1859,
	3443, 3401, 3391, 2348, 1859, 2204, 3138, 2544, 2151, 1436,
	1437, 3402, 1469, 1470, 1471, 1479, 1480, 1481, 592, 3390,
	3384, 3378, 3376, 3138, 1784, 3138, 3138, 3339, 1472, 3322,
	3319, 2204, 3280, 1784, 3138, 1439, 1784, 3279, 2144, 1485,
	3272, 1784, 819, 991, 1784, 3271, 799, 3325, 1027, 3138,
	3243, 977, 977, 3224, 1784, 1859, 3211, 2204, 2903, 798,
	1859, 3202, 1438, 3163, 3155, 2765, 3137, 2151, 2151, 3064,
	3138, 1458, 3024, 2204, 1048, 3018, 2781, 2143, 1455, 2781,
	849, 2535, 2987, 2923, 2913, 2906, 2988, 2924, 2914, 2151,
	2838, 806, 2826, 980, 1784, 981, 2151, 2529, 2530, 2903,
	2547, 2548, 2549, 2780, 2772, 2705, 2491, 2781, 2773, 1859,
	978, 2570, 2492, 2568, 2567, 2151, 3059, 2151, 2151, 2521,
	2504, 2493, 2372, 2151, 2505, 2151, 1863, 1205, 1436, 1437,
	2049, 1022, 2200, 2550, 1507, 1461, 1462, 1463, 1464, 2217,
	2203, 3156, 2198, 2151, 2204, 1444, 2151, 2192, 2150, 1862,
	1784, 1784, 2151, 1863, 1439, 2151, 2773, 2289, 2231, 2544,
	1699, 2765, 2326, 2440, 1783, 2545, 1784, 2529, 2530, 1476,
	2229, 1566, 1486, 1183, 1597, 2974, 1466, 1467, 1468, 2802,
	1778, 1438, 2754, 1353, 2171, 1507, 2170, 2475, 2169, 181,
	2168, 2167, 1436, 1437, 181, 982, 2050, 1482, 979, 1483,
	805, 2755, 3262, 3469, 804, 1023, 1453, 1454, 803, 802,
	801, 1848, 1848, 797, 2421, 3113, 1848, 796, 1439, 795,
	794, 1474, 793, 1719, 792, 791, 790, 183, 789, 1459,
	788, 787, 183, 2535, 181, 786, 785, 725, 724, 1199,
	723, 722, 213, 721, 1370, 1438, 720, 1484, 719, 718,
	717, 716, 715, 714, 1458, 75, 713, 712, 711, 2546,
	710, 709, 1473, 708, 1444, 707, 706, 2051, 2048, 705,
	213, 182, 183, 704, 703, 702, 182, 213, 701, 2529,
	2530, 175, 2547, 2548, 2549, 2550, 700, 2752, 3075, 176,
	1023, 699, 1204, 213, 1066, 213, 213, 1167, 213, 1066,
	213, 689, 688, 2535, 647, 1465, 646, 605, 213, 213,
	150, 604, 603, 3450, 595, 150, 182, 2545, 1461, 1462,
	1463, 1464, 594, 1460, 593, 1050, 175, 570, 1444, 1055,
	569, 568, 567, 213, 176, 2529, 2530, 551, 203, 202,
	201, 2544, 200, 199, 3372, 198, 2143, 213, 1477, 1167,
	1167, 213, 213, 197, 213, 2347, 1023, 1855, 1846, 1466,
	1467, 1468, 1934, 2053, 196, 195, 213, 194, 193, 192,
	2541, 2542, 2543, 191, 213, 190, 189, 2540, 2538, 2539,
	2531, 2532, 2533, 2534, 2536, 2537, 188, 2545, 213, 213,
	213, 213, 213, 1167, 1167, 1177, 187, 2544, 1167, 186,
	213, 1167, 213, 213, 1198, 185, 184, 1193, 2921, 1064,
	2782, 2546, 1459, 2614, 1175, 2535, 213, 2529, 2530, 2498,
	2487, 2304, 2332, 1038, 1537, 2193, 1305, 2184, 2090, 2088,
	1536, 1475, 2086, 893, 1450, 1451, 1457, 1456, 1452, 1478,
	1599, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446,
	1537, 1540, 1167, 2084, 3409, 1518, 1536, 1724, 892, 181,
	181, 2047, 1435, 2082, 1613, 1523, 1192, 1035, 1197, 1186,
	1203, 2535, 1189, 1057, 213, 117, 866, 1535, 1185, 3198,
	1012, 2546, 3332, 1247, 3328, 2209, 2776, 213, 1465, 1158,
	3203, 3326, 2294, 1181, 589, 3117, 1160, 183, 183, 2545,
	1325, 3095, 213, 3094, 848, 1059, 1460, 1152, 1157, 3082,
	3081, 141, 3080, 3079, 2529, 2530, 3073, 3072, 1313, 3071,
	1869, 1298, 2541, 2542, 2543, 592, 2986, 2937, 2936, 2540,
	2538, 2539, 2531, 2532, 2533, 2534, 2536, 2537, 2934, 1288,
	1291, 182, 182, 2927, 1243, 1243, 2897, 1311, 1236, 1239,
	2896, 175, 175, 2535, 1321, 2545, 2895, 2822, 2818, 176,
	176, 1324, 1380, 1440, 1441, 1442, 1443, 1445, 1446, 819,
	1244, 181, 2609, 1821, 2529, 2530, 181, 1416, 2564, 2555,
	150, 150, 3344, 2528, 1181, 1519, 2525, 1517, 1868, 2524,
	2522, 2511, 2510, 2546, 1436, 1437, 2509, 2506, 2503, 2333,
	1317, 2539, 2531, 2532, 2533, 2534, 2536, 2537, 181, 183,
	2481, 2480, 2261, 1371, 183, 2473, 2373, 1005, 2185, 2057,
	1439, 1435, 1518, 990, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 2590, 1789, 1505, 1787, 2545, 1434, 1415,
	3575, 3545, 1004, 3544, 3485, 1011, 183, 1438, 2847, 2546,
	2535, 1337, 3439, 182, 3437, 3261, 1436, 1437, 182, 1414,
	1008, 1720, 2276, 175, 3369, 1372, 3366, 3363, 175, 3362,
	2436, 176, 1330, 1345, 1421, 3197, 176, 3361, 3357, 3351,
	3323, 3318, 1439, 1413, 821, 3317, 2024, 1510, 1006, 3258,
	182, 1515, 150, 3235, 3208, 3207, 213, 150, 3188, 1408,
	175, 3185, 3179, 3112, 2541, 2542, 2543, 1411, 176, 1438,
	2535, 2540, 2538, 2539, 2531, 2532, 2533, 2534, 2536, 2537,
	1577, 3093, 213, 1568, 3038, 3035, 2964, 799, 181, 150,
	1444, 2546, 213, 1066, 213, 213, 213, 2529, 2530, 181,
	798, 2963, 584, 213, 213, 1431, 1432, 584, 213, 1622,
	819, 1417, 2952, 213, 2030, 2951, 2909, 2813, 1539, 2331,
	2655, 1466, 1467, 1468, 2783, 1694, 183, 2540, 2538, 2539,
	2531, 2532, 2533, 2534, 2536, 2537, 2766, 183, 1066, 2627,
	2730, 2699, 2677, 2529, 2530, 2655, 2654, 2629, 2569, 2502,
	2501, 2486, 1444, 2464, 2545, 1574, 1575, 1531, 1532, 2313,
	1541, 1538, 1530, 1634, 1527, 2213, 2212, 2188, 2165, 1607,
	182, 2149, 1436, 1437, 1459, 1722, 2080, 1587, 1501, 1693,
	175, 182, 1612, 1466, 1467, 1468, 141, 1715, 176, 1569,
	1565, 175, 1436, 1437, 1564, 1563, 1562, 1561, 1439, 176,
	1560, 1559, 1558, 1557, 1555, 1554, 1553, 1552, 1616, 150,
	1551, 977, 2531, 2532, 2533, 2534, 2536, 2537, 1439, 1550,
	150, 1592, 1549, 1617, 1619, 1438, 1710, 1709, 1548, 1547,
	1719, 1716, 1546, 2535, 1545, 1544, 1459, 1543, 1520, 1502,
	1500, 1604, 2089, 2087, 1495, 1438, 2085, 1034, 2546, 1025,
	819, 1870, 1018, 1725, 3184, 3114, 3068, 2933, 2916, 2912,
	2490, 2206, 1696, 1167, 213, 1608, 2166, 2083, 1460, 1567,
	1066, 827, 1718, 3329, 1052, 1615, 3247, 2081, 1719, 2535,
	3327, 1595, 1601, 1594, 1593, 1591, 1624, 1623, 589, 1590,
	1589, 1691, 1690, 589, 3116, 2529, 2530, 2932, 1519, 2625,
	1498, 1054, 3364, 1719, 1734, 1719, 2739, 3201, 1625, 213,
	213, 2533, 2534, 2536, 2537, 3157, 213, 1765, 1697, 592,
	1767, 2919, 2680, 1772, 592, 1713, 213, 1550, 1444, 1550,
	1460, 2768, 1711, 2767, 1599, 213, 1745, 213, 1537, 213,
	2997, 1048, 1705, 213, 1536, 1344, 2278, 1039, 2508, 1048,
	3302, 1406, 2507, 1053, 1822, 213, 2446, 2263, 1049, 2962,
	1749, 1381, 783, 2545, 2049, 1525, 2540, 2538, 2539, 2531,
	2532, 2533, 2534, 2536, 2537, 1867, 181, 1659, 2716, 1805,
	2715, 3297, 1045, 1352, 1353, 1785, 1449, 1447, 1448, 1440,
	1441, 1442, 1443, 1445, 1446, 1167, 213, 1167, 1048, 1818,
	213, 784, 2978, 1167, 2966, 2788, 1167, 213, 2693, 213,
	213, 1763, 3238, 3548, 183, 2344, 2849, 2496, 1660, 1167,
	1167, 1167, 1776, 213, 2065, 1186, 1839, 1830, 213, 3470,
	2050, 2211, 2117, 1556, 1185, 1533, 989, 584, 213, 2708,
	213, 1809, 213, 1220, 213, 1504, 213, 3481, 1714, 3478,
	589, 1440, 1441, 1442, 1443, 1445, 1446, 2546, 182, 1771,
	213, 2748, 1780, 213, 2944, 213, 1631, 1782, 175, 3416,
	1046, 3003, 2380, 3515, 213, 642, 176, 1047, 1334, 1218,
	3516, 592, 3383, 2637, 1872, 3148, 3471, 1208, 777, 1886,
	2218, 3572, 1799, 213, 1922, 1798, 817, 150, 1837, 213,
	2244, 2051, 2048, 1808, 1920, 1378, 3288, 3282, 1054, 764,
	775, 1379, 1706, 773, 817, 779, 2980, 2235, 1045, 1066,
	770, 2976, 2975, 2941, 2940, 812, 2485, 1832, 1874, 2233,
	1835, 2235, 2531, 2532, 2533, 2534, 2536, 2537, 1877, 2639,
	2484, 2483, 2482, 2233, 1311, 2450, 2296, 1045, 2288, 1219,
	2285, 1850, 2266, 2199, 1852, 643, 2005, 1854, 1941, 1412,
	1053, 1857, 1182, 2340, 2076, 1938, 819, 2075, 1963, 1931,
	3219, 816, 3532, 2265, 1634, 1634, 2538, 2539, 2531, 2532,
	2533, 2534, 2536, 2537, 1864, 2626, 1035, 759, 1742, 816,
	2247, 1377, 2036, 2037, 1876, 1272, 1865, 2053, 1253, 1054,
	1252, 1251, 1780, 1250, 1066, 1875, 1046, 2789, 1932, 810,
	2036, 2062, 1446, 1047, 767, 1048, 1738, 1214, 1883, 1884,
	1885, 1895, 1902, 589, 2679, 1332, 1231, 1881, 1016, 1442,
	1443, 1445, 1446, 2225, 1962, 1046, 1936, 1743, 1744, 2191,
	3382, 818, 1047, 1939, 3533, 2254, 2098, 213, 2102, 2102,
	2115, 1053, 2036, 1930, 592, 2135, 2137, 1889, 2020, 818,
	2141, 2020, 1229, 3441, 3268, 1739, 1797, 637, 1720, 1717,
	1933, 1959, 1960, 1890, 1935, 1419, 1937, 2028, 1066, 213,
	760, 2207, 2026, 2029, 1940, 2253, 1436, 1437, 213, 1836,
	2791, 213, 1015, 799, 1066, 2047, 799, 799, 1343, 1228,
	1033, 2790, 1510, 2189, 1367, 1896, 1950, 1729, 1608, 1951,
	1952, 1730, 1439, 1327, 2061, 1346, 1720, 2276, 2954, 2066,
	3467, 2282, 3399, 1013, 1891, 2065, 3144, 2074, 2246, 3535,
	2418, 1391, 2078, 2079, 2053, 2537, 2197, 3552, 636, 1438,
	2032, 1720, 2276, 1720, 2276, 3540, 1436, 1437, 3505, 2122,
	697, 1048, 819, 2832, 2173, 1368, 2438, 2439, 2745, 2186,
	1216, 3218, 3562, 1847, 2264, 819, 2172, 2690, 1376, 819,
	2182, 2183, 1439, 213, 645, 644, 529, 815, 2059, 3515,
	1048, 1405, 2746, 2685, 571, 1353, 1762, 1747, 1659, 1659,
	1005, 3358, 1005, 1231, 1736, 815, 2156, 2829, 1731, 1438,
	524, 2157, 977, 2667, 2638, 1066, 674, 1353, 1328, 2190,
	213, 1733, 1528, 2636, 2110, 1004, 2461, 1004, 213, 141,
	2126, 2139, 1444, 2623, 761, 2702, 2201, 2147, 2148, 213,
	2162, 2163, 2158, 1008, 1745, 1008, 2977, 2965, 2328, 2745,
	2459, 2245, 213, 3468, 1929, 1167, 2666, 3175, 1604, 2053,
	2286, 2234, 1620, 1466, 1467, 1468, 3397, 819, 213, 1066,
	3522, 1006, 1167, 1006, 213, 213, 3534, 1735, 2830, 3504,
	3142, 1271, 2236, 1736, 3049, 3229, 771, 1631, 1631, 577,
	1539, 1921, 1444, 2208, 2669, 3398, 635, 1333, 634, 1634,
	213, 1919, 213, 1213, 2301, 213, 1894, 2300, 771, 781,
	1494, 772, 3427, 780, 2216, 1729, 1459, 2671, 771, 1730,
	213, 2283, 3368, 1466, 1467, 1468, 638, 213, 3466, 213,
	2230, 213, 1531, 1532, 2500, 2161, 2181, 213, 762, 3553,
	213, 1388, 213, 2215, 213, 3538, 213, 213, 2219, 213,
	1167, 1167, 1167, 596, 1167, 2456, 2268, 3269, 213, 213,
	2955, 213, 213, 2297, 2670, 818, 2457, 3183, 2424, 2462,
	2056, 1736, 213, 579, 2053, 763, 1459, 3044, 2260, 2277,
	2279, 2280, 2281, 2368, 2369, 213, 213, 213, 2248, 2250,
	213, 2929, 213, 2239, 768, 213, 2269, 213, 3143, 213,
	2452, 2397, 2673, 2019, 1028, 2300, 1731, 2300, 1014, 2293,
	1460, 3176, 3052, 1888, 1729, 3539, 2027, 3503, 1730, 1733,
	213, 213, 213, 213, 2337, 213, 2306, 2355, 2308, 1389,
	1418, 1355, 3563, 1848, 698, 1186, 2396, 3465, 2399, 2400,
	2256, 2364, 2016, 2379, 2302, 1158, 2311, 3541, 213, 3215,
	3514, 2267, 2427, 1342, 2287, 1032, 3512, 3307, 3187, 2734,
	589, 1181, 2394, 2327, 2284, 141, 2014, 2335, 525, 573,
	1460, 2346, 2370, 2346, 1811, 1735, 1766, 2407, 2366, 2350,
	1576, 1026, 2410, 2002, 2357, 2323, 2401, 578, 2402, 1021,
	2361, 592, 2362, 1329, 2363, 516, 2991, 1427, 2365, 1390,
	2371, 3050, 1746, 1311, 1579, 1731, 3091, 2422, 1732, 2381,
	2458, 1426, 1707, 1659, 2886, 2409, 2429, 3557, 1733, 2460,
	526, 2617, 3274, 3273, 2413, 3256, 2414, 575, 2415, 1447,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 1583, 3348, 1181,
	1181, 2478, 2479, 2453, 1704, 2943, 2735, 213, 2426, 2367,
	3147, 2430, 3214, 2416, 597, 598, 2488, 3146, 527, 808,
	528, 759, 2650, 1331, 572, 759, 2423, 2646, 2433, 1736,
	1586, 2010, 1583, 2411, 1735, 2412, 2221, 2336, 2435, 2011,
	1181, 2318, 2012, 810, 2315, 2017, 2474, 810, 2223, 2159,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 1831, 2599, 1425,
	2642, 576, 1631, 1820, 1584, 1586, 1819, 1494, 1793, 1946,
	1702, 2828, 574, 2000, 1181, 3407, 2003, 2122, 2122, 809,
	2224, 3370, 1426, 1926, 1581, 1700, 1703, 2153, 3008, 2312,
	1427, 2451, 3191, 2222, 2566, 1274, 1066, 2432, 3295, 1584,
	3293, 2571, 3257, 2425, 600, 599, 2578, 2579, 2657, 3092,
	2580, 2887, 3216, 2270, 760, 213, 2656, 2888, 760, 2444,
	694, 1582, 1882, 213, 3556, 1999, 687, 2911, 1736, 1369,
	213, 2600, 2583, 213, 213, 1066, 2582, 2196, 2586, 2195,
	2194, 1259, 1257, 1245, 1066, 2325, 819, 816, 1356, 3353,
	213, 2495, 3167, 2155, 601, 602, 2604, 2704, 2154, 1727,
	1246, 3145, 1585, 2777, 1829, 213, 1732, 3519, 696, 1947,
	1425, 3291, 3410, 2598, 3097, 3354, 3264, 3254, 2122, 2122,
	2122, 2901, 1403, 213, 213, 213, 2013, 2070, 3521, 213,
	2489, 3483, 213, 2602, 2594, 2015, 3365, 1585, 2613, 213,
	213, 213, 213, 213, 2605, 2606, 2593, 1385, 3234, 3255,
	2634, 2577, 1634, 2612, 3090, 213, 213, 213, 2069, 2592,
	2589, 2559, 2982, 2640, 213, 2608, 2618, 2558, 2595, 3371,
	2572, 2561, 2562, 2563, 2575, 1383, 213, 1167, 3411, 213,
	2659, 3355, 2663, 2664, 2587, 1005, 2812, 1066, 1634, 2588,
	2607, 2647, 2001, 2271, 2272, 1066, 3265, 2786, 761, 2615,
	213, 1366, 761, 213, 213, 1732, 1364, 1362, 2601, 1005,
	1004, 2523, 1360, 213, 2630, 2631, 1167, 213, 2463, 1167,
	1167, 1167, 2322, 2643, 2644, 2603, 213, 2295, 1008, 1358,
	2585, 812, 213, 2262, 1004, 2719, 2684, 2214, 213, 2658,
	213, 2661, 2619, 2620, 1350, 2691, 1348, 213, 1255, 2624,
	1614, 2682, 1008, 2635, 1611, 2641, 1006, 1404, 2420, 1322,
	2419, 692, 693, 2700, 1918, 2404, 1928, 685, 686, 3404,
	1167, 1167, 1402, 2621, 1899, 2750, 1258, 1256, 213, 213,
	1006, 2672, 213, 1692, 2678, 2651, 1734, 2723, 2632, 1167,
	1542, 2741, 2686, 1326, 3461, 2674, 2675, 1384, 2689, 2676,
	807, 2687, 762, 695, 2713, 2688, 762, 2695, 2694, 1235,
	2615, 1734, 213, 3162, 1066, 213, 213, 1066, 213, 2701,
	3154, 3516, 3121, 769, 2268, 1382, 924, 3501, 2696, 2697,
	3006, 2960, 2698, 2958, 2942, 213, 2764, 2733, 2394, 763,
	2718, 2717, 2341, 763, 1776, 2330, 2329, 2394, 2309, 1181,
	1861, 1365, 1776, 1860, 1858, 1856, 1363, 1361, 1853, 1851,
	2784, 2740, 1359, 1579, 2840, 209, 1659, 519, 520, 1808,
	535, 519, 535, 545, 550, 141, 2692, 566, 1066, 1357,
	2779, 2747, 2763, 2775, 2737, 209, 1849, 2796, 1840, 1066,
	2756, 213, 1790, 1788, 1349, 2749, 1347, 1777, 1254, 1764,
	3311, 1761, 1659, 684, 1748, 2815, 1737, 209, 1429, 819,
	1621, 1917, 1634, 2797, 2785, 2724, 2442, 986, 2726, 2727,
	2728, 3433, 3210, 3205, 3204, 2395, 2824, 2825, 1723, 1175,
	1210, 1583, 1064, 3313, 2758, 2759, 2760, 2235, 2761, 2762,
	2793, 987, 2235, 2252, 2794, 774, 776, 3017, 2798, 2233,
	2122, 2122, 1892, 2800, 2251, 1631, 2235, 1916, 1915, 1745,
	1897, 1634, 1634, 3360, 1586, 3334, 2898, 3098, 2249, 2770,
	2771, 1400, 1401, 2820, 1436, 1437, 2273, 1634, 1634, 2255,
	1433, 2290, 2257, 1581, 213, 2292, 3403, 3373, 1780, 2443,
	2995, 1631, 1430, 2837, 2990, 2926, 2291, 2839, 1584, 213,
	1439, 2300, 519, 519, 2843, 1066, 530, 2851, 1634, 1949,
	209, 1181, 2846, 2850, 2852, 2831, 2833, 2834, 2853, 2920,
	1582, 2349, 2140, 1695, 213, 988, 2863, 1438, 1436, 1437,
	2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
	2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2855,
	2122, 2259, 541, 2890, 1626, 2915, 3536, 2891, 1959, 2856,
	2622, 3555, 2258, 2529, 2530, 2865, 1436, 1437, 2227, 2226,
	213, 3375, 141, 1507, 1959, 2866, 2904, 2905, 2967, 2899,
	1336, 1438, 2902, 1751, 2073, 2931, 1335, 2835, 2227, 2628,
	2228, 2077, 2071, 2044, 1387, 3069, 1585, 1386, 2930, 2827,
	2979, 1755, 1505, 1503, 2922, 2894, 3564, 213, 213, 213,
	3345, 3248, 2907, 2908, 3246, 3178, 3115, 3041, 3034, 3023,
	2928, 3001, 2985, 2984, 1066, 213, 1659, 2983, 2957, 1167,
	2757, 2935, 2731, 2729, 2406, 2405, 2971, 2972, 2973, 2359,
	2334, 2310, 2118, 213, 1752, 2946, 2031, 1914, 2998, 1913,
	3019, 1912, 1911, 1843, 1842, 1841, 213, 213, 1167, 1167,
	1167, 1634, 213, 213, 213, 1823, 2981, 213, 213, 3014,
	1801, 213, 213, 1800, 1167, 1659, 1659, 1796, 2994, 1795,
	213, 1794, 1792, 1791, 3010, 3013, 1420, 1399, 3009, 1398,
	1283, 1659, 1659, 1066, 1282, 1281, 2268, 1280, 1279, 1278,
	3004, 1277, 1276, 1275, 1273, 1268, 3042, 2938, 1267, 1266,
	1265, 1264, 1227, 1226, 1225, 1631, 2999, 1224, 1223, 3000,
	3067, 1222, 1659, 1221, 1756, 1215, 3015, 1209, 1207, 1206,
	3011, 1031, 1030, 3030, 2959, 3021, 2961, 961, 213, 871,
	3020, 1698, 782, 2355, 629, 766, 3031, 3032, 1005, 3267,
	1745, 3026, 3025, 1393, 3063, 3039, 3033, 73, 2651, 3040,
	1217, 1634, 616, 1005, 1631, 1631, 3037, 3054, 3135, 3055,
	67, 3036, 2394, 1004, 3051, 2956, 3046, 3415, 2665, 1898,
	1631, 1631, 1354, 2575, 1757, 1758, 1900, 2591, 1004, 2164,
	3396, 1008, 1005, 1753, 3076, 3132, 2499, 3340, 3228, 2068,
	213, 1524, 1808, 69, 859, 944, 1008, 3174, 3173, 3122,
	1066, 1631, 1066, 2945, 2384, 3171, 3170, 1004, 826, 1006,
	1069, 1708, 1754, 865, 3043, 1721, 2210, 2101, 1630, 868,
	1632, 213, 213, 213, 1006, 1008, 870, 3133, 869, 1633,
	1526, 867, 1629, 213, 2324, 2353, 1262, 747, 1019, 213,
	1712, 213, 2025, 2063, 213, 213, 213, 3027, 3028, 3029,
	3089, 2494, 1521, 1006, 839, 1066, 213, 213, 1167, 861,
	3140, 1066, 2060, 1167, 1024, 1659, 1029, 838, 2596, 213,
	3100, 3101, 3102, 566, 2744, 3105, 3108, 2925, 3107, 2612,
	3196, 3150, 1945, 2434, 213, 3120, 1942, 1066, 1578, 209,
	1167, 209, 209, 3111, 1172, 3165, 209, 1759, 3106, 632,
	2526, 2045, 1017, 2123, 209, 1188, 3139, 2116, 2112, 1407,
	1620, 1496, 2354, 1056, 842, 2023, 1512, 3110, 2468, 213,
	2751, 3118, 3119, 3099, 2610, 2205, 3160, 3195, 3430, 1212,
	1066, 3104, 1953, 1810, 985, 3159, 984, 3164, 3180, 3149,
	983, 1736, 3169, 1234, 3206, 3193, 3421, 209, 209, 3192,
	1172, 3418, 2711, 3181, 1631, 1701, 1066, 2220, 3200, 1488,
	3194, 1760, 209, 3189, 2720, 1659, 855, 1180, 2576, 3168,
	1270, 3128, 1774, 3103, 3129, 2778, 1232, 3359, 1487, 778,
	3350, 1043, 1042, 1041, 209, 209, 209, 209, 1172, 3240,
	2649, 3561, 1773, 2953, 1066, 180, 566, 177, 209, 209,
	3217, 179, 213, 178, 213, 2969, 1066, 213, 2703, 3225,
	90, 3220, 684, 3131, 35, 213, 3141, 16, 3177, 116,
	1769, 115, 114, 3182, 3236, 3134, 113, 3151, 3152, 112,
	111, 1634, 110, 109, 108, 107, 3251, 213, 106, 105,
	825, 1743, 1744, 104, 3250, 1064, 3199, 103, 3241, 3242,
	1808, 102, 101, 100, 1631, 99, 213, 3161, 98, 97,
	213, 96, 95, 94, 3249, 93, 92, 91, 213, 1770,
	209, 3226, 562, 1167, 3294, 3244, 3299, 559, 213, 2122,
	3270, 3285, 49, 209, 48, 89, 1634, 88, 15, 33,
	2118, 2118, 13, 3245, 3304, 53, 54, 3306, 550, 213,
	213, 3303, 3209, 3283, 3286, 3292, 12, 1873, 28, 3226,
	29, 79, 78, 27, 14, 26, 3320, 3321, 24, 213,
	10, 1962, 2122, 3298, 8, 213, 3130, 7, 3309, 3310,
	30, 3315, 3308, 3314, 3013, 213, 1588, 11, 146, 145,
	72, 144, 71, 143, 142, 70, 22, 9, 138, 3356,
	3300, 2996, 66, 3347, 140, 139, 3316, 63, 137, 136,
	2713, 64, 135, 134, 3324, 65, 3338, 3333, 133, 3346,
	20, 5, 52, 1634, 6, 3212, 1005, 1005, 2787, 83,
	84, 31, 61, 3276, 60, 3367, 59, 19, 213, 1167,
	51, 2118, 2118, 2118, 213, 3331, 3343, 18, 1167, 1167,
	170, 1004, 1004, 169, 1167, 3389, 168, 167, 213, 162,
	213, 161, 3277, 3278, 166, 164, 163, 3374, 3303, 1008,
	1008, 3377, 165, 2122, 3381, 3400, 160, 132, 172, 3386,
	3387, 3388, 213, 171, 3385, 174, 3392, 3393, 213, 213,
	158, 1066, 154, 153, 3380, 1659, 3412, 1006, 1006, 213,
	213, 2465, 2466, 157, 3424, 3434, 159, 3428, 3420, 3423,
	156, 3312, 3436, 155, 3438, 152, 173, 131, 130, 56,
	129, 3417, 3445, 128, 127, 126, 3446, 125, 55, 17,
	2, 1, 0, 213, 0, 0, 0, 0, 3425, 3440,
	0, 3442, 519, 1181, 0, 0, 3472, 0, 0, 0,
	1659, 0, 0, 0, 0, 0, 3460, 3459, 3457, 3458,
	0, 0, 0, 209, 0, 209, 0, 0, 209, 3490,
	3474, 3492, 213, 0, 3488, 0, 0, 0, 1188, 3498,
	1172, 209, 0, 0, 1631, 3497, 0, 3489, 209, 1188,
	535, 3502, 213, 209, 1188, 3494, 3491, 1005, 3493, 566,
	3432, 0, 2552, 2553, 2554, 0, 1962, 0, 3508, 3509,
	3510, 0, 3513, 3511, 0, 0, 213, 0, 213, 3517,
	0, 3518, 1004, 3520, 3420, 0, 0, 3423, 0, 3524,
	3526, 0, 3528, 3530, 3525, 0, 0, 1659, 3531, 1631,
	1008, 3394, 676, 3395, 0, 0, 3495, 3496, 0, 0,
	3499, 3435, 3543, 3542, 0, 0, 0, 0, 0, 0,
	3550, 0, 0, 3549, 0, 3551, 0, 57, 1006, 678,
	0, 3413, 2355, 0, 3554, 0, 0, 3558, 0, 58,
	0, 0, 3565, 0, 3566, 3559, 3560, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	825, 3573, 3574, 0, 825, 3569, 3570, 3571, 0, 0,
	0, 0, 0, 0, 0, 0, 3576, 3578, 3432, 0,
	0, 0, 0, 0, 68, 0, 1631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1190, 0, 1194, 0,
	1200, 0, 0, 0, 0, 0, 0, 1005, 0, 0,
	209, 0, 0, 0, 74, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 1005, 75,
	82, 0, 1004, 2118, 2118, 0, 0, 0, 3135, 0,
	1004, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 1004, 0, 209, 209, 0, 1008, 3523,
	0, 0, 209, 0, 0, 3132, 0, 0, 3125, 0,
	0, 1008, 1828, 76, 0, 0, 0, 0, 1006, 0,
	0, 209, 3123, 209, 1320, 209, 1006, 0, 3127, 519,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 1844, 0, 0, 0, 0, 0, 3133, 0, 0,
	0, 0, 0, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
	2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
	2118, 2118, 0, 2118, 0, 0, 0, 0, 0, 3126,
	0, 0, 566, 0, 0, 1373, 684, 0, 0, 0,
	57, 0, 0, 209, 0, 1172, 209, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 566,
	0, 0, 0, 0, 209, 0, 62, 0, 0, 0,
	77, 0, 0, 209, 209, 0, 209, 0, 209, 0,
	209, 0, 209, 0, 2808, 2809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1923, 68, 0, 1924,
	0, 1925, 147, 80, 0, 81, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 1493, 0, 0, 181, 0, 0, 74, 0, 550,
	0, 0, 0, 0, 0, 566, 679, 85, 0, 117,
	0, 3128, 75, 82, 3129, 0, 0, 1509, 0, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 2867, 2868, 2869, 2870, 2871, 2872,
	2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882,
	2883, 2884, 2885, 3131, 2889, 118, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 3134, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 1436, 1437,
	0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 0, 1472, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1572, 1572, 1572, 0, 0, 0, 0, 0,
	0, 1438, 0, 519, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 77, 0, 0, 3130, 1455, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 0, 0, 0, 0,
	0, 0, 209, 0, 519, 147, 80, 209, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 1461, 1462, 1463, 1464, 0, 679,
	0, 0, 117, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 183, 0, 0, 1476, 0,
	0, 1486, 0, 0, 0, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 118, 535,
	0, 0, 0, 0, 0, 0, 1482, 0, 1483, 0,
	0, 151, 0, 0, 0, 1453, 1454, 0, 0, 182,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 175,
	1474, 0, 1458, 0, 0, 0, 2243, 176, 1459, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 1484, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 3058, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	209, 2303, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 209, 0, 1188, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1828, 1466, 1467, 1468,
	0, 0, 0, 2243, 0, 519, 0, 2358, 0, 0,
	0, 0, 2118, 209, 0, 0, 209, 1477, 209, 0,
	209, 0, 209, 209, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 2377, 684, 0, 2243, 2243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	1459, 0, 0, 0, 0, 2118, 0, 0, 0, 0,
	0, 209, 1172, 209, 0, 0, 1188, 0, 1188, 0,
	0, 1172, 0, 1172, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 1172, 209,
	1475, 209, 0, 1450, 1451, 1457, 1456, 1452, 1478, 0,
	1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 0,
	0, 0, 0, 3085, 209, 0, 1465, 3084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2118, 0, 0, 0,
	0, 0, 0, 0, 1943, 0, 1948, 0, 0, 0,
	0, 0, 1955, 3233, 0, 0, 0, 0, 0, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 0, 2004, 3259, 2006, 2007, 2008,
	2009, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 2058, 0, 0, 0,
	0, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 0, 58, 119, 0, 2114, 0,
	2125, 2127, 2132, 0, 0, 0, 0, 0, 0, 62,
	0, 209, 0, 0, 0, 0, 0, 3337, 0, 0,
	0, 0, 0, 0, 39, 121, 209, 0, 0, 0,
	0, 519, 0, 0, 0, 0, 0, 0, 38, 519,
	68, 0, 0, 0, 0, 0, 519, 0, 0, 519,
	519, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 42, 1188, 0, 0, 0,
	74, 0, 0, 122, 0, 0, 0, 0, 0, 40,
	85, 1188, 0, 0, 0, 75, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2243,
	2243, 209, 0, 0, 0, 2243, 0, 0, 2653, 0,
	0, 0, 43, 0, 0, 2243, 2653, 2243, 2653, 2653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 209, 209, 209, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 209, 0, 0, 1172, 0, 0, 860, 87,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2707, 0, 0, 2709,
	2243, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 68, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 1172, 0,
	0, 0, 0, 0, 2243, 0, 519, 0, 0, 0,
	0, 0, 74, 2243, 0, 0, 2305, 0, 2307, 0,
	0, 0, 85, 0, 87, 0, 77, 75, 82, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 1828, 0, 0, 1828, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 147, 80,
	0, 81, 0, 45, 0, 0, 0, 123, 0, 0,
	0, 76, 0, 46, 0, 0, 0, 0, 2792, 0,
	181, 1172, 209, 0, 209, 0, 0, 0, 0, 0,
	800, 0, 50, 0, 0, 117, 0, 0, 0, 820,
	0, 209, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 2417, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 57, 0, 2848, 0, 2202,
	0, 0, 182, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 77, 0,
	176, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 3, 0, 0, 0, 0, 0,
	147, 80, 68, 81, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 1479, 1480, 1481, 2448, 2449,
	0, 0, 181, 0, 2455, 0, 0, 0, 0, 209,
	209, 0, 74, 0, 679, 1439, 0, 117, 0, 1485,
	519, 0, 85, 2469, 2470, 0, 0, 75, 82, 2058,
	0, 0, 0, 0, 0, 519, 0, 0, 2477, 0,
	183, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 925, 0, 0, 0, 0, 0,
	1188, 0, 0, 118, 2497, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 151, 0, 0, 2512,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 175, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 210, 0, 1461, 1462, 1463, 1464, 0,
	0, 0, 0, 150, 0, 1444, 0, 2132, 2132, 2132,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 1572, 2992, 209, 209, 0, 0, 0, 1476,
	2581, 0, 1486, 0, 0, 0, 1466, 1467, 1468, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 2243,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2377, 2377, 0, 0, 0, 0, 684, 684,
	2243, 1474, 0, 1828, 1828, 0, 0, 684, 2243, 1459,
	147, 80, 0, 81, 0, 825, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 0, 0, 117, 0, 0,
	0, 0, 0, 2668, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 3077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 1460, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 87, 590, 87,
	0, 87, 0, 0, 175, 0, 0, 0, 1477, 0,
	209, 0, 176, 0, 0, 0, 1188, 0, 209, 0,
	590, 0, 0, 2742, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2243, 2243, 2243,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1188,
	0, 0, 0, 0, 0, 2243, 0, 2653, 0, 0,
	1188, 1188, 209, 0, 0, 0, 820, 87, 0, 0,
	0, 0, 209, 209, 0, 87, 0, 0, 0, 0,
	0, 1475, 87, 0, 0, 2243, 0, 0, 0, 1478,
	0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446,
	3186, 0, 0, 0, 0, 2799, 0, 2529, 2530, 1955,
	2547, 2548, 2549, 1007, 0, 2803, 2804, 0, 0, 2807,
	0, 0, 0, 2810, 0, 0, 2817, 0, 0, 0,
	0, 0, 2814, 0, 87, 1188, 0, 0, 0, 0,
	0, 2821, 0, 0, 2581, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2841, 0, 0, 0, 2544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 2857, 2858, 0, 2859, 2860, 2861,
	0, 0, 2862, 0, 0, 0, 2864, 0, 2529, 2530,
	0, 2547, 2548, 2549, 0, 0, 1438, 0, 0, 0,
	0, 800, 0, 0, 0, 1458, 0, 2816, 2243, 0,
	2653, 2529, 2530, 3253, 2547, 2548, 2549, 2892, 2893, 1499,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2535, 0, 0, 0, 1508, 0, 0,
	0, 1514, 0, 566, 0, 2910, 0, 0, 0, 0,
	2544, 2811, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 3253, 0, 0, 0, 2243, 0, 0, 1461,
	1462, 1463, 1464, 2544, 209, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 1188, 2550, 0, 210, 1071, 210,
	210, 1071, 0, 1071, 210, 0, 0, 0, 2939, 0,
	0, 0, 210, 0, 0, 209, 209, 0, 0, 0,
	1466, 1467, 1468, 2947, 2950, 0, 0, 2545, 0, 0,
	0, 0, 0, 0, 2535, 2848, 0, 0, 0, 0,
	0, 519, 0, 0, 0, 0, 0, 2968, 0, 0,
	0, 3253, 0, 1071, 1071, 210, 210, 2535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 2551, 1600, 2550, 1603, 0, 0,
	0, 0, 210, 210, 210, 210, 0, 1071, 1071, 0,
	0, 0, 1071, 0, 209, 1071, 210, 210, 0, 2550,
	2653, 0, 0, 0, 1572, 0, 0, 0, 2545, 837,
	0, 2546, 0, 3022, 1188, 0, 1188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2545, 0, 0, 0, 0, 0, 0, 3408, 1465,
	0, 0, 0, 0, 1188, 209, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 2243, 1460, 0, 0,
	0, 0, 0, 0, 3056, 3057, 0, 0, 210, 0,
	3061, 3062, 0, 0, 0, 3065, 3066, 0, 0, 0,
	0, 210, 3070, 0, 0, 0, 0, 0, 0, 2848,
	0, 0, 208, 0, 208, 208, 0, 0, 0, 208,
	0, 3074, 2546, 0, 0, 0, 0, 590, 3078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2541, 2542, 2543, 2546, 0, 0, 2243, 2540,
	2538, 2539, 2531, 2532, 2533, 2534, 2536, 2537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3253, 0,
	208, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 1188, 0, 2243, 1449, 1447, 1448, 1440, 1441,
	1442, 1443, 1445, 1446, 0, 0, 0, 208, 208, 208,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 0, 0, 0, 0, 0, 0, 0,
	2950, 0, 0, 2541, 2542, 2543, 0, 0, 0, 0,
	2540, 2538, 2539, 2531, 2532, 2533, 2534, 2536, 2537, 0,
	0, 0, 0, 0, 0, 0, 2541, 2542, 2543, 0,
	0, 0, 0, 2540, 2538, 2539, 2531, 2532, 2533, 2534,
	2536, 2537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 820, 2950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 3221, 3222, 3223,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 210,
	210, 0, 1439, 0, 0, 0, 210, 0, 0, 0,
	0, 210, 3231, 3232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3239, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2950, 0, 0,
	0, 0, 0, 0, 214, 3275, 0, 800, 0, 0,
	800, 800, 1439, 3281, 2806, 0, 825, 0, 0, 837,
	0, 3287, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 1150, 1461, 1462, 1463, 1464, 1150, 0, 0, 1438,
	0, 0, 1444, 0, 2950, 0, 0, 2950, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 2022, 2950, 2950, 0, 0,
	0, 0, 0, 1466, 1467, 1468, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
	0, 0, 1508, 0, 2805, 0, 1508, 1071, 210, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 1461, 1462, 1463, 1464, 1602, 3349, 1007, 0,
	3352, 208, 1444, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 208, 1602, 0, 1436, 1437, 0,
	0, 590, 0, 210, 210, 0, 590, 0, 0, 0,
	210, 0, 0, 1466, 1467, 1468, 0, 0, 0, 0,
	995, 0, 0, 1439, 0, 0, 0, 0, 0, 210,
	0, 210, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 1603, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 1465, 0, 0, 87, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 204, 0, 825, 0, 0, 0, 0, 0, 1071,
	0, 1071, 0, 0, 0, 0, 0, 1071, 0, 0,
	1071, 210, 0, 0, 210, 2454, 0, 0, 0, 0,
	0, 0, 0, 1071, 1071, 1071, 3456, 3456, 3456, 0,
	0, 0, 210, 1461, 1462, 1463, 1464, 0, 0, 0,
	0, 210, 210, 1444, 210, 3475, 210, 0, 210, 0,
	210, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2950, 0, 2950, 0,
	1460, 0, 0, 590, 1466, 1467, 1468, 0, 210, 0,
	0, 0, 3456, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 1447,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 0, 208, 208,
	87, 0, 0, 1071, 0, 208, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 87,
	0, 0, 0, 0, 208, 0, 208, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 1449, 1447,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 1071, 0,
	0, 87, 0, 0, 0, 0, 208, 0, 0, 208,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	1150, 0, 0, 0, 0, 0, 590, 208, 0, 208,
	0, 208, 0, 208, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 1071, 208, 0, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1169, 0, 1068, 0, 0, 0, 0, 0, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1067, 0,
	0, 1168, 2022, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1169, 1169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1168, 1168, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 1150, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 1169, 1169, 0,
	0, 0, 1169, 210, 0, 1169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 1168, 1168, 1071,
	0, 0, 1168, 0, 0, 1168, 0, 0, 0, 0,
	0, 0, 210, 1071, 1436, 1437, 1071, 0, 210, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1169, 0, 0, 0,
	1439, 0, 0, 995, 210, 1007, 0, 0, 0, 210,
	208, 0, 0, 0, 0, 0, 1168, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 1061, 1458, 0, 0, 0,
	0, 210, 1179, 0, 210, 0, 210, 0, 210, 0,
	210, 210, 0, 0, 1071, 1071, 1071, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 2447, 0, 0, 0, 0, 0, 0, 210,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 1462, 1463, 1464, 0, 0, 0, 0, 1263, 0,
	1444, 0, 0, 0, 0, 0, 87, 87, 0, 0,
	87, 0, 0, 0, 210, 210, 0, 210, 0, 210,
	1287, 1287, 1287, 1179, 0, 0, 0, 208, 0, 0,
	0, 1466, 1467, 1468, 1318, 1319, 0, 0, 208, 87,
	87, 0, 210, 87, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 208, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 208,
	0, 0, 0, 0, 208, 0, 1392, 2529, 2530, 0,
	2547, 2548, 2549, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 208,
	0, 208, 0, 208, 0, 208, 208, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1068, 0, 2544,
	0, 208, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 208, 0, 208, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 208,
	208, 0, 208, 0, 208, 1150, 0, 0, 0, 0,
	1071, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 0, 2535, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2550, 1449, 1447, 1448, 1440,
	1441, 1442, 1443, 1445, 1446, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 210,
	0, 0, 0, 0, 0, 0, 0, 2545, 0, 648,
	0, 995, 995, 0, 0, 0, 0, 1169, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 210,
	210, 210, 1150, 0, 1609, 0, 0, 1168, 210, 0,
	649, 0, 0, 0, 1067, 0, 0, 1618, 0, 650,
	210, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 651, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 1150, 210, 0, 0,
	1071, 210, 0, 1071, 1071, 1071, 652, 0, 0, 0,
	210, 2546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1007, 653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	0, 0, 0, 0, 0, 654, 0, 0, 655, 0,
	0, 0, 0, 0, 1071, 1071, 0, 0, 0, 1169,
	0, 1169, 210, 0, 0, 0, 0, 1169, 1602, 0,
	1169, 0, 0, 1071, 0, 670, 0, 0, 0, 1168,
	0, 1168, 0, 1169, 1169, 1169, 0, 1168, 0, 0,
	1168, 0, 995, 0, 0, 0, 0, 0, 1071, 0,
	210, 1071, 210, 1168, 1168, 1168, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 210,
	0, 583, 2541, 2542, 2543, 87, 0, 0, 0, 2540,
	2538, 2539, 2531, 2532, 2533, 2534, 2536, 2537, 0, 0,
	0, 0, 0, 0, 208, 208, 208, 0, 0, 0,
	0, 0, 0, 1602, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 208, 0, 0, 657, 0,
	0, 1803, 0, 1071, 0, 0, 0, 0, 1815, 0,
	0, 0, 0, 1068, 0, 674, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 0, 1834,
	0, 1834, 208, 1067, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 673, 0, 208, 0, 0, 0, 0,
	659, 0, 0, 660, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 669, 208, 1068, 1815,
	0, 0, 1879, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 665, 0, 1067, 1071,
	1893, 664, 0, 0, 0, 0, 606, 0, 0, 0,
	1903, 0, 1905, 672, 1907, 208, 1909, 208, 1910, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 607,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 87, 0, 1927, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	608, 627, 0, 0, 0, 0, 0, 87, 1068, 0,
	0, 0, 1067, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 0, 610, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 633, 210, 210, 0, 0, 0, 611, 0, 0,
	0, 0, 1150, 0, 0, 0, 631, 0, 1071, 210,
	0, 1150, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 1071, 1071, 1071, 613, 0, 837, 614, 637,
	0, 0, 0, 640, 0, 0, 0, 0, 1071, 0,
	0, 0, 1007, 1007, 210, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	636, 0, 1150, 1068, 0, 0, 1169, 617, 0, 1168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2022, 0, 0, 1067, 0, 0, 1168, 0, 0, 0,
	0, 0, 0, 2187, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 1071, 208, 208, 0,
	0, 0, 0, 0, 1169, 1169, 1169, 0, 1169, 0,
	0, 0, 0, 639, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 1168, 1168, 1168, 0, 1168, 0,
	0, 0, 0, 1007, 0, 0, 621, 0, 0, 0,
	210, 1150, 0, 0, 1150, 0, 0, 0, 0, 1071,
	210, 210, 1071, 626, 0, 1071, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 635, 208,
	634, 0, 0, 623, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 1071, 0, 624, 0, 0, 0,
	0, 630, 0, 0, 0, 0, 641, 0, 638, 0,
	0, 0, 0, 628, 0, 1150, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 1150, 0, 0, 0,
	1179, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 2321, 0, 0, 0, 0, 1815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 1071, 2360,
	0, 1007, 1287, 0, 1287, 0, 1287, 0, 1179, 1179,
	1071, 0, 0, 0, 1602, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2403, 0, 0, 0, 0, 0,
	0, 0, 1150, 0, 0, 0, 0, 2408, 0, 1179,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 208, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 2428, 1179, 0, 2431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 210, 210, 0, 0, 0, 0, 726,
	2445, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 744, 731, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 1150, 0, 0, 0, 0, 0, 0, 1067, 732,
	0, 0, 0, 0, 734, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 741, 742, 0, 0, 0,
	0, 753, 210, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 1071, 760, 736, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	1150, 0, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 1169, 0, 210, 0, 1071, 0, 0, 0, 0,
	0, 1068, 0, 210, 0, 0, 0, 0, 0, 1068,
	0, 1168, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 1067, 730, 0, 0, 0, 0, 208, 0, 1067,
	1169, 0, 0, 1169, 1169, 1169, 0, 0, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 0, 1168, 1168, 1168, 0, 0, 208, 208,
	746, 745, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 1169, 1169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 761, 1150,
	0, 0, 0, 1169, 1168, 1168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1168, 0, 0, 0, 0, 1068, 0,
	0, 1068, 0, 0, 0, 735, 0, 2645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 1067, 0,
	0, 1067, 1150, 757, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 2681, 2683, 2321,
	0, 0, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 0, 0, 1150, 0, 0, 749, 0, 0,
	0, 0, 1068, 750, 0, 0, 0, 0, 208, 0,
	728, 0, 762, 1068, 0, 0, 0, 0, 208, 0,
	0, 0, 1067, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 1067, 0, 2721, 751, 1150, 0, 2725,
	748, 0, 0, 0, 0, 0, 0, 0, 2732, 763,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	2774, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 2795, 0,
	1179, 0, 0, 0, 0, 837, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 2801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 1068, 1458,
	0, 0, 0, 1169, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 1168, 0, 0, 0, 0, 0, 0,
	0, 0, 1169, 1169, 1169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1169, 0,
	0, 0, 1168, 1168, 1168, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 1068, 1168, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1150, 0,
	1486, 0, 837, 0, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	2993, 0, 0, 0, 1068, 0, 1068, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 3005, 0, 0,
	0, 0, 0, 0, 1067, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 1068,
	0, 0, 1169, 0, 0, 1068, 0, 1169, 0, 0,
	0, 1460, 3045, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 1168, 0, 0, 1067, 0, 1168, 0, 0,
	0, 1068, 0, 0, 1169, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 1168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1656, 0, 0, 0, 0, 0, 1475,
	1067, 0, 1450, 1451, 1457, 1456, 1452, 1478, 0, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1068, 0,
	0, 0, 2517, 0, 0, 0, 2518, 0, 0, 0,
	1068, 1668, 1650, 1657, 1640, 1678, 1677, 0, 1067, 1642,
	1641, 0, 0, 0, 0, 0, 0, 1688, 1689, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1679, 0,
	1675, 1674, 0, 0, 0, 0, 0, 1169, 0, 0,
	0, 0, 1673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1672, 1670, 1671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1661, 1655, 1663,
	1665, 1666, 1667, 1662, 0, 1660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1684, 1685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1169, 0, 0, 0, 0, 0, 0,
	0, 0, 1169, 1169, 0, 0, 0, 0, 1169, 1644,
	0, 0, 0, 1168, 0, 0, 0, 3260, 0, 0,
	0, 1676, 1168, 1168, 0, 1653, 0, 1654, 1168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 1669, 0, 0,
	3305, 1637, 1635, 1636, 1639, 1638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3330, 1179, 0, 0, 0, 1645, 1646, 1648, 1649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 1647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1643, 0,
	0, 1680, 1681, 1682, 1683, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1651, 0, 0, 0, 0, 1658, 1686, 0, 0,
	3379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 3414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3429, 218, 219, 220, 221, 222, 1072, 223, 1073,
	1074, 1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 1081,
	231, 232, 233, 234, 235, 236, 1082, 1083, 237, 475,
	476, 477, 1084, 238, 478, 1085, 1070, 1086, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 1087,
	249, 0, 250, 251, 252, 1088, 946, 253, 254, 1089,
	1090, 1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258,
	259, 260, 479, 480, 1096, 261, 1097, 263, 262, 1098,
	264, 1099, 1100, 265, 266, 267, 1101, 268, 1102, 269,
	270, 1103, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 1104, 215, 1105, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	1106, 288, 1107, 1108, 947, 289, 290, 1109, 291, 485,
	1110, 486, 292, 1111, 293, 294, 295, 296, 487, 488,
	489, 344, 949, 297, 298, 1112, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 1113, 948, 304, 490,
	306, 305, 307, 308, 309, 491, 1114, 492, 1115, 311,
	950, 493, 951, 312, 313, 314, 952, 315, 316, 0,
	0, 317, 318, 319, 320, 1116, 322, 321, 1117, 323,
	494, 953, 324, 325, 954, 1118, 326, 327, 1119, 1120,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 955, 340, 341, 343, 342, 1121, 217,
	956, 1122, 495, 496, 345, 346, 1123, 347, 348, 349,
	1124, 1125, 351, 352, 353, 1126, 1127, 354, 355, 497,
	957, 356, 958, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 1128, 365, 366, 499, 367, 500, 368,
	1129, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 1130, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 1131, 391, 959,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 1132, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 1133, 418, 398, 399,
	419, 960, 420, 503, 421, 422, 1134, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 1135,
	434, 435, 433, 1136, 436, 437, 438, 439, 440, 276,
	441, 1137, 442, 505, 506, 507, 508, 1138, 449, 1139,
	443, 444, 509, 445, 510, 1140, 446, 447, 448, 0,
	450, 451, 1141, 1142, 452, 453, 454, 455, 456, 458,
	1143, 459, 1144, 457, 460, 461, 462, 511, 512, 513,
	1145, 464, 463, 514, 1146, 1147, 1148, 1149, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 0,
	0, 0, 2175, 218, 219, 220, 221, 222, 1072, 223,
	1073, 1074, 1075, 1076, 470, 1077, 1078, 1079, 1080, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	1081, 231, 232, 233, 234, 235, 236, 1082, 1083, 237,
	475, 476, 477, 1084, 238, 478, 1085, 1070, 1086, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	1087, 249, 0, 250, 251, 252, 1088, 946, 253, 254,
	1089, 1090, 1092, 1091, 1093, 1094, 1095, 255, 256, 257,
	258, 259, 260, 479, 480, 1096, 261, 1097, 263, 262,
	1098, 264, 1099, 1100, 265, 266, 267, 1101, 268, 1102,
	269, 270, 1103, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 1104, 215, 1105, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 1106, 288, 1107, 1108, 947, 289, 290, 1109, 291,
	485, 1110, 486, 292, 1111, 293, 294, 295, 296, 487,
	488, 489, 344, 949, 297, 298, 1112, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 1113, 948, 304,
	490, 306, 305, 307, 308, 309, 491, 1114, 492, 1115,
	311, 950, 493, 951, 312, 313, 314, 952, 315, 316,
	0, 0, 317, 318, 319, 320, 1116, 322, 321, 1117,
	323, 494, 953, 324, 325, 954, 1118, 326, 327, 1119,
	1120, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 955, 340, 341, 343, 342, 1121,
	217, 956, 1122, 495, 496, 345, 346, 1123, 347, 348,
	349, 1124, 1125, 351, 352, 353, 1126, 1127, 354, 355,
	497, 957, 356, 958, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 1128, 365, 366, 499, 367, 500,
	368, 1129, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 1130, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 1131, 391,
	959, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 1132, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 1133, 418, 398,
	399, 419, 960, 420, 503, 421, 422, 1134, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	1135, 434, 435, 433, 1136, 436, 437, 438, 439, 440,
	276, 441, 1137, 442, 505, 506, 507, 508, 1138, 449,
	1139, 443, 444, 509, 445, 510, 1140, 446, 447, 448,
	0, 450, 451, 1141, 1142, 452, 453, 454, 455, 456,
	458, 1143, 459, 1144, 457, 460, 461, 462, 511, 512,
	513, 1145, 464, 463, 514, 1146, 1147, 1148, 1149, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3109, 218, 219, 220, 221,
	222, 1072, 223, 1073, 1074, 1075, 1076, 470, 1077, 1078,
	1079, 1080, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 1081, 231, 232, 233, 234, 235, 236,
	1082, 1083, 237, 475, 476, 477, 1084, 238, 478, 1085,
	1070, 1086, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 1087, 249, 0, 250, 251, 252, 1088,
	946, 253, 254, 1089, 1090, 1092, 1091, 1093, 1094, 1095,
	255, 256, 257, 258, 259, 260, 479, 480, 1096, 261,
	1097, 263, 262, 1098, 264, 1099, 1100, 265, 266, 267,
	1101, 268, 1102, 269, 270, 1103, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 1104,
	215, 1105, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 1106, 288, 1107, 1108, 947, 289,
	290, 1109, 291, 485, 1110, 486, 292, 1111, 293, 294,
	295, 296, 487, 488, 489, 344, 949, 297, 298, 1112,
	299, 300, 302, 0, 0, 0, 216, 301, 303, 310,
	1113, 948, 304, 490, 306, 305, 307, 308, 309, 491,
	1114, 492, 1115, 311, 950, 493, 951, 312, 313, 314,
	952, 315, 316, 0, 0, 317, 318, 319, 320, 1116,
	322, 321, 1117, 323, 494, 953, 324, 325, 954, 1118,
	326, 327, 1119, 1120, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 955, 340, 341,
	343, 342, 1121, 217, 956, 1122, 495, 496, 345, 346,
	1123, 347, 348, 349, 1124, 1125, 351, 352, 353, 1126,
	1127, 354, 355, 497, 957, 356, 958, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 1128, 365, 366,
	499, 367, 500, 368, 1129, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 1130, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 1131, 391, 959, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 1132,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	1133, 418, 398, 399, 419, 960, 420, 503, 421, 422,
	1134, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 1135, 434, 435, 433, 1136, 436, 437,
	438, 439, 440, 276, 441, 1137, 442, 505, 506, 507,
	508, 1138, 449, 1139, 443, 444, 509, 445, 510, 1140,
	446, 447, 448, 0, 450, 451, 1141, 1142, 452, 453,
	454, 455, 456, 458, 1143, 459, 1144, 457, 460, 461,
	462, 511, 512, 513, 1145, 464, 463, 514, 1146, 1147,
	1148, 1149, 465, 466, 515, 467, 468, 469, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3227, 0, 218, 219, 220, 221, 222,
	1072, 223, 1073, 1074, 1075, 1076, 470, 1077, 1078, 1079,
	1080, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 1081, 231, 232, 233, 234, 235, 236, 1082,
	1083, 237, 475, 476, 477, 1084, 238, 478, 1085, 1070,
	1086, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1087, 249, 0, 250, 251, 252, 1088, 946,
	253, 254, 1089, 1090, 1092, 1091, 1093, 1094, 1095, 255,
	256, 257, 258, 259, 260, 479, 480, 1096, 261, 1097,
	263, 262, 1098, 264, 1099, 1100, 265, 266, 267, 1101,
	268, 1102, 269, 270, 1103, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 1104, 215,
	1105, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 1106, 288, 1107, 1108, 947, 289, 290,
	1109, 291, 485, 1110, 486, 292, 1111, 293, 294, 295,
	296, 487, 488, 489, 344, 949, 297, 298, 1112, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1113,
	948, 304, 490, 306, 305, 307, 308, 309, 491, 1114,
	492, 1115, 311, 950, 493, 951, 312, 313, 314, 952,
	315, 316, 0, 0, 317, 318, 319, 320, 1116, 322,
	321, 1117, 323, 494, 953, 324, 325, 954, 1118, 326,
	327, 1119, 1120, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 955, 340, 341, 343,
	342, 1121, 217, 956, 1122, 495, 496, 345, 346, 1123,
	347, 348, 349, 1124, 1125, 351, 352, 353, 1126, 1127,
	354, 355, 497, 957, 356, 958, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1128, 365, 366, 499,
	367, 500, 368, 1129, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 1130, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1131, 391, 959, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1132, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1133,
	418, 398, 399, 419, 960, 420, 503, 421, 422, 1134,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 1135, 434, 435, 433, 1136, 436, 437, 438,
	439, 440, 276, 441, 1137, 442, 505, 506, 507, 508,
	1138, 449, 1139, 443, 444, 509, 445, 510, 1140, 446,
	447, 448, 0, 450, 451, 1141, 1142, 452, 453, 454,
	455, 456, 458, 1143, 459, 1144, 457, 460, 461, 462,
	511, 512, 513, 1145, 464, 463, 514, 1146, 1147, 1148,
	1149, 465, 466, 515, 467, 468, 469, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3158, 0, 218, 219, 220, 221, 222, 1072,
	223, 1073, 1074, 1075, 1076, 470, 1077, 1078, 1079, 1080,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 1081, 231, 232, 233, 234, 235, 236, 1082, 1083,
	237, 475, 476, 477, 1084, 238, 478, 1085, 1070, 1086,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 1087, 249, 0, 250, 251, 252, 1088, 946, 253,
	254, 1089, 1090, 1092, 1091, 1093, 1094, 1095, 255, 256,
	257, 258, 259, 260, 479, 480, 1096, 261, 1097, 263,
	262, 1098, 264, 1099, 1100, 265, 266, 267, 1101, 268,
	1102, 269, 270, 1103, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 1104, 215, 1105,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 1106, 288, 1107, 1108, 947, 289, 290, 1109,
	291, 485, 1110, 486, 292, 1111, 293, 294, 295, 296,
	487, 488, 489, 344, 949, 297, 298, 1112, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 1113, 948,
	304, 490, 306, 305, 307, 308, 309, 491, 1114, 492,
	1115, 311, 950, 493, 951, 312, 313, 314, 952, 315,
	316, 0, 0, 317, 318, 319, 320, 1116, 322, 321,
	1117, 323, 494, 953, 324, 325, 954, 1118, 326, 327,
	1119, 1120, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 955, 340, 341, 343, 342,
	1121, 217, 956, 1122, 495, 496, 345, 346, 1123, 347,
	348, 349, 1124, 1125, 351, 352, 353, 1126, 1127, 354,
	355, 497, 957, 356, 958, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 1128, 365, 366, 499, 367,
	500, 368, 1129, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 1130, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 1131,
	391, 959, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 1132, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 1133, 418,
	398, 399, 419, 960, 420, 503, 421, 422, 1134, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 1135, 434, 435, 433, 1136, 436, 437, 438, 439,
	440, 276, 441, 1137, 442, 505, 506, 507, 508, 1138,
	449, 1139, 443, 444, 509, 445, 510, 1140, 446, 447,
	448, 0, 450, 451, 1141, 1142, 452, 453, 454, 455,
	456, 458, 1143, 459, 1144, 457, 460, 461, 462, 511,
	512, 513, 1145, 464, 463, 514, 1146, 1147, 1148, 1149,
	465, 466, 515, 467, 468, 469, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2844, 0, 218, 219, 220, 221, 222, 1072, 223,
	1073, 1074, 1075, 1076, 470, 1077, 1078, 1079, 1080, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	1081, 231, 232, 233, 234, 235, 236, 1082, 1083, 237,
	475, 476, 477, 1084, 238, 478, 1085, 1070, 1086, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	1087, 249, 0, 250, 251, 252, 1088, 946, 253, 254,
	1089, 1090, 1092, 1091, 1093, 1094, 1095, 255, 256, 257,
	258, 259, 260, 479, 480, 1096, 261, 1097, 263, 262,
	1098, 264, 1099, 1100, 265, 266, 267, 1101, 268, 1102,
	269, 270, 1103, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 1104, 215, 1105, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 1106, 288, 1107, 1108, 947, 289, 290, 1109, 291,
	485, 1110, 486, 292, 1111, 293, 294, 295, 296, 487,
	488, 489, 344, 949, 297, 298, 1112, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 1113, 948, 304,
	490, 306, 305, 307, 308, 309, 491, 1114, 492, 1115,
	311, 950, 493, 951, 312, 313, 314, 952, 315, 316,
	0, 0, 317, 318, 319, 320, 1116, 322, 321, 1117,
	323, 494, 953, 324, 325, 954, 1118, 326, 327, 1119,
	1120, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 955, 340, 341, 343, 342, 1121,
	217, 956, 1122, 495, 496, 345, 346, 1123, 347, 348,
	349, 1124, 1125, 351, 352, 353, 1126, 1127, 354, 355,
	497, 957, 356, 958, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 1128, 365, 366, 499, 367, 500,
	368, 1129, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 1130, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 1131, 391,
	959, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 1132, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 1133, 418, 398,
	399, 419, 960, 420, 503, 421, 422, 1134, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	1135, 434, 435, 433, 1136, 436, 437, 438, 439, 440,
	276, 441, 1137, 442, 505, 506, 507, 508, 1138, 449,
	1139, 443, 444, 509, 445, 510, 1140, 446, 447, 448,
	0, 450, 451, 1141, 1142, 452, 453, 454, 455, 456,
	458, 1143, 459, 1144, 457, 460, 461, 462, 511, 512,
	513, 1145, 464, 463, 514, 1146, 1147, 1148, 1149, 465,
	466, 515, 467, 468, 469, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2836, 0, 218, 219, 220, 221, 222, 1072, 223, 1073,
	1074, 1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 1081,
	231, 232, 233, 234, 235, 236, 1082, 1083, 237, 475,
	476, 477, 1084, 238, 478, 1085, 1070, 1086, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 1087,
	249, 0, 250, 251, 252, 1088, 946, 253, 254, 1089,
	1090, 1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258,
	259, 260, 479, 480, 1096, 261, 1097, 263, 262, 1098,
	264, 1099, 1100, 265, 266, 267, 1101, 268, 1102, 269,
	270, 1103, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 1104, 215, 1105, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	1106, 288, 1107, 1108, 947, 289, 290, 1109, 291, 485,
	1110, 486, 292, 1111, 293, 294, 295, 296, 487, 488,
	489, 344, 949, 297, 298, 1112, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 1113, 948, 304, 490,
	306, 305, 307, 308, 309, 491, 1114, 492, 1115, 311,
	950, 493, 951, 312, 313, 314, 952, 315, 316, 0,
	0, 317, 318, 319, 320, 1116, 322, 321, 1117, 323,
	494, 953, 324, 325, 954, 1118, 326, 327, 1119, 1120,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 955, 340, 341, 343, 342, 1121, 217,
	956, 1122, 495, 496, 345, 346, 1123, 347, 348, 349,
	1124, 1125, 351, 352, 353, 1126, 1127, 354, 355, 497,
	957, 356, 958, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 1128, 365, 366, 499, 367, 500, 368,
	1129, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 1130, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 1131, 391, 959,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 1132, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 1133, 418, 398, 399,
	419, 960, 420, 503, 421, 422, 1134, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 1135,
	434, 435, 433, 1136, 436, 437, 438, 439, 440, 276,
	441, 1137, 442, 505, 506, 507, 508, 1138, 449, 1139,
	443, 444, 509, 445, 510, 1140, 446, 447, 448, 0,
	450, 451, 1141, 1142, 452, 453, 454, 455, 456, 458,
	1143, 459, 1144, 457, 460, 461, 462, 511, 512, 513,
	1145, 464, 463, 514, 1146, 1147, 1148, 1149, 465, 466,
	515, 467, 468, 469, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2706,
	0, 218, 219, 220, 221, 222, 1072, 223, 1073, 1074,
	1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 1081, 231,
	232, 233, 234, 235, 236, 1082, 1083, 237, 475, 476,
	477, 1084, 238, 478, 1085, 1070, 1086, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 1087, 249,
	0, 250, 251, 252, 1088, 946, 253, 254, 1089, 1090,
	1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258, 259,
	260, 479, 480, 1096, 261, 1097, 263, 262, 1098, 264,
	1099, 1100, 265, 266, 267, 1101, 268, 1102, 269, 270,
	1103, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 1104, 215, 1105, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 1106,
	288, 1107, 1108, 947, 289, 290, 1109, 291, 485, 1110,
	486, 292, 1111, 293, 294, 295, 296, 487, 488, 489,
	344, 949, 297, 298, 1112, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 1113, 948, 304, 490, 306,
	305, 307, 308, 309, 491, 1114, 492, 1115, 311, 950,
	493, 951, 312, 313, 314, 952, 315, 316, 0, 0,
	317, 318, 319, 320, 1116, 322, 321, 1117, 323, 494,
	953, 324, 325, 954, 1118, 326, 327, 1119, 1120, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 955, 340, 341, 343, 342, 1121, 217, 956,
	1122, 495, 496, 345, 346, 1123, 347, 348, 349, 1124,
	1125, 351, 352, 353, 1126, 1127, 354, 355, 497, 957,
	356, 958, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 1128, 365, 366, 499, 367, 500, 368, 1129,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 1130, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 1131, 391, 959, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 1132, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 1133, 418, 398, 399, 419,
	960, 420, 503, 421, 422, 1134, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 1135, 434,
	435, 433, 1136, 436, 437, 438, 439, 440, 276, 441,
	1137, 442, 505, 506, 507, 508, 1138, 449, 1139, 443,
	444, 509, 445, 510, 1140, 446, 447, 448, 0, 450,
	451, 1141, 1142, 452, 453, 454, 455, 456, 458, 1143,
	459, 1144, 457, 460, 461, 462, 511, 512, 513, 1145,
	464, 463, 514, 1146, 1147, 1148, 1149, 465, 466, 515,
	467, 468, 469, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2067, 0,
	218, 219, 220, 221, 222, 1072, 223, 1073, 1074, 1075,
	1076, 470, 1077, 1078, 1079, 1080, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 1081, 231, 232,
	233, 234, 235, 236, 1082, 1083, 237, 475, 476, 477,
	1084, 238, 478, 1085, 1070, 1086, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 1087, 249, 0,
	250, 251, 252, 1088, 946, 253, 254, 1089, 1090, 1092,
	1091, 1093, 1094, 1095, 255, 256, 257, 258, 259, 260,
	479, 480, 1096, 261, 1097, 263, 262, 1098, 264, 1099,
	1100, 265, 266, 267, 1101, 268, 1102, 269, 270, 1103,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 482, 483, 1104, 215, 1105, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 1106, 288,
	1107, 1108, 947, 289, 290, 1109, 291, 485, 1110, 486,
	292, 1111, 293, 294, 295, 296, 487, 488, 489, 344,
	949, 297, 298, 1112, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 1113, 948, 304, 490, 306, 305,
	307, 308, 309, 491, 1114, 492, 1115, 311, 950, 493,
	951, 312, 313, 314, 952, 315, 316, 0, 0, 317,
	318, 319, 320, 1116, 322, 321, 1117, 323, 494, 953,
	324, 325, 954, 1118, 326, 327, 1119, 1120, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 955, 340, 341, 343, 342, 1121, 217, 956, 1122,
	495, 496, 345, 346, 1123, 347, 348, 349, 1124, 1125,
	351, 352, 353, 1126, 1127, 354, 355, 497, 957, 356,
	958, 498, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 1128, 365, 366, 499, 367, 500, 368, 1129, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	1130, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 1131, 391, 959, 392, 393,
	394, 395, 502, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 1132, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 1133, 418, 398, 399, 419, 960,
	420, 503, 421, 422, 1134, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 504, 1135, 434, 435,
	433, 1136, 436, 437, 438, 439, 440, 276, 441, 1137,
	442, 505, 506, 507, 508, 1138, 449, 1139, 443, 444,
	509, 445, 510, 1140, 446, 447, 448, 0, 450, 451,
	1141, 1142, 452, 453, 454, 455, 456, 458, 1143, 459,
	1144, 457, 460, 461, 462, 511, 512, 513, 1145, 464,
	463, 514, 1146, 1147, 1148, 1149, 465, 466, 515, 467,
	468, 469, 1173, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1786, 0, 0,
	0, 218, 219, 220, 221, 222, 1072, 223, 1073, 1074,
	1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 1081, 231,
	232, 233, 234, 235, 236, 1082, 1083, 237, 475, 476,
	477, 1084, 238, 478, 1085, 1070, 1086, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 1087, 249,
	0, 250, 251, 252, 1088, 946, 253, 254, 1089, 1090,
	1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258, 259,
	260, 479, 480, 1096, 261, 1097, 263, 262, 1098, 264,
	1099, 1100, 265, 266, 267, 1101, 268, 1102, 269, 270,
	1103, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 1104, 215, 1105, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 1106,
	288, 1107, 1108, 947, 289, 290, 1109, 291, 485, 1110,
	486, 292, 1111, 293, 294, 295, 296, 487, 488, 489,
	344, 949, 297, 298, 1112, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 1113, 948, 304, 490, 306,
	305, 307, 308, 309, 491, 1114, 492, 1115, 311, 950,
	493, 951, 312, 313, 314, 952, 315, 316, 0, 0,
	317, 318, 319, 320, 1116, 322, 321, 1117, 323, 494,
	953, 324, 325, 954, 1118, 326, 327, 1119, 1120, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 955, 340, 341, 343, 342, 1121, 217, 956,
	1122, 495, 496, 345, 346, 1123, 347, 348, 349, 1124,
	1125, 351, 352, 353, 1126, 1127, 354, 355, 497, 957,
	356, 958, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 1128, 365, 366, 499, 367, 500, 368, 1129,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 1130, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 1131, 391, 959, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 1132, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 1133, 418, 398, 399, 419,
	960, 420, 503, 421, 422, 1134, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 1135, 434,
	435, 433, 1136, 436, 437, 438, 439, 440, 276, 441,
	1137, 442, 505, 506, 507, 508, 1138, 449, 1139, 443,
	444, 509, 445, 510, 1140, 446, 447, 448, 0, 450,
	451, 1141, 1142, 452, 453, 454, 455, 456, 458, 1143,
	459, 1144, 457, 460, 461, 462, 511, 512, 513, 1145,
	464, 463, 514, 1146, 1147, 1148, 1149, 465, 466, 515,
	467, 468, 469, 1062, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 1072, 223, 1073,
	1074, 1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 1081,
	231, 232, 233, 234, 235, 236, 1082, 1083, 237, 475,
	476, 477, 1084, 238, 478, 1085, 1070, 1086, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 1087,
	249, 0, 250, 251, 252, 1088, 946, 253, 254, 1089,
	1090, 1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258,
	259, 260, 479, 480, 1096, 261, 1097, 263, 262, 1098,
	264, 1099, 1100, 265, 266, 267, 1101, 268, 1102, 269,
	270, 1103, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 1104, 215, 1105, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	1106, 288, 1107, 1108, 947, 289, 290, 1109, 291, 485,
	1110, 486, 292, 1111, 293, 294, 295, 296, 487, 488,
	489, 344, 949, 297, 298, 1112, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 1113, 948, 304, 490,
	306, 305, 307, 308, 309, 491, 1114, 492, 1115, 311,
	950, 493, 951, 312, 313, 314, 952, 315, 316, 0,
	0, 317, 318, 319, 320, 1116, 322, 321, 1117, 323,
	494, 953, 324, 325, 954, 1118, 326, 327, 1119, 1120,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 955, 340, 341, 343, 342, 1121, 217,
	956, 1122, 495, 496, 345, 346, 1123, 347, 348, 349,
	1124, 1125, 351, 352, 353, 1126, 1127, 354, 355, 497,
	957, 356, 958, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 1128, 365, 366, 499, 367, 500, 368,
	1129, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 1130, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 1131, 391, 959,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 1132, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 1133, 418, 398, 399,
	419, 960, 420, 503, 421, 422, 1134, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 1135,
	434, 435, 433, 1136, 436, 437, 438, 439, 440, 276,
	441, 1137, 442, 505, 506, 507, 508, 1138, 449, 1139,
	443, 444, 509, 445, 510, 1140, 446, 447, 448, 0,
	450, 451, 1141, 1142, 452, 453, 454, 455, 456, 458,
	1143, 459, 1144, 457, 460, 461, 462, 511, 512, 513,
	1145, 464, 463, 514, 1146, 1147, 1148, 1149, 465, 466,
	515, 467, 468, 469, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1072, 223, 1073, 1074,
	1075, 1076, 470, 1077, 1078, 1079, 1080, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 1081, 231,
	232, 233, 234, 235, 236, 1082, 1083, 237, 475, 476,
	477, 1084, 238, 478, 1085, 1070, 1086, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 1087, 249,
	0, 250, 251, 252, 1088, 946, 253, 254, 1089, 1090,
	1092, 1091, 1093, 1094, 1095, 255, 256, 257, 258, 259,
	260, 479, 480, 1096, 261, 1097, 263, 262, 1098, 264,
	1099, 1100, 265, 266, 267, 1101, 268, 1102, 269, 270,
	1103, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 1104, 215, 1105, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 1106,
	288, 1107, 1108, 947, 289, 290, 1109, 291, 485, 1110,
	486, 292, 1111, 293, 294, 295, 296, 487, 488, 489,
	344, 949, 297, 298, 1112, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 1113, 948, 304, 490, 306,
	305, 307, 308, 309, 491, 1114, 492, 1115, 311, 950,
	493, 951, 312, 313, 314, 952, 315, 316, 0, 0,
	317, 318, 319, 320, 1116, 322, 321, 1117, 323, 494,
	953, 324, 325, 954, 1118, 326, 327, 1119, 1120, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 955, 340, 341, 343, 342, 1121, 217, 956,
	1122, 495, 496, 345, 346, 1123, 347, 348, 349, 1124,
	1125, 351, 352, 353, 1126, 1127, 354, 355, 497, 957,
	356, 958, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 1128, 365, 366, 499, 367, 500, 368, 1129,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 1130, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 1131, 391, 959, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 1132, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 1133, 418, 398, 399, 419,
	960, 420, 503, 421, 422, 1134, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 1135, 434,
	435, 433, 1136, 436, 437, 438, 439, 440, 276, 441,
	1137, 442, 505, 506, 507, 508, 1138, 449, 1139, 443,
	444, 509, 445, 510, 1140, 446, 447, 448, 0, 450,
	451, 1141, 1142, 452, 453, 454, 455, 456, 458, 1143,
	459, 1144, 457, 460, 461, 462, 511, 512, 513, 1145,
	464, 463, 514, 1146, 1147, 1148, 1149, 465, 466, 515,
	467, 468, 469, 2043, 0, 888, 845, 846, 847, 843,
	844, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 2040, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 2041, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	2039, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 2042,
	0, 0, 0, 0, 0, 0, 858, 2038, 0, 821,
	856, 888, 845, 846, 847, 843, 844, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 181, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 183,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 1312, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 175, 465, 466, 515, 467, 468, 469,
	832, 176, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 888, 845, 846, 847, 843,
	844, 857, 1513, 1511, 0, 0, 856, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 181, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 183, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 1312, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 175, 465, 466,
	515, 467, 468, 469, 832, 176, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 888,
	845, 846, 847, 843, 844, 857, 1513, 2467, 0, 0,
	856, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 937, 862, 0,
	0, 0, 224, 225, 226, 227, 471, 903, 882, 914,
	872, 913, 912, 0, 231, 874, 873, 234, 235, 236,
	864, 936, 237, 972, 973, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 917, 260, 910, 909, 834, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 908, 267,
	0, 268, 0, 269, 270, 0, 271, 840, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 853,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 907,
	905, 906, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 863, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 884, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 896, 887, 898, 900, 901, 902, 897,
	0, 889, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 922, 923, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 876, 337, 955, 340, 341,
	343, 342, 831, 217, 956, 854, 941, 911, 345, 346,
	0, 885, 348, 886, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 904, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 841, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 181,
	414, 415, 877, 878, 880, 881, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 899, 879, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 945, 427,
	428, 429, 967, 0, 434, 435, 433, 183, 436, 437,
	438, 439, 440, 276, 875, 0, 442, 918, 919, 920,
	921, 0, 449, 0, 443, 444, 968, 445, 969, 852,
	446, 447, 448, 0, 450, 451, 0, 835, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 883, 460, 461,
	462, 1312, 915, 962, 0, 464, 463, 514, 0, 0,
	0, 175, 465, 466, 515, 467, 468, 469, 832, 176,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 828, 829, 888, 845, 846, 847, 843, 844, 857,
	1513, 1511, 0, 0, 856, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 2128, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 2133, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 2129, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 2130, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 1375, 856, 888,
	845, 846, 847, 843, 844, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 937, 862, 0,
	0, 0, 224, 225, 226, 227, 471, 903, 882, 914,
	872, 913, 912, 0, 231, 874, 873, 234, 235, 236,
	864, 936, 237, 972, 973, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 917, 260, 910, 909, 834, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 908, 267,
	0, 268, 0, 269, 270, 0, 271, 840, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 853,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 907,
	905, 906, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 863, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 884, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 896, 887, 898, 900, 901, 902, 897,
	0, 889, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 922, 923, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 876, 337, 955, 340, 341,
	343, 342, 831, 217, 956, 854, 941, 911, 345, 346,
	0, 885, 348, 886, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 904, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 841, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 877, 878, 880, 881, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 899, 879, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 945, 427,
	428, 429, 967, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 875, 0, 442, 918, 919, 920,
	921, 0, 449, 0, 443, 444, 968, 445, 969, 852,
	446, 447, 448, 0, 450, 451, 0, 835, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 883, 460, 461,
	462, 511, 915, 962, 0, 464, 463, 514, 1374, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 832, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 828, 829, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 824, 856, 888, 845, 846, 847, 843,
	844, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	836, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 888,
	845, 846, 847, 843, 844, 857, 858, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 937, 862, 0,
	0, 0, 224, 225, 226, 227, 471, 903, 882, 914,
	872, 913, 912, 0, 231, 874, 873, 234, 235, 236,
	864, 936, 237, 972, 973, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 3426, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 917, 260, 910, 909, 834, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 908, 267,
	0, 268, 0, 269, 270, 0, 271, 840, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 853,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 907,
	905, 906, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 863, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 884, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 896, 887, 898, 900, 901, 902, 897,
	0, 889, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 922, 923, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 876, 337, 955, 340, 341,
	343, 342, 831, 217, 956, 854, 941, 911, 345, 346,
	0, 885, 348, 886, 836, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 904, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 841, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 877, 878, 880, 881, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 899, 879, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 945, 427,
	428, 429, 967, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 875, 0, 442, 918, 919, 920,
	921, 0, 449, 0, 443, 444, 968, 445, 969, 852,
	446, 447, 448, 0, 450, 451, 0, 835, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 883, 460, 461,
	462, 511, 915, 962, 0, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 832, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 828, 829, 888, 845, 846, 847, 843, 844, 857,
	858, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 0, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 3284, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 836, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 0, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 888, 845, 846,
	847, 843, 844, 857, 858, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 862, 0, 0, 0,
	224, 225, 226, 227, 471, 903, 882, 914, 872, 913,
	912, 0, 231, 874, 873, 234, 235, 236, 864, 936,
	237, 972, 973, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 917, 260, 910, 909, 834, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 908, 267, 0, 268,
	0, 269, 270, 0, 271, 840, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 853, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 907, 905, 906,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 863, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	884, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 896, 887, 898, 900, 901, 902, 897, 0, 889,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 922,
	923, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 876, 337, 955, 340, 341, 343, 342,
	831, 3016, 956, 854, 941, 911, 345, 346, 0, 885,
	348, 886, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 904, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 841, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	877, 878, 880, 881, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 899, 879, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 945, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 875, 0, 442, 918, 919, 920, 921, 0,
	449, 0, 443, 444, 968, 445, 969, 852, 446, 447,
	448, 0, 450, 451, 0, 835, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 883, 460, 461, 462, 511,
	915, 962, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 832, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 828,
	829, 1573, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 856, 888, 845, 846, 847, 843, 844, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 0, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 0, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 2823, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 888, 845, 846,
	847, 843, 844, 857, 858, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 862, 0, 0, 0,
	224, 225, 226, 227, 471, 903, 882, 914, 872, 913,
	912, 0, 231, 874, 873, 234, 235, 236, 864, 936,
	237, 972, 973, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 917, 260, 910, 909, 834, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 908, 267, 0, 268,
	0, 269, 270, 0, 271, 840, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 853, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 907, 905, 906,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 863, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	884, 0, 0, 0, 1957, 301, 303, 310, 0, 948,
	304, 896, 887, 898, 900, 901, 902, 897, 0, 889,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 922,
	923, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 876, 337, 955, 340, 341, 343, 342,
	831, 217, 956, 854, 941, 911, 345, 346, 0, 885,
	348, 886, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 1956, 369, 0, 370, 371, 372, 373, 374,
	375, 904, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 841, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	877, 878, 880, 881, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 899, 879, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 945, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 875, 0, 442, 918, 919, 920, 921, 0,
	449, 0, 443, 444, 968, 445, 969, 852, 446, 447,
	448, 0, 450, 451, 0, 835, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 883, 460, 461, 462, 511,
	915, 962, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 832, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 828,
	829, 888, 845, 846, 847, 843, 844, 857, 858, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 836, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 888, 845, 846, 847, 843,
	844, 857, 858, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 1573,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	856, 888, 845, 846, 847, 843, 844, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 2133,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 888, 845, 846, 847, 843,
	844, 857, 858, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 0,
	0, 0, 0, 0, 0, 0, 858, 1511, 0, 2138,
	856, 888, 845, 846, 847, 843, 844, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 0, 2136, 856, 888, 845, 846,
	847, 843, 844, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 862, 0, 0, 0,
	224, 225, 226, 227, 471, 903, 882, 914, 872, 913,
	912, 0, 231, 874, 873, 234, 235, 236, 864, 936,
	237, 972, 973, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 917, 260, 910, 909, 834, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 908, 267, 0, 268,
	0, 269, 270, 0, 271, 840, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 853, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 907, 905, 906,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 863, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	884, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 896, 887, 898, 900, 901, 902, 897, 0, 889,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 922,
	923, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 876, 337, 955, 340, 341, 343, 342,
	831, 217, 956, 854, 941, 911, 345, 346, 0, 885,
	348, 886, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 904, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 841, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	877, 878, 880, 881, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 899, 879, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 945, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 875, 0, 442, 918, 919, 920, 921, 0,
	449, 0, 443, 444, 968, 445, 969, 852, 446, 447,
	448, 0, 450, 451, 0, 835, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 883, 460, 461, 462, 511,
	915, 962, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 832, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 828,
	829, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 2124, 856, 888, 845, 846, 847, 843, 844, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 0, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 0, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 2113, 856, 888,
	845, 846, 847, 843, 844, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 937, 862, 0,
	0, 0, 224, 225, 226, 227, 471, 903, 882, 914,
	872, 913, 912, 0, 231, 874, 873, 234, 235, 236,
	864, 936, 237, 972, 973, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 917, 260, 910, 909, 834, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 908, 267,
	0, 268, 0, 269, 270, 0, 271, 840, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 853,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 907,
	905, 906, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 863, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 884, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 896, 887, 898, 900, 901, 902, 897,
	0, 889, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 922, 923, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 876, 337, 955, 340, 341,
	343, 342, 831, 217, 956, 854, 941, 911, 345, 346,
	0, 885, 348, 886, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 904, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 841, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 877, 878, 880, 881, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 899, 879, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 945, 427,
	428, 429, 967, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 875, 0, 442, 918, 919, 920,
	921, 0, 449, 0, 443, 444, 968, 445, 969, 852,
	446, 447, 448, 0, 450, 451, 0, 835, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 883, 460, 461,
	462, 511, 915, 962, 0, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 832, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 828, 829, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 2111, 856, 2103, 845, 846, 847, 843,
	844, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 2106, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 2107, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 2108, 2105,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 2109, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 2104, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 2100,
	856, 2103, 845, 846, 847, 843, 844, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 2106, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 2107, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 2108, 2105, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	2109, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 2104, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 888, 845, 846, 847, 843,
	844, 857, 858, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 834, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 831, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 835, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 832, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 828, 829, 0,
	0, 0, 0, 0, 1519, 0, 858, 0, 0, 0,
	856, 888, 845, 846, 847, 843, 844, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 1944, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 471, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 450, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 0, 1202, 856, 888, 845, 846,
	847, 843, 844, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 862, 0, 0, 0,
	224, 225, 226, 227, 471, 903, 882, 914, 872, 913,
	912, 0, 231, 874, 873, 234, 235, 236, 864, 936,
	237, 972, 973, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 917, 260, 910, 909, 834, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 908, 267, 0, 268,
	0, 269, 270, 0, 271, 840, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 853, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 907, 905, 906,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 863, 292, 0, 293, 294, 295, 296,
	1201, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	884, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 896, 887, 898, 900, 901, 902, 897, 0, 889,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 922,
	923, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 876, 337, 955, 340, 341, 343, 342,
	831, 217, 956, 854, 941, 911, 345, 346, 0, 885,
	348, 886, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 904, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 841, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	877, 878, 880, 881, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 899, 879, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 945, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 875, 0, 442, 918, 919, 920, 921, 0,
	449, 0, 443, 444, 968, 445, 969, 852, 446, 447,
	448, 0, 450, 451, 0, 835, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 883, 460, 461, 462, 511,
	915, 962, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 832, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 828,
	829, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 1196, 856, 888, 845, 846, 847, 843, 844, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 0, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 1195, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 0, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 1191, 856, 888,
	845, 846, 847, 843, 844, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 937, 862, 0,
	0, 0, 224, 225, 226, 227, 471, 903, 882, 914,
	872, 913, 912, 0, 231, 874, 873, 234, 235, 236,
	864, 936, 237, 972, 973, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 917, 260, 910, 909, 834, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 908, 267,
	0, 268, 0, 269, 270, 0, 271, 840, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 853,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 907,
	905, 906, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 863, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 884, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 896, 887, 898, 900, 901, 902, 897,
	0, 889, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 922, 923, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 876, 337, 955, 340, 341,
	343, 342, 831, 217, 956, 854, 941, 911, 345, 346,
	0, 885, 348, 886, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 904, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 841, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 877, 878, 880, 881, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 899, 879, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 945, 427,
	428, 429, 967, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 875, 0, 442, 918, 919, 920,
	921, 0, 449, 0, 443, 444, 968, 445, 969, 852,
	446, 447, 448, 0, 450, 451, 0, 835, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 883, 460, 461,
	462, 511, 915, 962, 0, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 832, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 828, 829, 888, 845, 846, 847, 843, 844, 857,
	858, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 862, 0, 0, 0, 224, 225, 226, 227,
	471, 903, 882, 914, 872, 913, 912, 0, 231, 874,
	873, 234, 235, 236, 864, 936, 237, 972, 973, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 917, 260,
	910, 909, 834, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 908, 267, 0, 268, 0, 269, 270, 0,
	271, 840, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 853, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 907, 905, 906, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 863,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 884, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 896, 887, 898,
	900, 901, 902, 897, 0, 889, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 922, 923, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 876,
	337, 955, 340, 341, 343, 342, 831, 217, 956, 854,
	941, 911, 345, 346, 0, 885, 348, 886, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 904, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 841, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 877, 878, 880, 881,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 899, 879, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 945, 427, 428, 429, 967, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 875, 0,
	442, 918, 919, 920, 921, 0, 449, 0, 443, 444,
	968, 445, 969, 852, 446, 447, 448, 0, 450, 451,
	0, 835, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 883, 460, 461, 462, 511, 915, 962, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 832, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 828, 829, 888, 845, 846,
	847, 843, 844, 857, 858, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 862, 0, 0, 0,
	224, 225, 226, 227, 471, 903, 882, 914, 872, 913,
	912, 0, 231, 874, 873, 234, 235, 236, 864, 936,
	237, 972, 973, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	3455, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 917, 260, 910, 909, 834, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 908, 267, 0, 268,
	0, 269, 270, 0, 271, 840, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 853, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 907, 905, 906,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 863, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	884, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 896, 887, 898, 900, 901, 902, 897, 0, 889,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 922,
	923, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 876, 337, 955, 340, 341, 343, 342,
	831, 217, 956, 854, 941, 911, 345, 346, 0, 885,
	348, 886, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 904, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 841, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	877, 878, 880, 881, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 899, 879, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 945, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 875, 0, 442, 918, 919, 920, 921, 0,
	449, 0, 443, 444, 968, 445, 969, 852, 446, 447,
	448, 0, 3454, 451, 0, 835, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 883, 460, 461, 462, 511,
	915, 962, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 832, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 828,
	829, 888, 845, 846, 847, 843, 844, 857, 858, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	862, 0, 0, 0, 224, 225, 226, 227, 3453, 903,
	882, 914, 872, 913, 912, 0, 231, 874, 873, 234,
	235, 236, 864, 936, 237, 972, 973, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 3455, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 917, 260, 910, 909,
	834, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	908, 267, 0, 268, 0, 269, 270, 0, 271, 840,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 853, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 907, 905, 906, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 863, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 884, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 896, 887, 898, 900, 901,
	902, 897, 0, 889, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 922, 923, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 876, 337, 955,
	340, 341, 343, 342, 831, 217, 956, 854, 941, 911,
	345, 346, 0, 885, 348, 886, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 904, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	841, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 877, 878, 880, 881, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 899,
	879, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	945, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 875, 0, 442, 918,
	919, 920, 921, 0, 449, 0, 443, 444, 968, 445,
	969, 852, 446, 447, 448, 0, 3454, 451, 0, 835,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 883,
	460, 461, 462, 511, 915, 962, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	832, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 828, 829, 888, 845, 846, 847, 843,
	844, 857, 858, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 937, 862, 0, 0, 0, 224, 225,
	226, 227, 471, 903, 882, 914, 872, 913, 912, 0,
	231, 874, 873, 234, 235, 236, 864, 936, 237, 972,
	973, 477, 0, 238, 943, 0, 926, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 946, 253, 254, 929,
	927, 928, 933, 931, 930, 932, 255, 256, 257, 258,
	917, 260, 910, 909, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 908, 267, 0, 268, 0, 269,
	270, 0, 271, 840, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 963, 964, 853, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 907, 905, 906, 0, 287,
	0, 288, 0, 0, 947, 289, 290, 0, 291, 970,
	0, 863, 292, 0, 293, 294, 295, 296, 938, 939,
	942, 344, 949, 297, 298, 0, 299, 300, 884, 0,
	0, 0, 216, 301, 303, 310, 0, 948, 304, 896,
	887, 898, 900, 901, 902, 897, 0, 889, 0, 311,
	950, 940, 951, 312, 313, 314, 952, 922, 923, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	971, 953, 324, 325, 954, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 876, 337, 955, 340, 341, 343, 342, 0, 217,
	956, 854, 941, 911, 345, 346, 0, 885, 348, 886,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	957, 356, 958, 965, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 966, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 904,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 959,
	392, 393, 394, 395, 841, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 877, 878,
	880, 881, 409, 413, 416, 417, 934, 418, 398, 399,
	419, 960, 420, 899, 879, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 945, 427, 428, 429, 967, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	875, 0, 442, 918, 919, 920, 921, 0, 449, 0,
	443, 444, 968, 445, 969, 852, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	935, 459, 0, 883, 460, 461, 462, 511, 915, 962,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 888, 845, 846, 847, 843, 844,
	857, 0, 2121, 0, 0, 0, 0, 2119, 2120, 0,
	0, 218, 219, 220, 221, 222, 858, 223, 0, 0,
	856, 0, 937, 862, 0, 0, 0, 224, 225, 226,
	227, 0, 903, 882, 914, 872, 913, 912, 0, 231,
	874, 873, 234, 235, 236, 864, 936, 237, 972, 973,
	477, 0, 238, 943, 0, 926, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 946, 253, 3455, 929, 927,
	928, 933, 931, 930, 932, 255, 256, 257, 258, 917,
	260, 910, 909, 834, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 908, 267, 0, 268, 0, 269, 270,
	0, 271, 840, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 963, 964, 853, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 907, 905, 906, 0, 287, 0,
	288, 0, 0, 947, 289, 290, 0, 291, 970, 0,
	863, 292, 0, 293, 294, 295, 296, 938, 939, 942,
	344, 0, 297, 298, 0, 299, 300, 884, 0, 0,
	0, 216, 301, 303, 310, 0, 948, 304, 896, 887,
	898, 900, 901, 902, 897, 0, 889, 0, 311, 0,
	940, 0, 312, 313, 314, 952, 922, 923, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 971,
	953, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	876, 337, 955, 340, 341, 343, 342, 831, 217, 0,
	854, 941, 911, 345, 346, 0, 885, 348, 886, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 957,
	356, 958, 965, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 966, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 904, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 959, 392,
	393, 394, 395, 841, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 877, 878, 880,
	881, 409, 413, 416, 417, 934, 418, 398, 399, 419,
	0, 420, 899, 879, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 945, 427, 428, 429, 967, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 875,
	0, 442, 918, 919, 920, 921, 0, 449, 0, 443,
	444, 968, 445, 969, 852, 446, 447, 448, 0, 3454,
	451, 0, 835, 452, 453, 454, 455, 456, 458, 935,
	459, 0, 883, 460, 461, 462, 511, 915, 962, 0,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 1009, 0, 0, 828, 829, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 856,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 0, 231, 232,
	233, 234, 235, 236, 0, 936, 237, 475, 476, 477,
	0, 238, 943, 0, 926, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 929, 927, 928,
	933, 931, 930, 932, 255, 256, 257, 258, 259, 260,
	479, 480, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 963, 964, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 970, 0, 486,
	292, 0, 293, 294, 295, 296, 938, 939, 942, 344,
	949, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 948, 304, 490, 306, 305,
	307, 308, 309, 491, 0, 492, 0, 311, 950, 940,
	951, 312, 313, 314, 952, 315, 316, 0, 0, 317,
	318, 319, 320, 996, 322, 321, 0, 323, 971, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 955, 340, 341, 343, 342, 0, 217, 956, 0,
	941, 496, 345, 346, 0, 347, 348, 349, 0, 1001,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 965, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 966, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 502, 1003, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 181, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 934, 418, 398, 399, 419, 960,
	420, 503, 421, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 967, 0, 434, 435,
	433, 183, 436, 437, 438, 439, 440, 276, 441, 0,
	442, 505, 506, 507, 508, 0, 449, 0, 443, 444,
	968, 445, 969, 0, 446, 447, 448, 0, 450, 451,
	0, 0, 452, 453, 454, 455, 456, 458, 935, 459,
	0, 457, 460, 461, 462, 1312, 512, 513, 0, 464,
	463, 514, 1009, 0, 0, 175, 465, 466, 515, 467,
	468, 469, 0, 176, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	937, 0, 993, 0, 1605, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 936, 237, 475, 476, 477, 0,
	238, 943, 0, 926, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 946, 253, 254, 929, 927, 928, 933,
	931, 930, 932, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	963, 964, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 947, 289, 290, 0, 291, 970, 0, 486, 292,
	0, 293, 294, 295, 296, 938, 939, 942, 344, 949,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 948, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 950, 940, 951,
	312, 313, 314, 952, 315, 316, 0, 0, 317, 318,
	319, 320, 996, 322, 321, 0, 323, 971, 953, 324,
	325, 954, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	955, 340, 341, 343, 342, 0, 217, 956, 0, 941,
	496, 345, 346, 0, 347, 348, 349, 0, 1001, 351,
	352, 353, 0, 0, 354, 355, 497, 957, 356, 958,
	965, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 966, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 959, 392, 393, 394,
	395, 502, 1003, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 181, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 934, 418, 398, 399, 419, 960, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 967, 0, 434, 435, 433,
	183, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 968,
	445, 969, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 935, 459, 0,
	457, 460, 461, 462, 1312, 512, 513, 0, 464, 463,
	514, 0, 0, 0, 175, 465, 466, 515, 467, 468,
	469, 0, 176, 0, 0, 2574, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 1605, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 936,
	237, 475, 476, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 486, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 315,
	316, 0, 0, 317, 318, 319, 320, 996, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 955, 340, 341, 343, 342,
	0, 217, 956, 0, 941, 496, 345, 346, 0, 347,
	348, 349, 0, 1001, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 502, 1003, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 968, 445, 969, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 0, 992, 0, 1009,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 993, 937, 998, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 936, 237, 475, 476, 477, 0, 238, 943, 0,
	926, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 929, 927, 928, 933, 931, 930, 932,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 963, 964, 0,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 970, 0, 486, 292, 0, 293, 294,
	295, 296, 938, 939, 942, 344, 949, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 216, 301, 303, 310,
	0, 948, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 950, 940, 951, 312, 313, 314,
	952, 315, 316, 0, 0, 317, 318, 319, 320, 996,
	322, 321, 0, 323, 971, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 955, 340, 341,
	343, 342, 0, 217, 956, 0, 941, 496, 345, 346,
	0, 347, 348, 349, 0, 1001, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 965, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	966, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 502, 1003,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	934, 418, 398, 399, 419, 960, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 967, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 968, 445, 969, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 935, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 1009, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 937, 0, 993, 0,
	998, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	936, 237, 475, 476, 477, 0, 238, 943, 0, 926,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 946,
	253, 254, 929, 927, 928, 933, 931, 930, 932, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 963, 964, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 947, 289, 290,
	0, 291, 970, 0, 486, 292, 0, 293, 294, 295,
	296, 938, 939, 942, 344, 949, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	948, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 950, 940, 951, 312, 313, 314, 952,
	315, 316, 0, 0, 317, 318, 319, 320, 996, 322,
	321, 0, 323, 971, 953, 324, 325, 954, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 955, 340, 341, 343,
	342, 0, 217, 956, 0, 941, 496, 345, 346, 0,
	347, 348, 349, 0, 1001, 351, 352, 353, 0, 0,
	354, 355, 497, 957, 356, 958, 965, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 966,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 959, 392, 393, 394, 395, 502, 1003, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 934,
	418, 398, 399, 419, 960, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 967, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 968, 445, 969, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 935, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 1009, 0, 0,
	0, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 937, 0, 993, 0, 998,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 936,
	237, 475, 476, 477, 0, 238, 943, 0, 926, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 929, 927, 928, 933, 931, 930, 932, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 963, 964, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 970, 0, 486, 292, 0, 293, 294, 295, 296,
	938, 939, 942, 344, 949, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 948,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 950, 940, 951, 312, 313, 314, 952, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 971, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 955, 340, 341, 343, 342,
	0, 217, 956, 0, 941, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 965, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 966, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 502, 1003, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 934, 418,
	398, 399, 419, 960, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	967, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 968, 445, 969, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 935, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 821, 0, 1166, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 1500, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 1070,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 946,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 947, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 487, 488, 489, 344, 949, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	948, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 950, 493, 951, 312, 313, 314, 952,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 953, 324, 325, 954, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 955, 340, 341, 343,
	342, 0, 0, 956, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 957, 356, 958, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 959, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 181, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 960, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 183, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	1312, 512, 513, 0, 464, 463, 514, 1309, 0, 1166,
	175, 465, 466, 515, 467, 468, 469, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 150,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	1070, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 949, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 948, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 950, 493, 951, 312, 313, 314,
	952, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 955, 340, 341,
	343, 342, 0, 0, 956, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 181,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 960, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 183, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 1312, 512, 513, 0, 464, 463, 514, 0, 0,
	0, 175, 465, 466, 515, 467, 468, 469, 0, 176,
	0, 0, 0, 0, 1166, 1165, 0, 0, 0, 0,
	1163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 1070, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 946, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 947, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 949, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 948, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 950,
	493, 951, 312, 313, 314, 952, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	953, 324, 325, 954, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 955, 340, 341, 343, 342, 0, 0, 956,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 957,
	356, 958, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 959, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	960, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 0,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 1166, 1165, 0, 0, 0, 0, 1163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1781, 223, 0, 0, 0,
	0, 470, 0, 0, 0, 0, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 475, 476, 477,
	0, 238, 478, 0, 1070, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 946, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	479, 480, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 482, 483, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 0, 288,
	0, 0, 947, 289, 290, 0, 291, 485, 0, 486,
	292, 0, 293, 294, 295, 296, 487, 488, 489, 344,
	949, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 948, 304, 490, 306, 305,
	307, 308, 309, 491, 0, 492, 0, 311, 950, 493,
	951, 312, 313, 314, 952, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 494, 953,
	324, 325, 954, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 955, 340, 341, 343, 342, 0, 0, 956, 0,
	495, 496, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 957, 356,
	958, 498, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 499, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 959, 392, 393,
	394, 395, 502, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 960,
	420, 503, 421, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 504, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 441, 0,
	442, 505, 506, 507, 508, 0, 449, 0, 443, 444,
	509, 445, 510, 0, 446, 447, 448, 0, 450, 451,
	0, 0, 452, 453, 454, 455, 456, 458, 0, 459,
	0, 457, 460, 461, 462, 511, 512, 513, 0, 464,
	463, 514, 0, 0, 0, 0, 465, 466, 515, 467,
	468, 469, 1166, 1165, 0, 0, 0, 0, 1163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 2769, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 1070, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 946, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 947, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 949,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 948, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 950, 493, 951,
	312, 313, 314, 952, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 953, 324,
	325, 954, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	955, 340, 341, 343, 342, 0, 0, 956, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 957, 356, 958,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 959, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 960, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	0, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 511, 512, 513, 0, 464, 463,
	514, 1009, 0, 0, 0, 465, 466, 515, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 937,
	0, 0, 0, 1316, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 936, 237, 475, 476, 477, 0, 238,
	943, 0, 926, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 929, 927, 928, 933, 931,
	930, 932, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 963,
	964, 0, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 970, 0, 486, 292, 0,
	293, 294, 295, 296, 938, 939, 942, 344, 949, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 216, 301,
	303, 310, 0, 948, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 950, 940, 951, 312,
	313, 314, 952, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 971, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 955,
	340, 341, 343, 342, 0, 217, 956, 0, 941, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 965,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 966, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 934, 418, 398, 399, 419, 960, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 967, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 968, 445,
	969, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 935, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	821, 0, 212, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 0, 493, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 0, 356, 0,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 181, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 0, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	183, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 1312, 512, 513, 0, 464, 463,
	514, 212, 0, 0, 175, 465, 466, 515, 467, 468,
	469, 0, 176, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 150, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 0, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	0, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 487, 488, 489, 344, 0, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 216, 301,
	303, 310, 0, 0, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 0, 493, 0, 312,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 0, 324, 325,
	0, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 0,
	340, 341, 343, 342, 0, 217, 0, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 0, 356, 0, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 0, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 0, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	212, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 1610, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 0, 464, 463, 514, 212,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 2722,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 212, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 0, 0,
	2356, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 487, 488, 489, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 0, 493, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 0, 356, 0, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 0, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 212, 0, 0,
	0, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 2847,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	487, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 0, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 0, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 691, 0, 582, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 1871, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 588, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 487, 488, 489, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 0, 493, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 0, 356, 0, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 0, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 587, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 0, 581, 0,
	582, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 591, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 588, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 587, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 582, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 591, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 588, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	1901, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 587, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	582, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 591,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 588, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 587, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 591, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 1341, 0, 1166, 1165, 0, 0,
	0, 0, 1163, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 1070, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 946, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 215, 0, 0,
	0, 0, 0, 1340, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 947, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 487,
	488, 489, 344, 949, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 948, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 950, 493, 951, 312, 313, 314, 952, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 953, 324, 325, 954, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 955, 340, 341, 343, 342, 0,
	0, 956, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 957, 356, 958, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 1339, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	959, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 1338, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 960, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 0, 464, 463, 514, 0, 0, 0, 0, 465,
	466, 515, 467, 468, 469, 1307, 0, 1166, 1165, 0,
	0, 0, 0, 1163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 1070, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 946, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 947, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	1306, 488, 489, 344, 949, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 0, 301, 303, 310, 0, 948,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 950, 493, 951, 312, 313, 314, 952, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 953, 324, 325, 954, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 955, 340, 341, 343, 342,
	0, 0, 956, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 957, 356, 958, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 959, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 960, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 1303, 0, 1166, 1165,
	0, 0, 0, 0, 1163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 0, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 1070,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 946,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 947, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 1302, 488, 489, 344, 949, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	948, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 950, 493, 951, 312, 313, 314, 952,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 953, 324, 325, 954, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 955, 340, 341, 343,
	342, 0, 0, 956, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 957, 356, 958, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 959, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 960, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 0, 0, 0,
	0, 465, 466, 515, 467, 468, 469, 1241, 0, 1166,
	1165, 0, 0, 0, 0, 1163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	1070, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 1240, 488, 489, 344, 949, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 948, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 950, 493, 951, 312, 313, 314,
	952, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 955, 340, 341,
	343, 342, 0, 0, 956, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 960, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 1238, 0,
	1166, 1165, 0, 0, 0, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 1070, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 946, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 947,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 1237, 488, 489, 344, 949, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 948, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 950, 493, 951, 312, 313,
	314, 952, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 953, 324, 325, 954,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 955, 340,
	341, 343, 342, 0, 0, 956, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 957, 356, 958, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 959, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 960, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 0, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 1159,
	0, 1166, 1165, 0, 0, 0, 0, 1163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 1070, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 946, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	947, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 1161, 488, 489, 344, 949, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 0, 301,
	303, 310, 0, 948, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 950, 493, 951, 312,
	313, 314, 952, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 953, 324, 325,
	954, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 955,
	340, 341, 343, 342, 0, 0, 956, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 957, 356, 958, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 959, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 960, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	0, 0, 0, 0, 465, 466, 515, 467, 468, 469,
	1166, 1165, 0, 0, 0, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 1070, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 946, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 947,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 949, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 948, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 950, 493, 951, 312, 313,
	314, 952, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 953, 324, 325, 954,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 955, 340,
	341, 343, 342, 0, 0, 956, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 957, 356, 958, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 959, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 960, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 0, 464, 463, 514, 1166,
	1165, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	1070, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	946, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 947, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 949, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 948, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 950, 493, 951, 312, 313, 314,
	952, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 953, 324, 325, 954, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 955, 340, 341,
	343, 342, 0, 0, 956, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 957, 356, 958, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 959, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 960, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 1166, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 1070, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 946, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 947, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 949, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 948, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 950,
	493, 951, 312, 313, 314, 952, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	953, 324, 325, 954, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 955, 340, 341, 343, 342, 0, 0, 956,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 957,
	356, 958, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 959, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	960, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 2244, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 2241, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	2391, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 2247, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 2388, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 2390, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 2387, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 2246, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 2389, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 2244, 238, 478, 0, 0, 2238, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 2241, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 2247, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 2237, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 2246,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 2245, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 0,
	464, 463, 514, 1394, 0, 212, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 1397, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 1395, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 1396, 463, 514, 1154, 0, 212, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 1156,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 1001, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 0, 464, 463, 514, 1151, 0, 212, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	1153, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 217, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 1001, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 1058, 0, 212, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 0, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 1060, 488, 489, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 0, 493, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 1001, 351, 352, 353, 0, 0,
	354, 355, 497, 0, 356, 0, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 0, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 544, 0, 212,
	0, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 543,
	222, 533, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 536,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 537, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 538,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 532, 0,
	212, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 533, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	536, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 537, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	538, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 1001, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 464, 463, 514, 2320, 0, 212, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 487,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 0, 464, 463, 514, 1880, 0, 212, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	487, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 217, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 212, 464, 463, 514, 0, 0, 0, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 0, 493, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 0, 356, 0,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 0, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	1814, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 511, 512, 513, 0, 464, 463,
	514, 1807, 0, 212, 0, 465, 466, 515, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 470, 0, 0, 0, 0, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 475, 476, 477,
	0, 238, 478, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 0, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	479, 480, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 482, 483, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 0, 288,
	0, 0, 0, 289, 290, 0, 291, 485, 0, 486,
	292, 0, 293, 294, 295, 296, 1806, 488, 489, 344,
	0, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 0, 304, 490, 306, 305,
	307, 308, 309, 491, 0, 492, 0, 311, 0, 493,
	0, 312, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 494, 0,
	324, 325, 0, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 0, 340, 341, 343, 342, 0, 217, 0, 0,
	495, 496, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 0, 356,
	0, 498, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 499, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 0, 392, 393,
	394, 395, 502, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 0,
	420, 503, 421, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 504, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 441, 0,
	442, 505, 506, 507, 508, 0, 449, 0, 443, 444,
	509, 445, 510, 0, 446, 447, 448, 0, 450, 451,
	0, 0, 452, 453, 454, 455, 456, 458, 0, 459,
	0, 457, 460, 461, 462, 511, 512, 513, 0, 464,
	463, 514, 1802, 0, 212, 0, 465, 466, 515, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 1804, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 217, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 0,
	464, 463, 514, 1296, 0, 212, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 1295, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 464, 463, 514, 1293, 0, 212, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 1292,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 0, 464, 463, 514, 1290, 0, 212, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	1289, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 217, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 1286, 0, 212, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 0, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 1285, 488, 489, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 0, 493, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 0, 356, 0, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 0, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 1261, 0, 212,
	0, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 216, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 217, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 1176, 0,
	212, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 1178, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	212, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	536, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 537, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	538, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 1908, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	212, 464, 463, 514, 0, 0, 0, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 1906, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 1904, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 464, 463, 514, 683, 0, 212, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 487,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 682,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 681, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 212, 464, 463, 514, 0, 0, 0, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 0, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 2391, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	0, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 487, 488, 489, 344, 0, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 0, 301,
	303, 310, 0, 0, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 0, 493, 0, 312,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 0, 324, 325,
	0, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 0,
	340, 341, 343, 342, 0, 0, 0, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 0, 356, 0, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 3172, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 0, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 0, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	523, 0, 212, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 522, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 0, 493, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 0, 356, 0,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 521, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 0, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	0, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 511, 512, 513, 212, 464, 463,
	514, 0, 0, 0, 0, 465, 466, 515, 467, 468,
	469, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 2179, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 477, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	487, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 0, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 0, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 505, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 212, 2378, 0, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 487,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 212, 464, 463, 514, 0, 0, 0, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 0, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	2970, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	0, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 487, 488, 489, 344, 0, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 0, 301,
	303, 310, 0, 0, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 0, 493, 0, 312,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 0, 324, 325,
	0, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 0,
	340, 341, 343, 342, 0, 0, 0, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 0, 356, 0, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 0, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 0, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	212, 2378, 0, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 2375,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 212, 464, 463, 514, 0,
	0, 0, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 218, 219, 220, 221, 222, 1887, 223, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 224, 225,
	226, 227, 471, 472, 228, 473, 229, 230, 474, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 475,
	476, 477, 0, 238, 478, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 479, 480, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 481, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 484, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 485,
	0, 486, 292, 0, 293, 294, 295, 296, 487, 488,
	489, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 0, 304, 490,
	306, 305, 307, 308, 309, 491, 0, 492, 0, 311,
	0, 493, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	494, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 0,
	0, 0, 495, 496, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 497,
	0, 356, 0, 498, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 499, 367, 500, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 501,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 502, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 0, 420, 503, 421, 422, 0, 432, 423, 424,
	425, 400, 426, 430, 431, 427, 428, 429, 504, 0,
	434, 435, 433, 0, 436, 437, 438, 439, 440, 276,
	441, 0, 442, 505, 506, 507, 508, 0, 449, 0,
	443, 444, 509, 445, 510, 0, 446, 447, 448, 0,
	450, 451, 0, 0, 452, 453, 454, 455, 456, 458,
	0, 459, 0, 457, 460, 461, 462, 511, 512, 513,
	0, 464, 463, 514, 1878, 0, 212, 0, 465, 466,
	515, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 470, 0, 0, 0, 0, 224,
	225, 226, 227, 471, 472, 228, 473, 229, 230, 474,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	475, 476, 477, 0, 238, 478, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 479, 480, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 481, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 484, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	485, 0, 486, 292, 0, 293, 294, 295, 296, 487,
	488, 489, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	490, 306, 305, 307, 308, 309, 491, 0, 492, 0,
	311, 0, 493, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 494, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 495, 496, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	497, 0, 356, 0, 498, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 499, 367, 500,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	501, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 502, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 0, 420, 503, 421, 422, 0, 432, 423,
	424, 425, 400, 426, 430, 431, 427, 428, 429, 504,
	0, 434, 435, 433, 0, 436, 437, 438, 439, 440,
	276, 441, 0, 442, 505, 506, 507, 508, 0, 449,
	0, 443, 444, 509, 445, 510, 0, 446, 447, 448,
	0, 450, 451, 0, 0, 452, 453, 454, 455, 456,
	458, 0, 459, 0, 457, 460, 461, 462, 511, 512,
	513, 0, 464, 463, 514, 564, 0, 212, 0, 465,
	466, 515, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	224, 225, 226, 227, 471, 472, 228, 473, 229, 230,
	474, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 475, 476, 1036, 0, 238, 478, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 479, 480, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 481, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 484, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 485, 0, 486, 292, 0, 293, 294, 295, 296,
	487, 488, 489, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 0, 301, 303, 310, 0, 0,
	304, 490, 306, 305, 307, 308, 309, 491, 0, 492,
	0, 311, 0, 493, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 494, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 565, 0, 340, 341, 343, 342,
	0, 0, 0, 0, 495, 496, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 497, 0, 356, 0, 498, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 499, 367,
	500, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 501, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 502, 396, 0, 397,
	401, 402, 561, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 0, 420, 503, 421, 422, 0, 432,
	423, 424, 425, 400, 426, 430, 431, 427, 428, 429,
	504, 0, 434, 435, 433, 0, 436, 437, 438, 439,
	440, 276, 441, 0, 442, 560, 506, 507, 508, 0,
	449, 0, 443, 444, 509, 445, 510, 0, 446, 447,
	448, 0, 450, 451, 0, 0, 452, 453, 454, 455,
	456, 458, 0, 459, 0, 457, 460, 461, 462, 511,
	512, 513, 0, 464, 463, 514, 1826, 0, 212, 0,
	465, 466, 515, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 470, 0, 0, 0,
	0, 224, 225, 226, 227, 471, 472, 228, 473, 229,
	230, 474, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 475, 476, 477, 0, 238, 478, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 479, 480, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 481, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 482, 483, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 484, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 485, 0, 486, 292, 0, 293, 294, 295,
	296, 1825, 488, 489, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 490, 306, 305, 307, 308, 309, 491, 0,
	492, 0, 311, 0, 493, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 494, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 495, 496, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 497, 0, 356, 0, 498, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 499,
	367, 500, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 501, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 502, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 0, 420, 503, 421, 422, 0,
	432, 423, 424, 425, 400, 426, 430, 431, 427, 428,
	429, 504, 0, 434, 435, 433, 0, 436, 437, 438,
	439, 440, 276, 441, 0, 442, 505, 506, 507, 508,
	0, 449, 0, 443, 444, 509, 445, 510, 0, 446,
	447, 448, 0, 450, 451, 0, 0, 452, 453, 454,
	455, 456, 458, 0, 459, 0, 457, 460, 461, 462,
	511, 512, 513, 0, 464, 463, 514, 564, 0, 212,
	0, 465, 466, 515, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 554, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 565, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 561, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 1315, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 560, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 1300, 0,
	212, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 238, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 1299, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 502,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 505, 506,
	507, 508, 0, 449, 0, 443, 444, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 0, 464, 463, 514, 1249,
	0, 212, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 0, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	0, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 1248, 488, 489, 344, 0, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 0, 301,
	303, 310, 0, 0, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 0, 493, 0, 312,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 0, 324, 325,
	0, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 0,
	340, 341, 343, 342, 0, 0, 0, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 0, 356, 0, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 0, 392, 393, 394, 395,
	502, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 0, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	1233, 0, 212, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 0, 493, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 0, 356, 0,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 0, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	0, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 511, 512, 513, 0, 464, 463,
	514, 1170, 0, 212, 0, 465, 466, 515, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 470, 0, 0, 0, 0, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 475, 476, 477,
	0, 238, 478, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 0, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	479, 480, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 0, 288,
	0, 0, 0, 289, 290, 0, 291, 485, 0, 486,
	292, 0, 293, 294, 295, 296, 487, 488, 489, 344,
	0, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 0, 304, 490, 306, 305,
	307, 308, 309, 491, 0, 492, 0, 311, 0, 493,
	0, 312, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 494, 0,
	324, 325, 0, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 0, 340, 341, 343, 342, 0, 0, 0, 0,
	495, 496, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 0, 356,
	0, 498, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 499, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 0, 392, 393,
	394, 395, 502, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 0,
	420, 503, 421, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 504, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 441, 0,
	442, 505, 506, 507, 508, 0, 449, 0, 443, 444,
	509, 445, 510, 0, 446, 447, 448, 0, 450, 451,
	0, 0, 452, 453, 454, 455, 456, 458, 0, 459,
	0, 457, 460, 461, 462, 511, 512, 513, 0, 464,
	463, 514, 564, 0, 212, 0, 465, 466, 515, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	1036, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 565, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 561,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 560, 506, 507, 508, 0, 449, 0, 443,
	1037, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 1020, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 564, 0,
	212, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 224, 225, 226, 227, 471, 472, 228,
	473, 229, 230, 474, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 475, 476, 477, 0, 554, 478,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 552, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 479, 480, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 481, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	484, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 485, 0, 486, 292, 0, 293,
	294, 295, 296, 487, 488, 489, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 490, 306, 305, 307, 308, 309,
	491, 0, 492, 0, 311, 0, 493, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 494, 0, 324, 325, 0,
	0, 326, 553, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 565, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 495, 496, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 497, 0, 356, 0, 498, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 499, 367, 500, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 501, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 555,
	396, 0, 397, 401, 402, 561, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 556,
	417, 0, 418, 398, 399, 419, 0, 420, 503, 421,
	422, 0, 432, 423, 424, 425, 400, 426, 430, 431,
	427, 428, 429, 504, 0, 434, 435, 433, 0, 436,
	437, 438, 439, 440, 276, 441, 0, 442, 560, 506,
	507, 508, 0, 449, 0, 443, 558, 509, 445, 510,
	0, 446, 447, 448, 0, 450, 451, 0, 0, 452,
	453, 454, 455, 456, 458, 0, 459, 0, 457, 460,
	461, 462, 511, 512, 513, 0, 464, 463, 514, 548,
	0, 212, 0, 465, 466, 515, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 224, 225, 226, 227, 471, 472,
	228, 473, 229, 230, 474, 0, 231, 232, 233, 234,
	235, 236, 0, 0, 237, 475, 476, 477, 0, 238,
	478, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 0, 253, 254, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 259, 260, 479, 480,
	0, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	266, 267, 0, 268, 0, 269, 270, 0, 271, 481,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	284, 484, 285, 286, 0, 287, 0, 288, 0, 0,
	0, 289, 290, 0, 291, 485, 0, 486, 292, 0,
	293, 294, 295, 296, 487, 488, 489, 344, 0, 297,
	298, 0, 299, 300, 302, 0, 0, 0, 0, 301,
	303, 310, 0, 0, 304, 490, 306, 305, 307, 308,
	309, 491, 0, 492, 0, 311, 0, 493, 0, 312,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 494, 0, 324, 325,
	0, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 339, 337, 0,
	340, 341, 343, 342, 0, 0, 0, 0, 495, 496,
	345, 346, 0, 347, 348, 349, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 497, 0, 356, 0, 498,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 499, 367, 500, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 501, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 0, 392, 393, 394, 395,
	502, 396, 0, 397, 549, 402, 403, 404, 405, 406,
	407, 0, 414, 415, 408, 410, 411, 412, 409, 413,
	416, 417, 0, 418, 398, 399, 419, 0, 420, 503,
	421, 422, 0, 432, 423, 424, 425, 400, 426, 430,
	431, 427, 428, 429, 504, 0, 434, 435, 433, 0,
	436, 437, 438, 439, 440, 276, 441, 0, 442, 505,
	506, 507, 508, 0, 449, 0, 443, 444, 509, 445,
	510, 0, 446, 447, 448, 0, 450, 451, 0, 0,
	452, 453, 454, 455, 456, 458, 0, 459, 0, 457,
	460, 461, 462, 511, 512, 513, 0, 464, 463, 514,
	546, 0, 212, 0, 465, 466, 515, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	470, 0, 0, 0, 0, 224, 225, 226, 227, 471,
	472, 228, 473, 229, 230, 474, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 475, 476, 477, 0,
	238, 478, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 479,
	480, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	481, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	482, 483, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 484, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 485, 0, 486, 292,
	0, 293, 294, 295, 296, 487, 488, 489, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 490, 306, 305, 307,
	308, 309, 491, 0, 492, 0, 311, 0, 493, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 494, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 495,
	496, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 497, 0, 356, 0,
	498, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 499, 367, 500, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 501, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 502, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 0, 420,
	503, 421, 422, 0, 432, 423, 424, 425, 400, 426,
	430, 431, 427, 428, 429, 504, 0, 434, 435, 433,
	0, 436, 437, 438, 439, 440, 276, 441, 0, 442,
	505, 506, 507, 508, 0, 449, 0, 443, 444, 509,
	445, 510, 0, 446, 447, 448, 0, 450, 451, 0,
	0, 452, 453, 454, 455, 456, 458, 0, 459, 0,
	457, 460, 461, 462, 511, 512, 513, 0, 464, 463,
	514, 540, 0, 212, 0, 465, 466, 515, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 470, 0, 0, 0, 0, 224, 225, 226, 227,
	471, 472, 228, 473, 229, 230, 474, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 475, 476, 477,
	0, 238, 478, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 0, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	479, 480, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 481, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 484, 285, 286, 0, 287, 0, 288,
	0, 0, 0, 289, 290, 0, 291, 485, 0, 486,
	292, 0, 293, 294, 295, 296, 487, 488, 489, 344,
	0, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 0, 304, 490, 306, 305,
	307, 308, 309, 491, 0, 492, 0, 311, 0, 493,
	0, 312, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 494, 0,
	324, 325, 0, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 0, 340, 341, 343, 342, 0, 0, 0, 0,
	495, 496, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 497, 0, 356,
	0, 498, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 499, 367, 500, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 501, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 0, 392, 393,
	394, 395, 502, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 0,
	420, 503, 421, 422, 0, 432, 423, 424, 425, 400,
	426, 430, 431, 427, 428, 429, 504, 0, 434, 435,
	433, 0, 436, 437, 438, 439, 440, 276, 441, 0,
	442, 505, 506, 507, 508, 0, 449, 0, 443, 444,
	509, 445, 510, 0, 446, 447, 448, 0, 450, 451,
	0, 0, 452, 453, 454, 455, 456, 458, 0, 459,
	0, 457, 460, 461, 462, 511, 512, 513, 0, 464,
	463, 514, 518, 0, 212, 0, 465, 466, 515, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 2662, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 2660, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 2648, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 2338, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 549, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 1838,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 0, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 1269, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 292, 0, 293, 294,
	295, 296, 1211, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 212, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 224, 225, 226,
	227, 471, 472, 228, 473, 229, 230, 474, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 475, 476,
	477, 0, 238, 478, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 479, 480, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 481, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 484, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 485, 0,
	486, 292, 0, 293, 294, 295, 296, 487, 488, 489,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 490, 306,
	305, 307, 308, 309, 491, 0, 492, 0, 311, 0,
	493, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 494,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 495, 496, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 497, 0,
	356, 0, 498, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 499, 367, 500, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 501, 975,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 502, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	0, 420, 503, 421, 422, 0, 432, 423, 424, 425,
	400, 426, 430, 431, 427, 428, 429, 504, 0, 434,
	435, 433, 0, 436, 437, 438, 439, 440, 276, 441,
	0, 442, 505, 506, 507, 508, 0, 449, 0, 443,
	444, 509, 445, 510, 0, 446, 447, 448, 0, 450,
	451, 0, 0, 452, 453, 454, 455, 456, 458, 0,
	459, 0, 457, 460, 461, 462, 511, 512, 513, 212,
	464, 463, 514, 0, 0, 0, 0, 465, 466, 515,
	467, 468, 469, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 224, 225, 226, 227, 471, 472, 228, 473,
	229, 230, 474, 0, 231, 232, 233, 234, 235, 236,
	0, 0, 237, 475, 476, 477, 0, 238, 478, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	0, 253, 254, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 259, 260, 479, 480, 0, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 266, 267,
	0, 268, 0, 269, 270, 0, 271, 481, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 484,
	285, 286, 0, 287, 0, 288, 0, 0, 0, 289,
	290, 0, 291, 485, 0, 486, 0, 0, 293, 294,
	295, 296, 487, 488, 489, 344, 0, 297, 298, 0,
	299, 300, 302, 0, 0, 0, 0, 301, 303, 310,
	0, 0, 304, 490, 306, 305, 307, 308, 309, 491,
	0, 492, 0, 311, 0, 493, 0, 312, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 494, 0, 324, 325, 0, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 339, 337, 0, 340, 341,
	343, 342, 0, 0, 0, 0, 495, 496, 345, 346,
	0, 347, 348, 349, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 497, 0, 356, 0, 498, 357, 350,
	358, 359, 0, 361, 362, 363, 364, 0, 365, 366,
	499, 367, 500, 368, 0, 369, 0, 370, 371, 372,
	0, 374, 375, 501, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 0, 392, 393, 394, 395, 502, 0,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 408, 410, 411, 412, 409, 413, 416, 417,
	0, 418, 398, 399, 419, 0, 420, 503, 421, 422,
	0, 432, 423, 424, 425, 400, 426, 430, 431, 427,
	428, 429, 504, 0, 434, 435, 433, 0, 436, 437,
	438, 439, 440, 276, 441, 0, 442, 505, 506, 507,
	508, 0, 449, 0, 443, 444, 509, 445, 510, 0,
	446, 447, 448, 0, 450, 451, 0, 0, 452, 453,
	454, 455, 456, 458, 0, 459, 0, 457, 460, 461,
	462, 511, 512, 513, 0, 464, 463, 514, 0, 0,
	0, 0, 465, 466, 515, 467, 468, 469, 1436, 1437,
	0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 1462, 1463, 1464, 1438, 0,
	0, 0, 0, 0, 1444, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 1486, 0, 0, 0, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 1483, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	1474, 1444, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 1484, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 1465, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 1460,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1477, 0, 0, 0, 0, 0,
	1475, 0, 1458, 1450, 1451, 1457, 1456, 1452, 1478, 1455,
	1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 0,
	0, 0, 0, 2054, 0, 0, 0, 2055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 1469, 1470, 1471,
	1479, 1480, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 1461, 1462, 1463, 1464,
	1439, 0, 0, 0, 1485, 0, 1444, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 1438, 0, 0,
	1476, 0, 0, 1486, 3083, 0, 1458, 1466, 1467, 1468,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 1462, 1463, 1464, 0, 0, 0, 0, 1484, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 1486, 0, 0,
	0, 1466, 1467, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 1483, 0, 1465, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 1460, 1485,
	0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456, 1452,
	1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 1438, 1477, 0, 0, 0, 0, 0, 2819,
	0, 1458, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 1469,
	1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 1462, 1463, 1464, 1438,
	0, 0, 0, 0, 0, 1444, 1475, 0, 1458, 1450,
	1451, 1457, 1456, 1452, 1478, 1455, 1449, 1447, 1448, 1440,
	1441, 1442, 1443, 1445, 1446, 0, 0, 0, 0, 1476,
	0, 0, 1486, 2520, 0, 0, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 1483,
	0, 0, 0, 0, 0, 0, 1453, 1454, 0, 0,
	0, 0, 1461, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 1474, 1444, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 1484, 0, 1486,
	0, 0, 0, 1466, 1467, 1468, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 1483, 0, 0, 0,
	0, 0, 0, 1453, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 1465, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	1460, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1477, 0, 0, 0, 0,
	0, 1475, 0, 1458, 1450, 1451, 1457, 1456, 1452, 1478,
	1455, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 2519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1461, 1462, 1463,
	1464, 1439, 0, 0, 0, 1485, 0, 1444, 1475, 0,
	0, 1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 0, 1438, 0,
	0, 1476, 0, 0, 1486, 2516, 0, 1458, 1466, 1467,
	1468, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 1483, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 0, 0, 0, 0, 1484,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 1465, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 1460,
	1485, 0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456,
	1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443,
	1445, 1446, 0, 1438, 1477, 0, 0, 0, 0, 0,
	2515, 0, 1458, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	1438, 0, 0, 0, 0, 0, 1444, 1475, 0, 1458,
	1450, 1451, 1457, 1456, 1452, 1478, 1455, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 0, 0,
	1476, 0, 0, 1486, 2514, 0, 0, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 1474, 1444, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1484, 0,
	1486, 0, 0, 0, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 1465, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456, 1452,
	1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 2055,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 0, 1475,
	0, 0, 1450, 1451, 1457, 1456, 1452, 1478, 0, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1438, 0,
	0, 0, 3405, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 1438, 0, 0, 0, 0,
	0, 1444, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 1461, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 1474, 1444, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1484, 0, 1486, 0, 0, 0, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1483, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 1465, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 0, 0,
	3336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	1485, 0, 0, 0, 1475, 0, 0, 1450, 1451, 1457,
	1456, 1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 1438, 0, 0, 0, 3335, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	1438, 0, 0, 0, 0, 0, 1444, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 1486, 0, 0, 0, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 1474, 1444, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1484, 0,
	1486, 0, 0, 0, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 1465, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456, 1452,
	1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 0, 0, 0, 3230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 0, 1475,
	0, 0, 1450, 1451, 1457, 1456, 1452, 1478, 0, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1438, 0,
	0, 0, 3136, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 1438, 0, 0, 0, 0,
	0, 1444, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 1461, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 1474, 1444, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1484, 0, 1486, 0, 0, 0, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1483, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 1465, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 0, 0,
	3088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	1485, 0, 0, 0, 1475, 0, 0, 1450, 1451, 1457,
	1456, 1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 1438, 0, 0, 0, 3087, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	1438, 0, 0, 0, 0, 0, 1444, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 1486, 0, 0, 0, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 1474, 1444, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1484, 0,
	1486, 0, 0, 0, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 1465, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456, 1452,
	1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 0, 0, 0, 3086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 0, 1475,
	0, 0, 1450, 1451, 1457, 1456, 1452, 1478, 0, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1438, 0,
	0, 0, 3053, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 1438, 0, 0, 0, 0,
	0, 1444, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 1461, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 1474, 1444, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1484, 0, 1486, 0, 0, 0, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1483, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 1465, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 0, 0,
	2854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	1485, 0, 0, 0, 1475, 0, 0, 1450, 1451, 1457,
	1456, 1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 1438, 0, 2471, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 2442, 0, 1439, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	0, 0, 1438, 0, 0, 0, 1444, 3507, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 1486, 0, 0, 0, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 2443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1461, 1462, 1463, 1464, 0,
	0, 0, 1474, 0, 0, 1444, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 1476,
	0, 0, 1486, 0, 0, 0, 1466, 1467, 1468, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 1483,
	0, 0, 0, 0, 0, 3506, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1465, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480,
	1481, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 1485, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 1477, 0,
	0, 0, 1475, 0, 1458, 1450, 1451, 1457, 1456, 1452,
	1478, 1455, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 0, 1444, 0,
	2559, 1475, 0, 2558, 1450, 1451, 1457, 1456, 1452, 1478,
	0, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446,
	0, 0, 1476, 0, 0, 1486, 0, 0, 0, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1483, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2146, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479,
	1480, 1481, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 1472, 0, 0, 0, 2145, 0, 0, 1439,
	0, 0, 0, 1485, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 1477, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 1469, 1470, 1471,
	1479, 1480, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	1462, 1463, 1464, 0, 0, 0, 0, 1438, 0, 1444,
	0, 0, 0, 0, 1475, 0, 1458, 1450, 1451, 1457,
	1456, 1452, 1478, 1455, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 1476, 0, 0, 1486, 0, 0, 0,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 1483, 0, 0, 0, 0, 0, 0,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 1462, 1463, 1464, 0, 1474, 0, 0, 0, 0,
	1444, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 1476, 0, 0, 1486, 0, 0,
	0, 1466, 1467, 1468, 0, 0, 1473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 1483, 0, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 1465,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 818, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 1477, 0, 1475, 0, 1458, 1450, 1451,
	1457, 1456, 1452, 1478, 1455, 1449, 1447, 1448, 1440, 1441,
	1442, 1443, 1445, 1446, 0, 0, 1436, 1437, 0, 1469,
	1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 0, 0, 0, 0, 1438,
	0, 1444, 0, 0, 0, 0, 1475, 0, 1458, 1450,
	1451, 1457, 1456, 1452, 1478, 1455, 1449, 1447, 1448, 1440,
	1441, 1442, 1443, 1445, 1446, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 1483, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 1462, 1463, 1464, 0, 1474, 0, 0,
	0, 0, 1444, 0, 0, 1459, 0, 2565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 1476, 0, 0, 1486,
	0, 0, 0, 1466, 1467, 1468, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 1483, 0, 0, 0,
	0, 0, 0, 1453, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 1465, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2842, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446, 0, 0, 1436, 1437,
	0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 2560, 0, 0, 1439, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 1475, 0,
	1458, 1450, 1451, 1457, 1456, 1452, 1478, 1455, 1449, 1447,
	1448, 1440, 1441, 1442, 1443, 1445, 1446, 1436, 1437, 0,
	1469, 1470, 1471, 1479, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 1462, 1463, 1464, 0, 0,
	1438, 0, 0, 0, 1444, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 1486, 0, 0, 0, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 1483, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 0, 0, 0,
	1474, 0, 0, 1444, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1476, 0, 0,
	1486, 0, 0, 0, 1466, 1467, 1468, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 1465, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 2513, 0, 0, 1439, 0, 0, 0,
	1485, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 1477, 0, 0, 0,
	1475, 0, 1458, 1450, 1451, 1457, 1456, 1452, 1478, 1455,
	1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 1436,
	1437, 0, 1469, 1470, 1471, 1479, 1480, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1462, 1463, 1464,
	0, 0, 1438, 0, 0, 0, 1444, 0, 0, 1475,
	0, 1458, 1450, 1451, 1457, 1456, 1452, 1478, 1455, 1449,
	1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446, 0, 0,
	1476, 0, 0, 1486, 0, 0, 0, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1483, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1461, 1462, 1463, 1464, 0,
	0, 0, 1474, 0, 0, 1444, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 1476,
	0, 0, 1486, 0, 0, 0, 1466, 1467, 1468, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 1483,
	0, 0, 0, 0, 0, 0, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1465, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480,
	1481, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 1485, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 1477, 0,
	0, 0, 1475, 0, 1458, 1450, 1451, 1457, 1456, 1452,
	1478, 1455, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445,
	1446, 1436, 1437, 0, 1469, 1470, 1471, 1479, 1480, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 1462,
	1463, 1464, 0, 0, 1438, 0, 0, 0, 1444, 0,
	0, 1475, 0, 1458, 1450, 1451, 1457, 1456, 1452, 1478,
	1455, 1449, 1447, 1448, 1440, 1441, 1442, 1443, 1445, 1446,
	0, 0, 1476, 0, 0, 1486, 0, 0, 0, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1483, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 1461, 1462, 1463,
	1464, 0, 0, 0, 1474, 0, 0, 1444, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1476, 0, 0, 1486, 0, 0, 0, 1466, 1467,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 1483, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 1465, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 1484,
	0, 0, 0, 0, 0, 1436, 1437, 0, 1469, 1470,
	1471, 1479, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1455, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 1475, 0, 0, 1450, 1451, 1457,
	1456, 1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442,
	1443, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1486, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 1450, 1451, 1457, 1456,
	1452, 1478, 0, 1449, 1447, 1448, 1440, 1441, 1442, 1443,
	1445, 1446, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	1450, 1451, 1457, 1456, 1452, 1478, 0, 1449, 1447, 1448,
	1440, 1441, 1442, 1443, 1445, 1446,
}
var sqlPact = [...]int{

	4526, -1000, -1000, -1000, -1000, -1000, -1000, 228, 227, 221,
	218, 208, 198, 197, 195, -1000, -1000, -1000, 191, -1000,
	-1000, 190, -1000, 189, 187, 186, 175, -1000, 167, 165,
	164, -1000, -1000, -1000, -1000, 162, 161, 160, 51151, 1746,
	62460, 54068, 1694, 45696, 62039, 45275, 61618, 61197, 159, -1000,
	60776, 154, 153, 152, -1000, -1000, 149, 1702, 37246, 146,
	144, 136, 1861, 134, 133, -1000, 129, -1000, 7684, 1288,
	-1000, 128, 126, -1000, 7284, 3510, 53232, 2174, 124, 123,
	36824, 2168, 2216, -1000, -1000, 1613, -1000, -1000, 113, 108,
	100, 97, 96, 95, 91, 88, 87, -1000, 85, 83,
	82, 80, 79, 78, 75, 74, 73, 72, 71, 70,
	68, 65, 63, 62, 60, 59, -1000, 8287, 1532, 1438,
	1431, 1428, 1406, 1433, 892, 58, 57, 53, 52, 50,
	48, 47, -1000, -1000, 46, 44, 42, 41, -1000, 39,
	35, 140, 32, 31, 30, 26, 22, 2067, 2192, 1314,
	962, 17551, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66610, 62875, 20, -85, 17,
	-1000, 2525, 901, 30495, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 470, -1000, -1000, -1000, 303, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1546, 717, -1000, -1000,
	-1000, 60355, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1740, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 714,
	-1000, 1732, 176, 1652, -1000, -1000, -1000, -1000, -1000, 62875,
	-1000, -1000, 2840, 2839, 1618, 712, 59940, -1000, 1265, -1000,
	846, 20227, -1000, 1042, -1000, 20227, 296, -1000, -1000, -1000,
	-1000, -1000, 44854, 13991, 44433, 44012, 41077, 59519, 13560, 50736,
	1096, -1000, -1000, -1000, -1000, -1000, -7, 38491, 62875, -1000,
	295, -1000, -1000, -1000, -1000, -1000, -1000, 26575, 685, 26119,
	517, 25663, 405, -1000, -1000, -1000, -1000, 2837, 2836, 1015,
	2835, 2459, 66195, 1441, 2833, 1370, 1073, 943, 2831, 2829,
	2826, 2825, 2822, 2821, 2820, 1247, 59098, 2270, 40646, 40215,
	51151, 51151, 2012, 58677, -1000, -1000, 1147, 1144, -1000, -1000,
	-1000, -1000, 2356, 2190, 2189, 50315, -1000, -1000, 2819, 2818,
	2817, 2816, 2813, 65780, 1419, 2812, 1932, 2811, 2810, 2809,
	2807, 2806, 2805, 2803, 2802, 2798, -1000, 49894, 49473, 49052,
	48631, 58256, 39784, 39353, -1000, -1000, -1000, 32175, 4908, 57835,
	33468, 51151, 51151, -1000, -1000, 27019, 135, -1000, -1000, -1000,
	2217, -1000, 27019, 135, -1000, 62875, -1000, 2254, 1631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2071, 1396,
	2688, 38922, 1616, 1203, 2354, 2352, 1301, 1939, 2337, 2320,
	2315, 2314, 2309, 1331, 1975, 522, 17095, 1299, 1279, 2283,
	2255, 2702, 1649, 43591, 2797, 2795, 2507, 2230, 2215, -1000,
	-1000, -1000, -1000, 1269, -1000, -1000, 46111, -1000, -1000, 1100,
	-1000, -1000, 1100, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1093, 64950, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1296, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1503, -1000, 1593,
	-1000, -1000, 2794, 2192, 1885, 2492, 2492, 2492, 2541, 462,
	445, -1000, 140, -1000, -1000, 73628, -1000, -1000, 27019, 27019,
	27019, 27019, 27019, 1549, -1000, 709, -1000, -1000, 767, -1000,
	705, 643, -1000, -1000, -1000, -1000, -1000, -1000, 704, 2708,
	-1000, 910, -1000, -1000, -1000, -1000, 2675, -1000, 16195, -1000,
	-1000, -1000, 412, 703, 27019, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 288, 858, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 629, 1445, 627,
	627, 627, -1000, -1000, 934, -1000, -1000, -1000, 302, 626,
	276, 625, -1000, -1000, -1000, -1000, 2251, 702, 700, -1000,
	699, 697, 694, -1000, -1000, -1000, 693, 687, 684, 675,
	672, 671, 670, 669, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 932, -1000, 668, 667, 666, 665, 662, 661, 660,
	659, 655, -1000, -1000, -9, 62875, -1000, 470, -9, -1000,
	-1000, 654, -1000, 20671, 20671, 20671, -1000, -1000, 1731, 27019,
	-1000, 2388, -1000, 406, -5, 820, 31333, -1000, 29638, 820,
	737, 34727, -1000, 2212, -1000, -1000, 647, 287, -1000, -1000,
	2208, 62875, 14420, 62875, 51151, 51151, -1000, 2411, 27019, -1000,
	-1000, 38076, 62875, 51566, 2630, 9219, 38076, 62875, 2244, -1000,
	-1000, -1000, 62875, -1000, 27019, -1000, 2599, 1236, -20, -1000,
	-1000, -1000, -1000, -1000, -1000, 1913, 1890, 1002, 1769, 1142,
	-1000, 20227, 2451, -1000, -1000, -1000, 280, 14420, -1000, 1901,
	2394, 1180, -1000, 1759, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1399, 2392, -1000, 2659, 2389, 1398, -1000, -1000,
	905, 2387, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1678, -1000, -1000, 2493, -1000, -1000, 2784, 2385, 1,
	-1000, -1000, 32610, 38491, -16, -1000, -1000, -30, -1000, 13129,
	73628, -1000, -1000, -1000, 73628, 794, -1000, -1000, 2381, -1000,
	73628, 792, -1000, -1000, 2380, -1000, -1000, -1000, 2791, -1000,
	2790, 1871, 2789, 2787, 2785, -1000, 1432, 1435, 2781, -1000,
	2778, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48210, 47789,
	941, -1000, 1725, -1000, -1000, 47368, 893, 1869, -1000, -1000,
	1866, -1000, 819, -1000, 2773, 57414, 2033, 893, 1860, -1000,
	-1000, -1000, -1000, -1000, 51151, -1000, 51151, -1000, 51151, -1000,
	1263, -1000, 65365, -5, -1000, -1000, -1000, -1000, -1000, 2376,
	2763, 2762, 2761, -1000, 62875, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 178, 2374, -1000, -1000, 178, 2347,
	-1000, 178, 2346, -1000, 177, 2343, -1000, -1000, 1629, 2342,
	-1000, -125, 2341, -1000, -1000, -125, 2338, -1000, -27, -1000,
	-1000, -1000, 901, -1000, 31754, 56993, 41506, 869, 716, 36403,
	73628, -1000, 32610, 73628, -1000, 41506, 47368, -1000, 56572, 46953,
	-1000, -1000, 1175, 1966, -1000, -1000, -1000, -1000, 41506, 41506,
	41506, -1000, 56151, -1000, 1575, 1300, 2487, 51151, -1000, 1444,
	-1000, -1000, -1000, 2502, 2235, -1000, 37661, 52811, -1000, 52396,
	-1000, 51981, -1000, 51151, -1000, 51151, -1000, 2760, 2759, 2757,
	-1000, 2755, 2496, 73628, 2495, -1000, 2372, 1422, 1412, 62875,
	-1000, -1000, 62875, -1000, 62875, -1000, -1000, -1000, 1911, -1000,
	-1000, -1000, -1000, 51151, -1000, -1000, -1000, -1000, -1000, -1000,
	2227, -1000, 1392, -1000, 1156, -1000, -1000, 182, -1000, -1000,
	-20, -1000, 64950, -1000, -1000, 2192, 1885, -1000, 62875, -1000,
	-1000, -1000, 2192, 1752, 1996, 25207, 1976, 27019, 140, -1000,
	-1000, 140, 140, 19783, -1000, -1000, 9219, 9219, 14420, 1106,
	27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019,
	27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019,
	27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019, 27019,
	27019, 27019, 27019, 27019, 27019, 1952, 27019, 1090, 27019, 27019,
	27019, 27019, 1842, -1000, -1000, 1545, 511, 1571, -1000, 2665,
	2665, 2665, 73990, 73990, 579, 2754, 767, -1000, 27019, -1000,
	135, 27019, 14851, -1000, 2695, 1184, -1000, -1000, 445, 67447,
	1846, -1000, 443, 15307, -1000, -1000, -1000, 16195, 643, 24751,
	27019, 921, 73628, 12700, 2126, 2078, -1000, 2694, -1000, -1000,
	2686, -1000, -1000, -1000, -1000, 2686, 1105, 1102, 2693, -1000,
	2686, 2686, 641, 741, 731, 710, 707, 706, 27019, 27019,
	27019, 27019, 27019, 27019, 27019, 27019, -1000, 24307, 23851, 23395,
	28351, 22939, 27019, 16639, 22483, 22027, 62875, -9, 2598, 27019,
	166, -1000, 72382, -1000, 166, 166, 636, -28, 73628, 1974,
	1974, 30914, 1894, 1576, 1576, 1576, -1000, 633, 732, 13,
	12, 10, -1000, -1000, 8, 6, 820, 9681, 54483, 1580,
	820, 820, 250, 286, 442, 29219, 2388, 54483, -1000, -1000,
	51151, 632, 14851, 14420, 1198, -29, 248, 1991, 1990, 1988,
	-1000, 1332, -34, 1087, -14, -1000, 4678, -36, -1000, 1148,
	-1000, -1000, -1000, -1000, 310, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 930, 631, 630,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 629, 1445, 627, 627, 627, -1000, -1000, -1000,
	302, 626, 276, 625, -1000, -1000, -1000, -1000, -1000, -1000,
	2195, -30, 51566, 835, -37, 1020, -20, -1000, 1100, -1000,
	1789, -1000, -1000, -1000, -1000, -1000, -1000, 1183, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2707, -1000, 2670, -1000, -1000,
	2692, -10, -1000, -1000, 14420, -1000, -22, 1385, -1000, 43170,
	2500, 2486, 2475, 1259, -1000, 1206, 2540, 46111, 2555, 2635,
	674, -1000, 2191, -1000, -1000, 845, 1312, 1086, 46111, 2659,
	-1000, 9219, -1000, 2068, 2537, 1190, 1217, 1190, 1190, 1215,
	-1000, 46111, 1084, 1491, 41506, -1000, 1082, -1000, -23, 2554,
	2569, 554, -1000, 2185, 1080, -1000, -1000, 51151, 14420, 826,
	-1000, 41506, -16, 38491, 62875, 244, -1000, 27019, 135, 27019,
	135, -1000, -1000, 2336, -1000, -1000, -1000, 2749, 1414, 1926,
	-1000, -1000, -1000, 624, 1847, 2659, 1844, -1000, -1000, 46532,
	2180, 62875, 1998, -18, 51151, -1000, -1000, 1479, -1000, 2334,
	2333, 584, 2748, -1000, 1718, 1840, -1000, -1000, -1000, 64535,
	1108, 2330, 911, 180, 2597, 180, 35565, -1000, 62875, -1000,
	62875, -1000, -1000, -1000, 2747, -1000, 51151, -1000, -1000, 51151,
	-1000, 51151, -1000, 51151, -1000, 51151, 51151, -1000, 62875, 41506,
	41506, 41506, 3733, 42340, -54, 440, -1000, 55736, 62875, 981,
	42755, 62875, 2439, -202, -1000, 869, 869, 826, -1000, 826,
	-1000, 51151, 2226, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2743, 2742, -1000, 878, 51151, 62875, 51151, -1000, -1000, 62875,
	-1000, 62875, -1000, -1000, 62875, -1000, 62875, -1000, 62875, -1000,
	-1000, -1000, -1000, -1000, -1000, 135, 27019, 1307, -1000, 2221,
	-1000, 2219, -1000, 37, -1000, -1000, -1000, -1000, 1781, 51151,
	51151, 62875, 51151, -1000, 46111, -1000, -1000, 2192, -1000, -1000,
	-1000, -1000, -1000, 73628, -1000, 495, -1000, -1000, 73628, 1353,
	2002, -1000, 2002, -17, -1000, 71818, 1959, 51151, -1000, -1000,
	-1000, -1000, -1000, 844, 1101, 1101, 1081, 1081, 1081, 1081,
	2573, 1655, 925, 1595, 4988, 4988, 4988, 4988, 4988, 4988,
	4988, 4988, 863, 397, 397, 863, 863, 863, 863, 863,
	397, 397, 397, 4988, 4988, 4988, 73990, 73911, 6833, 27019,
	27019, 1079, 1542, 511, 6276, 27019, 461, 461, 461, 461,
	-1000, 1626, -1000, -1000, -1000, -1000, 2176, 618, 28351, 28351,
	-1000, -1000, -1000, -1000, 15751, 27019, -1000, -1000, -1000, -1000,
	21571, -1000, -1000, 71351, -242, 439, -172, 7, -1000, 27019,
	27019, 27019, 435, -1000, 434, -1000, -1000, 1076, -1000, 1075,
	1074, 1060, -1000, 616, 243, 27019, 62875, -1000, 68949, 726,
	-68, -1000, -55, 1222, -1000, 27019, 242, -1000, 1574, 615,
	614, 422, -56, -1000, 421, 840, 836, 420, 416, 415,
	27019, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 73549, 68664, 68560, 68275, 8796, 68198, 67913, -57, 414,
	-1000, 2169, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	413, -1000, 410, -1000, 73266, -172, 407, 5550, -1000, 28351,
	28351, 28351, -1000, 403, -1000, 72101, -1000, 73187, 21127, 21127,
	21127, 402, 72825, 27019, -172, -62, -1000, -63, -1000, -1000,
	613, -65, 911, 20671, 30073, 14420, -1000, 911, 911, 27019,
	-1000, 27019, 1981, -1000, -1000, -1000, 1977, 1929, 1974, 30914,
	-1000, -1000, -1000, -1000, 54483, 457, 820, -1000, -1000, -1000,
	-1000, -1000, 54483, -1000, 2675, 2073, -1000, -1000, -1000, 62875,
	470, -1000, 54483, 54483, 14420, 820, -1000, 396, 33887, 7,
	236, -1000, -1000, 14420, 2026, 2026, 2026, -1000, -1000, 62875,
	2646, -1000, 1460, -1000, 9219, -1000, 766, 1051, -1000, 2691,
	612, -1000, 2686, 2686, 62875, 110, 20227, -1000, 1100, -1000,
	-1000, 1333, -1000, 1427, -1000, 1077, -1000, -1000, -1000, 20227,
	-1000, 1802, 62875, 62875, 51151, -1000, -1000, 1830, 64120, 1825,
	9219, 62875, -1000, -1000, 611, 610, 1956, 1948, 62875, 62875,
	63705, 63290, 62875, 1469, 27019, 1579, 1604, 135, 135, -1000,
	-1000, 135, 607, 1133, 51151, 51151, 51151, 1395, -1000, -1000,
	-1000, -1000, -1000, 51151, -1000, -1000, 2690, -1000, 1190, -1000,
	-1000, -1000, 1190, 2659, 1379, 51151, 41506, 902, 62875, 1516,
	135, 135, -1000, -1000, 135, 606, 14420, 1437, -1000, 2031,
	-1000, -71, -1000, -1000, 12271, 73628, -1000, 73628, -1000, 62875,
	-1000, 939, 62875, 42755, 872, 2329, -1000, 2659, 2328, 470,
	-1000, -1000, 35146, -30, 869, 41506, 51151, -18, 41506, 41506,
	41506, 2741, 605, 2740, -1000, 51151, 2325, 1710, 1809, 2378,
	788, 62875, 1610, -1000, 27019, 1443, -1000, 34308, 965, 62875,
	1362, 107, -1000, -1000, -1000, 24, 62875, -1000, 2738, -1000,
	-1000, 178, 178, 178, -1000, 177, 1629, -1000, -125, -125,
	-1000, -1000, 3733, 869, -19, 601, -1000, 815, 813, 33039,
	41506, -72, -1000, -1000, -1000, -1000, -1000, 51151, 62875, 585,
	2032, 62875, -73, -1000, 233, 589, -1000, 869, 32610, 2155,
	-1000, -1000, 899, -1000, 1155, -1000, -1000, -1000, -1000, -1000,
	-1000, -30, -30, -1000, -1000, -1000, -1000, 73628, -1000, 1278,
	1267, 62875, -1000, 14420, 62875, 51151, 14420, 51151, -1000, -1000,
	-1000, -1000, -1000, -1000, 1353, -1000, 27019, -1000, -1000, -1000,
	19783, -1000, -1000, -1000, 51151, 0, 27019, 27019, 6125, 6045,
	27019, 28351, 28351, -1000, 27019, 5482, -1000, -1000, -1000, -1000,
	-1000, 2144, 582, 27019, 9219, 5527, 5436, -1000, 382, 67809,
	863, -1000, 27019, -1000, 381, 19339, -1000, 72463, -25, -84,
	-1000, 2704, 1883, 1551, 1436, 1321, 2689, 11842, -172, -86,
	-1000, -1000, 765, -1000, 2357, -1000, 27019, 72744, 11413, -1000,
	35984, 912, 1610, -1000, -1000, 2686, 830, -1000, -1000, -1000,
	830, -1000, 71274, 9219, 9219, 27019, 27019, -1000, 27019, 27019,
	27019, -1000, -1000, 27019, -1000, -1000, 2125, 27019, -1000, 9219,
	9219, 28351, 28351, 28351, 28351, 28351, 28351, 28351, 28351, 28351,
	28351, 28351, 28351, 28351, 28351, 28351, 28351, 28351, 28351, 28351,
	1914, 28351, 2662, 2662, 2662, -1000, 2122, 2125, 27019, 27019,
	9219, 380, 374, 370, -1000, 27019, -172, -1000, -1000, 3733,
	-1000, 2072, -1000, -81, -1000, 2388, -1000, -1000, 2072, 2072,
	-91, 73628, 30914, 30914, -1000, 581, 27019, 1972, -1000, 725,
	-1000, -92, -1000, 54483, -1000, 724, -240, -1000, 803, -1000,
	-1000, -1000, -1000, 470, -1000, -1000, -1000, 231, 54483, -1000,
	-93, -1000, 2571, 367, 14420, -1000, -1000, -1000, -1000, -1000,
	-1000, -30, 1639, 2703, -1000, 2687, 764, 723, 362, 2686,
	352, 351, -30, 62875, -1000, -20, -1000, -1000, -1000, 27019,
	-1000, -1000, 2481, 1058, 1057, -1000, 2322, -1000, 1808, -1000,
	971, -1000, 1359, -1000, 27019, 27019, 580, 577, 1524, 2736,
	2321, 1629, 2319, 1629, -1000, -1000, 849, -1000, 73628, 566,
	551, -1000, -22, 1371, 898, -1000, -1000, 27019, 27019, 55317,
	-1000, 2493, 2493, -4, -1000, 1056, -1000, -1000, -1000, 2659,
	1055, -1000, -1000, 1477, -1000, -1000, 896, -1000, -1000, 27019,
	-1000, -23, 1050, 869, 2120, -1000, -1000, 2735, 2731, 2730,
	350, -94, -24, 9219, 2570, 1749, 62875, 51151, 51151, 2566,
	834, -1000, 2675, -1000, -1000, -1000, -1000, 893, -1000, -1000,
	2729, -1000, 980, 14420, 51151, 2318, 1922, 788, 41925, -1000,
	893, 1996, 73628, -1000, 1362, 18883, 2480, -101, -1000, -1000,
	-1000, 911, 35565, 30914, 27019, 2727, -104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54902, 54902, 41506, 41506, 41506,
	869, 62875, 62875, 42755, 2726, 550, 62875, 62875, 549, -1000,
	62875, 62875, 2725, 41506, -1000, -1000, 135, -1000, 1624, 51151,
	-1000, -1000, 878, -1000, -1000, 1517, 1758, 1517, 1662, 70886,
	-1000, 2491, 14420, 2627, 461, 27019, 27019, 4089, 366, 214,
	461, 27019, 27019, 9219, 74234, -107, 27019, 27019, -1000, 27019,
	722, 73628, 2700, 27019, 343, 341, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 340, -1000, -1000, -1000, -1000,
	-1000, 73628, 27019, 111, -1000, -1000, -1000, 67025, -1000, 27019,
	337, 336, -1000, -1000, -1000, 334, 333, 67524, 3937, 70809,
	70421, 70344, 73628, 2122, 73628, -1000, -1000, 783, 783, 1204,
	1204, 1204, 1204, 2662, 436, 686, 1052, 604, 604, 604,
	843, 1006, 1006, 604, 604, 604, 2112, 1906, 546, 7076,
	-1000, -1000, 73628, 73628, 327, -1000, -1000, -1000, -172, 325,
	2062, 2528, -1000, 30914, 2062, 2062, -1000, -1000, 1929, 62875,
	73628, 30914, -5, -1000, 2675, -1000, -1000, 2073, -1000, 10122,
	-1000, 14420, -1000, -1000, 33887, -1000, 528, -1000, 38, -1000,
	-1000, 721, 2724, 761, -1000, 319, -1000, -1000, -30, 73628,
	62875, 62875, 62875, 2310, -1000, 3614, -1000, 69956, -110, -1000,
	71818, 27019, 62875, -1000, 1543, 1964, 1008, -1000, 62875, -1000,
	62875, -1000, -1000, 62875, 62875, 51151, 2302, -112, 73628, -39,
	-1000, 797, -1000, -1000, 10984, 51151, 51151, 41506, 2295, -113,
	14420, -1000, 41506, -1000, -1000, -1000, 2018, -1000, 53647, 1632,
	135, -1000, 2723, 527, 2659, 135, -1000, 1614, -1000, 720,
	-1000, -1000, 526, 62875, 1709, 523, 14420, 1927, 788, 41925,
	-1000, 1108, 1362, -1000, -1000, -103, -1000, 500, 135, 1610,
	-1000, -122, 73628, -1000, 789, -1000, -115, -1000, -1000, 314,
	-1000, 2438, 2437, -1000, -1000, 27019, 520, 519, 62875, 2436,
	-1000, -1000, -120, -1000, 1881, -1000, -1000, -1000, -1000, 14420,
	1309, -1000, -1000, -1000, -1000, 2491, 461, 461, 27019, 27019,
	27019, 461, 74234, -123, -1000, 461, 461, -172, -1000, -1000,
	72463, -1000, -1000, -1000, 73628, 10555, 1518, -1000, 69879, -1000,
	-1000, -1000, -1000, 27019, 27019, -1000, -1000, -1000, -1000, -1000,
	28351, 2106, 518, 9219, -1000, -1000, 907, 27019, 27019, 2388,
	907, 907, -1000, -126, -1000, 820, -1000, -1000, -1000, 2675,
	38, -1000, 2722, 14420, 743, -1000, 2719, -1000, -1000, -1000,
	-1000, 62875, -1000, 62875, -1000, 14420, 62875, 2092, 1785, -1000,
	-1000, 1942, 514, 28351, 51151, 480, 2121, 1501, 27019, -1000,
	-131, -136, 1783, -1000, -1000, 1782, 27019, -1000, 9219, 1629,
	1629, -139, -144, -1000, 27019, 1041, 62875, 18439, 2493, -1000,
	-1000, -1000, 27019, 1040, -1000, -125, 1516, 2047, -1000, -1000,
	-1000, -1000, 1940, -1000, -1000, 62875, 1938, 875, -1000, 42755,
	872, -1000, -1000, 883, -1000, 27019, -1000, 51151, 27019, 1708,
	-1000, 788, 41925, -1000, 2378, -1000, 2399, 62875, 2465, -1000,
	1996, 511, -1000, 869, 510, 506, -146, 27019, 27019, -147,
	505, 869, -133, -1000, 745, 738, -1000, -1000, 51151, 51151,
	-1000, 461, 461, 461, -1000, 306, -1000, -1000, 1610, 2526,
	-1000, 69491, 69414, 548, 28351, 9219, -149, -1000, 62875, 73628,
	-172, -1000, -1000, -1000, 54483, 408, -1000, 2718, -1000, -1000,
	2844, -1000, -1000, -1000, 62875, 1801, -1000, -1000, 27019, 7076,
	504, 27019, -1000, -1000, 2014, 2119, 2018, 503, -1000, -1000,
	-1000, -1000, 1410, -1000, -1000, 73628, 2509, -1000, -1000, 502,
	494, 73628, 492, 784, 2094, -1000, -1000, 73628, 491, 872,
	-1000, 1557, 1632, 489, -1000, -1000, -1000, 2035, 168, 2563,
	883, -1000, 2672, -1000, -154, 980, -155, 51151, 41925, -1000,
	1922, 1154, -156, 62875, 1362, -1000, -1000, 41506, 41506, 1501,
	-157, -174, -1000, 41506, -1000, 1881, -1000, 62875, -1000, 62875,
	-1000, -1000, -1000, 1481, 27019, -1000, -1000, 548, -175, -1000,
	-169, -1000, 2562, -1000, -1000, -1000, -1000, -1000, 2257, 69026,
	1893, 62875, 278, 2116, -1000, -1000, 1516, 62875, 51151, 978,
	14420, 1517, 1517, 27019, 17995, 1547, 27019, -1000, 51151, 62875,
	-1000, 2435, 2018, 135, -1000, -1000, 1501, 479, 1501, 477,
	-1000, 1927, 1237, -1000, 911, -1000, -1000, -176, -181, 2018,
	1501, -1000, -182, -1000, -183, -191, 137, 27907, 27907, 27907,
	-172, -1000, 62875, 473, 2269, -1000, 1688, 1487, 27, 984,
	-1000, -1000, 2121, -192, 470, -1000, 27019, -1000, -199, -1000,
	953, -200, -1000, 951, -205, -1000, 2089, -1000, -206, 469,
	-207, -1000, -1000, -1000, 1516, 875, 2018, 27019, 2018, 27019,
	-1000, 35565, -1000, 869, 869, 1516, 2018, 869, -1000, -1000,
	-1000, 2316, -1000, 28780, 1641, 1345, 71739, 2316, 2316, -1000,
	-1000, 62875, -1000, 1707, 1701, 1293, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1893, 73628, -1000, 1517, 2043, -1000,
	1517, 2086, -1000, 1505, -1000, 62875, -1000, 62875, 872, -1000,
	1516, -208, 1516, -213, -197, -1000, -1000, -1000, 1516, -1000,
	-1000, 1405, 2636, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2324, -1000, 987, 1611, 1611, 1688, -1000, 468,
	-1000, 466, -1000, -214, -1000, -1000, 909, 1501, 909, 1501,
	-1000, -1000, 1334, -1000, -1000, 1582, 27463, -1000, 2649, -1000,
	-1000, 1924, -1000, 2121, 27019, 27019, 1628, -1000, 2714, 2018,
	-1000, 2018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -219,
	-221, -1000, -1000, -1000, -1000, 1516, 1516, 1516, 1025, 909,
	909, -1000, 465, -1000, -1000, 27019, -222, 1516, -1000,
}
var sqlPgo = [...]int{

	0, 3401, 3400, 3399, 3398, 3397, 3395, 3394, 3393, 3390,
	3389, 3388, 3387, 3386, 3385, 3383, 3380, 3376, 3373, 3363,
	3362, 3360, 3355, 3353, 3348, 3347, 3346, 3342, 3336, 3335,
	3334, 3331, 3329, 3327, 3326, 3323, 3320, 3317, 3310, 3307,
	3306, 3304, 3302, 3301, 3300, 3299, 3298, 3295, 31, 3294,
	3292, 3291, 3290, 3288, 3285, 3283, 3282, 3281, 3279, 3278,
	3277, 3275, 3274, 3272, 3271, 3270, 36, 3268, 216, 3267,
	3266, 3265, 3264, 3263, 3262, 3261, 3260, 3259, 3258, 215,
	3257, 119, 3256, 3250, 3247, 3244, 3240, 211, 3238, 3235,
	3234, 3233, 3232, 3231, 3230, 3228, 125, 3227, 3226, 147,
	3216, 3215, 3212, 3209, 3208, 3207, 3205, 3204, 3202, 3197,
	190, 3192, 210, 3187, 3186, 3185, 3183, 3182, 3181, 3179,
	3178, 3175, 3173, 3172, 3171, 3167, 3163, 3159, 3158, 3155,
	3154, 3153, 3152, 3150, 3149, 3146, 3142, 3141, 3139, 223,
	156, 3137, 3134, 209, 207, 3130, 3128, 96, 94, 72,
	3125, 84, 171, 197, 4728, 184, 3123, 3121, 3117, 3115,
	3113, 75, 133, 134, 127, 131, 182, 3111, 3110, 68,
	54, 33, 27, 101, 3103, 3102, 3101, 2436, 98, 3100,
	3099, 204, 181, 3098, 784, 3097, 129, 76, 104, 100,
	87, 3096, 121, 18, 3095, 155, 40, 3088, 126, 70,
	30, 5269, 6332, 3087, 69, 218, 79, 193, 217, 186,
	170, 161, 128, 756, 3086, 191, 3084, 95, 151, 3079,
	3077, 3075, 63, 148, 64, 3072, 2, 9, 164, 16,
	86, 13, 3071, 12, 3066, 3060, 3056, 3054, 25, 143,
	3053, 120, 58, 3052, 28, 3048, 183, 160, 3045, 172,
	91, 3044, 3040, 203, 158, 150, 10, 178, 3038, 3036,
	3035, 3034, 3033, 90, 23, 97, 3032, 3031, 107, 179,
	3029, 34, 124, 78, 116, 208, 93, 165, 83, 169,
	135, 175, 3028, 3027, 3023, 152, 3022, 3021, 141, 168,
	3020, 3019, 219, 35, 53, 180, 52, 3006, 3003, 123,
	3002, 153, 3000, 2997, 2994, 214, 144, 159, 5, 62,
	92, 26, 8, 163, 110, 82, 80, 2988, 3008, 1352,
	1191, 2987, 109, 106, 49, 85, 114, 202, 50, 2984,
	2982, 108, 2979, 2974, 2972, 2971, 137, 2963, 2962, 2960,
	105, 71, 89, 2957, 122, 61, 11, 139, 205, 88,
	162, 212, 192, 2956, 136, 2955, 37, 118, 2954, 146,
	189, 154, 2952, 360, 117, 2951, 166, 2950, 2949, 2948,
	2946, 57, 2940, 2939, 271, 2938, 145, 2937, 2936, 142,
	111, 132, 103, 43, 2935, 66, 115, 2933, 149, 55,
	2931, 199, 32, 0, 6134, 5064, 6154, 2930, 5607, 2928,
	173, 102, 2926, 2925, 2924, 73, 2923, 56, 2919, 2918,
	38, 2917, 14, 4, 6, 19, 17, 738, 713, 2915,
	2914, 74, 99, 112, 2913, 213, 174, 2911, 2909, 2908,
	67, 2907, 24, 2906, 22, 2904, 2900, 29, 7, 20,
	2899, 2897, 185, 2896, 187, 2892, 2889, 2616, 2888, 201,
	65, 2887, 130, 167, 2885, 2880, 2872, 2870, 194, 2867,
	198, 2863, 15, 21, 3, 2859, 2855, 2854, 157, 1,
	2433, 2852, 2851, 60, 140, 2849, 2847, 138,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 449,
	449, 19, 31, 20, 32, 13, 450, 450, 450, 450,
	24, 21, 33, 22, 22, 22, 150, 150, 150, 150,
	18, 18, 27, 27, 163, 163, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 448, 448, 165,
	165, 164, 160, 160, 451, 451, 166, 166, 166, 168,
	168, 37, 37, 95, 95, 95, 96, 96, 97, 97,
	151, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	83, 83, 391, 391, 392, 392, 146, 146, 147, 147,
	147, 147, 148, 148, 149, 149, 149, 51, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 49, 49, 49, 49, 140, 140, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 456, 456, 457,
	457, 458, 458, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 63, 63,
	240, 240, 216, 216, 64, 64, 64, 65, 65, 66,
	66, 53, 53, 444, 444, 254, 254, 358, 358, 68,
	68, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 74, 74, 74, 255, 255, 79, 79, 79,
	79, 79, 79, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 360, 360,
	80, 80, 80, 329, 329, 84, 84, 84, 286, 286,
	85, 85, 85, 85, 85, 86, 86, 86, 86, 98,
	98, 98, 98, 447, 447, 247, 247, 181, 181, 181,
	181, 91, 91, 91, 91, 92, 92, 92, 93, 93,
	145, 145, 104, 104, 104, 104, 104, 103, 103, 103,
	103, 103, 103, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 48, 48, 106,
	106, 452, 452, 108, 105, 105, 105, 107, 107, 107,
	107, 109, 110, 110, 110, 110, 110, 110, 111, 111,
	385, 385, 262, 262, 383, 383, 399, 399, 384, 384,
	220, 220, 220, 220, 220, 221, 221, 221, 390, 390,
	390, 390, 390, 390, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 130, 130, 130, 139, 139,
	139, 139, 139, 139, 139, 132, 132, 132, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	114, 114, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 292, 292, 292,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	135, 135, 135, 135, 135, 135, 343, 343, 131, 131,
	131, 131, 134, 134, 134, 134, 276, 276, 128, 128,
	128, 129, 129, 129, 133, 133, 136, 136, 136, 136,
	116, 116, 116, 461, 461, 461, 137, 137, 127, 127,
	138, 138, 138, 138, 138, 138, 138, 138, 126, 126,
	126, 126, 119, 445, 445, 442, 442, 442, 442, 442,
	442, 442, 443, 443, 446, 446, 89, 89, 89, 58,
	58, 462, 462, 462, 59, 59, 463, 463, 463, 460,
	460, 460, 460, 460, 460, 460, 460, 222, 222, 223,
	223, 310, 310, 310, 310, 310, 226, 226, 167, 167,
	167, 229, 230, 230, 227, 227, 228, 228, 228, 232,
	232, 231, 234, 234, 233, 309, 406, 406, 408, 408,
	408, 408, 408, 408, 408, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 404, 404, 404, 405, 400,
	400, 401, 401, 401, 401, 224, 224, 225, 225, 225,
	225, 402, 403, 245, 245, 346, 407, 407, 409, 409,
	411, 464, 464, 464, 464, 464, 464, 465, 465, 308,
	308, 238, 238, 412, 412, 412, 412, 413, 413, 413,
	413, 413, 416, 415, 414, 414, 414, 414, 414, 339,
	339, 339, 62, 62, 62, 273, 273, 272, 272, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 142, 142, 60, 60, 60, 173, 173,
	57, 57, 57, 467, 467, 61, 61, 61, 468, 468,
	67, 67, 67, 67, 67, 67, 56, 56, 56, 56,
	56, 469, 469, 293, 293, 291, 291, 244, 244, 345,
	185, 185, 161, 161, 161, 23, 25, 25, 17, 17,
	34, 34, 35, 35, 30, 30, 453, 453, 454, 454,
	90, 90, 94, 94, 94, 102, 102, 141, 141, 141,
	141, 141, 141, 141, 38, 38, 38, 38, 50, 50,
	50, 50, 100, 471, 471, 471, 101, 101, 470, 470,
	180, 180, 180, 180, 182, 182, 305, 305, 306, 306,
	472, 472, 307, 307, 307, 307, 175, 174, 176, 176,
	55, 55, 55, 169, 169, 170, 170, 171, 171, 172,
	172, 473, 473, 87, 87, 87, 144, 144, 215, 215,
	301, 301, 301, 239, 239, 190, 190, 304, 304, 302,
	302, 302, 302, 271, 271, 271, 143, 143, 252, 252,
	264, 264, 265, 265, 355, 355, 266, 99, 99, 154,
	154, 152, 152, 152, 152, 152, 152, 474, 474, 153,
	153, 153, 155, 155, 155, 155, 155, 155, 155, 158,
	158, 158, 158, 159, 159, 159, 157, 157, 423, 423,
	423, 425, 425, 426, 422, 422, 424, 424, 466, 466,
	275, 275, 275, 236, 237, 235, 235, 242, 242, 241,
	243, 243, 344, 344, 344, 269, 269, 269, 269, 296,
	296, 294, 294, 295, 295, 297, 297, 298, 298, 298,
	299, 299, 300, 300, 268, 268, 325, 325, 156, 156,
	156, 249, 249, 249, 250, 250, 316, 316, 316, 316,
	316, 316, 317, 317, 315, 315, 315, 315, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 348, 348, 251,
	251, 349, 303, 303, 440, 440, 440, 441, 441, 342,
	342, 350, 350, 350, 350, 350, 350, 340, 340, 341,
	341, 356, 357, 357, 279, 279, 279, 279, 277, 277,
	280, 280, 280, 280, 278, 278, 351, 351, 351, 351,
	270, 270, 352, 352, 352, 353, 311, 312, 312, 361,
	361, 361, 361, 361, 376, 248, 248, 248, 248, 248,
	475, 475, 362, 362, 362, 362, 362, 362, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	366, 366, 366, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 375, 375, 375, 375, 375, 367, 367, 372, 372,
	373, 373, 373, 368, 369, 374, 374, 374, 374, 476,
	476, 378, 378, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 364, 364, 364, 371, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 287,
	287, 288, 288, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 320, 320,
	320, 320, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 417, 417, 417,
	417, 417, 417, 417, 417, 420, 420, 421, 421, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 427, 427,
	428, 428, 430, 430, 431, 431, 432, 433, 433, 433,
	434, 435, 435, 429, 429, 436, 436, 436, 436, 437,
	437, 438, 438, 438, 438, 438, 439, 439, 439, 439,
	439, 331, 331, 332, 332, 338, 338, 338, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 183, 183, 183, 183, 183, 260,
	260, 258, 258, 258, 261, 261, 259, 259, 257, 257,
	256, 256, 328, 328, 326, 326, 330, 330, 281, 281,
	377, 377, 377, 377, 377, 377, 377, 282, 282, 282,
	290, 283, 283, 284, 284, 284, 284, 284, 322, 323,
	285, 285, 285, 324, 324, 333, 337, 337, 336, 335,
	335, 334, 334, 313, 313, 314, 314, 267, 267, 477,
	477, 263, 263, 354, 354, 354, 354, 218, 218, 253,
	253, 217, 217, 210, 210, 211, 211, 211, 211, 246,
	246, 379, 379, 379, 380, 381, 382, 327, 200, 199,
	187, 188, 198, 197, 196, 186, 189, 193, 194, 195,
	191, 192, 206, 205, 204, 202, 203, 359, 212, 212,
	213, 213, 213, 214, 214, 214, 214, 184, 184, 207,
	207, 208, 209, 209, 201, 201, 201, 177, 177, 177,
	178, 178, 179, 179, 389, 389, 387, 387, 387, 388,
	388, 388, 388, 386, 386, 386, 386, 386, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 395, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 398, 398,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 3, 1, 3,
	1, 6, 4, 9, 7, 12, 12, 12, 9, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 3, 1, 0, 1, 2, 2,
	1, 6, 5, 1, 2, 1, 3, 2, 0, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	5, 3, 5, 5, 5, 3, 3, 3, 4, 3,
	4, 3, 5, 4, 5, 3, 4, 5, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 7, 9, 3, 4, 5, 5,
	5, 3, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 10,
	13, 0, 2, 3, 9, 12, 0, 2, 3, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 5, 8, 5, 11, 3, 0, 2, 4, 3,
	3, 1, 5, 1, 3, 1, 2, 0, 1, 2,
	2, 0, 1, 3, 3, 2, 2, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 1, 1, 8, 7, 5, 0, 1,
	6, 7, 6, 5, 3, 4, 14, 17, 14, 17,
	4, 0, 2, 2, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 5, 6, 4, 6, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	1, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 1, 2, 4, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 3, 3, 3, 0, 1,
	4, 2, 2, 2, 2, 2, 3, 2, 2, 3,
	0, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 458, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 82, 68,
	123, 104, 109, 156, 288, 317, 327, 311, -107, -108,
	346, -38, -50, -101, -100, -4, -10, 27, 39, -40,
	-41, -42, 53, -60, -57, -54, -63, -455, 84, -424,
	-71, -74, -76, -459, 114, 129, 173, 280, -92, -93,
	313, 315, 130, -45, -44, 124, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 349, 395, 40,
	358, 69, 117, 321, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -423, -72, -73, -75, -77, -78, 312, -155, -153,
	455, 408, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 426, 434, -158, -156, -157,
	-159, 334, 416, 372, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, -202, -207, -208, -209, -201, -177,
	-395, -398, 4, -393, -396, 135, 181, 248, 21, 22,
	23, 24, 25, 27, 37, 38, 39, 40, 43, 45,
	46, 49, 50, 51, 52, 53, 54, 57, 62, 67,
	68, 69, 70, 71, 72, 77, 74, 75, 76, 79,
	81, 82, 83, 86, 87, 95, 96, 97, 98, 99,
	100, 104, 107, 106, 109, 112, 113, 114, 116, 118,
	119, 121, 123, 124, 127, 125, 378, 126, 128, 129,
	130, 131, 141, 142, 143, 145, 146, 148, 150, 154,
	155, 157, 161, 163, 164, 165, 166, 172, 173, 175,
	176, 182, 177, 183, 187, 190, 189, 191, 192, 193,
	184, 198, 202, 203, 204, 206, 207, 210, 211, 212,
	213, 216, 215, 218, 221, 222, 225, 226, 229, 230,
	232, 233, 236, 234, 237, 235, 238, 241, 239, 240,
	243, 244, 246, 245, 170, 253, 254, 256, 257, 258,
	274, 261, 262, 263, 266, 267, 270, 273, 275, 276,
	277, 278, 279, 280, 281, 283, 284, 286, 288, 290,
	292, 293, 294, 295, 296, 297, 299, 300, 302, 303,
	304, 305, 306, 311, 308, 309, 310, 312, 313, 314,
	315, 317, 319, 320, 321, 322, 324, 326, 347, 348,
	360, 327, 328, 329, 330, 331, 332, 333, 337, 341,
	338, 339, 340, 342, 335, 336, 343, 344, 346, 349,
	351, 353, 354, 357, 358, 359, 361, 364, 365, 366,
	362, 363, 356, 371, 369, 370, 373, 374, 375, 376,
	377, 379, 381, 389, 390, 392, 395, 396, 397, 387,
	399, 400, 403, 404, 405, 406, 407, 412, 408, 410,
	413, 414, 415, 421, 420, 427, 428, 430, 431, 432,
	32, 41, 42, 44, 47, 58, 59, 60, 63, 101,
	102, 122, 132, 133, 144, 158, 160, 167, 168, 169,
	188, 194, 196, 200, 219, 251, 252, 268, 272, 285,
	287, 298, 323, 352, 367, 382, 383, 384, 385, 391,
	393, 416, 417, 418, 422, 429, 259, -195, 2, -177,
	-177, 288, 26, 2, 26, 284, 336, 374, 376, 2,
	-447, -247, 2, 26, -181, -177, 84, 156, 334, -195,
	2, -447, -247, 24, 2, -177, 2, -182, 2, 327,
	-177, 458, 79, 226, 62, 323, 343, -110, 390, -109,
	382, 329, -111, -385, 2, 241, -177, 458, 458, 458,
	458, 2, 372, 277, 420, 335, 409, 97, 295, 181,
	-442, 2, 4, -396, -393, -211, -210, 372, 97, -209,
	-201, 448, -208, 458, 458, 458, 2, 203, 204, 294,
	293, 343, 344, 458, 458, 458, 2, 25, 56, 78,
	81, 103, 131, 151, 154, 264, -456, 233, 274, 292,
	329, 342, 371, 379, 392, -460, 359, 57, 409, -467,
	397, 112, -291, 97, 376, 374, 226, 155, 404, 319,
	159, 402, 107, 187, 407, 406, 458, 458, 25, 56,
	65, 81, 112, 131, 151, 154, -458, 274, 292, 326,
	329, 342, 371, 379, 397, 392, 2, 420, 335, 372,
	181, 97, 409, 319, 291, -81, 2, 455, 29, 346,
	-151, 372, 197, 2, -177, 203, 204, 2, 458, 458,
	-442, 2, 203, 204, 2, 197, 2, 57, 331, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 2, -139, 343, 359,
	165, 39, 62, 26, 67, 278, 98, 157, 181, 182,
	211, 78, 79, -292, 38, 204, 203, -343, 373, 330,
	336, 369, 390, 84, 410, 320, 432, 296, 125, 4,
	97, 241, 345, 382, 226, 71, -466, 2, 372, -470,
	2, 390, 390, 2, -470, 2, -470, 2, -180, 2,
	390, 386, -471, 390, 429, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, -153, -155,
	-154, 458, 458, 458, 458, 458, -139, 343, 2, 62,
	26, -474, 149, -241, -242, 401, 195, 120, 265, -152,
	-154, 2, -423, -383, 2, -318, -399, -320, 446, 447,
	441, 247, 433, -331, 103, 402, 259, -398, -321, -333,
	122, 323, -261, 8, 9, 5, 6, 7, -184, -363,
	-327, -371, 394, 134, 250, -214, 459, 10, 455, -420,
	-154, -332, 33, 160, 55, -387, -213, -365, -373, -369,
	-370, -475, 45, 51, 50, 379, 240, 337, 338, 353,
	339, 340, 43, 412, 177, 256, 258, 189, 4, 196,
	-212, -201, -417, -418, -393, -394, 188, 194, 190, 352,
	191, 192, 193, 42, 298, 145, 146, 144, 113, 102,
	101, 252, 47, 46, 44, 417, -374, 99, 382, 383,
	384, 385, 206, 207, -177, -395, 65, 89, 90, 88,
	93, 92, 94, 91, 345, 409, 56, 32, 167, 168,
	200, 251, 169, 63, -419, 363, 85, 153, 186, 171,
	199, 201, 205, 220, 223, 242, 249, 269, 271, 318,
	350, -476, 418, 132, 133, 272, 285, 367, 391, 393,
	158, 219, 58, 59, -425, 299, -426, -195, -425, 458,
	458, 460, 458, -235, -236, -237, 2, 26, 110, 455,
	2, -347, 2, 453, -351, -154, 214, -350, 455, -348,
	-202, 260, -421, 324, -417, -418, -184, -201, -213, 4,
	-238, 455, 457, 97, 372, 66, 2, -286, 455, -177,
	26, 259, 386, 460, -329, 455, 259, 152, 262, -177,
	2, 2, 347, 2, 455, -110, 60, 390, -306, 2,
	-307, -174, -175, -176, -356, 202, 290, 297, 435, 432,
	-383, -452, 152, 438, 386, -383, -262, 457, 2, -351,
	167, -202, 2, -199, -386, 4, -393, -396, -394, -397,
	65, -395, 26, 28, 29, 30, 31, 33, 34, 35,
	36, 48, 55, 56, 61, 64, 66, 78, 84, 88,
	89, 91, 90, 92, 93, 94, 103, 105, 108, 110,
	111, 115, 117, 120, 134, 136, 149, 151, 152, 156,
	159, 162, 174, 185, 195, 197, 214, 217, 224, 227,
	228, 247, 250, 255, 259, 260, 264, 265, 282, 289,
	301, 316, 334, 345, 355, 368, 372, 380, 386, 388,
	394, 401, 402, 409, 411, 419, 423, 424, 425, 426,
	-398, 2, -351, 167, 2, -204, 167, -351, -207, 2,
	-391, 167, -389, 10, -388, 5, 4, -393, -396, -394,
	2, -186, -177, 2, -198, -386, 2, -217, 167, -202,
	-203, -207, 386, 460, -253, -210, -211, -246, -177, 457,
	-318, 2, -99, 2, -318, 167, 2, -99, 167, 2,
	-318, 167, 2, -99, 167, 2, 2, 2, 392, 2,
	81, 167, -177, 372, 96, 2, 310, -457, 326, 396,
	420, 2, 2, 2, 2, 2, 2, 2, 372, 335,
	-468, 299, -191, 2, -177, 149, -391, 167, 2, -391,
	167, 2, -205, -207, -205, 181, 198, -186, 167, 2,
	376, 374, 376, 374, 152, 2, 197, 2, 197, 2,
	-352, 2, -353, -202, 2, 2, 2, 2, 2, 167,
	-177, 372, 96, 2, 213, 2, 2, 2, 2, 2,
	2, 2, 2, 2, -255, 167, 2, -202, -255, 167,
	2, -255, 167, 2, -218, 167, 2, -217, -186, 167,
	2, -392, 167, 2, -391, -392, 167, 2, -360, 2,
	-359, -388, 416, -81, 455, 343, 455, -391, -202, -202,
	-318, -99, 152, -318, -99, -151, 149, 2, 97, 372,
	-139, 2, 149, 411, 2, 8, 2, -391, 330, 296,
	141, 2, 347, 2, 62, -292, 432, 152, 2, 152,
	2, -276, 2, 426, -445, 2, 259, 152, 2, 152,
	2, 152, 2, 152, 2, 152, 2, 293, 344, 204,
	2, -99, 423, -318, 423, 2, 389, 212, 126, 152,
	-276, 2, 152, 2, 152, 2, 5, 2, 202, 290,
	360, 2, -202, -461, 2, 372, 420, 335, 2, 2,
	74, 75, 152, 2, 152, 432, 2, -270, -351, -305,
	-306, -305, 386, -182, -474, -241, -242, -139, 347, 2,
	2, -474, -269, -294, -295, 224, 136, 255, -275, 26,
	110, -275, -275, 49, 456, 456, 11, 12, 64, 37,
	446, 447, 448, 449, 147, 450, 451, 444, 445, 443,
	436, 437, 440, 208, 209, 80, 439, 438, 73, 231,
	325, 137, 138, 139, 140, 307, 178, 179, 180, 14,
	15, 16, 30, 264, 223, 433, 171, 350, 441, 17,
	18, 19, 199, 201, 249, 41, 174, -183, -219, -318,
	-318, -318, -318, -318, 271, 455, -267, -313, 453, -154,
	455, 455, 455, 5, 455, 5, -382, 8, -154, -318,
	-331, 456, -259, 455, -154, -331, -326, 455, 323, 453,
	455, -334, -318, 457, -427, 427, -367, 455, 287, -366,
	455, -366, -366, 421, -364, 455, 434, 428, 455, -364,
	455, 455, 149, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 421, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 460, -425, -238, 455,
	-263, -354, -318, 448, -263, -263, 259, -256, -318, 85,
	-279, 205, 242, 153, 220, 318, 186, -382, -82, -68,
	-79, -87, -99, -112, -143, -144, -315, 459, -342, 434,
	-154, -348, -201, -154, -350, 455, -347, -342, 448, -202,
	455, 152, 455, 457, 152, -246, -386, -186, -202, -212,
	-213, 109, -256, -442, -246, -181, 34, -328, -361, -362,
	-375, -363, -372, -368, -371, 303, 304, 302, 306, 305,
	45, 51, 50, 379, 240, 337, 338, 353, 339, 340,
	43, 412, 177, 256, 258, 189, 4, 44, 417, -374,
	196, 188, 194, 190, 352, 191, 192, 193, 42, 298,
	145, 146, 144, 113, 102, 101, 252, 47, 46, 99,
	382, 383, 384, 385, 206, 207, 418, 363, 58, 59,
	-442, -246, 149, -385, -256, 34, -306, 2, -472, 460,
	222, -221, 230, 246, 164, 260, 430, 253, -390, 5,
	4, -327, -339, 103, 226, -371, 9, 447, -379, 8,
	446, -384, -383, 87, 457, -386, -163, 308, -162, 23,
	27, 114, 414, 127, -228, 183, 277, 122, 356, 405,
	-449, -450, 328, 377, 378, 76, 253, 308, 122, -272,
	-274, 34, 95, 244, 273, 52, 175, 235, 236, 358,
	422, 122, 308, 426, 122, -450, 308, -450, -165, 356,
	405, -449, -450, 328, 308, -164, -228, 122, 459, -96,
	-391, 455, -253, 460, 460, -386, 448, 122, 122, 122,
	122, 2, 2, 247, 2, 2, 2, 154, -460, -458,
	2, 2, 2, -202, 167, -204, 167, 2, -207, 420,
	-240, 259, -444, -254, 372, -202, -173, -422, 426, 247,
	247, 34, 455, 2, -188, 167, 2, -178, -177, 181,
	-422, 247, -352, -215, -202, -215, 346, -195, 34, -315,
	122, 2, 2, 2, -177, -166, 460, 54, 314, 122,
	-166, 122, -166, 122, -166, 460, 122, -166, 122, 460,
	122, 122, 456, 460, -360, -391, -149, 426, 152, 84,
	455, 455, -151, -97, -96, -391, -444, -186, 2, -202,
	2, 372, 206, -391, -391, -391, -385, 26, 348, 2,
	293, 344, 75, -202, 372, 97, 181, 68, -446, 149,
	-443, 319, -442, -202, 97, -202, 97, -202, 97, -202,
	-202, 2, 2, 2, 2, 72, 72, 149, 2, 389,
	2, 389, 2, -177, -177, -177, 222, -202, 149, 372,
	181, 97, 372, -166, 460, -182, -474, -269, -385, -474,
	-295, -294, -297, -318, 26, -300, 143, 243, -318, -320,
	-153, -153, -153, -243, -344, -318, 289, 181, -376, -361,
	-361, -200, -386, 382, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, 223,
	171, 350, 41, 174, -318, 386, -318, -318, -318, -318,
	239, 247, 250, 394, 134, 403, 110, 253, -477, 368,
	36, -324, -154, -260, 455, -338, 31, 355, 26, -331,
	455, 2, -313, -318, -314, -257, -256, -256, 456, 419,
	26, 110, 448, 2, 8, -287, -289, 431, 238, 100,
	166, 237, -288, 333, 456, 460, 34, 456, -318, -257,
	-330, -326, -256, -337, -336, 423, -386, 448, -428, 142,
	159, 8, -380, 8, -380, 382, 382, 8, -380, -380,
	455, 456, 2, 456, 2, 456, 2, 456, 2, 456,
	2, -318, -318, -318, -318, -318, -318, -318, -256, -281,
	2, -377, -256, 4, 431, 238, 100, 166, 237, 333,
	-281, 2, -282, 2, -318, -256, -283, -319, -320, 446,
	447, 441, -331, -284, 2, -318, -257, -318, 48, 217,
	388, -285, -318, 152, -256, -256, 2, -256, 2, -426,
	34, -256, -249, 460, 152, 34, 4, -249, -249, 455,
	456, 460, -280, 163, 234, 229, -280, -347, -279, 205,
	-277, 269, -277, -277, -440, 455, 454, 458, 458, 458,
	458, 458, -342, -187, 453, 461, -386, -341, -340, 34,
	-195, 266, -342, -342, 457, 456, -341, -202, 455, -256,
	-386, 361, 456, 457, 199, 199, 199, 324, 456, 386,
	426, -81, 261, 456, 460, -248, 33, 453, -289, 455,
	-378, 421, 455, 455, 152, -247, -452, 456, 390, -307,
	-220, 297, 354, 309, 341, 370, 9, 8, 8, 460,
	-386, 460, -453, 78, 386, 66, -309, 167, 66, -400,
	-189, 78, -401, -177, 61, 402, 289, 151, -453, 78,
	-453, 78, 78, 346, 359, 49, -351, 37, 37, 26,
	-99, 218, 152, 432, 372, 181, 386, -351, -274, -361,
	95, 235, 236, 49, -381, -379, 447, -381, 49, -381,
	-381, -381, 426, -204, -351, 386, 279, -391, 386, 460,
	37, 37, 26, -99, 218, 152, 386, -217, -187, -357,
	-356, -392, -210, -177, 457, -318, -99, -318, -99, 122,
	2, -468, 213, 455, -224, 247, -273, -272, 247, -206,
	2, -202, 152, -246, -358, 197, 460, -254, 279, 122,
	122, 455, 118, 295, 2, 259, 247, -188, 167, -169,
	375, 122, -312, -311, 424, -301, -99, 455, 103, 34,
	-301, -264, -265, -355, -266, -189, 455, -195, -177, 2,
	-202, -255, -255, -255, -217, -218, -186, -391, -392, -392,
	-81, -359, 456, 456, -148, 263, -147, -177, 5, -151,
	411, -223, -310, -309, -404, -405, -400, 223, 181, 402,
	198, 135, -239, -190, -189, 96, -149, -356, 460, -149,
	-149, -357, -357, -202, 149, 2, 2, -276, -202, -186,
	-217, -246, -246, -186, -186, -186, -99, -318, 343, 149,
	149, 457, -276, 295, 97, 372, 277, 181, -202, -217,
	-186, -202, -351, -474, -298, -379, 455, -299, 323, 324,
	460, -161, 35, 108, 210, -202, 432, 119, -318, -318,
	386, -477, 368, -324, 119, -318, 239, 250, 394, 134,
	403, 110, 253, 152, 455, -319, -319, 456, -258, -318,
	-318, 454, 463, 456, -242, 460, -241, -318, -256, -256,
	456, 456, 386, 386, 386, 386, 455, 457, -256, -246,
	454, 454, 460, 456, -335, -336, 115, -318, 457, -433,
	270, 455, 455, 456, 456, 460, 456, 432, 432, 456,
	456, 456, -318, 34, 460, 460, 460, 456, 460, 460,
	460, 456, 456, 152, 456, 456, -290, 282, 456, 11,
	12, 446, 447, 448, 449, 147, 450, 451, 444, 445,
	443, 436, 437, 438, 73, 231, 325, 14, 15, 16,
	199, 174, -319, -319, -319, 456, -322, -323, 152, 149,
	34, -285, -285, -285, 456, 152, -256, 456, 456, 455,
	456, -312, -354, -250, 2, -347, -197, -386, -312, -312,
	-256, -318, 205, 205, -278, 411, 259, -280, -347, -340,
	456, -441, -382, -342, -341, -382, -317, -316, 150, 35,
	108, 245, 170, -195, -238, -341, -341, -386, -342, 456,
	-251, -349, -421, -242, 457, -386, -140, 5, 250, -140,
	-140, -246, 24, 283, -361, 453, 454, 8, 8, 455,
	-380, -380, -246, 152, -383, -306, 400, 70, 297, 382,
	-383, -162, 308, -189, -189, -202, 247, -309, 167, -168,
	247, -361, -196, -177, 455, 455, 210, 210, -189, -196,
	167, -189, 167, -196, -196, -448, 297, 254, -318, 225,
	295, 248, -163, 308, -99, -99, -99, 455, -452, 411,
	109, -202, -217, -202, -206, 308, -212, -381, -381, -272,
	308, -204, -391, 426, -186, -164, -99, -99, -99, 455,
	-187, -165, 308, -146, 176, 456, 448, -177, 420, -177,
	-222, -225, -223, -189, -462, 428, 426, 122, 122, -238,
	-216, -202, 453, -149, -391, -202, -391, -391, -391, 2,
	455, 2, -202, 122, 259, 247, -170, 116, -473, 438,
	-186, -242, -318, -271, -304, 316, 259, -239, 416, -195,
	-271, -252, 460, 152, 438, 457, -239, 2, -166, -166,
	-166, -166, -166, -81, -149, 460, 455, 438, 438, 455,
	-391, -391, 456, 460, -202, -188, 181, 181, -194, -178,
	456, 460, 457, 455, -149, -96, 152, -46, 426, 372,
	343, 343, -177, -198, -186, -202, -199, -217, -299, -318,
	-344, -202, 459, -318, -318, 119, 119, -318, -319, -319,
	-318, 119, 152, 455, -318, -328, 30, 30, 456, 460,
	-314, -318, 456, 419, -242, -242, 456, 5, 238, 166,
	237, -288, 237, -288, -288, 8, 448, -386, 456, -326,
	117, -318, 380, -386, 448, -434, -192, 455, -177, 424,
	-241, -380, -364, -364, 456, -376, -361, -318, -318, -318,
	-318, -318, -318, -322, -318, -376, -361, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, 110, 247, 253, -319,
	-323, -322, -318, -318, -361, 456, 456, 456, -256, -81,
	-268, 159, -357, 460, -268, -268, 456, -347, -347, 455,
	-318, 205, 454, 456, 460, -341, 454, 460, 462, 438,
	-238, 457, -340, 456, 460, -303, 34, 456, -386, 262,
	5, 8, 453, 454, 456, -380, 456, 456, -246, -318,
	386, 386, 122, 247, 413, -406, -401, -318, -244, -345,
	-318, 455, 455, -160, 114, 346, -454, 2, 122, -166,
	122, -166, 430, 455, 455, 386, 426, -256, -318, -150,
	103, -385, -450, -450, 459, 386, 386, 279, 426, -256,
	386, -149, 152, 2, 2, 2, 456, 456, 460, -407,
	34, 257, -177, -202, -204, 34, -64, 426, -356, -382,
	-173, 2, -293, 411, -187, -202, 122, -171, 216, -473,
	-389, -422, -296, -294, -271, -263, 248, 77, 456, -312,
	-265, -250, -318, 2, 456, -147, -148, -391, -391, -391,
	-149, -151, -151, -310, 2, 455, -188, -178, 455, -151,
	-190, 2, -392, -99, 263, -202, -276, -230, -229, 277,
	253, -230, 260, 456, -161, -187, -318, -318, 119, 30,
	30, -318, -318, -328, 456, -318, -318, -256, 454, 5,
	-318, 456, 456, 456, -318, 457, -435, -177, -318, 456,
	456, 456, 456, 460, 460, 456, 456, 456, 456, -323,
	152, 110, 253, 455, 456, 456, -325, 162, 49, -347,
	-325, -325, -278, -246, -347, -315, -382, -316, -187, 453,
	-386, -349, 455, 457, 454, 2, 453, 456, -189, -189,
	-309, 122, -408, 78, -410, 64, 135, 84, 247, 250,
	402, 289, 61, 103, 301, 34, 456, 456, 460, -161,
	-244, -246, 247, 365, 103, 247, 103, 96, 397, -189,
	-196, -246, -246, -202, 128, 456, 460, 438, 448, -206,
	-204, -391, 128, 456, -187, -392, -226, 184, -189, -405,
	-402, -403, 289, -409, -411, 135, 289, -99, 2, 455,
	-224, -273, -99, 263, 454, 455, -177, 259, 455, -187,
	-172, 215, -473, -389, -169, -271, -302, 455, 259, -99,
	-242, 438, 456, 456, 96, 96, -244, 455, 455, -246,
	96, 456, -47, -48, 181, 78, 281, -199, 372, 181,
	-161, -318, -318, -318, 456, -242, -386, 448, -429, 277,
	456, -318, -318, -319, 152, 455, -328, -430, 425, -318,
	-256, -430, -430, 456, -342, -382, 2, 453, 2, -309,
	-196, -200, -193, -177, 135, 167, 250, 210, 455, -319,
	-202, 455, 2, -464, 105, 185, -308, -465, 83, 366,
	-345, 456, 456, 250, 250, -318, -361, -166, -166, 456,
	456, -318, 386, -385, 82, -383, -450, -318, 386, -227,
	-228, 174, -407, 210, -193, 210, -463, 426, -222, -462,
	-65, -66, 387, -356, -244, -202, -244, 259, -473, -389,
	-170, 111, -246, 78, -296, -324, -149, 455, 455, 456,
	-244, -244, 456, 455, -149, 460, 26, 455, 26, 455,
	-202, -217, 456, -242, 49, 456, 456, -319, -328, 456,
	-431, -432, -192, -341, 454, 2, -410, -193, 247, -318,
	-179, 455, -318, 185, 106, 172, -226, 455, 301, -185,
	64, 455, 455, 455, 438, 152, 455, -462, 275, 455,
	96, 244, 456, 34, -66, 9, 456, -293, 456, -202,
	-389, -171, 406, 248, 456, -196, -271, -392, -392, -308,
	456, 456, -392, -48, -246, -246, -436, 295, 324, 161,
	-256, 456, 460, 34, 122, 456, -412, 232, -177, 456,
	106, 172, -227, -246, -202, -451, 411, -200, -232, -231,
	-229, -234, -233, -229, -256, -383, 82, 275, -256, -202,
	-245, -346, -189, 96, -226, -99, -308, 455, -308, 455,
	-172, 346, -311, 456, 456, -226, -308, 456, 456, 456,
	456, -437, -438, 41, 399, 87, -318, -437, -437, -432,
	-434, 135, -413, -416, -415, 259, 351, 153, 276, 456,
	365, 422, -464, 456, -238, -318, 456, 460, 416, 456,
	460, 416, 456, 152, 456, 455, 456, 460, -227, -463,
	-226, -244, -226, -244, -264, -149, -149, -227, -226, -149,
	-439, 121, -438, 286, 148, 323, 286, 148, -439, -439,
	-193, -415, 259, -416, 259, 406, 107, -412, -231, 174,
	-233, 152, 275, -246, -346, -462, -227, 456, -227, 456,
	-312, -227, 87, 159, 381, 244, 30, -414, 244, 314,
	54, 346, -414, -413, 455, 455, 456, -469, 424, -308,
	-469, -308, 323, 267, -438, 22, 250, 103, -464, -256,
	-256, -167, 54, 314, 2, -226, -226, 456, 456, -227,
	-227, -227, 386, -469, -469, 455, -256, 456, -227,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 363, 364, 366,
	367, 368, 370, 371, 373, 375, 377, 379, 380, 382,
	384, 386, 387, 388, 389, 390, 392, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 454,
	0, 917, 919, 921, 923, 25, 26, 0, 0, 188,
	190, 192, 0, 217, 219, 221, 222, 224, -2, 0,
	317, 318, 320, 322, -2, -2, 0, 0, 441, 443,
	0, 0, 0, 463, 464, 0, 1007, -2, 457, 459,
	461, 524, 526, 528, 530, 532, 534, 536, 537, 539,
	541, 543, 545, 547, 549, 551, 553, 555, 557, 559,
	561, 563, 565, 567, 569, 571, 573, -2, -2, -2,
	0, -2, -2, -2, 935, 29, 31, 33, 35, 37,
	39, 41, 61, 273, 274, 276, 278, 280, 283, 284,
	286, 1046, 324, 326, 328, 330, 332, 0, -2, 1058,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1022, 1024, 1026,
	1028, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 365, 369, 372, 374, 376, 378, 381, 383,
	385, 391, 393, 395, 812, 1655, 1669, 1670, 1671, 1674,
	1675, 1676, 1677, 1678, 1679, 2013, 2093, 2094, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 0, 419, 417, 1649,
	420, 1848, 422, 424, 311, 312, 313, 314, 315, 316,
	0, 434, 428, 433, 435, 437, 438, 439, 440, 414,
	412, 0, 434, 1701, 432, 915, 916, 910, 911, 1881,
	945, 453, -2, -2, -2, 1982, -2, 485, -2, 492,
	1985, 1883, 495, 0, 497, -2, 500, 918, 920, 922,
	27, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, -2, -2, -2, -2, 0, 0, 1737, 1625,
	1671, 1628, 1623, 189, 191, 193, 194, 0, 0, 0,
	0, 0, 0, 218, 220, 223, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 720, 0, 0, 725, 863,
	864, 885, 0, 0, 0, 0, 319, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 0,
	0, 0, 0, 0, 251, 357, 358, 0, 1047, 0,
	0, 0, 0, 169, 160, 0, 0, 708, 442, 444,
	0, 155, 0, 0, 914, 0, 171, 0, 0, 458,
	460, 462, 525, 527, 529, 531, 533, 535, 538, 540,
	542, 544, 546, 548, 550, 552, 554, 556, 558, 560,
	562, 564, 566, 568, 570, 572, 574, 575, 0, 0,
	0, 0, -2, -2, 0, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 578,
	580, 581, 582, 0, 629, 646, 0, 854, 1048, 947,
	925, 938, 947, 927, 928, 929, 930, 931, 936, 937,
	940, 0, 932, 933, 934, 30, 32, 34, 36, 38,
	40, 42, 275, 277, 279, 281, 285, 287, -2, 1020,
	1021, 325, 327, 329, 331, 333, 445, 0, 447, 0,
	579, 1011, 0, -2, 0, 1052, 1052, 1052, 0, 0,
	1021, 1019, 0, 450, 451, 504, 505, 1283, 0, 0,
	0, 0, 0, 1523, 1367, 0, 506, -2, 1398, 1400,
	1961, 1982, 1522, 1402, 1403, 1404, 1405, 1406, 0, 0,
	1409, 0, 1411, 1412, 1413, 1414, 0, 1416, 0, 1420,
	1421, 1422, 0, 1966, 1602, 1667, -2, 1188, 1189, 1190,
	1191, 1192, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1663, 0, 1489, 1436, -2, 1688, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1746, -2,
	-2, -2, -2, -2, -2, -2, 1244, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1996, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 0, 1950, 1967, 1968,
	1973, 1975, 1969, 1958, 1459, -2, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 1245, -2, 1962, 1963, 1978, 1979, 1984, 1989, 1990,
	1965, 1974, -2, -2, 1038, 1856, 1041, 812, 1039, 1023,
	1025, 0, 1027, 0, 0, 0, 1032, 1055, 1053, 0,
	1089, 1036, 1037, 1047, 1107, 1130, 0, 1112, 0, 1130,
	1156, 0, 1117, 1876, 1437, 1438, 0, 1671, 1668, -2,
	0, 0, 0, 0, 0, 0, 214, 415, 0, 421,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	455, 456, 0, 480, 0, 484, 1957, -2, -2, 488,
	948, 952, 953, 954, 955, 0, 0, 0, 0, 0,
	494, 0, 0, 481, 482, 498, 501, 0, 51, 0,
	1967, 1156, 53, 0, 1639, 1693, 1694, 1695, 1696, 1697,
	1996, 2012, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 55, 0, 1967, 58, 0, 1967, 0, -2, 62,
	0, 1967, 172, 173, 1684, 1685, 1689, 1690, 1691, 1692,
	65, 0, 1645, 67, 0, 1642, 76, 0, 1967, 0,
	1622, -2, 0, 0, 700, 1619, 1624, 701, 1629, 0,
	195, 196, 197, 198, 199, 1967, 201, 202, 0, 204,
	205, 1967, 207, 208, 0, 210, 226, 227, 0, 229,
	0, 1967, 0, 0, 0, 235, -2, 252, 0, 249,
	0, 239, 240, 242, 243, 244, 245, 246, 0, 0,
	0, 869, 291, 289, 1650, 0, -2, 1967, 857, 860,
	1967, 862, 874, 1653, 0, -2, 0, 1045, 1967, 962,
	721, 722, 723, 724, 0, 310, 0, 975, 0, 977,
	0, 997, 1162, 1107, 253, 254, 255, 256, 257, 1967,
	0, 0, 0, 262, 0, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 148, 1967, 336, 355, 148, 1967,
	339, 148, 1967, 342, 148, 1967, 345, 1617, 148, 1967,
	348, 349, 1967, 351, 174, 352, 1967, 354, 0, -2,
	408, 1657, -2, 360, 0, -2, 0, 186, 0, 0,
	706, 707, 0, 912, 913, 0, 0, 465, 0, 0,
	576, 577, 0, 0, 587, 588, 589, 590, 1884, 1854,
	1762, 594, 0, 597, -2, 0, 0, 0, 601, 0,
	605, 606, 607, 0, 705, 609, 0, 0, 611, 0,
	615, 0, 618, 0, 620, 0, 622, -2, -2, -2,
	633, -2, 0, 637, 0, 639, 0, 0, 0, 0,
	654, 655, 0, 660, 0, 663, 664, 665, 0, 667,
	668, 669, 670, 0, 672, 673, -2, -2, 677, 679,
	0, 686, 0, 691, 0, 583, 584, 148, 1160, 924,
	-2, 926, 0, 942, 1014, -2, 0, 446, 0, 449,
	1018, 1012, 1017, 1067, 1068, 0, 0, 0, 0, 1050,
	1051, 0, 0, 0, 1009, 1010, 0, 0, 0, 0,
	1528, 1529, 1530, 1531, 1532, 1533, 1536, 1537, 1534, 1535,
	1538, 1539, 0, 0, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	1542, 1543, 0, 0, 1545, 0, 1547, 0, 0, 0,
	0, 0, 0, 1346, 1348, 1610, 0, 0, 1544, 1288,
	1289, 1290, 1325, 1326, 0, 0, 1399, 1607, 1606, 1401,
	0, 1559, 0, 1408, 0, 1280, 1415, 1636, -2, 0,
	1523, 1554, 0, 0, 1423, 1424, 1425, 0, 0, 1559,
	0, 0, 1601, 0, 1491, 0, 1224, 0, 1225, 1226,
	0, 1227, 1228, 1241, 1254, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1246, 0, 0, 0,
	1582, -2, 0, 0, 0, 0, 0, 1040, 0, 0,
	1093, 1611, 1615, 1616, 1093, 1093, 0, 0, 1560, 1153,
	1153, 0, 0, 1149, 1149, 1149, 1147, 1124, 0, 396,
	398, 400, 402, 403, 404, 406, 1130, 0, 1140, 0,
	1130, 1130, 0, -2, 1112, 0, 0, 1140, 1157, 1158,
	0, 0, 0, 0, 0, 0, 1672, 0, 0, 0,
	1659, 0, 0, 0, 426, 436, 1047, 0, 1562, 1179,
	1173, 1182, 1183, 1184, 1185, 1231, 1232, 1233, 1234, 1235,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, -2, 1242, 1244,
	1265, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1237, 0, 1212, 1212, 1212, 1229, 1230, 1253,
	1264, 1256, 1264, 1260, 1180, 1181, 1247, 1248, 1249, 1250,
	0, 430, 0, 0, 0, 0, -2, 490, 0, 950,
	0, 956, 515, 516, 517, 958, 959, 0, 493, 518,
	519, 520, 521, 522, 523, 0, 829, 0, 831, 1631,
	0, 491, 508, 496, 0, 502, 77, 907, 114, 0,
	907, 907, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 101, 110, 89, 90, 0, 0, 0, 0, 59,
	837, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 0, 100, 0, 95, 79, 0,
	0, 0, 102, 112, 0, 139, 141, 0, 0, 1143,
	156, 0, 699, 0, 0, 1672, 1627, 0, 0, 0,
	0, 228, 230, 0, 232, 233, 234, 0, 868, 0,
	241, 238, 282, 786, 1967, 836, 1967, 834, 1654, 0,
	0, 0, 308, 303, 0, 305, 855, 0, 1044, 0,
	0, 0, 0, 875, 0, 1967, 880, 1641, 1680, 1681,
	964, 0, 1168, 0, 978, 0, 0, 1163, 0, 1165,
	0, 259, 260, 261, 0, 334, 0, 146, 147, 0,
	337, 0, 340, 0, 343, 0, 0, 346, 0, 0,
	0, 0, 1047, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 186, 158, 186, 186, 1143, 467, 1143,
	469, 0, 0, 591, 592, 593, 595, 596, 598, 599,
	-2, -2, 687, 657, 0, 0, 0, 656, 608, 0,
	693, 1872, 703, 610, 1737, 613, 1737, 616, 1737, 619,
	621, 624, 649, 632, 636, 0, 0, 0, 641, 0,
	643, 0, 645, 657, 658, 661, 666, 671, 0, 0,
	0, 0, 0, 853, 0, 941, 1015, 1017, 448, 1013,
	1065, 1066, 1071, 1075, 1076, 1079, 1082, 1083, 1073, 1283,
	1033, 1034, 1035, 1059, 1060, 894, 0, 2093, 1284, 1174,
	1285, 1286, 1638, 0, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, -2, -2, -2, -2, -2, -2,
	-2, -2, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, -2, -2, -2, 1323, 1324, -2, 1546,
	1548, 0, 1610, 0, -2, 0, -2, -2, -2, -2,
	1343, 0, 1345, 1350, 1352, 1354, 0, 0, 0, 0,
	1609, 1364, 1593, 1594, 0, 0, 1525, 1526, 1527, 1349,
	0, 1368, 1608, 1605, 0, 0, 1558, 1058, 1427, 0,
	0, 0, 0, 1434, 0, 1637, 1279, 1266, 1267, 1268,
	1269, 1270, 1271, 1281, 1419, 1556, 0, 1555, 0, 0,
	0, 1566, 0, 1600, 1596, 0, 1660, 1666, 1499, 0,
	0, 0, 0, 1634, 0, 0, 0, 0, 0, 0,
	0, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 1569, -2, -2, -2, -2, -2, -2, -2,
	0, 1473, 0, 1475, 1560, 1579, 0, 0, 1369, 0,
	0, 0, 1523, 0, 1478, 1560, 1587, 0, 0, 0,
	0, 0, 1560, 0, 1592, 0, 1485, 0, 1487, 1042,
	0, 0, 1168, 0, 0, 0, 1614, 1168, 1168, 0,
	1088, 0, 0, 1150, 1151, 1152, 0, 0, 1153, 0,
	1144, 1148, 1145, 1146, 0, 0, 1130, 397, 399, 401,
	405, 407, 1140, 1104, 0, 0, 1640, 1110, 1139, 0,
	812, 1129, 1140, 1140, 0, -2, 1114, 0, 0, 1058,
	-2, 187, 811, 0, 0, 0, 0, 416, 418, 0,
	0, 410, 0, 413, 0, 1169, 1172, 0, 1186, 0,
	0, -2, 0, 0, 0, 0, 0, 483, 0, 949,
	957, 0, 512, 0, 514, 0, 830, 1633, 1632, 0,
	503, 0, 0, 0, 0, 906, 118, 1967, 0, 150,
	0, 0, 780, 1646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	91, 0, 0, 0, 0, 0, 0, 0, 838, 839,
	841, 847, 849, 0, 843, 1635, 0, 844, 0, 846,
	848, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 92, 0, 0, 0, 0, 1621, 177,
	1142, 0, 1620, 1630, 0, 200, 203, 206, 209, 0,
	236, 0, 0, 728, 711, 0, 832, 835, 0, 812,
	867, 1652, 0, 290, 186, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 1967, 966,
	972, 0, 1058, 1167, 0, 995, 980, 0, 0, 0,
	995, 999, 1000, 1002, 1003, 0, 0, 1164, 0, 263,
	356, 148, 148, 148, 1618, 148, 148, 175, 350, 353,
	359, 409, 1047, 186, 184, 1833, 182, 179, 181, 0,
	0, 0, 729, 731, 732, 733, 734, 0, 1681, 0,
	1791, 1681, 0, 983, 985, 0, 153, 186, 0, 0,
	302, 466, 471, 585, 0, 626, 651, 600, 602, 603,
	604, 704, 702, 612, 614, 617, 635, 638, 640, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 688, 689,
	690, 692, 1161, 1016, 0, 1077, 0, 1074, 1080, 1081,
	0, 1062, 892, 893, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1365, 0, -2, 1344, 1347, 1351, 1353,
	1355, 0, 0, 0, 0, 0, 0, 1549, 0, 1551,
	1366, 1603, 1606, 1521, 0, 0, 1057, 1058, 1058, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1557, 0,
	1564, 1565, 0, 1426, 0, 1597, 0, 0, 0, 1435,
	0, 0, 0, 1236, 1210, 0, 1264, 1262, 1263, 1257,
	1264, 1261, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 1458, 1470, 0, 1472, 1474, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1372, 1373, 1374, 1477, 1585, 1586, 0, 0,
	0, 0, 0, 0, 1483, 0, 1591, 1484, 1486, 1047,
	1090, 1085, 1612, 1143, 1092, 1094, 1613, 1643, 1085, 1085,
	0, 1561, 0, 0, 1134, 0, 0, 0, 1136, 0,
	1125, 0, 1127, 1140, 1109, 0, 0, 1102, 0, 1098,
	1099, 1100, 1101, 812, 1138, 1111, 1115, 1660, 0, 1159,
	0, 1119, 1122, 0, 0, 1673, 211, 215, 216, 212,
	213, 425, 0, 0, 1563, 0, 1175, 0, 0, 0,
	0, 0, 429, 0, 479, -2, 510, 511, 513, 0,
	509, 115, 907, 0, 0, 898, 0, 120, 1967, 129,
	0, 757, 0, 1644, 0, 0, 0, 0, 909, 0,
	1967, 148, 1967, 148, 131, 134, 0, 138, 136, 0,
	0, 748, 78, 907, 81, 85, 93, 0, 0, 0,
	99, 0, 0, 0, 900, 0, 842, 845, 851, 60,
	0, 902, 896, 0, 895, 140, 83, 87, 94, 0,
	904, 80, 0, 186, 0, 157, 1626, 0, 0, 0,
	0, 0, 727, 797, 0, 0, 0, 0, 0, 0,
	296, 292, 0, 301, 307, 306, 858, -2, 861, 870,
	0, 872, 884, 0, 0, 0, 968, 972, 0, 971,
	1045, 1070, 1166, 973, 995, 0, 0, 0, 982, 979,
	976, 1168, 0, 0, 0, 0, 0, 258, 335, 338,
	341, 344, 347, 361, 161, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 1681, 1681, 0, 1648,
	0, 0, 0, 0, 154, 159, 0, 468, 0, 0,
	642, 644, 657, 680, 681, 743, 0, 743, 0, 0,
	1061, 894, 0, 1287, 1328, 0, 0, -2, 0, 0,
	1332, 0, 0, 0, -2, 0, 0, 0, 1550, 1552,
	0, 1605, 1428, 0, 0, 0, 1432, 1410, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 0, 1417, 1418, 1524, 1567,
	1595, 1599, 0, 1661, 1665, 1497, 1498, 1502, 1651, 0,
	0, 0, 1255, 1259, 1439, 0, 0, 0, 0, 0,
	0, 0, 1568, 1578, 1580, 1370, 1371, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, -2, -2, -2,
	1388, 1389, 1390, -2, -2, -2, 0, 0, 0, 1581,
	1583, 1584, 1588, 1589, 0, 1480, 1481, 1482, 1590, 0,
	1087, 0, 1091, 0, 1087, 1087, 1054, 1132, 0, 0,
	1155, 0, 1107, 1126, 0, 1116, 1105, 0, 1106, 0,
	1137, 0, 1113, 1118, 0, 1121, 0, 1428, -2, 427,
	411, 0, 0, 1177, 1187, 0, 1239, 1243, 431, 1141,
	0, 0, 0, 0, 149, 755, 779, 0, 0, 887,
	894, 0, 0, 122, 0, 0, 0, 130, 0, 127,
	0, 133, 137, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 231, 866, 237, 737, 785, 0, 787,
	0, 712, 0, 786, 836, 0, 288, 0, 295, 0,
	856, 871, 0, 0, 0, 0, 0, 970, 972, 0,
	963, 964, 995, 1069, 974, 993, -2, 992, 0, 1058,
	1001, 998, 1004, 1005, 0, 183, 0, 178, 180, 0,
	164, 0, 0, 730, 735, 0, 0, 0, 0, 0,
	984, 986, 0, 170, 0, 586, 652, 682, 742, 0,
	0, 684, 1072, 1078, 1063, 894, 1330, 1334, 0, 0,
	0, 1336, -2, 0, 1358, -2, -2, 1553, 1604, 1407,
	1058, 1429, 1431, 1282, 1598, 0, 1504, 1501, 0, 1488,
	1211, 1449, 1450, 0, 0, 1453, 1455, 1456, 1457, 1577,
	0, 0, 0, 0, 1479, 1043, 1493, 0, 0, 1095,
	1493, 1493, 1133, 0, 1135, 1130, 1128, 1103, 1096, 0,
	1661, 1120, 0, 0, 1170, 1176, 0, 1238, 116, 117,
	119, 0, 756, 0, 759, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 0, 801, 810, 0, 889,
	0, 0, 0, 124, 143, 0, 0, 908, 0, 148,
	148, 0, 0, 899, 0, 0, 0, 0, 0, 901,
	903, 897, 0, 0, 905, 176, 745, 0, 797, 789,
	790, 791, 0, 796, 798, 0, 0, 716, 713, 728,
	711, 833, 865, 0, 293, 0, 883, 0, 0, 0,
	960, 972, 0, 965, 966, 309, 0, 0, 0, 981,
	1070, 0, 185, 186, 0, 0, 0, 0, 0, 0,
	0, 186, 470, 472, 0, 0, 478, 741, 0, 0,
	1064, 1338, -2, -2, 1359, 0, 1662, 1664, 1058, 0,
	1490, 0, 0, -2, 0, 0, 0, 1029, 0, 1086,
	1084, 1030, 1031, 1154, 1140, 0, 1123, 0, 1178, 121,
	0, 760, 761, 1647, 763, 0, 765, 768, 0, 770,
	1683, 0, 774, 781, 802, 0, 737, 0, 807, 808,
	888, 783, 0, 123, 125, 142, 891, 126, 132, 0,
	0, 82, 0, 0, 1731, 107, 105, 84, 0, 711,
	744, 0, 788, 0, 799, 800, 714, 0, 0, 0,
	294, 297, 0, 300, 0, 884, 0, 0, 0, 967,
	968, 0, 0, 0, 995, 1006, 163, 0, 0, 810,
	0, 0, 778, 0, 168, 0, 474, 0, 476, 0,
	683, 685, 1430, 1508, 0, 1451, 1452, -2, 0, 1396,
	1492, 1494, 0, 1108, 1097, 1171, 758, 762, 0, 0,
	816, 0, 0, 0, 805, 806, 745, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	717, 0, 737, 0, 298, 299, 810, 0, 810, 0,
	969, 970, 0, 988, 989, 991, 996, 0, 0, 737,
	810, 777, 0, 473, 0, 0, 0, 0, 0, 0,
	1503, 1397, 0, 0, 0, 769, 821, 0, 0, 0,
	803, 804, 801, 0, 812, 128, 0, 890, 0, 749,
	0, 0, 752, 0, 0, 108, 1731, 106, 0, 0,
	0, 793, 795, 718, 745, 716, 737, 0, 737, 0,
	961, 0, 990, 186, 186, 745, 737, 186, 475, 477,
	1500, 1520, 1509, -2, 1930, 1734, 0, 1520, 1520, 1495,
	1496, 0, 771, 817, 818, 0, 813, 814, 815, 1682,
	772, 773, 782, 809, 816, 144, 746, 0, 0, 747,
	0, 0, 111, 0, 113, 0, 792, 0, 711, 715,
	745, 0, 745, 0, 1168, 165, 166, 775, 745, 167,
	1505, 0, 0, 1511, 1512, 1513, 1514, 1515, 1506, 1507,
	764, 819, 0, 820, 0, 0, 0, 821, 750, 0,
	753, 0, 109, 0, 794, 710, 881, 810, 881, 810,
	987, 776, 0, 1517, 1518, 0, 0, 822, 0, 825,
	826, 0, 823, 801, 0, 0, 740, 876, 0, 737,
	878, 737, 1516, 1519, 1510, 824, 827, 828, 784, 0,
	0, 736, 738, 739, 882, 745, 745, 745, 0, 881,
	881, 751, 0, 877, 879, 0, 0, 745, 754,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 444, 3, 450, 445, 3,
	455, 456, 448, 446, 460, 447, 457, 449, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 463, 3,
	436, 438, 437, 440, 459, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 453, 3, 454, 451, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 461, 443, 462, 441,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 439, 57779, 442,
	57780, 452, 57781, 458, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1070
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1090
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1212
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1239
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1258
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1290
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1294
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1314
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1323
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1334
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1338
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1344
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1366
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1376
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1387
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1394
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1406
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1413
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1421
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1441
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1449
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1460
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1470
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1480
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1489
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1502
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1520
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1525
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1536
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1562
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1572
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1582
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1597
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1607
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1645
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1664
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1685
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1720
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1737
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1784
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1807
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1814
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1838
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1875
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1884
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1890
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1895
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1900
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1905
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1910
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1914
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1933
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1937
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1941
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1949
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1959
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1969
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1973
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = nil
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2011
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2024
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2025
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2026
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2027
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2045
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2134
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2155
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2160
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2172
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2175
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2176
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2177
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "create cast")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplemented(sqllex, "create operator")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplemented(sqllex, "create publication")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplemented(sqllex, "create rule")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2196
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplemented(sqllex, "create server")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2204
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2207
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2208
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2211
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2212
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "drop server")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2239
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2240
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2241
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2244
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2246
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2256
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2272
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2278
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2291
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2304
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2325
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2353
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2363
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2373
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2388
		{

			sqlVAL.union.val = nil
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "DELETE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2422
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2423
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2424
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2435
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2437
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2438
		{
			return helpWith(sqllex, "DROP")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2442
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2460
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2468
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2483
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2536
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2570
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2575
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2601
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2603
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2625
		{
			return helpWith(sqllex, "DELETE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2628
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2629
		{
			return helpWith(sqllex, "INSERT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2634
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2643
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2644
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			return helpWith(sqllex, "DELETE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "INSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2653
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2658
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2676
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2684
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2710
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2717
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2729
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2758
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2789
		{
			return helpWith(sqllex, "GRANT")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2820
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2829
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2858
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2873
		{
			return helpWith(sqllex, "RESET")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2884
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2898
		{
			return helpWith(sqllex, "USE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2902
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2903
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2904
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2905
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2909
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2911
		{
			return helpWith(sqllex, "USE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2945
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2971
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2975
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2985
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2995
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3011
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3035
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3089
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3108
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3115
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3121
		{
			return unimplemented(sqllex, "set from current")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3130
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3142
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3146
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3152
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3184
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3216
		{
			sqlVAL.union.val = tree.Low
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = tree.Normal
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = tree.High
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3235
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3243
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3266
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3267
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3269
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3270
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3272
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3274
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3277
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3280
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3299
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.str = "client_encoding"
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.str = "timezone"
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3333
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3348
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3379
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3387
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3411
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3413
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3435
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3470
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3486
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3489
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3511
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3522
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3524
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3527
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3538
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3540
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3543
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = true
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = true
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = false
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3568
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3596
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3613
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3615
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = false
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3634
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3667
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3670
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = true
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3674
		{
			sqlVAL.union.val = false
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3688
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3702
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3713
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3721
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3726
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3731
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3735
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3764
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3767
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3775
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3786
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3790
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3798
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3806
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3820
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3835
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3844
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3847
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3851
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3858
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3991
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4030
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4034
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4084
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4087
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4123
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4135
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4148
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4149
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4150
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4154
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4165
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4177
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4178
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4179
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4193
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4194
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4195
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4196
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4197
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4198
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4199
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4200
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4211
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4230
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4234
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4243
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4250
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4255
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4266
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.str = ""
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4280
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4437
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4451
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4544
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4558
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4568
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4578
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4593
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4643
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4647
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4653
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4658
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4659
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4660
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4661
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4662
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4663
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4690
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4722
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4739
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4743
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4822
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4827
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4831
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4838
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4842
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4846
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4847
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4850
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4852
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4859
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4860
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4862
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4875
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4883
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4890
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = nil
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4915
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4920
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4921
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4929
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4937
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4938
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4941
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4942
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4948
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4950
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4952
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4954
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4958
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4974
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4988
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5003
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5017
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5031
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5034
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5035
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5039
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5054
		{
			sqlVAL.union.val = false
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = true
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = false
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5083
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5095
		{
			sqlVAL.str = ""
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = tree.Descending
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5130
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5136
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5144
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5150
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5158
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5164
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5181
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5182
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5185
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5186
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5197
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5219
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5227
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5230
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5234
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5235
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5255
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5260
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5273
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5287
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5288
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5289
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5297
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5304
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5307
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5308
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.str = ""
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.str = ""
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5350
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5354
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5367
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5369
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5373
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5378
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5398
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 960:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5418
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5438
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5446
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5452
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5456
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5462
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5466
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5481
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5482
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5501
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5508
		{
			return helpWith(sqllex, "INSERT")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5526
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5530
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5539
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5584
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5601
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5610
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 996:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5636
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5648
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5680
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5727
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5777
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5778
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5783
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5818
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5819
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5855
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5881
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5894
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5925
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5941
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5945
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5949
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5967
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5968
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5976
		{
			sqlVAL.union.val = nil
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5981
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5982
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = true
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = false
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = false
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{
			sqlVAL.union.val = true
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6011
		{
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6012
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6026
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6046
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6051
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6066
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6099
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6142
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6143
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6146
		{
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6168
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6200
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6202
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6214
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6217
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6219
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6225
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6239
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6244
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6249
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6260
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6267
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6272
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6291
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6330
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6344
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6379
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6390
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6442
		{
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6444
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = nil
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6449
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = true
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = false
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6517
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.str = tree.AstFull
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.str = tree.AstRight
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.str = tree.AstInner
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6561
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6562
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.str = tree.AstHash
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.str = ""
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6617
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6624
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6629
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6647
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6653
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6661
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6690
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6703
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6711
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6712
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6720
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6734
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6736
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6744
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6756
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6757
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = types.String
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = types.Name
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = types.INet
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = types.Oid
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6847
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6878
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6886
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = nil
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = types.Int2
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = types.Int2
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = types.Int4
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = types.Int
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = types.Int
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = types.Int
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6933
		{
			sqlVAL.union.val = types.Float4
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = types.Float4
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = types.Float
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = types.Float
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6953
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6961
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6969
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = types.Bool
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = types.Bool
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = types.RegType
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7010
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = types.Float
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7029
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7035
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7057
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = types.String
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = true
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = false
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = types.Date
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7106
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7111
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7118
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7119
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7121
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7129
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7145
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = true
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = false
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = false
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = types.Interval
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.Year
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.Month
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = tree.Day
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = tree.Month
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = nil
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.Second
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7232
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7279
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7523
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7589
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7611
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7623
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7631
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7635
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7805
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7810
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7819
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7833
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7837
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7846
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7885
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7896
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7897
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7923
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7959
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7967
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8035
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8045
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8047
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8055
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8060
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8080
		{
			return unimplemented(sqllex, "treat")
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8101
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8111
		{
			return unimplemented(sqllex, "within group")
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8112
		{
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8147
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.str = ""
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8236
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8249
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8317
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8346
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = tree.Any
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = tree.Some
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.All
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.Div
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = tree.LT
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.GT
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = tree.LE
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = tree.GE
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.NE
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.Like
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8546
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8596
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8614
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8628
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8706
		{
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8707
		{
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8779
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8787
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8810
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8827
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8849
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8853
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8862
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8873
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8882
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8890
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9024
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9055
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9068
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9075
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9100
		{
			sqlVAL.str = ""
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9110
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
