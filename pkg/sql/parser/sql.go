// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:558
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PGDUMP = lex.PGDUMP
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PGDUMP",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8339

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	430, 57,
	-2, 903,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	169, 738,
	-2, 0,
	-1, 60,
	103, 903,
	175, 903,
	378, 903,
	379, 903,
	-2, 0,
	-1, 74,
	115, 877,
	128, 877,
	183, 877,
	209, 877,
	240, 877,
	248, 877,
	375, 877,
	-2, 866,
	-1, 110,
	199, 554,
	365, 554,
	-2, 0,
	-1, 115,
	4, 905,
	20, 905,
	21, 905,
	22, 905,
	23, 905,
	25, 905,
	30, 905,
	35, 905,
	36, 905,
	37, 905,
	38, 905,
	39, 905,
	40, 905,
	41, 905,
	42, 905,
	43, 905,
	44, 905,
	46, 905,
	47, 905,
	48, 905,
	49, 905,
	50, 905,
	51, 905,
	52, 905,
	55, 905,
	56, 905,
	57, 905,
	58, 905,
	60, 905,
	61, 905,
	65, 905,
	66, 905,
	67, 905,
	68, 905,
	69, 905,
	71, 905,
	72, 905,
	73, 905,
	74, 905,
	76, 905,
	78, 905,
	79, 905,
	82, 905,
	83, 905,
	84, 905,
	92, 905,
	93, 905,
	94, 905,
	95, 905,
	96, 905,
	97, 905,
	98, 905,
	99, 905,
	101, 905,
	103, 905,
	105, 905,
	108, 905,
	109, 905,
	111, 905,
	112, 905,
	116, 905,
	117, 905,
	118, 905,
	119, 905,
	120, 905,
	121, 905,
	122, 905,
	123, 905,
	124, 905,
	125, 905,
	133, 905,
	134, 905,
	135, 905,
	136, 905,
	137, 905,
	138, 905,
	140, 905,
	142, 905,
	146, 905,
	148, 905,
	149, 905,
	151, 905,
	153, 905,
	154, 905,
	155, 905,
	156, 905,
	157, 905,
	158, 905,
	159, 905,
	160, 905,
	161, 905,
	164, 905,
	165, 905,
	170, 905,
	171, 905,
	172, 905,
	175, 905,
	176, 905,
	177, 905,
	178, 905,
	179, 905,
	180, 905,
	181, 905,
	182, 905,
	184, 905,
	186, 905,
	189, 905,
	190, 905,
	191, 905,
	193, 905,
	194, 905,
	197, 905,
	198, 905,
	199, 905,
	201, 905,
	202, 905,
	204, 905,
	206, 905,
	207, 905,
	210, 905,
	211, 905,
	214, 905,
	216, 905,
	219, 905,
	220, 905,
	221, 905,
	222, 905,
	223, 905,
	224, 905,
	225, 905,
	227, 905,
	228, 905,
	229, 905,
	230, 905,
	235, 905,
	236, 905,
	237, 905,
	238, 905,
	239, 905,
	241, 905,
	242, 905,
	244, 905,
	245, 905,
	246, 905,
	249, 905,
	250, 905,
	252, 905,
	254, 905,
	255, 905,
	256, 905,
	257, 905,
	258, 905,
	259, 905,
	260, 905,
	261, 905,
	262, 905,
	263, 905,
	265, 905,
	266, 905,
	267, 905,
	268, 905,
	269, 905,
	271, 905,
	272, 905,
	273, 905,
	274, 905,
	275, 905,
	276, 905,
	277, 905,
	278, 905,
	279, 905,
	281, 905,
	282, 905,
	283, 905,
	284, 905,
	285, 905,
	287, 905,
	288, 905,
	289, 905,
	290, 905,
	291, 905,
	292, 905,
	293, 905,
	295, 905,
	297, 905,
	298, 905,
	299, 905,
	300, 905,
	301, 905,
	302, 905,
	304, 905,
	305, 905,
	306, 905,
	307, 905,
	308, 905,
	309, 905,
	310, 905,
	312, 905,
	313, 905,
	314, 905,
	315, 905,
	316, 905,
	317, 905,
	318, 905,
	319, 905,
	320, 905,
	322, 905,
	323, 905,
	324, 905,
	325, 905,
	327, 905,
	328, 905,
	329, 905,
	330, 905,
	332, 905,
	333, 905,
	334, 905,
	335, 905,
	336, 905,
	337, 905,
	338, 905,
	339, 905,
	340, 905,
	341, 905,
	342, 905,
	343, 905,
	345, 905,
	346, 905,
	348, 905,
	349, 905,
	350, 905,
	351, 905,
	352, 905,
	353, 905,
	354, 905,
	355, 905,
	356, 905,
	357, 905,
	359, 905,
	360, 905,
	361, 905,
	362, 905,
	365, 905,
	366, 905,
	367, 905,
	368, 905,
	370, 905,
	371, 905,
	373, 905,
	374, 905,
	377, 905,
	378, 905,
	379, 905,
	380, 905,
	382, 905,
	384, 905,
	385, 905,
	386, 905,
	387, 905,
	388, 905,
	389, 905,
	392, 905,
	393, 905,
	398, 905,
	399, 905,
	400, 905,
	401, 905,
	402, 905,
	403, 905,
	-2, 0,
	-1, 136,
	115, 876,
	128, 876,
	183, 876,
	209, 876,
	240, 876,
	248, 876,
	375, 876,
	-2, 869,
	-1, 141,
	1, 799,
	189, 799,
	271, 799,
	276, 799,
	429, 799,
	430, 799,
	-2, 0,
	-1, 143,
	1, 799,
	429, 799,
	430, 799,
	-2, 0,
	-1, 144,
	1, 799,
	429, 799,
	430, 799,
	-2, 0,
	-1, 145,
	1, 803,
	429, 803,
	430, 803,
	-2, 0,
	-1, 171,
	4, 912,
	5, 912,
	6, 912,
	7, 912,
	8, 912,
	9, 912,
	20, 912,
	21, 912,
	22, 912,
	23, 912,
	25, 912,
	30, 912,
	31, 912,
	35, 912,
	36, 912,
	37, 912,
	38, 912,
	39, 912,
	40, 912,
	41, 912,
	42, 912,
	43, 912,
	44, 912,
	46, 912,
	47, 912,
	48, 912,
	49, 912,
	50, 912,
	51, 912,
	52, 912,
	53, 912,
	54, 912,
	55, 912,
	56, 912,
	57, 912,
	58, 912,
	60, 912,
	61, 912,
	63, 912,
	65, 912,
	66, 912,
	67, 912,
	68, 912,
	69, 912,
	71, 912,
	72, 912,
	73, 912,
	74, 912,
	76, 912,
	78, 912,
	79, 912,
	81, 912,
	82, 912,
	83, 912,
	84, 912,
	85, 912,
	86, 912,
	87, 912,
	88, 912,
	89, 912,
	90, 912,
	91, 912,
	92, 912,
	93, 912,
	94, 912,
	95, 912,
	96, 912,
	97, 912,
	98, 912,
	99, 912,
	100, 912,
	101, 912,
	103, 912,
	105, 912,
	108, 912,
	109, 912,
	111, 912,
	112, 912,
	116, 912,
	117, 912,
	118, 912,
	119, 912,
	120, 912,
	121, 912,
	122, 912,
	123, 912,
	124, 912,
	125, 912,
	126, 912,
	127, 912,
	133, 912,
	134, 912,
	135, 912,
	136, 912,
	137, 912,
	138, 912,
	140, 912,
	142, 912,
	145, 912,
	146, 912,
	148, 912,
	149, 912,
	151, 912,
	153, 912,
	154, 912,
	155, 912,
	156, 912,
	157, 912,
	158, 912,
	159, 912,
	160, 912,
	161, 912,
	162, 912,
	164, 912,
	165, 912,
	170, 912,
	171, 912,
	172, 912,
	174, 912,
	175, 912,
	176, 912,
	177, 912,
	178, 912,
	179, 912,
	180, 912,
	181, 912,
	182, 912,
	184, 912,
	186, 912,
	187, 912,
	188, 912,
	189, 912,
	190, 912,
	191, 912,
	192, 912,
	193, 912,
	194, 912,
	197, 912,
	198, 912,
	199, 912,
	201, 912,
	202, 912,
	204, 912,
	205, 912,
	206, 912,
	207, 912,
	208, 912,
	210, 912,
	211, 912,
	214, 912,
	216, 912,
	217, 912,
	218, 912,
	219, 912,
	220, 912,
	221, 912,
	222, 912,
	223, 912,
	224, 912,
	225, 912,
	226, 912,
	227, 912,
	228, 912,
	229, 912,
	230, 912,
	231, 912,
	233, 912,
	234, 912,
	235, 912,
	236, 912,
	237, 912,
	238, 912,
	239, 912,
	241, 912,
	242, 912,
	245, 912,
	246, 912,
	249, 912,
	250, 912,
	251, 912,
	252, 912,
	253, 912,
	254, 912,
	255, 912,
	256, 912,
	257, 912,
	258, 912,
	259, 912,
	260, 912,
	261, 912,
	262, 912,
	263, 912,
	265, 912,
	266, 912,
	267, 912,
	268, 912,
	269, 912,
	271, 912,
	272, 912,
	273, 912,
	274, 912,
	275, 912,
	276, 912,
	277, 912,
	278, 912,
	279, 912,
	281, 912,
	282, 912,
	283, 912,
	284, 912,
	285, 912,
	287, 912,
	288, 912,
	289, 912,
	290, 912,
	291, 912,
	292, 912,
	293, 912,
	295, 912,
	296, 912,
	297, 912,
	298, 912,
	299, 912,
	300, 912,
	301, 912,
	302, 912,
	304, 912,
	305, 912,
	306, 912,
	307, 912,
	308, 912,
	309, 912,
	310, 912,
	312, 912,
	313, 912,
	314, 912,
	315, 912,
	316, 912,
	317, 912,
	318, 912,
	319, 912,
	320, 912,
	321, 912,
	322, 912,
	323, 912,
	324, 912,
	325, 912,
	326, 912,
	327, 912,
	328, 912,
	329, 912,
	330, 912,
	332, 912,
	333, 912,
	334, 912,
	335, 912,
	336, 912,
	337, 912,
	338, 912,
	339, 912,
	340, 912,
	341, 912,
	342, 912,
	343, 912,
	345, 912,
	346, 912,
	348, 912,
	349, 912,
	350, 912,
	351, 912,
	352, 912,
	353, 912,
	354, 912,
	355, 912,
	356, 912,
	357, 912,
	359, 912,
	360, 912,
	361, 912,
	362, 912,
	365, 912,
	366, 912,
	367, 912,
	368, 912,
	369, 912,
	370, 912,
	371, 912,
	373, 912,
	374, 912,
	377, 912,
	378, 912,
	379, 912,
	380, 912,
	381, 912,
	382, 912,
	384, 912,
	385, 912,
	386, 912,
	387, 912,
	388, 912,
	389, 912,
	392, 912,
	393, 912,
	398, 912,
	399, 912,
	400, 912,
	401, 912,
	402, 912,
	403, 912,
	404, 912,
	412, 912,
	417, 912,
	418, 912,
	419, 912,
	426, 912,
	432, 912,
	-2, 0,
	-1, 174,
	1, 57,
	430, 57,
	-2, 903,
	-1, 207,
	428, 1484,
	431, 1484,
	-2, 597,
	-1, 208,
	428, 1486,
	431, 1486,
	-2, 598,
	-1, 209,
	428, 1485,
	431, 1485,
	-2, 599,
	-1, 210,
	431, 1426,
	-2, 600,
	-1, 626,
	144, 1601,
	363, 1601,
	409, 1601,
	428, 1601,
	-2, 0,
	-1, 627,
	144, 1524,
	363, 1524,
	409, 1524,
	428, 1524,
	-2, 0,
	-1, 629,
	144, 1679,
	363, 1679,
	409, 1679,
	428, 1679,
	-2, 0,
	-1, 631,
	144, 1708,
	363, 1708,
	409, 1708,
	428, 1708,
	-2, 0,
	-1, 638,
	144, 1608,
	363, 1608,
	409, 1608,
	428, 1608,
	-2, 426,
	-1, 673,
	1, 526,
	425, 526,
	427, 526,
	429, 526,
	430, 526,
	-2, 0,
	-1, 674,
	1, 596,
	141, 596,
	425, 596,
	427, 596,
	429, 596,
	430, 596,
	-2, 0,
	-1, 680,
	1, 540,
	425, 540,
	427, 540,
	429, 540,
	430, 540,
	-2, 0,
	-1, 682,
	1, 544,
	425, 544,
	427, 544,
	429, 544,
	430, 544,
	-2, 0,
	-1, 685,
	1, 555,
	425, 555,
	427, 555,
	429, 555,
	430, 555,
	-2, 0,
	-1, 686,
	1, 561,
	425, 561,
	427, 561,
	429, 561,
	430, 561,
	-2, 0,
	-1, 687,
	1, 564,
	425, 564,
	427, 564,
	429, 564,
	430, 564,
	-2, 0,
	-1, 691,
	1, 578,
	425, 578,
	427, 578,
	429, 578,
	430, 578,
	-2, 0,
	-1, 692,
	1, 580,
	425, 580,
	427, 580,
	429, 580,
	430, 580,
	-2, 0,
	-1, 720,
	128, 916,
	209, 916,
	240, 916,
	-2, 872,
	-1, 728,
	128, 915,
	209, 915,
	240, 915,
	-2, 870,
	-1, 755,
	426, 1783,
	-2, 1198,
	-1, 756,
	426, 1784,
	-2, 1199,
	-1, 785,
	426, 1478,
	-2, 1469,
	-1, 786,
	5, 1054,
	426, 1493,
	-2, 1484,
	-1, 787,
	426, 1494,
	-2, 1485,
	-1, 794,
	5, 1038,
	-2, 1514,
	-1, 795,
	5, 1039,
	-2, 1519,
	-1, 796,
	5, 1040,
	-2, 1518,
	-1, 797,
	5, 1041,
	-2, 1704,
	-1, 798,
	5, 1042,
	-2, 1610,
	-1, 799,
	5, 1043,
	-2, 1672,
	-1, 800,
	5, 1044,
	-2, 1674,
	-1, 801,
	5, 1045,
	-2, 1675,
	-1, 802,
	5, 1046,
	-2, 1676,
	-1, 803,
	5, 1047,
	-2, 1684,
	-1, 804,
	5, 1048,
	-2, 1716,
	-1, 805,
	5, 1049,
	-2, 1578,
	-1, 806,
	5, 1050,
	-2, 1513,
	-1, 807,
	5, 1051,
	-2, 1618,
	-1, 808,
	5, 1052,
	-2, 1619,
	-1, 809,
	5, 1053,
	-2, 1582,
	-1, 810,
	5, 1102,
	426, 1102,
	-2, 1750,
	-1, 830,
	5, 1075,
	-2, 1515,
	-1, 831,
	5, 1093,
	-2, 1544,
	-1, 833,
	5, 1067,
	-2, 1565,
	-1, 834,
	5, 1068,
	-2, 1566,
	-1, 835,
	5, 1059,
	-2, 1581,
	-1, 836,
	5, 1060,
	-2, 1583,
	-1, 837,
	5, 1061,
	-2, 1584,
	-1, 838,
	5, 1062,
	-2, 1585,
	-1, 839,
	5, 1026,
	-2, 1591,
	-1, 840,
	5, 1027,
	-2, 1592,
	-1, 841,
	5, 1090,
	-2, 1694,
	-1, 842,
	5, 1100,
	-2, 1706,
	-1, 843,
	5, 1065,
	-2, 1730,
	-1, 844,
	5, 1092,
	-2, 1731,
	-1, 845,
	5, 1074,
	-2, 1732,
	-1, 846,
	5, 1092,
	-2, 1733,
	-1, 847,
	5, 1092,
	-2, 1734,
	-1, 848,
	5, 1057,
	-2, 1737,
	-1, 849,
	5, 1057,
	-2, 1738,
	-1, 852,
	5, 1082,
	-2, 1742,
	-1, 854,
	5, 1058,
	-2, 1748,
	-1, 855,
	5, 1063,
	-2, 1749,
	-1, 857,
	5, 1057,
	-2, 1754,
	-1, 860,
	5, 1066,
	-2, 1759,
	-1, 861,
	5, 1064,
	-2, 1761,
	-1, 863,
	5, 1094,
	-2, 1763,
	-1, 864,
	5, 1096,
	-2, 1764,
	-1, 865,
	5, 1098,
	-2, 1765,
	-1, 868,
	5, 1089,
	-2, 1769,
	-1, 938,
	426, 1493,
	-2, 1484,
	-1, 953,
	287, 1466,
	419, 1466,
	-2, 1465,
	-1, 1103,
	259, 901,
	-2, 723,
	-1, 1112,
	243, 1488,
	-2, 0,
	-1, 1155,
	1, 293,
	425, 293,
	427, 293,
	429, 293,
	430, 293,
	-2, 875,
	-1, 1158,
	4, 1768,
	10, 1768,
	11, 1768,
	13, 1768,
	14, 1768,
	15, 1768,
	16, 1768,
	17, 1768,
	18, 1768,
	20, 1768,
	21, 1768,
	22, 1768,
	23, 1768,
	25, 1768,
	28, 1768,
	30, 1768,
	32, 1768,
	35, 1768,
	36, 1768,
	37, 1768,
	38, 1768,
	39, 1768,
	40, 1768,
	41, 1768,
	42, 1768,
	43, 1768,
	44, 1768,
	46, 1768,
	47, 1768,
	48, 1768,
	49, 1768,
	50, 1768,
	51, 1768,
	52, 1768,
	55, 1768,
	56, 1768,
	57, 1768,
	58, 1768,
	60, 1768,
	61, 1768,
	62, 1768,
	65, 1768,
	66, 1768,
	67, 1768,
	68, 1768,
	69, 1768,
	70, 1768,
	71, 1768,
	72, 1768,
	73, 1768,
	74, 1768,
	76, 1768,
	77, 1768,
	78, 1768,
	79, 1768,
	81, 1768,
	82, 1768,
	83, 1768,
	84, 1768,
	92, 1768,
	93, 1768,
	94, 1768,
	95, 1768,
	96, 1768,
	97, 1768,
	98, 1768,
	99, 1768,
	101, 1768,
	103, 1768,
	105, 1768,
	108, 1768,
	109, 1768,
	111, 1768,
	112, 1768,
	116, 1768,
	117, 1768,
	118, 1768,
	119, 1768,
	120, 1768,
	121, 1768,
	122, 1768,
	123, 1768,
	124, 1768,
	125, 1768,
	129, 1768,
	130, 1768,
	131, 1768,
	132, 1768,
	133, 1768,
	134, 1768,
	135, 1768,
	136, 1768,
	137, 1768,
	138, 1768,
	139, 1768,
	140, 1768,
	142, 1768,
	145, 1768,
	146, 1768,
	148, 1768,
	149, 1768,
	151, 1768,
	153, 1768,
	154, 1768,
	155, 1768,
	156, 1768,
	157, 1768,
	158, 1768,
	159, 1768,
	160, 1768,
	161, 1768,
	162, 1768,
	163, 1768,
	164, 1768,
	165, 1768,
	166, 1768,
	167, 1768,
	168, 1768,
	170, 1768,
	171, 1768,
	172, 1768,
	174, 1768,
	175, 1768,
	176, 1768,
	177, 1768,
	178, 1768,
	179, 1768,
	180, 1768,
	181, 1768,
	182, 1768,
	184, 1768,
	186, 1768,
	187, 1768,
	188, 1768,
	189, 1768,
	190, 1768,
	191, 1768,
	192, 1768,
	193, 1768,
	194, 1768,
	195, 1768,
	196, 1768,
	197, 1768,
	198, 1768,
	199, 1768,
	201, 1768,
	202, 1768,
	204, 1768,
	205, 1768,
	206, 1768,
	207, 1768,
	208, 1768,
	210, 1768,
	211, 1768,
	214, 1768,
	215, 1768,
	216, 1768,
	219, 1768,
	220, 1768,
	221, 1768,
	222, 1768,
	223, 1768,
	224, 1768,
	225, 1768,
	226, 1768,
	227, 1768,
	228, 1768,
	229, 1768,
	230, 1768,
	233, 1768,
	235, 1768,
	236, 1768,
	237, 1768,
	238, 1768,
	239, 1768,
	241, 1768,
	242, 1768,
	245, 1768,
	246, 1768,
	247, 1768,
	249, 1768,
	250, 1768,
	252, 1768,
	254, 1768,
	255, 1768,
	256, 1768,
	257, 1768,
	258, 1768,
	259, 1768,
	260, 1768,
	261, 1768,
	262, 1768,
	263, 1768,
	265, 1768,
	266, 1768,
	267, 1768,
	268, 1768,
	269, 1768,
	271, 1768,
	272, 1768,
	273, 1768,
	274, 1768,
	275, 1768,
	276, 1768,
	277, 1768,
	278, 1768,
	279, 1768,
	281, 1768,
	282, 1768,
	283, 1768,
	284, 1768,
	285, 1768,
	286, 1768,
	287, 1768,
	288, 1768,
	289, 1768,
	290, 1768,
	291, 1768,
	292, 1768,
	293, 1768,
	295, 1768,
	296, 1768,
	297, 1768,
	298, 1768,
	299, 1768,
	300, 1768,
	301, 1768,
	302, 1768,
	303, 1768,
	304, 1768,
	305, 1768,
	306, 1768,
	307, 1768,
	308, 1768,
	309, 1768,
	310, 1768,
	312, 1768,
	313, 1768,
	314, 1768,
	315, 1768,
	316, 1768,
	317, 1768,
	318, 1768,
	319, 1768,
	320, 1768,
	322, 1768,
	323, 1768,
	324, 1768,
	325, 1768,
	326, 1768,
	327, 1768,
	328, 1768,
	329, 1768,
	330, 1768,
	332, 1768,
	333, 1768,
	334, 1768,
	335, 1768,
	336, 1768,
	337, 1768,
	338, 1768,
	339, 1768,
	340, 1768,
	341, 1768,
	342, 1768,
	343, 1768,
	345, 1768,
	346, 1768,
	348, 1768,
	349, 1768,
	350, 1768,
	351, 1768,
	352, 1768,
	353, 1768,
	354, 1768,
	355, 1768,
	356, 1768,
	357, 1768,
	359, 1768,
	360, 1768,
	361, 1768,
	362, 1768,
	365, 1768,
	366, 1768,
	367, 1768,
	368, 1768,
	370, 1768,
	371, 1768,
	373, 1768,
	374, 1768,
	377, 1768,
	378, 1768,
	379, 1768,
	380, 1768,
	382, 1768,
	384, 1768,
	385, 1768,
	386, 1768,
	387, 1768,
	388, 1768,
	389, 1768,
	392, 1768,
	393, 1768,
	398, 1768,
	399, 1768,
	400, 1768,
	401, 1768,
	402, 1768,
	403, 1768,
	404, 1768,
	405, 1768,
	407, 1768,
	408, 1768,
	409, 1768,
	410, 1768,
	411, 1768,
	412, 1768,
	414, 1768,
	415, 1768,
	416, 1768,
	417, 1768,
	418, 1768,
	419, 1768,
	420, 1768,
	421, 1768,
	422, 1768,
	424, 1768,
	427, 1768,
	428, 1768,
	431, 1768,
	432, 1768,
	-2, 0,
	-1, 1177,
	144, 1679,
	363, 1679,
	409, 1679,
	428, 1679,
	-2, 0,
	-1, 1210,
	144, 1708,
	363, 1708,
	409, 1708,
	428, 1708,
	-2, 0,
	-1, 1211,
	189, 811,
	271, 811,
	276, 811,
	-2, 413,
	-1, 1290,
	128, 915,
	209, 915,
	240, 915,
	-2, 873,
	-1, 1374,
	115, 877,
	128, 877,
	183, 877,
	209, 877,
	240, 877,
	248, 877,
	375, 877,
	-2, 1241,
	-1, 1424,
	427, 1361,
	-2, 0,
	-1, 1432,
	189, 811,
	271, 811,
	276, 811,
	-2, 806,
	-1, 1466,
	115, 877,
	128, 877,
	183, 877,
	209, 877,
	240, 877,
	248, 877,
	375, 877,
	-2, 985,
	-1, 1673,
	189, 811,
	271, 811,
	276, 811,
	-2, 415,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1137,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1138,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1139,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1140,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1141,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1142,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1143,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1144,
	-1, 1802,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1156,
	-1, 1803,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1157,
	-1, 1804,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	407, 0,
	408, 0,
	409, 0,
	410, 0,
	411, 0,
	-2, 1158,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1163,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1165,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1169,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1170,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1171,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1172,
	-1, 1899,
	5, 1054,
	144, 1372,
	426, 1493,
	-2, 1484,
	-1, 1900,
	144, 1373,
	-2, 1726,
	-1, 1901,
	144, 1374,
	-2, 1605,
	-1, 1902,
	144, 1375,
	-2, 1545,
	-1, 1903,
	144, 1376,
	-2, 1573,
	-1, 1904,
	144, 1377,
	-2, 1604,
	-1, 1905,
	144, 1378,
	-2, 1671,
	-1, 1979,
	1, 986,
	81, 986,
	115, 986,
	128, 986,
	145, 986,
	150, 986,
	152, 986,
	174, 986,
	183, 986,
	192, 986,
	205, 986,
	209, 986,
	226, 986,
	240, 986,
	243, 986,
	248, 986,
	294, 986,
	296, 986,
	375, 986,
	383, 986,
	395, 986,
	396, 986,
	406, 986,
	425, 986,
	427, 986,
	429, 986,
	430, 986,
	431, 986,
	-2, 985,
	-1, 1984,
	426, 1470,
	-2, 1482,
	-1, 2066,
	427, 1431,
	431, 1431,
	-2, 1458,
	-1, 2192,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1164,
	-1, 2193,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1166,
	-1, 2198,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1167,
	-1, 2429,
	259, 901,
	-2, 723,
	-1, 2496,
	189, 811,
	271, 811,
	276, 811,
	-2, 412,
	-1, 2511,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1168,
	-1, 2516,
	187, 0,
	188, 0,
	233, 0,
	-2, 1186,
	-1, 2577,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1216,
	-1, 2578,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1217,
	-1, 2579,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1218,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1222,
	-1, 2584,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1223,
	-1, 2585,
	13, 0,
	14, 0,
	15, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1224,
	-1, 2627,
	426, 1471,
	-2, 1483,
	-1, 2738,
	187, 0,
	188, 0,
	233, 0,
	-2, 1187,
	-1, 2741,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1190,
	-1, 2742,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1192,
	-1, 2887,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1191,
	-1, 2888,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1193,
	-1, 2898,
	187, 0,
	-2, 1225,
	-1, 2986,
	187, 0,
	-2, 1226,
	-1, 3082,
	38, 0,
	162, 0,
	208, 0,
	326, 0,
	404, 0,
	412, 0,
	-2, 1729,
}

const sqlPrivate = 57344

const sqlLast = 59165

var sqlAct = [...]int{

	787, 1448, 2839, 3081, 3090, 3060, 3144, 3058, 2093, 3057,
	3045, 3091, 2673, 3092, 2101, 2547, 2926, 1087, 2636, 2854,
	2915, 2990, 1145, 3080, 2878, 2122, 957, 2444, 2690, 2794,
	2685, 1770, 2695, 2809, 2438, 763, 1603, 2228, 729, 1830,
	1061, 209, 2436, 2469, 1971, 2068, 500, 2637, 2186, 2467,
	2449, 2346, 1967, 500, 2090, 1293, 2902, 2335, 1604, 2293,
	500, 2772, 2226, 500, 2064, 1459, 500, 209, 973, 500,
	500, 1141, 1109, 2311, 1552, 967, 500, 1551, 1178, 1440,
	1548, 2102, 1560, 1498, 500, 1987, 1972, 1996, 1461, 2067,
	2322, 1557, 2991, 2600, 550, 2049, 1761, 1842, 1870, 1382,
	1756, 2182, 1432, 1698, 1520, 2448, 1514, 2292, 2411, 2023,
	495, 747, 770, 1479, 546, 950, 737, 130, 571, 28,
	1974, 1441, 1477, 1549, 1936, 1213, 1827, 585, 1852, 73,
	1412, 2050, 923, 1864, 2065, 1156, 2840, 2024, 959, 1138,
	931, 2071, 745, 210, 1410, 1179, 211, 2095, 1959, 926,
	1944, 616, 1573, 1895, 1469, 1450, 1294, 636, 1843, 1369,
	905, 136, 1292, 778, 1697, 1567, 500, 500, 1065, 1490,
	1128, 588, 928, 1125, 903, 728, 1431, 130, 497, 665,
	543, 630, 2213, 137, 2616, 1298, 601, 2617, 3171, 2094,
	1575, 1575, 1953, 205, 1575, 733, 609, 496, 500, 500,
	500, 962, 500, 500, 976, 976, 1154, 2123, 785, 593,
	1460, 2509, 2051, 500, 500, 2353, 2051, 3165, 2486, 480,
	3164, 1953, 776, 3141, 1953, 2455, 3138, 2808, 3116, 3110,
	1529, 3109, 2808, 1953, 1379, 1953, 3106, 2603, 483, 3103,
	3107, 1587, 3100, 3104, 743, 480, 1529, 3078, 3077, 3076,
	3075, 1529, 1529, 1587, 1587, 3040, 733, 1086, 3027, 2135,
	603, 3020, 1529, 3018, 483, 2808, 3016, 2808, 734, 1080,
	2808, 2988, 2971, 2961, 970, 2135, 2711, 2808, 2956, 2954,
	2944, 2943, 1529, 2808, 1529, 1529, 906, 906, 2456, 2424,
	2936, 130, 721, 28, 1529, 2935, 2908, 2889, 2834, 2808,
	1529, 2135, 1953, 2830, 2807, 2740, 1867, 1953, 2808, 2135,
	953, 2709, 2701, 2622, 720, 2702, 2702, 2623, 2612, 738,
	2606, 2525, 2613, 2520, 1953, 1529, 2125, 1953, 920, 1523,
	943, 947, 952, 870, 2476, 2308, 2260, 1184, 2416, 1953,
	1953, 907, 1946, 2259, 2253, 2252, 1939, 1953, 2254, 1953,
	2153, 2219, 1196, 909, 1953, 910, 1067, 2220, 2134, 1066,
	1529, 2121, 2135, 2118, 1868, 1592, 2060, 1953, 1952, 1591,
	1529, 1953, 1953, 1592, 3041, 2974, 1587, 1529, 1953, 2603,
	1945, 1676, 937, 2711, 2039, 1985, 2416, 2185, 2164, 1528,
	1436, 480, 1847, 1064, 1074, 2098, 935, 174, 2457, 1176,
	1175, 171, 1174, 2787, 736, 1185, 1173, 171, 1172, 1171,
	483, 1170, 1695, 1169, 1085, 1168, 1167, 2458, 1380, 1166,
	1165, 1164, 1163, 1162, 1161, 1160, 1079, 911, 1869, 1866,
	1576, 1576, 908, 578, 1576, 727, 726, 173, 725, 2227,
	724, 723, 719, 173, 40, 1309, 1310, 718, 717, 716,
	715, 714, 713, 712, 711, 710, 709, 705, 704, 44,
	703, 663, 662, 661, 660, 659, 658, 657, 1309, 1310,
	1312, 1342, 1343, 1344, 1352, 1353, 1354, 656, 172, 655,
	654, 653, 652, 651, 172, 650, 1345, 165, 577, 649,
	1071, 648, 1075, 1312, 1081, 166, 1358, 1311, 647, 2265,
	2266, 646, 645, 1885, 644, 1185, 643, 642, 641, 500,
	500, 640, 500, 962, 962, 500, 138, 579, 500, 1871,
	1311, 500, 138, 625, 624, 59, 581, 500, 1331, 623,
	60, 622, 1309, 1310, 621, 1328, 620, 500, 500, 500,
	500, 500, 962, 962, 534, 533, 506, 505, 504, 962,
	486, 485, 484, 195, 194, 2265, 2266, 1312, 193, 1537,
	192, 191, 190, 189, 63, 1149, 171, 2265, 2266, 1583,
	1574, 2638, 188, 1740, 1317, 2455, 1529, 187, 171, 186,
	185, 500, 184, 183, 1311, 182, 181, 1334, 1335, 1336,
	1337, 180, 179, 1114, 178, 500, 177, 1317, 176, 175,
	1188, 1978, 173, 2265, 2266, 2745, 171, 1193, 1073, 2703,
	1078, 1865, 1084, 2620, 173, 2349, 1142, 2225, 2215, 500,
	1349, 1359, 1102, 2174, 1339, 1340, 1341, 1099, 2271, 1945,
	500, 2061, 2054, 1883, 784, 2140, 745, 1881, 1701, 1185,
	745, 1462, 173, 172, 1879, 1355, 1356, 1877, 1476, 1386,
	1600, 1227, 165, 1326, 1327, 172, 1089, 1070, 3097, 1127,
	166, 1317, 3079, 1305, 165, 3062, 1347, 2981, 64, 2957,
	962, 2977, 166, 1332, 2975, 2876, 2925, 2872, 734, 2771,
	2770, 138, 919, 172, 2271, 2764, 2757, 1157, 1339, 1340,
	1341, 1357, 165, 138, 2419, 2756, 2271, 2755, 139, 66,
	166, 67, 2751, 171, 2862, 1346, 2750, 500, 1132, 1135,
	2749, 2748, 2723, 171, 1599, 2721, 2626, 2597, 1189, 171,
	2596, 2097, 1838, 2595, 2533, 1194, 2415, 2502, 2344, 2304,
	580, 2291, 2271, 110, 1211, 2264, 2261, 1332, 1221, 173,
	2258, 2257, 1225, 547, 1338, 2255, 2233, 2232, 2214, 173,
	1362, 1363, 1364, 1365, 1366, 173, 2126, 1979, 1290, 1291,
	2281, 1333, 1305, 1375, 1304, 1534, 578, 1390, 549, 3169,
	3152, 1385, 2281, 1068, 1532, 3151, 1383, 40, 1372, 1088,
	172, 2549, 3070, 3065, 1350, 783, 3022, 3013, 3012, 165,
	172, 3008, 44, 3007, 3002, 2999, 172, 166, 2973, 165,
	2972, 1832, 2921, 2900, 2848, 165, 2844, 166, 934, 2842,
	2829, 1208, 2786, 166, 2769, 2712, 2688, 2680, 138, 2679,
	2677, 577, 1696, 2025, 2654, 1333, 2653, 2643, 138, 2642,
	2608, 2181, 2515, 2482, 138, 2474, 2480, 2993, 2328, 1289,
	2400, 2384, 2363, 2362, 2307, 2242, 1228, 1839, 2282, 2241,
	579, 2238, 1313, 1314, 1315, 1316, 1318, 1319, 59, 581,
	2282, 2875, 1348, 60, 1373, 1323, 1324, 1330, 1329, 1325,
	1351, 2207, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 1413, 1418, 2142, 2743, 2760, 1982, 2861, 1964, 2759,
	1951, 734, 1875, 1543, 1475, 1309, 1310, 63, 1439, 721,
	500, 1430, 1429, 1424, 1423, 500, 2267, 2268, 2269, 2270,
	2272, 2273, 1422, 1420, 1442, 1442, 1442, 1301, 1302, 1306,
	1312, 720, 1419, 1416, 1438, 1415, 1406, 2720, 1884, 1405,
	1404, 500, 1403, 1402, 1401, 1400, 1322, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 1319, 1399, 1398, 1311, 2439, 1397,
	1396, 2363, 1395, 1394, 1387, 1372, 1207, 1191, 1186, 933,
	2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273, 1159, 1153,
	1383, 2276, 2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273,
	1414, 2615, 2137, 2611, 2218, 1965, 2478, 1370, 1421, 1408,
	1471, 1224, 1411, 1444, 1445, 2152, 1601, 2867, 2265, 2266,
	2714, 64, 2051, 2713, 2618, 1427, 1462, 1287, 1309, 1310,
	1425, 1428, 2269, 2270, 2272, 2273, 1426, 1470, 2950, 2404,
	1202, 2399, 2395, 1695, 2383, 906, 2299, 2298, 2297, 2296,
	2191, 139, 66, 1312, 67, 1682, 1669, 1458, 1695, 130,
	1220, 2151, 2652, 3098, 1392, 2123, 2094, 901, 1695, 1553,
	2488, 1435, 171, 2394, 1510, 2903, 2551, 734, 1882, 1867,
	1311, 1853, 1880, 580, 962, 500, 110, 1433, 1280, 1878,
	1409, 976, 1876, 2978, 1497, 1401, 2976, 1467, 2027, 1437,
	1485, 902, 3108, 2223, 1401, 3105, 2451, 3054, 173, 500,
	976, 500, 500, 2632, 2686, 3099, 2128, 200, 1464, 209,
	2924, 3026, 3131, 1278, 3132, 2498, 918, 1521, 1377, 2821,
	1232, 1544, 897, 500, 500, 542, 895, 1868, 513, 2154,
	500, 1725, 500, 893, 500, 1266, 3168, 1556, 500, 172,
	891, 888, 2949, 2948, 937, 2946, 937, 1317, 165, 2945,
	1516, 1989, 2667, 1265, 2662, 2661, 166, 1279, 935, 2629,
	935, 2628, 2657, 2237, 2091, 2236, 2235, 1457, 2234, 2194,
	962, 732, 2124, 2044, 1339, 1340, 1341, 548, 2038, 523,
	2034, 2015, 1814, 1434, 1063, 2838, 1931, 707, 500, 962,
	2980, 1869, 1866, 1930, 209, 500, 500, 962, 1389, 1564,
	1929, 1928, 1683, 962, 1772, 1198, 209, 500, 2501, 541,
	500, 500, 512, 2048, 1540, 1562, 500, 1737, 1067, 1091,
	1222, 1066, 1989, 1332, 1738, 1659, 2059, 1703, 1686, 1685,
	2672, 1695, 1692, 1988, 745, 745, 2008, 1710, 976, 731,
	615, 1829, 595, 1527, 2817, 1829, 3073, 962, 962, 2007,
	500, 524, 1491, 480, 2928, 500, 614, 3025, 1571, 1230,
	209, 500, 1127, 500, 2479, 500, 1223, 500, 1570, 500,
	1871, 3123, 483, 615, 2446, 1447, 2183, 2184, 2391, 500,
	3094, 500, 1871, 2386, 3037, 1663, 3154, 480, 1509, 500,
	500, 500, 1495, 695, 1308, 1578, 1206, 1199, 1580, 1569,
	2645, 1582, 1547, 1566, 733, 1585, 483, 1745, 1157, 1750,
	1542, 1333, 3038, 742, 3004, 1757, 1998, 1319, 500, 1264,
	2447, 1575, 976, 1673, 1689, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1743, 1813, 1732, 1815, 1816, 1817, 1818, 1597, 1694, 1208,
	2499, 2446, 480, 1670, 1865, 2815, 1593, 1853, 1762, 1769,
	1309, 1310, 1841, 696, 480, 2138, 779, 1595, 2543, 3131,
	1375, 483, 3095, 1407, 1687, 1736, 2375, 976, 1699, 1660,
	2001, 1102, 201, 483, 1261, 1312, 1734, 1707, 1629, 1201,
	2663, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1286, 1751,
	2273, 2497, 1277, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 730, 1311, 2374, 1915, 1690, 1926, 2082, 480, 1492,
	2035, 1932, 1937, 1696, 2025, 500, 3122, 500, 2031, 2952,
	2655, 1739, 1262, 1716, 526, 525, 2540, 483, 1696, 2025,
	1742, 596, 3096, 1487, 1741, 1367, 1489, 1240, 1696, 2025,
	721, 976, 500, 721, 721, 1760, 2884, 202, 1449, 1871,
	2894, 500, 1918, 899, 500, 2816, 898, 976, 1493, 1494,
	889, 500, 1752, 1850, 1724, 1753, 1754, 889, 1512, 500,
	1970, 1231, 1090, 597, 890, 889, 1836, 500, 1487, 1317,
	1590, 1834, 734, 2646, 697, 2240, 1960, 2929, 734, 500,
	2541, 1986, 962, 1309, 1310, 1980, 3155, 2000, 1517, 1846,
	1975, 733, 708, 500, 976, 1628, 1990, 2403, 1840, 500,
	500, 2725, 1453, 2715, 2055, 1919, 2057, 1197, 1312, 2732,
	1200, 2196, 1848, 1471, 500, 1828, 3093, 500, 1966, 1709,
	3130, 1576, 1976, 1977, 1671, 535, 204, 906, 2018, 3128,
	934, 1456, 934, 3121, 1217, 1311, 2853, 2002, 2004, 532,
	1906, 500, 203, 500, 540, 500, 2046, 594, 500, 1451,
	500, 2017, 500, 1927, 500, 500, 1940, 500, 962, 962,
	962, 527, 1454, 962, 2045, 1949, 1950, 1941, 734, 1274,
	698, 1871, 500, 1961, 1962, 1307, 1956, 1205, 1957, 2012,
	199, 2116, 2117, 1452, 2026, 2028, 2029, 2030, 1467, 953,
	196, 2010, 1993, 1999, 2032, 596, 1248, 2851, 2377, 2016,
	2324, 1696, 1693, 2017, 1480, 2041, 1480, 1481, 699, 1481,
	2490, 2033, 1317, 1628, 1628, 197, 1218, 540, 1894, 539,
	2379, 1219, 2056, 1297, 2058, 2112, 2157, 1513, 1487, 1674,
	937, 1296, 2114, 500, 1811, 2088, 2086, 597, 2159, 1339,
	1340, 1341, 1067, 1546, 935, 2052, 1212, 937, 1180, 200,
	1825, 1275, 1446, 1455, 1195, 2143, 2096, 1519, 2096, 198,
	1183, 935, 2378, 2107, 974, 1062, 503, 2130, 2160, 2586,
	1823, 487, 976, 2885, 500, 1518, 2119, 480, 130, 2408,
	2158, 933, 201, 933, 500, 2493, 500, 2100, 1332, 130,
	1844, 1482, 539, 1482, 2113, 1377, 483, 1241, 2120, 2880,
	1844, 1157, 1515, 1484, 1857, 1484, 2129, 500, 500, 500,
	1367, 500, 1295, 2139, 1596, 2127, 1276, 2767, 2109, 1525,
	2110, 753, 2111, 1893, 1493, 1494, 1661, 2412, 2938, 2147,
	500, 2148, 1898, 1898, 2937, 2919, 1909, 1911, 3160, 1916,
	2323, 1844, 2141, 1297, 1414, 1242, 1421, 542, 1239, 1315,
	1316, 1318, 1319, 1486, 2019, 1486, 1943, 202, 1809, 1812,
	2146, 2144, 537, 2996, 2631, 2359, 2355, 1819, 2539, 2089,
	1411, 2155, 2087, 1835, 2492, 1820, 1333, 3147, 1821, 2176,
	2192, 2193, 1826, 1565, 1555, 1453, 2198, 596, 1181, 2820,
	2489, 1554, 1983, 2879, 2587, 1550, 2819, 538, 771, 1545,
	2336, 2588, 528, 1628, 1808, 2211, 3046, 2171, 1729, 130,
	1748, 2173, 1677, 130, 1456, 2691, 1217, 500, 2855, 2217,
	542, 1704, 2197, 2920, 2325, 2224, 2365, 2364, 1182, 597,
	2229, 541, 1958, 1217, 2189, 537, 2063, 1249, 1296, 481,
	1487, 536, 1487, 2178, 498, 1454, 204, 2243, 1955, 2768,
	529, 519, 607, 1954, 600, 2180, 1124, 2062, 545, 488,
	489, 589, 203, 2491, 545, 481, 1122, 589, 612, 2381,
	538, 1478, 3159, 2080, 619, 731, 2674, 1681, 583, 2020,
	2021, 2417, 639, 1113, 1112, 2881, 530, 2337, 531, 1321,
	1313, 1314, 1315, 1316, 1318, 1319, 1480, 3, 1218, 1481,
	199, 3135, 1749, 1219, 541, 1937, 1937, 1937, 2195, 1919,
	1919, 576, 36, 1822, 536, 1218, 2841, 1442, 976, 1295,
	1219, 1824, 1810, 2309, 2407, 2319, 2773, 2818, 2316, 2317,
	777, 2601, 734, 1874, 500, 197, 1455, 500, 1679, 2917,
	1284, 491, 490, 887, 500, 3137, 2899, 500, 500, 976,
	2222, 2766, 2671, 3145, 1680, 2294, 2413, 500, 500, 500,
	2850, 2514, 2339, 500, 545, 545, 500, 1271, 1483, 200,
	1483, 2918, 936, 500, 500, 500, 500, 500, 2466, 198,
	2376, 2332, 2256, 1482, 2206, 1269, 500, 2145, 492, 493,
	2043, 2340, 2341, 500, 2295, 1484, 498, 498, 498, 1259,
	968, 498, 1919, 1919, 1919, 500, 962, 2014, 2356, 500,
	1536, 481, 1069, 575, 35, 976, 2348, 3146, 1873, 500,
	2327, 1474, 1994, 2360, 2331, 976, 1257, 1285, 2301, 2302,
	2303, 1192, 976, 1723, 574, 32, 2172, 2310, 2343, 1123,
	605, 606, 598, 599, 500, 1486, 500, 3148, 500, 1121,
	2167, 962, 500, 962, 962, 962, 934, 500, 2385, 500,
	2849, 582, 2149, 500, 2338, 1726, 2443, 2401, 500, 2350,
	500, 2313, 941, 934, 1713, 2425, 2078, 500, 1255, 2320,
	2321, 1662, 1283, 2326, 2396, 1994, 36, 892, 894, 1253,
	573, 79, 1485, 2347, 500, 500, 572, 78, 2453, 962,
	2382, 2442, 2441, 2380, 1251, 2387, 3089, 2388, 1229, 1270,
	695, 2389, 2105, 1393, 2397, 1102, 500, 1485, 569, 23,
	2392, 1098, 2402, 745, 745, 937, 2390, 1268, 2421, 2398,
	742, 2669, 1487, 937, 937, 2418, 745, 937, 2440, 935,
	2484, 1258, 2414, 1994, 1245, 500, 1521, 935, 935, 2210,
	1120, 935, 1521, 2506, 1524, 3043, 1377, 1757, 2791, 2204,
	500, 937, 1102, 2510, 2477, 2422, 2511, 2427, 1256, 2330,
	570, 24, 1722, 2333, 2431, 935, 2230, 2231, 2516, 2202,
	2650, 2361, 2459, 2648, 2630, 2522, 976, 2435, 35, 2367,
	2452, 2371, 2372, 568, 30, 2529, 976, 734, 2433, 2319,
	696, 1542, 2092, 567, 21, 2084, 2465, 933, 130, 32,
	2083, 500, 2081, 2077, 2517, 1589, 565, 20, 2556, 2557,
	1254, 2558, 2559, 2560, 933, 2494, 2495, 2496, 2562, 1588,
	1586, 1252, 2460, 2461, 2462, 2564, 2463, 2464, 2500, 566,
	19, 555, 15, 2168, 1584, 2169, 1250, 1581, 556, 16,
	2552, 2505, 1579, 1577, 1535, 2306, 2507, 2503, 2437, 130,
	1483, 1533, 2535, 2536, 2537, 79, 2592, 2593, 2318, 1522,
	1511, 78, 1148, 1762, 2555, 1508, 2199, 1919, 1919, 564,
	57, 2521, 1496, 1488, 2528, 2966, 1244, 2200, 1299, 3132,
	2527, 2205, 1119, 23, 1762, 2566, 2609, 2874, 1628, 915,
	563, 56, 500, 2548, 2542, 2544, 2545, 498, 1097, 2873,
	498, 2554, 1700, 498, 500, 2187, 968, 1989, 2968, 1117,
	976, 916, 2590, 554, 55, 498, 2619, 2006, 2005, 2594,
	2700, 697, 2565, 1989, 2635, 498, 498, 498, 498, 968,
	2563, 562, 12, 2836, 2003, 24, 2614, 2483, 2047, 1919,
	1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919,
	1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 30, 1919,
	1300, 2591, 2599, 2042, 2037, 2013, 2216, 2602, 21, 639,
	2604, 2605, 2607, 553, 50, 2150, 2188, 500, 500, 2658,
	500, 20, 3006, 498, 130, 500, 560, 47, 561, 48,
	2621, 2664, 2670, 917, 976, 2665, 976, 552, 49, 962,
	2668, 2681, 1667, 1668, 19, 584, 15, 1203, 1442, 2634,
	2810, 2805, 2201, 16, 1243, 2983, 500, 698, 639, 2707,
	2203, 559, 7, 2704, 2774, 2693, 2040, 2656, 2022, 1628,
	558, 6, 2692, 2697, 2017, 962, 2009, 1303, 2802, 2011,
	2610, 3042, 2847, 2625, 57, 2099, 2687, 500, 2689, 2561,
	976, 500, 500, 976, 500, 699, 2085, 2696, 2076, 1942,
	2676, 1672, 500, 955, 2639, 56, 2675, 2684, 2683, 1602,
	976, 2678, 3143, 1376, 608, 2694, 2738, 557, 38, 2803,
	2741, 2742, 2649, 2473, 2651, 3158, 2698, 1380, 55, 2719,
	2706, 2546, 2744, 2729, 937, 498, 2747, 2705, 2481, 1309,
	1310, 1628, 1309, 1310, 2265, 2266, 12, 2162, 935, 2163,
	500, 1234, 2739, 2754, 2717, 2718, 1233, 2734, 2726, 2352,
	1908, 1530, 2735, 1863, 1994, 2730, 2727, 1312, 1609, 1309,
	1310, 2746, 937, 2538, 2366, 1390, 2369, 1388, 1628, 1628,
	1538, 934, 551, 37, 1273, 2710, 935, 1272, 50, 934,
	934, 1311, 937, 934, 1311, 2162, 2161, 1691, 2911, 1628,
	1628, 47, 2865, 48, 937, 2708, 2659, 1282, 937, 500,
	1281, 2313, 49, 937, 1267, 1263, 1260, 934, 2659, 976,
	1246, 976, 2659, 2765, 1204, 1675, 900, 2659, 706, 500,
	500, 500, 2927, 3053, 1628, 693, 7, 2373, 1712, 1247,
	1714, 2329, 2812, 1963, 500, 6, 3036, 2752, 2239, 500,
	2798, 500, 2598, 2799, 500, 500, 500, 500, 500, 2989,
	2893, 2813, 500, 500, 962, 937, 2776, 2777, 976, 2450,
	1872, 2782, 962, 2811, 2781, 2785, 2790, 2779, 2450, 935,
	500, 500, 1391, 53, 2472, 766, 1609, 1609, 829, 2801,
	2792, 2633, 38, 962, 2837, 2070, 2843, 2069, 979, 2804,
	1684, 788, 1897, 500, 1763, 2485, 1499, 2852, 790, 1607,
	793, 792, 500, 500, 962, 962, 791, 2722, 1702, 2857,
	2835, 1608, 1417, 2859, 1503, 789, 2856, 1605, 619, 2079,
	2103, 2660, 933, 545, 2831, 683, 2883, 1688, 2887, 2888,
	933, 933, 2442, 2866, 933, 2846, 976, 2666, 1833, 2858,
	1851, 2221, 1384, 2864, 1465, 2868, 936, 37, 2775, 498,
	2896, 2897, 2869, 758, 2347, 1849, 1500, 1190, 933, 757,
	2334, 2445, 2624, 1102, 2860, 2904, 1747, 2179, 2832, 2265,
	2266, 1744, 2647, 2639, 2886, 515, 2262, 1152, 976, 1924,
	1917, 1913, 500, 1288, 500, 2800, 976, 500, 1368, 2104,
	1226, 2345, 1771, 2454, 2136, 500, 2901, 1755, 914, 913,
	2892, 976, 937, 912, 3059, 1103, 1106, 3056, 2639, 2882,
	2863, 2939, 1678, 2156, 1361, 762, 935, 2914, 2314, 2639,
	2420, 1504, 937, 2906, 2907, 1095, 3005, 2912, 1360, 896,
	2998, 1216, 2932, 1215, 1214, 2789, 935, 2358, 2780, 1628,
	3153, 937, 500, 2644, 500, 170, 2930, 962, 2931, 167,
	2933, 2953, 500, 2955, 169, 935, 2823, 2959, 2909, 168,
	2406, 82, 34, 2828, 2951, 33, 1609, 1854, 1919, 109,
	2940, 108, 107, 2964, 106, 976, 937, 105, 104, 103,
	2963, 1505, 1506, 481, 102, 101, 100, 937, 99, 2969,
	935, 2965, 1501, 98, 500, 97, 96, 2970, 2271, 95,
	500, 935, 94, 93, 92, 1919, 91, 1069, 500, 498,
	1541, 90, 2696, 2997, 89, 2979, 3000, 481, 88, 1502,
	87, 2442, 2982, 86, 85, 84, 635, 2987, 2995, 3001,
	507, 1561, 1561, 2994, 632, 81, 500, 500, 498, 2639,
	498, 80, 498, 500, 2992, 31, 545, 26, 113, 114,
	934, 25, 77, 76, 962, 29, 2958, 1984, 3003, 500,
	3019, 3017, 1235, 962, 962, 2941, 2942, 500, 18, 500,
	11, 500, 17, 2639, 2281, 2639, 3014, 22, 1994, 2639,
	3023, 3021, 501, 510, 3024, 3030, 3031, 3029, 934, 3032,
	500, 135, 134, 500, 3049, 500, 639, 976, 1507, 2913,
	3011, 1919, 481, 1069, 589, 133, 3061, 937, 2910, 132,
	131, 14, 3068, 13, 481, 1069, 128, 2105, 968, 498,
	3066, 935, 517, 208, 639, 3067, 3074, 3069, 3055, 3085,
	3085, 3071, 500, 129, 3072, 127, 2724, 937, 126, 125,
	124, 937, 3051, 937, 123, 10, 3102, 937, 3088, 208,
	8, 2659, 3086, 3087, 112, 935, 500, 935, 639, 3112,
	3101, 935, 2282, 498, 500, 9, 2877, 2487, 481, 498,
	3113, 498, 3114, 498, 3085, 498, 3120, 498, 3117, 3115,
	500, 934, 70, 71, 27, 43, 510, 1727, 42, 1728,
	41, 3118, 3119, 1628, 3129, 3127, 1449, 498, 498, 498,
	3126, 933, 3133, 3136, 3134, 3061, 3139, 3140, 111, 1837,
	161, 2905, 160, 159, 516, 158, 3142, 154, 157, 155,
	1376, 156, 153, 122, 163, 517, 639, 162, 3150, 3149,
	151, 148, 150, 152, 149, 3085, 147, 3157, 164, 933,
	121, 120, 1606, 119, 118, 1628, 117, 116, 3156, 937,
	5, 2, 3010, 2639, 1, 0, 3166, 3167, 2778, 3163,
	1453, 0, 0, 2659, 3172, 1923, 2947, 0, 0, 0,
	869, 0, 0, 0, 3028, 2275, 2267, 2268, 2269, 2270,
	2272, 2273, 2165, 963, 0, 0, 977, 977, 0, 1456,
	2788, 0, 1994, 2814, 740, 0, 695, 0, 0, 0,
	0, 2639, 0, 2824, 2825, 0, 0, 1451, 0, 0,
	2822, 0, 0, 0, 0, 0, 742, 516, 2827, 0,
	1454, 937, 0, 0, 1628, 513, 0, 0, 934, 2845,
	2265, 2266, 933, 0, 0, 935, 0, 0, 0, 0,
	511, 1452, 1994, 0, 0, 0, 0, 0, 934, 0,
	0, 0, 741, 619, 0, 545, 0, 0, 0, 0,
	1606, 1606, 0, 509, 2450, 2265, 2266, 934, 0, 937,
	936, 0, 0, 0, 0, 508, 0, 0, 0, 0,
	545, 0, 0, 935, 0, 0, 696, 936, 0, 545,
	2208, 2209, 498, 0, 0, 0, 0, 0, 0, 1997,
	0, 0, 934, 0, 518, 0, 0, 498, 0, 512,
	0, 1455, 0, 934, 0, 498, 0, 0, 0, 514,
	3039, 0, 0, 0, 0, 2280, 0, 498, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 511, 0, 0, 0, 481, 2053, 3063,
	3064, 0, 0, 1994, 0, 0, 1526, 0, 0, 2271,
	0, 1609, 2066, 0, 0, 1069, 509, 0, 0, 0,
	0, 964, 0, 0, 978, 978, 0, 0, 508, 933,
	0, 0, 0, 2288, 2289, 2290, 0, 0, 0, 1997,
	0, 545, 0, 498, 2271, 929, 498, 0, 498, 933,
	498, 0, 498, 498, 0, 968, 0, 518, 0, 0,
	0, 2967, 512, 0, 0, 0, 0, 697, 933, 0,
	1997, 0, 514, 0, 0, 0, 0, 0, 2315, 0,
	0, 0, 0, 934, 0, 2281, 0, 0, 0, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 0, 0, 933, 0, 0, 0, 0, 0, 2342,
	0, 0, 0, 0, 933, 0, 0, 934, 0, 934,
	2281, 1594, 0, 934, 0, 0, 0, 0, 0, 1598,
	0, 589, 0, 0, 0, 0, 0, 0, 3161, 3162,
	0, 0, 0, 0, 0, 963, 963, 0, 0, 0,
	0, 0, 1609, 0, 0, 0, 3170, 3009, 0, 0,
	0, 739, 0, 698, 0, 0, 0, 0, 2805, 0,
	0, 0, 498, 2282, 963, 963, 3033, 0, 3034, 1705,
	1706, 963, 1069, 0, 1069, 2410, 0, 0, 0, 0,
	0, 0, 2410, 0, 0, 2802, 0, 0, 2795, 0,
	0, 699, 3050, 0, 0, 498, 498, 498, 2282, 498,
	0, 2793, 0, 0, 0, 0, 2797, 0, 0, 1923,
	1923, 1309, 1310, 0, 1609, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 933, 0, 2803, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 1312, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1609, 1609, 2796, 0, 3111, 0, 0, 933, 0,
	933, 0, 0, 1311, 933, 0, 0, 0, 0, 0,
	0, 1331, 1609, 1609, 0, 2105, 0, 2267, 2268, 2269,
	2270, 2272, 2273, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 2512, 2513,
	0, 0, 1923, 1923, 1923, 1069, 0, 1609, 0, 2276,
	2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273, 0, 0,
	0, 0, 0, 964, 964, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 0, 934, 2524, 0, 2265, 2266,
	1317, 2283, 2284, 2285, 0, 0, 2531, 0, 0, 0,
	0, 0, 964, 964, 0, 0, 2737, 2798, 0, 964,
	2799, 0, 0, 0, 0, 0, 0, 1339, 1340, 1341,
	2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576,
	2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 0,
	2589, 0, 0, 0, 0, 0, 2801, 0, 2280, 0,
	0, 0, 0, 0, 0, 936, 2804, 0, 0, 0,
	0, 0, 0, 936, 936, 0, 1332, 936, 0, 0,
	0, 0, 545, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 545, 0, 0, 545, 545, 0, 933, 0,
	0, 1465, 0, 0, 2036, 498, 1997, 2354, 0, 0,
	0, 1997, 0, 0, 2354, 0, 0, 0, 0, 0,
	0, 1997, 2354, 1997, 2354, 2354, 0, 2271, 0, 0,
	2627, 0, 0, 0, 498, 0, 0, 0, 1309, 1310,
	964, 1541, 0, 0, 0, 0, 933, 1338, 0, 0,
	0, 0, 0, 498, 0, 0, 0, 968, 0, 0,
	0, 0, 2800, 1312, 1333, 0, 0, 498, 0, 0,
	0, 0, 0, 0, 0, 2286, 0, 0, 0, 0,
	2115, 0, 1609, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 1561, 0, 1561, 0, 498, 0, 0, 0,
	498, 0, 0, 2281, 1093, 498, 0, 498, 0, 0,
	1111, 968, 0, 0, 0, 0, 1997, 0, 545, 0,
	0, 0, 0, 0, 0, 1997, 0, 0, 0, 0,
	0, 0, 1131, 1131, 1131, 972, 0, 1923, 1923, 0,
	0, 0, 2470, 1069, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 1317, 0, 0,
	974, 0, 0, 1062, 0, 1322, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1319, 0, 0, 0, 0, 0, 0,
	1187, 2282, 0, 2504, 1339, 1340, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 1923,
	1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
	1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923, 0, 1923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 2550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 2277, 2278, 2279, 0, 0,
	0, 2784, 2276, 2274, 2275, 2267, 2268, 2269, 2270, 2272,
	2273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 963, 0, 936, 0, 0, 0, 0, 0,
	545, 0, 0, 0, 0, 0, 0, 0, 1606, 0,
	0, 963, 545, 0, 0, 0, 208, 0, 0, 963,
	0, 0, 0, 0, 0, 963, 0, 0, 208, 0,
	0, 0, 2641, 0, 0, 0, 0, 0, 1609, 0,
	0, 0, 0, 0, 0, 1606, 1606, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 1465, 0, 1606, 1606, 1465, 963,
	963, 0, 0, 1465, 0, 0, 2890, 0, 0, 2898,
	0, 0, 208, 0, 964, 1997, 1561, 0, 1561, 0,
	0, 978, 0, 498, 0, 1313, 1314, 1315, 1316, 1318,
	1319, 1606, 0, 146, 0, 0, 0, 0, 39, 0,
	978, 0, 0, 767, 74, 0, 2922, 1609, 2890, 40,
	141, 0, 0, 0, 1997, 936, 1771, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 1771, 0, 0, 977, 0, 0, 0, 0, 46,
	143, 0, 0, 0, 0, 1069, 0, 0, 0, 968,
	498, 45, 498, 51, 0, 0, 0, 0, 0, 0,
	498, 0, 0, 0, 74, 0, 1472, 0, 2393, 0,
	964, 0, 0, 0, 52, 0, 2265, 2266, 54, 2283,
	2284, 2285, 58, 0, 0, 0, 144, 0, 0, 964,
	59, 72, 0, 0, 2736, 60, 61, 964, 0, 0,
	0, 0, 2986, 964, 0, 1062, 0, 0, 2753, 977,
	0, 0, 0, 2426, 0, 2428, 2429, 2430, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 722, 0, 2280, 0, 978, 0,
	0, 0, 735, 0, 0, 0, 0, 964, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2475, 936, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 74, 0,
	0, 0, 1465, 977, 0, 0, 0, 1997, 2354, 1997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 2641, 1069, 0, 0, 2271, 1606, 1997, 0, 2354,
	0, 0, 1069, 1069, 498, 1997, 2354, 0, 0, 0,
	498, 498, 978, 0, 0, 0, 1539, 1771, 0, 0,
	0, 0, 0, 64, 963, 0, 2641, 0, 1069, 2066,
	0, 0, 65, 0, 0, 0, 977, 2641, 1923, 0,
	0, 0, 0, 2286, 578, 0, 0, 1568, 0, 1568,
	0, 1997, 75, 139, 66, 40, 67, 0, 68, 0,
	2470, 2470, 145, 0, 0, 0, 0, 69, 0, 0,
	44, 2281, 0, 0, 171, 1923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 978, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 577,
	963, 963, 963, 0, 0, 963, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1665, 0, 579, 0,
	0, 0, 0, 115, 0, 0, 59, 581, 0, 0,
	1997, 60, 2354, 140, 0, 2916, 0, 0, 0, 0,
	0, 172, 0, 498, 0, 0, 0, 2641, 0, 2282,
	165, 978, 0, 0, 0, 0, 0, 0, 166, 0,
	1711, 1923, 0, 0, 0, 63, 1717, 978, 1718, 0,
	1719, 0, 1720, 0, 1721, 0, 0, 1465, 0, 138,
	0, 2641, 4, 2641, 0, 0, 0, 2641, 0, 0,
	498, 0, 498, 0, 1730, 1111, 0, 0, 0, 0,
	1069, 0, 964, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 0, 2550, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 2277, 2278, 2279, 2916, 0, 0, 0,
	2276, 2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273, 64,
	0, 0, 0, 74, 0, 74, 0, 74, 964, 964,
	964, 0, 0, 964, 1997, 2354, 0, 2716, 0, 1465,
	0, 498, 1606, 0, 0, 0, 0, 0, 0, 139,
	66, 0, 67, 0, 0, 0, 0, 2354, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 1069, 0, 498,
	171, 0, 1380, 0, 0, 0, 0, 0, 2170, 0,
	0, 580, 735, 0, 110, 0, 0, 0, 3047, 0,
	578, 1069, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 2641, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	2550, 0, 0, 74, 0, 0, 0, 0, 0, 1981,
	74, 0, 978, 0, 0, 577, 0, 172, 0, 0,
	0, 0, 0, 0, 1069, 0, 165, 0, 0, 2641,
	0, 0, 1997, 0, 166, 0, 0, 2265, 2266, 0,
	2283, 2284, 2285, 0, 579, 0, 0, 0, 2916, 0,
	0, 0, 59, 581, 0, 138, 0, 60, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 1352, 1353, 1354, 0,
	0, 63, 0, 0, 0, 0, 2833, 2280, 0, 0,
	0, 977, 0, 0, 0, 1312, 0, 0, 1358, 0,
	2108, 0, 0, 1131, 0, 1131, 0, 1131, 0, 972,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	1331, 722, 0, 0, 0, 0, 2870, 2871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 1371, 0, 1374, 2271, 977, 0, 0,
	0, 0, 1381, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	2287, 0, 0, 0, 0, 64, 0, 0, 0, 1334,
	1335, 1336, 1337, 963, 0, 963, 963, 963, 0, 1317,
	0, 0, 0, 0, 2286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 66, 0, 67, 0,
	0, 0, 1349, 1359, 0, 0, 1339, 1340, 1341, 2166,
	0, 0, 2281, 0, 0, 0, 171, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 580, 978, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2175, 972, 2177, 0, 0, 0, 1347, 0,
	0, 0, 173, 0, 0, 1332, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 2190, 0, 0, 0, 2131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 44, 74, 0, 0, 1463,
	2282, 1466, 165, 0, 0, 0, 0, 0, 977, 0,
	166, 0, 0, 0, 0, 0, 964, 0, 977, 0,
	0, 0, 0, 0, 2132, 978, 1338, 0, 0, 0,
	0, 138, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 978, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2133, 0, 0, 0, 0, 0, 0,
	0, 964, 581, 964, 964, 964, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 2277, 2278, 2279, 0, 0, 964,
	0, 2276, 2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273,
	0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353,
	1354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 977, 0, 1348, 0, 0, 1312, 0, 0,
	1358, 0, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 2351, 0, 0, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 978, 0, 0, 0,
	0, 0, 0, 578, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 40, 0, 977, 0, 977, 0,
	0, 963, 0, 0, 139, 66, 0, 67, 0, 44,
	0, 1334, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 2405, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 963, 577, 110,
	0, 0, 0, 0, 1349, 1359, 0, 0, 1339, 1340,
	1341, 0, 977, 2423, 0, 977, 0, 0, 0, 0,
	0, 173, 2432, 0, 2434, 0, 0, 579, 0, 1355,
	1356, 0, 977, 0, 0, 59, 581, 1326, 1327, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	978, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 63, 1357, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 722, 0, 0, 722, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2508, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 977, 978, 1333, 978, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1831, 0, 0, 0, 0, 1350, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 64, 0,
	0, 0, 1374, 0, 0, 964, 963, 0, 0, 0,
	977, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	978, 0, 0, 978, 0, 0, 0, 0, 139, 66,
	0, 67, 0, 0, 0, 963, 0, 0, 0, 0,
	978, 2265, 2266, 0, 2283, 2284, 2285, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 963, 963, 0, 2519,
	580, 0, 0, 110, 0, 0, 1348, 0, 0, 1323,
	1324, 1330, 1329, 1325, 1351, 924, 1322, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 1319, 173, 0, 0, 977, 2248,
	0, 0, 1466, 2249, 0, 0, 0, 0, 0, 0,
	0, 2280, 2265, 2266, 0, 2283, 2284, 2285, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	2518, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	977, 0, 0, 0, 0, 165, 0, 0, 977, 0,
	74, 0, 0, 166, 0, 0, 0, 0, 0, 978,
	0, 978, 0, 977, 0, 0, 0, 74, 0, 74,
	0, 0, 2280, 0, 138, 0, 0, 0, 0, 0,
	2271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 74, 964, 0, 0, 0, 978, 963,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 2286, 0,
	0, 0, 0, 964, 0, 0, 74, 977, 0, 0,
	0, 2271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 964, 2281, 2728, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 2731, 0, 0,
	0, 0, 0, 0, 2265, 2266, 0, 2283, 2284, 2285,
	0, 0, 0, 0, 0, 0, 978, 0, 0, 2286,
	0, 0, 0, 0, 2265, 2266, 0, 2283, 2284, 2285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 2281, 0, 0,
	0, 0, 0, 0, 0, 963, 963, 0, 978, 0,
	0, 0, 0, 0, 2280, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 2282, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 2280, 0, 74, 0, 0, 977,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344,
	1352, 1353, 1354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 964, 0, 1312,
	0, 0, 1358, 2271, 0, 2282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2826, 0, 2271, 0, 978, 1311, 1111, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 1831, 0, 2277, 2278,
	2279, 2286, 0, 0, 0, 2276, 2274, 2275, 2267, 2268,
	2269, 2270, 2272, 2273, 0, 0, 1374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 1336, 1337, 0, 0, 2281,
	0, 0, 0, 1317, 964, 0, 0, 0, 0, 2277,
	2278, 2279, 0, 964, 964, 0, 2276, 2274, 2275, 2267,
	2268, 2269, 2270, 2272, 2273, 0, 1349, 1359, 0, 0,
	1339, 1340, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 1355, 1356, 0, 0, 0, 0, 0, 0, 1326,
	1327, 0, 0, 0, 0, 0, 0, 2282, 0, 0,
	2923, 0, 1347, 0, 0, 0, 0, 0, 0, 1332,
	924, 0, 0, 0, 0, 0, 0, 2282, 924, 924,
	0, 0, 924, 0, 0, 0, 0, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 2960, 0, 2962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 2277, 2278, 2279, 74, 0, 0, 0, 2276, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 0, 0, 0,
	1350, 2277, 2278, 2279, 0, 0, 0, 1626, 2276, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 3015, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 1637, 1622, 1627, 1610, 1647, 1646, 0, 0,
	0, 1612, 1611, 0, 0, 0, 3035, 0, 0, 1656,
	1655, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	3052, 1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1319, 0, 0, 1648,
	0, 1644, 1643, 0, 0, 2758, 0, 0, 0, 0,
	0, 1642, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1641,
	1639, 1640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1621, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1630,
	1625, 1631, 1632, 1633, 1634, 1635, 0, 1629, 0, 0,
	0, 0, 0, 0, 0, 0, 1653, 1654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1645, 0, 0, 0, 1623, 1624, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1638, 0, 0, 0, 1766, 1764, 1765, 1768, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1615, 1616, 1617,
	1618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1636, 1619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 1649, 1650, 1651, 1652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 938, 0, 1620, 0, 0,
	0, 0, 1657, 0, 0, 0, 0, 0, 0, 0,
	924, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	74, 822, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 821, 276, 219, 220, 221,
	0, 277, 828, 0, 811, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 871, 290, 291, 292, 814, 812, 813, 818,
	816, 815, 817, 293, 294, 502, 295, 296, 297, 223,
	224, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 0, 303, 304, 0, 0, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 850, 851, 0, 872, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 873, 321, 0, 322,
	853, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	823, 824, 827, 875, 0, 825, 330, 924, 0, 0,
	0, 329, 331, 338, 0, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 925, 349, 348, 0, 856, 879, 350, 351, 880,
	0, 352, 353, 0, 0, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 0, 0, 882, 0, 826, 367, 240, 368,
	369, 0, 370, 371, 0, 930, 372, 373, 0, 0,
	374, 241, 883, 375, 884, 858, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 74, 385, 859, 386, 244,
	387, 0, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 885, 409, 410,
	411, 412, 246, 932, 0, 417, 418, 419, 420, 421,
	422, 423, 171, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 819, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 862, 0, 448, 449, 173, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 0,
	249, 250, 251, 458, 0, 0, 459, 460, 866, 867,
	0, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 820, 470, 0, 468, 471, 472, 473, 1158,
	255, 0, 0, 474, 256, 0, 0, 0, 165, 475,
	476, 257, 477, 478, 479, 0, 166, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 0, 1468, 0, 0,
	0, 1831, 258, 259, 260, 261, 980, 262, 981, 982,
	983, 984, 214, 985, 986, 987, 988, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 989, 269, 270,
	271, 272, 273, 274, 275, 990, 991, 276, 219, 220,
	221, 992, 277, 222, 993, 965, 994, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 995, 287, 0,
	288, 289, 996, 871, 290, 291, 292, 997, 998, 1000,
	999, 1001, 1002, 1003, 293, 294, 502, 295, 296, 297,
	223, 224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008,
	301, 302, 1009, 303, 304, 1010, 0, 1011, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 1012, 872,
	1013, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 1014, 320, 1015, 1016, 873, 321, 1017,
	322, 229, 1018, 230, 1019, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 875, 1020, 237, 330, 0, 0,
	0, 1021, 329, 331, 338, 1022, 874, 332, 234, 334,
	333, 335, 336, 337, 235, 1023, 236, 1024, 339, 876,
	877, 340, 341, 342, 878, 343, 344, 0, 0, 345,
	346, 347, 1025, 349, 348, 1026, 238, 879, 350, 351,
	880, 1027, 352, 353, 1028, 1029, 354, 0, 355, 940,
	939, 356, 357, 358, 359, 361, 362, 360, 881, 363,
	364, 366, 365, 1030, 1031, 882, 1032, 239, 367, 240,
	368, 369, 1033, 370, 371, 1034, 1035, 372, 373, 1036,
	1037, 374, 241, 883, 375, 884, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 1038, 385, 243, 386,
	244, 387, 1039, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 1040, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 1041, 408, 885, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 1042, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 1043, 433, 414, 415, 434, 886, 435,
	247, 436, 437, 1044, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 1045, 448, 449, 1046,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	1047, 249, 250, 251, 458, 1048, 1049, 459, 460, 252,
	253, 1050, 461, 462, 0, 463, 464, 1051, 1052, 465,
	466, 467, 469, 1053, 470, 1054, 468, 471, 472, 473,
	254, 255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 1968, 0, 0, 0,
	0, 0, 0, 0, 0, 1969, 258, 259, 260, 261,
	980, 262, 981, 982, 983, 984, 214, 985, 986, 987,
	988, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 989, 269, 270, 271, 272, 273, 274, 275, 990,
	991, 276, 219, 220, 221, 992, 277, 222, 993, 965,
	994, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 995, 287, 0, 288, 289, 996, 871, 290, 291,
	292, 997, 998, 1000, 999, 1001, 1002, 1003, 293, 294,
	502, 295, 296, 297, 223, 224, 1004, 298, 1005, 299,
	1006, 300, 1007, 1008, 301, 302, 1009, 303, 304, 1010,
	0, 1011, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 1012, 872, 1013, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 1014, 320, 1015,
	1016, 873, 321, 1017, 322, 229, 1018, 230, 1019, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 875, 1020,
	237, 330, 0, 0, 0, 1021, 329, 331, 338, 1022,
	874, 332, 234, 334, 333, 335, 336, 337, 235, 1023,
	236, 1024, 339, 876, 877, 340, 341, 342, 878, 343,
	344, 0, 0, 345, 346, 347, 1025, 349, 348, 1026,
	238, 879, 350, 351, 880, 1027, 352, 353, 1028, 1029,
	354, 0, 355, 940, 939, 356, 357, 358, 359, 361,
	362, 360, 881, 363, 364, 366, 365, 1030, 1031, 882,
	1032, 239, 367, 240, 368, 369, 1033, 370, 371, 1034,
	1035, 372, 373, 1036, 1037, 374, 241, 883, 375, 884,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	1038, 385, 243, 386, 244, 387, 1039, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 1040, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1041, 408, 885, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1042, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1043, 433, 414,
	415, 434, 886, 435, 247, 436, 437, 1044, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	1045, 448, 449, 1046, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 1047, 249, 250, 251, 458, 1048,
	1049, 459, 460, 252, 253, 1050, 461, 462, 0, 463,
	464, 1051, 1052, 465, 466, 467, 469, 1053, 470, 1054,
	468, 471, 472, 473, 254, 255, 1055, 1056, 474, 256,
	1057, 1058, 1059, 1060, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2783, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2891, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2532, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2523, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2409, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1855, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 258, 259, 260, 261, 980, 262, 981, 982, 983,
	984, 214, 985, 986, 987, 988, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 989, 269, 270, 271,
	272, 273, 274, 275, 990, 991, 276, 219, 220, 221,
	992, 277, 222, 993, 965, 994, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 995, 287, 0, 288,
	289, 996, 871, 290, 291, 292, 997, 998, 1000, 999,
	1001, 1002, 1003, 293, 294, 502, 295, 296, 297, 223,
	224, 1004, 298, 1005, 299, 1006, 300, 1007, 1008, 301,
	302, 1009, 303, 304, 1010, 0, 1011, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1012, 872, 1013,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1014, 320, 1015, 1016, 873, 321, 1017, 322,
	229, 1018, 230, 1019, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 875, 1020, 237, 330, 0, 0, 0,
	1021, 329, 331, 338, 1022, 874, 332, 234, 334, 333,
	335, 336, 337, 235, 1023, 236, 1024, 339, 876, 877,
	340, 341, 342, 878, 343, 344, 0, 0, 345, 346,
	347, 1025, 349, 348, 1026, 238, 879, 350, 351, 880,
	1027, 352, 353, 1028, 1029, 354, 0, 355, 940, 939,
	356, 357, 358, 359, 361, 362, 360, 881, 363, 364,
	366, 365, 1030, 1031, 882, 1032, 239, 367, 240, 368,
	369, 1033, 370, 371, 1034, 1035, 372, 373, 1036, 1037,
	374, 241, 883, 375, 884, 242, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 1038, 385, 243, 386, 244,
	387, 1039, 388, 389, 390, 391, 392, 393, 245, 394,
	395, 1040, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1041, 408, 885, 409, 410,
	411, 412, 246, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1042, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1043, 433, 414, 415, 434, 886, 435, 247,
	436, 437, 1044, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 248, 1045, 448, 449, 1046, 450,
	451, 452, 453, 454, 309, 455, 310, 456, 457, 1047,
	249, 250, 251, 458, 1048, 1049, 459, 460, 252, 253,
	1050, 461, 462, 0, 463, 464, 1051, 1052, 465, 466,
	467, 469, 1053, 470, 1054, 468, 471, 472, 473, 254,
	255, 1055, 1056, 474, 256, 1057, 1058, 1059, 1060, 475,
	476, 257, 477, 478, 479, 1862, 0, 786, 774, 775,
	772, 773, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1859, 262, 0,
	0, 0, 0, 822, 768, 0, 0, 0, 263, 264,
	265, 215, 843, 806, 844, 794, 830, 845, 0, 269,
	270, 796, 795, 273, 274, 275, 769, 821, 276, 846,
	847, 221, 0, 277, 828, 0, 811, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 871, 290, 291, 292, 814, 812,
	813, 818, 816, 815, 817, 293, 294, 502, 295, 831,
	297, 848, 849, 754, 298, 0, 299, 0, 300, 1860,
	0, 832, 302, 0, 303, 304, 0, 0, 0, 759,
	305, 306, 308, 311, 307, 312, 313, 850, 851, 781,
	872, 0, 0, 0, 0, 0, 314, 315, 316, 852,
	833, 834, 0, 319, 0, 320, 0, 0, 873, 321,
	0, 322, 853, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 823, 824, 827, 875, 0, 825, 805, 0,
	0, 0, 0, 329, 331, 338, 0, 874, 332, 854,
	809, 835, 836, 837, 838, 855, 0, 810, 0, 339,
	876, 877, 340, 341, 342, 878, 839, 840, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 856, 879, 350,
	351, 880, 0, 352, 353, 0, 0, 354, 0, 355,
	756, 755, 356, 357, 358, 359, 361, 798, 360, 881,
	363, 364, 366, 365, 751, 0, 882, 782, 826, 367,
	857, 368, 369, 0, 807, 808, 0, 0, 372, 373,
	0, 0, 374, 241, 883, 375, 884, 858, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 859,
	386, 244, 387, 0, 388, 389, 390, 391, 392, 393,
	860, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 885,
	409, 410, 411, 412, 760, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 799, 800, 801,
	802, 425, 431, 432, 819, 433, 414, 415, 434, 886,
	435, 861, 803, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 841, 442, 443, 444, 862, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 309, 455, 310, 797,
	457, 0, 863, 864, 865, 842, 0, 0, 459, 460,
	866, 867, 780, 461, 462, 0, 463, 464, 0, 0,
	465, 466, 467, 469, 820, 470, 0, 804, 471, 472,
	473, 254, 868, 1858, 0, 474, 256, 0, 0, 0,
	0, 475, 476, 257, 477, 478, 479, 752, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	748, 749, 1861, 0, 0, 0, 0, 0, 0, 761,
	1856, 0, 0, 0, 736, 764, 786, 774, 775, 772,
	773, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 0, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 171, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 173,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 0, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	1158, 868, 0, 0, 474, 256, 0, 0, 0, 165,
	475, 476, 257, 477, 478, 479, 752, 166, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 786, 774, 775, 772, 773, 765, 0, 1378, 0,
	0, 0, 0, 0, 764, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 822, 768, 0,
	0, 0, 263, 264, 265, 215, 843, 806, 844, 794,
	830, 845, 0, 269, 270, 796, 795, 273, 274, 275,
	769, 821, 276, 846, 847, 221, 0, 277, 828, 0,
	811, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 871, 290,
	291, 292, 814, 812, 813, 818, 816, 815, 817, 293,
	294, 502, 295, 831, 297, 848, 849, 754, 298, 0,
	299, 0, 300, 0, 0, 832, 302, 0, 303, 304,
	0, 0, 0, 759, 305, 306, 308, 311, 307, 312,
	313, 850, 851, 781, 872, 0, 0, 0, 0, 0,
	314, 315, 316, 852, 833, 834, 0, 319, 0, 320,
	0, 0, 873, 321, 0, 322, 853, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 823, 824, 827, 875,
	0, 825, 805, 0, 0, 0, 0, 329, 331, 338,
	0, 874, 332, 854, 809, 835, 836, 837, 838, 855,
	0, 810, 0, 339, 876, 877, 340, 341, 342, 878,
	839, 840, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 856, 879, 350, 351, 880, 0, 352, 353, 0,
	0, 354, 0, 355, 756, 755, 356, 357, 358, 359,
	361, 798, 360, 881, 363, 364, 366, 365, 751, 0,
	882, 782, 826, 367, 857, 368, 369, 0, 807, 808,
	0, 0, 372, 373, 0, 0, 374, 241, 883, 375,
	884, 858, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 859, 386, 244, 387, 0, 388, 389,
	390, 391, 392, 393, 860, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 885, 409, 410, 411, 412, 760, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 171, 429,
	430, 799, 800, 801, 802, 425, 431, 432, 819, 433,
	414, 415, 434, 886, 435, 861, 803, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 841, 442, 443, 444,
	862, 0, 448, 449, 173, 450, 451, 452, 453, 454,
	309, 455, 310, 797, 457, 0, 863, 864, 865, 842,
	0, 0, 459, 460, 866, 867, 780, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 820, 470,
	0, 804, 471, 472, 473, 1158, 868, 0, 0, 474,
	256, 0, 0, 0, 165, 475, 476, 257, 477, 478,
	479, 752, 166, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 748, 749, 786, 774, 775, 772,
	773, 765, 0, 1378, 0, 0, 0, 0, 0, 764,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 1933, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 1938, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 1934, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 1935, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	254, 868, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 786, 774, 775, 772, 773, 765, 0, 761, 0,
	0, 0, 0, 0, 764, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 822, 768, 0,
	0, 0, 263, 264, 265, 215, 843, 806, 844, 794,
	830, 845, 0, 269, 270, 796, 795, 273, 274, 275,
	769, 821, 276, 846, 847, 221, 0, 277, 828, 0,
	811, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 871, 290,
	291, 292, 814, 812, 813, 818, 816, 815, 817, 293,
	294, 502, 295, 831, 297, 848, 849, 754, 298, 0,
	299, 0, 300, 0, 0, 832, 302, 0, 303, 304,
	0, 0, 0, 759, 305, 306, 308, 311, 307, 312,
	313, 850, 851, 781, 872, 0, 0, 0, 0, 0,
	314, 315, 316, 852, 833, 834, 0, 319, 0, 320,
	0, 0, 873, 321, 0, 322, 853, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 823, 824, 827, 875,
	0, 825, 805, 0, 0, 0, 0, 329, 331, 338,
	0, 874, 332, 854, 809, 835, 836, 837, 838, 855,
	0, 810, 0, 339, 876, 877, 340, 341, 342, 878,
	839, 840, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 856, 879, 350, 351, 880, 0, 352, 353, 0,
	0, 354, 0, 355, 756, 755, 356, 357, 358, 359,
	361, 798, 360, 881, 363, 364, 366, 365, 751, 2699,
	882, 782, 826, 367, 857, 368, 369, 0, 807, 808,
	0, 0, 372, 373, 0, 0, 374, 241, 883, 375,
	884, 858, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 859, 386, 244, 387, 0, 388, 389,
	390, 391, 392, 393, 860, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 885, 409, 410, 411, 412, 760, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 799, 800, 801, 802, 425, 431, 432, 819, 433,
	414, 415, 434, 886, 435, 861, 803, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 841, 442, 443, 444,
	862, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	309, 455, 310, 797, 457, 0, 863, 864, 865, 842,
	0, 0, 459, 460, 866, 867, 780, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 820, 470,
	0, 804, 471, 472, 473, 254, 868, 0, 0, 474,
	256, 0, 0, 0, 0, 475, 476, 257, 477, 478,
	479, 752, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 748, 749, 1443, 786, 774, 775,
	772, 773, 765, 761, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 822, 768, 0, 0, 0, 263, 264,
	265, 215, 843, 806, 844, 794, 830, 845, 0, 269,
	270, 796, 795, 273, 274, 275, 769, 821, 276, 846,
	847, 221, 0, 277, 828, 0, 811, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 871, 290, 291, 292, 814, 812,
	813, 818, 816, 815, 817, 293, 294, 502, 295, 831,
	297, 848, 849, 754, 298, 0, 299, 0, 300, 0,
	0, 832, 302, 0, 303, 304, 0, 0, 0, 759,
	305, 306, 308, 311, 307, 312, 313, 850, 851, 781,
	872, 0, 0, 0, 0, 0, 314, 315, 316, 852,
	833, 834, 0, 319, 0, 320, 0, 0, 873, 321,
	0, 322, 853, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 823, 824, 827, 875, 0, 825, 805, 0,
	0, 0, 1759, 329, 331, 338, 0, 874, 332, 854,
	809, 835, 836, 837, 838, 855, 0, 810, 0, 339,
	876, 877, 340, 341, 342, 878, 839, 840, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 856, 879, 350,
	351, 880, 0, 352, 353, 0, 0, 354, 0, 355,
	756, 755, 356, 357, 358, 359, 361, 798, 360, 881,
	363, 364, 366, 365, 751, 0, 882, 782, 826, 367,
	857, 368, 369, 0, 807, 808, 0, 0, 372, 373,
	0, 0, 374, 241, 883, 375, 884, 858, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 859,
	386, 244, 387, 1758, 388, 389, 390, 391, 392, 393,
	860, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 885,
	409, 410, 411, 412, 760, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 799, 800, 801,
	802, 425, 431, 432, 819, 433, 414, 415, 434, 886,
	435, 861, 803, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 841, 442, 443, 444, 862, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 309, 455, 310, 797,
	457, 0, 863, 864, 865, 842, 0, 0, 459, 460,
	866, 867, 780, 461, 462, 0, 463, 464, 0, 0,
	465, 466, 467, 469, 820, 470, 0, 804, 471, 472,
	473, 254, 868, 0, 0, 474, 256, 0, 0, 0,
	0, 475, 476, 257, 477, 478, 479, 752, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	748, 749, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 744, 764, 786, 774, 775, 772,
	773, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 0, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 746, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 0, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	254, 868, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 786, 774, 775, 772, 773, 765, 0, 761, 0,
	0, 0, 0, 0, 764, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 822, 768, 0,
	0, 0, 263, 264, 265, 215, 843, 806, 844, 794,
	830, 845, 0, 269, 270, 796, 795, 273, 274, 275,
	769, 821, 276, 846, 847, 221, 0, 277, 828, 0,
	811, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 871, 290,
	291, 292, 814, 812, 813, 818, 816, 815, 817, 293,
	294, 502, 295, 831, 297, 848, 849, 754, 298, 0,
	299, 0, 300, 0, 0, 832, 302, 0, 303, 304,
	0, 0, 0, 759, 305, 306, 308, 311, 307, 312,
	313, 850, 851, 781, 872, 0, 0, 0, 0, 0,
	314, 315, 316, 852, 833, 834, 0, 319, 0, 320,
	0, 0, 873, 321, 0, 322, 853, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 823, 824, 827, 875,
	0, 825, 805, 0, 0, 0, 0, 329, 331, 338,
	0, 874, 332, 854, 809, 835, 836, 837, 838, 855,
	0, 810, 0, 339, 876, 877, 340, 341, 342, 878,
	839, 840, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 856, 879, 350, 351, 880, 0, 352, 353, 0,
	0, 354, 0, 355, 756, 755, 356, 357, 358, 359,
	361, 798, 360, 881, 363, 364, 366, 365, 751, 0,
	882, 782, 826, 367, 857, 368, 369, 0, 807, 808,
	0, 0, 372, 373, 0, 0, 374, 241, 883, 375,
	884, 858, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 859, 386, 244, 387, 0, 388, 389,
	390, 391, 392, 393, 860, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 885, 409, 410, 411, 412, 760, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 799, 800, 801, 802, 425, 431, 432, 819, 433,
	414, 415, 434, 886, 435, 861, 803, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 841, 442, 443, 444,
	862, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	309, 455, 310, 797, 457, 0, 863, 864, 865, 842,
	0, 0, 459, 460, 866, 867, 780, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 820, 470,
	0, 804, 471, 472, 473, 254, 868, 2534, 0, 474,
	256, 0, 0, 0, 0, 475, 476, 257, 477, 478,
	479, 752, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 748, 749, 786, 774, 775, 772,
	773, 765, 0, 761, 0, 0, 0, 0, 0, 764,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 0, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 746, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 0, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	254, 868, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 786, 774, 775, 772, 773, 765, 0, 761, 0,
	0, 0, 0, 0, 764, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 822, 768, 0,
	0, 0, 263, 264, 265, 215, 843, 806, 844, 794,
	830, 845, 0, 269, 270, 796, 795, 273, 274, 275,
	769, 821, 276, 846, 847, 221, 0, 277, 828, 0,
	811, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 871, 290,
	291, 292, 814, 812, 813, 818, 816, 815, 817, 293,
	294, 502, 295, 831, 297, 848, 849, 754, 298, 0,
	299, 0, 300, 0, 0, 832, 302, 0, 303, 304,
	0, 0, 0, 759, 305, 306, 308, 311, 307, 312,
	313, 850, 851, 781, 872, 0, 0, 0, 0, 0,
	314, 315, 316, 852, 833, 834, 0, 319, 0, 320,
	0, 0, 873, 321, 0, 322, 853, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 823, 824, 827, 875,
	0, 825, 805, 0, 0, 0, 0, 329, 331, 338,
	0, 874, 332, 854, 809, 835, 836, 837, 838, 855,
	0, 810, 0, 339, 876, 877, 340, 341, 342, 878,
	839, 840, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 856, 879, 350, 351, 880, 0, 352, 353, 0,
	0, 354, 0, 355, 756, 755, 356, 357, 358, 359,
	361, 798, 360, 881, 363, 364, 366, 365, 751, 0,
	882, 782, 826, 367, 857, 368, 369, 0, 807, 808,
	0, 0, 372, 373, 0, 0, 374, 241, 883, 375,
	884, 858, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 859, 386, 244, 387, 0, 388, 389,
	390, 391, 392, 393, 860, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 885, 409, 410, 411, 412, 760, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 799, 800, 801, 802, 425, 431, 432, 819, 433,
	414, 415, 434, 886, 435, 861, 803, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 841, 442, 443, 444,
	862, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	309, 455, 310, 797, 457, 0, 863, 864, 865, 842,
	0, 0, 459, 460, 866, 867, 780, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 820, 470,
	0, 804, 471, 472, 473, 254, 868, 0, 0, 474,
	256, 0, 0, 0, 0, 475, 476, 257, 477, 478,
	479, 752, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 748, 749, 1443, 786, 774, 775,
	772, 773, 765, 761, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 822, 768, 0, 0, 0, 263, 264,
	265, 215, 843, 806, 844, 794, 830, 845, 0, 269,
	270, 796, 795, 273, 274, 275, 769, 821, 276, 846,
	847, 221, 0, 277, 828, 0, 811, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 871, 290, 291, 292, 814, 812,
	813, 818, 816, 815, 817, 293, 294, 502, 295, 831,
	297, 848, 849, 754, 298, 0, 299, 0, 300, 0,
	0, 832, 302, 0, 303, 304, 0, 0, 0, 759,
	305, 306, 308, 311, 307, 312, 313, 850, 851, 781,
	872, 0, 0, 0, 0, 0, 314, 315, 316, 852,
	833, 834, 0, 319, 0, 320, 0, 1938, 873, 321,
	0, 322, 853, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 823, 824, 827, 875, 0, 825, 805, 0,
	0, 0, 0, 329, 331, 338, 0, 874, 332, 854,
	809, 835, 836, 837, 838, 855, 0, 810, 0, 339,
	876, 877, 340, 341, 342, 878, 839, 840, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 856, 879, 350,
	351, 880, 0, 352, 353, 0, 0, 354, 0, 355,
	756, 755, 356, 357, 358, 359, 361, 798, 360, 881,
	363, 364, 366, 365, 751, 0, 882, 782, 826, 367,
	857, 368, 369, 0, 807, 808, 0, 0, 372, 373,
	0, 0, 374, 241, 883, 375, 884, 858, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 859,
	386, 244, 387, 0, 388, 389, 390, 391, 392, 393,
	860, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 885,
	409, 410, 411, 412, 760, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 799, 800, 801,
	802, 425, 431, 432, 819, 433, 414, 415, 434, 886,
	435, 861, 803, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 841, 442, 443, 444, 862, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 309, 455, 310, 797,
	457, 0, 863, 864, 865, 842, 0, 0, 459, 460,
	866, 867, 780, 461, 462, 0, 463, 464, 0, 0,
	465, 466, 467, 469, 820, 470, 0, 804, 471, 472,
	473, 254, 868, 0, 0, 474, 256, 0, 0, 0,
	0, 475, 476, 257, 477, 478, 479, 752, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	748, 749, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 1925, 764, 786, 774, 775, 772,
	773, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 0, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 0, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	254, 868, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1914, 764, 786, 774, 775, 772, 773,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 822, 768, 0, 0, 0, 263, 264, 265, 215,
	843, 806, 844, 794, 830, 845, 0, 269, 270, 796,
	795, 273, 274, 275, 769, 821, 276, 846, 847, 221,
	0, 277, 828, 0, 811, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 871, 290, 291, 292, 814, 812, 813, 818,
	816, 815, 817, 293, 294, 502, 295, 831, 297, 848,
	849, 754, 298, 0, 299, 0, 300, 0, 0, 832,
	302, 0, 303, 304, 0, 0, 0, 759, 305, 306,
	308, 311, 307, 312, 313, 850, 851, 781, 872, 0,
	0, 0, 0, 0, 314, 315, 316, 852, 833, 834,
	0, 319, 0, 320, 0, 0, 873, 321, 0, 322,
	853, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	823, 824, 827, 875, 0, 825, 805, 0, 0, 0,
	0, 329, 331, 338, 0, 874, 332, 854, 809, 835,
	836, 837, 838, 855, 0, 810, 0, 339, 876, 877,
	340, 341, 342, 878, 839, 840, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 856, 879, 350, 351, 880,
	0, 352, 353, 0, 0, 354, 0, 355, 756, 755,
	356, 357, 358, 359, 361, 798, 360, 881, 363, 364,
	366, 365, 751, 0, 882, 782, 826, 367, 857, 368,
	369, 0, 807, 808, 0, 0, 372, 373, 0, 0,
	374, 241, 883, 375, 884, 858, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 859, 386, 244,
	387, 0, 388, 389, 390, 391, 392, 393, 860, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 885, 409, 410,
	411, 412, 760, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 799, 800, 801, 802, 425,
	431, 432, 819, 433, 414, 415, 434, 886, 435, 861,
	803, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	841, 442, 443, 444, 862, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 309, 455, 310, 797, 457, 0,
	863, 864, 865, 842, 0, 0, 459, 460, 866, 867,
	780, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 820, 470, 0, 804, 471, 472, 473, 254,
	868, 0, 0, 474, 256, 0, 0, 0, 0, 475,
	476, 257, 477, 478, 479, 752, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 748, 749,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 1912, 764, 786, 774, 775, 772, 773, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	822, 768, 0, 0, 0, 263, 264, 265, 215, 843,
	806, 844, 794, 830, 845, 0, 269, 270, 796, 795,
	273, 274, 275, 769, 821, 276, 846, 847, 221, 0,
	277, 828, 0, 811, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 814, 812, 813, 818, 816,
	815, 817, 293, 294, 502, 295, 831, 297, 848, 849,
	754, 298, 0, 299, 0, 300, 0, 0, 832, 302,
	0, 303, 304, 0, 0, 0, 759, 305, 306, 308,
	311, 307, 312, 313, 850, 851, 781, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 852, 833, 834, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 853,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 823,
	824, 827, 875, 0, 825, 805, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 854, 809, 835, 836,
	837, 838, 855, 0, 810, 0, 339, 876, 877, 340,
	341, 342, 878, 839, 840, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 856, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 756, 755, 356,
	357, 358, 359, 361, 798, 360, 881, 363, 364, 366,
	365, 751, 0, 882, 782, 826, 367, 857, 368, 369,
	0, 807, 808, 0, 0, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 858, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 859, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 860, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 760, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 799, 800, 801, 802, 425, 431,
	432, 819, 433, 414, 415, 434, 886, 435, 861, 803,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 841,
	442, 443, 444, 862, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 797, 457, 0, 863,
	864, 865, 842, 0, 0, 459, 460, 866, 867, 780,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 820, 470, 0, 804, 471, 472, 473, 254, 868,
	0, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 752, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 748, 749, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 1910, 764, 786, 774, 775, 772, 773, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 822,
	768, 0, 0, 0, 263, 264, 265, 215, 843, 806,
	844, 794, 830, 845, 0, 269, 270, 796, 795, 273,
	274, 275, 769, 821, 276, 846, 847, 221, 0, 277,
	828, 0, 811, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	871, 290, 291, 292, 814, 812, 813, 818, 816, 815,
	817, 293, 294, 502, 295, 831, 297, 848, 849, 754,
	298, 0, 299, 0, 300, 0, 0, 832, 302, 0,
	303, 304, 0, 0, 0, 759, 305, 306, 308, 311,
	307, 312, 313, 850, 851, 781, 872, 0, 0, 0,
	0, 0, 314, 315, 316, 852, 833, 834, 0, 319,
	0, 320, 0, 0, 873, 321, 0, 322, 853, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 823, 824,
	827, 875, 0, 825, 805, 0, 0, 0, 0, 329,
	331, 338, 0, 874, 332, 854, 809, 835, 836, 837,
	838, 855, 0, 810, 0, 339, 876, 877, 340, 341,
	342, 878, 839, 840, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 856, 879, 350, 351, 880, 0, 352,
	353, 0, 0, 354, 0, 355, 756, 755, 356, 357,
	358, 359, 361, 798, 360, 881, 363, 364, 366, 365,
	751, 0, 882, 782, 826, 367, 857, 368, 369, 0,
	807, 808, 0, 0, 372, 373, 0, 0, 374, 241,
	883, 375, 884, 858, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 859, 386, 244, 387, 0,
	388, 389, 390, 391, 392, 393, 860, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 885, 409, 410, 411, 412,
	760, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 799, 800, 801, 802, 425, 431, 432,
	819, 433, 414, 415, 434, 886, 435, 861, 803, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 841, 442,
	443, 444, 862, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 309, 455, 310, 797, 457, 0, 863, 864,
	865, 842, 0, 0, 459, 460, 866, 867, 780, 461,
	462, 0, 463, 464, 0, 0, 465, 466, 467, 469,
	820, 470, 0, 804, 471, 472, 473, 254, 868, 0,
	0, 474, 256, 0, 0, 0, 0, 475, 476, 257,
	477, 478, 479, 752, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 748, 749, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	1907, 764, 1899, 774, 775, 772, 773, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 822, 768,
	0, 0, 0, 263, 264, 265, 215, 843, 806, 844,
	794, 830, 845, 0, 269, 270, 796, 795, 273, 274,
	275, 769, 821, 276, 846, 847, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 831, 1902, 848, 849, 754, 298,
	0, 299, 0, 300, 0, 0, 832, 302, 0, 303,
	304, 0, 0, 0, 759, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 781, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 852, 833, 834, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 1903, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 805, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 854, 809, 835, 836, 837, 838,
	855, 0, 810, 0, 339, 876, 877, 340, 341, 342,
	878, 839, 840, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 756, 755, 1904, 1901, 358,
	359, 361, 798, 360, 881, 363, 364, 366, 365, 751,
	0, 882, 782, 826, 367, 857, 368, 369, 0, 807,
	808, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 860, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 760,
	413, 0, 417, 418, 419, 420, 421, 422, 1905, 0,
	429, 430, 799, 800, 801, 802, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 861, 803, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 841, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 797, 457, 0, 863, 864, 865,
	842, 0, 0, 459, 460, 866, 867, 780, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 804, 471, 472, 473, 254, 868, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	1900, 479, 752, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 748, 749, 0, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 0, 1896,
	764, 1899, 774, 775, 772, 773, 765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 822, 768, 0,
	0, 0, 263, 264, 265, 215, 843, 806, 844, 794,
	830, 845, 0, 269, 270, 796, 795, 273, 274, 275,
	769, 821, 276, 846, 847, 221, 0, 277, 828, 0,
	811, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 871, 290,
	291, 292, 814, 812, 813, 818, 816, 815, 817, 293,
	294, 502, 295, 831, 1902, 848, 849, 754, 298, 0,
	299, 0, 300, 0, 0, 832, 302, 0, 303, 304,
	0, 0, 0, 759, 305, 306, 308, 311, 307, 312,
	313, 850, 851, 781, 872, 0, 0, 0, 0, 0,
	314, 315, 316, 852, 833, 834, 0, 319, 0, 320,
	0, 0, 873, 321, 0, 322, 853, 0, 230, 0,
	323, 324, 1903, 326, 327, 328, 823, 824, 827, 875,
	0, 825, 805, 0, 0, 0, 0, 329, 331, 338,
	0, 874, 332, 854, 809, 835, 836, 837, 838, 855,
	0, 810, 0, 339, 876, 877, 340, 341, 342, 878,
	839, 840, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 856, 879, 350, 351, 880, 0, 352, 353, 0,
	0, 354, 0, 355, 756, 755, 1904, 1901, 358, 359,
	361, 798, 360, 881, 363, 364, 366, 365, 751, 0,
	882, 782, 826, 367, 857, 368, 369, 0, 807, 808,
	0, 0, 372, 373, 0, 0, 374, 241, 883, 375,
	884, 858, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 859, 386, 244, 387, 0, 388, 389,
	390, 391, 392, 393, 860, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 885, 409, 410, 411, 412, 760, 413,
	0, 417, 418, 419, 420, 421, 422, 1905, 0, 429,
	430, 799, 800, 801, 802, 425, 431, 432, 819, 433,
	414, 415, 434, 886, 435, 861, 803, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 841, 442, 443, 444,
	862, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	309, 455, 310, 797, 457, 0, 863, 864, 865, 842,
	0, 0, 459, 460, 866, 867, 780, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 820, 470,
	0, 804, 471, 472, 473, 254, 868, 0, 0, 474,
	256, 0, 0, 0, 0, 475, 476, 257, 477, 1900,
	479, 752, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 748, 749, 786, 774, 775, 772,
	773, 765, 0, 761, 0, 0, 0, 0, 0, 764,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 768, 0, 0, 0, 263, 264, 265,
	215, 843, 806, 844, 794, 830, 845, 0, 269, 270,
	796, 795, 273, 274, 275, 769, 821, 276, 846, 847,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 831, 297,
	848, 849, 754, 298, 0, 299, 0, 300, 0, 0,
	832, 302, 0, 303, 304, 0, 0, 0, 759, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 781, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 852, 833,
	834, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 805, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 854, 809,
	835, 836, 837, 838, 855, 0, 810, 0, 339, 876,
	877, 340, 341, 342, 878, 839, 840, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 756,
	755, 356, 357, 358, 359, 361, 798, 360, 881, 363,
	364, 366, 365, 751, 0, 882, 782, 826, 367, 857,
	368, 369, 0, 807, 808, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 860,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 760, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 799, 800, 801, 802,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	861, 803, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 841, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 797, 457,
	0, 863, 864, 865, 842, 0, 0, 459, 460, 866,
	867, 780, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 804, 471, 472, 473,
	254, 868, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 748,
	749, 0, 0, 0, 0, 0, 1383, 0, 761, 0,
	0, 0, 0, 0, 764, 786, 774, 775, 772, 773,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1746, 262, 0, 0, 0,
	0, 822, 768, 0, 0, 0, 263, 264, 265, 215,
	843, 806, 844, 794, 830, 845, 0, 269, 270, 796,
	795, 273, 274, 275, 769, 821, 276, 846, 847, 221,
	0, 277, 828, 0, 811, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 871, 290, 291, 292, 814, 812, 813, 818,
	816, 815, 817, 293, 294, 502, 295, 831, 297, 848,
	849, 754, 298, 0, 299, 0, 300, 0, 0, 832,
	302, 0, 303, 304, 0, 0, 0, 759, 305, 306,
	308, 311, 307, 312, 313, 850, 851, 781, 872, 0,
	0, 0, 0, 0, 314, 315, 316, 852, 833, 834,
	0, 319, 0, 320, 0, 0, 873, 321, 0, 322,
	853, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	823, 824, 827, 875, 0, 825, 805, 0, 0, 0,
	0, 329, 331, 338, 0, 874, 332, 854, 809, 835,
	836, 837, 838, 855, 0, 810, 0, 339, 876, 877,
	340, 341, 342, 878, 839, 840, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 856, 879, 350, 351, 880,
	0, 352, 353, 0, 0, 354, 0, 355, 756, 755,
	356, 357, 358, 359, 361, 798, 360, 881, 363, 364,
	366, 365, 751, 0, 882, 782, 826, 367, 857, 368,
	369, 0, 807, 808, 0, 0, 372, 373, 0, 0,
	374, 241, 883, 375, 884, 858, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 859, 386, 244,
	387, 0, 388, 389, 390, 391, 392, 393, 860, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 885, 409, 410,
	411, 412, 760, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 799, 800, 801, 802, 425,
	431, 432, 819, 433, 414, 415, 434, 886, 435, 861,
	803, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	841, 442, 443, 444, 862, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 309, 455, 310, 797, 457, 0,
	863, 864, 865, 842, 0, 0, 459, 460, 866, 867,
	780, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 820, 470, 0, 804, 471, 472, 473, 254,
	868, 0, 0, 474, 256, 0, 0, 0, 0, 475,
	476, 257, 477, 478, 479, 752, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 748, 749,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 1083, 764, 786, 774, 775, 772, 773, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	822, 768, 0, 0, 0, 263, 264, 265, 215, 843,
	806, 844, 794, 830, 845, 0, 269, 270, 796, 795,
	273, 274, 275, 769, 821, 276, 846, 847, 221, 0,
	277, 828, 0, 811, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 814, 812, 813, 818, 816,
	815, 817, 293, 294, 502, 295, 831, 297, 848, 849,
	754, 298, 0, 299, 0, 300, 0, 0, 832, 302,
	0, 303, 304, 0, 0, 0, 759, 305, 306, 308,
	311, 307, 312, 313, 850, 851, 781, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 852, 833, 834, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 853,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1082,
	824, 827, 875, 0, 825, 805, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 854, 809, 835, 836,
	837, 838, 855, 0, 810, 0, 339, 876, 877, 340,
	341, 342, 878, 839, 840, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 856, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 756, 755, 356,
	357, 358, 359, 361, 798, 360, 881, 363, 364, 366,
	365, 751, 0, 882, 782, 826, 367, 857, 368, 369,
	0, 807, 808, 0, 0, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 858, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 859, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 860, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 760, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 799, 800, 801, 802, 425, 431,
	432, 819, 433, 414, 415, 434, 886, 435, 861, 803,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 841,
	442, 443, 444, 862, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 797, 457, 0, 863,
	864, 865, 842, 0, 0, 459, 460, 866, 867, 780,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 820, 470, 0, 804, 471, 472, 473, 254, 868,
	0, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 752, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 748, 749, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 1077, 764, 786, 774, 775, 772, 773, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 822,
	768, 0, 0, 0, 263, 264, 265, 215, 843, 806,
	844, 794, 830, 845, 0, 269, 270, 796, 795, 273,
	274, 275, 769, 821, 276, 846, 847, 221, 0, 277,
	828, 0, 811, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	871, 290, 291, 292, 814, 812, 813, 818, 816, 815,
	817, 293, 294, 502, 295, 831, 297, 848, 849, 754,
	298, 0, 299, 0, 300, 0, 0, 832, 302, 0,
	303, 304, 0, 0, 0, 759, 305, 306, 308, 311,
	307, 312, 313, 850, 851, 781, 872, 0, 0, 0,
	0, 0, 314, 315, 316, 852, 833, 834, 0, 319,
	0, 320, 0, 0, 873, 321, 0, 322, 853, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 1076, 824,
	827, 875, 0, 825, 805, 0, 0, 0, 0, 329,
	331, 338, 0, 874, 332, 854, 809, 835, 836, 837,
	838, 855, 0, 810, 0, 339, 876, 877, 340, 341,
	342, 878, 839, 840, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 856, 879, 350, 351, 880, 0, 352,
	353, 0, 0, 354, 0, 355, 756, 755, 356, 357,
	358, 359, 361, 798, 360, 881, 363, 364, 366, 365,
	751, 0, 882, 782, 826, 367, 857, 368, 369, 0,
	807, 808, 0, 0, 372, 373, 0, 0, 374, 241,
	883, 375, 884, 858, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 859, 386, 244, 387, 0,
	388, 389, 390, 391, 392, 393, 860, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 885, 409, 410, 411, 412,
	760, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 799, 800, 801, 802, 425, 431, 432,
	819, 433, 414, 415, 434, 886, 435, 861, 803, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 841, 442,
	443, 444, 862, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 309, 455, 310, 797, 457, 0, 863, 864,
	865, 842, 0, 0, 459, 460, 866, 867, 780, 461,
	462, 0, 463, 464, 0, 0, 465, 466, 467, 469,
	820, 470, 0, 804, 471, 472, 473, 254, 868, 0,
	0, 474, 256, 0, 0, 0, 0, 475, 476, 257,
	477, 478, 479, 752, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 748, 749, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	1072, 764, 786, 774, 775, 772, 773, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 822, 768,
	0, 0, 0, 263, 264, 265, 215, 843, 806, 844,
	794, 830, 845, 0, 269, 270, 796, 795, 273, 274,
	275, 769, 821, 276, 846, 847, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 831, 297, 848, 849, 754, 298,
	0, 299, 0, 300, 0, 0, 832, 302, 0, 303,
	304, 0, 0, 0, 759, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 781, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 852, 833, 834, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 805, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 854, 809, 835, 836, 837, 838,
	855, 0, 810, 0, 339, 876, 877, 340, 341, 342,
	878, 839, 840, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 756, 755, 356, 357, 358,
	359, 361, 798, 360, 881, 363, 364, 366, 365, 751,
	0, 882, 782, 826, 367, 857, 368, 369, 0, 807,
	808, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 860, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 760,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 799, 800, 801, 802, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 861, 803, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 841, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 797, 457, 0, 863, 864, 865,
	842, 0, 0, 459, 460, 866, 867, 780, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 804, 471, 472, 473, 254, 868, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 752, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 748, 749, 786, 774, 775,
	772, 773, 765, 0, 761, 0, 0, 0, 0, 0,
	764, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 822, 768, 0, 0, 0, 263, 264,
	265, 215, 843, 806, 844, 794, 830, 845, 0, 269,
	270, 796, 795, 273, 274, 275, 769, 821, 276, 846,
	847, 221, 0, 277, 828, 0, 811, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 871, 290, 291, 292, 814, 812,
	813, 818, 816, 815, 817, 293, 294, 502, 295, 831,
	297, 848, 849, 754, 298, 0, 299, 0, 300, 0,
	0, 832, 302, 0, 303, 304, 0, 0, 0, 759,
	305, 306, 308, 311, 307, 312, 313, 850, 851, 781,
	872, 0, 0, 0, 0, 0, 314, 315, 316, 852,
	833, 834, 0, 319, 0, 320, 0, 0, 873, 321,
	0, 322, 853, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 823, 824, 827, 875, 0, 825, 805, 0,
	0, 0, 0, 329, 331, 338, 0, 874, 332, 854,
	809, 835, 836, 837, 838, 855, 0, 810, 0, 339,
	876, 877, 340, 341, 342, 878, 839, 840, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 856, 879, 350,
	351, 880, 0, 352, 353, 0, 0, 354, 0, 355,
	756, 755, 356, 357, 358, 359, 361, 798, 360, 881,
	363, 364, 366, 365, 751, 0, 882, 782, 826, 367,
	857, 368, 369, 0, 807, 808, 0, 0, 372, 373,
	0, 0, 374, 241, 883, 375, 884, 858, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 859,
	386, 244, 387, 0, 388, 389, 390, 391, 392, 393,
	860, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 885,
	409, 410, 411, 412, 760, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 799, 800, 801,
	802, 425, 431, 432, 819, 433, 414, 415, 434, 886,
	435, 861, 803, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 841, 442, 443, 444, 862, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 309, 455, 310, 797,
	457, 0, 863, 864, 865, 842, 0, 0, 459, 460,
	866, 867, 780, 461, 462, 0, 463, 464, 0, 0,
	465, 466, 467, 469, 820, 470, 0, 804, 471, 472,
	473, 254, 868, 0, 0, 474, 256, 0, 0, 0,
	0, 475, 476, 257, 477, 478, 479, 752, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	748, 749, 786, 774, 775, 772, 773, 765, 0, 761,
	0, 0, 0, 0, 0, 764, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 822, 768,
	0, 0, 0, 263, 264, 265, 215, 843, 806, 844,
	794, 830, 845, 0, 269, 270, 796, 795, 273, 274,
	275, 769, 821, 276, 846, 847, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 3084, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 831, 297, 848, 849, 754, 298,
	0, 299, 0, 300, 0, 0, 832, 302, 0, 303,
	304, 0, 0, 0, 759, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 781, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 852, 833, 834, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 805, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 854, 809, 835, 836, 837, 838,
	855, 0, 810, 0, 339, 876, 877, 340, 341, 342,
	878, 839, 840, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 756, 755, 356, 357, 358,
	359, 361, 798, 360, 881, 363, 364, 366, 365, 751,
	0, 882, 782, 826, 367, 857, 368, 369, 0, 807,
	808, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 860, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 760,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 799, 800, 801, 802, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 861, 803, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 841, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 797, 457, 0, 863, 864, 865,
	842, 0, 0, 459, 460, 866, 867, 780, 461, 462,
	0, 3083, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 804, 471, 472, 473, 254, 868, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 752, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 748, 749, 786, 774, 775,
	772, 773, 765, 0, 761, 0, 0, 0, 0, 0,
	764, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 822, 768, 0, 0, 0, 263, 264,
	265, 3082, 843, 806, 844, 794, 830, 845, 0, 269,
	270, 796, 795, 273, 274, 275, 769, 821, 276, 846,
	847, 221, 0, 277, 828, 0, 811, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 871, 290, 291, 3084, 814, 812,
	813, 818, 816, 815, 817, 293, 294, 502, 295, 831,
	297, 848, 849, 754, 298, 0, 299, 0, 300, 0,
	0, 832, 302, 0, 303, 304, 0, 0, 0, 759,
	305, 306, 308, 311, 307, 312, 313, 850, 851, 781,
	872, 0, 0, 0, 0, 0, 314, 315, 316, 852,
	833, 834, 0, 319, 0, 320, 0, 0, 873, 321,
	0, 322, 853, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 823, 824, 827, 875, 0, 825, 805, 0,
	0, 0, 0, 329, 331, 338, 0, 874, 332, 854,
	809, 835, 836, 837, 838, 855, 0, 810, 0, 339,
	876, 877, 340, 341, 342, 878, 839, 840, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 856, 879, 350,
	351, 880, 0, 352, 353, 0, 0, 354, 0, 355,
	756, 755, 356, 357, 358, 359, 361, 798, 360, 881,
	363, 364, 366, 365, 751, 0, 882, 782, 826, 367,
	857, 368, 369, 0, 807, 808, 0, 0, 372, 373,
	0, 0, 374, 241, 883, 375, 884, 858, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 859,
	386, 244, 387, 0, 388, 389, 390, 391, 392, 393,
	860, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 885,
	409, 410, 411, 412, 760, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 799, 800, 801,
	802, 425, 431, 432, 819, 433, 414, 415, 434, 886,
	435, 861, 803, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 841, 442, 443, 444, 862, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 309, 455, 310, 797,
	457, 0, 863, 864, 865, 842, 0, 0, 459, 460,
	866, 867, 780, 461, 462, 0, 3083, 464, 0, 0,
	465, 466, 467, 469, 820, 470, 0, 804, 471, 472,
	473, 254, 868, 0, 0, 474, 256, 0, 0, 0,
	0, 475, 476, 257, 477, 478, 479, 752, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	748, 749, 786, 774, 775, 772, 773, 765, 0, 761,
	0, 0, 0, 0, 0, 764, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 822, 768,
	0, 0, 0, 263, 264, 265, 215, 843, 806, 844,
	794, 830, 845, 0, 269, 270, 796, 795, 273, 274,
	275, 769, 821, 276, 846, 847, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 831, 297, 848, 849, 0, 298,
	0, 299, 0, 300, 0, 0, 832, 302, 0, 303,
	304, 0, 0, 0, 759, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 781, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 852, 833, 834, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 805, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 854, 809, 835, 836, 837, 838,
	855, 0, 810, 0, 339, 876, 877, 340, 341, 342,
	878, 839, 840, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 940, 939, 356, 357, 358,
	359, 361, 798, 360, 881, 363, 364, 366, 365, 0,
	0, 882, 782, 826, 367, 857, 368, 369, 0, 807,
	808, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 860, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 760,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 799, 800, 801, 802, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 861, 803, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 841, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 797, 457, 0, 863, 864, 865,
	842, 0, 0, 459, 460, 866, 867, 780, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 804, 471, 472, 473, 254, 868, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 786, 774, 775, 772, 773, 765, 0, 0,
	1922, 0, 0, 0, 0, 1920, 1921, 0, 258, 259,
	260, 261, 0, 262, 761, 0, 0, 0, 822, 768,
	764, 0, 0, 263, 264, 265, 0, 843, 806, 844,
	794, 830, 845, 0, 269, 270, 796, 795, 273, 274,
	275, 769, 821, 276, 846, 847, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 3084, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 831, 297, 848, 849, 754, 298,
	0, 299, 0, 300, 0, 0, 832, 302, 0, 303,
	304, 0, 0, 0, 759, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 781, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 852, 833, 834, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	0, 0, 825, 805, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 854, 809, 835, 836, 837, 838,
	855, 0, 810, 0, 339, 0, 0, 340, 341, 342,
	878, 839, 840, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 756, 755, 356, 357, 358,
	359, 361, 798, 360, 881, 363, 364, 366, 365, 751,
	0, 0, 782, 826, 367, 857, 368, 369, 0, 807,
	808, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 860, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 760,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 799, 800, 801, 802, 425, 431, 432, 819,
	433, 414, 415, 434, 0, 435, 861, 803, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 841, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 797, 457, 0, 863, 864, 865,
	842, 0, 0, 459, 460, 866, 867, 780, 461, 462,
	0, 3083, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 804, 471, 472, 473, 254, 868, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 748, 749, 0, 258, 259,
	260, 261, 0, 262, 761, 0, 0, 0, 822, 0,
	764, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 821, 276, 219, 220, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 0, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 876, 877, 340, 341, 342,
	878, 343, 344, 0, 0, 345, 346, 347, 925, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 940, 939, 356, 357, 358,
	359, 361, 362, 360, 881, 363, 364, 366, 365, 0,
	0, 882, 0, 826, 367, 240, 368, 369, 0, 370,
	371, 0, 930, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 246,
	932, 0, 417, 418, 419, 420, 421, 422, 423, 171,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 862, 0, 448, 449, 173, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 866, 867, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 468, 471, 472, 473, 1158, 255, 0, 0,
	474, 256, 2312, 0, 938, 165, 475, 476, 257, 477,
	478, 479, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	822, 0, 922, 0, 1468, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 821, 276, 219, 220, 221, 0,
	277, 828, 0, 811, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 814, 812, 813, 818, 816,
	815, 817, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 850, 851, 0, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 853,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 823,
	824, 827, 875, 0, 825, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 876, 877, 340,
	341, 342, 878, 343, 344, 0, 0, 345, 346, 347,
	925, 349, 348, 0, 856, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 940, 939, 356,
	357, 358, 359, 361, 362, 360, 881, 363, 364, 366,
	365, 0, 0, 882, 0, 826, 367, 240, 368, 369,
	0, 370, 371, 0, 930, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 858, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 859, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 246, 932, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 819, 433, 414, 415, 434, 886, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 862, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 866, 867, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 820, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 921, 0, 938, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 0, 922, 0, 927, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 821, 276, 219, 220,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 0, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 876,
	877, 340, 341, 342, 878, 343, 344, 0, 0, 345,
	346, 347, 925, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 940,
	939, 356, 357, 358, 359, 361, 362, 360, 881, 363,
	364, 366, 365, 0, 0, 882, 0, 826, 367, 240,
	368, 369, 0, 370, 371, 0, 930, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 246, 932, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 866,
	867, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 0, 0, 938, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 822, 0, 922, 0, 927, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 821, 276,
	219, 220, 221, 0, 277, 828, 0, 811, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 871, 290, 291, 292, 814,
	812, 813, 818, 816, 815, 817, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 850, 851,
	0, 872, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 873,
	321, 0, 322, 853, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 823, 824, 827, 875, 0, 825, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 874, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 876, 877, 340, 341, 342, 878, 343, 344, 0,
	0, 345, 346, 347, 925, 349, 348, 0, 856, 879,
	350, 351, 880, 0, 352, 353, 0, 0, 354, 0,
	355, 940, 939, 356, 357, 358, 359, 361, 362, 360,
	881, 363, 364, 366, 365, 0, 0, 882, 0, 826,
	367, 240, 368, 369, 0, 370, 371, 0, 930, 372,
	373, 0, 0, 374, 241, 883, 375, 884, 858, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	859, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	885, 409, 410, 411, 412, 246, 932, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 819, 433, 414, 415, 434,
	886, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 862, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 866, 867, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 820, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 0, 0,
	938, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 822, 0, 922, 0,
	927, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	821, 276, 219, 220, 221, 0, 277, 828, 0, 811,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 871, 290, 291,
	292, 814, 812, 813, 818, 816, 815, 817, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	850, 851, 0, 872, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 873, 321, 0, 322, 853, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 823, 824, 827, 875, 0,
	825, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	874, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 876, 877, 340, 341, 342, 878, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	856, 879, 350, 351, 880, 0, 352, 353, 0, 0,
	354, 0, 355, 940, 939, 356, 357, 358, 359, 361,
	362, 360, 881, 363, 364, 366, 365, 0, 0, 882,
	0, 826, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 883, 375, 884,
	858, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 859, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 885, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 819, 433, 414,
	415, 434, 886, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 862,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 866, 867, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 820, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	0, 0, 938, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 822, 0,
	0, 0, 2640, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 821, 276, 219, 220, 221, 0, 277, 828,
	0, 811, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 814, 812, 813, 818, 816, 815, 817,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 850, 851, 0, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 853, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 823, 824, 827,
	875, 0, 825, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 876, 877, 340, 341, 342,
	878, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 856, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 940, 939, 356, 357, 358,
	359, 361, 362, 360, 881, 363, 364, 366, 365, 0,
	0, 882, 0, 826, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 858, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 859, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 246,
	932, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 819,
	433, 414, 415, 434, 886, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 862, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 866, 867, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 820,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 1155, 0, 961, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 1372, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 965, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 875, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 876, 877, 340,
	341, 342, 878, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 940, 939, 356,
	357, 358, 359, 361, 362, 360, 881, 363, 364, 366,
	365, 0, 0, 882, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 171, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 886, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 173, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 1158, 255,
	0, 0, 474, 256, 0, 0, 938, 165, 475, 476,
	257, 477, 478, 479, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 822, 0, 0, 0, 138, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 821, 276, 219, 220,
	221, 0, 277, 828, 0, 811, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 814, 812, 813,
	818, 816, 815, 817, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 850, 851, 0, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 853, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 823, 824, 827, 875, 0, 825, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 876,
	877, 340, 341, 342, 878, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 856, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 940,
	939, 356, 357, 358, 359, 361, 362, 360, 881, 363,
	364, 366, 365, 0, 0, 882, 0, 826, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 858, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 859, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 819, 433, 414, 415, 434, 886, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 862, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 866,
	867, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 820, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 736, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 171, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 173, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 1158, 255, 0, 0, 474, 256, 0, 0,
	0, 165, 475, 476, 257, 477, 478, 479, 0, 166,
	786, 774, 775, 772, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	138, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 843, 806, 844, 794, 830,
	845, 0, 269, 270, 796, 795, 273, 274, 275, 0,
	0, 276, 846, 847, 221, 0, 277, 222, 0, 965,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 871, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 831, 297, 848, 849, 0, 298, 0, 299,
	0, 300, 0, 0, 832, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 781, 872, 0, 0, 0, 0, 0, 314,
	315, 316, 852, 833, 834, 0, 319, 0, 320, 0,
	0, 873, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 875, 0,
	237, 805, 0, 0, 0, 0, 329, 331, 338, 0,
	874, 332, 854, 809, 835, 836, 837, 838, 855, 0,
	810, 0, 339, 876, 877, 340, 341, 342, 878, 839,
	840, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 879, 350, 351, 880, 0, 352, 353, 0, 0,
	354, 0, 355, 940, 939, 356, 357, 358, 359, 361,
	798, 360, 881, 363, 364, 366, 365, 0, 0, 882,
	782, 239, 367, 857, 368, 369, 0, 807, 808, 0,
	0, 372, 373, 0, 0, 374, 241, 883, 375, 884,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 860, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 885, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	799, 800, 801, 802, 425, 431, 432, 0, 433, 414,
	415, 434, 886, 435, 861, 803, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 841, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 797, 457, 0, 863, 864, 865, 842, 0,
	0, 459, 460, 252, 253, 780, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	804, 471, 472, 473, 254, 868, 499, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 0, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2106, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 0, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	2549, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	1238, 0, 961, 960, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 1473, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 965, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 872, 0, 0, 0, 0,
	0, 1237, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	875, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 876, 877, 340, 341, 342,
	878, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 940, 939, 356, 357, 358,
	359, 361, 362, 360, 881, 363, 364, 366, 365, 0,
	0, 882, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 1236, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 886, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 1151, 0, 961, 960, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 965, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1150,
	232, 233, 875, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 876, 877, 340,
	341, 342, 878, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 940, 939, 356,
	357, 358, 359, 361, 362, 360, 881, 363, 364, 366,
	365, 0, 0, 882, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 886, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 1147, 0, 961, 960, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 965, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 871, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 872,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 873, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1146, 232, 233, 875, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 874, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 876,
	877, 340, 341, 342, 878, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 879, 350, 351,
	880, 0, 352, 353, 0, 0, 354, 0, 355, 940,
	939, 356, 357, 358, 359, 361, 362, 360, 881, 363,
	364, 366, 365, 0, 0, 882, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 883, 375, 884, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 885, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 886, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 1108, 0, 961, 960,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 965, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 871, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 872, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 873,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1107, 232, 233, 875, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 874, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 876, 877, 340, 341, 342, 878, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 879,
	350, 351, 880, 0, 352, 353, 0, 0, 354, 0,
	355, 940, 939, 356, 357, 358, 359, 361, 362, 360,
	881, 363, 364, 366, 365, 0, 0, 882, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 883, 375, 884, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	885, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	886, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 1105, 0,
	961, 960, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 965,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 871, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 872, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 873, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1104, 232, 233, 875, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	874, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 876, 877, 340, 341, 342, 878, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 879, 350, 351, 880, 0, 352, 353, 0, 0,
	354, 0, 355, 940, 939, 356, 357, 358, 359, 361,
	362, 360, 881, 363, 364, 366, 365, 0, 0, 882,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 883, 375, 884,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 885, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 886, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	954, 0, 961, 960, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 965, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 871,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 872, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 873, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 956, 232, 233,
	875, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 874, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 876, 877, 340, 341, 342,
	878, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 879, 350, 351, 880, 0, 352, 353,
	0, 0, 354, 0, 355, 940, 939, 356, 357, 358,
	359, 361, 362, 360, 881, 363, 364, 366, 365, 0,
	0, 882, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 883,
	375, 884, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 885, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 886, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 961, 960,
	474, 256, 0, 958, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 965, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 871, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 872, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 873,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 875, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 874, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 876, 877, 340, 341, 342, 878, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 879,
	350, 351, 880, 0, 352, 353, 0, 0, 354, 0,
	355, 940, 939, 356, 357, 358, 359, 361, 362, 360,
	881, 363, 364, 366, 365, 0, 0, 882, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 883, 375, 884, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	885, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	886, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 961, 960, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 965, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 871, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 872, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 873, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 875, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 874, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 876, 877, 340,
	341, 342, 878, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 879, 350, 351, 880, 0,
	352, 353, 0, 0, 354, 0, 355, 940, 939, 356,
	357, 358, 359, 361, 362, 360, 881, 363, 364, 366,
	365, 0, 0, 882, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 883, 375, 884, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 885, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 886, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	961, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 965,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 871, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 872, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 873, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 875, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	874, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 876, 877, 340, 341, 342, 878, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 879, 350, 351, 880, 0, 352, 353, 0, 0,
	354, 0, 355, 940, 939, 356, 357, 358, 359, 361,
	362, 360, 881, 363, 364, 366, 365, 0, 0, 882,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 883, 375, 884,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 885, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 886, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	604, 0, 207, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 213, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 212, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 206, 0, 207, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 482, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 213, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 212, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	207, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 482,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	213, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 1715, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 212, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 207, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 482, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 213, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 212,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 499, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 482, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 499, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 482, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 1998, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 1995,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 2075, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 2001, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 2073, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	2072, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 2000, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	2074, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 499, 0, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 1998,
	277, 222, 0, 0, 1992, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 1995, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 2001, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1991,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	2000, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 1999, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 611, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 610, 587, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 590, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 591,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 592, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 586, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 587, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 590, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 591, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 592, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 499, 0, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	590, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 591, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 592, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 1126, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 930, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 949, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 951, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 930, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 946, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 948, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	930, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	942, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 944, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 930, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 522, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 521, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 520,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	499, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1973, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 499, 2471, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 499, 2471, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 2468, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 499, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 930, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 1735, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	1733, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 1731, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	499, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	1708, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	1666, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 1664, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 637, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	1209, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 638, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 634, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 633, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 1559, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1558, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 637, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 1209, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 638, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 634, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 633, 250, 251, 458, 0,
	0, 459, 1210, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	637, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 627, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 638, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 634, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 1177, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 633, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 1144, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1143,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 1140, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1139, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 1137, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1136, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 1134, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1133, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	1130, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 1129, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 499, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 1118, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 1116, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1115, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	1110, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 1101, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1100,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 1096, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 1092, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1094, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 969, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 971, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	966, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 0, 0,
	474, 256, 637, 0, 499, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	627, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 626, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 638, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 628, 413, 0, 417, 418, 634, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 629,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 633,
	250, 251, 458, 0, 0, 459, 631, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	0, 0, 474, 256, 617, 0, 499, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 618, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 613, 0, 499, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 0, 0, 474, 256, 602, 0,
	499, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 0, 0, 474, 256,
	544, 0, 499, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 499, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 499, 0, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 2370,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	499, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 2368, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 499, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 2357, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 391, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 499, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 502, 295, 296, 297, 223, 224, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 0, 303,
	304, 0, 0, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 358,
	359, 361, 362, 360, 0, 363, 364, 366, 365, 0,
	0, 0, 0, 239, 367, 240, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 241, 0,
	375, 0, 242, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 243, 386, 244, 387, 0, 388,
	389, 390, 391, 392, 393, 245, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 246,
	413, 0, 618, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 247, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 248, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 309, 455, 310, 456, 457, 0, 249, 250, 251,
	458, 0, 0, 459, 460, 252, 253, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 254, 255, 499, 0,
	474, 256, 0, 0, 0, 0, 475, 476, 257, 477,
	478, 479, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 1572, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 502, 295,
	296, 297, 223, 224, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 0, 303, 304, 0, 0, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 358, 359, 361, 362, 360,
	0, 363, 364, 366, 365, 0, 0, 0, 0, 239,
	367, 240, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 241, 0, 375, 0, 242, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	243, 386, 244, 387, 0, 388, 389, 390, 391, 392,
	393, 245, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 246, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 0, 414, 415, 434,
	0, 435, 247, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 248, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 309, 455, 310,
	456, 457, 0, 249, 250, 251, 458, 0, 0, 459,
	460, 252, 253, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 254, 255, 499, 0, 474, 256, 0, 0,
	0, 0, 475, 476, 257, 477, 478, 479, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 502, 295, 296, 297, 223, 224,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	0, 303, 304, 0, 0, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1563,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 358, 359, 361, 362, 360, 0, 363, 364, 366,
	365, 0, 0, 0, 0, 239, 367, 240, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	241, 0, 375, 0, 242, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 243, 386, 244, 387,
	0, 388, 389, 390, 391, 392, 393, 245, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 246, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 247, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 248, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 309, 455, 310, 456, 457, 0, 249,
	250, 251, 458, 0, 0, 459, 460, 252, 253, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 254, 255,
	499, 0, 474, 256, 0, 0, 0, 0, 475, 476,
	257, 477, 478, 479, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	502, 295, 296, 297, 223, 224, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 0, 303, 304, 0,
	0, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 358, 359, 361,
	362, 360, 0, 363, 364, 366, 365, 0, 0, 0,
	0, 239, 367, 240, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 241, 0, 375, 0,
	242, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 243, 386, 244, 387, 0, 388, 389, 390,
	391, 392, 393, 245, 904, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 246, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 247, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 248,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 309,
	455, 310, 456, 457, 0, 249, 250, 251, 458, 0,
	0, 459, 460, 252, 253, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 254, 255, 499, 0, 474, 256,
	0, 0, 0, 0, 475, 476, 257, 477, 478, 479,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 502, 295, 296, 297,
	223, 224, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 0, 303, 304, 0, 0, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 358, 359, 361, 362, 360, 0, 363,
	364, 366, 365, 0, 0, 0, 0, 239, 367, 240,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 241, 0, 375, 0, 242, 376, 377, 378,
	0, 380, 381, 382, 383, 384, 0, 385, 243, 386,
	244, 387, 0, 388, 389, 390, 0, 392, 393, 245,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 246, 0, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	247, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 248, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 309, 455, 310, 456, 457,
	0, 249, 250, 251, 458, 0, 0, 459, 460, 252,
	253, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	254, 255, 0, 0, 474, 256, 0, 0, 0, 0,
	475, 476, 257, 477, 478, 479, 1309, 1310, 0, 1342,
	1343, 1344, 1352, 1353, 1354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 1311, 0,
	0, 0, 0, 0, 0, 0, 1331, 1345, 0, 0,
	0, 0, 0, 1328, 1312, 0, 0, 1358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1359,
	0, 0, 1339, 1340, 1341, 0, 0, 0, 1334, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 1355, 1356, 0, 0, 0, 0, 0,
	0, 1326, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 1359, 0, 1347, 1339, 1340, 1341, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1355, 1356, 0, 1357,
	0, 0, 0, 0, 1326, 1327, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 0,
	0, 0, 1350, 0, 0, 1338, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 1358, 0,
	0, 0, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1350, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0,
	1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 2251, 0, 1334,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 1348, 0, 0, 1323, 1324, 1330, 1329,
	1325, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315, 1316,
	1318, 1319, 1349, 1359, 0, 0, 1339, 1340, 1341, 0,
	2250, 0, 0, 0, 0, 0, 1309, 1310, 0, 1342,
	1343, 1344, 1352, 1353, 1354, 0, 0, 1355, 1356, 0,
	0, 0, 0, 0, 1345, 1326, 1327, 0, 0, 0,
	0, 1312, 0, 0, 1358, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 1357, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 1336, 1337, 0,
	0, 0, 0, 1333, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 0, 1349, 1359,
	0, 0, 1339, 1340, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1356, 0, 0, 0, 0, 0,
	0, 1326, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1357,
	0, 0, 0, 0, 1348, 0, 0, 1323, 1324, 1330,
	1329, 1325, 1351, 1346, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 2247, 0, 0, 0, 0, 0, 1309, 1310, 0,
	1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 1358, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 1311,
	0, 0, 1350, 0, 0, 0, 0, 1331, 1345, 0,
	0, 0, 0, 0, 1328, 1312, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0,
	1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 1349,
	1359, 0, 0, 1339, 1340, 1341, 0, 2246, 0, 1334,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 1355, 1356, 0, 0, 0, 0,
	0, 0, 1326, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 1359, 0, 1347, 1339, 1340, 1341, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 1356, 0,
	1357, 0, 0, 0, 0, 1326, 1327, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353,
	1354, 0, 0, 1350, 0, 0, 1338, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	1358, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 1350, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351,
	0, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 2245, 0,
	0, 1334, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 1348, 0, 0, 1323, 1324, 1330,
	1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 0, 1349, 1359, 0, 3048, 1339, 1340,
	1341, 0, 0, 0, 0, 0, 0, 0, 1309, 1310,
	0, 1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 1355,
	1356, 0, 0, 0, 0, 0, 1345, 1326, 1327, 0,
	0, 0, 0, 1312, 0, 0, 1358, 0, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 1357, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1335, 1336,
	1337, 0, 0, 0, 0, 1333, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 0,
	1349, 1359, 0, 0, 1339, 1340, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 1356, 0, 0, 0,
	0, 0, 0, 1326, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1347, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1357, 0, 0, 0, 0, 1348, 0, 0, 1323,
	1324, 1330, 1329, 1325, 1351, 1346, 1322, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 1319, 0, 0, 0, 0, 3044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 1358, 0,
	0, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352,
	1353, 1354, 1311, 0, 1350, 0, 0, 0, 0, 0,
	1331, 1345, 0, 0, 0, 0, 0, 1328, 1312, 0,
	0, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 1348, 0, 0, 1323, 1324, 1330, 1329, 1325,
	1351, 0, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 0, 1349, 1359, 0, 2985, 1339, 1340, 1341, 0,
	0, 0, 1334, 1335, 1336, 1337, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 1355, 1356, 0,
	0, 0, 0, 0, 0, 1326, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1359, 0, 1347, 1339,
	1340, 1341, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 1356, 0, 1357, 0, 0, 0, 0, 1326, 1327,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 1342, 1343,
	1344, 1352, 1353, 1354, 0, 0, 1350, 0, 0, 1338,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 1358, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 1350,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 1323, 1324, 1330,
	1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 0, 0, 0, 0, 2984, 0, 0,
	0, 0, 0, 0, 1334, 1335, 1336, 1337, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 1348, 0, 0,
	1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 1319, 0, 1349, 1359, 0,
	2934, 1339, 1340, 1341, 0, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354,
	0, 0, 1355, 1356, 0, 0, 0, 0, 0, 1345,
	1326, 1327, 0, 0, 0, 0, 1312, 0, 0, 1358,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 1357, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 0, 0, 0, 0, 1333, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1350, 0, 1349, 1359, 0, 0, 1339, 1340, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1355, 1356,
	0, 0, 0, 0, 0, 0, 1326, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1357, 0, 0, 0, 0, 1348,
	0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 1346, 1322,
	1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 0, 0,
	0, 0, 2895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352,
	1353, 1354, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 1358, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 1342,
	1343, 1344, 1352, 1353, 1354, 1311, 0, 1350, 0, 0,
	0, 0, 0, 1331, 1345, 0, 0, 0, 0, 0,
	1328, 1312, 0, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1335, 1336, 1337, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 1348, 0, 0, 1323, 1324,
	1330, 1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1319, 0, 1349, 1359, 0, 2806, 1339,
	1340, 1341, 0, 0, 0, 1334, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	1355, 1356, 0, 0, 0, 0, 0, 0, 1326, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1359,
	0, 1347, 1339, 1340, 1341, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1356, 0, 1357, 0, 0, 0,
	0, 1326, 1327, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 1310,
	0, 1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 1350,
	0, 0, 1338, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 1358, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 1350, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 1319, 0, 0, 0, 0,
	2763, 0, 0, 0, 0, 0, 0, 1334, 1335, 1336,
	1337, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0,
	1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 0,
	1349, 1359, 0, 2762, 1339, 1340, 1341, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344,
	1352, 1353, 1354, 0, 0, 1355, 1356, 0, 0, 0,
	0, 0, 1345, 1326, 1327, 0, 0, 0, 0, 1312,
	0, 0, 1358, 0, 0, 0, 1347, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 1357, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 1336, 1337, 0, 0, 0,
	0, 1333, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 0, 1349, 1359, 0, 0,
	1339, 1340, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1356, 0, 0, 0, 0, 0, 0, 1326,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	0, 0, 1348, 0, 0, 1323, 1324, 1330, 1329, 1325,
	1351, 1346, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 0, 0, 0, 0, 2761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 1342,
	1343, 1344, 1352, 1353, 1354, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 1358, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 1311, 0,
	1350, 0, 0, 0, 0, 0, 1331, 1345, 0, 0,
	0, 0, 0, 1328, 1312, 0, 0, 1358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 1348, 0,
	0, 1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1319, 0, 1349, 1359,
	0, 2733, 1339, 1340, 1341, 0, 0, 0, 1334, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 1355, 1356, 0, 0, 0, 0, 0,
	0, 1326, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 1359, 0, 1347, 1339, 1340, 1341, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1355, 1356, 0, 1357,
	0, 0, 0, 0, 1326, 1327, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354,
	0, 0, 1350, 0, 0, 1338, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 1358,
	0, 0, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 1350, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0,
	1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 0,
	0, 0, 0, 2553, 0, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 1348, 0, 0, 1323, 1324, 1330, 1329,
	1325, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315, 1316,
	1318, 1319, 0, 1349, 1359, 0, 2526, 1339, 1340, 1341,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 1355, 1356,
	0, 0, 0, 0, 0, 1345, 1326, 1327, 0, 0,
	0, 0, 1312, 0, 0, 1358, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 1357, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 1336, 1337,
	0, 0, 0, 0, 1333, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 0, 1349,
	1359, 0, 0, 1339, 1340, 1341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1355, 1356, 0, 0, 0, 0,
	0, 0, 1326, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 1348, 0, 0, 1323, 1324,
	1330, 1329, 1325, 1351, 1346, 1322, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1319, 0, 0, 0, 0, 1845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 1310,
	0, 1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 1358, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1350, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352,
	1353, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1335, 1336,
	1337, 0, 0, 0, 0, 1311, 0, 1317, 3125, 0,
	0, 1348, 0, 1331, 1323, 1324, 1330, 1329, 1325, 1351,
	1328, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319,
	1349, 1359, 2212, 0, 1339, 1340, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 1356, 0, 0, 0,
	0, 0, 0, 1326, 1327, 0, 0, 0, 0, 0,
	0, 0, 1334, 1335, 1336, 1337, 1347, 0, 0, 0,
	0, 0, 1317, 1332, 2295, 0, 0, 2294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1357, 0, 0, 0, 1349, 1359, 0, 0, 1339,
	1340, 1341, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 1356, 0, 0, 0, 3124, 0, 0, 1326, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 0, 0, 1338, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344,
	1352, 1353, 1354, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 1345, 0, 0, 0, 0, 2187, 0, 1312,
	0, 0, 1358, 0, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1350,
	0, 0, 1348, 0, 1331, 1323, 1324, 1330, 1329, 1325,
	1351, 1328, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 1348, 0, 0,
	1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 1319, 1349, 1359, 0, 0,
	1339, 1340, 1341, 0, 1948, 0, 0, 0, 0, 0,
	1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 0,
	0, 1355, 1356, 0, 0, 0, 0, 0, 1345, 1326,
	1327, 0, 1947, 0, 0, 1312, 0, 0, 1358, 0,
	0, 0, 1347, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 1357, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 1336, 1337, 0, 0, 0, 0, 1333, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 0, 1349, 1359, 0, 0, 1339, 1340, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 1356, 0,
	0, 0, 0, 0, 0, 1326, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1357, 0, 0, 0, 0, 1348, 0,
	0, 1323, 1324, 1330, 1329, 1325, 1351, 1346, 1322, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 1358,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 1342, 1343, 1344,
	1352, 1353, 1354, 1311, 0, 0, 1350, 0, 0, 0,
	0, 1331, 1345, 0, 0, 0, 0, 0, 1328, 1312,
	0, 0, 1358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 1348, 0, 0, 1323, 1324, 1330,
	1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 1349, 1359, 0, 0, 1339, 1340, 1341,
	0, 0, 0, 1334, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 1355, 1356,
	0, 0, 0, 0, 0, 0, 1326, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 1359, 0, 1347,
	1339, 1340, 1341, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1356, 0, 1357, 0, 0, 0, 0, 1326,
	1327, 0, 0, 0, 0, 0, 0, 0, 1346, 733,
	0, 0, 1347, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 1342, 1343,
	1344, 1352, 1353, 1354, 0, 0, 0, 1350, 0, 0,
	1338, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 1358, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1350, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2530, 0, 0, 1348, 0, 0, 1323, 1324,
	1330, 1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 1336, 1337, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 1348, 2305,
	0, 1323, 1324, 1330, 1329, 1325, 1351, 0, 1322, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1319, 1349, 1359, 0,
	0, 1339, 1340, 1341, 0, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354,
	0, 0, 1355, 1356, 0, 0, 0, 0, 0, 1345,
	1326, 1327, 0, 2300, 0, 0, 1312, 0, 0, 1358,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 1357, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 0, 0, 0, 0, 1333, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1350, 0, 1349, 1359, 0, 0, 1339, 1340, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1355, 1356,
	0, 0, 0, 0, 0, 0, 1326, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1357, 0, 0, 0, 0, 1348,
	0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 1346, 1322,
	1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 1342, 1343, 1344, 1352, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	1358, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 1342, 1343,
	1344, 1352, 1353, 1354, 1311, 0, 0, 1350, 0, 0,
	0, 0, 1331, 1345, 0, 0, 0, 2244, 0, 1328,
	1312, 0, 0, 1358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 1348, 0, 0, 1323, 1324,
	1330, 1329, 1325, 1351, 0, 1322, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1319, 1349, 1359, 0, 0, 1339, 1340,
	1341, 0, 0, 0, 1334, 1335, 1336, 1337, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 1355,
	1356, 0, 0, 0, 0, 0, 0, 1326, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 1359, 0,
	1347, 1339, 1340, 1341, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1355, 1356, 0, 1357, 0, 0, 0, 0,
	1326, 1327, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 2263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 1342,
	1343, 1344, 1352, 1353, 1354, 0, 0, 0, 1350, 0,
	0, 1338, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 1358, 0, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1350, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 1323,
	1324, 1330, 1329, 1325, 1351, 0, 1322, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 1348,
	0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0, 1322,
	1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 1349, 1359,
	0, 0, 1339, 1340, 1341, 0, 0, 0, 1309, 1310,
	0, 1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1355, 1356, 0, 1345, 0, 0, 0,
	0, 1326, 1327, 1312, 0, 0, 1358, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 1331, 1357,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	1342, 1343, 1344, 1352, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 1334, 1335, 1336,
	1337, 0, 1312, 0, 0, 1358, 0, 1317, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 1342, 1343, 1344, 1352, 1353, 1354, 1311,
	1349, 1359, 1350, 0, 1339, 1340, 1341, 1331, 0, 0,
	0, 0, 0, 0, 1328, 1312, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 1355, 1356, 0, 0, 0,
	0, 0, 0, 1326, 1327, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 1347, 0, 0, 0,
	1331, 0, 0, 1332, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 1336, 1337,
	0, 1357, 0, 0, 0, 0, 1317, 0, 0, 0,
	1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351, 0,
	1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319, 1349,
	1359, 0, 0, 1339, 1340, 1341, 0, 0, 0, 1334,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 0, 1326, 1327, 0, 0, 0, 0, 0, 0,
	0, 1333, 1349, 1359, 0, 1347, 1339, 1340, 1341, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 0, 0, 1355, 1356, 0,
	0, 0, 0, 0, 0, 1326, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 1348, 0, 0, 1323, 1324, 1330, 1329, 1325,
	1351, 0, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	1319, 0, 0, 1350, 0, 0, 1338, 1637, 1622, 1627,
	1610, 1647, 1646, 0, 0, 0, 1612, 1611, 0, 0,
	0, 0, 0, 1333, 1656, 1655, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1648, 0, 1644, 1643, 0, 0,
	0, 0, 0, 0, 0, 0, 1642, 0, 0, 0,
	0, 1348, 0, 0, 1323, 1324, 1330, 1329, 1325, 1351,
	0, 1322, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 1319,
	0, 0, 0, 0, 1641, 1639, 1640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 1323, 1324, 1330,
	1329, 1325, 1351, 1621, 1322, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1319, 0, 1630, 1625, 1631, 1632, 1633, 1634,
	1635, 0, 1629, 0, 664, 0, 695, 0, 0, 0,
	0, 1653, 1654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 1614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1645, 0, 0, 0, 1623,
	1624, 0, 670, 0, 0, 0, 0, 672, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 678, 679, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 696, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1615, 1616, 1617, 1618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1636, 1619, 0, 0,
	674, 0, 0, 0, 0, 0, 668, 1658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 676, 0, 1613, 0, 0, 1649, 1650, 1651,
	1652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 682, 0, 0, 0, 0, 0, 0,
	677, 0, 1620, 0, 0, 0, 0, 1657, 0, 0,
	0, 0, 0, 681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 685, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	686, 0, 0, 0, 701, 702, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691,
}
var sqlPact = [...]int{

	4243, -1000, -33, -1000, -1000, -1000, 170, -1000, -1000, -1000,
	-1000, 169, 167, 165, -1000, 163, 162, 157, 156, 154,
	153, 151, 150, 148, 143, 134, 133, -1000, -1000, 132,
	-1000, -1000, -1000, -1000, 131, 129, 125, -1000, 124, 1618,
	31150, 123, 122, 121, 1699, 49104, 1453, 119, 118, -1000,
	117, 2938, 36210, 1066, 1567, -1000, 116, 115, 1553, 48718,
	741, 1906, 33864, 1230, 1882, 48326, 30758, 1880, 33472, 47934,
	-1000, -1000, 938, -1000, -1000, 47542, 107, 105, 102, 100,
	95, -1000, 94, 47150, 82, 79, 78, 77, 75, 73,
	72, 69, -1000, 62, 60, 56, 54, 53, 52, 51,
	50, 48, 38, 37, 36, 35, 34, 33, 32, -1000,
	58782, 31, 29, 28, -1000, 1175, 27, 26, 25, 24,
	23, -1000, -1000, 22, 21, 20, 19, 18, 13, -1000,
	96, 12, 11, 9, 7, 6, -1000, 1046, 402, 3202,
	13262, 1129, 1128, 1121, 1114, 1110, 681, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51806, 49104, 3, -76, -2,
	-1000, 2327, 680, 22872, 4243, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35818, 35426, 35034,
	29208, 46758, 46366, 10341, 10341, 811, -1000, -1000, -1000, -1000,
	-1000, -38, 32308, 49104, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 229, -1000, -1000, -1000, -1000, -1000, -1000, 19628, 392,
	19199, 267, 18770, 255, 353, -1000, -1000, -1000, 228, -1000,
	-1000, -1000, -1000, 1145, -1000, -1000, -1000, -1000, 45974, 45582,
	2010, 45190, 28806, 28404, 44798, 1745, 1744, 44406, -1000, -1000,
	44014, -1000, -1000, 2178, 1894, 1884, 34642, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43628, 43236, 42844, 42452,
	42060, 28002, 27600, 543, -1000, -1000, -1000, -1000, 24440, 542,
	-1000, -1000, -1000, -1000, -1000, -4, -1000, -5, -6, -1000,
	-7, -8, -9, -10, -13, -14, -16, -18, -1000, -20,
	-21, -1000, -23, -27, -1000, -29, -30, 3041, 1298, 1480,
	41668, 905, 1596, -1000, 1447, -26, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 532, 49104, -1000, -1000, -1000, 20043, 90,
	-1000, 531, -1000, 1917, -1000, 20043, 90, -1000, 1441, 208,
	1292, -1000, -1000, -1000, 1193, 996, -1000, -1000, 49104, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2622, 1284, 530, 41276,
	-1000, 1674, -1000, 637, 14092, -1000, 847, -1000, 14092, 223,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2136, 1108, 2549, 27198,
	1455, 2394, 2172, 2618, 1624, 2132, 2117, 2106, 2054, 2027,
	2614, 1122, 2613, 944, 760, 2612, 2013, 1995, 2582, 1410,
	756, 2608, 2605, 1968, 1913, -1000, -1000, -1000, -1000, 1005,
	-1000, -1000, -1000, -1000, -1000, -1000, 37754, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1046, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1533,
	2294, 2294, 2294, 2430, 337, 335, -1000, 96, -1000, 1279,
	-1000, 1282, -1000, -1000, -1000, 58046, -1000, -1000, 20043, 20043,
	20043, 20043, 20043, 1202, -1000, -1000, -1000, 563, -1000, 529,
	438, 11587, -1000, -1000, 2520, -1000, -1000, -1000, 352, 20043,
	-1000, 221, -1000, -1000, -1000, -1000, 528, 2572, -1000, 762,
	-1000, -1000, -1000, 646, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2002, 527, 526, -1000, 524, 523, 520, -1000, -1000,
	-1000, 519, 509, 508, 507, 506, 504, 503, 500, -1000,
	-1000, -1000, 1115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 678, -1000, 678, 678, 455, 455,
	499, 497, 456, 496, -1000, -1000, 487, 455, 486, 478,
	-1000, -1000, 477, 611, -1000, 606, 476, 475, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1375, -1000, -1000,
	1375, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 810, 50648,
	-1000, -1000, -1000, -41, 49104, -1000, 353, -41, -1000, -1000,
	472, -1000, 14507, 14507, 14507, -1000, -1000, 1439, 20043, -1000,
	3025, -1000, 4805, -222, 601, 24048, -1000, 22088, 601, 571,
	26796, -1000, 1907, -1000, -1000, 468, 220, -1000, -1000, -1000,
	-1000, -1000, -1000, 1614, 2197, 1124, -1000, 995, 2196, -1000,
	2674, 2189, 991, -1000, -1000, 657, 2184, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1370, -1000, -1000,
	1400, 2183, -103, 2066, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1511, -1000, 29594, 32308, -42, -1000, -1000, -54, -1000,
	9941, 58046, -1000, -1000, -1000, 58046, 658, -1000, -1000, 2175,
	-1000, 58046, 649, -1000, -1000, 2168, -1000, 1896, 49104, 10341,
	49104, 49104, -1000, 467, 1598, 1430, -1000, -1000, 31922, 2674,
	1594, -1000, -1000, 652, 1590, -1000, -1000, 1583, -1000, 353,
	-1000, -1000, 40884, 51420, 652, 1582, -1000, -1000, -1000, 37754,
	-1000, 49104, -1000, 49104, -1000, 936, -1000, 51034, 139, 2167,
	-1000, -1000, 139, 2166, -1000, 139, 2161, -1000, 138, 2158,
	-1000, -1000, 1259, 2144, -1000, -55, 2143, -1000, -1000, -55,
	2129, -1000, -1000, 20043, -58, -1000, -1000, -1000, 680, 30366,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40492, 29594, -1000,
	-1000, -1000, -1000, 31922, 49104, 34250, 29594, 570, 58046, -1000,
	2477, 58598, 29594, 58046, -1000, 31922, 49104, 1970, -1000, 40100,
	39708, 2371, 633, -1000, -1000, 49104, -1000, 20043, -1000, 2469,
	1657, -50, -1000, -1000, -1000, -1000, -1000, 1635, 1754, 791,
	1214, -1000, 14092, 14092, 2258, -1000, 210, 10341, -1000, -1000,
	870, 1658, -1000, -1000, -1000, -1000, 29594, 29594, -1000, 39316,
	-1000, -1000, -1000, 1225, 49104, -1000, -1000, 1963, -1000, 31536,
	49104, -1000, 49104, -1000, 49104, -1000, 49104, -1000, 49104, -1000,
	-1000, -1000, -1000, -1000, 2061, 1119, 1954, -1000, 49104, -1000,
	49104, -1000, -1000, -1000, 1631, -1000, -1000, -1000, 38930, 38538,
	38146, -1000, -1000, 1038, -1000, 867, -1000, -1000, 142, -1000,
	-1000, 1533, -1000, 1413, 1740, 18341, 1705, 20043, 96, -1000,
	-1000, 96, 96, 12833, -1000, -1000, -1000, 49104, -1000, 6333,
	58598, 10341, 835, 20043, 20043, 20043, 20043, 20043, 20043, 20043,
	20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043,
	20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043,
	20043, 20043, 20043, 20043, 20043, 20043, 20043, 20043, 1626, 20043,
	809, 20043, 20043, 20043, 20043, 1574, -1000, -1000, 1201, 375,
	1472, -1000, 2559, 2559, 2559, 58350, 58350, 421, 563, -1000,
	20043, -1000, 90, 20043, 335, 55821, 1487, -39, 11172, -1000,
	-1000, -1000, -1000, 17912, 667, 58046, 9541, 10743, -1000, 2556,
	962, 1914, 1813, 466, 645, 642, 635, 631, 501, 20043,
	20043, 20043, 20043, 20043, 20043, 20043, 20043, -1000, -1000, -1000,
	-1000, -1000, -1000, 2520, -1000, 17497, 17068, -1000, 2553, 16639,
	16210, -1000, 15781, 21288, 15352, 832, 831, 824, 817, 20043,
	12002, -1000, -50, -1000, 50648, -1000, 49104, -41, 2467, 20043,
	198, -1000, 56750, -1000, 198, 198, 464, -59, 58046, 1691,
	1686, 23264, 1670, 1255, 1255, 1255, -1000, 462, 560, 601,
	7122, 36596, 1271, 601, 601, 173, 236, 330, 6711, 3025,
	36596, -1000, -1000, 49104, 460, 10743, 10341, -46, 1148, -1000,
	33080, 2299, 2283, 2282, 917, -1000, 891, 2429, 37754, 2444,
	90, 2332, 1893, -1000, -1000, 808, 37754, 2674, -1000, 58598,
	-1000, 1692, 2421, 1016, 1031, 1016, 1016, 1041, 37754, 807,
	1171, 29594, 2331, 805, -47, 2431, 90, 2330, 1876, 800,
	-1000, -1000, 49104, 10341, 2305, 856, 596, -42, 32308, 49104,
	204, -1000, 20043, 90, 20043, 90, 879, -61, 203, 1700,
	1679, 173, -1000, 32694, 2466, 2127, 49104, 1718, -1000, 2674,
	2126, -1000, 1168, -1000, 2124, 2119, 2464, 1423, 1571, -1000,
	-1000, -1000, 1422, 1568, 804, 2116, 651, 295, 2453, 295,
	26012, -1000, 49104, -1000, 49104, -1000, -1000, 49104, -1000, 49104,
	-1000, 49104, -1000, 49104, 49104, -1000, 49104, 29594, 29594, 29594,
	-64, 5388, 30366, -66, 648, 799, -71, -1000, 329, 1404,
	713, 32694, 5144, -69, -1000, 951, -1000, -1000, -1000, 209,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 678, 457, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 456, 1115, 455, 455, 455, -1000, -1000, -1000, 611,
	-1000, 606, -1000, -1000, -1000, 678, 678, -1000, -1000, -190,
	1873, -54, 34250, 596, -1000, 596, -1000, 1951, -1000, 2343,
	632, -77, 753, -50, -1000, 1375, -1000, 1380, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2570, -1000, 2588, -1000, -1000, 2542, -43, -1000, -43,
	-1000, 10341, -1000, 49104, 1939, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49104, -1000, 49104, -1000, -1000, -1000, -1000,
	-1000, -1000, 4499, -1000, 1925, -1000, 5388, 195, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49104, 49104, 49104, -1000,
	37754, -1000, -1000, -1000, -1000, 58046, -1000, 405, -1000, -1000,
	58046, 965, 1722, -1000, 1722, -44, -1000, 56584, 1667, 49104,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 627, 1360, 1360, 885, 885, 885, 885, 2532,
	1503, 3838, 998, 4940, 4940, 4940, 4940, 4940, 4940, 4940,
	4940, 522, 435, 435, 522, 522, 522, 522, 522, 435,
	435, 435, 4940, 4940, 4940, 58350, 58208, 3571, 20043, 20043,
	796, 1197, 375, 3571, 20043, 3571, 3571, 3571, 3571, -1000,
	2083, -1000, -1000, -1000, -1000, 1870, 445, 21288, 21288, -1000,
	-1000, -1000, 11587, 20043, -1000, -1000, -1000, -1000, 438, 20043,
	-1000, 55987, -253, 321, -60, 190, 49104, 20043, 559, -74,
	-1000, 973, -1000, 20043, 189, -1000, -1000, 8, 20043, 20043,
	20043, 320, -1000, 319, -1000, 795, -1000, 793, 792, 790,
	-1000, 425, 1253, 423, 419, 20043, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57785, 53317, 53056, 52890,
	5312, 52629, 52586, -82, -83, 318, -1000, 1868, -60, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 314, -1000, 313, -84,
	-1000, -91, -1000, 309, -1000, 57742, -60, 308, 4897, -1000,
	21288, 21288, 21288, -1000, 304, -1000, 56323, -1000, 626, 625,
	624, 623, 57481, 14923, 14923, 14923, 302, 57315, 20043, -60,
	-1000, -1000, 418, -92, 651, 14507, 22480, 10341, -1000, 651,
	651, 20043, -1000, 20043, 23264, 23264, 1387, 1662, 23264, -1000,
	-1000, -1000, -1000, 36596, 411, 601, 36596, -1000, 2520, 1688,
	-1000, -1000, -1000, 49104, 353, -1000, 36596, 36596, 10341, 601,
	-1000, 301, 24832, 8, 187, 1904, 49104, 49104, 49104, -1000,
	-1000, 1565, 50262, 1564, 58598, 49104, -1000, -1000, 417, 416,
	1660, 1659, 49104, 49104, 49876, 49490, 49104, 1147, 20043, 1418,
	1612, 90, -1000, 621, 415, 49104, 986, -1000, -1000, -1000,
	-1000, -1000, 49104, -1000, -1000, 2540, -1000, 1016, -1000, -1000,
	-1000, 1016, 2674, 981, 49104, 29594, 656, 619, 49104, 1195,
	90, -1000, 618, 414, 10341, 1240, -1000, 616, 49104, 1796,
	-1000, 1471, -1000, -1000, 9141, 58046, -1000, 58046, -1000, -1000,
	-1000, 10341, 1752, 1752, 299, -45, -1000, -1000, -1000, -1000,
	-1000, -1000, 1742, 49104, 525, 49104, 90, 49104, 145, 648,
	29594, 49104, 29594, 29594, 29594, 90, 49104, 2112, 49104, 2101,
	2176, 539, 49104, 1273, 20043, 1067, -1000, 25224, 698, 49104,
	970, 144, -1000, -1000, -1000, -11, 49104, -1000, -1000, 139,
	139, 139, -1000, 138, 1259, -1000, -55, -55, -1000, -1000,
	-1000, 5388, 1864, 37368, 49104, 2500, -1000, 409, 29594, -93,
	-1000, 716, 821, 818, -1000, 58598, -1000, 562, 829, -1000,
	2531, 407, 2520, -1000, 648, 49104, 74, -1000, 653, 1546,
	-1000, 14092, 14092, -1000, 1375, -1000, -1000, 1037, -1000, 1084,
	-1000, -1000, -1000, -1000, 14092, -1000, -1000, 851, -54, -54,
	-1000, -1000, 408, -1000, 49104, -1000, -1000, -1000, -1000, 965,
	-1000, 20043, -1000, -1000, -1000, 12833, -1000, -1000, -1000, 49104,
	-221, 20043, 3571, 3571, 20043, 21288, 21288, -1000, 3571, -1000,
	-1000, -1000, -1000, -1000, 1847, 406, 20043, 58598, 5742, 5681,
	-104, 522, -1000, 20043, -1000, 8741, -106, 55559, -1000, -1000,
	546, 2201, -1000, 20043, 57054, 8341, 297, 13677, -1000, 57011,
	-53, -53, -1000, 2568, 1578, 1291, 1159, 950, 2524, -1000,
	26404, 661, 1273, 55516, 6333, 58598, 20043, 20043, -1000, 20043,
	20043, 20043, -1000, -1000, 2520, -1000, 20043, -1000, -1000, -1000,
	-1000, -1000, 1841, 20043, -1000, 6333, 58598, 21288, 21288, 21288,
	21288, 21288, 21288, 21288, 21288, 21288, 21288, 21288, 21288, 21288,
	21288, 21288, 21288, 21288, 21288, 21288, 1593, 21288, 2534, 2534,
	2534, -1000, 1883, 1841, 20043, 20043, -1000, -1000, -1000, -1000,
	58598, 296, 293, 290, -1000, 20043, -60, 5144, -1000, 1811,
	-1000, -194, -1000, 3025, -1000, -1000, 1811, 1811, -107, 58046,
	-1000, 1387, -1000, 404, 20043, 23264, -1000, 558, -1000, -109,
	-1000, 36596, -1000, 556, -247, -1000, 595, -1000, 353, -1000,
	-1000, -1000, 185, 36596, -1000, -114, -1000, 2451, 289, 10341,
	-1000, -1000, 788, 786, -1000, 2098, -1000, 1563, -1000, 708,
	-1000, 1247, 20043, 23656, 403, 401, 1181, -1000, 2097, 1259,
	2094, 1259, -1000, -1000, 641, -1000, 58046, 400, 398, -1000,
	-46, 1077, -1000, 25626, 20043, -1000, 782, -1000, -1000, -1000,
	2674, 781, -1000, -1000, 1141, 25626, -1000, -1000, -1000, 25626,
	20043, -1000, -47, 779, 25626, 2043, 648, 1838, 874, -1000,
	-1000, -1000, -1000, -1000, -1000, 1734, 32694, 49104, 394, 49104,
	393, -1000, -1000, 391, 49104, -1000, -1000, 2674, -1000, 652,
	-1000, -1000, 711, 10341, 390, 10341, 1643, 539, 29980, -1000,
	652, 1740, -1000, 58046, -1000, 970, 12417, 2286, -115, -1000,
	181, -1000, -1000, -1000, 651, 26012, 23264, 20043, 2603, -116,
	-1000, -1000, -1000, -1000, -1000, -1000, 90, -48, 389, -1000,
	594, 591, -54, 1288, 29594, 1596, 1596, -1000, 2522, -1000,
	502, 288, 2520, 285, -1000, -54, 49104, -1000, 1285, 10341,
	49104, 49104, 10341, 49104, -1000, -1000, -50, -1000, -1000, -1000,
	-1000, 49104, -1000, -1000, -1000, 1295, 55254, -1000, 2312, 10341,
	2529, 3571, 4336, 3698, 20043, 58598, 58307, -122, 20043, 20043,
	-1000, 459, 58046, -1000, -1000, -1000, -1000, -1000, -1000, 58046,
	20043, 177, -1000, 2566, 20043, 284, 283, 279, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 275, -1000, -1000, 52192,
	-1000, 20043, 270, -1000, 268, 259, 6004, 458, 55088, 54826,
	54783, 258, 58046, 1883, 58046, -1000, -1000, 593, 593, 988,
	988, 988, 988, 2534, 2769, 3230, 545, 3265, 3265, 3265,
	557, 489, 489, 3265, 3265, 3265, 1837, 1641, 388, 5904,
	-1000, -1000, 58046, 58046, 253, -1000, -1000, -1000, -60, 252,
	1804, 2417, -1000, 23264, 1804, 1804, -1000, -1000, 49104, 58046,
	-1000, -222, -1000, 2520, -1000, -1000, 1688, -1000, 7536, -1000,
	10341, -1000, -1000, 24832, -1000, 386, -1000, -25, 49104, 49104,
	49104, 2072, -1000, 3496, -1000, 54521, -123, -1000, 2388, 2388,
	20043, 173, 23656, 49104, -1000, 1134, 1726, 738, 49104, -1000,
	49104, -1000, -1000, 49104, 49104, 49104, 49104, 49104, -1000, 384,
	-124, 49104, 49104, 29594, -1000, -1000, -129, 10341, -1000, 2300,
	-1000, 29594, 816, 1195, 1783, -1000, 383, 23656, 380, 49104,
	32694, 2450, -1000, -1000, -1000, 378, 1944, 1384, 23656, 1323,
	1647, 539, 29980, -1000, 804, 970, -1000, -1000, -51, -1000,
	461, 90, 49104, 2600, 1273, -1000, -52, 58046, -1000, 588,
	-1000, 36982, 36982, 29594, 29594, -1000, 250, 2246, 2234, 436,
	-1000, -1000, 248, -1000, -54, 1654, -1000, -1000, 1208, 1465,
	-1000, -1000, -1000, -1000, -1000, 2312, 20043, 20043, 58307, -130,
	-1000, 3571, 3571, -1000, 58046, 7941, -1000, 57011, -1000, -1000,
	-1000, -1000, 1212, -1000, 54355, -1000, -1000, -1000, 20043, 20043,
	-1000, -1000, -1000, -1000, -1000, -1000, 21288, 1832, 377, 58598,
	-1000, -1000, 659, 20043, 20043, 3025, 659, 659, -131, 601,
	-1000, -1000, -1000, 2520, -25, -1000, 2596, 10341, -1000, -1000,
	-1000, 49104, -1000, 49104, -1000, 10341, 49104, 1842, 1531, -1000,
	-1000, 1656, 376, 21288, 49104, 674, -1000, 1165, 23656, 2312,
	10341, 2312, 54093, -132, -137, 1530, -1000, -1000, 1524, 20043,
	-1000, 58598, 1259, 1259, -146, -147, -1000, 776, 772, 20043,
	770, -1000, -1000, -1000, 769, -1000, 615, -55, 25626, -1000,
	-1000, 1183, 23656, -148, 23656, -149, 242, 90, 23656, -1000,
	-1000, 49104, -154, 49104, -1000, 539, 29980, -1000, 2176, -1000,
	2208, 49104, 2273, -1000, -1000, -1000, 1740, 375, -1000, -155,
	-1000, -1000, -1000, 374, 372, -1000, -1000, -56, -1000, 650,
	647, -1000, -1000, -1000, 10341, 833, -1000, 3571, 3571, -1000,
	-1000, -1000, 240, 1273, 2408, -1000, 54050, 53788, 5924, 21288,
	58598, -156, -1000, 49104, 58046, -60, -1000, -1000, -1000, 36596,
	412, -1000, -1000, 2419, -1000, -1000, -1000, 49104, 1562, -1000,
	-1000, 20043, 5904, 369, 20043, -1000, 1734, 368, -1000, -1000,
	-1000, -1000, -1000, -1000, 2388, -1000, 1024, -1000, -1000, 58046,
	2360, -1000, -1000, 367, 365, 49104, 49104, -53, 362, 361,
	25626, -1000, 49104, -161, 1165, -164, -1000, 1734, -1000, -166,
	711, -1000, 360, 29980, -1000, 1643, 869, -169, 49104, 970,
	-1000, -1000, 29594, 29594, 1654, -1000, 49104, -1000, 49104, -1000,
	49104, -1000, 1000, 20043, -1000, -1000, 5924, -172, -1000, -57,
	-1000, 2449, -1000, -1000, -1000, -1000, 2069, 53622, 1620, 49104,
	53360, 1195, 49104, 2312, 49104, 704, 10341, 1208, 1208, -1000,
	-1000, 238, 20043, 20043, -1000, 357, -1000, 1734, 1165, 1195,
	1165, 356, 23656, -1000, 1647, 914, -1000, 651, -1000, -1000,
	-177, -178, -1000, -179, -180, -1000, 235, 20873, 20873, -60,
	-1000, 49104, 355, 2009, -1000, 1303, 1125, 231, 702, -1000,
	-185, -1000, 353, -1000, 20043, -1000, -188, -1000, 697, -191,
	-1000, 694, 2566, -196, -198, 49104, 1195, 1734, -1000, 1734,
	23656, -199, -1000, 26012, -1000, 648, 648, -1000, -1000, -1000,
	-1000, -1000, 21688, 1296, 960, 56248, -1000, -1000, -1000, 49104,
	-1000, 1316, 1307, 1001, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1620, 58046, -1000, 1208, 1768, -1000, 1208, 1831, -1000,
	-1000, -201, -1000, 1195, 1195, -204, -1000, -206, -1000, -1000,
	2484, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2216, -1000,
	724, 1755, 1755, 1303, -1000, 349, -1000, 344, 1224, -1000,
	-1000, 1165, -1000, 20458, -1000, 2504, -1000, -1000, 1668, -1000,
	-1000, 20043, 20043, -1000, -1000, -1000, 1734, -1000, -1000, -1000,
	-1000, -207, -210, 1195, 1195, 763, -1000, -1000, 343, 20043,
	-239, 1195, -1000,
}
var sqlPgo = [...]int{

	0, 3164, 3161, 1927, 3160, 2582, 3157, 3156, 3154, 3153,
	3151, 2517, 3150, 3148, 3146, 3144, 3143, 3142, 3141, 3140,
	3137, 3134, 3133, 3132, 3131, 3129, 3128, 3127, 3125, 3123,
	3122, 3120, 2470, 3118, 2461, 3100, 3098, 3095, 3094, 3093,
	3092, 3077, 3076, 24, 3075, 3064, 3060, 3055, 2437, 3054,
	3050, 2428, 3049, 3048, 2426, 3045, 3043, 3026, 2413, 2371,
	3023, 3021, 2353, 3020, 3019, 2330, 3015, 2309, 3002, 3001,
	2278, 2987, 94, 114, 2982, 2271, 2980, 2978, 2269, 2246,
	2233, 2965, 2223, 2963, 2962, 2200, 2148, 2961, 118, 2959,
	2958, 2957, 2955, 2126, 2120, 2951, 2945, 2944, 181, 2936,
	2064, 2935, 2934, 2933, 2930, 2928, 2924, 2921, 2916, 2914,
	2913, 2912, 2909, 2906, 2905, 2903, 2898, 2896, 2895, 2894,
	2889, 2888, 2887, 2884, 2882, 2881, 2879, 179, 108, 2875,
	2872, 2043, 1941, 2871, 2870, 43, 49, 25, 78, 145,
	129, 183, 4273, 161, 2869, 2864, 2859, 2855, 2853, 48,
	113, 122, 104, 106, 152, 2850, 2847, 54, 42, 28,
	19, 77, 2844, 2843, 2841, 1828, 82, 2840, 2839, 171,
	151, 2838, 222, 2836, 33, 75, 52, 91, 571, 50,
	2835, 92, 20, 2830, 120, 215, 2828, 68, 40, 31,
	3405, 115, 72, 110, 197, 178, 146, 143, 112, 208,
	2825, 165, 71, 139, 2824, 2823, 2822, 64, 134, 12,
	2, 136, 7, 2819, 9, 2817, 5, 2814, 2813, 2809,
	2808, 17, 105, 37, 38, 2807, 18, 559, 127, 2804,
	150, 2803, 73, 2801, 168, 170, 346, 158, 2800, 79,
	14, 81, 2799, 2798, 93, 162, 2793, 27, 123, 80,
	83, 185, 148, 90, 155, 153, 2791, 2790, 2789, 124,
	2787, 133, 98, 2786, 2785, 85, 30, 2782, 55, 156,
	32, 2781, 2777, 101, 2776, 147, 2774, 2772, 2771, 176,
	102, 125, 16, 45, 89, 8, 159, 97, 65, 57,
	2770, 1, 1472, 111, 35, 2769, 107, 59, 39, 61,
	99, 163, 36, 2767, 2765, 1751, 2763, 2752, 2751, 128,
	2750, 2748, 2737, 86, 44, 88, 2735, 100, 47, 154,
	172, 51, 149, 132, 173, 121, 2730, 131, 95, 2729,
	135, 206, 58, 2727, 1960, 2725, 130, 2722, 2721, 2716,
	2711, 1376, 2710, 2709, 2708, 333, 2704, 96, 2702, 144,
	137, 109, 234, 103, 164, 157, 1490, 2701, 138, 26,
	2700, 2302, 22, 0, 3180, 2992, 2698, 141, 87, 2697,
	2695, 2691, 2690, 29, 10, 4, 6, 13, 11, 785,
	634, 2688, 2685, 140, 74, 116, 2683, 174, 160, 2682,
	2670, 2660, 56, 2659, 21, 2648, 15, 2647, 2646, 23,
	3, 2643, 2641, 193, 2640, 2639, 2638, 2445, 2637, 169,
	2635, 2633, 2632, 2628, 1973, 2626, 2625, 34, 62, 126,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 409, 409, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	408, 408, 153, 153, 152, 148, 148, 411, 411, 154,
	154, 154, 156, 156, 32, 32, 86, 86, 86, 139,
	139, 138, 138, 138, 138, 79, 79, 79, 79, 79,
	74, 74, 361, 361, 362, 362, 134, 134, 135, 135,
	135, 135, 136, 136, 137, 137, 137, 46, 34, 34,
	34, 34, 34, 34, 34, 35, 35, 35, 35, 36,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 37,
	37, 44, 44, 128, 128, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 58, 58, 56,
	329, 329, 59, 59, 60, 60, 60, 60, 60, 60,
	61, 61, 61, 61, 61, 61, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 68, 68, 68, 69,
	69, 69, 66, 66, 66, 64, 64, 64, 63, 63,
	63, 67, 67, 67, 65, 65, 65, 235, 235, 70,
	70, 70, 70, 70, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	73, 73, 73, 73, 73, 73, 73, 73, 331, 331,
	71, 71, 303, 303, 75, 75, 260, 260, 76, 76,
	76, 76, 76, 77, 77, 77, 77, 87, 87, 87,
	87, 407, 407, 228, 228, 169, 169, 169, 169, 82,
	82, 82, 82, 83, 83, 83, 84, 84, 133, 133,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	38, 38, 38, 39, 39, 40, 40, 41, 41, 42,
	42, 43, 43, 43, 43, 43, 94, 94, 94, 96,
	93, 93, 93, 95, 95, 95, 95, 97, 97, 98,
	98, 98, 98, 98, 98, 99, 99, 355, 355, 238,
	238, 353, 353, 354, 354, 205, 205, 205, 205, 205,
	206, 206, 206, 360, 360, 360, 360, 360, 360, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	118, 118, 118, 127, 127, 127, 127, 127, 127, 127,
	120, 120, 120, 111, 111, 101, 101, 101, 101, 107,
	107, 107, 107, 107, 102, 102, 108, 108, 110, 110,
	112, 112, 112, 112, 112, 112, 103, 103, 103, 103,
	114, 114, 114, 114, 113, 113, 123, 123, 123, 123,
	123, 123, 123, 316, 316, 119, 119, 119, 119, 122,
	122, 122, 122, 117, 117, 117, 121, 121, 124, 124,
	124, 124, 104, 104, 105, 105, 106, 106, 125, 125,
	116, 116, 126, 126, 126, 126, 126, 126, 126, 115,
	115, 115, 410, 410, 109, 405, 405, 403, 403, 403,
	403, 403, 403, 403, 404, 404, 406, 406, 80, 80,
	80, 52, 52, 53, 53, 207, 207, 208, 208, 284,
	284, 284, 284, 209, 209, 155, 155, 155, 212, 213,
	213, 210, 210, 211, 211, 211, 215, 215, 214, 217,
	217, 216, 283, 371, 371, 372, 372, 372, 372, 372,
	372, 372, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 369, 369, 369, 370, 367, 367, 368, 368,
	368, 368, 412, 412, 282, 282, 221, 221, 374, 374,
	374, 374, 375, 375, 375, 375, 375, 378, 377, 376,
	376, 376, 376, 376, 312, 312, 312, 57, 57, 57,
	249, 249, 248, 248, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 130, 130, 54,
	54, 54, 161, 161, 51, 51, 51, 55, 55, 50,
	50, 50, 50, 50, 266, 266, 266, 264, 264, 226,
	226, 318, 318, 318, 173, 173, 174, 174, 149, 149,
	149, 20, 22, 22, 16, 16, 16, 16, 16, 16,
	29, 29, 30, 30, 26, 26, 265, 265, 267, 267,
	81, 81, 85, 85, 85, 91, 91, 129, 129, 129,
	129, 129, 129, 129, 33, 33, 33, 33, 45, 45,
	45, 45, 89, 415, 415, 415, 90, 90, 414, 414,
	168, 168, 168, 168, 170, 170, 279, 279, 280, 280,
	416, 416, 281, 281, 281, 163, 162, 164, 164, 49,
	49, 49, 157, 157, 158, 158, 159, 159, 160, 160,
	417, 417, 78, 78, 78, 132, 132, 201, 201, 275,
	275, 275, 222, 222, 179, 179, 278, 278, 276, 276,
	276, 247, 247, 247, 131, 131, 231, 231, 240, 240,
	241, 241, 326, 326, 242, 88, 88, 142, 142, 140,
	140, 140, 140, 140, 140, 141, 141, 141, 143, 143,
	143, 143, 143, 143, 143, 146, 146, 146, 146, 147,
	147, 147, 145, 145, 385, 385, 385, 387, 387, 388,
	384, 384, 386, 386, 413, 413, 251, 251, 251, 219,
	220, 218, 218, 418, 418, 224, 224, 223, 225, 225,
	317, 317, 317, 245, 245, 245, 245, 270, 270, 268,
	268, 269, 269, 271, 271, 272, 272, 272, 273, 273,
	274, 274, 244, 244, 299, 299, 144, 144, 144, 230,
	230, 230, 232, 232, 289, 289, 289, 290, 290, 288,
	288, 288, 288, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 320, 320, 233, 233, 321, 277, 277, 401,
	401, 401, 402, 402, 315, 315, 322, 322, 322, 322,
	322, 322, 313, 313, 314, 314, 327, 328, 328, 254,
	254, 254, 254, 252, 252, 253, 253, 323, 323, 323,
	323, 246, 246, 324, 324, 324, 285, 285, 332, 332,
	332, 347, 347, 229, 229, 229, 342, 342, 333, 333,
	333, 333, 333, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 336, 336, 336, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 346, 346, 346, 346,
	346, 337, 337, 343, 344, 338, 339, 345, 345, 345,
	345, 349, 349, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 341, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 262, 262, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 293,
	293, 293, 293, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 379, 379, 379, 379,
	379, 379, 379, 379, 382, 382, 383, 383, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 389, 389, 390,
	390, 392, 392, 393, 393, 394, 395, 395, 395, 396,
	397, 397, 391, 391, 398, 398, 398, 399, 399, 400,
	400, 400, 400, 400, 305, 305, 311, 311, 311, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 171, 171, 171, 171, 171,
	237, 237, 236, 236, 302, 302, 300, 300, 304, 304,
	255, 255, 348, 348, 348, 348, 348, 348, 348, 256,
	256, 256, 263, 257, 257, 258, 258, 258, 258, 258,
	296, 297, 259, 259, 259, 298, 298, 306, 310, 310,
	309, 308, 308, 307, 307, 286, 286, 287, 287, 243,
	243, 419, 419, 239, 239, 325, 325, 325, 325, 203,
	203, 234, 234, 202, 202, 196, 196, 197, 197, 197,
	197, 227, 227, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 350, 350, 350, 351, 352, 301,
	189, 188, 176, 177, 187, 186, 185, 175, 178, 182,
	183, 184, 180, 181, 192, 191, 190, 330, 198, 198,
	199, 199, 199, 200, 200, 200, 200, 172, 172, 193,
	193, 194, 195, 195, 165, 165, 165, 166, 166, 167,
	167, 359, 359, 357, 357, 357, 358, 358, 358, 358,
	356, 356, 356, 356, 356, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	1, 1, 1, 1, 1, 5, 8, 12, 12, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 7, 3, 6,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 6, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	5, 6, 5, 1, 0, 2, 3, 3, 3, 6,
	4, 2, 3, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 2, 3,
	2, 3, 7, 7, 8, 10, 7, 4, 5, 5,
	5, 3, 1, 1, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 6, 3, 13,
	16, 9, 12, 4, 2, 2, 0, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 3, 4, 1, 5, 3,
	4, 5, 1, 5, 1, 3, 2, 0, 3, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 2, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 2, 2, 1, 5, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 429, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 51, 78, 66, -54, -51, -48,
	-58, 80, 101, -386, 105, -62, -65, -67, 109, 117,
	122, 123, 147, 156, 260, 269, 291, 293, 295, 304,
	-40, -39, 118, -140, -142, 289, -83, -84, -93, -94,
	-95, -96, -133, 322, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	325, -33, -45, -90, -89, 370, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-385, -63, -64, -66, -68, -69, -143, -141, 426, 290,
	380, 37, 334, 67, 113, 299, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 397, 405, -146, -144, -145,
	-147, 311, 388, 347, 430, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 2, 347, 391, 312,
	381, 94, 169, 274, 258, -403, 2, 4, -365, -363,
	-197, -196, 347, 94, 30, 38, 39, 41, 44, 56,
	57, 58, 61, 98, 99, 116, 124, 125, 136, 149,
	151, 159, 160, 161, 176, 182, 184, 164, 204, 235,
	237, 250, 254, 266, 268, 277, 301, 328, 343, 359,
	360, 361, 367, 368, 388, 389, 393, 400, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 52, 55, 60, 65, 66,
	67, 68, 69, 74, 71, 72, 73, 76, 78, 79,
	82, 83, 84, 92, 93, 95, 96, 97, 101, 103,
	105, 108, 109, 111, 112, 117, 118, 121, 119, 353,
	355, 120, 122, 123, 133, 134, 135, 137, 138, 140,
	142, 146, 148, 153, 154, 155, 156, 157, 158, 170,
	165, 171, 175, 178, 177, 179, 180, 181, 172, 186,
	189, 190, 191, 193, 194, 197, 198, 199, 202, 201,
	206, 207, 210, 211, 214, 216, 219, 220, 221, 222,
	225, 223, 224, 227, 228, 230, 229, 236, 238, 239,
	241, 242, 245, 246, 249, 252, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 267, 269, 271, 272,
	273, 274, 275, 276, 278, 279, 281, 282, 283, 284,
	285, 289, 287, 288, 290, 291, 292, 293, 295, 297,
	298, 299, 300, 302, 323, 324, 336, 304, 305, 306,
	307, 308, 309, 310, 314, 318, 315, 316, 317, 312,
	313, 319, 320, 322, 325, 327, 329, 330, 333, 334,
	335, 337, 340, 341, 342, 338, 339, 332, 345, 346,
	348, 349, 350, 351, 352, 354, 356, 357, 362, 365,
	366, 370, 371, 373, 374, 377, 378, 379, 384, 380,
	382, 385, 386, 387, 392, 398, 399, 401, 402, 403,
	-195, -165, 419, -194, 429, 429, 429, 2, 190, 191,
	273, 272, 319, 320, -190, -193, -194, -195, -165, 4,
	-363, -365, 94, 243, 429, 429, 429, 2, 347, 335,
	55, 312, 381, 297, 391, -264, 186, 94, 376, -165,
	269, 24, 2, 103, 175, 379, 378, 24, 265, 313,
	349, 351, 2, 429, 429, 2, 391, 312, 347, 169,
	94, 381, 297, -184, 2, -165, -73, 2, 426, 27,
	-72, -5, -48, -58, -62, -75, -70, -11, -32, -34,
	-54, -51, -59, -65, -67, -79, -78, -80, -82, -86,
	-85, -88, -93, -94, -100, -131, -132, 80, 25, 109,
	322, 118, 185, 2, -407, -228, 2, 24, -169, -165,
	80, 147, 311, -139, 347, 2, 221, 263, 190, 191,
	2, -184, 2, -403, 2, 190, 191, 2, -407, -228,
	23, 2, -165, 2, 308, 325, -170, 2, 304, -165,
	429, 429, 429, 429, 429, 429, 211, 60, 301, 319,
	-98, 366, -97, 359, 306, -99, -355, 2, 225, -165,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 2, -127, 319, 335, 154, 36,
	60, 24, 65, 95, 148, 169, 170, 198, 75, 76,
	272, 211, 191, -316, 120, 320, 348, 307, 345, 366,
	80, 382, 298, -410, 119, 4, 94, 225, 321, 359,
	69, 352, 353, 429, 429, 429, -413, 2, 347, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	-141, -143, -142, 429, 429, 429, 429, 429, -223, -224,
	375, 183, 115, 248, -140, -142, 2, -385, -127, 319,
	2, 60, 24, -353, 2, -291, 243, -293, 417, 418,
	412, 231, 404, -305, 100, 218, 217, -295, -306, 116,
	301, 426, -200, -294, 432, 9, -382, -142, 31, 53,
	-198, -165, 7, 8, 5, 6, -172, -334, -301, -341,
	369, 126, 234, -379, -380, -199, 4, -363, -357, -335,
	-344, -339, -340, -342, 42, 49, 48, 356, 224, 314,
	315, 316, 317, 329, 384, 165, 40, 241, 242, 177,
	184, 63, 86, 87, 85, 90, 89, 91, 88, 321,
	381, 54, 30, 159, 160, 164, 235, 161, 61, -381,
	43, 96, 108, 137, 138, 178, 179, 180, 181, 193,
	194, 339, 362, 39, 41, 44, 56, 57, 98, 99,
	124, 125, 136, 149, 176, 182, 204, 237, 254, 266,
	277, 328, 343, 359, 360, 361, 367, 368, 389, -364,
	-345, 81, 127, 145, 174, 162, 187, 188, 192, 205,
	208, 226, 233, 251, 253, 296, 326, -414, 2, 366,
	366, 2, -414, 2, -414, 2, -168, 2, 366, 363,
	-415, 366, 400, -387, 278, -388, -184, -387, 429, 429,
	431, 429, -218, -219, -220, 2, 24, 106, 426, 2,
	-319, 2, 424, -323, -142, 200, -322, 426, -320, -190,
	244, -383, 302, -379, -380, -172, -165, -199, 4, 218,
	217, -3, 2, -323, 159, -190, 2, -323, 159, 2,
	-191, 159, -323, -193, 2, -361, 159, -359, 9, -358,
	5, 4, -363, -365, -364, 63, 2, -175, -165, 2,
	-202, 159, -190, -187, -356, 4, -363, -365, -364, -366,
	24, 26, 27, 28, 29, 31, 32, 33, 34, 45,
	53, 54, 59, 62, 64, 75, 80, 85, 86, 88,
	87, 89, 90, 91, 100, 102, 104, 106, 107, 110,
	113, 115, 126, 128, 141, 143, 144, 147, 150, 152,
	163, 169, 173, 183, 185, 200, 203, 209, 212, 213,
	231, 232, 234, 240, 243, 244, 247, 248, 264, 270,
	280, 294, 311, 321, 331, 344, 347, 358, 363, 364,
	369, 375, 376, 381, 383, 390, 391, 394, 395, 396,
	397, -188, -356, 363, 431, -234, -196, -197, -227, -165,
	428, -291, 2, -88, 2, -291, 159, 2, -88, 159,
	2, -291, 159, 2, -88, 159, 2, -221, 426, 428,
	347, 64, 2, -190, 159, -180, 2, -165, 141, -191,
	159, 2, -193, -361, 159, 2, -361, 159, 2, -192,
	2, -190, 169, 169, -175, 159, 2, -165, 24, 144,
	2, 185, 2, 185, 2, -324, 2, -323, -235, 159,
	2, -190, -235, 159, 2, -235, 159, 2, -203, 159,
	2, -202, -175, 159, 2, -362, 159, 2, -361, -362,
	159, 2, -260, 426, -331, 2, -330, -358, 388, 426,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 319, -138, -139,
	82, 222, 262, 243, 363, 431, 426, -190, -291, -88,
	-303, 426, 144, -291, -88, 243, 144, 245, 2, 94,
	347, 403, 24, -165, 2, 323, 2, 426, -98, 58,
	366, -280, 2, -281, -162, -163, -164, 189, 271, 276,
	403, -353, 363, 409, 144, -353, -238, 428, -127, 2,
	141, 383, 2, 7, 2, -361, 275, 133, 2, 323,
	2, 272, 320, 60, 144, 2, 2, -405, 2, 243,
	144, 2, 144, 2, 144, 2, 144, 2, 144, 2,
	2, 272, 320, 2, 365, 199, 365, 2, 144, 2,
	144, 2, 5, 2, 189, 271, 336, 2, 347, 391,
	312, 2, 2, 144, 2, 144, 403, 2, -246, -323,
	-223, -224, -245, -268, -269, 209, 128, 240, -251, 24,
	106, -251, -251, 47, 427, 427, -127, 323, 2, 10,
	11, 62, 35, 417, 418, 419, 420, 139, 421, 422,
	415, 416, 414, 407, 408, 411, 195, 196, 77, 410,
	409, 70, 215, 303, 129, 130, 131, 132, 286, 166,
	167, 168, 13, 14, 15, 28, 247, 208, 404, 162,
	326, 412, 16, 17, 18, 187, 188, 233, 38, 163,
	-171, -204, -291, -291, -291, -291, -291, 253, -243, -286,
	424, -142, 426, 426, -142, -291, -305, -236, 426, -352,
	7, -142, -300, 424, -307, -291, 428, 426, 5, 426,
	5, -389, 398, 141, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 268, -349, 392,
	-349, -349, -336, 426, -336, 426, 426, -337, 426, 426,
	426, -336, 426, 426, 426, 399, 405, 399, 405, 426,
	426, -279, -280, -279, 363, -170, 431, -387, -221, 426,
	-239, -325, -291, 419, -239, -239, 243, -236, -291, 81,
	-254, 192, 226, 145, 205, 296, 174, -352, -73, -288,
	432, -315, 405, -142, -320, -165, -142, -322, 426, -319,
	-315, 419, -190, 426, 144, 426, 428, -151, 287, -150,
	22, 25, 109, 386, 121, -211, 171, 258, 116, 332,
	-409, 118, 305, 354, 355, 287, 116, -248, -250, 32,
	92, 228, 255, 50, 157, 217, 218, 334, 116, 287,
	397, 116, 118, 287, -153, 332, -409, 118, 305, 287,
	-152, -211, 116, 432, 118, 238, -361, -234, 431, 431,
	-356, 419, 116, 116, 116, 116, 144, -227, -356, -190,
	-198, -165, -199, 426, -221, 231, 243, -403, -249, -248,
	231, -161, -384, 397, 231, 231, -221, -177, 159, 2,
	-166, -165, -177, 159, -384, 231, -324, -201, -190, -201,
	322, -184, 32, -154, 431, 52, 292, 116, -154, 116,
	-154, 116, -154, 431, 116, -154, 116, 431, 116, 116,
	-236, 427, 431, -331, -361, -403, -227, -169, -361, 144,
	80, 426, 32, -302, -332, -333, -334, -343, -338, -341,
	42, 49, 48, 356, 224, 314, 315, 316, 317, 329,
	384, 165, 40, 241, 242, 177, 4, 41, -345, 184,
	176, 178, 179, 180, 181, 182, 328, 39, 277, 137,
	138, 136, 108, 99, 98, 237, 44, 43, 96, 359,
	360, 361, 362, 193, 194, 57, 56, 389, 339, -362,
	-403, -227, 141, -175, 2, -190, 2, 71, 72, 403,
	-355, -236, 32, -280, 2, -416, 431, 207, -206, 214,
	230, 153, 244, 401, -360, 5, 4, -301, -312, 100,
	211, -341, 8, 418, -350, 7, 417, -354, -353, -354,
	84, 428, -356, 347, 193, -361, -361, -355, 24, 324,
	2, -190, -406, 141, -404, 297, -403, -190, -190, -190,
	-190, -190, 141, 2, 365, 2, 141, -165, -165, 207,
	-190, 2, -192, 2, -191, 2, 347, 169, 347, -154,
	431, -245, -269, -268, -271, -291, 24, -274, 135, 227,
	-291, -293, -141, -141, -141, -225, -317, -291, 270, 169,
	-355, -347, -332, -346, 282, 283, 281, 285, 284, -332,
	-189, -356, 359, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, 208, 162,
	326, 38, 163, -291, 363, -291, -291, -291, -291, 223,
	231, 234, 369, 126, 377, 106, 238, -419, 344, 34,
	-298, -142, 426, -311, 29, 331, 24, -305, 301, 426,
	-286, -291, -287, -237, -236, 427, 32, 431, -237, -304,
	-300, -310, -309, 394, -356, 419, 427, -236, 390, 24,
	106, 419, 2, 7, -261, 402, 220, 97, 155, 219,
	-262, 310, -390, 134, 150, 426, 427, 2, 427, 2,
	427, 2, 427, 2, 427, 2, -291, -291, -291, -291,
	-291, -291, -291, -236, -352, -255, 2, -348, -236, 4,
	402, 220, 97, 155, 219, 310, -255, 2, 7, -236,
	2, -236, 2, -256, 2, -291, -236, -257, -292, -293,
	417, 418, 412, -305, -258, 2, -291, -237, 359, 359,
	359, 359, -291, 45, 203, 364, -259, -291, 144, -236,
	-170, -388, 32, -236, -230, 431, 144, 32, 4, -230,
	-230, 426, 427, 431, 192, 192, -319, -254, 192, -252,
	251, -252, -252, -401, 426, 425, -315, -176, 424, 433,
	-356, -314, -313, 32, -184, 249, -315, -315, 428, 427,
	-314, -190, 426, -236, -356, 431, 363, -265, 75, 64,
	-283, 159, 64, -367, -178, 75, -368, -165, 59, 376,
	270, 143, -265, 75, -265, 75, 75, 322, 335, 47,
	-323, 35, -88, 73, 144, 363, -323, -250, -332, 92,
	217, 218, 47, -351, -350, 418, -351, 47, -351, -351,
	-351, 397, -191, -323, 363, 259, -361, 73, 363, 431,
	35, -88, 73, 144, 363, -202, -176, 73, 347, -328,
	-327, 406, -196, -165, 428, -291, -88, -291, -88, 337,
	427, 428, 187, 187, -207, -208, -165, -284, -283, -369,
	-370, -367, 186, 169, 376, 127, 32, 116, -227, -329,
	185, 116, 259, 116, 116, 32, 243, 231, 243, 231,
	-157, 350, 116, -285, 395, -275, -88, 426, 100, 32,
	-275, -240, -241, -326, -242, -178, 426, -184, -190, -235,
	-235, -235, -202, -203, -175, -361, -362, -362, 427, -73,
	-330, 427, -137, 397, 363, 397, 427, -139, 383, -208,
	-72, 25, 80, 109, 427, 431, -229, 31, 424, -261,
	426, -349, 426, -137, -327, 144, -228, -328, -328, 141,
	72, 409, 363, 427, 366, -281, -205, 276, 330, 288,
	318, 8, 7, 7, 431, -356, -190, 141, -227, -227,
	319, -73, 141, -73, 428, -190, -202, -190, -323, -272,
	-350, 426, -273, 301, 302, 431, -149, 33, 104, 197,
	-190, 403, -291, -291, 363, -419, 344, -298, -291, 223,
	234, 369, 126, 377, 106, 238, 144, 426, -292, -292,
	-236, -291, 425, 435, 427, 428, -227, -291, 425, 425,
	431, -308, -309, 110, -291, 428, -418, 431, -223, -291,
	-236, -236, 427, 427, 363, 363, 363, 363, 426, -395,
	252, 426, 426, -291, 32, 431, 431, 431, 427, 431,
	431, 431, 427, 427, 431, 427, 144, 427, 427, 427,
	427, 427, -263, 264, 427, 10, 11, 417, 418, 419,
	420, 139, 421, 422, 415, 416, 414, 407, 408, 409,
	70, 215, 303, 13, 14, 15, 187, 163, -292, -292,
	-292, 427, -296, -297, 144, 141, 403, 403, 403, 403,
	32, -259, -259, -259, 427, 144, -236, 426, 427, -285,
	-325, -232, 2, -319, -186, -356, -285, -285, -236, -291,
	-319, -319, -253, 383, 243, 192, -319, -313, 427, -402,
	-352, -315, -314, -352, -290, -289, 142, 229, -184, -221,
	-314, -314, -356, -315, 427, -233, -321, -383, -418, 428,
	-150, -190, -178, -185, -165, 231, -283, 159, -156, 231,
	-332, -185, 426, 426, 197, 197, -178, -185, 159, -178,
	159, -185, -185, -408, 276, 239, -291, 210, 274, 232,
	-151, 287, -88, 403, 426, -192, 287, -198, -351, -351,
	-248, 287, -191, -361, 397, 403, -175, -152, -88, 403,
	426, -176, -153, 287, 403, -190, -134, 158, 238, 419,
	-356, -128, 5, 234, -128, 427, 431, 169, -177, 169,
	-183, -166, -88, -190, 144, -137, -361, -191, -361, -361,
	-361, -88, -190, 116, -190, 116, -158, 112, -417, 409,
	-175, -224, -223, -291, -247, -278, 294, 243, -222, -179,
	-178, 388, -184, -247, -231, 431, 144, 409, 428, -222,
	-154, -154, -154, -154, -154, -73, 144, -136, 246, -135,
	-165, 5, -227, 23, 426, -361, 427, -332, 424, 425,
	7, 7, 426, -352, -137, -227, 144, -41, 397, 274,
	94, 347, 258, 169, -353, -353, -280, 374, 68, 276,
	-353, 347, 319, -73, -165, -273, -291, -317, -190, 432,
	-291, -291, -292, -292, 144, 426, -291, -302, 28, 28,
	427, -287, -291, 419, -356, 427, 427, -300, 113, -291,
	358, -356, 419, 427, 390, -418, -418, -418, 5, 220,
	155, 219, -262, 219, -262, -262, 7, -396, -181, 426,
	-165, 395, -223, 427, -347, -332, -291, -291, -291, -291,
	-291, -352, -291, -296, -291, -347, -332, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, 106, 231, 238, -292,
	-297, -296, -291, -291, -332, 427, 427, 427, -236, -72,
	-244, 150, -328, 431, -244, -244, 427, -253, 426, -291,
	-319, 425, 427, 431, -314, 425, 431, 434, 409, -221,
	428, -313, 427, 431, -277, 32, 427, -356, 363, 363,
	116, 231, 385, -371, -368, -291, -226, -318, -178, -383,
	426, -165, 426, 426, -148, 109, 322, -267, 116, -154,
	116, -154, 401, 426, 426, 363, -265, 75, -294, -172,
	-236, 363, 363, 259, -294, -294, -236, 363, -294, 118,
	-137, 144, 346, -209, 172, -284, -166, 426, -177, 426,
	426, -221, -190, -249, -161, -266, 383, -176, 426, -176,
	-159, 202, -417, -359, -384, -270, -268, -247, -239, 232,
	74, 427, 431, 428, -285, -241, -232, -291, 2, 427,
	-88, 431, 426, 409, 409, 245, -361, -138, -138, 7,
	425, 427, -352, 427, -227, 246, -187, -175, -190, -188,
	-202, -190, 244, 427, -149, -176, 28, 28, -291, -302,
	427, -291, -291, 425, -291, 428, 5, -291, 427, 427,
	427, 427, -397, -165, -291, 427, 427, 427, 431, 431,
	427, 427, 427, 427, 427, -297, 144, 106, 238, 426,
	427, 427, -299, 152, 47, -319, -299, -299, -227, -288,
	-352, -289, -176, 424, -356, -321, 426, 428, -178, -185,
	-283, 116, -372, 75, -373, 62, 127, 80, 231, 234,
	376, 270, 59, 100, 280, 32, 427, 427, 431, -174,
	62, -174, -291, -226, -227, 231, 341, 100, 231, 100,
	93, 371, -178, -185, -227, -227, -190, -178, -185, 426,
	427, -192, -191, -361, 427, -176, 73, -362, 359, -210,
	-211, 163, 426, -226, 426, -227, -207, 32, 426, 146,
	46, 243, -226, 243, -160, 201, -417, -359, -157, -247,
	-276, 426, 243, -88, -179, 2, -224, 409, -135, -136,
	-361, -361, 427, 93, 93, 425, 427, -42, -43, 169,
	75, 261, -213, -212, 258, 238, -149, -291, -291, 427,
	-356, 419, -418, -391, 258, 427, -291, -291, -292, 144,
	426, -302, -392, 396, -291, -236, -392, -392, 427, -315,
	-352, 2, -283, -185, -189, -182, -165, 127, 159, 234,
	197, 426, -292, -190, 426, 2, -282, -412, 79, 342,
	-318, -149, -189, -149, 427, 427, 427, 234, 234, -291,
	-332, -154, -154, 427, 427, 363, 363, -236, 363, 363,
	403, -294, 256, -226, 427, -226, 427, 427, -88, -226,
	-190, 427, -190, -417, -359, -158, 107, -227, 75, -270,
	-298, 427, 426, 426, 431, 24, 426, 24, 426, -188,
	347, 427, -224, 47, 427, 427, -292, -302, 427, -393,
	-394, -181, -314, 425, -373, -182, 231, -291, -167, 426,
	-291, -209, 426, -174, 280, -173, 62, 426, 426, -178,
	-185, -418, 426, 426, -294, -190, 427, -282, 427, -209,
	427, -266, 426, -359, -159, 378, 232, 427, -185, -247,
	-362, -362, -43, -227, -227, -190, -398, 274, 302, -236,
	427, 431, 32, 116, 427, -374, 216, -165, 427, -210,
	-227, -149, -190, -411, 383, -189, -215, -214, -212, -217,
	-216, -212, 427, -236, -236, 426, -209, -282, -210, -282,
	426, -226, -160, 322, -285, 427, 427, 427, 427, 427,
	-399, -400, 38, 373, 84, -291, -399, -394, -396, 127,
	-375, -378, -377, 243, 145, 257, 327, 427, 341, 393,
	427, -221, -291, 427, 431, 388, 427, 431, 388, 427,
	427, -227, -210, -209, -209, -226, 427, -240, -137, -137,
	-400, 267, 140, 301, 267, 140, -182, -377, 243, -378,
	243, 378, 103, -374, -214, 163, -216, 144, 427, -210,
	-210, 427, -285, 28, -376, 228, 292, 52, 322, -376,
	-375, 426, 426, -155, 52, 292, -282, -400, 21, 234,
	100, -236, -236, -209, 427, 427, -210, -210, 363, 426,
	-236, 427, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 188, 190, 192, 0, 0, 0, 215, 217, 219,
	220, -2, 0, 0, 0, 250, 251, 253, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 391, 0, 865, -2, 0, 369, 371, 380, 382,
	384, 386, 387, 0, 449, 451, 453, 455, 457, 459,
	461, 463, 465, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, 496, 498,
	-2, 777, 779, 781, 783, -2, 62, 64, 66, 68,
	70, 72, 87, 223, 225, 227, 229, 232, 234, 236,
	902, 256, 258, 260, 262, 264, -2, 916, 0, 0,
	0, -2, 0, -2, -2, -2, 795, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 878, 880, 882,
	884, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1542, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1427, 1481, 1430, 1425, 189, 191, 193, 194, 0, 0,
	0, 0, 0, 0, 677, 1466, 1479, 1480, 1481, 1484,
	1485, 1486, 1542, 0, 216, 218, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 348,
	1635, 350, 352, 0, 0, 0, 0, 244, 245, 246,
	247, 248, 249, 252, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 347, 345, 1461, 289, 290, 0, 0,
	330, 331, 332, 333, 334, 335, 337, 294, 296, 298,
	299, 301, 303, 305, 307, 309, 311, 313, 315, 316,
	318, 320, 321, 323, 325, 326, 328, 738, 0, 0,
	0, 0, 0, 171, 0, 362, 356, 361, 363, 365,
	366, 367, 368, 0, 0, 169, 159, 160, 0, 0,
	610, 343, 341, 0, 158, 0, 0, 774, 0, 362,
	1508, 360, 775, 776, 0, 0, 770, 771, 1665, 805,
	370, 372, 381, 383, 385, 388, -2, -2, 1760, -2,
	411, -2, 419, 1763, 1667, 422, 0, 424, -2, 427,
	450, 452, 454, 456, 458, 460, 462, 464, 467, 469,
	471, 473, 475, 477, 479, 481, 483, 485, 487, 489,
	491, 493, 495, 497, 499, 500, 0, 0, 0, 0,
	0, 504, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 503, 505, 506, 507, 0,
	553, 592, 593, 778, 780, 782, 0, 718, 904, 63,
	65, 67, 69, 71, 224, 226, 228, 230, 233, 235,
	-2, 876, 877, 257, 259, 261, 263, 265, -2, 0,
	908, 908, 908, 0, 0, 877, 875, 0, 373, 0,
	375, 0, 504, 378, 379, 431, 432, 1119, 0, 0,
	0, 0, 0, 1244, 1197, -2, -2, 1229, 1231, 1739,
	1760, 0, 1233, 1234, 0, 1236, 1240, 1241, 0, 1404,
	1473, 1468, 1433, 1434, 1435, 1436, 0, 0, 1439, 0,
	1441, 1442, 1443, 1308, 1255, -2, -2, -2, 1477, 1033,
	1034, 1035, 1036, 1037, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1772, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 0, 1728, 1745, 1746, 1751, 1753, 1747, 1736, 1278,
	-2, -2, 1549, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1740, 1741, -2, 1743, -2, -2, 1752, -2, 1756, 1757,
	-2, -2, 1762, -2, -2, -2, 1766, 1767, -2, 1495,
	1086, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1785, 1786, 1787, 1788, 1789, 1790, 807, 785, 798,
	807, 787, 788, 789, 790, 791, 796, 797, 800, 0,
	792, 793, 794, 894, 1642, 897, 677, 895, 879, 881,
	0, 883, 0, 0, 0, 888, 911, 909, 0, 947,
	892, 893, 903, 962, 985, 0, 967, 0, 985, 1007,
	0, 972, 1661, 1256, 1257, 0, 1481, 1478, -2, 1783,
	1784, 2, 79, 0, 1745, 1007, 81, 0, 1745, 84,
	0, 1745, 0, -2, 88, 0, 1745, 172, 173, 1491,
	1492, 1496, 1497, 1498, 1499, 1772, 91, 0, 1457, 99,
	0, 1745, 1424, 0, 1454, 1500, 1501, 1502, 1503, 1504,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 0, 1451, 0, 0, 602, 1421, 1426, 603, 1431,
	0, 195, 196, 197, 198, 199, 1745, 201, 202, 0,
	204, 205, 1745, 207, 208, 0, 210, 0, 0, 0,
	0, 0, 231, 677, 1745, 0, 238, 1462, 0, 701,
	1745, 699, 1465, -2, 1745, 721, 724, 1745, 726, 677,
	728, 1464, -2, 1488, 901, 1745, 821, 349, 351, 0,
	243, 0, 834, 0, 836, 0, 855, 1013, 151, 1745,
	268, 287, 151, 1745, 271, 151, 1745, 274, 151, 1745,
	277, 1419, 151, 1745, 280, 281, 1745, 283, 174, 284,
	1745, 286, 344, 0, 0, -2, 338, 1467, -2, 0,
	336, 295, 297, 300, 302, 304, 306, 308, 310, 312,
	314, 317, 319, 322, 324, 327, 329, -2, 0, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 608, 609,
	0, 0, 0, 772, 773, 0, 0, 0, 392, 0,
	0, 0, 0, 804, 389, 0, 408, 0, 410, 1735,
	-2, -2, 414, 808, 812, 813, 814, 0, 0, 0,
	0, 421, 0, 0, 0, 425, 428, 0, 501, 502,
	0, 0, 512, 513, 514, 515, 1640, 1562, 518, 0,
	521, 542, 557, 0, 0, 525, 527, 607, 529, 0,
	0, 531, 0, 533, 0, 535, 0, 537, 0, 539,
	541, 543, 558, 545, 0, 0, 0, 556, 0, 562,
	0, 565, 566, 567, 0, 569, 570, 571, 0, 0,
	0, 579, 581, 0, 591, 0, 508, 509, 151, 1011,
	-2, 0, 871, 925, 926, 0, 0, 0, 0, 906,
	907, 0, 0, 0, 867, 868, 374, 0, 377, 0,
	0, 0, 0, 1339, 1340, 1341, 1342, 1343, 1344, 1347,
	1348, 1345, 1346, 1349, 1350, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 1354, 0, 0, 1356, 0, 1358,
	0, 0, 0, 0, 0, 0, 1176, 1178, 1412, 0,
	0, 1355, 1124, 1125, 1126, 1161, 1162, 0, 1230, 1409,
	1408, 1232, 0, 1361, -2, 1362, 1244, 0, 0, 1235,
	1448, 1242, 1243, 1361, 0, 1403, 0, 0, 1438, 0,
	1116, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1084, 1091,
	1088, 1087, 1072, 0, 1071, 0, 0, 1069, 0, 0,
	0, 1073, 0, 1384, -2, 0, 0, 0, 0, 0,
	0, 784, -2, 786, 0, 802, 0, 896, 0, 0,
	951, 1413, 1417, 1418, 951, 951, 0, 0, 1362, 0,
	0, 0, 0, 1004, 1004, 1004, 1002, 979, 0, 985,
	0, 995, 0, 985, 985, 0, -2, 967, 0, 0,
	995, 1008, 1009, 0, 0, 0, 0, 100, 767, 119,
	0, 767, 767, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 115, 107, 108, 0, 0, 85, 702, 0,
	705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 117, 0,
	142, 144, 0, 0, 0, 0, 998, 601, 0, 0,
	1482, 1429, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1468, 1469, 616, 0, 0, 0, 241, 697, 700,
	0, 719, 0, 900, 0, 0, 0, 0, 1745, 733,
	1453, 1487, 0, 1745, 823, 0, 1017, 0, 837, 0,
	0, 1014, 0, 266, 0, 149, 150, 0, 269, 0,
	272, 0, 275, 0, 0, 278, 0, 0, 0, 0,
	0, 903, 0, 0, 186, 0, 354, 364, 0, 0,
	0, 0, 903, 0, 1364, 1025, 1028, 1029, 1030, 1116,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1092, 1086, 1102,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1082, 0, 1057, 1057, 1057, 1074, 1075, 1093, 1094,
	1096, 1098, 1100, 1026, 1027, 1092, 1092, 1089, 1090, 186,
	0, 358, 0, 998, 394, 998, 396, 0, 587, 0,
	0, 0, 0, -2, 416, 0, 810, 0, 815, 440,
	441, 442, 817, 818, 420, 443, 444, 445, 446, 447,
	448, 0, 694, 0, 696, 1444, 0, 417, 433, 418,
	423, 0, 429, 0, 0, 516, 517, 519, 520, 522,
	523, 524, 528, 0, 595, 1657, 605, 530, 532, 534,
	536, 538, 903, 547, 0, 549, 903, 560, 563, 568,
	572, 573, 574, 575, 576, 577, 0, 0, 0, 717,
	0, 874, 923, 924, 929, 933, 934, 937, 940, 941,
	931, 1119, 889, 890, 891, 917, 918, 750, 0, 0,
	376, 1120, 1021, 1022, 1076, 1077, 1078, 1079, 1080, 1121,
	1122, 1450, 0, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, -2, -2, -2, -2, -2, -2, -2,
	-2, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, -2, -2, -2, 1159, 1160, -2, 1357, 1359,
	0, 1412, 0, -2, 0, -2, -2, -2, -2, 1173,
	0, 1175, 1180, 1182, 1184, 0, 0, 0, 0, 1411,
	1194, 1395, 0, 0, 1336, 1337, 1338, 1179, 0, 0,
	1410, 1407, 0, 0, 1360, 1239, 0, 0, 0, 0,
	1368, 1402, 1398, 0, 1470, 1476, 1246, 914, 0, 0,
	0, 0, 1253, 0, 1449, 1103, 1104, 1105, 1106, 1107,
	1108, 1117, 1318, 0, 0, 0, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 1371, -2,
	-2, -2, -2, -2, -2, -2, 0, 1292, 0, 0,
	1304, 0, 1306, 0, 1294, 1362, 1381, 0, 0, 1200,
	0, 0, 0, 1244, 0, 1297, 1362, 1389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 0, 1394,
	801, 898, 0, 0, 1017, 0, 0, 0, 1416, 1017,
	1017, 0, 946, 0, 0, 0, 0, 0, 0, 999,
	1003, 1000, 1001, 0, 0, 985, 995, 959, 0, 0,
	1452, 965, 994, 0, 677, 984, 995, 995, 0, -2,
	969, 0, 0, 914, -2, 0, 0, 0, 0, 766,
	121, 1745, 0, 153, 0, 0, 667, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 703, 704, 706,
	712, 714, 0, 708, 1447, 0, 709, 0, 711, 713,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 1423, 0, 0, 177,
	997, 0, 1422, 1432, 0, 200, 203, 206, 209, 187,
	676, 0, 0, 0, 0, 615, -2, 617, 619, 620,
	621, 622, 1587, 1488, 0, 1488, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 831, 0, 916, 0, 853, 839, 0, 0, 0,
	853, 857, 858, 860, 861, 0, 0, 1015, 288, 151,
	151, 151, 1420, 151, 151, 175, 282, 285, 346, 291,
	339, 903, 0, 0, 0, 0, 165, 0, 0, 0,
	340, 0, 0, 0, 342, 0, 1018, 1020, 0, 1031,
	0, 1084, 0, 156, 186, 0, 0, 393, 398, 0,
	588, 0, 0, 409, 0, 809, 816, 0, 437, 0,
	439, 695, 1446, 1445, 0, 430, 510, 0, 606, 604,
	546, 550, 903, 552, 0, 589, 590, 594, 1012, 0,
	935, 0, 932, 938, 939, 0, 920, 748, 749, 0,
	0, 0, -2, -2, 0, 0, 0, 1195, -2, 1174,
	1177, 1181, 1183, 1185, 0, 0, 0, 0, 0, 0,
	0, 1196, 1405, 1408, 1334, 0, 0, 1363, 1366, 1367,
	0, 0, 1399, 0, 0, 0, 0, 0, 913, 914,
	914, 914, 1252, 0, 0, 0, 0, 0, 0, 1254,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 0, 1277, 1055, 0, 1289, 0, 1291, 1081, 1303,
	1305, 1293, 0, 0, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1203, 1204,
	1205, 1296, 1387, 1388, 0, 0, 1095, 1097, 1099, 1101,
	0, 0, 0, 0, 1302, 0, 1393, 903, 948, 943,
	1414, 998, 950, 952, 1415, 1455, 943, 943, 0, 1363,
	987, 0, 989, 0, 0, 0, 991, 0, 980, 0,
	982, 995, 964, 0, 0, 957, 0, 956, 677, 993,
	966, 970, 1470, 0, 1010, 0, 974, 977, 0, 0,
	120, 754, 0, 0, 1456, 0, 123, 1745, 132, 0,
	644, 0, 0, 0, 0, 0, 769, 133, 1745, 151,
	1745, 151, 134, 137, 0, 141, 139, 0, 0, 635,
	101, 767, 104, 0, 0, 760, 0, 707, 710, 716,
	86, 0, 762, 752, 0, 0, 751, 143, 105, 0,
	0, 764, 103, 0, 0, 0, 186, 0, 0, 1428,
	1483, 211, 213, 214, 212, 624, 0, 1488, 0, 1488,
	0, 1460, 613, 677, 0, 239, 240, 701, 722, -2,
	725, 727, 736, 0, 0, 0, 827, 831, 0, 830,
	901, 928, 915, 1016, 832, 853, 0, 0, 0, 842,
	844, 841, 838, 835, 1017, 0, 0, 0, 0, 0,
	267, 270, 273, 276, 279, 292, 0, 184, 1621, 182,
	179, 181, 353, 0, 0, 0, 0, 1365, 0, 1023,
	0, 0, 0, 0, 157, 357, 0, 395, 0, 0,
	0, 0, 0, 0, 406, 407, -2, 435, 436, 438,
	434, 0, 548, 551, 559, 0, 0, 919, 750, 0,
	1123, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1396, 0, 1407, 1237, 1238, 1245, 1335, 1369, 1397, 1401,
	0, 1471, 1475, 1247, 0, 0, 0, 0, 1440, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 0, 1316, 1317, 1321,
	1463, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 1370, 1380, 1382, 1201, 1202, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, -2, -2, -2,
	1219, 1220, 1221, -2, -2, -2, 0, 0, 0, 1383,
	1385, 1386, 1390, 1391, 0, 1299, 1300, 1301, 1392, 0,
	945, 0, 949, 0, 945, 945, 910, 988, 0, 1006,
	990, 962, 981, 0, 971, 960, 0, 961, 0, 992,
	0, 968, 973, 0, 976, 0, 1247, -2, 0, 0,
	0, 0, 152, 642, 666, 0, 0, 739, 747, 747,
	0, 1458, 0, 0, 125, 0, 0, 0, 0, 130,
	0, 136, 140, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 111, 114, 0, 0, 110, 0,
	154, 0, 0, 632, 0, 618, 0, 0, 0, 0,
	616, 0, 237, 698, 720, 0, 0, 0, 0, 0,
	829, 831, 0, 822, 823, 853, 927, 833, 851, 852,
	850, 0, 0, 0, 916, 859, 856, 862, 863, 0,
	170, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	1024, 1032, 0, 1085, 359, 0, 582, 583, 630, 0,
	586, 511, 930, 936, 921, 750, 0, 0, -2, 0,
	1188, -2, -2, 1406, 1400, 0, 1437, 914, 1248, 1250,
	1251, 1118, 1323, 1320, 0, 1307, 1268, 1269, 0, 0,
	1272, 1274, 1275, 1276, 1056, 1379, 0, 0, 0, 0,
	1298, 899, 1312, 0, 0, 953, 1312, 1312, 0, 985,
	983, 958, 954, 0, 1471, 975, 0, 0, 756, 758,
	122, 0, 643, 0, 646, 0, 0, 0, 0, 653,
	654, 0, 0, 0, 0, 0, 668, 675, 0, 750,
	0, 750, 0, 0, 0, 0, 127, 146, 0, 0,
	768, 0, 151, 151, 0, 0, 755, 0, 0, 0,
	0, 761, 763, 753, 0, 765, 0, 176, 0, 611,
	631, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	735, 0, 0, 0, 819, 831, 0, 824, 825, 242,
	0, 0, 0, 840, 843, 845, 928, 0, 183, 0,
	178, 180, 166, 0, 0, 1019, 1083, 397, 399, 0,
	0, 405, 584, 629, 0, 0, 922, -2, -2, 1189,
	1472, 1474, 0, 916, 0, 1309, 0, 0, -2, 0,
	0, 0, 885, 0, 944, 942, 886, 887, 1005, 995,
	0, 978, 124, 0, 647, 648, 1459, 650, 0, 652,
	655, 0, 657, 1490, 0, 661, 624, 0, 672, 673,
	740, 741, 746, 742, 747, 670, 0, 126, 128, 145,
	745, 129, 135, 0, 0, 0, 0, 914, 0, 0,
	0, 996, 0, 0, 675, 0, 665, 624, 614, 0,
	736, 731, 0, 0, 826, 827, 0, 0, 0, 853,
	864, 185, 0, 0, 0, 401, 0, 403, 0, 628,
	0, 1249, 1326, 0, 1270, 1271, -2, 0, 1227, 1311,
	1313, 0, 963, 955, 645, 649, 0, 0, 681, 0,
	0, 632, 0, 750, 0, 148, 0, 0, 0, 757,
	759, 0, 0, 0, 113, 0, 664, 624, 675, 632,
	675, 0, 0, 828, 829, 0, 847, 1017, 849, 854,
	0, 0, 400, 0, 0, 585, 0, 0, 0, 1322,
	1228, 0, 0, 0, 656, 686, 0, 0, 0, 669,
	0, 743, 677, 131, 0, 744, 0, 636, 0, 0,
	639, 0, 0, 0, 0, 0, 632, 624, 612, 624,
	0, 0, 820, 0, 848, 186, 186, 402, 404, 1319,
	1324, 1327, -2, 1711, 1539, 0, 1325, 1314, 1315, 0,
	658, 682, 683, 0, 678, 679, 680, 1489, 659, 660,
	674, 681, 147, 633, 0, 0, 634, 0, 0, 116,
	118, 0, 662, 632, 632, 0, 732, 1017, 167, 168,
	0, 1329, 1330, 1331, 1332, 1333, 651, 684, 0, 685,
	0, 0, 0, 686, 637, 0, 640, 0, 627, 663,
	729, 675, 846, 0, 687, 0, 690, 691, 0, 688,
	671, 0, 0, 623, 625, 626, 624, 1328, 689, 692,
	693, 0, 0, 632, 632, 0, 730, 638, 0, 0,
	0, 632, 641,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 415, 3, 421, 416, 3,
	426, 427, 419, 417, 431, 418, 428, 420, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 435, 430,
	407, 409, 408, 411, 432, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 424, 3, 425, 422, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 433, 414, 434, 412,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 410,
	57750, 413, 57751, 423, 57752, 429, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1017
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1023
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1038
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1063
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1161
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1165
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1217
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1227
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1243
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1249
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1260
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1277
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1310
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1342
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1387
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1432
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1512
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1521
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1564
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1587
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1598
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1602
		{
			sqlVAL.str = "PGDUMP"
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1609
		{
			sqlVAL.str = "CSV"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1613
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1617
		{
			sqlVAL.str = "PGCOPY"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1663
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1680
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1683
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1687
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1717
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1721
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1725
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1752
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1768
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1769
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1770
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1771
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1794
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1804
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1821
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1823
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1830
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1840
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1857
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1863
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1866
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1870
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1875
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1881
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1882
		{
			sqlVAL.str = ""
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1892
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1916
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1927
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1937
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1941
		{
			sqlVAL.union.val = nil
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1954
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return helpWith(sqllex, "DELETE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DROP")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1992
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1993
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1994
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1995
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1996
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2019
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2026
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2038
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2049
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2064
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2072
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2102
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2110
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2117
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2121
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2151
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2169
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "DELETE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2171
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "INSERT")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2175
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2196
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2200
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2214
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2221
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2225
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2229
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2245
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2255
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2269
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2304
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2308
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2311
		{
			return helpWith(sqllex, "GRANT")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2331
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2335
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2339
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2342
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2351
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2362
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2380
		{
			return helpWith(sqllex, "RESET")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2381
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2393
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2396
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2407
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "USE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2426
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2427
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2428
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2429
		{
			return helpWith(sqllex, "USE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2430
		{
			return unimplemented(sqllex, "set local")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2446
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2461
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2464
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2490
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2514
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2518
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2545
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2548
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2554
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2570
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2574
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2579
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2599
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2604
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2618
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2634
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2641
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2647
		{
			return unimplemented(sqllex, "set from current")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2648
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2656
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2661
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2678
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2695
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2705
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2717
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2721
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.Low
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.Normal
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.High
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2750
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2754
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2759
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2763
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.str = "client_encoding"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2824
		{
			sqlVAL.str = "timezone"
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2857
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2865
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2880
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2893
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2915
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2979
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2995
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3008
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3012
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3035
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3053
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3059
		{
			sqlVAL.union.val = true
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3060
		{
			sqlVAL.union.val = false
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3073
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3087
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3115
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3129
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3146
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3151
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3155
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3184
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3187
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3195
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3206
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3223
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3230
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3245
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3250
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3262
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3266
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3269
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3277
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3284
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3289
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3409
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3413
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3417
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3456
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3460
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3465
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3469
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3485
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3489
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3510
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3513
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3561
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3600
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3616
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3636
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3643
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3648
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3653
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3673
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3693
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3699
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3709
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3719
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3729
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3740
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3755
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3773
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3777
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3781
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3785
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3803
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3811
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3815
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3823
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3839
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3843
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3850
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3860
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3872
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3882
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3899
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3905
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3932
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3956
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3975
		{
			return unimplemented(sqllex, "match full")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3976
		{
			return unimplemented(sqllex, "match partial")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3977
		{
			return unimplemented(sqllex, "match simple")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3978
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3985
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3997
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4001
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4033
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4037
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4069
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4077
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4085
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4096
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4097
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4100
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4101
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4104
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4106
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4108
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4110
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4111
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4113
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4114
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4116
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4125
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4128
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4136
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4143
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4147
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4151
		{
			sqlVAL.union.val = nil
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4168
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4176
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4183
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4201
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4214
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4237
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4246
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4251
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4255
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4291
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4292
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4296
		{
			sqlVAL.str = ""
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4299
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4300
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4308
		{
			sqlVAL.union.val = tree.Descending
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4329
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4339
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4343
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4351
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4353
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4367
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4371
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4381
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = true
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4391
		{
			sqlVAL.union.val = false
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = false
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4408
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4445
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4463
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4481
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4493
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4498
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4499
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4515
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4518
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4519
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.str = ""
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4541
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4545
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4565
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4578
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4580
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4598
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4604
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4610
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4614
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4624
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4662
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4668
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4672
		{
			sqlVAL.str = ""
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.str = ""
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4687
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4688
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4714
		{
			return helpWith(sqllex, "INSERT")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4732
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4736
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4754
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4758
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4788
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4792
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4796
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4802
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4806
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4814
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4819
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4823
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 854:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4851
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4855
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4856
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4860
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4952
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4968
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4979
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			return helpWith(sqllex, "SELECT")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5015
		{
			return helpWith(sqllex, "VALUES")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5016
		{
			return helpWith(sqllex, "TABLE")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5077
		{
			return helpWith(sqllex, "SELECT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5099
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5121
		{
			return helpWith(sqllex, "TABLE")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5137
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5141
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5160
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5167
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5171
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5175
		{
			sqlVAL.union.val = true
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5179
		{
			sqlVAL.union.val = false
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5183
		{
			sqlVAL.union.val = false
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = true
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5200
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5201
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5204
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5205
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5213
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5252
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5261
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5272
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5291
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5328
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5329
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5332
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5333
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5386
		{
			return helpWith(sqllex, "VALUES")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5388
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5403
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5425
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5437
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5442
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5504
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5535
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5540
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5556
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5578
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5584
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5586
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = nil
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5595
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5605
		{
			sqlVAL.union.val = true
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.union.val = false
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5685
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5689
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5693
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5703
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5704
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5719
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5778
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5792
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5801
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5825
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5851
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5925
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = nil
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5968
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5972
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5980
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5984
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6008
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6012
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6064
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6068
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6096
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6148
		{
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6149
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6191
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = tree.Year
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = tree.Month
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = tree.Day
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.Month
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6235
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6239
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6243
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = nil
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.Second
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6260
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6295
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6523
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6589
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6645
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6649
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6721
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6800
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6809
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6831
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6835
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6839
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6844
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6866
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6867
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6869
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6880
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6891
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6908
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6912
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6914
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7000
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7010
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7015
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7020
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7025
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7030
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7035
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7044
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7045
		{
			return unimplemented(sqllex, "treat")
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7076
		{
			return unimplemented(sqllex, "within group")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7077
		{
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7096
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7102
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7112
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.str = ""
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7174
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7175
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7176
		{
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7179
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7180
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7186
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7187
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7188
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7189
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7190
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.Any
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.Some
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = tree.All
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.Div
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7231
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7232
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7234
		{
			sqlVAL.union.val = tree.LT
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7235
		{
			sqlVAL.union.val = tree.GT
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7236
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = tree.LE
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7238
		{
			sqlVAL.union.val = tree.GE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.NE
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.Like
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7244
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7245
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7246
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7294
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7479
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7501
		{
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7502
		{
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7525
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7529
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7533
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7568
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7621
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7636
		{
			return unimplemented(sqllex, "func const")
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7645
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7662
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7675
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7686
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7696
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7799
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7803
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7821
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7829
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7888
		{
			sqlVAL.str = ""
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7894
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7898
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
