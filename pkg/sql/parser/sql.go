// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7805

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	414, 55,
	-2, 861,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	162, 699,
	-2, 0,
	-1, 59,
	101, 861,
	168, 861,
	362, 861,
	363, 861,
	-2, 0,
	-1, 72,
	112, 835,
	124, 835,
	176, 835,
	202, 835,
	231, 835,
	239, 835,
	359, 835,
	-2, 824,
	-1, 107,
	192, 529,
	350, 529,
	-2, 0,
	-1, 112,
	4, 863,
	20, 863,
	21, 863,
	22, 863,
	23, 863,
	25, 863,
	30, 863,
	35, 863,
	36, 863,
	37, 863,
	38, 863,
	39, 863,
	40, 863,
	41, 863,
	42, 863,
	43, 863,
	44, 863,
	46, 863,
	47, 863,
	48, 863,
	49, 863,
	50, 863,
	51, 863,
	54, 863,
	55, 863,
	56, 863,
	58, 863,
	59, 863,
	63, 863,
	64, 863,
	65, 863,
	66, 863,
	67, 863,
	69, 863,
	70, 863,
	71, 863,
	72, 863,
	74, 863,
	76, 863,
	77, 863,
	80, 863,
	81, 863,
	82, 863,
	90, 863,
	91, 863,
	92, 863,
	93, 863,
	94, 863,
	95, 863,
	96, 863,
	97, 863,
	99, 863,
	101, 863,
	103, 863,
	106, 863,
	107, 863,
	109, 863,
	113, 863,
	114, 863,
	115, 863,
	116, 863,
	117, 863,
	118, 863,
	119, 863,
	120, 863,
	121, 863,
	129, 863,
	130, 863,
	131, 863,
	132, 863,
	133, 863,
	135, 863,
	137, 863,
	141, 863,
	143, 863,
	144, 863,
	146, 863,
	148, 863,
	149, 863,
	150, 863,
	151, 863,
	152, 863,
	153, 863,
	154, 863,
	155, 863,
	158, 863,
	163, 863,
	164, 863,
	165, 863,
	168, 863,
	169, 863,
	170, 863,
	171, 863,
	172, 863,
	173, 863,
	174, 863,
	175, 863,
	177, 863,
	179, 863,
	182, 863,
	183, 863,
	184, 863,
	186, 863,
	187, 863,
	190, 863,
	191, 863,
	192, 863,
	194, 863,
	195, 863,
	197, 863,
	199, 863,
	200, 863,
	203, 863,
	204, 863,
	207, 863,
	209, 863,
	212, 863,
	213, 863,
	214, 863,
	215, 863,
	216, 863,
	218, 863,
	219, 863,
	220, 863,
	221, 863,
	226, 863,
	227, 863,
	228, 863,
	229, 863,
	230, 863,
	232, 863,
	233, 863,
	235, 863,
	236, 863,
	237, 863,
	240, 863,
	241, 863,
	243, 863,
	245, 863,
	246, 863,
	247, 863,
	248, 863,
	249, 863,
	250, 863,
	251, 863,
	252, 863,
	254, 863,
	255, 863,
	256, 863,
	257, 863,
	258, 863,
	260, 863,
	261, 863,
	262, 863,
	263, 863,
	264, 863,
	265, 863,
	266, 863,
	267, 863,
	269, 863,
	270, 863,
	271, 863,
	272, 863,
	273, 863,
	275, 863,
	276, 863,
	277, 863,
	278, 863,
	279, 863,
	280, 863,
	281, 863,
	283, 863,
	286, 863,
	287, 863,
	288, 863,
	289, 863,
	290, 863,
	292, 863,
	293, 863,
	294, 863,
	295, 863,
	296, 863,
	297, 863,
	298, 863,
	300, 863,
	301, 863,
	302, 863,
	303, 863,
	304, 863,
	305, 863,
	306, 863,
	307, 863,
	308, 863,
	310, 863,
	311, 863,
	312, 863,
	313, 863,
	315, 863,
	316, 863,
	317, 863,
	318, 863,
	320, 863,
	321, 863,
	322, 863,
	323, 863,
	324, 863,
	325, 863,
	326, 863,
	327, 863,
	328, 863,
	330, 863,
	331, 863,
	333, 863,
	334, 863,
	336, 863,
	337, 863,
	338, 863,
	339, 863,
	340, 863,
	341, 863,
	342, 863,
	343, 863,
	345, 863,
	346, 863,
	347, 863,
	350, 863,
	351, 863,
	352, 863,
	353, 863,
	355, 863,
	356, 863,
	357, 863,
	358, 863,
	361, 863,
	362, 863,
	363, 863,
	364, 863,
	366, 863,
	368, 863,
	369, 863,
	370, 863,
	371, 863,
	372, 863,
	373, 863,
	376, 863,
	377, 863,
	382, 863,
	383, 863,
	384, 863,
	385, 863,
	386, 863,
	387, 863,
	-2, 0,
	-1, 132,
	112, 834,
	124, 834,
	176, 834,
	202, 834,
	231, 834,
	239, 834,
	359, 834,
	-2, 827,
	-1, 137,
	1, 757,
	182, 757,
	260, 757,
	264, 757,
	413, 757,
	414, 757,
	-2, 0,
	-1, 139,
	1, 757,
	413, 757,
	414, 757,
	-2, 0,
	-1, 140,
	1, 757,
	413, 757,
	414, 757,
	-2, 0,
	-1, 141,
	1, 761,
	413, 761,
	414, 761,
	-2, 0,
	-1, 167,
	4, 870,
	5, 870,
	6, 870,
	7, 870,
	8, 870,
	9, 870,
	20, 870,
	21, 870,
	22, 870,
	23, 870,
	25, 870,
	30, 870,
	31, 870,
	35, 870,
	36, 870,
	37, 870,
	38, 870,
	39, 870,
	40, 870,
	41, 870,
	42, 870,
	43, 870,
	44, 870,
	46, 870,
	47, 870,
	48, 870,
	49, 870,
	50, 870,
	51, 870,
	52, 870,
	53, 870,
	54, 870,
	55, 870,
	56, 870,
	58, 870,
	59, 870,
	61, 870,
	63, 870,
	64, 870,
	65, 870,
	66, 870,
	67, 870,
	69, 870,
	70, 870,
	71, 870,
	72, 870,
	74, 870,
	76, 870,
	77, 870,
	79, 870,
	80, 870,
	81, 870,
	82, 870,
	83, 870,
	84, 870,
	85, 870,
	86, 870,
	88, 870,
	89, 870,
	90, 870,
	91, 870,
	92, 870,
	93, 870,
	94, 870,
	95, 870,
	96, 870,
	97, 870,
	98, 870,
	99, 870,
	101, 870,
	103, 870,
	106, 870,
	107, 870,
	109, 870,
	113, 870,
	114, 870,
	115, 870,
	116, 870,
	117, 870,
	118, 870,
	119, 870,
	120, 870,
	121, 870,
	122, 870,
	123, 870,
	129, 870,
	130, 870,
	131, 870,
	132, 870,
	133, 870,
	135, 870,
	137, 870,
	140, 870,
	141, 870,
	143, 870,
	144, 870,
	146, 870,
	148, 870,
	149, 870,
	150, 870,
	151, 870,
	152, 870,
	153, 870,
	154, 870,
	155, 870,
	156, 870,
	158, 870,
	163, 870,
	164, 870,
	165, 870,
	167, 870,
	168, 870,
	169, 870,
	170, 870,
	171, 870,
	172, 870,
	173, 870,
	174, 870,
	175, 870,
	177, 870,
	179, 870,
	180, 870,
	181, 870,
	182, 870,
	183, 870,
	184, 870,
	185, 870,
	186, 870,
	187, 870,
	190, 870,
	191, 870,
	192, 870,
	194, 870,
	195, 870,
	197, 870,
	198, 870,
	199, 870,
	200, 870,
	201, 870,
	203, 870,
	204, 870,
	207, 870,
	209, 870,
	210, 870,
	211, 870,
	212, 870,
	213, 870,
	214, 870,
	215, 870,
	216, 870,
	217, 870,
	218, 870,
	219, 870,
	220, 870,
	221, 870,
	222, 870,
	224, 870,
	225, 870,
	226, 870,
	227, 870,
	228, 870,
	229, 870,
	230, 870,
	232, 870,
	233, 870,
	236, 870,
	237, 870,
	240, 870,
	241, 870,
	242, 870,
	243, 870,
	244, 870,
	245, 870,
	246, 870,
	247, 870,
	248, 870,
	249, 870,
	250, 870,
	251, 870,
	252, 870,
	254, 870,
	255, 870,
	256, 870,
	257, 870,
	258, 870,
	260, 870,
	261, 870,
	262, 870,
	263, 870,
	264, 870,
	265, 870,
	266, 870,
	267, 870,
	269, 870,
	270, 870,
	271, 870,
	272, 870,
	273, 870,
	275, 870,
	276, 870,
	277, 870,
	278, 870,
	279, 870,
	280, 870,
	281, 870,
	283, 870,
	284, 870,
	286, 870,
	287, 870,
	288, 870,
	289, 870,
	290, 870,
	292, 870,
	293, 870,
	294, 870,
	295, 870,
	296, 870,
	297, 870,
	298, 870,
	300, 870,
	301, 870,
	302, 870,
	303, 870,
	304, 870,
	305, 870,
	306, 870,
	307, 870,
	308, 870,
	309, 870,
	310, 870,
	311, 870,
	312, 870,
	313, 870,
	314, 870,
	315, 870,
	316, 870,
	317, 870,
	318, 870,
	320, 870,
	321, 870,
	322, 870,
	323, 870,
	324, 870,
	325, 870,
	326, 870,
	327, 870,
	328, 870,
	330, 870,
	331, 870,
	333, 870,
	334, 870,
	336, 870,
	337, 870,
	338, 870,
	339, 870,
	340, 870,
	341, 870,
	342, 870,
	343, 870,
	345, 870,
	346, 870,
	347, 870,
	350, 870,
	351, 870,
	352, 870,
	353, 870,
	354, 870,
	355, 870,
	356, 870,
	357, 870,
	358, 870,
	361, 870,
	362, 870,
	363, 870,
	364, 870,
	365, 870,
	366, 870,
	368, 870,
	369, 870,
	370, 870,
	371, 870,
	372, 870,
	373, 870,
	376, 870,
	377, 870,
	382, 870,
	383, 870,
	384, 870,
	385, 870,
	386, 870,
	387, 870,
	388, 870,
	396, 870,
	401, 870,
	402, 870,
	403, 870,
	410, 870,
	416, 870,
	-2, 0,
	-1, 170,
	1, 55,
	414, 55,
	-2, 861,
	-1, 586,
	139, 1532,
	348, 1532,
	393, 1532,
	412, 1532,
	-2, 0,
	-1, 587,
	139, 1460,
	348, 1460,
	393, 1460,
	412, 1460,
	-2, 0,
	-1, 589,
	139, 1604,
	348, 1604,
	393, 1604,
	412, 1604,
	-2, 0,
	-1, 591,
	139, 1632,
	348, 1632,
	393, 1632,
	412, 1632,
	-2, 0,
	-1, 598,
	139, 1537,
	348, 1537,
	393, 1537,
	412, 1537,
	-2, 404,
	-1, 632,
	1, 500,
	409, 500,
	411, 500,
	413, 500,
	414, 500,
	-2, 0,
	-1, 633,
	1, 568,
	136, 568,
	409, 568,
	411, 568,
	413, 568,
	414, 568,
	-2, 0,
	-1, 639,
	1, 515,
	409, 515,
	411, 515,
	413, 515,
	414, 515,
	-2, 0,
	-1, 641,
	1, 519,
	409, 519,
	411, 519,
	413, 519,
	414, 519,
	-2, 0,
	-1, 644,
	1, 530,
	409, 530,
	411, 530,
	413, 530,
	414, 530,
	-2, 0,
	-1, 645,
	1, 536,
	409, 536,
	411, 536,
	413, 536,
	414, 536,
	-2, 0,
	-1, 646,
	1, 539,
	409, 539,
	411, 539,
	413, 539,
	414, 539,
	-2, 0,
	-1, 650,
	1, 553,
	409, 553,
	411, 553,
	413, 553,
	414, 553,
	-2, 0,
	-1, 651,
	1, 555,
	409, 555,
	411, 555,
	413, 555,
	414, 555,
	-2, 0,
	-1, 677,
	124, 872,
	202, 872,
	231, 872,
	-2, 830,
	-1, 685,
	124, 871,
	202, 871,
	231, 871,
	-2, 828,
	-1, 712,
	410, 1704,
	-2, 1145,
	-1, 713,
	410, 1705,
	-2, 1146,
	-1, 744,
	410, 1418,
	-2, 1409,
	-1, 745,
	5, 1003,
	410, 1431,
	-2, 1422,
	-1, 746,
	410, 1432,
	-2, 1423,
	-1, 753,
	5, 987,
	-2, 1452,
	-1, 754,
	5, 988,
	-2, 1456,
	-1, 755,
	5, 989,
	-2, 1455,
	-1, 756,
	5, 990,
	-2, 1628,
	-1, 757,
	5, 991,
	-2, 1539,
	-1, 758,
	5, 992,
	-2, 1597,
	-1, 759,
	5, 993,
	-2, 1599,
	-1, 760,
	5, 994,
	-2, 1600,
	-1, 761,
	5, 995,
	-2, 1601,
	-1, 762,
	5, 996,
	-2, 1609,
	-1, 763,
	5, 997,
	-2, 1640,
	-1, 764,
	5, 998,
	-2, 1509,
	-1, 765,
	5, 999,
	-2, 1451,
	-1, 766,
	5, 1000,
	-2, 1547,
	-1, 767,
	5, 1001,
	-2, 1548,
	-1, 768,
	5, 1002,
	-2, 1513,
	-1, 769,
	5, 1049,
	410, 1049,
	-2, 1673,
	-1, 786,
	5, 1024,
	-2, 1453,
	-1, 787,
	5, 1042,
	-2, 1480,
	-1, 789,
	5, 1016,
	-2, 1496,
	-1, 790,
	5, 1017,
	-2, 1497,
	-1, 791,
	5, 1008,
	-2, 1512,
	-1, 792,
	5, 1009,
	-2, 1514,
	-1, 793,
	5, 1010,
	-2, 1515,
	-1, 794,
	5, 1011,
	-2, 1516,
	-1, 795,
	5, 975,
	-2, 1522,
	-1, 796,
	5, 976,
	-2, 1523,
	-1, 797,
	5, 1039,
	-2, 1618,
	-1, 798,
	5, 1047,
	-2, 1630,
	-1, 799,
	5, 1014,
	-2, 1654,
	-1, 800,
	5, 1041,
	-2, 1655,
	-1, 801,
	5, 1023,
	-2, 1656,
	-1, 802,
	5, 1041,
	-2, 1657,
	-1, 803,
	5, 1041,
	-2, 1658,
	-1, 804,
	5, 1006,
	-2, 1661,
	-1, 805,
	5, 1006,
	-2, 1662,
	-1, 808,
	5, 1031,
	-2, 1666,
	-1, 810,
	5, 1007,
	-2, 1671,
	-1, 811,
	5, 1012,
	-2, 1672,
	-1, 813,
	5, 1006,
	-2, 1676,
	-1, 816,
	5, 1015,
	-2, 1681,
	-1, 817,
	5, 1013,
	-2, 1683,
	-1, 819,
	5, 1043,
	-2, 1685,
	-1, 820,
	5, 1045,
	-2, 1686,
	-1, 823,
	5, 1038,
	-2, 1690,
	-1, 891,
	410, 1431,
	-2, 1422,
	-1, 908,
	275, 1406,
	403, 1406,
	-2, 1405,
	-1, 1048,
	250, 859,
	-2, 685,
	-1, 1057,
	234, 1426,
	-2, 0,
	-1, 1100,
	1, 268,
	409, 268,
	411, 268,
	413, 268,
	414, 268,
	-2, 833,
	-1, 1103,
	4, 1689,
	10, 1689,
	11, 1689,
	13, 1689,
	14, 1689,
	15, 1689,
	16, 1689,
	17, 1689,
	18, 1689,
	20, 1689,
	21, 1689,
	22, 1689,
	23, 1689,
	25, 1689,
	28, 1689,
	30, 1689,
	32, 1689,
	35, 1689,
	36, 1689,
	37, 1689,
	38, 1689,
	39, 1689,
	40, 1689,
	41, 1689,
	42, 1689,
	43, 1689,
	44, 1689,
	46, 1689,
	47, 1689,
	48, 1689,
	49, 1689,
	50, 1689,
	51, 1689,
	54, 1689,
	55, 1689,
	56, 1689,
	58, 1689,
	59, 1689,
	60, 1689,
	63, 1689,
	64, 1689,
	65, 1689,
	66, 1689,
	67, 1689,
	68, 1689,
	69, 1689,
	70, 1689,
	71, 1689,
	72, 1689,
	74, 1689,
	75, 1689,
	76, 1689,
	77, 1689,
	79, 1689,
	80, 1689,
	81, 1689,
	82, 1689,
	90, 1689,
	91, 1689,
	92, 1689,
	93, 1689,
	94, 1689,
	95, 1689,
	96, 1689,
	97, 1689,
	99, 1689,
	101, 1689,
	103, 1689,
	106, 1689,
	107, 1689,
	109, 1689,
	113, 1689,
	114, 1689,
	115, 1689,
	116, 1689,
	117, 1689,
	118, 1689,
	119, 1689,
	120, 1689,
	121, 1689,
	125, 1689,
	126, 1689,
	127, 1689,
	128, 1689,
	129, 1689,
	130, 1689,
	131, 1689,
	132, 1689,
	133, 1689,
	134, 1689,
	135, 1689,
	137, 1689,
	140, 1689,
	141, 1689,
	143, 1689,
	144, 1689,
	146, 1689,
	148, 1689,
	149, 1689,
	150, 1689,
	151, 1689,
	152, 1689,
	153, 1689,
	154, 1689,
	155, 1689,
	156, 1689,
	157, 1689,
	158, 1689,
	159, 1689,
	160, 1689,
	161, 1689,
	163, 1689,
	164, 1689,
	165, 1689,
	167, 1689,
	168, 1689,
	169, 1689,
	170, 1689,
	171, 1689,
	172, 1689,
	173, 1689,
	174, 1689,
	175, 1689,
	177, 1689,
	179, 1689,
	180, 1689,
	181, 1689,
	182, 1689,
	183, 1689,
	184, 1689,
	185, 1689,
	186, 1689,
	187, 1689,
	188, 1689,
	189, 1689,
	190, 1689,
	191, 1689,
	192, 1689,
	194, 1689,
	195, 1689,
	197, 1689,
	198, 1689,
	199, 1689,
	200, 1689,
	201, 1689,
	203, 1689,
	204, 1689,
	207, 1689,
	208, 1689,
	209, 1689,
	212, 1689,
	213, 1689,
	214, 1689,
	215, 1689,
	216, 1689,
	217, 1689,
	218, 1689,
	219, 1689,
	220, 1689,
	221, 1689,
	224, 1689,
	226, 1689,
	227, 1689,
	228, 1689,
	229, 1689,
	230, 1689,
	232, 1689,
	233, 1689,
	236, 1689,
	237, 1689,
	238, 1689,
	240, 1689,
	241, 1689,
	243, 1689,
	245, 1689,
	246, 1689,
	247, 1689,
	248, 1689,
	249, 1689,
	250, 1689,
	251, 1689,
	252, 1689,
	254, 1689,
	255, 1689,
	256, 1689,
	257, 1689,
	258, 1689,
	260, 1689,
	261, 1689,
	262, 1689,
	263, 1689,
	264, 1689,
	265, 1689,
	266, 1689,
	267, 1689,
	269, 1689,
	270, 1689,
	271, 1689,
	272, 1689,
	273, 1689,
	274, 1689,
	275, 1689,
	276, 1689,
	277, 1689,
	278, 1689,
	279, 1689,
	280, 1689,
	281, 1689,
	283, 1689,
	284, 1689,
	286, 1689,
	287, 1689,
	288, 1689,
	289, 1689,
	290, 1689,
	291, 1689,
	292, 1689,
	293, 1689,
	294, 1689,
	295, 1689,
	296, 1689,
	297, 1689,
	298, 1689,
	300, 1689,
	301, 1689,
	302, 1689,
	303, 1689,
	304, 1689,
	305, 1689,
	306, 1689,
	307, 1689,
	308, 1689,
	310, 1689,
	311, 1689,
	312, 1689,
	313, 1689,
	314, 1689,
	315, 1689,
	316, 1689,
	317, 1689,
	318, 1689,
	320, 1689,
	321, 1689,
	322, 1689,
	323, 1689,
	324, 1689,
	325, 1689,
	326, 1689,
	327, 1689,
	328, 1689,
	330, 1689,
	331, 1689,
	333, 1689,
	334, 1689,
	336, 1689,
	337, 1689,
	338, 1689,
	339, 1689,
	340, 1689,
	341, 1689,
	342, 1689,
	343, 1689,
	345, 1689,
	346, 1689,
	347, 1689,
	350, 1689,
	351, 1689,
	352, 1689,
	353, 1689,
	355, 1689,
	356, 1689,
	357, 1689,
	358, 1689,
	361, 1689,
	362, 1689,
	363, 1689,
	364, 1689,
	366, 1689,
	368, 1689,
	369, 1689,
	370, 1689,
	371, 1689,
	372, 1689,
	373, 1689,
	376, 1689,
	377, 1689,
	382, 1689,
	383, 1689,
	384, 1689,
	385, 1689,
	386, 1689,
	387, 1689,
	388, 1689,
	389, 1689,
	391, 1689,
	392, 1689,
	393, 1689,
	394, 1689,
	395, 1689,
	396, 1689,
	398, 1689,
	399, 1689,
	400, 1689,
	401, 1689,
	402, 1689,
	403, 1689,
	404, 1689,
	405, 1689,
	406, 1689,
	408, 1689,
	411, 1689,
	412, 1689,
	415, 1689,
	416, 1689,
	-2, 0,
	-1, 1121,
	139, 1604,
	348, 1604,
	393, 1604,
	412, 1604,
	-2, 0,
	-1, 1146,
	139, 1632,
	348, 1632,
	393, 1632,
	412, 1632,
	-2, 0,
	-1, 1147,
	182, 769,
	260, 769,
	264, 769,
	-2, 391,
	-1, 1223,
	124, 871,
	202, 871,
	231, 871,
	-2, 831,
	-1, 1307,
	112, 835,
	124, 835,
	176, 835,
	202, 835,
	231, 835,
	239, 835,
	359, 835,
	-2, 1186,
	-1, 1353,
	411, 1301,
	-2, 0,
	-1, 1360,
	182, 769,
	260, 769,
	264, 769,
	-2, 764,
	-1, 1389,
	411, 1301,
	-2, 0,
	-1, 1393,
	112, 835,
	124, 835,
	176, 835,
	202, 835,
	231, 835,
	239, 835,
	359, 835,
	-2, 934,
	-1, 1586,
	182, 769,
	260, 769,
	264, 769,
	-2, 393,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1084,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1085,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1086,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1087,
	-1, 1697,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1088,
	-1, 1698,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1089,
	-1, 1699,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1090,
	-1, 1700,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1091,
	-1, 1712,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1103,
	-1, 1713,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1104,
	-1, 1714,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	188, 0,
	189, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1105,
	-1, 1717,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1110,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1112,
	-1, 1725,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1116,
	-1, 1726,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1117,
	-1, 1727,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1118,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1119,
	-1, 1804,
	5, 1003,
	139, 1312,
	410, 1431,
	-2, 1422,
	-1, 1805,
	139, 1313,
	-2, 1650,
	-1, 1806,
	139, 1314,
	-2, 1536,
	-1, 1807,
	139, 1315,
	-2, 1481,
	-1, 1808,
	139, 1316,
	-2, 1504,
	-1, 1809,
	139, 1317,
	-2, 1535,
	-1, 1810,
	139, 1318,
	-2, 1596,
	-1, 1884,
	1, 935,
	79, 935,
	112, 935,
	124, 935,
	140, 935,
	145, 935,
	147, 935,
	167, 935,
	176, 935,
	185, 935,
	198, 935,
	202, 935,
	217, 935,
	231, 935,
	234, 935,
	239, 935,
	282, 935,
	284, 935,
	359, 935,
	367, 935,
	379, 935,
	380, 935,
	390, 935,
	409, 935,
	411, 935,
	413, 935,
	414, 935,
	415, 935,
	-2, 934,
	-1, 1886,
	410, 1410,
	-2, 1420,
	-1, 1966,
	411, 1369,
	415, 1369,
	-2, 1398,
	-1, 2087,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1111,
	-1, 2088,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1113,
	-1, 2093,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1114,
	-1, 2111,
	244, 1272,
	-2, 1274,
	-1, 2315,
	250, 859,
	-2, 685,
	-1, 2378,
	182, 769,
	260, 769,
	264, 769,
	-2, 390,
	-1, 2394,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1115,
	-1, 2399,
	180, 0,
	181, 0,
	224, 0,
	-2, 1133,
	-1, 2408,
	244, 1273,
	-2, 1275,
	-1, 2457,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1163,
	-1, 2458,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1164,
	-1, 2459,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1165,
	-1, 2463,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1169,
	-1, 2464,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1170,
	-1, 2465,
	13, 0,
	14, 0,
	15, 0,
	391, 0,
	392, 0,
	393, 0,
	-2, 1171,
	-1, 2504,
	410, 1411,
	-2, 1421,
	-1, 2619,
	180, 0,
	181, 0,
	224, 0,
	-2, 1134,
	-1, 2622,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1137,
	-1, 2623,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1139,
	-1, 2766,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1138,
	-1, 2767,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1140,
	-1, 2777,
	180, 0,
	-2, 1172,
	-1, 2865,
	180, 0,
	-2, 1173,
	-1, 2963,
	38, 0,
	156, 0,
	201, 0,
	314, 0,
	388, 0,
	396, 0,
	-2, 1653,
}

const sqlPrivate = 57344

const sqlLast = 55793

var sqlAct = [...]int{

	746, 2555, 2805, 1754, 2971, 2962, 2939, 2941, 3025, 1991,
	2720, 2925, 2938, 2972, 2794, 2973, 2036, 1999, 2429, 2961,
	1033, 2757, 2869, 743, 2734, 1090, 2572, 1680, 742, 2081,
	2567, 912, 720, 2329, 1017, 1740, 686, 2513, 738, 2674,
	210, 2689, 2577, 2322, 1517, 210, 2514, 2782, 1878, 1226,
	2362, 1968, 210, 2364, 1988, 2334, 2324, 1054, 2228, 210,
	1387, 210, 1964, 1872, 210, 210, 927, 210, 210, 1392,
	1086, 2187, 2593, 2204, 210, 1311, 2000, 1466, 2654, 1368,
	1470, 1469, 210, 1478, 1475, 1967, 1456, 1898, 1879, 2215,
	921, 517, 1420, 1753, 1314, 2186, 1671, 905, 1752, 1666,
	2123, 514, 538, 27, 1360, 2870, 2482, 1396, 694, 126,
	2077, 1625, 1889, 1951, 469, 2333, 1436, 2298, 1611, 1442,
	1467, 729, 1401, 1403, 1761, 1881, 1925, 1737, 1369, 1779,
	1926, 71, 1149, 1952, 1339, 1773, 550, 1965, 1341, 914,
	1073, 825, 1083, 1101, 1993, 1971, 878, 882, 1378, 1841,
	1849, 1864, 1302, 1800, 206, 860, 596, 710, 576, 1227,
	1610, 200, 210, 210, 737, 1225, 553, 132, 126, 1485,
	590, 1518, 133, 205, 1070, 624, 1359, 2110, 2038, 206,
	858, 1231, 2498, 1493, 511, 2499, 3052, 1953, 1493, 562,
	1858, 2240, 1493, 210, 210, 210, 917, 210, 210, 930,
	930, 1992, 2721, 569, 210, 210, 3046, 3045, 1388, 3022,
	1858, 1858, 1505, 2688, 785, 3019, 2997, 690, 2991, 1450,
	2688, 1491, 1858, 2990, 2987, 2984, 564, 1858, 2988, 2985,
	1858, 2981, 2959, 2392, 685, 1450, 1450, 2340, 2958, 2957,
	545, 2956, 1450, 1505, 2920, 1505, 2907, 690, 2028, 2900,
	1450, 39, 2898, 2688, 2368, 700, 2688, 2896, 1242, 1243,
	2867, 2688, 2921, 2853, 2028, 43, 691, 2601, 924, 2341,
	2841, 2836, 2834, 27, 2688, 1450, 2688, 875, 2824, 126,
	2823, 2816, 1450, 1245, 1450, 1450, 2815, 861, 861, 515,
	2688, 1022, 2788, 544, 678, 2312, 1450, 2768, 2714, 677,
	2710, 2028, 1858, 2687, 1858, 2854, 2621, 2688, 1244, 908,
	2028, 695, 545, 2591, 1445, 2583, 2494, 2584, 206, 2584,
	2495, 2488, 546, 39, 1953, 1858, 1851, 2403, 2353, 58,
	548, 1858, 2304, 1996, 59, 1505, 1132, 43, 2201, 898,
	902, 907, 1858, 862, 2152, 2020, 2151, 2145, 1858, 2485,
	1858, 2146, 2515, 1242, 1243, 1123, 1275, 1276, 1277, 1285,
	1286, 1287, 2114, 2144, 167, 544, 61, 1858, 2115, 2047,
	2027, 1278, 2016, 1858, 2028, 864, 1858, 865, 1245, 1450,
	1450, 1291, 1250, 1959, 880, 1857, 1509, 1450, 735, 1858,
	1510, 2485, 1850, 1858, 546, 1242, 1243, 1589, 2601, 1941,
	169, 58, 548, 1244, 1887, 2470, 59, 1272, 1273, 1274,
	2405, 1264, 1494, 2304, 2080, 2058, 1364, 1494, 1261, 1756,
	1245, 1494, 1124, 2122, 1020, 170, 1120, 1119, 2342, 1118,
	1117, 1116, 1115, 744, 1114, 1113, 1112, 168, 61, 2157,
	2158, 1111, 2175, 2176, 2177, 1244, 161, 2343, 1312, 1110,
	1109, 1108, 1107, 1608, 162, 1106, 1265, 2618, 1105, 1104,
	866, 863, 167, 684, 683, 682, 62, 693, 1267, 1268,
	1269, 1270, 681, 680, 676, 134, 675, 1250, 210, 210,
	210, 917, 917, 210, 674, 673, 210, 672, 671, 210,
	670, 669, 668, 135, 64, 210, 65, 2172, 169, 1282,
	1292, 667, 1272, 1273, 1274, 210, 210, 210, 210, 210,
	917, 917, 1242, 1243, 167, 666, 662, 917, 661, 1250,
	660, 622, 2385, 1288, 1289, 547, 621, 620, 107, 545,
	1124, 1259, 1260, 1875, 167, 168, 1094, 1245, 62, 1266,
	39, 619, 618, 2667, 1280, 2340, 617, 1501, 210, 616,
	169, 1265, 1492, 1776, 43, 615, 1650, 614, 879, 210,
	613, 612, 1244, 2163, 611, 135, 64, 1290, 65, 1963,
	169, 1450, 610, 134, 609, 608, 1059, 1044, 607, 210,
	606, 1279, 544, 605, 604, 603, 167, 168, 602, 601,
	210, 600, 585, 584, 1047, 583, 161, 547, 582, 1087,
	107, 581, 1850, 886, 162, 580, 502, 168, 1777, 2178,
	2628, 546, 1124, 501, 475, 474, 161, 1271, 58, 548,
	473, 463, 169, 59, 162, 134, 462, 461, 2585, 917,
	190, 189, 188, 187, 1266, 186, 1250, 2173, 185, 184,
	183, 1072, 182, 181, 180, 1995, 1077, 1080, 691, 1246,
	1247, 1248, 1249, 1251, 1252, 61, 1102, 1283, 179, 168,
	178, 1272, 1273, 1274, 210, 177, 176, 175, 161, 1312,
	1778, 1775, 174, 173, 172, 171, 162, 2554, 2236, 2120,
	2069, 1960, 1955, 2157, 2158, 1391, 1792, 545, 1790, 1614,
	1788, 1786, 2157, 2158, 1400, 1318, 1147, 516, 39, 2307,
	1163, 1035, 1024, 2978, 2960, 2943, 2932, 1238, 2861, 2837,
	1265, 2751, 43, 1157, 1224, 2742, 2653, 1161, 2157, 2158,
	2174, 2804, 1309, 2652, 2651, 2157, 2158, 2644, 2640, 2639,
	2638, 1281, 928, 1018, 1256, 1257, 1263, 1262, 1258, 1284,
	544, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	2172, 2634, 2857, 2855, 874, 62, 1780, 2633, 2641, 2632,
	1144, 2631, 2624, 2600, 167, 2598, 2479, 2478, 2477, 546,
	2415, 2303, 2235, 2231, 2197, 2185, 58, 548, 1223, 2156,
	2153, 59, 135, 64, 2150, 65, 1246, 1247, 1248, 1249,
	1251, 1252, 2149, 1266, 2147, 2128, 1748, 2127, 2111, 1884,
	169, 1164, 1238, 167, 1322, 1237, 1454, 2163, 1453, 1514,
	1222, 2065, 3050, 61, 547, 3033, 2163, 107, 3032, 1034,
	2169, 2170, 2171, 1315, 2431, 1305, 2951, 2168, 2166, 2167,
	2159, 2160, 2161, 2162, 2164, 2165, 2946, 168, 2902, 169,
	2157, 2158, 2163, 2893, 1774, 2892, 161, 1609, 1927, 2163,
	691, 2872, 2221, 2888, 162, 210, 2076, 2887, 2881, 2878,
	210, 2852, 678, 2157, 2158, 2851, 1742, 677, 2033, 2800,
	1234, 1235, 1239, 2779, 2729, 134, 168, 1375, 2725, 2723,
	2709, 2693, 1366, 2649, 2602, 161, 210, 2570, 2562, 2561,
	2173, 2741, 2559, 162, 2534, 2533, 2523, 2522, 2490, 2398,
	1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 2359,
	2287, 2357, 2750, 62, 134, 2271, 2173, 1749, 2250, 2249,
	2200, 2184, 2137, 2173, 2136, 2133, 2107, 2102, 1342, 1347,
	2035, 1242, 1243, 1869, 1856, 1337, 1784, 1462, 1340, 1329,
	135, 64, 1328, 65, 1343, 1242, 1243, 2250, 1372, 1373,
	1390, 1327, 1350, 1385, 1326, 1389, 1245, 1367, 1358, 1357,
	1353, 167, 1352, 1351, 2163, 1349, 1348, 1345, 1344, 1335,
	1245, 1334, 547, 2174, 1333, 107, 1332, 1331, 1330, 1386,
	1093, 1244, 1319, 1306, 1305, 861, 126, 2163, 1143, 1128,
	1098, 2626, 2597, 2497, 2493, 1244, 2113, 169, 2030, 2174,
	1870, 1315, 2157, 2158, 2355, 1303, 2174, 1397, 1160, 2046,
	2325, 2747, 2604, 1363, 2603, 691, 2500, 1608, 1415, 1953,
	917, 210, 1361, 1391, 1138, 930, 1419, 1355, 2830, 2157,
	2158, 1394, 1608, 1356, 168, 210, 930, 210, 210, 2291,
	1365, 1608, 2286, 161, 1220, 2282, 2270, 2192, 2038, 1595,
	2191, 162, 2190, 2086, 2045, 1250, 1929, 1582, 210, 210,
	1463, 2173, 1156, 2532, 1354, 210, 1471, 210, 2370, 210,
	2783, 856, 134, 210, 1324, 1474, 2161, 2162, 2164, 2165,
	2168, 2166, 2167, 2159, 2160, 2161, 2162, 2164, 2165, 1762,
	2281, 1432, 1992, 196, 736, 1791, 2433, 1789, 880, 1787,
	1785, 1409, 1508, 1332, 857, 1332, 2168, 2166, 2167, 2159,
	2160, 2161, 2162, 2164, 2165, 2167, 2159, 2160, 2161, 2162,
	2164, 2165, 210, 210, 210, 210, 2118, 1443, 2989, 2803,
	917, 1214, 210, 210, 1338, 206, 210, 210, 2858, 2856,
	1482, 1515, 210, 1480, 2174, 2986, 2336, 1584, 2509, 2979,
	2935, 2568, 2021, 2163, 195, 1572, 3013, 1776, 3012, 1459,
	1168, 2906, 873, 197, 930, 2701, 1212, 1523, 510, 481,
	2048, 1200, 3049, 1199, 210, 2380, 910, 850, 2718, 210,
	2829, 848, 210, 1635, 2828, 210, 2826, 210, 2825, 210,
	2548, 210, 1900, 210, 1449, 1604, 1416, 2980, 1489, 1596,
	846, 1989, 2543, 210, 2542, 210, 1213, 2506, 2505, 1321,
	1512, 1072, 1777, 210, 210, 210, 2132, 1158, 2131, 1574,
	2130, 2129, 1404, 1413, 843, 1405, 1576, 2173, 2089, 852,
	2019, 2159, 2160, 2161, 2162, 2164, 2165, 206, 1487, 1484,
	1946, 210, 1940, 1936, 1414, 930, 206, 1917, 509, 480,
	199, 1586, 2166, 2167, 2159, 2160, 2161, 2162, 2164, 2165,
	1724, 1362, 1159, 1019, 198, 1599, 1598, 1836, 1608, 1605,
	1542, 1642, 879, 1903, 1778, 1775, 1835, 1653, 491, 1834,
	1134, 1523, 1523, 2860, 1511, 1682, 1647, 1607, 1037, 664,
	2383, 1513, 1144, 1573, 1166, 1950, 206, 1891, 1583, 1496,
	2905, 194, 1498, 1648, 1616, 1500, 1397, 1406, 2537, 1503,
	2174, 1891, 1644, 2356, 1309, 2807, 2553, 886, 1408, 930,
	1612, 1600, 1890, 1766, 1248, 1249, 1251, 1252, 1739, 1047,
	1618, 1198, 1739, 559, 1958, 1910, 192, 574, 2954, 1798,
	575, 1252, 704, 1624, 2525, 492, 1746, 1241, 1803, 1803,
	1909, 1744, 1814, 1816, 575, 1821, 1488, 1621, 2425, 1602,
	1780, 2975, 1844, 210, 1410, 210, 195, 1780, 2917, 1142,
	1135, 1848, 2078, 2079, 476, 2031, 193, 3004, 2331, 2278,
	2884, 2273, 1431, 1417, 1542, 1542, 1652, 1137, 1823, 930,
	1651, 210, 485, 210, 1902, 2918, 1762, 1670, 2165, 678,
	210, 930, 678, 678, 1662, 210, 1933, 1663, 1664, 1757,
	1759, 1609, 1927, 210, 1672, 1679, 2262, 3012, 1799, 210,
	2159, 2160, 2161, 2162, 2164, 2165, 1609, 1927, 2051, 1219,
	689, 210, 191, 1195, 917, 1609, 1927, 691, 1543, 1434,
	2053, 1883, 691, 1649, 1780, 210, 930, 1833, 1774, 1411,
	2261, 210, 1411, 2332, 1750, 1174, 1892, 1871, 1747, 1646,
	1523, 1048, 1051, 210, 485, 1603, 210, 2379, 1439, 2976,
	2054, 1461, 2372, 2381, 1336, 2268, 508, 503, 2290, 484,
	1196, 2544, 2052, 1876, 3003, 2759, 1980, 1861, 3035, 210,
	861, 210, 1937, 210, 688, 1901, 210, 1411, 210, 1811,
	210, 2331, 210, 210, 2422, 210, 917, 917, 917, 1948,
	1493, 917, 1919, 2763, 2774, 1947, 210, 1914, 1904, 1906,
	1846, 1845, 196, 1854, 1855, 1167, 844, 691, 1934, 1862,
	844, 1634, 2014, 2015, 1866, 1867, 2977, 1242, 1243, 494,
	493, 1943, 2375, 1394, 1211, 908, 507, 2526, 2832, 845,
	1895, 484, 1978, 1928, 1930, 1931, 1932, 690, 1451, 1912,
	1919, 1036, 1245, 1542, 1735, 1918, 2423, 508, 2808, 1457,
	1407, 464, 2010, 844, 2758, 854, 210, 1935, 853, 1300,
	2135, 1721, 1733, 2535, 2264, 481, 1865, 1244, 1994, 690,
	1994, 1882, 197, 1920, 880, 2012, 2606, 1888, 2592, 1435,
	479, 2099, 1411, 2613, 2266, 3002, 1133, 2974, 2023, 1171,
	880, 2017, 697, 1136, 654, 930, 2005, 210, 126, 2097,
	3011, 3009, 665, 478, 210, 126, 2091, 210, 1441, 2374,
	1738, 1183, 1998, 3028, 699, 477, 2007, 507, 2008, 2733,
	2009, 1745, 2731, 2371, 2265, 2011, 1440, 210, 210, 210,
	1102, 210, 1780, 2022, 2018, 1986, 1240, 481, 1153, 2032,
	486, 1250, 1609, 1606, 2760, 480, 558, 1620, 698, 510,
	210, 1230, 479, 1437, 1729, 482, 2034, 687, 1141, 199,
	1984, 1377, 1730, 1465, 505, 1731, 1272, 1273, 1274, 1736,
	2041, 1374, 2042, 198, 1438, 478, 1343, 1615, 1350, 1719,
	1722, 1131, 655, 1340, 1122, 472, 2037, 477, 1587, 2647,
	2063, 2094, 2040, 2064, 1175, 2373, 1377, 3036, 2071, 506,
	1229, 2049, 2095, 2764, 1208, 2295, 2100, 1447, 3041, 2818,
	194, 2817, 486, 2299, 2066, 1265, 1154, 480, 2068, 1494,
	1155, 126, 1381, 2798, 1718, 126, 2105, 482, 2875, 509,
	2508, 2697, 465, 2108, 2246, 2466, 2700, 1896, 2092, 504,
	510, 1176, 2242, 2699, 1173, 192, 1381, 1987, 879, 1384,
	1985, 1483, 2125, 2126, 1473, 505, 1472, 1381, 1681, 1468,
	1464, 2421, 1404, 1921, 879, 1405, 2926, 1379, 2075, 1658,
	202, 1639, 1229, 1384, 1165, 195, 654, 2073, 1228, 2229,
	1382, 3026, 1209, 2121, 1384, 193, 1590, 2573, 2735, 2799,
	506, 1863, 2252, 886, 1732, 1896, 699, 500, 1266, 1380,
	1594, 1734, 1379, 2251, 1382, 2084, 656, 1230, 1617, 886,
	2218, 466, 2183, 1148, 2648, 1382, 2217, 1860, 567, 495,
	509, 2003, 1844, 1844, 1844, 1859, 1962, 2199, 1069, 2090,
	504, 2096, 1763, 930, 1380, 3040, 561, 1720, 2098, 2202,
	2211, 1961, 3027, 1181, 2209, 2210, 1210, 1406, 1896, 210,
	1228, 1067, 210, 2467, 691, 2696, 467, 1659, 1408, 1592,
	2468, 210, 2230, 688, 655, 2117, 1383, 2698, 1153, 210,
	210, 210, 3029, 1593, 3, 210, 2556, 2305, 210, 1058,
	543, 35, 2233, 1922, 1923, 210, 210, 210, 210, 210,
	1383, 542, 34, 541, 31, 1057, 3016, 696, 210, 657,
	2225, 1383, 540, 77, 1410, 210, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 1886, 1523, 2722, 210, 917, 2294,
	2224, 210, 539, 76, 2655, 2223, 2243, 930, 2483, 2226,
	1783, 210, 2730, 2300, 2234, 658, 930, 2220, 3018, 2206,
	691, 930, 730, 2778, 930, 1205, 1154, 2213, 2214, 2216,
	1155, 2219, 536, 22, 210, 2272, 210, 1203, 210, 2203,
	210, 917, 917, 917, 2796, 210, 2646, 210, 2194, 2195,
	2196, 210, 1193, 842, 1021, 2552, 210, 2188, 210, 2397,
	1448, 1191, 207, 1189, 2148, 210, 2232, 470, 656, 1411,
	2288, 2237, 1187, 1153, 487, 2797, 2269, 537, 23, 566,
	210, 513, 917, 554, 1068, 2101, 513, 207, 2327, 554,
	572, 2283, 2338, 2039, 2279, 2267, 579, 560, 1542, 210,
	210, 535, 29, 1945, 599, 2285, 2274, 1066, 534, 20,
	1185, 1047, 1916, 1179, 2361, 2277, 2275, 1455, 2306, 2309,
	2276, 2284, 1065, 1218, 2289, 896, 880, 1523, 2247, 496,
	210, 35, 532, 19, 880, 880, 1217, 2313, 880, 2310,
	2301, 2326, 34, 654, 31, 210, 2317, 1129, 2189, 2248,
	1409, 1154, 1633, 77, 1047, 1155, 1626, 2254, 2067, 2258,
	2259, 657, 1204, 699, 2061, 2043, 2350, 1636, 1575, 533,
	18, 2360, 1325, 76, 1202, 1409, 497, 522, 15, 2970,
	2344, 930, 1782, 2337, 513, 513, 2367, 691, 2550, 1192,
	1407, 1446, 892, 847, 849, 2923, 210, 658, 1190, 2671,
	1188, 1523, 2530, 22, 1443, 2528, 2507, 2400, 2059, 1186,
	1443, 2321, 498, 2378, 499, 470, 470, 470, 2319, 922,
	470, 2417, 2418, 2419, 2376, 2377, 207, 1023, 1990, 2386,
	1542, 655, 523, 16, 2384, 1982, 126, 2382, 1523, 1523,
	2390, 531, 56, 530, 55, 2388, 1981, 1184, 23, 2685,
	1178, 1404, 521, 54, 1405, 1979, 1523, 1523, 1977, 1064,
	2354, 2404, 2480, 2323, 1507, 1506, 1504, 529, 12, 2406,
	2409, 1502, 29, 1499, 2682, 1497, 520, 49, 1495, 20,
	1444, 1433, 2441, 1520, 1430, 210, 1632, 527, 46, 2345,
	2346, 2347, 1523, 2348, 2349, 210, 2436, 930, 2434, 1418,
	879, 2430, 2239, 19, 1542, 1412, 2410, 1896, 879, 879,
	2443, 2846, 879, 2502, 2445, 2683, 3013, 2253, 2472, 2256,
	2424, 2426, 2427, 528, 47, 519, 48, 1232, 526, 7,
	2082, 2749, 2748, 2496, 2520, 2541, 1406, 1613, 2471, 2519,
	18, 1542, 1542, 2473, 2594, 886, 2848, 1408, 15, 525,
	6, 2547, 2481, 886, 886, 656, 1891, 886, 1908, 1542,
	1542, 2501, 2582, 2538, 2489, 210, 210, 1907, 210, 126,
	2551, 1672, 2437, 210, 2044, 2545, 2486, 2487, 2484, 2546,
	930, 2716, 930, 2503, 2549, 917, 2492, 524, 37, 1672,
	2446, 1891, 2563, 1410, 1949, 1542, 2511, 1520, 1520, 2083,
	2886, 210, 1905, 16, 1944, 870, 1939, 1233, 2335, 2586,
	1915, 2690, 56, 549, 55, 1177, 2575, 2335, 1461, 518,
	36, 1580, 1581, 54, 2579, 2476, 2863, 871, 2656, 210,
	1919, 1924, 930, 210, 210, 930, 210, 2578, 12, 2678,
	2574, 2536, 2679, 2569, 210, 2571, 2208, 49, 657, 2558,
	2557, 2565, 2560, 930, 1911, 1236, 1942, 2566, 46, 1913,
	1242, 1243, 1242, 1243, 2922, 2728, 1997, 2576, 1983, 2610,
	1976, 2580, 1847, 1585, 1938, 2588, 2681, 2587, 1411, 1516,
	568, 2615, 3024, 2351, 658, 2684, 2595, 1245, 3039, 2157,
	2158, 1312, 210, 880, 47, 2599, 48, 1523, 2607, 7,
	470, 1043, 470, 2620, 1402, 470, 2611, 872, 922, 2206,
	1244, 1062, 1244, 1242, 1243, 2605, 2616, 470, 2056, 2055,
	6, 1170, 2596, 2608, 2428, 2358, 1169, 470, 470, 470,
	470, 922, 2056, 2057, 1813, 1772, 1207, 2629, 2529, 1206,
	2531, 2420, 1322, 1320, 2745, 2590, 2013, 1216, 1215, 2297,
	1201, 210, 1197, 1194, 2297, 1180, 1140, 2302, 37, 1588,
	855, 930, 210, 663, 2806, 2260, 210, 210, 210, 1182,
	599, 2222, 1868, 2916, 2635, 2645, 1520, 2680, 2134, 2868,
	2773, 470, 1781, 1323, 210, 52, 2516, 723, 2672, 210,
	36, 210, 2510, 1970, 210, 210, 210, 210, 210, 1407,
	1542, 1139, 1969, 210, 210, 917, 2520, 933, 1597, 930,
	2666, 2519, 599, 917, 2661, 930, 880, 2663, 2691, 2670,
	2694, 747, 210, 210, 2664, 2658, 2659, 1802, 1673, 749,
	1521, 2662, 752, 1661, 751, 917, 750, 2660, 2717, 1522,
	1346, 748, 1519, 2520, 1099, 210, 2001, 642, 2519, 1601,
	1743, 1760, 2116, 2657, 2520, 1316, 715, 2724, 727, 2519,
	2711, 726, 210, 210, 917, 917, 2737, 879, 2732, 1758,
	2695, 2739, 2715, 1127, 714, 2227, 2762, 2330, 2740, 1657,
	2704, 2705, 2074, 2746, 1654, 2727, 470, 2527, 483, 930,
	2736, 2738, 2154, 1097, 1830, 1822, 1818, 1221, 1301, 2521,
	2744, 2712, 2002, 1162, 2339, 2029, 2765, 2062, 2726, 1665,
	869, 868, 886, 2753, 2413, 2752, 867, 1896, 1047, 2539,
	2785, 2940, 2937, 2761, 1591, 2050, 1294, 2772, 930, 719,
	2207, 2539, 210, 2308, 210, 2539, 930, 210, 1041, 1293,
	2539, 851, 2877, 1152, 886, 210, 2743, 1151, 1523, 1150,
	2245, 930, 3034, 2003, 2780, 1824, 2885, 2814, 2669, 2524,
	880, 2934, 166, 2793, 886, 163, 2786, 2787, 165, 164,
	2293, 80, 2520, 2827, 33, 32, 886, 2519, 2811, 2810,
	886, 2812, 2703, 2791, 106, 886, 105, 104, 103, 2708,
	879, 2789, 210, 102, 210, 2809, 101, 917, 100, 99,
	1523, 2790, 210, 98, 97, 96, 95, 2520, 94, 2520,
	93, 2831, 2519, 2520, 2519, 92, 91, 90, 2519, 89,
	88, 2833, 87, 2835, 930, 86, 85, 2839, 2844, 84,
	2504, 83, 82, 595, 592, 886, 79, 78, 30, 25,
	110, 111, 2845, 2850, 210, 24, 75, 74, 28, 2849,
	210, 1542, 2843, 17, 11, 21, 2578, 210, 2859, 131,
	130, 129, 128, 127, 14, 13, 125, 2880, 124, 123,
	2862, 2874, 122, 121, 120, 10, 8, 579, 1523, 109,
	9, 2756, 513, 2369, 2866, 68, 210, 210, 2847, 69,
	26, 2838, 2873, 210, 42, 41, 40, 2897, 2871, 2899,
	108, 157, 156, 1542, 917, 155, 892, 154, 470, 210,
	151, 2883, 917, 917, 153, 2882, 150, 210, 2668, 210,
	1896, 210, 152, 2894, 2891, 2792, 149, 2919, 119, 159,
	158, 2901, 2904, 2820, 879, 2903, 2912, 2910, 2911, 210,
	147, 2702, 210, 2909, 145, 210, 146, 930, 148, 2707,
	144, 2929, 143, 160, 118, 2942, 2944, 2945, 117, 2947,
	116, 2948, 115, 2950, 114, 928, 113, 5, 1018, 2,
	2949, 2521, 2931, 1, 2936, 1896, 0, 2955, 2280, 886,
	0, 1542, 210, 0, 2821, 2822, 2520, 0, 0, 2953,
	0, 2519, 1421, 0, 0, 0, 0, 2335, 2967, 0,
	2952, 2969, 0, 2913, 2968, 2914, 0, 210, 2521, 1425,
	2994, 0, 2995, 0, 2982, 210, 886, 0, 2993, 2521,
	0, 2314, 2315, 2316, 0, 0, 0, 0, 2930, 3001,
	0, 210, 2998, 2999, 3000, 2520, 0, 0, 0, 0,
	2519, 0, 0, 207, 0, 3007, 0, 3010, 3008, 2996,
	1422, 1520, 0, 886, 3014, 2942, 3017, 1023, 3015, 470,
	1460, 0, 2352, 0, 886, 3020, 3021, 0, 3023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2890, 3031,
	1479, 1479, 3030, 0, 1896, 3037, 0, 470, 0, 470,
	3038, 470, 0, 2992, 0, 513, 3042, 3043, 0, 3044,
	2908, 0, 0, 0, 0, 0, 0, 2024, 0, 0,
	0, 0, 1426, 0, 3051, 3047, 3048, 0, 39, 0,
	0, 0, 0, 3053, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 2521, 0, 0,
	1824, 1824, 0, 0, 599, 207, 1023, 554, 2719, 0,
	0, 0, 545, 0, 207, 1023, 0, 0, 922, 470,
	2025, 0, 0, 39, 599, 0, 0, 2539, 0, 0,
	1427, 1428, 2521, 0, 2521, 0, 0, 43, 2521, 1423,
	0, 0, 886, 1520, 0, 0, 2103, 2104, 0, 2026,
	0, 0, 0, 0, 0, 0, 599, 548, 0, 0,
	0, 470, 0, 0, 207, 544, 1424, 470, 0, 470,
	0, 470, 886, 470, 0, 470, 0, 886, 0, 886,
	211, 0, 2770, 886, 0, 1637, 0, 1638, 1824, 1824,
	1824, 0, 0, 61, 546, 470, 470, 470, 2889, 0,
	0, 58, 548, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 2770, 0, 599, 0, 0, 0, 0, 0, 1681,
	0, 0, 0, 0, 2180, 2181, 2182, 0, 61, 2539,
	0, 0, 1429, 0, 1681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 0, 1520, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 2157, 2158, 0, 2175, 2176,
	2177, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2617, 0, 0, 0, 0, 1520, 0,
	468, 2521, 0, 0, 0, 0, 0, 1018, 0, 0,
	135, 64, 0, 65, 0, 0, 2685, 2003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 167, 0, 2172, 0, 579, 0, 513, 0, 0,
	0, 2682, 547, 0, 2675, 107, 886, 0, 0, 0,
	2521, 0, 892, 0, 0, 135, 64, 2673, 65, 0,
	0, 0, 2677, 513, 0, 513, 918, 169, 892, 931,
	931, 0, 470, 0, 0, 0, 167, 1899, 0, 0,
	0, 0, 2683, 0, 0, 470, 0, 547, 0, 0,
	107, 470, 0, 0, 0, 886, 0, 0, 0, 2163,
	0, 0, 0, 470, 168, 0, 0, 2676, 0, 0,
	0, 0, 169, 161, 0, 0, 0, 470, 0, 0,
	0, 162, 0, 1954, 0, 0, 0, 0, 0, 0,
	1681, 0, 0, 0, 0, 1966, 0, 0, 1023, 0,
	0, 0, 134, 1824, 1824, 2178, 0, 0, 900, 168,
	0, 0, 0, 926, 0, 1242, 1243, 0, 161, 0,
	0, 1899, 0, 513, 0, 470, 162, 0, 470, 0,
	470, 0, 470, 2173, 470, 470, 0, 922, 0, 0,
	1245, 0, 0, 0, 0, 0, 0, 134, 1899, 2395,
	2396, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 1244, 2678, 0, 0, 2679,
	0, 0, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
	1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
	1824, 0, 1824, 0, 0, 2713, 0, 0, 0, 0,
	0, 0, 0, 2681, 0, 0, 0, 0, 554, 0,
	0, 0, 2684, 0, 0, 0, 2174, 0, 2447, 2448,
	2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458,
	2459, 2460, 2461, 2462, 2463, 2464, 2465, 0, 2469, 1250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 2754, 2755, 1023, 0, 0, 1023,
	0, 0, 0, 0, 1272, 1273, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	470, 470, 0, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 0, 2680, 142, 0, 0, 0, 0,
	38, 918, 918, 1265, 0, 0, 2169, 2170, 2171, 0,
	0, 39, 137, 2168, 2166, 2167, 2159, 2160, 2161, 2162,
	2164, 2165, 0, 2157, 2158, 43, 2175, 2176, 2177, 0,
	918, 918, 0, 0, 0, 0, 0, 918, 919, 45,
	139, 932, 932, 0, 0, 0, 0, 0, 0, 0,
	1376, 44, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 53, 0,
	0, 2172, 57, 1039, 0, 140, 1266, 0, 1056, 58,
	70, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	1076, 1076, 1076, 926, 0, 0, 0, 60, 0, 2157,
	2158, 0, 2175, 2176, 2177, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2163, 0, 918,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 1125, 0, 0, 0, 0, 0,
	2179, 0, 0, 0, 892, 0, 0, 2172, 0, 0,
	0, 0, 892, 892, 0, 0, 892, 702, 0, 0,
	0, 513, 0, 2178, 513, 1254, 1246, 1247, 1248, 1249,
	1251, 1252, 0, 513, 0, 0, 0, 0, 0, 0,
	0, 470, 1899, 2241, 0, 0, 0, 1899, 0, 0,
	2241, 2173, 0, 0, 0, 0, 62, 1899, 2241, 1899,
	2241, 2241, 0, 63, 1520, 0, 0, 0, 0, 0,
	470, 0, 0, 2163, 0, 0, 0, 1460, 0, 0,
	0, 0, 73, 135, 64, 0, 65, 0, 66, 470,
	0, 0, 141, 922, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 470, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 107, 2178,
	0, 0, 0, 0, 0, 0, 1479, 138, 1479, 0,
	470, 0, 470, 0, 2174, 0, 0, 470, 0, 470,
	169, 0, 0, 922, 0, 0, 0, 2173, 1899, 0,
	513, 0, 0, 919, 919, 1242, 1243, 1899, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 1023, 0, 0, 0, 0, 168, 0, 1824,
	1245, 0, 919, 919, 0, 0, 161, 0, 0, 919,
	0, 2365, 1023, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1244, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 134, 1824, 0, 4, 0,
	0, 0, 2387, 0, 0, 2777, 0, 0, 0, 0,
	2174, 0, 0, 0, 2169, 2170, 2171, 470, 0, 0,
	0, 2168, 2166, 2167, 2159, 2160, 2161, 2162, 2164, 2165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2801, 0, 0, 0, 0, 0, 0, 0,
	1267, 1268, 1269, 1270, 0, 0, 0, 0, 0, 1250,
	0, 0, 0, 0, 0, 0, 0, 0, 2432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 1272, 1273, 1274, 0, 0, 0,
	0, 1824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 0,
	2169, 2170, 2171, 0, 0, 0, 0, 2168, 2166, 2167,
	2159, 2160, 2161, 2162, 2164, 2165, 1025, 1027, 1030, 0,
	0, 0, 0, 1265, 0, 0, 0, 2865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 892, 0, 0, 0, 931, 0, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 2540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2540, 1266, 0, 0, 2540,
	0, 1126, 0, 0, 2540, 0, 0, 1130, 0, 0,
	0, 623, 0, 654, 0, 0, 0, 1899, 1479, 0,
	1479, 0, 0, 0, 0, 470, 0, 0, 0, 0,
	0, 0, 1458, 630, 0, 702, 0, 0, 0, 702,
	918, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 1899, 892, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1486, 0, 0, 629, 0, 0,
	0, 0, 631, 0, 931, 0, 659, 0, 0, 0,
	0, 1023, 637, 638, 0, 922, 470, 649, 470, 0,
	0, 0, 0, 0, 0, 0, 470, 0, 0, 0,
	0, 655, 632, 1255, 1253, 1254, 1246, 1247, 1248, 1249,
	1251, 1252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 643, 0, 0, 0,
	0, 0, 1578, 0, 0, 0, 0, 0, 2157, 2158,
	0, 2175, 2176, 2177, 2636, 0, 1295, 1296, 1297, 1298,
	1299, 0, 633, 0, 0, 931, 0, 0, 627, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 634, 635, 0, 1622, 0, 0, 0, 0, 0,
	1627, 0, 1628, 0, 1629, 0, 1630, 0, 1631, 0,
	0, 0, 0, 641, 0, 0, 2172, 0, 892, 0,
	636, 0, 0, 1023, 0, 0, 0, 0, 1640, 1056,
	0, 0, 0, 640, 513, 0, 0, 0, 1899, 2241,
	1899, 0, 0, 0, 0, 656, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 2518, 1023, 0, 0, 0,
	0, 1899, 0, 2241, 0, 0, 1023, 1023, 470, 1899,
	2241, 0, 919, 0, 0, 470, 470, 932, 0, 0,
	0, 0, 2163, 0, 0, 0, 0, 0, 932, 0,
	639, 0, 2518, 0, 1023, 1966, 0, 0, 0, 0,
	0, 0, 0, 2518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 0, 1899, 0, 931,
	0, 0, 0, 0, 646, 0, 0, 0, 1370, 1370,
	1370, 931, 0, 0, 2365, 2365, 625, 644, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 724, 72, 2173, 0, 0, 0,
	0, 0, 647, 0, 918, 645, 0, 0, 0, 652,
	0, 0, 0, 0, 658, 0, 931, 0, 0, 0,
	648, 0, 919, 0, 0, 2157, 2158, 0, 2175, 2176,
	2177, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 2401, 1899, 0, 2241, 0, 0, 2795,
	0, 0, 0, 0, 72, 1885, 932, 470, 0, 0,
	0, 2518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 918, 918, 2174,
	0, 918, 0, 2172, 0, 0, 0, 0, 0, 0,
	0, 2540, 0, 0, 0, 0, 2518, 0, 2518, 0,
	926, 0, 2518, 0, 470, 0, 470, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2006, 2163,
	0, 1076, 0, 1076, 0, 1076, 2432, 926, 926, 0,
	0, 0, 513, 0, 881, 72, 0, 0, 0, 2795,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2169,
	2170, 2171, 0, 0, 0, 931, 2168, 2166, 2167, 2159,
	2160, 2161, 2162, 2164, 2165, 2178, 0, 0, 1899, 2241,
	0, 0, 0, 2540, 0, 470, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2241, 0, 2173, 0, 0, 0, 0, 0, 1023,
	0, 1023, 0, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2927, 0, 0, 1023, 0, 0, 470, 0, 702,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2060, 0, 0, 2518, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 2157, 2158, 0, 2175,
	2176, 2177, 0, 932, 2432, 0, 0, 0, 0, 0,
	0, 0, 2070, 926, 2072, 0, 2174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 2518, 2085, 919, 1899, 0, 1655,
	0, 1660, 0, 0, 0, 0, 0, 1667, 932, 0,
	0, 0, 0, 2795, 2172, 0, 0, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 0, 1723, 0, 1725, 1726, 1727, 1728, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 919,
	919, 0, 0, 919, 1751, 0, 2169, 2170, 2171, 0,
	2163, 1308, 0, 2168, 2166, 2167, 2159, 2160, 2161, 2162,
	2164, 2165, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 1793, 1794, 1795, 1796, 1797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1820, 0, 1832, 0, 2178, 0, 1837, 1842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 918, 0,
	0, 692, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 931, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2238, 0, 0, 0, 0, 0,
	0, 918, 918, 918, 1956, 1957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2174, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2292, 1242, 1243, 0,
	1275, 1276, 1277, 1285, 1286, 1287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 1245, 2311, 0, 1291, 0, 0, 0, 0,
	2318, 0, 2320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1244, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 2169, 2170, 2171,
	0, 0, 1261, 0, 2168, 2166, 2167, 2159, 2160, 2161,
	2162, 2164, 2165, 0, 0, 0, 0, 0, 0, 679,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 1307, 0, 0, 0, 0, 0, 0,
	1313, 0, 1267, 1268, 1269, 1270, 0, 0, 0, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 0, 0,
	2391, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 1282, 1292, 0, 1272, 1273, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	0, 0, 0, 0, 0, 1259, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 0, 1265, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2087,
	2088, 1290, 0, 0, 0, 2093, 0, 0, 0, 0,
	919, 0, 0, 0, 0, 1279, 0, 0, 0, 932,
	0, 0, 0, 0, 2106, 0, 0, 0, 932, 0,
	0, 0, 0, 932, 0, 0, 932, 2112, 0, 0,
	0, 0, 0, 2119, 0, 0, 0, 0, 2124, 0,
	0, 1271, 72, 919, 919, 919, 0, 0, 1393, 0,
	0, 0, 0, 0, 0, 2138, 0, 0, 1266, 0,
	931, 0, 931, 0, 0, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1842,
	1842, 1842, 931, 0, 0, 931, 0, 0, 0, 0,
	0, 1370, 0, 0, 0, 0, 0, 0, 0, 2212,
	0, 0, 0, 931, 0, 0, 0, 0, 2564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 1256, 1257,
	1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 0, 0, 0, 0, 0, 0,
	0, 2263, 2143, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2609,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 931,
	0, 0, 0, 918, 0, 931, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 702, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 918, 0, 2389, 0, 0,
	0, 1667, 0, 0, 0, 0, 0, 2393, 0, 0,
	2394, 2706, 0, 0, 0, 0, 0, 0, 1056, 931,
	0, 0, 2399, 0, 0, 0, 0, 0, 0, 0,
	0, 2407, 932, 0, 932, 0, 0, 919, 0, 2411,
	0, 0, 0, 2212, 0, 0, 679, 0, 0, 679,
	679, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 2438, 2439, 2440, 0, 931, 0, 0, 2442,
	0, 0, 0, 0, 0, 0, 2444, 0, 0, 0,
	0, 931, 0, 0, 932, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 1741, 0, 2474,
	2475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 1307, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	2802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2840, 0, 2842,
	1393, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	0, 0, 918, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 1370, 72, 0, 0, 0, 919, 0, 0,
	0, 932, 0, 2589, 0, 919, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 72, 0, 0, 0, 0, 0, 2895, 0,
	0, 0, 0, 0, 0, 0, 919, 919, 2619, 0,
	0, 0, 2622, 2623, 72, 0, 2625, 0, 0, 0,
	0, 72, 0, 2627, 0, 0, 2915, 2630, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2637, 0, 0, 1242, 1243, 0,
	2933, 0, 0, 1285, 1286, 1287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 1245, 0, 0, 1291, 0, 0, 932, 0,
	0, 2650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 1244, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 1243, 2692, 1275,
	1276, 1277, 1285, 1286, 1287, 0, 0, 72, 0, 919,
	0, 72, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 1245, 0, 0, 1291, 0, 0, 0, 0, 0,
	0, 0, 1267, 1268, 1269, 1270, 932, 0, 0, 0,
	0, 1250, 0, 0, 0, 0, 1244, 0, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 0, 0, 0,
	0, 1261, 0, 1282, 1292, 0, 1272, 1273, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1741, 2766, 2767,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 1267, 1268, 1269, 1270, 1265, 919, 1307, 0, 0,
	1250, 0, 2776, 0, 919, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2784, 0, 0, 0,
	0, 0, 1282, 1292, 0, 1272, 1273, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 0, 0, 0, 1259, 1260, 0, 0, 0, 0,
	2819, 1271, 0, 0, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 0, 1266, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 1279, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 881, 881, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	0, 2876, 0, 0, 2879, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	1283, 0, 0, 1284, 0, 1255, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 1281, 0, 0, 1256, 1257, 1263,
	1262, 1258, 1284, 0, 1255, 1253, 1254, 1246, 1247, 1248,
	1249, 1251, 1252, 0, 0, 0, 0, 0, 2966, 2966,
	0, 2142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2983, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 2966, 0, 0, 0, 0, 0,
	1771, 0, 745, 733, 734, 731, 732, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 1768, 216, 0, 0, 0, 0, 780, 725,
	0, 0, 0, 217, 218, 219, 421, 799, 765, 800,
	753, 786, 801, 0, 223, 755, 754, 226, 227, 228,
	728, 779, 802, 803, 427, 2966, 229, 784, 0, 770,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 826, 242, 243,
	244, 773, 771, 772, 776, 0, 774, 775, 245, 246,
	471, 247, 787, 249, 804, 805, 711, 250, 0, 251,
	0, 252, 1769, 0, 788, 254, 0, 255, 0, 0,
	0, 716, 256, 257, 259, 260, 258, 261, 806, 807,
	740, 827, 0, 0, 0, 72, 0, 262, 263, 808,
	789, 790, 0, 266, 0, 267, 0, 0, 828, 268,
	0, 269, 809, 881, 436, 0, 270, 271, 272, 273,
	274, 275, 781, 783, 830, 0, 764, 0, 0, 0,
	0, 276, 278, 285, 0, 829, 279, 810, 768, 791,
	792, 793, 794, 811, 0, 769, 0, 286, 831, 832,
	287, 288, 289, 833, 795, 796, 0, 0, 292, 293,
	294, 0, 296, 295, 0, 812, 834, 297, 298, 835,
	0, 299, 300, 0, 0, 301, 0, 302, 713, 712,
	303, 304, 306, 757, 305, 836, 308, 309, 311, 310,
	708, 0, 837, 741, 782, 312, 813, 313, 314, 0,
	766, 767, 0, 0, 317, 318, 0, 0, 319, 445,
	838, 320, 839, 814, 321, 322, 323, 324, 325, 326,
	327, 0, 328, 815, 329, 448, 330, 0, 331, 332,
	333, 334, 335, 816, 336, 337, 881, 338, 339, 340,
	341, 342, 0, 344, 345, 343, 346, 347, 348, 349,
	0, 350, 840, 0, 351, 352, 353, 717, 354, 0,
	358, 359, 360, 361, 362, 363, 364, 0, 370, 371,
	758, 759, 760, 761, 366, 372, 373, 777, 374, 355,
	356, 375, 841, 376, 817, 762, 378, 0, 387, 379,
	380, 381, 357, 382, 385, 797, 383, 0, 384, 818,
	0, 388, 389, 0, 390, 391, 392, 393, 394, 395,
	756, 397, 0, 819, 820, 798, 0, 0, 399, 400,
	821, 822, 739, 401, 402, 403, 404, 0, 0, 405,
	406, 407, 409, 778, 410, 0, 763, 411, 412, 413,
	457, 823, 1767, 0, 414, 459, 0, 0, 0, 0,
	415, 416, 460, 417, 418, 419, 709, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 705,
	706, 1770, 0, 0, 0, 0, 0, 0, 718, 1765,
	881, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1741, 212, 213, 214, 215, 934, 216, 935,
	936, 937, 938, 420, 939, 940, 941, 942, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 943, 223,
	224, 225, 226, 227, 228, 944, 945, 425, 426, 427,
	946, 229, 428, 947, 893, 948, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 949, 239, 0, 240,
	241, 950, 826, 242, 243, 244, 951, 952, 954, 953,
	955, 956, 957, 245, 246, 471, 247, 248, 249, 429,
	430, 958, 250, 959, 251, 960, 252, 961, 962, 253,
	254, 963, 255, 964, 0, 965, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 966, 827, 967, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 968,
	267, 969, 970, 828, 268, 971, 269, 435, 972, 436,
	973, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	974, 277, 0, 0, 0, 975, 276, 278, 285, 976,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 977,
	441, 978, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 979, 296, 295, 980,
	442, 834, 297, 298, 835, 981, 299, 300, 982, 983,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 984, 985, 837, 986, 443,
	312, 444, 313, 314, 987, 315, 316, 988, 989, 317,
	318, 990, 991, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 992, 328, 447, 329,
	448, 330, 993, 331, 332, 333, 334, 335, 449, 336,
	337, 994, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 995, 350, 840, 996, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 997, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 998, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 999, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 1000, 384, 452, 1001, 388, 389, 1002, 390,
	391, 392, 393, 394, 395, 396, 397, 1003, 453, 454,
	398, 1004, 1005, 399, 400, 455, 456, 1006, 401, 402,
	403, 404, 1007, 1008, 405, 406, 407, 409, 1009, 410,
	1010, 408, 411, 412, 413, 457, 458, 1011, 1012, 414,
	459, 1013, 1014, 1015, 1016, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 1873, 0, 0, 0, 0, 0, 0, 0, 0,
	1874, 212, 213, 214, 215, 934, 216, 935, 936, 937,
	938, 420, 939, 940, 941, 942, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 943, 223, 224, 225,
	226, 227, 228, 944, 945, 425, 426, 427, 946, 229,
	428, 947, 893, 948, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 949, 239, 0, 240, 241, 950,
	826, 242, 243, 244, 951, 952, 954, 953, 955, 956,
	957, 245, 246, 471, 247, 248, 249, 429, 430, 958,
	250, 959, 251, 960, 252, 961, 962, 253, 254, 963,
	255, 964, 0, 965, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 966, 827, 967, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 968, 267, 969,
	970, 828, 268, 971, 269, 435, 972, 436, 973, 270,
	271, 272, 273, 274, 275, 437, 438, 830, 974, 277,
	0, 0, 0, 975, 276, 278, 285, 976, 829, 279,
	439, 281, 280, 282, 283, 284, 440, 977, 441, 978,
	286, 831, 832, 287, 288, 289, 833, 290, 291, 0,
	0, 292, 293, 294, 979, 296, 295, 980, 442, 834,
	297, 298, 835, 981, 299, 300, 982, 983, 301, 0,
	302, 895, 894, 303, 304, 306, 307, 305, 836, 308,
	309, 311, 310, 984, 985, 837, 986, 443, 312, 444,
	313, 314, 987, 315, 316, 988, 989, 317, 318, 990,
	991, 319, 445, 838, 320, 839, 446, 321, 322, 323,
	324, 325, 326, 327, 992, 328, 447, 329, 448, 330,
	993, 331, 332, 333, 334, 335, 449, 336, 337, 994,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 995, 350, 840, 996, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	997, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	998, 374, 355, 356, 375, 841, 376, 451, 377, 378,
	999, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	1000, 384, 452, 1001, 388, 389, 1002, 390, 391, 392,
	393, 394, 395, 396, 397, 1003, 453, 454, 398, 1004,
	1005, 399, 400, 455, 456, 1006, 401, 402, 403, 404,
	1007, 1008, 405, 406, 407, 409, 1009, 410, 1010, 408,
	411, 412, 413, 457, 458, 1011, 1012, 414, 459, 1013,
	1014, 1015, 1016, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2665,
	212, 213, 214, 215, 934, 216, 935, 936, 937, 938,
	420, 939, 940, 941, 942, 217, 218, 219, 421, 422,
	220, 423, 221, 222, 424, 943, 223, 224, 225, 226,
	227, 228, 944, 945, 425, 426, 427, 946, 229, 428,
	947, 893, 948, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 949, 239, 0, 240, 241, 950, 826,
	242, 243, 244, 951, 952, 954, 953, 955, 956, 957,
	245, 246, 471, 247, 248, 249, 429, 430, 958, 250,
	959, 251, 960, 252, 961, 962, 253, 254, 963, 255,
	964, 0, 965, 431, 256, 257, 259, 260, 258, 261,
	432, 433, 966, 827, 967, 0, 0, 0, 0, 262,
	263, 434, 264, 265, 0, 266, 968, 267, 969, 970,
	828, 268, 971, 269, 435, 972, 436, 973, 270, 271,
	272, 273, 274, 275, 437, 438, 830, 974, 277, 0,
	0, 0, 975, 276, 278, 285, 976, 829, 279, 439,
	281, 280, 282, 283, 284, 440, 977, 441, 978, 286,
	831, 832, 287, 288, 289, 833, 290, 291, 0, 0,
	292, 293, 294, 979, 296, 295, 980, 442, 834, 297,
	298, 835, 981, 299, 300, 982, 983, 301, 0, 302,
	895, 894, 303, 304, 306, 307, 305, 836, 308, 309,
	311, 310, 984, 985, 837, 986, 443, 312, 444, 313,
	314, 987, 315, 316, 988, 989, 317, 318, 990, 991,
	319, 445, 838, 320, 839, 446, 321, 322, 323, 324,
	325, 326, 327, 992, 328, 447, 329, 448, 330, 993,
	331, 332, 333, 334, 335, 449, 336, 337, 994, 338,
	339, 340, 341, 342, 0, 344, 345, 343, 346, 347,
	348, 349, 995, 350, 840, 996, 351, 352, 353, 450,
	354, 0, 358, 359, 360, 361, 362, 363, 364, 997,
	370, 371, 365, 367, 368, 369, 366, 372, 373, 998,
	374, 355, 356, 375, 841, 376, 451, 377, 378, 999,
	387, 379, 380, 381, 357, 382, 385, 386, 383, 1000,
	384, 452, 1001, 388, 389, 1002, 390, 391, 392, 393,
	394, 395, 396, 397, 1003, 453, 454, 398, 1004, 1005,
	399, 400, 455, 456, 1006, 401, 402, 403, 404, 1007,
	1008, 405, 406, 407, 409, 1009, 410, 1010, 408, 411,
	412, 413, 457, 458, 1011, 1012, 414, 459, 1013, 1014,
	1015, 1016, 415, 416, 460, 417, 418, 419, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2771, 212, 213, 214, 215, 934, 216,
	935, 936, 937, 938, 420, 939, 940, 941, 942, 217,
	218, 219, 421, 422, 220, 423, 221, 222, 424, 943,
	223, 224, 225, 226, 227, 228, 944, 945, 425, 426,
	427, 946, 229, 428, 947, 893, 948, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 949, 239, 0,
	240, 241, 950, 826, 242, 243, 244, 951, 952, 954,
	953, 955, 956, 957, 245, 246, 471, 247, 248, 249,
	429, 430, 958, 250, 959, 251, 960, 252, 961, 962,
	253, 254, 963, 255, 964, 0, 965, 431, 256, 257,
	259, 260, 258, 261, 432, 433, 966, 827, 967, 0,
	0, 0, 0, 262, 263, 434, 264, 265, 0, 266,
	968, 267, 969, 970, 828, 268, 971, 269, 435, 972,
	436, 973, 270, 271, 272, 273, 274, 275, 437, 438,
	830, 974, 277, 0, 0, 0, 975, 276, 278, 285,
	976, 829, 279, 439, 281, 280, 282, 283, 284, 440,
	977, 441, 978, 286, 831, 832, 287, 288, 289, 833,
	290, 291, 0, 0, 292, 293, 294, 979, 296, 295,
	980, 442, 834, 297, 298, 835, 981, 299, 300, 982,
	983, 301, 0, 302, 895, 894, 303, 304, 306, 307,
	305, 836, 308, 309, 311, 310, 984, 985, 837, 986,
	443, 312, 444, 313, 314, 987, 315, 316, 988, 989,
	317, 318, 990, 991, 319, 445, 838, 320, 839, 446,
	321, 322, 323, 324, 325, 326, 327, 992, 328, 447,
	329, 448, 330, 993, 331, 332, 333, 334, 335, 449,
	336, 337, 994, 338, 339, 340, 341, 342, 0, 344,
	345, 343, 346, 347, 348, 349, 995, 350, 840, 996,
	351, 352, 353, 450, 354, 0, 358, 359, 360, 361,
	362, 363, 364, 997, 370, 371, 365, 367, 368, 369,
	366, 372, 373, 998, 374, 355, 356, 375, 841, 376,
	451, 377, 378, 999, 387, 379, 380, 381, 357, 382,
	385, 386, 383, 1000, 384, 452, 1001, 388, 389, 1002,
	390, 391, 392, 393, 394, 395, 396, 397, 1003, 453,
	454, 398, 1004, 1005, 399, 400, 455, 456, 1006, 401,
	402, 403, 404, 1007, 1008, 405, 406, 407, 409, 1009,
	410, 1010, 408, 411, 412, 413, 457, 458, 1011, 1012,
	414, 459, 1013, 1014, 1015, 1016, 415, 416, 460, 417,
	418, 419, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2414, 212, 213,
	214, 215, 934, 216, 935, 936, 937, 938, 420, 939,
	940, 941, 942, 217, 218, 219, 421, 422, 220, 423,
	221, 222, 424, 943, 223, 224, 225, 226, 227, 228,
	944, 945, 425, 426, 427, 946, 229, 428, 947, 893,
	948, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 949, 239, 0, 240, 241, 950, 826, 242, 243,
	244, 951, 952, 954, 953, 955, 956, 957, 245, 246,
	471, 247, 248, 249, 429, 430, 958, 250, 959, 251,
	960, 252, 961, 962, 253, 254, 963, 255, 964, 0,
	965, 431, 256, 257, 259, 260, 258, 261, 432, 433,
	966, 827, 967, 0, 0, 0, 0, 262, 263, 434,
	264, 265, 0, 266, 968, 267, 969, 970, 828, 268,
	971, 269, 435, 972, 436, 973, 270, 271, 272, 273,
	274, 275, 437, 438, 830, 974, 277, 0, 0, 0,
	975, 276, 278, 285, 976, 829, 279, 439, 281, 280,
	282, 283, 284, 440, 977, 441, 978, 286, 831, 832,
	287, 288, 289, 833, 290, 291, 0, 0, 292, 293,
	294, 979, 296, 295, 980, 442, 834, 297, 298, 835,
	981, 299, 300, 982, 983, 301, 0, 302, 895, 894,
	303, 304, 306, 307, 305, 836, 308, 309, 311, 310,
	984, 985, 837, 986, 443, 312, 444, 313, 314, 987,
	315, 316, 988, 989, 317, 318, 990, 991, 319, 445,
	838, 320, 839, 446, 321, 322, 323, 324, 325, 326,
	327, 992, 328, 447, 329, 448, 330, 993, 331, 332,
	333, 334, 335, 449, 336, 337, 994, 338, 339, 340,
	341, 342, 0, 344, 345, 343, 346, 347, 348, 349,
	995, 350, 840, 996, 351, 352, 353, 450, 354, 0,
	358, 359, 360, 361, 362, 363, 364, 997, 370, 371,
	365, 367, 368, 369, 366, 372, 373, 998, 374, 355,
	356, 375, 841, 376, 451, 377, 378, 999, 387, 379,
	380, 381, 357, 382, 385, 386, 383, 1000, 384, 452,
	1001, 388, 389, 1002, 390, 391, 392, 393, 394, 395,
	396, 397, 1003, 453, 454, 398, 1004, 1005, 399, 400,
	455, 456, 1006, 401, 402, 403, 404, 1007, 1008, 405,
	406, 407, 409, 1009, 410, 1010, 408, 411, 412, 413,
	457, 458, 1011, 1012, 414, 459, 1013, 1014, 1015, 1016,
	415, 416, 460, 417, 418, 419, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2296, 212, 213, 214, 215, 934, 216, 935, 936,
	937, 938, 420, 939, 940, 941, 942, 217, 218, 219,
	421, 422, 220, 423, 221, 222, 424, 943, 223, 224,
	225, 226, 227, 228, 944, 945, 425, 426, 427, 946,
	229, 428, 947, 893, 948, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 949, 239, 0, 240, 241,
	950, 826, 242, 243, 244, 951, 952, 954, 953, 955,
	956, 957, 245, 246, 471, 247, 248, 249, 429, 430,
	958, 250, 959, 251, 960, 252, 961, 962, 253, 254,
	963, 255, 964, 0, 965, 431, 256, 257, 259, 260,
	258, 261, 432, 433, 966, 827, 967, 0, 0, 0,
	0, 262, 263, 434, 264, 265, 0, 266, 968, 267,
	969, 970, 828, 268, 971, 269, 435, 972, 436, 973,
	270, 271, 272, 273, 274, 275, 437, 438, 830, 974,
	277, 0, 0, 0, 975, 276, 278, 285, 976, 829,
	279, 439, 281, 280, 282, 283, 284, 440, 977, 441,
	978, 286, 831, 832, 287, 288, 289, 833, 290, 291,
	0, 0, 292, 293, 294, 979, 296, 295, 980, 442,
	834, 297, 298, 835, 981, 299, 300, 982, 983, 301,
	0, 302, 895, 894, 303, 304, 306, 307, 305, 836,
	308, 309, 311, 310, 984, 985, 837, 986, 443, 312,
	444, 313, 314, 987, 315, 316, 988, 989, 317, 318,
	990, 991, 319, 445, 838, 320, 839, 446, 321, 322,
	323, 324, 325, 326, 327, 992, 328, 447, 329, 448,
	330, 993, 331, 332, 333, 334, 335, 449, 336, 337,
	994, 338, 339, 340, 341, 342, 0, 344, 345, 343,
	346, 347, 348, 349, 995, 350, 840, 996, 351, 352,
	353, 450, 354, 0, 358, 359, 360, 361, 362, 363,
	364, 997, 370, 371, 365, 367, 368, 369, 366, 372,
	373, 998, 374, 355, 356, 375, 841, 376, 451, 377,
	378, 999, 387, 379, 380, 381, 357, 382, 385, 386,
	383, 1000, 384, 452, 1001, 388, 389, 1002, 390, 391,
	392, 393, 394, 395, 396, 397, 1003, 453, 454, 398,
	1004, 1005, 399, 400, 455, 456, 1006, 401, 402, 403,
	404, 1007, 1008, 405, 406, 407, 409, 1009, 410, 1010,
	408, 411, 412, 413, 457, 458, 1011, 1012, 414, 459,
	1013, 1014, 1015, 1016, 415, 416, 460, 417, 418, 419,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1764, 212, 213, 214, 215,
	934, 216, 935, 936, 937, 938, 420, 939, 940, 941,
	942, 217, 218, 219, 421, 422, 220, 423, 221, 222,
	424, 943, 223, 224, 225, 226, 227, 228, 944, 945,
	425, 426, 427, 946, 229, 428, 947, 893, 948, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 949,
	239, 0, 240, 241, 950, 826, 242, 243, 244, 951,
	952, 954, 953, 955, 956, 957, 245, 246, 471, 247,
	248, 249, 429, 430, 958, 250, 959, 251, 960, 252,
	961, 962, 253, 254, 963, 255, 964, 0, 965, 431,
	256, 257, 259, 260, 258, 261, 432, 433, 966, 827,
	967, 0, 0, 0, 0, 262, 263, 434, 264, 265,
	0, 266, 968, 267, 969, 970, 828, 268, 971, 269,
	435, 972, 436, 973, 270, 271, 272, 273, 274, 275,
	437, 438, 830, 974, 277, 0, 0, 0, 975, 276,
	278, 285, 976, 829, 279, 439, 281, 280, 282, 283,
	284, 440, 977, 441, 978, 286, 831, 832, 287, 288,
	289, 833, 290, 291, 0, 0, 292, 293, 294, 979,
	296, 295, 980, 442, 834, 297, 298, 835, 981, 299,
	300, 982, 983, 301, 0, 302, 895, 894, 303, 304,
	306, 307, 305, 836, 308, 309, 311, 310, 984, 985,
	837, 986, 443, 312, 444, 313, 314, 987, 315, 316,
	988, 989, 317, 318, 990, 991, 319, 445, 838, 320,
	839, 446, 321, 322, 323, 324, 325, 326, 327, 992,
	328, 447, 329, 448, 330, 993, 331, 332, 333, 334,
	335, 449, 336, 337, 994, 338, 339, 340, 341, 342,
	0, 344, 345, 343, 346, 347, 348, 349, 995, 350,
	840, 996, 351, 352, 353, 450, 354, 0, 358, 359,
	360, 361, 362, 363, 364, 997, 370, 371, 365, 367,
	368, 369, 366, 372, 373, 998, 374, 355, 356, 375,
	841, 376, 451, 377, 378, 999, 387, 379, 380, 381,
	357, 382, 385, 386, 383, 1000, 384, 452, 1001, 388,
	389, 1002, 390, 391, 392, 393, 394, 395, 396, 397,
	1003, 453, 454, 398, 1004, 1005, 399, 400, 455, 456,
	1006, 401, 402, 403, 404, 1007, 1008, 405, 406, 407,
	409, 1009, 410, 1010, 408, 411, 412, 413, 457, 458,
	1011, 1012, 414, 459, 1013, 1014, 1015, 1016, 415, 416,
	460, 417, 418, 419, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	212, 213, 214, 215, 934, 216, 935, 936, 937, 938,
	420, 939, 940, 941, 942, 217, 218, 219, 421, 422,
	220, 423, 221, 222, 424, 943, 223, 224, 225, 226,
	227, 228, 944, 945, 425, 426, 427, 946, 229, 428,
	947, 893, 948, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 949, 239, 0, 240, 241, 950, 826,
	242, 243, 244, 951, 952, 954, 953, 955, 956, 957,
	245, 246, 471, 247, 248, 249, 429, 430, 958, 250,
	959, 251, 960, 252, 961, 962, 253, 254, 963, 255,
	964, 0, 965, 431, 256, 257, 259, 260, 258, 261,
	432, 433, 966, 827, 967, 0, 0, 0, 0, 262,
	263, 434, 264, 265, 0, 266, 968, 267, 969, 970,
	828, 268, 971, 269, 435, 972, 436, 973, 270, 271,
	272, 273, 274, 275, 437, 438, 830, 974, 277, 0,
	0, 0, 975, 276, 278, 285, 976, 829, 279, 439,
	281, 280, 282, 283, 284, 440, 977, 441, 978, 286,
	831, 832, 287, 288, 289, 833, 290, 291, 0, 0,
	292, 293, 294, 979, 296, 295, 980, 442, 834, 297,
	298, 835, 981, 299, 300, 982, 983, 301, 0, 302,
	895, 894, 303, 304, 306, 307, 305, 836, 308, 309,
	311, 310, 984, 985, 837, 986, 443, 312, 444, 313,
	314, 987, 315, 316, 988, 989, 317, 318, 990, 991,
	319, 445, 838, 320, 839, 446, 321, 322, 323, 324,
	325, 326, 327, 992, 328, 447, 329, 448, 330, 993,
	331, 332, 333, 334, 335, 449, 336, 337, 994, 338,
	339, 340, 341, 342, 0, 344, 345, 343, 346, 347,
	348, 349, 995, 350, 840, 996, 351, 352, 353, 450,
	354, 0, 358, 359, 360, 361, 362, 363, 364, 997,
	370, 371, 365, 367, 368, 369, 366, 372, 373, 998,
	374, 355, 356, 375, 841, 376, 451, 377, 378, 999,
	387, 379, 380, 381, 357, 382, 385, 386, 383, 1000,
	384, 452, 1001, 388, 389, 1002, 390, 391, 392, 393,
	394, 395, 396, 397, 1003, 453, 454, 398, 1004, 1005,
	399, 400, 455, 456, 1006, 401, 402, 403, 404, 1007,
	1008, 405, 406, 407, 409, 1009, 410, 1010, 408, 411,
	412, 413, 457, 458, 1011, 1012, 414, 459, 1013, 1014,
	1015, 1016, 415, 416, 460, 417, 418, 419, 693, 0,
	745, 733, 734, 731, 732, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 780, 725, 0, 0,
	0, 217, 218, 219, 421, 799, 765, 800, 753, 786,
	801, 0, 223, 755, 754, 226, 227, 228, 728, 779,
	802, 803, 427, 0, 229, 784, 0, 770, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 826, 242, 243, 244, 773,
	771, 772, 776, 0, 774, 775, 245, 246, 471, 247,
	787, 249, 804, 805, 711, 250, 0, 251, 0, 252,
	0, 0, 788, 254, 0, 255, 0, 0, 0, 716,
	256, 257, 259, 260, 258, 261, 806, 807, 740, 827,
	0, 0, 0, 0, 0, 262, 263, 808, 789, 790,
	0, 266, 0, 267, 0, 0, 828, 268, 0, 269,
	809, 0, 436, 0, 270, 271, 272, 273, 274, 275,
	781, 783, 830, 0, 764, 0, 0, 0, 0, 276,
	278, 285, 0, 829, 279, 810, 768, 791, 792, 793,
	794, 811, 0, 769, 0, 286, 831, 832, 287, 288,
	289, 833, 795, 796, 0, 0, 292, 293, 294, 0,
	296, 295, 0, 812, 834, 297, 298, 835, 0, 299,
	300, 0, 0, 301, 0, 302, 713, 712, 303, 304,
	306, 757, 305, 836, 308, 309, 311, 310, 708, 0,
	837, 741, 782, 312, 813, 313, 314, 0, 766, 767,
	0, 0, 317, 318, 0, 0, 319, 445, 838, 320,
	839, 814, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 815, 329, 448, 330, 0, 331, 332, 333, 334,
	335, 816, 336, 337, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 343, 346, 347, 348, 349, 0, 350,
	840, 0, 351, 352, 353, 717, 354, 0, 358, 359,
	360, 361, 362, 363, 364, 167, 370, 371, 758, 759,
	760, 761, 366, 372, 373, 777, 374, 355, 356, 375,
	841, 376, 817, 762, 378, 0, 387, 379, 380, 381,
	357, 382, 385, 797, 383, 0, 384, 818, 0, 388,
	389, 169, 390, 391, 392, 393, 394, 395, 756, 397,
	0, 819, 820, 798, 0, 0, 399, 400, 821, 822,
	739, 401, 402, 403, 404, 0, 0, 405, 406, 407,
	409, 778, 410, 0, 763, 411, 412, 413, 1103, 823,
	0, 0, 414, 459, 0, 0, 0, 161, 415, 416,
	460, 417, 418, 419, 709, 162, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 705, 706, 745,
	733, 734, 731, 732, 722, 0, 1310, 0, 0, 0,
	0, 0, 721, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 780, 725, 0, 0, 0,
	217, 218, 219, 421, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 728, 779, 802,
	803, 427, 0, 229, 784, 0, 770, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 773, 771,
	772, 776, 0, 774, 775, 245, 246, 471, 247, 787,
	249, 804, 805, 711, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 716, 256,
	257, 259, 260, 258, 261, 806, 807, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 781,
	783, 830, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 831, 832, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 713, 712, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 708, 0, 837,
	741, 782, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 717, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 167, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 777, 374, 355, 356, 375, 841,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 818, 0, 388, 389,
	169, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 821, 822, 739,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	778, 410, 0, 763, 411, 412, 413, 1103, 823, 0,
	0, 414, 459, 0, 0, 0, 161, 415, 416, 460,
	417, 418, 419, 709, 162, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 705, 706, 745, 733,
	734, 731, 732, 722, 0, 1310, 0, 0, 0, 0,
	0, 721, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 780, 725, 0, 0, 0, 217,
	218, 219, 421, 799, 765, 800, 753, 786, 801, 1838,
	223, 755, 754, 226, 227, 228, 728, 779, 802, 803,
	427, 0, 229, 784, 0, 770, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 826, 242, 243, 244, 773, 771, 772,
	776, 0, 774, 775, 245, 246, 471, 247, 787, 249,
	804, 805, 711, 250, 0, 251, 0, 252, 0, 0,
	788, 254, 0, 255, 0, 0, 0, 716, 256, 257,
	259, 260, 258, 261, 806, 807, 740, 827, 0, 0,
	0, 0, 0, 262, 263, 808, 789, 790, 0, 266,
	0, 267, 0, 1843, 828, 268, 0, 269, 809, 0,
	436, 0, 270, 271, 272, 273, 274, 275, 781, 783,
	830, 0, 764, 0, 0, 0, 0, 276, 278, 285,
	0, 829, 279, 810, 768, 791, 792, 793, 794, 811,
	0, 769, 0, 286, 831, 832, 287, 288, 289, 833,
	795, 796, 0, 0, 292, 293, 294, 0, 296, 295,
	1839, 812, 834, 297, 298, 835, 0, 299, 300, 0,
	0, 301, 0, 302, 713, 712, 303, 304, 306, 757,
	305, 836, 308, 309, 311, 310, 708, 0, 837, 741,
	782, 312, 813, 313, 314, 0, 766, 767, 0, 0,
	317, 318, 0, 0, 319, 445, 838, 320, 839, 814,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 815,
	329, 448, 330, 0, 331, 332, 333, 334, 335, 816,
	336, 337, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 343, 346, 347, 348, 349, 0, 350, 840, 0,
	351, 352, 353, 717, 354, 0, 358, 359, 360, 361,
	362, 363, 364, 0, 370, 371, 758, 759, 760, 761,
	366, 372, 373, 777, 374, 355, 356, 375, 841, 376,
	817, 762, 378, 0, 387, 379, 380, 381, 357, 382,
	385, 797, 383, 0, 384, 818, 0, 388, 389, 0,
	390, 391, 392, 393, 394, 395, 756, 397, 0, 819,
	820, 798, 0, 1840, 399, 400, 821, 822, 739, 401,
	402, 403, 404, 0, 0, 405, 406, 407, 409, 778,
	410, 0, 763, 411, 412, 413, 457, 823, 0, 0,
	414, 459, 0, 0, 0, 0, 415, 416, 460, 417,
	418, 419, 709, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 705, 706, 745, 733, 734,
	731, 732, 722, 0, 718, 0, 0, 0, 0, 0,
	721, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 2581, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 1371, 745, 733, 734,
	731, 732, 722, 718, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 1669, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 0, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 1668, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 701, 721,
	745, 733, 734, 731, 732, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 780, 725, 0, 0,
	0, 217, 218, 219, 421, 799, 765, 800, 753, 786,
	801, 0, 223, 755, 754, 226, 227, 228, 728, 779,
	802, 803, 427, 0, 229, 784, 0, 770, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 826, 242, 243, 244, 773,
	771, 772, 776, 0, 774, 775, 245, 246, 471, 247,
	787, 249, 804, 805, 711, 250, 0, 251, 0, 252,
	0, 0, 788, 254, 0, 255, 0, 0, 0, 716,
	256, 257, 259, 260, 258, 261, 806, 807, 740, 827,
	0, 0, 0, 0, 0, 262, 263, 808, 789, 790,
	0, 266, 0, 267, 0, 0, 828, 268, 0, 269,
	809, 0, 436, 0, 270, 271, 272, 273, 274, 275,
	781, 783, 830, 0, 764, 0, 0, 0, 0, 276,
	278, 285, 0, 829, 279, 810, 768, 791, 792, 793,
	794, 811, 0, 769, 0, 286, 831, 832, 287, 288,
	289, 833, 795, 796, 0, 0, 292, 293, 294, 0,
	296, 295, 0, 812, 834, 297, 298, 835, 0, 299,
	300, 0, 0, 301, 0, 302, 713, 712, 303, 304,
	306, 757, 305, 836, 308, 309, 311, 310, 708, 0,
	837, 741, 782, 312, 813, 313, 314, 0, 766, 767,
	703, 0, 317, 318, 0, 0, 319, 445, 838, 320,
	839, 814, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 815, 329, 448, 330, 0, 331, 332, 333, 334,
	335, 816, 336, 337, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 343, 346, 347, 348, 349, 0, 350,
	840, 0, 351, 352, 353, 717, 354, 0, 358, 359,
	360, 361, 362, 363, 364, 0, 370, 371, 758, 759,
	760, 761, 366, 372, 373, 777, 374, 355, 356, 375,
	841, 376, 817, 762, 378, 0, 387, 379, 380, 381,
	357, 382, 385, 797, 383, 0, 384, 818, 0, 388,
	389, 0, 390, 391, 392, 393, 394, 395, 756, 397,
	0, 819, 820, 798, 0, 0, 399, 400, 821, 822,
	739, 401, 402, 403, 404, 0, 0, 405, 406, 407,
	409, 778, 410, 0, 763, 411, 412, 413, 457, 823,
	0, 0, 414, 459, 0, 0, 0, 0, 415, 416,
	460, 417, 418, 419, 709, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 705, 706, 745,
	733, 734, 731, 732, 722, 0, 718, 0, 0, 0,
	0, 0, 721, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 780, 725, 0, 0, 0,
	217, 218, 219, 421, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 728, 779, 802,
	803, 427, 0, 229, 784, 0, 770, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 773, 771,
	772, 776, 0, 774, 775, 245, 246, 471, 247, 787,
	249, 804, 805, 711, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 716, 256,
	257, 259, 260, 258, 261, 806, 807, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 781,
	783, 830, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 831, 832, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 713, 712, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 708, 0, 837,
	741, 782, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 717, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 777, 374, 355, 356, 375, 841,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 818, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 821, 822, 739,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	778, 410, 0, 763, 411, 412, 413, 457, 823, 2416,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 709, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 705, 706, 745, 733,
	734, 731, 732, 722, 0, 718, 0, 0, 0, 0,
	0, 721, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 780, 725, 0, 0, 0, 217,
	218, 219, 421, 799, 765, 800, 753, 786, 801, 0,
	223, 755, 754, 226, 227, 228, 728, 779, 802, 803,
	427, 0, 229, 784, 0, 770, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 826, 242, 243, 244, 773, 771, 772,
	776, 0, 774, 775, 245, 246, 471, 247, 787, 249,
	804, 805, 711, 250, 0, 251, 0, 252, 0, 0,
	788, 254, 0, 255, 0, 0, 0, 716, 256, 257,
	259, 260, 258, 261, 806, 807, 740, 827, 0, 0,
	0, 0, 0, 262, 263, 808, 789, 790, 0, 266,
	0, 267, 0, 0, 828, 268, 0, 269, 809, 0,
	436, 0, 270, 271, 272, 273, 274, 275, 781, 783,
	830, 0, 764, 0, 0, 0, 0, 276, 278, 285,
	0, 829, 279, 810, 768, 791, 792, 793, 794, 811,
	0, 769, 0, 286, 831, 832, 287, 288, 289, 833,
	795, 796, 0, 0, 292, 293, 294, 0, 296, 295,
	0, 812, 834, 297, 298, 835, 0, 299, 300, 0,
	0, 301, 0, 302, 713, 712, 303, 304, 306, 757,
	305, 836, 308, 309, 311, 310, 708, 0, 837, 741,
	782, 312, 813, 313, 314, 0, 766, 767, 703, 0,
	317, 318, 0, 0, 319, 445, 838, 320, 839, 814,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 815,
	329, 448, 330, 0, 331, 332, 333, 334, 335, 816,
	336, 337, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 343, 346, 347, 348, 349, 0, 350, 840, 0,
	351, 352, 353, 717, 354, 0, 358, 359, 360, 361,
	362, 363, 364, 0, 370, 371, 758, 759, 760, 761,
	366, 372, 373, 777, 374, 355, 356, 375, 841, 376,
	817, 762, 378, 0, 387, 379, 380, 381, 357, 382,
	385, 797, 383, 0, 384, 818, 0, 388, 389, 0,
	390, 391, 392, 393, 394, 395, 756, 397, 0, 819,
	820, 798, 0, 0, 399, 400, 821, 822, 739, 401,
	402, 403, 404, 0, 0, 405, 406, 407, 409, 778,
	410, 0, 763, 411, 412, 413, 457, 823, 0, 0,
	414, 459, 0, 0, 0, 0, 415, 416, 460, 417,
	418, 419, 709, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 705, 706, 745, 733, 734,
	731, 732, 722, 0, 718, 0, 0, 0, 0, 0,
	721, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 0, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 1371, 745, 733, 734,
	731, 732, 722, 718, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 1843, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 0, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 1877, 721,
	745, 733, 734, 731, 732, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 780, 725, 0, 0,
	0, 217, 218, 219, 421, 799, 765, 800, 753, 786,
	801, 0, 223, 755, 754, 226, 227, 228, 728, 779,
	802, 803, 427, 0, 229, 784, 0, 770, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 826, 242, 243, 244, 773,
	771, 772, 776, 0, 774, 775, 245, 246, 471, 247,
	787, 249, 804, 805, 711, 250, 0, 251, 0, 252,
	0, 0, 788, 254, 0, 255, 0, 0, 0, 716,
	256, 257, 259, 260, 258, 261, 806, 807, 740, 827,
	0, 0, 0, 0, 0, 262, 263, 808, 789, 790,
	0, 266, 0, 267, 0, 0, 828, 268, 0, 269,
	809, 0, 436, 0, 270, 271, 272, 273, 274, 275,
	781, 783, 830, 0, 764, 0, 0, 0, 0, 276,
	278, 285, 0, 829, 279, 810, 768, 791, 792, 793,
	794, 811, 0, 769, 0, 286, 831, 832, 287, 288,
	289, 833, 795, 796, 0, 0, 292, 293, 294, 0,
	296, 295, 0, 812, 834, 297, 298, 835, 0, 299,
	300, 0, 0, 301, 0, 302, 713, 712, 303, 304,
	306, 757, 305, 836, 308, 309, 311, 310, 708, 0,
	837, 741, 782, 312, 813, 313, 314, 0, 766, 767,
	0, 0, 317, 318, 0, 0, 319, 445, 838, 320,
	839, 814, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 815, 329, 448, 330, 0, 331, 332, 333, 334,
	335, 816, 336, 337, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 343, 346, 347, 348, 349, 0, 350,
	840, 0, 351, 352, 353, 717, 354, 0, 358, 359,
	360, 361, 362, 363, 364, 0, 370, 371, 758, 759,
	760, 761, 366, 372, 373, 777, 374, 355, 356, 375,
	841, 376, 817, 762, 378, 0, 387, 379, 380, 381,
	357, 382, 385, 797, 383, 0, 384, 818, 0, 388,
	389, 0, 390, 391, 392, 393, 394, 395, 756, 397,
	0, 819, 820, 798, 0, 0, 399, 400, 821, 822,
	739, 401, 402, 403, 404, 0, 0, 405, 406, 407,
	409, 778, 410, 0, 763, 411, 412, 413, 457, 823,
	0, 0, 414, 459, 0, 0, 0, 0, 415, 416,
	460, 417, 418, 419, 709, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 1831, 721, 745, 733, 734, 731, 732, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 780,
	725, 0, 0, 0, 217, 218, 219, 421, 799, 765,
	800, 753, 786, 801, 0, 223, 755, 754, 226, 227,
	228, 728, 779, 802, 803, 427, 0, 229, 784, 0,
	770, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 826, 242,
	243, 244, 773, 771, 772, 776, 0, 774, 775, 245,
	246, 471, 247, 787, 249, 804, 805, 711, 250, 0,
	251, 0, 252, 0, 0, 788, 254, 0, 255, 0,
	0, 0, 716, 256, 257, 259, 260, 258, 261, 806,
	807, 740, 827, 0, 0, 0, 0, 0, 262, 263,
	808, 789, 790, 0, 266, 0, 267, 0, 0, 828,
	268, 0, 269, 809, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 781, 783, 830, 0, 764, 0, 0,
	0, 0, 276, 278, 285, 0, 829, 279, 810, 768,
	791, 792, 793, 794, 811, 0, 769, 0, 286, 831,
	832, 287, 288, 289, 833, 795, 796, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 812, 834, 297, 298,
	835, 0, 299, 300, 0, 0, 301, 0, 302, 713,
	712, 303, 304, 306, 757, 305, 836, 308, 309, 311,
	310, 708, 0, 837, 741, 782, 312, 813, 313, 314,
	0, 766, 767, 0, 0, 317, 318, 0, 0, 319,
	445, 838, 320, 839, 814, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 815, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 816, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 840, 0, 351, 352, 353, 717, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 758, 759, 760, 761, 366, 372, 373, 777, 374,
	355, 356, 375, 841, 376, 817, 762, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 797, 383, 0, 384,
	818, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 756, 397, 0, 819, 820, 798, 0, 0, 399,
	400, 821, 822, 739, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 778, 410, 0, 763, 411, 412,
	413, 457, 823, 0, 0, 414, 459, 0, 0, 0,
	0, 415, 416, 460, 417, 418, 419, 709, 0, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 0,
	705, 706, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 1819, 721, 745, 733, 734, 731,
	732, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 780, 725, 0, 0, 0, 217, 218, 219,
	421, 799, 765, 800, 753, 786, 801, 0, 223, 755,
	754, 226, 227, 228, 728, 779, 802, 803, 427, 0,
	229, 784, 0, 770, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 826, 242, 243, 244, 773, 771, 772, 776, 0,
	774, 775, 245, 246, 471, 247, 787, 249, 804, 805,
	711, 250, 0, 251, 0, 252, 0, 0, 788, 254,
	0, 255, 0, 0, 0, 716, 256, 257, 259, 260,
	258, 261, 806, 807, 740, 827, 0, 0, 0, 0,
	0, 262, 263, 808, 789, 790, 0, 266, 0, 267,
	0, 0, 828, 268, 0, 269, 809, 0, 436, 0,
	270, 271, 272, 273, 274, 275, 781, 783, 830, 0,
	764, 0, 0, 0, 0, 276, 278, 285, 0, 829,
	279, 810, 768, 791, 792, 793, 794, 811, 0, 769,
	0, 286, 831, 832, 287, 288, 289, 833, 795, 796,
	0, 0, 292, 293, 294, 0, 296, 295, 0, 812,
	834, 297, 298, 835, 0, 299, 300, 0, 0, 301,
	0, 302, 713, 712, 303, 304, 306, 757, 305, 836,
	308, 309, 311, 310, 708, 0, 837, 741, 782, 312,
	813, 313, 314, 0, 766, 767, 0, 0, 317, 318,
	0, 0, 319, 445, 838, 320, 839, 814, 321, 322,
	323, 324, 325, 326, 327, 0, 328, 815, 329, 448,
	330, 0, 331, 332, 333, 334, 335, 816, 336, 337,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 343,
	346, 347, 348, 349, 0, 350, 840, 0, 351, 352,
	353, 717, 354, 0, 358, 359, 360, 361, 362, 363,
	364, 0, 370, 371, 758, 759, 760, 761, 366, 372,
	373, 777, 374, 355, 356, 375, 841, 376, 817, 762,
	378, 0, 387, 379, 380, 381, 357, 382, 385, 797,
	383, 0, 384, 818, 0, 388, 389, 0, 390, 391,
	392, 393, 394, 395, 756, 397, 0, 819, 820, 798,
	0, 0, 399, 400, 821, 822, 739, 401, 402, 403,
	404, 0, 0, 405, 406, 407, 409, 778, 410, 0,
	763, 411, 412, 413, 457, 823, 0, 0, 414, 459,
	0, 0, 0, 0, 415, 416, 460, 417, 418, 419,
	709, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 1817, 721, 745,
	733, 734, 731, 732, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 780, 725, 0, 0, 0,
	217, 218, 219, 421, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 728, 779, 802,
	803, 427, 0, 229, 784, 0, 770, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 773, 771,
	772, 776, 0, 774, 775, 245, 246, 471, 247, 787,
	249, 804, 805, 711, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 716, 256,
	257, 259, 260, 258, 261, 806, 807, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 781,
	783, 830, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 831, 832, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 713, 712, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 708, 0, 837,
	741, 782, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 717, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 777, 374, 355, 356, 375, 841,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 818, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 821, 822, 739,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	778, 410, 0, 763, 411, 412, 413, 457, 823, 0,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 709, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 705, 706, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	1815, 721, 745, 733, 734, 731, 732, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 780, 725,
	0, 0, 0, 217, 218, 219, 421, 799, 765, 800,
	753, 786, 801, 0, 223, 755, 754, 226, 227, 228,
	728, 779, 802, 803, 427, 0, 229, 784, 0, 770,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 826, 242, 243,
	244, 773, 771, 772, 776, 0, 774, 775, 245, 246,
	471, 247, 787, 249, 804, 805, 711, 250, 0, 251,
	0, 252, 0, 0, 788, 254, 0, 255, 0, 0,
	0, 716, 256, 257, 259, 260, 258, 261, 806, 807,
	740, 827, 0, 0, 0, 0, 0, 262, 263, 808,
	789, 790, 0, 266, 0, 267, 0, 0, 828, 268,
	0, 269, 809, 0, 436, 0, 270, 271, 272, 273,
	274, 275, 781, 783, 830, 0, 764, 0, 0, 0,
	0, 276, 278, 285, 0, 829, 279, 810, 768, 791,
	792, 793, 794, 811, 0, 769, 0, 286, 831, 832,
	287, 288, 289, 833, 795, 796, 0, 0, 292, 293,
	294, 0, 296, 295, 0, 812, 834, 297, 298, 835,
	0, 299, 300, 0, 0, 301, 0, 302, 713, 712,
	303, 304, 306, 757, 305, 836, 308, 309, 311, 310,
	708, 0, 837, 741, 782, 312, 813, 313, 314, 0,
	766, 767, 0, 0, 317, 318, 0, 0, 319, 445,
	838, 320, 839, 814, 321, 322, 323, 324, 325, 326,
	327, 0, 328, 815, 329, 448, 330, 0, 331, 332,
	333, 334, 335, 816, 336, 337, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 343, 346, 347, 348, 349,
	0, 350, 840, 0, 351, 352, 353, 717, 354, 0,
	358, 359, 360, 361, 362, 363, 364, 0, 370, 371,
	758, 759, 760, 761, 366, 372, 373, 777, 374, 355,
	356, 375, 841, 376, 817, 762, 378, 0, 387, 379,
	380, 381, 357, 382, 385, 797, 383, 0, 384, 818,
	0, 388, 389, 0, 390, 391, 392, 393, 394, 395,
	756, 397, 0, 819, 820, 798, 0, 0, 399, 400,
	821, 822, 739, 401, 402, 403, 404, 0, 0, 405,
	406, 407, 409, 778, 410, 0, 763, 411, 412, 413,
	457, 823, 0, 0, 414, 459, 0, 0, 0, 0,
	415, 416, 460, 417, 418, 419, 709, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 1812, 721, 1804, 733, 734, 731, 732,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 780, 725, 0, 0, 0, 217, 218, 219, 421,
	799, 765, 800, 753, 786, 801, 0, 223, 755, 754,
	226, 227, 228, 728, 779, 802, 803, 427, 0, 229,
	784, 0, 770, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	826, 242, 243, 244, 773, 771, 772, 776, 0, 774,
	775, 245, 246, 471, 247, 787, 1807, 804, 805, 711,
	250, 0, 251, 0, 252, 0, 0, 788, 254, 0,
	255, 0, 0, 0, 716, 256, 257, 259, 260, 258,
	261, 806, 807, 740, 827, 0, 0, 0, 0, 0,
	262, 263, 808, 789, 790, 0, 266, 0, 267, 0,
	0, 828, 268, 0, 269, 809, 0, 436, 0, 270,
	271, 1808, 273, 274, 275, 781, 783, 830, 0, 764,
	0, 0, 0, 0, 276, 278, 285, 0, 829, 279,
	810, 768, 791, 792, 793, 794, 811, 0, 769, 0,
	286, 831, 832, 287, 288, 289, 833, 795, 796, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 812, 834,
	297, 298, 835, 0, 299, 300, 0, 0, 301, 0,
	302, 713, 712, 1809, 1806, 306, 757, 305, 836, 308,
	309, 311, 310, 708, 0, 837, 741, 782, 312, 813,
	313, 314, 0, 766, 767, 0, 0, 317, 318, 0,
	0, 319, 445, 838, 320, 839, 814, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 815, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 816, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 840, 0, 351, 352, 353,
	717, 354, 0, 358, 359, 360, 361, 362, 363, 1810,
	0, 370, 371, 758, 759, 760, 761, 366, 372, 373,
	777, 374, 355, 356, 375, 841, 376, 817, 762, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 797, 383,
	0, 384, 818, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 756, 397, 0, 819, 820, 798, 0,
	0, 399, 400, 821, 822, 739, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 778, 410, 0, 763,
	411, 412, 413, 457, 823, 0, 0, 414, 459, 0,
	0, 0, 0, 415, 416, 460, 417, 1805, 419, 709,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 0, 705, 706, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 1801, 721, 1804, 733,
	734, 731, 732, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 780, 725, 0, 0, 0, 217,
	218, 219, 421, 799, 765, 800, 753, 786, 801, 0,
	223, 755, 754, 226, 227, 228, 728, 779, 802, 803,
	427, 0, 229, 784, 0, 770, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 826, 242, 243, 244, 773, 771, 772,
	776, 0, 774, 775, 245, 246, 471, 247, 787, 1807,
	804, 805, 711, 250, 0, 251, 0, 252, 0, 0,
	788, 254, 0, 255, 0, 0, 0, 716, 256, 257,
	259, 260, 258, 261, 806, 807, 740, 827, 0, 0,
	0, 0, 0, 262, 263, 808, 789, 790, 0, 266,
	0, 267, 0, 0, 828, 268, 0, 269, 809, 0,
	436, 0, 270, 271, 1808, 273, 274, 275, 781, 783,
	830, 0, 764, 0, 0, 0, 0, 276, 278, 285,
	0, 829, 279, 810, 768, 791, 792, 793, 794, 811,
	0, 769, 0, 286, 831, 832, 287, 288, 289, 833,
	795, 796, 0, 0, 292, 293, 294, 0, 296, 295,
	0, 812, 834, 297, 298, 835, 0, 299, 300, 0,
	0, 301, 0, 302, 713, 712, 1809, 1806, 306, 757,
	305, 836, 308, 309, 311, 310, 708, 0, 837, 741,
	782, 312, 813, 313, 314, 0, 766, 767, 0, 0,
	317, 318, 0, 0, 319, 445, 838, 320, 839, 814,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 815,
	329, 448, 330, 0, 331, 332, 333, 334, 335, 816,
	336, 337, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 343, 346, 347, 348, 349, 0, 350, 840, 0,
	351, 352, 353, 717, 354, 0, 358, 359, 360, 361,
	362, 363, 1810, 0, 370, 371, 758, 759, 760, 761,
	366, 372, 373, 777, 374, 355, 356, 375, 841, 376,
	817, 762, 378, 0, 387, 379, 380, 381, 357, 382,
	385, 797, 383, 0, 384, 818, 0, 388, 389, 0,
	390, 391, 392, 393, 394, 395, 756, 397, 0, 819,
	820, 798, 0, 0, 399, 400, 821, 822, 739, 401,
	402, 403, 404, 0, 0, 405, 406, 407, 409, 778,
	410, 0, 763, 411, 412, 413, 457, 823, 0, 0,
	414, 459, 0, 0, 0, 0, 415, 416, 460, 417,
	1805, 419, 709, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 705, 706, 745, 733, 734,
	731, 732, 722, 0, 718, 0, 0, 0, 0, 0,
	721, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 0, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 0, 0, 0, 0,
	0, 1315, 0, 718, 0, 0, 0, 0, 0, 721,
	745, 733, 734, 731, 732, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	1656, 216, 0, 0, 0, 0, 780, 725, 0, 0,
	0, 217, 218, 219, 421, 799, 765, 800, 753, 786,
	801, 0, 223, 755, 754, 226, 227, 228, 728, 779,
	802, 803, 427, 0, 229, 784, 0, 770, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 826, 242, 243, 244, 773,
	771, 772, 776, 0, 774, 775, 245, 246, 471, 247,
	787, 249, 804, 805, 711, 250, 0, 251, 0, 252,
	0, 0, 788, 254, 0, 255, 0, 0, 0, 716,
	256, 257, 259, 260, 258, 261, 806, 807, 740, 827,
	0, 0, 0, 0, 0, 262, 263, 808, 789, 790,
	0, 266, 0, 267, 0, 0, 828, 268, 0, 269,
	809, 0, 436, 0, 270, 271, 272, 273, 274, 275,
	781, 783, 830, 0, 764, 0, 0, 0, 0, 276,
	278, 285, 0, 829, 279, 810, 768, 791, 792, 793,
	794, 811, 0, 769, 0, 286, 831, 832, 287, 288,
	289, 833, 795, 796, 0, 0, 292, 293, 294, 0,
	296, 295, 0, 812, 834, 297, 298, 835, 0, 299,
	300, 0, 0, 301, 0, 302, 713, 712, 303, 304,
	306, 757, 305, 836, 308, 309, 311, 310, 708, 0,
	837, 741, 782, 312, 813, 313, 314, 0, 766, 767,
	0, 0, 317, 318, 0, 0, 319, 445, 838, 320,
	839, 814, 321, 322, 323, 324, 325, 326, 327, 0,
	328, 815, 329, 448, 330, 0, 331, 332, 333, 334,
	335, 816, 336, 337, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 343, 346, 347, 348, 349, 0, 350,
	840, 0, 351, 352, 353, 717, 354, 0, 358, 359,
	360, 361, 362, 363, 364, 0, 370, 371, 758, 759,
	760, 761, 366, 372, 373, 777, 374, 355, 356, 375,
	841, 376, 817, 762, 378, 0, 387, 379, 380, 381,
	357, 382, 385, 797, 383, 0, 384, 818, 0, 388,
	389, 0, 390, 391, 392, 393, 394, 395, 756, 397,
	0, 819, 820, 798, 0, 0, 399, 400, 821, 822,
	739, 401, 402, 403, 404, 0, 0, 405, 406, 407,
	409, 778, 410, 0, 763, 411, 412, 413, 457, 823,
	0, 0, 414, 459, 0, 0, 0, 0, 415, 416,
	460, 417, 418, 419, 709, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 1032, 721, 745, 733, 734, 731, 732, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 780,
	725, 0, 0, 0, 217, 218, 219, 421, 799, 765,
	800, 753, 786, 801, 0, 223, 755, 754, 226, 227,
	228, 728, 779, 802, 803, 427, 0, 229, 784, 0,
	770, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 826, 242,
	243, 244, 773, 771, 772, 776, 0, 774, 775, 245,
	246, 471, 247, 787, 249, 804, 805, 711, 250, 0,
	251, 0, 252, 0, 0, 788, 254, 0, 255, 0,
	0, 0, 716, 256, 257, 259, 260, 258, 261, 806,
	807, 740, 827, 0, 0, 0, 0, 0, 262, 263,
	808, 789, 790, 0, 266, 0, 267, 0, 0, 828,
	268, 0, 269, 809, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 1031, 783, 830, 0, 764, 0, 0,
	0, 0, 276, 278, 285, 0, 829, 279, 810, 768,
	791, 792, 793, 794, 811, 0, 769, 0, 286, 831,
	832, 287, 288, 289, 833, 795, 796, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 812, 834, 297, 298,
	835, 0, 299, 300, 0, 0, 301, 0, 302, 713,
	712, 303, 304, 306, 757, 305, 836, 308, 309, 311,
	310, 708, 0, 837, 741, 782, 312, 813, 313, 314,
	0, 766, 767, 0, 0, 317, 318, 0, 0, 319,
	445, 838, 320, 839, 814, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 815, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 816, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 840, 0, 351, 352, 353, 717, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 758, 759, 760, 761, 366, 372, 373, 777, 374,
	355, 356, 375, 841, 376, 817, 762, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 797, 383, 0, 384,
	818, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 756, 397, 0, 819, 820, 798, 0, 0, 399,
	400, 821, 822, 739, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 778, 410, 0, 763, 411, 412,
	413, 457, 823, 0, 0, 414, 459, 0, 0, 0,
	0, 415, 416, 460, 417, 418, 419, 709, 0, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 0,
	705, 706, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 1029, 721, 745, 733, 734, 731,
	732, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 780, 725, 0, 0, 0, 217, 218, 219,
	421, 799, 765, 800, 753, 786, 801, 0, 223, 755,
	754, 226, 227, 228, 728, 779, 802, 803, 427, 0,
	229, 784, 0, 770, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 826, 242, 243, 244, 773, 771, 772, 776, 0,
	774, 775, 245, 246, 471, 247, 787, 249, 804, 805,
	711, 250, 0, 251, 0, 252, 0, 0, 788, 254,
	0, 255, 0, 0, 0, 716, 256, 257, 259, 260,
	258, 261, 806, 807, 740, 827, 0, 0, 0, 0,
	0, 262, 263, 808, 789, 790, 0, 266, 0, 267,
	0, 0, 828, 268, 0, 269, 809, 0, 436, 0,
	270, 271, 272, 273, 274, 275, 1028, 783, 830, 0,
	764, 0, 0, 0, 0, 276, 278, 285, 0, 829,
	279, 810, 768, 791, 792, 793, 794, 811, 0, 769,
	0, 286, 831, 832, 287, 288, 289, 833, 795, 796,
	0, 0, 292, 293, 294, 0, 296, 295, 0, 812,
	834, 297, 298, 835, 0, 299, 300, 0, 0, 301,
	0, 302, 713, 712, 303, 304, 306, 757, 305, 836,
	308, 309, 311, 310, 708, 0, 837, 741, 782, 312,
	813, 313, 314, 0, 766, 767, 0, 0, 317, 318,
	0, 0, 319, 445, 838, 320, 839, 814, 321, 322,
	323, 324, 325, 326, 327, 0, 328, 815, 329, 448,
	330, 0, 331, 332, 333, 334, 335, 816, 336, 337,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 343,
	346, 347, 348, 349, 0, 350, 840, 0, 351, 352,
	353, 717, 354, 0, 358, 359, 360, 361, 362, 363,
	364, 0, 370, 371, 758, 759, 760, 761, 366, 372,
	373, 777, 374, 355, 356, 375, 841, 376, 817, 762,
	378, 0, 387, 379, 380, 381, 357, 382, 385, 797,
	383, 0, 384, 818, 0, 388, 389, 0, 390, 391,
	392, 393, 394, 395, 756, 397, 0, 819, 820, 798,
	0, 0, 399, 400, 821, 822, 739, 401, 402, 403,
	404, 0, 0, 405, 406, 407, 409, 778, 410, 0,
	763, 411, 412, 413, 457, 823, 0, 0, 414, 459,
	0, 0, 0, 0, 415, 416, 460, 417, 418, 419,
	709, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 1026, 721, 745,
	733, 734, 731, 732, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 780, 725, 0, 0, 0,
	217, 218, 219, 421, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 728, 779, 802,
	803, 427, 0, 229, 784, 0, 770, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 773, 771,
	772, 776, 0, 774, 775, 245, 246, 471, 247, 787,
	249, 804, 805, 711, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 716, 256,
	257, 259, 260, 258, 261, 806, 807, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 781,
	783, 830, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 831, 832, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 713, 712, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 708, 0, 837,
	741, 782, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 717, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 777, 374, 355, 356, 375, 841,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 818, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 821, 822, 739,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	778, 410, 0, 763, 411, 412, 413, 457, 823, 0,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 709, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 705, 706, 745, 733,
	734, 731, 732, 722, 0, 718, 0, 0, 0, 0,
	0, 721, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 780, 725, 0, 0, 0, 217,
	218, 219, 421, 799, 765, 800, 753, 786, 801, 0,
	223, 755, 754, 226, 227, 228, 728, 779, 802, 803,
	427, 0, 229, 784, 0, 770, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 826, 242, 243, 244, 773, 771, 772,
	776, 0, 774, 775, 245, 246, 471, 247, 787, 249,
	804, 805, 711, 250, 0, 251, 0, 252, 0, 0,
	788, 254, 0, 255, 0, 0, 0, 716, 256, 257,
	259, 260, 258, 261, 806, 807, 740, 827, 0, 0,
	0, 0, 0, 262, 263, 808, 789, 790, 0, 266,
	0, 267, 0, 0, 828, 268, 0, 269, 809, 0,
	436, 0, 270, 271, 272, 273, 274, 275, 781, 783,
	830, 0, 764, 0, 0, 0, 0, 276, 278, 285,
	0, 829, 279, 810, 768, 791, 792, 793, 794, 811,
	0, 769, 0, 286, 831, 832, 287, 288, 289, 833,
	795, 796, 0, 0, 292, 293, 294, 0, 296, 295,
	0, 812, 834, 297, 298, 835, 0, 299, 300, 0,
	0, 301, 0, 302, 713, 712, 303, 304, 306, 757,
	305, 836, 308, 309, 311, 310, 708, 0, 837, 741,
	782, 312, 813, 313, 314, 0, 766, 767, 0, 0,
	317, 318, 0, 0, 319, 445, 838, 320, 839, 814,
	321, 322, 323, 324, 325, 326, 327, 0, 328, 815,
	329, 448, 330, 0, 331, 332, 333, 334, 335, 816,
	336, 337, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 343, 346, 347, 348, 349, 0, 350, 840, 0,
	351, 352, 353, 717, 354, 0, 358, 359, 360, 361,
	362, 363, 364, 0, 370, 371, 758, 759, 760, 761,
	366, 372, 373, 777, 374, 355, 356, 375, 841, 376,
	817, 762, 378, 0, 387, 379, 380, 381, 357, 382,
	385, 797, 383, 0, 384, 818, 0, 388, 389, 0,
	390, 391, 392, 393, 394, 395, 756, 397, 0, 819,
	820, 798, 0, 0, 399, 400, 821, 822, 739, 401,
	402, 403, 404, 0, 0, 405, 406, 407, 409, 778,
	410, 0, 763, 411, 412, 413, 457, 823, 0, 0,
	414, 459, 0, 0, 0, 0, 415, 416, 460, 417,
	418, 419, 709, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 705, 706, 745, 733, 734,
	731, 732, 722, 0, 718, 0, 0, 0, 0, 0,
	721, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 780, 725, 0, 0, 0, 217, 218,
	219, 421, 799, 765, 800, 753, 786, 801, 0, 223,
	755, 754, 226, 227, 228, 728, 779, 802, 803, 427,
	0, 229, 784, 0, 770, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 2965, 773, 771, 772, 776,
	0, 774, 775, 245, 246, 471, 247, 787, 249, 804,
	805, 711, 250, 0, 251, 0, 252, 0, 0, 788,
	254, 0, 255, 0, 0, 0, 716, 256, 257, 259,
	260, 258, 261, 806, 807, 740, 827, 0, 0, 0,
	0, 0, 262, 263, 808, 789, 790, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 781, 783, 830,
	0, 764, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 810, 768, 791, 792, 793, 794, 811, 0,
	769, 0, 286, 831, 832, 287, 288, 289, 833, 795,
	796, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 713, 712, 303, 304, 306, 757, 305,
	836, 308, 309, 311, 310, 708, 0, 837, 741, 782,
	312, 813, 313, 314, 0, 766, 767, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 816, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 717, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 758, 759, 760, 761, 366,
	372, 373, 777, 374, 355, 356, 375, 841, 376, 817,
	762, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	797, 383, 0, 384, 818, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 756, 397, 0, 819, 820,
	798, 0, 0, 399, 400, 821, 822, 739, 401, 402,
	2964, 404, 0, 0, 405, 406, 407, 409, 778, 410,
	0, 763, 411, 412, 413, 457, 823, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 709, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 705, 706, 745, 733, 734, 731,
	732, 722, 0, 718, 0, 0, 0, 0, 0, 721,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 780, 725, 0, 0, 0, 217, 218, 219,
	2963, 799, 765, 800, 753, 786, 801, 0, 223, 755,
	754, 226, 227, 228, 728, 779, 802, 803, 427, 0,
	229, 784, 0, 770, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 826, 242, 243, 2965, 773, 771, 772, 776, 0,
	774, 775, 245, 246, 471, 247, 787, 249, 804, 805,
	711, 250, 0, 251, 0, 252, 0, 0, 788, 254,
	0, 255, 0, 0, 0, 716, 256, 257, 259, 260,
	258, 261, 806, 807, 740, 827, 0, 0, 0, 0,
	0, 262, 263, 808, 789, 790, 0, 266, 0, 267,
	0, 0, 828, 268, 0, 269, 809, 0, 436, 0,
	270, 271, 272, 273, 274, 275, 781, 783, 830, 0,
	764, 0, 0, 0, 0, 276, 278, 285, 0, 829,
	279, 810, 768, 791, 792, 793, 794, 811, 0, 769,
	0, 286, 831, 832, 287, 288, 289, 833, 795, 796,
	0, 0, 292, 293, 294, 0, 296, 295, 0, 812,
	834, 297, 298, 835, 0, 299, 300, 0, 0, 301,
	0, 302, 713, 712, 303, 304, 306, 757, 305, 836,
	308, 309, 311, 310, 708, 0, 837, 741, 782, 312,
	813, 313, 314, 0, 766, 767, 0, 0, 317, 318,
	0, 0, 319, 445, 838, 320, 839, 814, 321, 322,
	323, 324, 325, 326, 327, 0, 328, 815, 329, 448,
	330, 0, 331, 332, 333, 334, 335, 816, 336, 337,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 343,
	346, 347, 348, 349, 0, 350, 840, 0, 351, 352,
	353, 717, 354, 0, 358, 359, 360, 361, 362, 363,
	364, 0, 370, 371, 758, 759, 760, 761, 366, 372,
	373, 777, 374, 355, 356, 375, 841, 376, 817, 762,
	378, 0, 387, 379, 380, 381, 357, 382, 385, 797,
	383, 0, 384, 818, 0, 388, 389, 0, 390, 391,
	392, 393, 394, 395, 756, 397, 0, 819, 820, 798,
	0, 0, 399, 400, 821, 822, 739, 401, 402, 2964,
	404, 0, 0, 405, 406, 407, 409, 778, 410, 0,
	763, 411, 412, 413, 457, 823, 0, 0, 414, 459,
	0, 0, 0, 0, 415, 416, 460, 417, 418, 419,
	709, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 0, 705, 706, 745, 733, 734, 731, 732,
	722, 0, 718, 0, 0, 0, 0, 0, 721, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 780, 725, 0, 0, 0, 217, 218, 219, 421,
	799, 765, 800, 753, 786, 801, 0, 223, 755, 754,
	226, 227, 228, 728, 779, 802, 803, 427, 0, 229,
	784, 0, 770, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	826, 242, 243, 244, 773, 771, 772, 776, 0, 774,
	775, 245, 246, 471, 247, 787, 249, 804, 805, 0,
	250, 0, 251, 0, 252, 0, 0, 788, 254, 0,
	255, 0, 0, 0, 716, 256, 257, 259, 260, 258,
	261, 806, 807, 740, 827, 0, 0, 0, 0, 0,
	262, 263, 808, 789, 790, 0, 266, 0, 267, 0,
	0, 828, 268, 0, 269, 809, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 781, 783, 830, 0, 764,
	0, 0, 0, 0, 276, 278, 285, 0, 829, 279,
	810, 768, 791, 792, 793, 794, 811, 0, 769, 0,
	286, 831, 832, 287, 288, 289, 833, 795, 796, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 812, 834,
	297, 298, 835, 0, 299, 300, 0, 0, 301, 0,
	302, 895, 894, 303, 304, 306, 757, 305, 836, 308,
	309, 311, 310, 0, 0, 837, 741, 782, 312, 813,
	313, 314, 0, 766, 767, 0, 0, 317, 318, 0,
	0, 319, 445, 838, 320, 839, 814, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 815, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 816, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 840, 0, 351, 352, 353,
	1829, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 758, 759, 760, 761, 366, 372, 373,
	777, 374, 355, 356, 375, 841, 376, 817, 762, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 797, 383,
	0, 384, 818, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 756, 397, 0, 819, 820, 798, 0,
	0, 399, 400, 821, 822, 739, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 778, 410, 0, 763,
	411, 412, 413, 457, 823, 0, 0, 414, 459, 0,
	0, 0, 0, 415, 416, 460, 417, 418, 419, 745,
	733, 734, 731, 732, 722, 0, 0, 1827, 0, 0,
	0, 0, 1825, 1826, 0, 212, 213, 214, 215, 0,
	216, 1828, 0, 0, 0, 780, 725, 721, 0, 0,
	217, 218, 219, 0, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 728, 779, 802,
	803, 427, 0, 229, 784, 0, 770, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 2965, 773, 771,
	772, 776, 0, 774, 775, 245, 246, 471, 247, 787,
	249, 804, 805, 711, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 716, 256,
	257, 259, 260, 258, 261, 806, 807, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 781,
	783, 0, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 0, 0, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 713, 712, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 708, 0, 0,
	741, 782, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 717, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 777, 374, 355, 356, 375, 0,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 818, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 821, 822, 739,
	401, 402, 2964, 404, 0, 0, 405, 406, 407, 409,
	778, 410, 0, 763, 411, 412, 413, 457, 823, 0,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 693,
	0, 891, 0, 0, 0, 0, 705, 706, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 212, 213, 214,
	215, 721, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 893, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 826, 242, 243, 244,
	0, 887, 888, 0, 0, 889, 890, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 806, 807, 0,
	827, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 828, 268, 0,
	269, 809, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 830, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 829, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 831, 832, 287,
	288, 289, 833, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 812, 834, 297, 298, 835, 0,
	299, 300, 0, 0, 301, 0, 302, 895, 894, 303,
	304, 306, 307, 305, 836, 308, 309, 311, 310, 0,
	0, 837, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 885, 317, 318, 0, 0, 319, 445, 838,
	320, 839, 814, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 815, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 840, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 167, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 841, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 818, 0,
	388, 389, 169, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 821,
	822, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 1103,
	458, 0, 0, 414, 459, 0, 0, 891, 161, 415,
	416, 460, 417, 418, 419, 0, 162, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 877, 0, 1395, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 887, 888, 0,
	0, 889, 890, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 806, 807, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 809, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	812, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 885, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 814, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 815, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 167, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 818, 0, 388, 389, 169, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 821, 822, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 1103, 458, 0, 0, 414,
	459, 0, 0, 891, 161, 415, 416, 460, 417, 418,
	419, 0, 162, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 780,
	0, 877, 0, 1395, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 779, 425, 426, 427, 0, 229, 784, 0,
	770, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 826, 242,
	243, 244, 773, 771, 772, 776, 0, 774, 775, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 806,
	807, 0, 827, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 828,
	268, 0, 269, 809, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 781, 783, 830, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 829, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 831,
	832, 287, 288, 289, 833, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 812, 834, 297, 298,
	835, 0, 299, 300, 0, 0, 301, 0, 302, 895,
	894, 303, 304, 306, 307, 305, 836, 308, 309, 311,
	310, 0, 0, 837, 0, 782, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 838, 320, 839, 814, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 815, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 840, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 777, 374,
	355, 356, 375, 841, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	818, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 821, 822, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 778, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 2205, 0, 891,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 2517,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 893, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 0, 887,
	888, 0, 0, 889, 890, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 806, 807, 0, 827, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 809,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 830, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 831, 832, 287, 288, 289,
	833, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 812, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 895, 894, 303, 304, 306,
	307, 305, 836, 308, 309, 311, 310, 0, 0, 837,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	885, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	814, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	815, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 841,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 818, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 821, 822, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 876, 0, 891, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 877, 0, 883, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 893, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	826, 242, 243, 244, 0, 887, 888, 0, 0, 889,
	890, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 806, 807, 0, 827, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 828, 268, 0, 269, 809, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 830, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 829, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 831, 832, 287, 288, 289, 833, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 812, 834,
	297, 298, 835, 0, 299, 300, 0, 0, 301, 0,
	302, 895, 894, 303, 304, 306, 307, 305, 836, 308,
	309, 311, 310, 0, 0, 837, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 885, 317, 318, 0,
	0, 319, 445, 838, 320, 839, 814, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 815, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 840, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 841, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 818, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 821, 822, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 0,
	0, 891, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 877,
	0, 883, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 893, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 826, 242, 243, 244,
	0, 887, 888, 0, 0, 889, 890, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 806, 807, 0,
	827, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 828, 268, 0,
	269, 809, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 830, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 829, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 831, 832, 287,
	288, 289, 833, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 812, 834, 297, 298, 835, 0,
	299, 300, 0, 0, 301, 0, 302, 895, 894, 303,
	304, 306, 307, 305, 836, 308, 309, 311, 310, 0,
	0, 837, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 885, 317, 318, 0, 0, 319, 445, 838,
	320, 839, 814, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 815, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 840, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 841, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 818, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 821,
	822, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 1100, 0, 916, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 877, 0, 883, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 167, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 169, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 1103, 458, 0, 0, 414,
	459, 693, 0, 209, 161, 415, 416, 460, 417, 418,
	419, 0, 162, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 134, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 437, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 167, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 169, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 1103, 458, 0, 0, 414, 459, 0, 0, 0,
	161, 415, 416, 460, 417, 418, 419, 0, 162, 745,
	733, 734, 731, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 134,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 799, 765, 800, 753, 786, 801,
	0, 223, 755, 754, 226, 227, 228, 0, 0, 802,
	803, 427, 0, 229, 428, 0, 893, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 787,
	249, 804, 805, 0, 250, 0, 251, 0, 252, 0,
	0, 788, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 740, 827, 0,
	0, 0, 0, 0, 262, 263, 808, 789, 790, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 830, 0, 764, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 810, 768, 791, 792, 793, 794,
	811, 0, 769, 0, 286, 831, 832, 287, 288, 289,
	833, 795, 796, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 895, 894, 303, 304, 306,
	757, 305, 836, 308, 309, 311, 310, 0, 0, 837,
	741, 443, 312, 813, 313, 314, 0, 766, 767, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	816, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 758, 759, 760,
	761, 366, 372, 373, 0, 374, 355, 356, 375, 841,
	376, 817, 762, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 797, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 756, 397, 0,
	819, 820, 798, 0, 0, 399, 400, 455, 456, 739,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 763, 411, 412, 413, 457, 823, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 0, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 2004, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 0,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 2431, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 1172, 0, 916, 915, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 1399, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 1096, 0, 916, 915, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	893, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 826, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 827, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 828,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 1095, 438, 830, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 829, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 831,
	832, 287, 288, 289, 833, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 834, 297, 298,
	835, 0, 299, 300, 0, 0, 301, 0, 302, 895,
	894, 303, 304, 306, 307, 305, 836, 308, 309, 311,
	310, 0, 0, 837, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 838, 320, 839, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 840, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 841, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 0, 0, 0,
	0, 415, 416, 460, 417, 418, 419, 1092, 0, 916,
	915, 0, 0, 0, 913, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 893, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 826, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 827, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 828, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 1091,
	438, 830, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 829, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 831, 832, 287, 288, 289,
	833, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 834, 297, 298, 835, 0, 299, 300,
	0, 0, 301, 0, 302, 895, 894, 303, 304, 306,
	307, 305, 836, 308, 309, 311, 310, 0, 0, 837,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 838, 320, 839,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 840,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 841,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 1053, 0, 916, 915, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 893, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	826, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 827, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 828, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 1052, 438, 830, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 829, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 831, 832, 287, 288, 289, 833, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 834,
	297, 298, 835, 0, 299, 300, 0, 0, 301, 0,
	302, 895, 894, 303, 304, 306, 307, 305, 836, 308,
	309, 311, 310, 0, 0, 837, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 838, 320, 839, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 840, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 841, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 0,
	0, 0, 0, 415, 416, 460, 417, 418, 419, 1050,
	0, 916, 915, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 893, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 826, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	827, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 828, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 1049, 438, 830, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 829, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 831, 832, 287,
	288, 289, 833, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 834, 297, 298, 835, 0,
	299, 300, 0, 0, 301, 0, 302, 895, 894, 303,
	304, 306, 307, 305, 836, 308, 309, 311, 310, 0,
	0, 837, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 838,
	320, 839, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 840, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 841, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 909, 0, 916, 915, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 911, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 916, 915, 414,
	459, 0, 913, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 916, 915, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 916, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 893, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 826, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 827, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 828, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 830,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	829, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 831, 832, 287, 288, 289, 833, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 834, 297, 298, 835, 0, 299, 300, 0, 0,
	301, 0, 302, 895, 894, 303, 304, 306, 307, 305,
	836, 308, 309, 311, 310, 0, 0, 837, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 838, 320, 839, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 840, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 841, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 204, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 1623, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 203, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 565, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 208, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 204, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 437, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 203, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 201, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 208, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 204, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	203, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 208, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 204, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	203, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 208, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 208, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 1900, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 1897, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 1975, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 1903, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 1973, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 1972, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 1902, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 1974, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 1900, 229, 428, 0, 0, 1894, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 1897, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 1903, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 1893,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 1902, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 1901, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 571, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 570, 552, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 555,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 556, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	557, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 551,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 552, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 555, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 556,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 557, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 209, 0, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 555, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 556,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 557, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 1071, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 885, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 904, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 906, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 885, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 901, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 903,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	885, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 897, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 899, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 885, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 490,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 489, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 488, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 209, 0, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 1880,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 209, 2366, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 209, 2366, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 2363, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 209, 0, 414, 459, 0, 0, 0, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 885, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 1645, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 1643, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 437, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 1641, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 209,
	0, 414, 459, 0, 0, 0, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 212, 213, 214, 215, 1619,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 1579, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 1577,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 597, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 1145,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 598,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 594, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 593, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 1477, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 1476, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 597, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 1145, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 598, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 594,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	593, 454, 398, 0, 0, 399, 1146, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 597, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 587,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 598, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 594, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 1121, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 593, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 1089,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 1088, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 1085, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 1084, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 1082, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 1081, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 1079, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 1078,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 1075, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 1074, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 209, 0, 414, 459, 0,
	0, 0, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 212, 213, 214, 215, 1063, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 1061,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 1060, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 1055, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 1046, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 229, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 1045, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 300, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 305, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 450, 354,
	0, 358, 359, 360, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 372, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 453, 454, 398, 0, 0, 399,
	400, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 1042, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 358, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 1038, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 1040, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 923,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 925, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 920, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 597, 0, 209, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 217, 218, 219, 421, 422, 220,
	423, 221, 222, 424, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 425, 426, 427, 0, 587, 428, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 471, 247, 248, 249, 429, 430, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 431, 256, 257, 259, 260, 258, 261, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	434, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 435, 0, 436, 0, 270, 271, 272,
	273, 274, 275, 437, 438, 0, 0, 277, 0, 0,
	0, 0, 276, 278, 285, 0, 0, 279, 439, 281,
	280, 282, 283, 284, 440, 0, 441, 0, 286, 0,
	0, 287, 288, 289, 0, 290, 291, 0, 0, 292,
	293, 294, 0, 296, 295, 0, 442, 0, 297, 298,
	0, 0, 299, 586, 0, 0, 301, 0, 302, 0,
	0, 303, 304, 306, 307, 598, 0, 308, 309, 311,
	310, 0, 0, 0, 0, 443, 312, 444, 313, 314,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	445, 0, 320, 0, 446, 321, 322, 323, 324, 325,
	326, 327, 0, 328, 447, 329, 448, 330, 0, 331,
	332, 333, 334, 335, 449, 336, 337, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 343, 346, 347, 348,
	349, 0, 350, 0, 0, 351, 352, 353, 588, 354,
	0, 358, 359, 594, 361, 362, 363, 364, 0, 370,
	371, 365, 367, 368, 369, 366, 589, 373, 0, 374,
	355, 356, 375, 0, 376, 451, 377, 378, 0, 387,
	379, 380, 381, 357, 382, 385, 386, 383, 0, 384,
	452, 0, 388, 389, 0, 390, 391, 392, 393, 394,
	395, 396, 397, 0, 593, 454, 398, 0, 0, 399,
	591, 455, 456, 0, 401, 402, 403, 404, 0, 0,
	405, 406, 407, 409, 0, 410, 0, 408, 411, 412,
	413, 457, 458, 0, 0, 414, 459, 577, 0, 209,
	0, 415, 416, 460, 417, 418, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	217, 218, 219, 421, 422, 220, 423, 221, 222, 424,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 425,
	426, 427, 0, 229, 428, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 471, 247, 248,
	249, 429, 430, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 431, 256,
	257, 259, 260, 258, 261, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 434, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 435,
	0, 436, 0, 270, 271, 272, 273, 274, 275, 437,
	438, 0, 0, 277, 0, 0, 0, 0, 276, 278,
	285, 0, 0, 279, 439, 281, 280, 282, 283, 284,
	440, 0, 441, 0, 286, 0, 0, 287, 288, 289,
	0, 290, 291, 0, 0, 292, 293, 294, 0, 296,
	295, 0, 442, 0, 297, 298, 0, 0, 299, 300,
	0, 0, 301, 0, 302, 0, 0, 303, 304, 306,
	307, 305, 0, 308, 309, 311, 310, 0, 0, 0,
	0, 443, 312, 444, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 445, 0, 320, 0,
	446, 321, 322, 323, 324, 325, 326, 327, 0, 328,
	447, 329, 448, 330, 0, 331, 332, 333, 334, 335,
	449, 336, 337, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 343, 346, 347, 348, 349, 0, 350, 0,
	0, 351, 352, 353, 450, 354, 0, 578, 359, 360,
	361, 362, 363, 364, 0, 370, 371, 365, 367, 368,
	369, 366, 372, 373, 0, 374, 355, 356, 375, 0,
	376, 451, 377, 378, 0, 387, 379, 380, 381, 357,
	382, 385, 386, 383, 0, 384, 452, 0, 388, 389,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 0,
	453, 454, 398, 0, 0, 399, 400, 455, 456, 0,
	401, 402, 403, 404, 0, 0, 405, 406, 407, 409,
	0, 410, 0, 408, 411, 412, 413, 457, 458, 0,
	0, 414, 459, 573, 0, 209, 0, 415, 416, 460,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 420, 0, 0, 0, 0, 217, 218, 219, 421,
	422, 220, 423, 221, 222, 424, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 425, 426, 427, 0, 229,
	428, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 471, 247, 248, 249, 429, 430, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 431, 256, 257, 259, 260, 258,
	261, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 434, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 435, 0, 436, 0, 270,
	271, 272, 273, 274, 275, 437, 438, 0, 0, 277,
	0, 0, 0, 0, 276, 278, 285, 0, 0, 279,
	439, 281, 280, 282, 283, 284, 440, 0, 441, 0,
	286, 0, 0, 287, 288, 289, 0, 290, 291, 0,
	0, 292, 293, 294, 0, 296, 295, 0, 442, 0,
	297, 298, 0, 0, 299, 300, 0, 0, 301, 0,
	302, 0, 0, 303, 304, 306, 307, 305, 0, 308,
	309, 311, 310, 0, 0, 0, 0, 443, 312, 444,
	313, 314, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 445, 0, 320, 0, 446, 321, 322, 323,
	324, 325, 326, 327, 0, 328, 447, 329, 448, 330,
	0, 331, 332, 333, 334, 335, 449, 336, 337, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 343, 346,
	347, 348, 349, 0, 350, 0, 0, 351, 352, 353,
	450, 354, 0, 358, 359, 360, 361, 362, 363, 364,
	0, 370, 371, 365, 367, 368, 369, 366, 372, 373,
	0, 374, 355, 356, 375, 0, 376, 451, 377, 378,
	0, 387, 379, 380, 381, 357, 382, 385, 386, 383,
	0, 384, 452, 0, 388, 389, 0, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 453, 454, 398, 0,
	0, 399, 400, 455, 456, 0, 401, 402, 403, 404,
	0, 0, 405, 406, 407, 409, 0, 410, 0, 408,
	411, 412, 413, 457, 458, 0, 0, 414, 459, 563,
	0, 209, 0, 415, 416, 460, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 420, 0, 0,
	0, 0, 217, 218, 219, 421, 422, 220, 423, 221,
	222, 424, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 425, 426, 427, 0, 229, 428, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 471,
	247, 248, 249, 429, 430, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	431, 256, 257, 259, 260, 258, 261, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 434, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 435, 0, 436, 0, 270, 271, 272, 273, 274,
	275, 437, 438, 0, 0, 277, 0, 0, 0, 0,
	276, 278, 285, 0, 0, 279, 439, 281, 280, 282,
	283, 284, 440, 0, 441, 0, 286, 0, 0, 287,
	288, 289, 0, 290, 291, 0, 0, 292, 293, 294,
	0, 296, 295, 0, 442, 0, 297, 298, 0, 0,
	299, 300, 0, 0, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 305, 0, 308, 309, 311, 310, 0,
	0, 0, 0, 443, 312, 444, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 445, 0,
	320, 0, 446, 321, 322, 323, 324, 325, 326, 327,
	0, 328, 447, 329, 448, 330, 0, 331, 332, 333,
	334, 335, 449, 336, 337, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 343, 346, 347, 348, 349, 0,
	350, 0, 0, 351, 352, 353, 450, 354, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 370, 371, 365,
	367, 368, 369, 366, 372, 373, 0, 374, 355, 356,
	375, 0, 376, 451, 377, 378, 0, 387, 379, 380,
	381, 357, 382, 385, 386, 383, 0, 384, 452, 0,
	388, 389, 0, 390, 391, 392, 393, 394, 395, 396,
	397, 0, 453, 454, 398, 0, 0, 399, 400, 455,
	456, 0, 401, 402, 403, 404, 0, 0, 405, 406,
	407, 409, 0, 410, 0, 408, 411, 412, 413, 457,
	458, 0, 0, 414, 459, 512, 0, 209, 0, 415,
	416, 460, 417, 418, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 2257, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 2255, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 2244, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 578, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 1490, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 0, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 1481, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 324, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 334, 335, 449, 859,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 354, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 209, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 217, 218,
	219, 421, 422, 220, 423, 221, 222, 424, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 425, 426, 427,
	0, 229, 428, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 471, 247, 248, 249, 429,
	430, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 431, 256, 257, 259,
	260, 258, 261, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 434, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 435, 0, 436,
	0, 270, 271, 272, 273, 274, 275, 437, 438, 0,
	0, 277, 0, 0, 0, 0, 276, 278, 285, 0,
	0, 279, 439, 281, 280, 282, 283, 284, 440, 0,
	441, 0, 286, 0, 0, 287, 288, 289, 0, 290,
	291, 0, 0, 292, 293, 294, 0, 296, 295, 0,
	442, 0, 297, 298, 0, 0, 299, 300, 0, 0,
	301, 0, 302, 0, 0, 303, 304, 306, 307, 305,
	0, 308, 309, 311, 310, 0, 0, 0, 0, 443,
	312, 444, 313, 314, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 445, 0, 320, 0, 446, 321,
	322, 323, 0, 325, 326, 327, 0, 328, 447, 329,
	448, 330, 0, 331, 332, 333, 0, 335, 449, 336,
	337, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	343, 346, 347, 348, 349, 0, 350, 0, 0, 351,
	352, 353, 450, 0, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 370, 371, 365, 367, 368, 369, 366,
	372, 373, 0, 374, 355, 356, 375, 0, 376, 451,
	377, 378, 0, 387, 379, 380, 381, 357, 382, 385,
	386, 383, 0, 384, 452, 0, 388, 389, 0, 390,
	391, 392, 393, 394, 395, 396, 397, 0, 453, 454,
	398, 0, 0, 399, 400, 455, 456, 0, 401, 402,
	403, 404, 0, 0, 405, 406, 407, 409, 0, 410,
	0, 408, 411, 412, 413, 457, 458, 0, 0, 414,
	459, 0, 0, 0, 0, 415, 416, 460, 417, 418,
	419, 1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 1245, 0, 0, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 0,
	0, 1244, 0, 0, 0, 0, 0, 1278, 0, 1264,
	0, 0, 0, 0, 1245, 0, 1261, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 1268, 1269, 1270,
	0, 0, 0, 0, 0, 1250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1282, 1292, 0,
	1272, 1273, 1274, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 0, 0, 0, 0, 0, 0, 1259,
	1260, 0, 0, 0, 0, 1282, 1292, 0, 1272, 1273,
	1274, 0, 1280, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 0, 0, 0, 1290, 0, 1259, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 1242, 1243, 0, 1275, 1276, 1277, 1285,
	1286, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 1283, 0, 0, 0, 0, 1245, 0,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1244, 0, 0, 0, 0, 0, 1281,
	0, 1264, 1256, 1257, 1263, 1262, 1258, 1284, 1261, 1255,
	1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 2141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 0, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 1267, 1268,
	1269, 1270, 0, 0, 2140, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 1282,
	1292, 0, 1272, 1273, 1274, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 1291, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 1259, 1260, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 1280, 0, 0, 1264, 0, 0,
	0, 1265, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 1242, 1243,
	0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 0, 1288,
	1289, 0, 0, 0, 0, 0, 1278, 1259, 1260, 0,
	0, 0, 0, 1245, 0, 0, 1291, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 1290, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258, 1284,
	0, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	0, 0, 0, 1271, 2928, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 0,
	1266, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277,
	1285, 1286, 1287, 1283, 1282, 1292, 0, 1272, 1273, 1274,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 1245,
	0, 0, 1291, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 1280,
	0, 0, 1264, 0, 0, 0, 1265, 0, 0, 1261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1281, 0, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 1279, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	2924, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 1269, 1270, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1282, 1292, 0, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277, 1285,
	1286, 1287, 1283, 0, 1288, 1289, 0, 0, 0, 0,
	0, 1278, 1259, 1260, 0, 0, 0, 0, 1245, 0,
	0, 1291, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1244, 0, 0, 0, 0, 1290, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 1261, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 1256,
	1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246,
	1247, 1248, 1249, 1251, 1252, 0, 0, 0, 1271, 2864,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1268,
	1269, 1270, 0, 0, 0, 1266, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 1282,
	1292, 0, 1272, 1273, 1274, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 1291, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 1259, 1260, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 1280, 0, 0, 1264, 0, 0,
	0, 1265, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258,
	1284, 1279, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251,
	1252, 0, 0, 0, 0, 2813, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 1242, 1243,
	0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 0, 1288,
	1289, 0, 0, 0, 0, 0, 1278, 1259, 1260, 0,
	0, 0, 0, 1245, 0, 0, 1291, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 1290, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258, 1284,
	0, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	0, 0, 0, 1271, 2781, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 0,
	1266, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277,
	1285, 1286, 1287, 1283, 1282, 1292, 0, 1272, 1273, 1274,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 1245,
	0, 0, 1291, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 1280,
	0, 0, 1264, 0, 0, 0, 1265, 0, 0, 1261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1281, 0, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 1279, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	2775, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 1269, 1270, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1282, 1292, 0, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277, 1285,
	1286, 1287, 1283, 0, 1288, 1289, 0, 0, 0, 0,
	0, 1278, 1259, 1260, 0, 0, 0, 0, 1245, 0,
	0, 1291, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1244, 0, 0, 0, 0, 1290, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 1261, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 1256,
	1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246,
	1247, 1248, 1249, 1251, 1252, 0, 0, 0, 1271, 2769,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1268,
	1269, 1270, 0, 0, 0, 1266, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 1282,
	1292, 0, 1272, 1273, 1274, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 1291, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 1259, 1260, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 1280, 0, 0, 1264, 0, 0,
	0, 1265, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258,
	1284, 1279, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251,
	1252, 0, 0, 0, 0, 2686, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 1242, 1243,
	0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 0, 1288,
	1289, 0, 0, 0, 0, 0, 1278, 1259, 1260, 0,
	0, 0, 0, 1245, 0, 0, 1291, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 1290, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258, 1284,
	0, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	0, 0, 0, 1271, 2643, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 0,
	1266, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277,
	1285, 1286, 1287, 1283, 1282, 1292, 0, 1272, 1273, 1274,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 1245,
	0, 0, 1291, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 1280,
	0, 0, 1264, 0, 0, 0, 1265, 0, 0, 1261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1281, 0, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 1279, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	2642, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 1269, 1270, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1282, 1292, 0, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 1242, 1243, 0, 1275, 1276, 1277, 1285,
	1286, 1287, 1283, 0, 1288, 1289, 0, 0, 0, 0,
	0, 1278, 1259, 1260, 0, 0, 0, 0, 1245, 0,
	0, 1291, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1244, 0, 0, 0, 0, 1290, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 1261, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 1256,
	1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246,
	1247, 1248, 1249, 1251, 1252, 0, 0, 0, 1271, 2614,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1268,
	1269, 1270, 0, 0, 0, 1266, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 1282,
	1292, 0, 1272, 1273, 1274, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 1291, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 1259, 1260, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 1280, 0, 0, 1264, 0, 0,
	0, 1265, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258,
	1284, 1279, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251,
	1252, 0, 0, 0, 0, 2435, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 1242, 1243,
	0, 1275, 1276, 1277, 1285, 1286, 1287, 1283, 0, 1288,
	1289, 0, 0, 0, 0, 0, 1278, 1259, 1260, 0,
	0, 0, 0, 1245, 0, 0, 1291, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 1290, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258, 1284,
	0, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	0, 0, 0, 1271, 2408, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 0,
	1266, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 1282, 1292, 0, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1281, 0, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 1279, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	1755, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 1291, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 1242, 1243, 0,
	1275, 1276, 1277, 1285, 1286, 1287, 0, 0, 0, 1244,
	0, 0, 1283, 0, 0, 1278, 0, 1264, 0, 0,
	0, 0, 1245, 0, 1261, 1291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1244, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 0, 0, 1250, 3006, 0, 1281, 0, 0, 1256,
	1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246,
	1247, 1248, 1249, 1251, 1252, 1282, 1292, 2109, 1272, 1273,
	1274, 0, 1267, 1268, 1269, 1270, 0, 0, 0, 0,
	0, 1250, 0, 2189, 0, 0, 2188, 0, 0, 1288,
	1289, 0, 0, 0, 0, 0, 0, 1259, 1260, 0,
	0, 0, 0, 1282, 1292, 0, 1272, 1273, 1274, 0,
	1280, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	0, 0, 0, 1290, 0, 1259, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 1280, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3005, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1271, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	0, 1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 1283, 0, 0, 2082, 0, 1245, 0, 0, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1244, 0, 0, 0, 0, 0, 1281, 0, 1264,
	1256, 1257, 1263, 1262, 1258, 1284, 1261, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2083, 0, 1281, 0, 0, 1256, 1257,
	1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 0, 0, 1267, 1268, 1269, 1270,
	0, 0, 0, 0, 0, 1250, 0, 0, 0, 0,
	0, 1853, 0, 0, 0, 0, 0, 1242, 1243, 0,
	1275, 1276, 1277, 1285, 1286, 1287, 0, 1282, 1292, 0,
	1272, 1273, 1274, 0, 0, 1278, 0, 0, 0, 1852,
	0, 0, 1245, 0, 0, 1291, 0, 0, 0, 0,
	0, 1288, 1289, 0, 0, 0, 0, 0, 0, 1259,
	1260, 0, 0, 0, 0, 0, 0, 1244, 0, 0,
	0, 0, 1280, 0, 0, 1264, 0, 0, 0, 1265,
	0, 0, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1267, 1268, 1269, 1270, 0, 0, 0, 0,
	0, 1250, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 1282, 1292, 0, 1272, 1273, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 1288, 1289, 0,
	0, 0, 0, 0, 0, 1259, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 0, 1256, 1257, 1263, 1262, 1258, 1284, 0, 1255,
	1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 1283, 0, 0, 1245, 0, 0, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 1261, 0, 0, 0, 1242, 1243,
	0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 1245, 0, 1281, 1291, 0, 1256, 1257,
	1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 1267, 1268, 1269, 1270, 1244, 0,
	0, 0, 0, 1250, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 0, 0, 0, 0, 0, 1259, 1260, 0,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 0,
	1280, 0, 1250, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 1282, 1292, 0, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 1279, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 1271, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 1283, 0, 0, 1245, 0, 1281, 1291, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0, 0,
	1244, 0, 2412, 0, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 1261, 0, 0, 0, 1242,
	1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 2193, 0, 0, 1245, 0, 1281, 1291, 0, 1256,
	1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246,
	1247, 1248, 1249, 1251, 1252, 1267, 1268, 1269, 1270, 1244,
	0, 0, 0, 0, 1250, 0, 0, 1264, 0, 2198,
	0, 0, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1282, 1292, 0, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 0, 0, 0, 0, 0, 1259, 1260,
	0, 0, 0, 0, 1267, 1268, 1269, 1270, 0, 0,
	0, 1280, 0, 1250, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 1282, 1292, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 0, 0, 0, 0, 0, 1259, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1280, 0, 0, 0, 1271, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 1283, 0, 0, 1245, 0, 1281, 1291,
	0, 1256, 1257, 1263, 1262, 1258, 1284, 0, 1255, 1253,
	1254, 1246, 1247, 1248, 1249, 1251, 1252, 0, 0, 0,
	0, 1244, 0, 0, 0, 0, 0, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 0,
	1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 2139, 0, 0, 1245, 0, 1281, 1291, 0,
	1256, 1257, 1263, 1262, 1258, 1284, 0, 1255, 1253, 1254,
	1246, 1247, 1248, 1249, 1251, 1252, 1267, 1268, 1269, 1270,
	1244, 0, 0, 0, 0, 1250, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 1261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1282, 1292, 0,
	1272, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 0, 0, 0, 0, 0, 0, 1259,
	1260, 0, 0, 0, 0, 1267, 1268, 1269, 1270, 0,
	0, 0, 1280, 0, 1250, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 1282, 1292, 0, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 0, 2155, 0, 0, 0, 1259, 1260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 1271, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 1242, 1243, 0, 1275, 1276, 1277, 1285, 1286,
	1287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 1283, 0, 0, 1245, 0, 1281,
	1291, 0, 1256, 1257, 1263, 1262, 1258, 1284, 0, 1255,
	1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 0, 0,
	0, 0, 1244, 0, 0, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 0, 0, 0, 1261, 0, 0,
	0, 1242, 1243, 0, 1275, 1276, 1277, 1285, 1286, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 1245, 0, 1281, 1291,
	0, 1256, 1257, 1263, 1262, 1258, 1284, 0, 1255, 1253,
	1254, 1246, 1247, 1248, 1249, 1251, 1252, 1267, 1268, 1269,
	1270, 1244, 0, 0, 0, 0, 1250, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1282, 1292,
	0, 1272, 1273, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 0, 0, 0, 0, 0,
	1259, 1260, 0, 0, 0, 0, 1267, 1268, 1269, 1270,
	0, 0, 0, 1280, 0, 1250, 0, 0, 0, 0,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 1282, 1292, 0,
	1272, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 0, 0, 0, 0, 0, 0, 1259,
	1260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 0, 0, 0, 1271, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1266, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 1243, 0,
	1275, 1276, 1277, 1285, 1286, 1287, 1283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1245, 0, 0, 1291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1244, 0, 0,
	0, 0, 1266, 1242, 1243, 1264, 1275, 1276, 1277, 1285,
	1286, 1287, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 1245, 0,
	1281, 1291, 0, 1256, 1257, 1263, 1262, 1258, 1284, 0,
	1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 0,
	0, 0, 0, 1244, 0, 0, 0, 0, 0, 0,
	0, 1264, 1267, 1268, 1269, 1270, 0, 0, 1261, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 1292, 0, 1272, 1273, 1274, 1281,
	0, 0, 1256, 1257, 1263, 1262, 1258, 1284, 0, 1255,
	1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252, 1267, 1268,
	1269, 1270, 0, 0, 0, 1259, 1260, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 1282,
	1292, 0, 1272, 1273, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 1259, 1260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1280, 1540, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	1551, 1536, 1541, 1524, 1561, 1560, 0, 0, 1526, 1525,
	0, 0, 0, 0, 0, 1569, 1568, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1562, 0, 1558, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 1556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1555, 1553, 1554, 1281, 0, 0, 1256, 1257,
	1263, 1262, 1258, 1284, 0, 1255, 1253, 1254, 1246, 1247,
	1248, 1249, 1251, 1252, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1544, 1539, 1545, 1546, 1547, 1548, 1549, 0, 1543, 0,
	0, 0, 0, 0, 0, 0, 0, 1566, 1567, 0,
	0, 1281, 0, 0, 1256, 1257, 1263, 1262, 1258, 1284,
	0, 1255, 1253, 1254, 1246, 1247, 1248, 1249, 1251, 1252,
	0, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1559,
	0, 0, 0, 1537, 1538, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 0, 0, 0,
	1676, 1674, 1675, 1678, 1677, 0, 0, 0, 1551, 1536,
	1541, 1524, 1561, 1560, 0, 0, 1526, 1525, 0, 0,
	0, 0, 0, 1569, 1568, 0, 0, 0, 0, 0,
	0, 0, 0, 1529, 1530, 1531, 1532, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1550, 1533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 0, 1562, 0, 1558, 1557, 0, 0, 0,
	0, 0, 0, 1527, 0, 1556, 1563, 1564, 1565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	1555, 1553, 1554, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1544, 1539,
	1545, 1546, 1547, 1548, 1549, 0, 1543, 0, 0, 0,
	0, 0, 0, 0, 0, 1566, 1567, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1559, 0, 0,
	0, 1537, 1538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1529, 1530, 1531, 1532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1527, 0, 0, 1563, 1564, 1565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 0, 0,
	0, 0, 1570,
}
var sqlPact = [...]int{

	3615, -1000, 11, -1000, -1000, -1000, 262, -1000, -1000, -1000,
	-1000, 261, 260, 259, -1000, 254, 253, 252, 247, 245,
	231, 230, 229, 227, 226, 225, -1000, -1000, 222, -1000,
	-1000, -1000, -1000, 220, 219, 218, -1000, 217, 1430, 30015,
	214, 213, 208, 1569, 46863, 1471, 207, 202, -1000, 201,
	1372, 34497, 1177, 1815, -1000, 200, 193, 1475, 46493, 287,
	32247, 1331, 1854, 46117, 29639, 1836, 31871, 45741, -1000, -1000,
	1041, -1000, -1000, 45365, 192, 188, 185, 182, 180, -1000,
	179, 44989, 178, 176, 175, 172, 171, 170, 167, 165,
	162, 161, 159, 151, 148, 147, 144, 142, 136, 133,
	129, 128, -1000, 114, 113, 108, -1000, 4259, 107, 105,
	103, -1000, 1287, 102, 88, 79, 78, 77, -1000, -1000,
	75, 74, 72, 71, 63, 61, 163, 60, 59, 52,
	51, 50, -1000, 1318, 465, 1610, 12416, 1222, 1198, 1179,
	1175, 1227, 720, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49453, 46863, 48, -38, 47, -1000, 2343, 752, 22831,
	3615, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 34121, 33745, 33369, 27783, 44613, 44237, 10020, 10020,
	915, -1000, 9, 30755, 46863, -1000, -1000, 290, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18955, 18542, 18129, 409, -1000,
	289, -1000, 1226, -1000, -1000, -1000, -1000, 43861, 43485, 43109,
	27397, 27011, 42733, 1753, 1737, 42357, -1000, -1000, 41981, -1000,
	-1000, 2060, 1869, 1846, 32993, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 41611, 41235, 40859, 40483, 40107, 26625,
	26239, 580, -1000, -1000, -1000, -1000, 23583, -1000, -1000, -1000,
	-1000, -1000, 46, -1000, 45, 42, -1000, 39, 38, 37,
	36, 28, 23, 22, 21, -1000, 19, 18, -1000, 17,
	16, -1000, 14, 13, 1300, 1001, 1384, 39731, 1027, 1470,
	7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46863, -1000,
	19354, -1000, 579, -1000, 1948, -1000, 19354, -1000, 1467, 197,
	1370, -1000, -1000, -1000, 1278, 1000, -1000, -1000, 46863, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2494, 1367, 578, 39355,
	-1000, 1831, -1000, 675, 13214, -1000, 869, -1000, 13214, 288,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1792, 1158, 2459, 25853, 1453,
	2297, 2051, 2493, 1629, 2048, 2010, 2001, 1999, 1990, 2491,
	1172, 2490, 981, 821, 2488, 1975, 1963, 2474, 1542, 831,
	2486, 2485, 1937, 1924, -1000, -1000, -1000, -1000, 1042, -1000,
	-1000, -1000, -1000, 35977, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1318, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1596, 2243, 2243, 2243,
	2349, 394, 391, -1000, 163, -1000, 2079, -1000, 1345, -1000,
	-1000, -1000, 54632, -1000, -1000, 19354, 19354, 19354, 19354, 19354,
	1335, -1000, -1000, -1000, 597, -1000, 574, 573, 10805, -1000,
	-1000, 2424, -1000, -1000, -1000, 415, -1000, -1000, 19354, -1000,
	283, -1000, -1000, -1000, -1000, 572, 2478, -1000, 799, -1000,
	-1000, -1000, 692, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1976, 544, 541, -1000, 532, 529, -1000, -1000, -1000, 568,
	567, 566, 564, 561, 559, -1000, -1000, -1000, 1217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	758, -1000, 758, 758, 518, 518, 558, 557, 519, 556,
	-1000, -1000, 555, 518, 553, 552, -1000, -1000, 550, 681,
	644, 549, 548, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1476, -1000, -1000, 1476, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 913, 48343, -1000, -1000, -1000, 1, 46863,
	-1000, 409, 1, -1000, -1000, 547, -1000, 13613, 13613, 13613,
	-1000, -1000, 1457, 19354, -1000, 1637, -1000, 662, -208, 545,
	634, 634, -1000, 21703, 604, 25467, -1000, 544, 541, 532,
	529, -1000, 282, -1000, -1000, -1000, -1000, -1000, 2169, 2132,
	903, -1000, 1108, 2126, -1000, 2900, 2111, 1107, -1000, -1000,
	710, 2108, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1324, -1000, -1000, 1353, 2107, -102, 2016, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1498, -1000, 28153,
	30755, 9, -35, -1000, 9636, 54632, -1000, 54632, 695, -1000,
	54632, 693, -1000, 1918, 46863, 10020, 46863, 46863, -1000, 527,
	1558, 1449, -1000, -1000, 2900, 1557, -1000, -1000, 685, 1554,
	-1000, -1000, 1552, -1000, 409, -1000, -1000, 38979, 49083, 685,
	1549, -1000, -1000, -1000, 35977, -1000, 46863, -1000, 46863, -1000,
	1046, -1000, 48713, 137, 2105, -1000, -1000, 137, 2102, -1000,
	137, 2100, -1000, 132, 2098, -1000, -1000, 1459, 2093, -1000,
	-80, 2092, -1000, -1000, -80, 2091, -1000, -1000, 19354, -25,
	-1000, -1000, -1000, 752, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 38603, 30385, 46863, 32617, 731, 54632, 2387, 55419, 28153,
	54632, 30385, 46863, 1972, -1000, 38227, 37851, 2292, 670, -1000,
	-1000, 46863, -1000, 19354, -1000, 2381, 1706, -18, -1000, -1000,
	-1000, -1000, -1000, 1606, 1672, 814, 1261, -1000, 13214, 13214,
	2195, -1000, 277, 10020, -1000, -1000, 969, 1642, -1000, -1000,
	-1000, -1000, -1000, 37475, -1000, -1000, -1000, 1355, 46863, -1000,
	-1000, 29263, 1960, -1000, 46863, -1000, 46863, -1000, 46863, -1000,
	46863, -1000, 46863, -1000, -1000, -1000, -1000, -1000, 2090, 1181,
	1971, -1000, 46863, -1000, 46863, -1000, -1000, -1000, 1591, -1000,
	-1000, -1000, 37105, 36729, 36353, -1000, -1000, 1124, 968, -1000,
	-1000, 141, -1000, -1000, 1596, -1000, 1440, 1668, 17716, 1659,
	19354, 163, -1000, -1000, 163, 163, 12003, -1000, -1000, -1000,
	46863, -1000, 55181, 55419, 10020, 940, 19354, 19354, 19354, 19354,
	19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354,
	19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354,
	19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354, 19354,
	19354, 1543, 19354, 912, 19354, 19354, 19354, 19354, 1460, -1000,
	-1000, 1298, 456, 1322, -1000, 2443, 2443, 2443, 54983, 54983,
	507, 597, -1000, 19354, -1000, 65, 19354, 391, 52429, 4,
	10406, -1000, -1000, -1000, -1000, 17303, 711, 54632, 9252, 6658,
	-1000, 2468, 1062, 1993, 1805, 526, 689, 688, 686, 684,
	19354, 19354, 19354, 19354, 19354, 19354, -1000, -1000, -1000, -1000,
	-1000, -1000, 2424, -1000, 16904, 16491, -1000, 2467, 16078, 15665,
	-1000, 15252, 20551, 14839, 934, 931, 922, 19354, 11204, -1000,
	-18, -1000, 48343, -1000, 46863, 1, 2380, 19354, 187, -1000,
	53297, -1000, 187, 187, 524, -26, 54632, 1660, 1652, 23207,
	1626, 1344, 1344, 1344, -1000, 523, 591, 634, 7313, 14426,
	34867, 1351, 34867, 296, 388, 21327, 1637, -1000, -1000, 46863,
	10020, -11, 1249, -1000, 31495, 2269, 2234, 2225, 1040, -1000,
	1012, 2348, 35977, 2364, 65, 2279, 1913, 899, 35977, 2900,
	-1000, 55419, -1000, 1693, 2325, 1034, 1010, 1034, 1034, 1025,
	35977, 895, 1242, 28153, 2275, 894, -16, 2361, 65, 2273,
	1904, 892, -1000, -1000, 46863, 10020, 2263, 960, 629, -1000,
	46863, 270, -1000, 19354, 19354, 1009, -28, 269, 1681, 1666,
	157, -1000, 31125, 2378, 2085, 46863, -1000, 2900, 2082, -1000,
	1236, -1000, 2073, 2062, 2376, 1446, 1548, -1000, -1000, -1000,
	1421, 1545, 863, 2055, 713, 235, 2374, 235, 24715, -1000,
	46863, -1000, 46863, -1000, -1000, 46863, -1000, 46863, -1000, 46863,
	-1000, 46863, 46863, -1000, 46863, 28153, 28153, 28153, -39, 3067,
	28893, 882, -36, -1000, 785, 31125, 3022, -41, -1000, 967,
	-1000, -1000, -1000, 458, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 758, 520, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 519, 1217, 518, 518, 518,
	-1000, -1000, -1000, 681, 644, -1000, -1000, -1000, 758, 758,
	-1000, -1000, -203, 1894, -35, 32617, 629, -1000, 629, -1000,
	1969, -1000, 2244, 661, -42, 819, -18, -1000, 1476, -1000,
	1164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2477, -1000, 2451, -1000, -1000, 2466,
	0, -1000, 0, -1000, 10020, -1000, 46863, 1968, -1000, -1000,
	-1000, -1000, -1000, 46863, -1000, -1000, 46863, -1000, -1000, -1000,
	-1000, -1000, 504, -1000, 1962, -1000, 3067, 268, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 46863, 46863, 46863, -1000,
	35977, -1000, -1000, -1000, -1000, 54632, -1000, 446, -1000, -1000,
	54632, 1083, 1707, -1000, 1707, -1, -1000, 53161, 1635, 46863,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 666, 921, 921, 935, 935, 935, 935, 2392,
	3435, 248, 1527, 6117, 6117, 6117, 6117, 6117, 6117, 6117,
	6117, 502, 385, 385, 502, 502, 502, 502, 502, 385,
	385, 385, 6117, 6117, 6117, 54983, 54701, 3955, 19354, 19354,
	880, 1294, 456, 3955, 19354, 3955, 3955, 3955, 3955, -1000,
	1497, -1000, -1000, -1000, -1000, 1886, 517, 20551, 20551, -1000,
	-1000, -1000, 10805, 19354, -1000, -1000, -1000, -1000, 516, 19354,
	-1000, 52588, -242, 387, -185, -1000, 19354, 587, -47, -1000,
	1018, -1000, 19354, 267, -1000, -1000, 8, 19354, 19354, 19354,
	386, -1000, 384, -1000, 873, -1000, 872, 870, 868, -1000,
	515, 1337, 514, 512, 19354, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 54350, 50239, 50201, 6196, 5187, -48, -64,
	383, -1000, 1865, -185, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 381, -1000, 373, -65, -1000, -67, -1000, 369, -1000,
	54281, -185, 368, 3653, -1000, 20551, 20551, 20551, 10805, 511,
	364, -1000, 52877, -1000, 665, 663, 660, 53999, 14013, 14013,
	14013, 363, 53930, 19354, -185, -1000, -1000, 510, -73, 713,
	13613, 22455, 10020, -1000, 713, 713, 19354, -1000, 19354, 23207,
	23207, 1602, 1645, 23207, -1000, -1000, -1000, -1000, 34867, 441,
	634, 34867, -1000, 2424, 1662, -1000, 362, -1000, -1000, -1000,
	46863, 409, -1000, -1000, 634, 361, 266, 1760, 46863, 46863,
	46863, -1000, -1000, 1540, 47973, 1532, 55419, 46863, -1000, -1000,
	509, 508, 1633, 1622, 46863, 46863, 47603, 47233, 46863, 1186,
	19354, 1381, 1200, 65, -1000, 659, 505, 46863, 1106, -1000,
	-1000, -1000, -1000, -1000, 46863, -1000, -1000, 2465, -1000, 1034,
	-1000, -1000, -1000, 1034, 2900, 1104, 46863, 28153, 709, 658,
	46863, 1248, 65, -1000, 655, 500, 10020, 1203, -1000, 652,
	46863, 1786, -1000, 1496, -1000, 8868, 54632, 54632, -1000, -1000,
	10020, 1728, 1728, 10020, 360, -2, -1000, -1000, -1000, -1000,
	-1000, -1000, 1735, 46863, 537, 46863, 65, 46863, 156, 46863,
	28153, 28153, 28153, 65, 46863, 2045, 46863, 2038, 2094, 617,
	46863, 1350, 19354, 1219, -1000, 23959, 774, 46863, 1096, 130,
	-1000, -1000, -1000, 35, 46863, -1000, -1000, 137, 137, 137,
	-1000, 132, 1459, -1000, -80, -80, -1000, -1000, -1000, 46863,
	2400, 28153, -83, -1000, 789, 884, 883, -1000, 55419, -1000,
	596, 904, -1000, 2458, 499, 2424, -1000, 667, 35607, 46863,
	115, -1000, 687, 1380, -1000, 13214, 13214, -1000, 1476, -1000,
	-1000, 1109, -1000, 1209, -1000, -1000, -1000, -1000, 13214, -1000,
	-1000, 955, 1960, -35, -35, -1000, -1000, 215, -1000, 46863,
	-1000, -1000, -1000, -1000, 1083, -1000, 19354, -1000, -1000, -1000,
	12003, -1000, -1000, -1000, 46863, -183, 19354, 3955, 3955, 19354,
	20551, 20551, -1000, 3955, -1000, -1000, -1000, -1000, -1000, 1860,
	489, 19354, 55419, 4605, 3749, -84, 502, 19354, -5, -1000,
	19354, -1000, 52293, -1000, -1000, 593, 2136, -1000, 19354, 53648,
	8484, 359, 12815, -1000, 53579, -22, -22, -1000, 2476, 1568,
	1354, 1146, 1069, 2457, -1000, 25091, 717, 1350, 52134, 55181,
	55419, 19354, 19354, 19354, -1000, -1000, 2424, -1000, 19354, -1000,
	-1000, -1000, -1000, -1000, 1858, 19354, -1000, 55181, 55419, 20551,
	20551, 20551, 20551, 20551, 20551, 20551, 20551, 20551, 20551, 20551,
	20551, 20551, 20551, 20551, 20551, 20551, 20551, 20551, 1651, 20551,
	2419, 2419, 2419, -10, 19354, -1000, 1952, 1858, 19354, 19354,
	-1000, -1000, -1000, 55419, 357, 356, 355, -1000, 19354, -185,
	3022, -1000, 1803, -1000, -66, -1000, 1637, -1000, -1000, 1803,
	1803, -90, 54632, -1000, 1602, -1000, 488, 19354, 23207, -1000,
	585, -1000, -95, -1000, 34867, -1000, 584, -233, -1000, 623,
	-1000, 634, 409, -1000, 34867, -1000, 10020, -1000, -1000, 860,
	859, -1000, 2033, -1000, 1528, -1000, 779, -1000, 1135, 19354,
	22079, 487, 486, 1237, -1000, 2032, 1459, 2029, 1459, -1000,
	-1000, 678, -1000, 54632, 485, 484, -1000, -11, 1235, -1000,
	24345, 19354, -1000, 856, -1000, -1000, -1000, 2900, 854, -1000,
	-1000, 1231, 24345, -1000, -1000, -1000, 24345, 19354, -1000, -16,
	842, 24345, 2013, 667, 1856, 982, -1000, -1000, -1000, -1000,
	-1000, -1000, 265, 1731, 31125, 46863, 482, 46863, 479, -1000,
	-1000, 478, 46863, 2900, -1000, 685, -1000, -1000, 784, 10020,
	477, 10020, 1612, 617, 28523, -1000, 685, 1668, 54632, -1000,
	1096, 11603, 2230, -96, -1000, 216, -1000, -1000, -1000, 713,
	24715, 23207, 19354, 2483, -98, -1000, -1000, -1000, -1000, -1000,
	-35, 1362, 2204, 2204, -1000, 2455, -1000, 583, 354, 2424,
	352, -1000, -17, 474, -1000, 621, 619, -35, 46863, -1000,
	1359, 10020, 46863, 46863, 10020, 46863, -1000, -1000, -18, -1000,
	-1000, -1000, -1000, 46863, -1000, -1000, -1000, -1000, 1368, 51998,
	-1000, 2237, 10020, 2390, 3955, 3255, 429, 19354, 55419, 54927,
	-105, 19354, 19354, -1000, 351, 19354, 582, 54632, -1000, -1000,
	-1000, 54632, 19354, 198, -1000, 2472, 19354, 350, 348, 346,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 340, -1000,
	-1000, 49823, -1000, 19354, 319, -1000, 318, 317, 343, 51839,
	51703, 316, 54632, 1952, 54632, -1000, -1000, 673, 673, 992,
	992, 992, 992, 2419, 715, 1019, 853, 682, 682, 682,
	708, 830, 830, 682, 682, 682, 1847, 1605, 473, 4866,
	19354, 313, -1000, -1000, 54632, 54632, 312, -1000, -1000, -1000,
	-185, 305, 1797, 2322, -1000, 23207, 1797, 1797, -1000, -1000,
	46863, 54632, -1000, -208, -1000, 2424, -1000, -1000, 1662, -1000,
	7711, 34867, -1000, -1000, 131, 46863, 46863, 46863, 2026, -1000,
	3274, -1000, 51544, -108, -1000, 2291, 2291, 19354, 157, -1000,
	-1000, 471, 22079, 46863, -1000, 1653, 1665, 809, 46863, -1000,
	46863, -1000, -1000, 46863, 46863, 46863, 46863, 46863, -1000, 470,
	157, -111, 46863, 46863, 28153, -1000, -1000, -113, 10020, -1000,
	2250, -1000, 28153, 833, 10020, 1248, 1779, -1000, 469, 22079,
	468, 46863, 31125, 2373, -1000, -1000, -1000, 464, 1811, 1408,
	22079, 1405, 1614, 617, 28523, -1000, 863, 1096, -1000, -1000,
	-23, -1000, 481, 65, 46863, 2482, 1350, -1000, -24, 54632,
	-1000, 618, -1000, 2181, -1000, 2180, 503, -1000, -1000, 300,
	-1000, 35237, 35237, 28153, 28153, -35, 1412, -1000, -1000, 1264,
	1494, -1000, -1000, -1000, -1000, -1000, 2237, 19354, 19354, 54927,
	-114, -1000, 3955, 3955, -1000, 51408, -1000, 54632, 8100, -1000,
	53579, -1000, -1000, -1000, -1000, 1265, -1000, 51249, -1000, -1000,
	-1000, 19354, -1000, -1000, -1000, -1000, 20551, 1824, 463, 55419,
	51113, -1000, -1000, -1000, 690, 19354, 19354, 1637, 690, 690,
	-119, 634, -1000, -1000, -1000, 2424, -1000, 10020, -1000, -1000,
	-1000, 46863, -1000, 46863, -1000, 10020, 46863, 1861, 1518, -1000,
	-1000, 1619, 459, 20551, 46863, 719, -1000, 1238, 22079, 2237,
	10020, 2237, 50954, 6658, -125, -130, 1506, -1000, 1504, 19354,
	-1000, 55419, 1459, 1459, -131, -133, -1000, 840, 838, 19354,
	836, -1000, -1000, -1000, 832, -1000, 641, -80, 24345, 131,
	-1000, -1000, 1301, 22079, -139, 22079, -140, 298, 65, 22079,
	-1000, 46863, -141, 46863, -1000, 617, 28523, -1000, 2094, -1000,
	2146, 46863, 2213, -1000, -1000, -1000, 1668, 456, 455, 451,
	-1000, -1000, -1000, -148, -1000, -1000, -110, -1000, 729, 728,
	-1000, -1000, -1000, 10020, 948, -1000, 3955, 3955, -1000, -1000,
	-1000, -1000, 297, 1350, 2320, -1000, 50818, 4378, 20551, 55419,
	-151, -1000, -1000, 46863, 54632, -185, -1000, -1000, -1000, 34867,
	442, -1000, 2157, -1000, -1000, -1000, 46863, 1526, -1000, -1000,
	19354, 4866, 449, 19354, -1000, 1731, 448, -1000, -1000, -1000,
	-1000, -1000, -1000, 2291, 8, -1000, 1112, -1000, -1000, 54632,
	2280, -1000, -1000, 447, 443, 46863, 46863, -22, 435, 433,
	24345, -1000, 46863, -154, 1238, -159, -1000, 1731, -1000, -162,
	784, -1000, 428, 28523, -1000, 1612, 938, -165, 46863, 1096,
	-1000, 28153, 28153, -1000, 1412, -1000, 46863, -1000, 46863, -1000,
	46863, -1000, 1105, 19354, -1000, 4378, -167, -1000, -153, -1000,
	2372, -1000, -1000, -1000, -1000, 2022, 50659, 1577, 46863, 50523,
	1248, 46863, 2237, 295, 46863, 783, 10020, 1264, 1264, -1000,
	-1000, 294, 19354, 19354, -1000, 426, -1000, 1731, 1238, 1248,
	1238, 416, 22079, -1000, 1614, 1028, -1000, 713, -1000, -1000,
	-170, -172, -1000, -173, -179, -1000, 293, 20152, 20152, -185,
	-1000, 46863, 414, 1996, -1000, 1373, 1221, 292, 820, -1000,
	-180, -1000, -1000, 409, -1000, 19354, -1000, -186, -1000, 773,
	-187, -1000, 756, 2472, -188, -193, 46863, 1248, 1731, -1000,
	1731, 22079, -195, -1000, 24715, -1000, 667, 667, -1000, -1000,
	-1000, -1000, -1000, 20935, 1349, 1088, 52839, -1000, -1000, -1000,
	46863, -1000, 1387, 1386, 1055, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1577, 54632, -1000, 1264, 1759, -1000, 1264, 1819,
	-1000, -1000, -196, -1000, 1248, 1248, -202, -1000, -178, -1000,
	-1000, 2394, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2155,
	-1000, 796, 1582, 1582, 1373, -1000, 408, -1000, 405, 1437,
	-1000, -1000, 1238, -1000, 19753, -1000, 2407, -1000, -1000, 1630,
	-1000, -1000, 19354, 19354, -1000, -1000, -1000, 1731, -1000, -1000,
	-1000, -1000, -204, -205, 1248, 1248, 824, -1000, -1000, 402,
	19354, -225, 1248, -1000,
}
var sqlPgo = [...]int{

	0, 2913, 2909, 1894, 2907, 2359, 2906, 2904, 2902, 2900,
	2898, 2327, 2894, 2893, 2892, 2890, 2888, 2886, 2884, 2880,
	2870, 2869, 2868, 2866, 2862, 2856, 2854, 2850, 2847, 2845,
	2842, 2841, 2289, 2840, 2268, 2836, 2835, 2834, 2830, 2829,
	2825, 2823, 2821, 21, 2820, 2819, 2816, 2815, 2265, 2814,
	2813, 2263, 2812, 2809, 2227, 2808, 2806, 2216, 2207, 2805,
	2804, 2192, 2803, 2802, 2183, 2801, 2181, 2800, 2799, 2172,
	2795, 91, 101, 2117, 2794, 2793, 2109, 2072, 2048, 2788,
	2041, 2787, 2786, 2017, 1972, 2785, 102, 2781, 2780, 2779,
	2778, 1942, 1922, 2777, 2776, 2774, 170, 2773, 1913, 2772,
	2771, 2769, 2766, 2765, 2762, 2760, 2759, 2757, 2756, 2755,
	2750, 2748, 2746, 2745, 2744, 2743, 2739, 2738, 2736, 2733,
	2728, 2727, 2726, 2724, 175, 117, 2715, 2714, 1911, 1900,
	2711, 2710, 53, 50, 16, 72, 131, 172, 4584, 167,
	2709, 2708, 2705, 2702, 2701, 2699, 29, 123, 122, 119,
	116, 2696, 221, 2692, 2690, 54, 43, 26, 24, 81,
	2689, 2687, 2683, 1962, 83, 2682, 2681, 166, 158, 2679,
	388, 41, 90, 63, 84, 352, 55, 2678, 105, 14,
	2673, 125, 191, 2670, 66, 34, 27, 3245, 97, 57,
	114, 173, 121, 433, 2669, 169, 70, 142, 2666, 2665,
	2664, 62, 137, 1, 10, 202, 6, 2663, 12, 2662,
	7, 2661, 2656, 2651, 2650, 20, 115, 100, 36, 2649,
	37, 86, 2647, 136, 2645, 150, 2644, 73, 1790, 140,
	3, 93, 2643, 79, 17, 76, 2642, 2638, 106, 165,
	2637, 33, 120, 77, 92, 181, 151, 89, 148, 153,
	2636, 2635, 2634, 149, 2633, 135, 129, 2632, 2628, 112,
	30, 2627, 49, 159, 42, 2624, 2622, 110, 2619, 144,
	2618, 2617, 176, 104, 132, 2, 51, 85, 9, 152,
	98, 60, 58, 2615, 3690, 1388, 1342, 32, 2614, 95,
	71, 35, 78, 94, 164, 44, 2613, 2609, 157, 2601,
	2598, 2596, 2595, 2592, 124, 2591, 2590, 2589, 88, 48,
	69, 2587, 99, 46, 107, 147, 146, 174, 128, 2586,
	133, 113, 143, 2584, 171, 2582, 1094, 2581, 138, 2580,
	2579, 2576, 2574, 38, 2572, 2570, 2569, 141, 2568, 96,
	2567, 134, 130, 126, 75, 118, 160, 156, 533, 2561,
	139, 31, 2548, 980, 25, 0, 3482, 3160, 2547, 145,
	87, 2542, 2533, 2532, 2528, 39, 11, 4, 8, 15,
	13, 28, 23, 214, 2527, 2526, 80, 108, 2525, 180,
	155, 2523, 2522, 2520, 47, 2519, 22, 2518, 18, 2514,
	2513, 19, 5, 2512, 2511, 161, 2509, 111, 2353, 2505,
	2504, 2503, 1993, 2500, 2499, 56, 127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 148, 148, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 399, 399, 150, 150, 149,
	145, 145, 152, 152, 152, 154, 154, 151, 151, 144,
	144, 32, 32, 84, 84, 84, 135, 77, 77, 77,
	353, 353, 354, 354, 131, 131, 132, 132, 132, 132,
	133, 133, 134, 134, 134, 46, 34, 34, 34, 34,
	34, 34, 34, 35, 35, 36, 36, 36, 37, 37,
	37, 44, 44, 125, 125, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 57, 57, 58, 58,
	59, 59, 59, 59, 59, 59, 60, 60, 60, 60,
	60, 60, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 67, 67, 67, 68, 68, 68, 65, 65,
	65, 63, 63, 63, 62, 62, 62, 66, 66, 66,
	64, 64, 64, 229, 229, 69, 69, 69, 69, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 72, 72, 72, 72, 72,
	72, 72, 72, 323, 323, 70, 70, 296, 296, 73,
	73, 254, 254, 74, 74, 74, 74, 74, 75, 75,
	75, 75, 85, 85, 85, 85, 395, 395, 395, 398,
	398, 223, 223, 167, 167, 167, 167, 80, 80, 80,
	80, 81, 81, 81, 82, 82, 130, 130, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 38, 38,
	38, 39, 39, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 43, 92, 92, 92, 94, 91, 91,
	91, 93, 93, 93, 93, 95, 95, 96, 96, 96,
	96, 96, 96, 97, 97, 347, 347, 232, 232, 345,
	345, 346, 346, 199, 199, 199, 199, 199, 200, 200,
	200, 352, 352, 352, 352, 352, 352, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 114, 114, 114, 124,
	124, 124, 124, 124, 124, 124, 116, 116, 116, 108,
	108, 99, 99, 105, 105, 105, 105, 105, 100, 100,
	106, 106, 107, 107, 107, 109, 109, 109, 109, 109,
	109, 101, 101, 101, 101, 111, 111, 111, 111, 110,
	110, 120, 120, 120, 120, 120, 120, 120, 311, 311,
	115, 115, 115, 115, 118, 118, 118, 118, 113, 113,
	113, 117, 117, 121, 121, 121, 121, 102, 102, 103,
	103, 104, 104, 122, 122, 112, 112, 123, 123, 123,
	123, 123, 123, 123, 119, 119, 119, 396, 396, 397,
	397, 78, 78, 52, 52, 53, 53, 201, 201, 202,
	202, 277, 277, 277, 277, 203, 203, 153, 153, 153,
	206, 207, 207, 204, 204, 205, 205, 205, 209, 209,
	208, 211, 211, 210, 276, 363, 363, 364, 364, 364,
	364, 364, 364, 364, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 361, 361, 361, 362, 359, 359,
	360, 360, 360, 360, 400, 400, 275, 275, 215, 215,
	366, 366, 366, 366, 367, 367, 367, 367, 367, 370,
	369, 368, 368, 368, 368, 368, 307, 307, 307, 56,
	56, 56, 243, 243, 242, 242, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 127,
	127, 54, 54, 54, 159, 159, 51, 51, 51, 55,
	55, 50, 50, 50, 50, 50, 260, 260, 258, 258,
	220, 220, 313, 313, 313, 171, 171, 146, 146, 146,
	20, 22, 22, 16, 16, 16, 16, 16, 16, 29,
	29, 30, 30, 26, 26, 259, 259, 261, 261, 79,
	79, 83, 83, 89, 89, 126, 126, 126, 126, 126,
	126, 126, 33, 33, 33, 33, 45, 45, 45, 45,
	87, 403, 403, 403, 88, 88, 402, 402, 166, 166,
	166, 166, 168, 168, 272, 272, 273, 273, 404, 404,
	274, 274, 274, 161, 160, 162, 162, 49, 49, 49,
	155, 155, 156, 156, 157, 157, 158, 158, 405, 405,
	76, 76, 76, 129, 129, 195, 195, 269, 269, 269,
	216, 216, 176, 176, 271, 271, 270, 270, 270, 241,
	241, 241, 128, 128, 226, 226, 234, 234, 235, 235,
	319, 319, 236, 86, 86, 138, 138, 136, 136, 136,
	136, 136, 136, 137, 137, 137, 139, 139, 139, 139,
	139, 139, 139, 142, 142, 142, 142, 143, 143, 143,
	141, 141, 377, 377, 377, 379, 379, 380, 376, 376,
	378, 378, 401, 401, 245, 245, 245, 213, 214, 212,
	212, 218, 218, 217, 219, 219, 312, 312, 312, 239,
	239, 239, 239, 264, 264, 262, 262, 263, 263, 265,
	265, 266, 266, 266, 267, 267, 268, 268, 238, 238,
	292, 292, 140, 140, 140, 225, 225, 225, 227, 227,
	282, 282, 282, 283, 283, 281, 281, 281, 281, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 393, 393,
	393, 394, 394, 310, 310, 315, 315, 315, 315, 315,
	315, 308, 308, 309, 309, 320, 321, 321, 248, 248,
	248, 248, 246, 246, 247, 247, 316, 316, 316, 316,
	240, 240, 317, 317, 317, 278, 278, 324, 324, 324,
	339, 339, 224, 224, 224, 334, 334, 325, 325, 325,
	325, 325, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 328, 328, 328, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 338, 338, 338, 338, 338,
	329, 329, 335, 336, 330, 331, 337, 337, 337, 337,
	341, 341, 332, 332, 332, 332, 332, 332, 332, 333,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 256, 256, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 286, 286, 286, 286,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 371, 371, 371, 371, 371, 371, 371, 371, 374,
	374, 375, 375, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 381, 381, 382, 382, 384,
	384, 385, 385, 386, 387, 387, 387, 388, 389, 389,
	383, 383, 390, 390, 390, 391, 391, 392, 392, 392,
	392, 392, 298, 298, 299, 300, 306, 306, 306, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 169, 169, 169, 169, 169,
	231, 231, 230, 230, 295, 295, 293, 293, 297, 297,
	249, 249, 340, 340, 340, 340, 340, 340, 340, 250,
	250, 250, 257, 251, 251, 252, 252, 252, 252, 252,
	289, 290, 253, 253, 253, 291, 291, 301, 305, 305,
	304, 303, 303, 302, 302, 279, 279, 280, 280, 237,
	237, 406, 406, 233, 233, 318, 318, 318, 318, 197,
	197, 228, 228, 196, 196, 191, 191, 191, 191, 221,
	221, 222, 222, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 342, 342, 342, 343, 344, 294,
	186, 185, 173, 174, 184, 183, 182, 172, 175, 179,
	180, 181, 177, 178, 189, 188, 187, 322, 192, 192,
	193, 193, 193, 194, 194, 194, 194, 170, 170, 190,
	190, 190, 163, 163, 163, 164, 164, 165, 165, 351,
	351, 349, 349, 349, 350, 350, 350, 350, 348, 348,
	348, 348, 348, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 12, 12, 2,
	1, 1, 1, 3, 3, 0, 3, 1, 3, 1,
	1, 3, 2, 5, 0, 5, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 7, 3, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 3, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 2,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 6, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 5, 6, 5, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 11, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 4, 2,
	5, 5, 5, 2, 8, 9, 6, 5, 3, 1,
	4, 7, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	7, 3, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 6,
	3, 13, 16, 9, 12, 4, 2, 0, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 2, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 5, 3, 1, 1,
	3, 1, 0, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 413, -4, -32, -34, -46, -44,
	-47, -74, -58, -59, -60, -73, -69, -75, -76, -77,
	-78, -70, -84, -83, -85, -89, -38, -86, -79, -80,
	-90, -98, -126, -127, -128, -129, -5, -11, 25, 36,
	-35, -36, -37, 50, 76, 64, -54, -51, -48, -57,
	78, 99, -378, 103, -61, -64, -66, 107, 114, 119,
	142, 151, 251, 258, 279, 281, 283, 292, -40, -39,
	115, -136, -138, 277, -81, -82, -91, -92, -93, -94,
	-130, 310, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, 313, -33, -45,
	-88, -87, 355, -6, -7, -8, -9, -10, -12, -22,
	-49, -50, -52, -53, -55, -56, -377, -62, -63, -65,
	-67, -68, -139, -137, 410, 278, 364, 37, 322, 65,
	110, 287, 20, -14, -15, -18, -17, -19, -16, -23,
	-25, -27, -24, -26, -28, -29, -30, -31, -20, -21,
	-13, 381, 389, -142, -140, -141, -143, 299, 372, 335,
	414, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 2, 335, 375, 300, 365, 92, 162, 263, 249,
	-395, 2, -228, 335, 92, -191, -190, -163, 403, 4,
	-355, -357, 20, 21, 22, 23, 25, 35, 36, 37,
	40, 42, 43, 46, 47, 48, 49, 50, 51, 58,
	63, 64, 65, 66, 67, 72, 69, 70, 71, 74,
	76, 77, 80, 81, 82, 90, 91, 93, 94, 95,
	99, 101, 103, 106, 107, 109, 114, 115, 118, 116,
	117, 119, 129, 130, 132, 133, 135, 137, 141, 143,
	148, 149, 150, 151, 152, 153, 163, 158, 164, 168,
	171, 170, 172, 173, 174, 165, 179, 182, 183, 184,
	186, 187, 190, 191, 192, 195, 194, 199, 200, 203,
	204, 207, 209, 212, 213, 216, 214, 215, 218, 219,
	221, 220, 227, 229, 230, 232, 233, 236, 237, 240,
	243, 246, 247, 248, 249, 250, 251, 252, 254, 256,
	258, 260, 261, 262, 263, 264, 266, 267, 269, 270,
	271, 272, 273, 277, 275, 276, 278, 279, 280, 281,
	283, 286, 287, 288, 290, 311, 312, 324, 292, 293,
	294, 295, 296, 297, 298, 302, 306, 303, 304, 305,
	300, 301, 307, 308, 310, 313, 315, 317, 318, 321,
	322, 323, 325, 328, 330, 326, 327, 320, 333, 334,
	336, 337, 338, 339, 340, 341, 342, 343, 347, 350,
	351, 355, 356, 357, 358, 361, 362, 363, 368, 364,
	366, 369, 370, 371, 376, 382, 383, 385, 386, 387,
	30, 38, 39, 41, 44, 54, 55, 56, 59, 96,
	97, 113, 120, 121, 131, 144, 146, 154, 155, 169,
	175, 177, 197, 226, 228, 241, 245, 255, 257, 265,
	289, 316, 331, 345, 346, 352, 353, 372, 373, 377,
	384, 413, 413, 413, 2, 183, 262, 307, -187, -190,
	-163, 92, 234, 413, 413, 413, 2, 335, 323, 300,
	365, 285, 375, -258, 179, 92, 360, -163, 258, 24,
	2, 101, 168, 363, 362, 24, 254, 301, 337, 339,
	2, 413, 413, 2, 375, 300, 335, 162, 92, 365,
	285, -181, 2, -163, -72, 2, 410, -71, -5, -48,
	-57, -61, -73, -69, -11, -32, -34, -54, -51, -58,
	-64, -66, -77, -76, -78, -80, -84, -83, -86, -91,
	-92, -98, -128, -129, 78, 25, 107, 310, 115, -398,
	-223, 2, 24, -167, -163, 78, 142, 299, 335, 2,
	183, 2, -181, 2, -395, 2, 183, 2, -398, -223,
	23, 2, -163, 2, 296, 313, -168, 2, 292, -163,
	413, 413, 413, 413, 413, 413, 204, 58, 289, 307,
	-96, 351, -95, 345, 294, -97, -347, 2, 216, -163,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 2, -124, 307, 323, 149, 36, 58,
	24, 63, 93, 143, 162, 163, 191, 73, 74, 261,
	204, 184, -311, 117, 308, 336, 295, 333, 351, 78,
	366, 286, 340, 116, 4, 92, 216, 309, 345, 67,
	413, 413, 413, -401, 2, 335, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 413, -137, -139, -138,
	413, 413, 413, 413, 413, -217, -218, 359, 176, 112,
	239, -136, -138, 2, -377, -124, 307, 2, 58, 24,
	-345, 2, -284, 234, -286, 401, 402, 396, 222, 388,
	-298, 98, 211, 210, -288, -301, 113, 289, 410, -194,
	-287, 416, 9, -374, -138, 31, -299, -300, 52, -192,
	-163, 7, 8, 5, 6, -170, -326, -294, -333, 354,
	122, 225, -371, -372, -193, 4, -355, -349, -327, -336,
	-331, -332, -334, 42, 48, 47, 342, 215, 302, 303,
	304, 305, 317, 368, 158, 40, 232, 233, 170, 177,
	61, 84, 85, 83, 88, 89, 86, 309, 365, 53,
	30, 154, 226, 155, 59, -373, 43, 94, 106, 132,
	133, 171, 172, 173, 174, 186, 187, 327, 347, 39,
	41, 44, 54, 55, 96, 97, 120, 121, 131, 144,
	169, 175, 197, 228, 245, 255, 265, 316, 331, 345,
	346, 352, 353, 373, -356, -337, 79, 123, 140, 167,
	156, 180, 181, 185, 198, 201, 217, 224, 242, 244,
	284, 314, -402, 2, 351, 351, 2, -402, 2, -402,
	2, -166, 2, 351, 348, -403, 351, 384, -379, 266,
	-380, -181, -379, 413, 413, 415, 413, -212, -213, -214,
	2, 24, 104, 410, 2, -314, 2, 408, -316, -170,
	-373, -138, -315, 410, -187, 235, -193, 84, 85, 88,
	89, 4, -163, 61, 211, 210, -3, 2, -316, 154,
	-187, 2, -316, 154, 2, -188, 154, -316, -190, 2,
	-353, 154, -351, 9, -350, 5, 4, -355, -357, -356,
	2, -172, -163, 2, -196, 154, -187, -184, -348, 4,
	-355, -357, -356, -358, 24, 26, 27, 28, 29, 31,
	32, 33, 34, 45, 52, 53, 57, 60, 62, 73,
	78, 83, 84, 86, 85, 87, 88, 89, 98, 100,
	102, 104, 105, 108, 110, 112, 122, 124, 136, 138,
	139, 142, 145, 147, 157, 162, 166, 176, 178, 193,
	196, 202, 205, 206, 222, 223, 225, 231, 234, 235,
	238, 239, 253, 259, 268, 282, 285, 299, 309, 319,
	329, 332, 335, 344, 348, 349, 354, 359, 360, 365,
	367, 374, 375, 378, 379, 380, 381, -185, -348, 348,
	415, -228, -221, -163, 412, -284, 2, -284, 154, 2,
	-284, 154, 2, -215, 410, 412, 335, 62, 2, -187,
	154, -177, 2, -163, -188, 154, 2, -190, -353, 154,
	2, -353, 154, 2, -189, 2, -187, 162, 162, -172,
	154, 2, -163, 24, 139, 2, 178, 2, 178, 2,
	-317, 2, -316, -229, 154, 2, -187, -229, 154, 2,
	-229, 154, 2, -197, 154, 2, -196, -172, 154, 2,
	-354, 154, 2, -353, -354, 154, 2, -254, 410, -323,
	2, -322, -350, 372, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 307, 234, 348, 415, -187, -284, -296, 410, 139,
	-284, 234, 139, 236, 2, 92, 335, 387, 24, -163,
	2, 311, 2, 410, -96, 56, 351, -273, 2, -274,
	-160, -161, -162, 182, 260, 264, 387, -345, 348, 393,
	139, -345, -232, 412, -124, 2, 136, 367, 2, 7,
	2, -353, 2, 311, 2, 261, 308, 58, 139, 2,
	2, 234, -396, 2, 139, 2, 139, 2, 139, 2,
	139, 2, 139, 2, 2, 261, 308, 2, 350, 192,
	350, 2, 139, 2, 139, 2, 5, 2, 182, 260,
	324, 2, 335, 375, 300, 2, 2, 139, 139, 387,
	2, -240, -316, -217, -218, -239, -262, -263, 202, 124,
	231, -245, 24, 104, -245, -245, 46, 411, 411, -124,
	311, 2, 10, 11, 60, 35, 401, 402, 403, 404,
	134, 405, 406, 399, 400, 398, 391, 392, 395, 188,
	189, 75, 394, 393, 68, 208, 291, 125, 126, 127,
	128, 274, 159, 160, 161, 13, 14, 15, 28, 238,
	201, 388, 156, 314, 396, 16, 17, 18, 180, 181,
	224, 38, 157, -169, -198, -284, -284, -284, -284, -284,
	244, -237, -279, 408, -138, 410, 410, -138, -284, -230,
	410, -344, 7, -138, -293, 408, -302, -284, 412, 410,
	5, 410, 5, -381, 382, 136, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 257, -341, 376, -341,
	-341, -328, 410, -328, 410, 410, -329, 410, 410, 410,
	-328, 410, 410, 410, 383, 383, 389, 410, 410, -272,
	-273, -272, 348, -168, 415, -379, -215, 410, -233, -318,
	-284, 403, -233, -233, 234, -230, -284, 79, -248, 185,
	217, 140, 198, 284, 167, -344, -72, -281, 416, 410,
	-310, 389, -310, -138, -315, 410, -314, 403, -187, 410,
	412, -148, 275, -147, 22, 25, 107, 370, 118, -205,
	164, 249, 113, 320, 341, 115, 293, 275, 113, -242,
	-244, 32, 90, 219, 246, 49, 152, 210, 211, 322,
	113, 275, 381, 113, 115, 275, -150, 320, 341, 115,
	293, 275, -149, -205, 113, 416, 115, 229, -353, -191,
	415, -348, 403, 113, 113, 139, -221, -348, -187, -192,
	-163, -193, 410, -215, 222, 234, -243, -242, 222, -159,
	-376, 381, 222, 222, -215, -174, 154, 2, -164, -163,
	-174, 154, -376, 222, -317, -195, -187, -195, 310, -181,
	32, -152, 415, 51, 280, 113, -152, 113, -152, 113,
	-152, 415, 113, -152, 113, 415, 113, 113, -230, 411,
	415, -395, -221, -167, 78, 410, 32, -295, -324, -325,
	-326, -335, -330, -333, 42, 48, 47, 342, 215, 302,
	303, 304, 305, 317, 368, 158, 40, 232, 233, 170,
	4, 41, -337, 177, 169, 171, 172, 173, 174, 175,
	316, 39, 265, 132, 133, 131, 106, 97, 96, 228,
	44, 43, 94, 345, 346, 347, 186, 187, 55, 54,
	373, 327, -354, -395, -221, 136, -172, 2, -187, 2,
	69, 70, 387, -347, -230, 32, -273, 2, -404, 415,
	200, -200, 207, 221, 148, 235, 385, -352, 5, 4,
	-294, -307, 98, 204, -333, 8, 402, -342, 7, 401,
	-346, -345, -346, 82, 412, -348, 335, 186, -347, 24,
	312, 2, -187, 285, -395, -397, 136, -187, -187, -187,
	-187, -187, 136, 2, 350, 2, 136, -163, -163, 200,
	-187, 2, -189, 2, -188, 2, 335, 162, 335, -152,
	415, -239, -263, -262, -265, -284, 24, -268, 130, 218,
	-284, -286, -137, -137, -137, -219, -312, -284, 259, 162,
	-347, -339, -324, -338, 270, 271, 269, 273, 272, -324,
	-186, -348, 345, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, 201, 156,
	314, 38, 157, -284, 348, -284, -284, -284, -284, 214,
	222, 225, 354, 122, 361, 104, 229, -406, 332, 34,
	-291, -138, 410, -306, 29, 319, 24, -298, 289, 410,
	-279, -284, -280, -231, -230, 411, 415, -231, -297, -293,
	-305, -304, 378, -348, 403, 411, -230, 374, 24, 104,
	403, 2, 7, -255, 386, 213, 95, 150, 212, -256,
	298, -382, 129, 145, 410, 411, 2, 411, 2, 411,
	2, 411, 2, -284, -284, -284, -284, -284, -230, -344,
	-249, 2, -340, -230, 4, 386, 213, 95, 150, 212,
	298, -249, 2, 7, -230, 2, -230, 2, -250, 2,
	-284, -230, -251, -285, -286, 401, 402, 396, 410, 289,
	-252, 2, -284, -231, 345, 345, 345, -284, 45, 196,
	349, -253, -284, 139, -230, -168, -380, 32, -230, -225,
	415, 139, 32, 4, -225, -225, 410, 411, 415, 185,
	185, -314, -248, 185, -246, 242, -246, -246, -393, 410,
	409, -310, -173, 408, 417, -348, -231, 2, -309, -308,
	32, -181, 240, -309, 411, -187, -348, 415, 348, -259,
	73, 62, -276, 154, 62, -359, -175, 73, -360, -163,
	57, 360, 259, 138, -259, 73, -259, 73, 73, 310,
	323, 46, -316, 35, -86, 71, 139, 348, -316, -244,
	-324, 90, 210, 211, 46, -343, -342, 402, -343, 46,
	-343, -343, -343, 381, -188, -316, 348, 250, -353, 71,
	348, 415, 35, -86, 71, 139, 348, -196, -173, 71,
	335, -321, -320, 390, -163, 412, -284, -284, 325, 411,
	412, 180, 180, 412, -201, -202, -163, -277, -276, -361,
	-362, -359, 179, 162, 360, 123, 32, 113, -221, 113,
	250, 113, 113, 32, 234, 222, 234, 222, -155, 338,
	113, -278, 379, -269, -86, 410, 98, 32, -269, -234,
	-235, -319, -236, -175, 410, -181, -187, -229, -229, -229,
	-196, -197, -172, -353, -354, -354, 411, -72, -322, 348,
	381, 367, -202, -71, 25, 78, 107, 411, 415, -224,
	31, 408, -255, 410, -341, 410, -134, -320, 381, 139,
	-223, -321, -321, 136, 70, 393, 348, 411, 351, -274,
	-199, 264, 318, 276, 306, 8, 7, 7, 415, -348,
	-187, 136, -222, -221, -221, 307, -72, 136, -72, 412,
	-187, -196, -187, -316, -266, -342, 410, -267, 289, 290,
	415, -146, 33, 102, 190, -187, 387, -284, -284, 348,
	-406, 332, -291, -284, 214, 225, 354, 122, 361, 104,
	229, 139, 410, -285, -285, -230, -284, 410, -230, 409,
	419, 411, -284, 409, 409, 415, -303, -304, 108, -284,
	412, -218, 415, -217, -284, -230, -230, 411, 411, 348,
	348, 348, 348, 410, -387, 243, 410, 410, -284, 32,
	415, 415, 415, 415, 411, 411, 415, 411, 139, 411,
	411, 411, 411, 411, -257, 253, 411, 10, 11, 401,
	402, 403, 404, 134, 405, 406, 399, 400, 398, 391,
	392, 393, 68, 208, 291, 13, 14, 15, 180, 157,
	-285, -285, -285, -230, 410, 411, -289, -290, 139, 136,
	387, 387, 387, 32, -253, -253, -253, 411, 139, -230,
	410, 411, -278, -318, -227, 2, -314, -183, -348, -278,
	-278, -230, -284, -314, -314, -247, 367, 234, 185, -314,
	-308, 411, -394, -344, -310, -309, -344, -283, -282, 137,
	220, 411, -181, -215, -310, 411, 412, -147, -187, -175,
	-182, -163, 222, -276, 154, -154, 222, -324, -182, 410,
	410, 190, 190, -175, -182, 154, -175, 154, -182, -182,
	-399, 264, 230, -284, 203, 263, 223, -148, 275, -86,
	387, 410, -189, 275, -192, -343, -343, -242, 275, -188,
	-353, 381, 387, -172, -149, -86, 387, 410, -173, -150,
	275, 387, -187, -131, 153, 229, 403, -348, -125, 5,
	225, -125, -348, 411, 415, 162, -174, 162, -180, -164,
	-86, -187, 139, -188, -353, -353, -353, -86, -187, 113,
	-187, 113, -156, 109, -405, 393, -172, -218, -284, -241,
	-271, 282, 234, -216, -176, -175, 372, -181, -241, -226,
	415, 139, 393, 412, -216, -152, -152, -152, -152, -152,
	-221, 23, -353, 411, -324, 408, 409, 7, 7, 410,
	-344, -134, -133, 237, -132, -163, 5, -221, 139, -41,
	381, 263, 92, 335, 249, 162, -345, -345, -273, 358,
	66, 264, -345, 335, -397, 307, -72, -163, -267, -284,
	-312, -187, 416, -284, -284, -285, -285, 139, 410, -284,
	-295, 28, 28, 411, -231, 415, -280, -284, 411, -293,
	110, -284, 344, -348, 403, 411, 374, -218, -218, -218,
	5, 213, 150, 212, -256, 212, -256, -256, 7, -388,
	-178, 410, -163, 379, -217, 411, -339, -324, -284, -284,
	-284, -344, -284, -289, -284, -339, -324, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, 104, 222, 229, -285,
	415, -231, -290, -289, -284, -284, -324, 411, 411, 411,
	-230, -71, -238, 145, -321, 415, -238, -238, 411, -247,
	410, -284, -314, 409, 411, 415, -309, 409, 415, 418,
	393, -310, -215, -308, -348, 348, 348, 113, 222, 369,
	-363, -360, -284, -220, -313, -175, -375, 410, -163, -371,
	-372, -170, 410, 410, -145, 107, 310, -261, 113, -152,
	113, -152, 385, 410, 410, 348, -259, 73, -287, -170,
	-163, -230, 348, 348, 250, -287, -287, -230, 348, -287,
	115, -134, 139, 334, 412, -203, 165, -277, -164, 410,
	-174, 410, 410, -215, -187, -243, -159, -260, 367, -173,
	410, -173, -157, 195, -405, -351, -376, -264, -262, -241,
	-233, 223, 72, 411, 415, 412, -278, -235, -227, -284,
	2, 411, 236, -135, 80, -135, 7, 409, 411, -344,
	411, 415, 410, 393, 393, -221, 237, -184, -172, -187,
	-185, -196, -187, 235, 411, -146, -173, 28, 28, -284,
	-295, 411, -284, -284, 411, -284, 409, -284, 412, 5,
	-284, 411, 411, 411, 411, -389, -163, -284, 411, 411,
	411, 415, 411, 411, 411, -290, 139, 104, 229, 410,
	-284, 411, 411, 411, -292, 147, 46, -314, -292, -292,
	-221, -281, -344, -282, -173, 408, -309, 412, -175, -182,
	-276, 113, -364, 73, -365, 60, 123, 78, 222, 225,
	360, 259, 57, 98, 268, 32, 411, 411, 415, -171,
	60, -171, -284, 410, -220, -221, 222, 98, 222, 98,
	91, 356, -175, -182, -221, -221, -187, -175, -182, 410,
	411, -189, -188, -353, 411, -173, 71, -354, 345, -348,
	-204, -205, 157, 410, -220, 410, -221, -201, 32, 410,
	141, 234, -220, 234, -158, 194, -405, -351, -155, -241,
	-270, 410, 234, -86, -176, 2, -218, 393, 91, 91,
	409, 411, -132, -133, -353, -353, -42, -43, 162, 73,
	252, -207, -206, 249, 229, -146, -284, -284, 411, 411,
	-348, 403, -218, -383, 249, 411, -284, -285, 139, 410,
	-295, 411, -384, 380, -284, -230, -384, -384, 411, -310,
	-344, -276, -182, -186, -179, -163, 123, 154, 225, 190,
	410, -285, -187, 410, 2, -275, -400, 77, 330, -313,
	-146, -186, -146, 411, -230, 411, 411, 225, 225, -284,
	-324, -152, -152, 411, 411, 348, 348, -230, 348, 348,
	387, -287, 247, -220, 411, -220, 411, 411, -86, -220,
	-187, 411, -187, -405, -351, -156, 105, -221, 73, -264,
	-291, 410, 410, 411, 415, 24, 410, 24, 410, -185,
	335, 411, -218, 46, 411, -285, -295, 411, -385, -386,
	-178, -309, 409, -365, -179, 222, -284, -165, 410, -284,
	-203, 410, -171, -218, 268, -151, 60, 410, 410, -175,
	-182, -218, 410, 410, -287, -187, 411, -275, 411, -203,
	411, -260, 410, -351, -157, 362, 223, 411, -182, -241,
	-354, -354, -43, -221, -221, -187, -390, 263, 290, -230,
	411, 415, 32, 113, 411, -366, 209, -163, 411, -204,
	-221, -146, 411, -187, -144, 367, -186, -209, -208, -206,
	-211, -210, -206, 411, -230, -230, 410, -203, -275, -204,
	-275, 410, -220, -158, 310, -278, 411, 411, 411, 411,
	411, -391, -392, 38, 357, 82, -284, -391, -386, -388,
	123, -367, -370, -369, 234, 140, 248, 315, 411, 329,
	377, 411, -215, -284, 411, 415, 372, 411, 415, 372,
	411, 411, -221, -204, -203, -203, -220, 411, -234, -134,
	-134, -392, 256, 135, 289, 256, 135, -179, -369, 234,
	-370, 234, 362, 101, -366, -208, 157, -210, 139, 411,
	-204, -204, 411, -278, 28, -368, 219, 280, 51, 310,
	-368, -367, 410, 410, -153, 51, 280, -275, -392, 21,
	225, 98, -230, -230, -203, 411, 411, -204, -204, 348,
	410, -230, 411, -204,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	176, 178, 180, 0, 0, 0, 195, 197, 199, 200,
	-2, 0, 0, 0, 226, 227, 229, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 823, -2, 0, 347, 349, 358, 360, 362, 364,
	365, 0, 427, 429, 431, 433, 435, 437, 439, 441,
	443, 445, 447, 449, 451, 453, 455, 457, 459, 461,
	463, 465, 467, 468, 470, 472, 474, -2, 735, 737,
	739, 741, -2, 60, 62, 64, 66, 68, 70, 85,
	203, 205, 207, 209, 212, 214, 860, 232, 234, 236,
	238, 240, -2, 872, 0, 0, 0, -2, 0, -2,
	-2, -2, 753, 71, 72, 73, 74, 75, 76, 91,
	92, 93, 94, 95, 96, 78, 80, 81, 87, 88,
	90, 0, 0, 836, 838, 840, 842, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 44, 50, 52, 54,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 336, 0, 1478, 1361, 1365, 1419, 1368, 1422,
	1423, 1424, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 177, 179, 181, 182, 0, 0, 0, 639, 1406,
	1419, 1478, 0, 196, 198, 201, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 323, 1562, 325,
	327, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	225, 228, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 322, 320, 1401, 265, 266, 0, 305, 306, 307,
	308, 309, 310, 312, 269, 271, 273, 274, 276, 278,
	280, 282, 284, 286, 288, 290, 291, 293, 295, 296,
	298, 300, 301, 303, 699, 0, 0, 0, 0, 0,
	340, 331, 339, 341, 343, 344, 345, 346, 0, 159,
	0, 572, 318, 316, 0, 155, 0, 732, 0, 340,
	1446, 335, 733, 734, 0, 0, 729, 730, 1590, 763,
	348, 350, 359, 361, 363, 366, -2, -2, 1682, -2,
	389, -2, 397, 1685, 1592, 400, 0, 402, -2, 405,
	428, 430, 432, 434, 436, 438, 440, 442, 444, 446,
	448, 450, 452, 454, 456, 458, 460, 462, 464, 466,
	469, 471, 473, 475, 476, 0, 0, 0, 0, 0,
	480, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 479, 481, 482, 483, 0, 528,
	736, 738, 740, 0, 680, 862, 61, 63, 65, 67,
	69, 204, 206, 208, 210, 213, 215, -2, 834, 835,
	233, 235, 237, 239, 241, -2, 0, 866, 866, 866,
	0, 0, 835, 833, 0, 351, 0, 353, 0, 480,
	356, 357, 409, 410, 1066, 0, 0, 0, 0, 0,
	0, 1144, -2, -2, 1176, 1178, 1663, 1682, 0, 1180,
	1181, 0, 1183, 1185, 1186, 0, 1189, 1190, 1344, 1413,
	1408, 1373, 1374, 1375, 1376, 0, 0, 1379, 0, 1381,
	1382, 1383, 1246, 1200, -2, -2, -2, 1417, 982, 983,
	984, 985, 986, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1693, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 0,
	1652, 1669, 1675, 1670, 1660, 1218, -2, -2, 1485, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1664, 1665, -2, 1667,
	-2, -2, 1674, -2, 1678, 1679, -2, -2, 1684, -2,
	-2, 1687, 1688, -2, 1433, 1035, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1706, 1707, 1708, 1709,
	1710, 1711, 765, 743, 756, 765, 745, 746, 747, 748,
	749, 754, 755, 758, 0, 750, 751, 752, 852, 1568,
	855, 639, 853, 837, 839, 0, 841, 0, 0, 0,
	846, 869, 867, 0, 903, 850, 851, 861, 918, 0,
	934, 934, 925, 0, 956, 0, 1418, 0, 0, 0,
	0, -2, 1419, 1693, 1704, 1705, 2, 77, 0, 1669,
	956, 79, 0, 1669, 82, 0, 1669, 0, -2, 86,
	0, 1669, 160, 161, 1429, 1430, 1434, 1435, 1436, 1437,
	89, 0, 1397, 97, 0, 1669, 1364, 0, 1394, 1438,
	1439, 1440, 1441, 1442, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 0, 1391, 0,
	0, 337, 338, 1369, 0, 183, 184, 185, 1669, 187,
	188, 1669, 190, 0, 0, 0, 0, 0, 211, 639,
	1669, 0, 217, 1402, 663, 1669, 661, 1405, -2, 1669,
	683, 686, 1669, 688, 639, 690, 1404, -2, 1426, 859,
	1669, 779, 324, 326, 0, 219, 0, 792, 0, 794,
	0, 813, 962, 144, 1669, 244, 263, 144, 1669, 247,
	144, 1669, 250, 144, 1669, 253, 1359, 144, 1669, 256,
	257, 1669, 259, 162, 260, 1669, 262, 319, 0, 0,
	-2, 313, 1407, -2, 311, 270, 272, 275, 277, 279,
	281, 283, 285, 287, 289, 292, 294, 297, 299, 302,
	304, -2, 0, 0, 0, 0, 571, 0, 0, 0,
	731, 0, 0, 0, 370, 0, 0, 0, 0, 762,
	367, 0, 386, 0, 388, 1659, -2, -2, 392, 766,
	770, 771, 772, 0, 0, 0, 0, 399, 0, 0,
	0, 403, 406, 0, 477, 478, 0, 0, 488, 489,
	490, 491, 492, 0, 495, 517, 532, 0, 0, 499,
	501, 0, 570, 504, 0, 506, 0, 508, 0, 510,
	0, 512, 0, 514, 516, 518, 533, 520, 0, 0,
	0, 531, 0, 537, 0, 540, 541, 542, 0, 544,
	545, 546, 0, 0, 0, 554, 556, 0, 0, 484,
	485, 144, 960, -2, 0, 829, 881, 882, 0, 0,
	0, 0, 864, 865, 0, 0, 0, 825, 826, 352,
	0, 355, 0, 0, 0, 0, 1279, 1280, 1281, 1282,
	1283, 1284, 1287, 1288, 1285, 1286, 1289, 1290, 0, 0,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1292, 1293, 1294, 0, 0,
	1296, 0, 1298, 0, 0, 0, 0, 0, 0, 1123,
	1125, 1352, 0, 0, 1295, 1071, 1072, 1073, 1108, 1109,
	0, 1177, 1349, 1348, 1179, 0, 1301, -2, 1302, 0,
	0, 1182, 1388, 1187, 1188, 1301, 0, 1343, 0, 0,
	1378, 0, 1063, 1248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1019, 1033, 1040, 1037,
	1036, 1021, 0, 1020, 0, 0, 1018, 0, 0, 0,
	1022, 0, 1324, -2, 0, 0, 0, 0, 0, 742,
	-2, 744, 0, 760, 0, 854, 0, 0, 907, 1353,
	1357, 1358, 907, 907, 0, 0, 1302, 0, 0, 0,
	0, 953, 953, 953, 951, 928, 0, 934, 0, -2,
	944, 0, 944, -2, 925, 0, 0, 957, 958, 0,
	0, 98, 726, 115, 0, 726, 726, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 83,
	664, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	113, 0, 137, 139, 0, 0, 0, 0, 947, 1362,
	0, 1420, 1367, 0, 0, 0, 0, 1420, 0, 0,
	1408, 1409, 578, 0, 0, 0, 659, 662, 0, 681,
	0, 858, 0, 0, 0, 0, 1669, 695, 1393, 1425,
	0, 1669, 781, 0, 966, 0, 795, 0, 0, 963,
	0, 242, 0, 142, 143, 0, 245, 0, 248, 0,
	251, 0, 0, 254, 0, 0, 0, 0, 0, 861,
	0, 0, 329, 342, 0, 0, 861, 0, 1304, 974,
	977, 978, 979, 1063, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1041, 1035, 1049, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1031, 0, 1006, 1006, 1006,
	1023, 1024, 1042, 1043, 1045, 1047, 975, 976, 1041, 1041,
	1038, 1039, 174, 0, 333, 0, 947, 372, 947, 374,
	0, 562, 0, 0, 0, 0, -2, 394, 0, 768,
	0, 773, 418, 419, 420, 775, 776, 398, 421, 422,
	423, 424, 425, 426, 0, 656, 0, 658, 1384, 0,
	395, 411, 396, 401, 0, 407, 0, 0, 493, 494,
	496, 497, 498, 1372, 567, 503, 0, 505, 507, 509,
	511, 513, 861, 522, 0, 524, 861, 535, 538, 543,
	547, 548, 549, 550, 551, 552, 0, 0, 0, 679,
	0, 832, 879, 880, 885, 889, 890, 893, 896, 897,
	887, 1066, 847, 848, 849, 873, 874, 709, 0, 0,
	354, 1067, 970, 971, 1025, 1026, 1027, 1028, 1029, 1068,
	1069, 1390, 0, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, -2, -2, -2, -2, -2, -2, -2,
	-2, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, -2, -2, -2, 1106, 1107, -2, 1297, 1299,
	0, 1352, 0, -2, 0, -2, -2, -2, -2, 1120,
	0, 1122, 1127, 1129, 1131, 0, 0, 0, 0, 1351,
	1141, 1335, 0, 0, 1276, 1277, 1278, 1126, 0, 0,
	1350, 1347, 0, 0, 1300, 1184, 0, 0, 0, 1308,
	1342, 1338, 0, 1410, 1416, 1191, 872, 0, 0, 0,
	0, 1198, 0, 1389, 1050, 1051, 1052, 1053, 1054, 1055,
	1064, 1256, 0, 0, 0, 1219, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 0, 1311, -2, -2, -2, -2, -2, -2,
	-2, 0, 1230, 0, 0, 1242, 0, 1244, 0, 1232,
	1302, 1321, 0, 0, 1147, 0, 0, 0, 0, 1682,
	0, 1235, 1302, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 0, 1334, 759, 856, 0, 0, 966,
	0, 0, 0, 1356, 966, 966, 0, 902, 0, 0,
	0, 0, 0, 0, 948, 952, 949, 950, 0, 0,
	934, 944, 915, 0, 0, 1392, 0, 922, 923, 943,
	0, 639, 933, 924, -2, 0, -2, 0, 0, 0,
	0, 725, 117, 1669, 0, 146, 0, 0, 629, 1398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 665,
	666, 668, 674, 676, 0, 670, 1387, 0, 671, 0,
	673, 675, 677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 1363, 0,
	0, 165, 946, 0, 1370, 0, 186, 189, 175, 638,
	0, 0, 0, 0, 0, 577, -2, 579, 581, 582,
	583, 584, 1518, 1426, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 789,
	0, 872, 0, 811, 797, 0, 0, 0, 811, 815,
	816, 818, 819, 0, 0, 964, 264, 144, 144, 144,
	1360, 144, 144, 163, 258, 261, 321, 267, 314, 0,
	0, 0, 0, 315, 0, 0, 0, 317, 0, 967,
	969, 0, 980, 0, 1033, 0, 153, 174, 0, 0,
	0, 371, 376, 0, 563, 0, 0, 387, 0, 767,
	774, 0, 415, 0, 417, 657, 1386, 1385, 0, 408,
	486, 0, 570, 1371, 569, 521, 525, 861, 527, 0,
	564, 565, 566, 961, 0, 891, 0, 888, 894, 895,
	0, 876, 707, 708, 0, 0, 0, -2, -2, 0,
	0, 0, 1142, -2, 1121, 1124, 1128, 1130, 1132, 0,
	0, 0, 0, 0, 0, 0, 1143, 1301, 0, 1345,
	1348, -2, 1303, 1306, 1307, 0, 0, 1339, 0, 0,
	0, 0, 0, 871, 872, 872, 872, 1197, 0, 0,
	0, 0, 0, 0, 1199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1217, 1004, 0, 1227, 0, 1229,
	1030, 1241, 1243, 1231, 0, 0, 1233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 1151, 1152, 0, 1301, 1234, 1327, 1328, 0, 0,
	1044, 1046, 1048, 0, 0, 0, 0, 1240, 0, 1333,
	861, 904, 899, 1354, 947, 906, 908, 1355, 1395, 899,
	899, 0, 1303, 936, 0, 938, 0, 0, 0, 940,
	0, 929, 0, 931, 944, 920, 0, 0, 913, 0,
	912, 934, 639, 942, 0, 959, 0, 116, 713, 0,
	0, 1396, 0, 119, 1669, 127, 0, 606, 0, 0,
	0, 0, 0, 728, 128, 1669, 144, 1669, 144, 129,
	132, 0, 136, 134, 0, 0, 597, 99, 726, 102,
	0, 0, 719, 0, 669, 672, 678, 84, 0, 721,
	711, 0, 0, 710, 138, 103, 0, 0, 723, 101,
	0, 0, 0, 174, 0, 0, 1366, 1421, 191, 193,
	194, 192, 1410, 586, 0, 1426, 0, 1426, 0, 1400,
	575, 639, 0, 663, 684, -2, 687, 689, 697, 0,
	0, 0, 785, 789, 0, 788, 859, 884, 965, 790,
	811, 0, 0, 0, 800, 802, 799, 796, 793, 966,
	0, 0, 0, 0, 0, 243, 246, 249, 252, 255,
	328, 0, 0, 0, 1305, 0, 972, 0, 0, 0,
	0, 154, 172, 1550, 170, 167, 169, 332, 0, 373,
	0, 0, 0, 0, 0, 0, 384, 385, -2, 413,
	414, 416, 412, 0, 502, 523, 526, 534, 0, 0,
	875, 709, 0, 1070, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1336, 0, 0, 0, 1347, -2, 1309,
	1337, 1341, 0, 1411, 1415, 1192, 0, 0, 0, 0,
	1380, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 0, 1254,
	1255, 1259, 1403, 0, 0, 1203, 0, 0, 0, 0,
	0, 0, 1310, 1320, 1322, 1148, 1149, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, -2, -2, -2,
	1166, 1167, 1168, -2, -2, -2, 0, 0, 0, 1323,
	0, 0, 1325, 1326, 1330, 1331, 0, 1237, 1238, 1239,
	1332, 0, 901, 0, 905, 0, 901, 901, 868, 937,
	0, 955, 939, 918, 930, 0, 927, 916, 0, 917,
	0, 944, 941, 926, -2, 0, 0, 0, 0, 145,
	604, 628, 0, 0, 700, 706, 706, 0, 1398, 1201,
	1202, 0, 0, 0, 121, 0, 0, 0, 0, 125,
	0, 131, 135, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 107, 110, 0, 0, 106,
	0, 151, 0, 0, 0, 594, 0, 580, 0, 0,
	0, 0, 578, 0, 216, 660, 682, 0, 0, 0,
	0, 0, 787, 789, 0, 780, 781, 811, 883, 791,
	809, 810, 808, 0, 0, 0, 872, 817, 814, 820,
	821, 0, 330, 0, 156, 0, 0, 973, 981, 0,
	1034, 0, 0, 0, 0, 334, 0, 557, 558, 592,
	0, 561, 487, 886, 892, 877, 709, 0, 0, -2,
	0, 1135, -2, -2, 1272, 1303, 1346, 1340, 0, 1377,
	872, 1193, 1195, 1196, 1065, 1261, 1258, 0, 1245, 1212,
	1213, 0, 1215, 1216, 1005, 1319, 0, 0, 0, 0,
	1303, 1274, 1236, 857, 1250, 0, 0, 909, 1250, 1250,
	0, 934, 932, 914, 910, 0, 921, 0, 715, 717,
	118, 0, 605, 0, 608, 0, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 0, 630, 637, 0, 709,
	0, 709, 0, 0, 0, 0, 0, 141, 0, 0,
	727, 0, 144, 144, 0, 0, 714, 0, 0, 0,
	0, 720, 722, 712, 0, 724, 0, 164, 0, 1411,
	573, 593, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 777, 789, 0, 782, 783, 218,
	0, 0, 0, 798, 801, 803, 884, 0, 0, 0,
	968, 1032, 171, 0, 166, 168, 375, 377, 0, 0,
	383, 559, 591, 0, 0, 878, -2, -2, 1136, 1273,
	1412, 1414, 0, 872, 0, 1247, 0, -2, 0, 0,
	0, 1275, 843, 0, 900, 898, 844, 845, 954, 944,
	0, 120, 0, 609, 610, 1399, 612, 0, 614, 617,
	0, 619, 1428, 0, 623, 586, 0, 634, 635, 701,
	702, 705, 703, 706, 872, 632, 0, 122, 123, 140,
	148, 124, 130, 0, 0, 0, 0, 872, 0, 0,
	0, 945, 0, 0, 637, 0, 627, 586, 576, 0,
	697, 693, 0, 0, 784, 785, 0, 0, 0, 811,
	822, 0, 0, 173, 0, 379, 0, 381, 0, 590,
	0, 1194, 1264, 0, 1214, -2, 0, 1174, 1249, 1251,
	0, 919, 911, 607, 611, 0, 0, 643, 0, 0,
	594, 0, 709, 0, 0, 150, 0, 0, 0, 716,
	718, 0, 0, 0, 109, 0, 626, 586, 637, 594,
	637, 0, 0, 786, 787, 0, 805, 966, 807, 812,
	0, 0, 378, 0, 0, 560, 0, 0, 0, 1260,
	1175, 0, 0, 0, 618, 648, 0, 0, 0, 631,
	0, 704, 1192, 639, 126, 0, 147, 0, 598, 0,
	0, 601, 0, 0, 0, 0, 0, 594, 586, 574,
	586, 0, 0, 778, 0, 806, 174, 174, 380, 382,
	1257, 1262, 1265, -2, 1635, 1475, 0, 1263, 1252, 1253,
	0, 620, 644, 645, 0, 640, 641, 642, 1427, 621,
	622, 636, 643, 149, 595, 0, 0, 596, 0, 0,
	112, 114, 0, 624, 594, 594, 0, 694, 966, 157,
	158, 0, 1267, 1268, 1269, 1270, 1271, 613, 646, 0,
	647, 0, 0, 0, 648, 599, 0, 602, 0, 589,
	625, 691, 637, 804, 0, 649, 0, 652, 653, 0,
	650, 633, 0, 0, 585, 587, 588, 586, 1266, 651,
	654, 655, 0, 0, 594, 594, 0, 692, 600, 0,
	0, 0, 594, 603,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 399, 3, 405, 400, 3,
	410, 411, 403, 401, 415, 402, 412, 404, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 419, 414,
	391, 393, 392, 395, 416, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 408, 3, 409, 406, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 417, 398, 418, 396,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 394, 57734, 397,
	57735, 407, 57736, 413, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1067
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1122
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1156
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1193
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1229
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1235
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1241
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1250
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1259
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1268
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1280
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1351
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1374
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1488
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return unimplemented(sqllex, "alter using")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.str = "CSV"
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1720
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.str = ""
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "CREATE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "DELETE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "DROP")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "DELETE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			return helpWith(sqllex, "INSERT")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{ /* SKIP DOC */
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "GRANT")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "RESET")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "RESET")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "USE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{ /* SKIP DOC */
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "USE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return unimplemented(sqllex, "set local")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplemented(sqllex, "set from current")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.Low
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = tree.Normal
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = tree.High
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			return helpWith(sqllex, "SHOW")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.str = "client_encoding"
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.str = "timezone"
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2718
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2782
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2798
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2841
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2846
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2856
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2924
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2942
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3019
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3025
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3042
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3056
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = ""
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3414
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			return unimplemented(sqllex, "match full")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			return unimplemented(sqllex, "match partial")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			return unimplemented(sqllex, "match simple")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3553
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3644
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3652
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3681
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = nil
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3819
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = false
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = true
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = false
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3861
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3865
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = tree.Descending
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3916
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3918
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = true
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = false
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4062
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.str = ""
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.str = ""
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4134
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.str = ""
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.str = ""
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4242
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			return helpWith(sqllex, "INSERT")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 812:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4405
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4410
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4568
		{
			return helpWith(sqllex, "SELECT")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			return helpWith(sqllex, "VALUES")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			return helpWith(sqllex, "TABLE")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			return helpWith(sqllex, "SELECT")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4675
		{
			return helpWith(sqllex, "TABLE")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4690
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4714
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = true
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = false
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = false
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = true
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4755
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			return helpWith(sqllex, "VALUES")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4943
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = nil
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = true
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = false
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5232
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5306
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5320
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5328
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5459
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = nil
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5622
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5675
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = tree.Year
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = tree.Month
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = tree.Day
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = tree.Month
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = nil
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = tree.Second
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5813
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6041
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6107
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6318
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6368
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6369
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6393
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6410
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6414
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6456
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6482
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6484
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6487
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6492
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6497
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6499
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6502
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6507
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6512
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6514
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6518
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6521
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6522
		{
			return unimplemented(sqllex, "treat")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6532
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6536
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6540
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6543
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6548
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6553
		{
			return unimplemented(sqllex, "within group")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6554
		{
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6573
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6579
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6589
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6597
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6605
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6612
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6631
		{
			sqlVAL.str = ""
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6637
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6641
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6651
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6652
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6653
		{
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6656
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6657
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6663
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6664
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6665
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6666
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6667
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6678
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6682
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6688
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6694
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6700
		{
			sqlVAL.union.val = tree.Any
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6704
		{
			sqlVAL.union.val = tree.Some
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6708
		{
			sqlVAL.union.val = tree.All
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6713
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6714
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6716
		{
			sqlVAL.union.val = tree.Div
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6717
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6720
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6722
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6723
		{
			sqlVAL.union.val = tree.LT
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6724
		{
			sqlVAL.union.val = tree.GT
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6725
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6726
		{
			sqlVAL.union.val = tree.LE
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6727
		{
			sqlVAL.union.val = tree.GE
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6728
		{
			sqlVAL.union.val = tree.NE
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6732
		{
			sqlVAL.union.val = tree.Like
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6734
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6735
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6747
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6763
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6777
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6783
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6793
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6819
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6823
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6827
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6833
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6840
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6844
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6861
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6865
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6869
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6873
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6883
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6889
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6899
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6903
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6909
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6924
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6931
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6941
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6947
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6951
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6958
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6968
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6975
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6981
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6990
		{
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6991
		{
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6995
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7005
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7014
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7018
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7022
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7030
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7040
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7050
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7057
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7079
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7083
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7087
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7093
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7103
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7107
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7114
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7118
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7122
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7126
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7129
		{
			return unimplemented(sqllex, "func const")
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7131
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7138
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7140
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7144
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7148
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7155
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7159
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7168
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7179
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7189
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7285
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7292
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7296
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7314
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7318
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7322
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7335
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7347
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7351
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7355
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7369
		{
			sqlVAL.str = ""
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7375
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7379
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
