// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:591
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9640

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1054,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 890,
	199, 890,
	214, 249,
	292, 249,
	300, 730,
	327, 249,
	336, 730,
	374, 730,
	398, 249,
	422, 730,
	-2, 0,
	-1, 74,
	214, 253,
	-2, 0,
	-1, 75,
	109, 1054,
	188, 1054,
	408, 1054,
	409, 1054,
	-2, 0,
	-1, 87,
	122, 1028,
	138, 1028,
	196, 1028,
	225, 1028,
	256, 1028,
	266, 1028,
	403, 1028,
	-2, 1012,
	-1, 117,
	128, 651,
	213, 651,
	294, 631,
	345, 631,
	391, 651,
	-2, 0,
	-1, 118,
	4, 1056,
	21, 1056,
	22, 1056,
	23, 1056,
	24, 1056,
	25, 1056,
	27, 1056,
	33, 1056,
	38, 1056,
	39, 1056,
	40, 1056,
	41, 1056,
	42, 1056,
	43, 1056,
	44, 1056,
	45, 1056,
	46, 1056,
	47, 1056,
	48, 1056,
	49, 1056,
	51, 1056,
	52, 1056,
	53, 1056,
	54, 1056,
	55, 1056,
	56, 1056,
	59, 1056,
	60, 1056,
	61, 1056,
	62, 1056,
	64, 1056,
	65, 1056,
	69, 1056,
	70, 1056,
	71, 1056,
	72, 1056,
	73, 1056,
	74, 1056,
	76, 1056,
	77, 1056,
	78, 1056,
	79, 1056,
	81, 1056,
	83, 1056,
	84, 1056,
	85, 1056,
	88, 1056,
	89, 1056,
	97, 1056,
	98, 1056,
	99, 1056,
	100, 1056,
	101, 1056,
	102, 1056,
	103, 1056,
	104, 1056,
	106, 1056,
	108, 1056,
	109, 1056,
	111, 1056,
	114, 1056,
	115, 1056,
	116, 1056,
	118, 1056,
	120, 1056,
	121, 1056,
	123, 1056,
	124, 1056,
	125, 1056,
	126, 1056,
	127, 1056,
	128, 1056,
	129, 1056,
	130, 1056,
	131, 1056,
	132, 1056,
	133, 1056,
	134, 1056,
	135, 1056,
	137, 1056,
	143, 1056,
	144, 1056,
	145, 1056,
	146, 1056,
	147, 1056,
	148, 1056,
	150, 1056,
	152, 1056,
	156, 1056,
	157, 1056,
	159, 1056,
	160, 1056,
	162, 1056,
	163, 1056,
	165, 1056,
	166, 1056,
	167, 1056,
	168, 1056,
	169, 1056,
	170, 1056,
	171, 1056,
	172, 1056,
	174, 1056,
	175, 1056,
	177, 1056,
	178, 1056,
	179, 1056,
	182, 1056,
	183, 1056,
	184, 1056,
	185, 1056,
	188, 1056,
	189, 1056,
	190, 1056,
	191, 1056,
	192, 1056,
	193, 1056,
	194, 1056,
	195, 1056,
	197, 1056,
	199, 1056,
	201, 1056,
	203, 1056,
	204, 1056,
	205, 1056,
	207, 1056,
	208, 1056,
	211, 1056,
	212, 1056,
	213, 1056,
	214, 1056,
	216, 1056,
	217, 1056,
	219, 1056,
	220, 1056,
	222, 1056,
	223, 1056,
	226, 1056,
	227, 1056,
	230, 1056,
	231, 1056,
	233, 1056,
	234, 1056,
	235, 1056,
	236, 1056,
	237, 1056,
	238, 1056,
	239, 1056,
	240, 1056,
	241, 1056,
	242, 1056,
	244, 1056,
	245, 1056,
	246, 1056,
	247, 1056,
	249, 1056,
	252, 1056,
	253, 1056,
	254, 1056,
	255, 1056,
	257, 1056,
	258, 1056,
	259, 1056,
	261, 1056,
	262, 1056,
	263, 1056,
	264, 1056,
	267, 1056,
	268, 1056,
	269, 1056,
	271, 1056,
	273, 1056,
	274, 1056,
	275, 1056,
	276, 1056,
	277, 1056,
	278, 1056,
	279, 1056,
	280, 1056,
	281, 1056,
	282, 1056,
	284, 1056,
	285, 1056,
	286, 1056,
	287, 1056,
	288, 1056,
	289, 1056,
	291, 1056,
	293, 1056,
	294, 1056,
	295, 1056,
	296, 1056,
	297, 1056,
	298, 1056,
	299, 1056,
	300, 1056,
	301, 1056,
	303, 1056,
	304, 1056,
	305, 1056,
	306, 1056,
	307, 1056,
	309, 1056,
	310, 1056,
	311, 1056,
	312, 1056,
	313, 1056,
	314, 1056,
	315, 1056,
	316, 1056,
	318, 1056,
	320, 1056,
	321, 1056,
	322, 1056,
	323, 1056,
	324, 1056,
	325, 1056,
	327, 1056,
	328, 1056,
	329, 1056,
	330, 1056,
	331, 1056,
	332, 1056,
	333, 1056,
	334, 1056,
	336, 1056,
	337, 1056,
	338, 1056,
	339, 1056,
	340, 1056,
	341, 1056,
	342, 1056,
	343, 1056,
	344, 1056,
	345, 1056,
	347, 1056,
	348, 1056,
	349, 1056,
	350, 1056,
	351, 1056,
	353, 1056,
	354, 1056,
	355, 1056,
	356, 1056,
	358, 1056,
	359, 1056,
	360, 1056,
	361, 1056,
	362, 1056,
	363, 1056,
	364, 1056,
	365, 1056,
	366, 1056,
	367, 1056,
	368, 1056,
	369, 1056,
	371, 1056,
	372, 1056,
	373, 1056,
	375, 1056,
	376, 1056,
	377, 1056,
	378, 1056,
	379, 1056,
	380, 1056,
	381, 1056,
	383, 1056,
	384, 1056,
	385, 1056,
	386, 1056,
	387, 1056,
	389, 1056,
	391, 1056,
	392, 1056,
	393, 1056,
	394, 1056,
	395, 1056,
	397, 1056,
	398, 1056,
	399, 1056,
	401, 1056,
	402, 1056,
	405, 1056,
	406, 1056,
	407, 1056,
	408, 1056,
	409, 1056,
	410, 1056,
	412, 1056,
	414, 1056,
	415, 1056,
	416, 1056,
	417, 1056,
	418, 1056,
	419, 1056,
	420, 1056,
	422, 1056,
	423, 1056,
	424, 1056,
	429, 1056,
	430, 1056,
	431, 1056,
	432, 1056,
	433, 1056,
	434, 1056,
	-2, 0,
	-1, 119,
	1, 943,
	203, 943,
	291, 943,
	298, 943,
	437, 943,
	460, 943,
	-2, 0,
	-1, 121,
	1, 943,
	460, 943,
	-2, 0,
	-1, 122,
	1, 943,
	460, 943,
	-2, 0,
	-1, 123,
	1, 947,
	460, 947,
	-2, 0,
	-1, 148,
	122, 1027,
	138, 1027,
	196, 1027,
	225, 1027,
	256, 1027,
	266, 1027,
	403, 1027,
	-2, 1021,
	-1, 181,
	4, 1063,
	5, 1063,
	6, 1063,
	7, 1063,
	8, 1063,
	9, 1063,
	10, 1063,
	21, 1063,
	22, 1063,
	23, 1063,
	24, 1063,
	25, 1063,
	27, 1063,
	33, 1063,
	34, 1063,
	38, 1063,
	39, 1063,
	40, 1063,
	41, 1063,
	42, 1063,
	43, 1063,
	44, 1063,
	45, 1063,
	46, 1063,
	47, 1063,
	48, 1063,
	49, 1063,
	51, 1063,
	52, 1063,
	53, 1063,
	54, 1063,
	55, 1063,
	56, 1063,
	57, 1063,
	58, 1063,
	59, 1063,
	60, 1063,
	61, 1063,
	62, 1063,
	64, 1063,
	65, 1063,
	67, 1063,
	69, 1063,
	70, 1063,
	71, 1063,
	72, 1063,
	73, 1063,
	74, 1063,
	76, 1063,
	77, 1063,
	78, 1063,
	79, 1063,
	81, 1063,
	83, 1063,
	84, 1063,
	85, 1063,
	87, 1063,
	88, 1063,
	89, 1063,
	90, 1063,
	91, 1063,
	92, 1063,
	93, 1063,
	94, 1063,
	95, 1063,
	96, 1063,
	97, 1063,
	98, 1063,
	99, 1063,
	100, 1063,
	101, 1063,
	102, 1063,
	103, 1063,
	104, 1063,
	105, 1063,
	106, 1063,
	108, 1063,
	109, 1063,
	111, 1063,
	114, 1063,
	115, 1063,
	116, 1063,
	118, 1063,
	120, 1063,
	121, 1063,
	123, 1063,
	124, 1063,
	125, 1063,
	126, 1063,
	127, 1063,
	128, 1063,
	129, 1063,
	130, 1063,
	131, 1063,
	132, 1063,
	133, 1063,
	134, 1063,
	135, 1063,
	136, 1063,
	137, 1063,
	143, 1063,
	144, 1063,
	145, 1063,
	146, 1063,
	147, 1063,
	148, 1063,
	150, 1063,
	152, 1063,
	155, 1063,
	156, 1063,
	157, 1063,
	159, 1063,
	160, 1063,
	162, 1063,
	163, 1063,
	165, 1063,
	166, 1063,
	167, 1063,
	168, 1063,
	169, 1063,
	170, 1063,
	171, 1063,
	172, 1063,
	173, 1063,
	174, 1063,
	175, 1063,
	177, 1063,
	178, 1063,
	179, 1063,
	182, 1063,
	183, 1063,
	184, 1063,
	185, 1063,
	187, 1063,
	188, 1063,
	189, 1063,
	190, 1063,
	191, 1063,
	192, 1063,
	193, 1063,
	194, 1063,
	195, 1063,
	197, 1063,
	199, 1063,
	200, 1063,
	201, 1063,
	202, 1063,
	203, 1063,
	204, 1063,
	205, 1063,
	206, 1063,
	207, 1063,
	208, 1063,
	211, 1063,
	212, 1063,
	213, 1063,
	214, 1063,
	216, 1063,
	217, 1063,
	219, 1063,
	220, 1063,
	221, 1063,
	222, 1063,
	223, 1063,
	224, 1063,
	226, 1063,
	227, 1063,
	230, 1063,
	231, 1063,
	233, 1063,
	234, 1063,
	235, 1063,
	236, 1063,
	237, 1063,
	238, 1063,
	239, 1063,
	240, 1063,
	241, 1063,
	242, 1063,
	243, 1063,
	244, 1063,
	245, 1063,
	246, 1063,
	247, 1063,
	248, 1063,
	249, 1063,
	250, 1063,
	251, 1063,
	252, 1063,
	253, 1063,
	254, 1063,
	255, 1063,
	257, 1063,
	258, 1063,
	259, 1063,
	262, 1063,
	263, 1063,
	264, 1063,
	267, 1063,
	268, 1063,
	269, 1063,
	270, 1063,
	271, 1063,
	272, 1063,
	273, 1063,
	274, 1063,
	275, 1063,
	276, 1063,
	277, 1063,
	278, 1063,
	279, 1063,
	280, 1063,
	281, 1063,
	282, 1063,
	284, 1063,
	285, 1063,
	286, 1063,
	287, 1063,
	288, 1063,
	289, 1063,
	291, 1063,
	293, 1063,
	294, 1063,
	295, 1063,
	296, 1063,
	297, 1063,
	298, 1063,
	299, 1063,
	300, 1063,
	301, 1063,
	303, 1063,
	304, 1063,
	305, 1063,
	306, 1063,
	307, 1063,
	309, 1063,
	310, 1063,
	311, 1063,
	312, 1063,
	313, 1063,
	314, 1063,
	315, 1063,
	316, 1063,
	318, 1063,
	319, 1063,
	320, 1063,
	321, 1063,
	322, 1063,
	323, 1063,
	324, 1063,
	325, 1063,
	327, 1063,
	328, 1063,
	329, 1063,
	330, 1063,
	331, 1063,
	332, 1063,
	333, 1063,
	334, 1063,
	336, 1063,
	337, 1063,
	338, 1063,
	339, 1063,
	340, 1063,
	341, 1063,
	342, 1063,
	343, 1063,
	344, 1063,
	345, 1063,
	346, 1063,
	347, 1063,
	348, 1063,
	349, 1063,
	350, 1063,
	351, 1063,
	352, 1063,
	353, 1063,
	354, 1063,
	355, 1063,
	356, 1063,
	358, 1063,
	359, 1063,
	360, 1063,
	361, 1063,
	362, 1063,
	363, 1063,
	364, 1063,
	365, 1063,
	366, 1063,
	367, 1063,
	368, 1063,
	369, 1063,
	371, 1063,
	372, 1063,
	373, 1063,
	375, 1063,
	376, 1063,
	377, 1063,
	378, 1063,
	379, 1063,
	380, 1063,
	381, 1063,
	383, 1063,
	384, 1063,
	385, 1063,
	386, 1063,
	387, 1063,
	389, 1063,
	391, 1063,
	392, 1063,
	393, 1063,
	394, 1063,
	395, 1063,
	396, 1063,
	397, 1063,
	398, 1063,
	399, 1063,
	401, 1063,
	402, 1063,
	404, 1063,
	405, 1063,
	406, 1063,
	407, 1063,
	408, 1063,
	409, 1063,
	410, 1063,
	411, 1063,
	412, 1063,
	414, 1063,
	415, 1063,
	416, 1063,
	417, 1063,
	418, 1063,
	419, 1063,
	420, 1063,
	422, 1063,
	423, 1063,
	424, 1063,
	429, 1063,
	430, 1063,
	431, 1063,
	432, 1063,
	433, 1063,
	434, 1063,
	435, 1063,
	443, 1063,
	448, 1063,
	449, 1063,
	450, 1063,
	457, 1063,
	461, 1063,
	-2, 0,
	-1, 554,
	154, 1736,
	388, 1736,
	440, 1736,
	459, 1736,
	-2, 0,
	-1, 555,
	154, 1814,
	388, 1814,
	440, 1814,
	459, 1814,
	-2, 0,
	-1, 556,
	154, 1725,
	388, 1725,
	440, 1725,
	459, 1725,
	-2, 0,
	-1, 558,
	154, 1903,
	388, 1903,
	440, 1903,
	459, 1903,
	-2, 0,
	-1, 560,
	154, 1932,
	388, 1932,
	440, 1932,
	459, 1932,
	-2, 0,
	-1, 567,
	154, 1824,
	388, 1824,
	440, 1824,
	459, 1824,
	-2, 502,
	-1, 584,
	459, 1683,
	462, 1683,
	-2, 699,
	-1, 585,
	459, 1685,
	462, 1685,
	-2, 700,
	-1, 586,
	459, 1684,
	462, 1684,
	-2, 701,
	-1, 587,
	462, 1630,
	-2, 702,
	-1, 734,
	294, 632,
	345, 632,
	-2, 0,
	-1, 735,
	294, 631,
	345, 631,
	-2, 582,
	-1, 738,
	1, 661,
	456, 661,
	458, 661,
	460, 661,
	-2, 0,
	-1, 739,
	1, 698,
	151, 698,
	456, 698,
	458, 698,
	460, 698,
	-2, 0,
	-1, 747,
	1, 635,
	456, 635,
	458, 635,
	460, 635,
	-2, 0,
	-1, 750,
	1, 661,
	456, 661,
	458, 661,
	460, 661,
	-2, 0,
	-1, 751,
	1, 663,
	456, 663,
	458, 663,
	460, 663,
	-2, 0,
	-1, 752,
	1, 666,
	456, 666,
	458, 666,
	460, 666,
	-2, 0,
	-1, 756,
	1, 680,
	456, 680,
	458, 680,
	460, 680,
	-2, 0,
	-1, 757,
	1, 682,
	456, 682,
	458, 682,
	460, 682,
	-2, 0,
	-1, 800,
	138, 1065,
	225, 1065,
	256, 1065,
	-2, 1021,
	-1, 815,
	138, 1064,
	225, 1064,
	256, 1064,
	-2, 1021,
	-1, 839,
	459, 1682,
	-2, 510,
	-1, 868,
	457, 1674,
	-2, 1665,
	-1, 874,
	5, 1199,
	-2, 1716,
	-1, 875,
	5, 1200,
	-2, 1720,
	-1, 876,
	5, 1201,
	-2, 1719,
	-1, 877,
	5, 1202,
	-2, 1929,
	-1, 878,
	5, 1203,
	-2, 1826,
	-1, 879,
	5, 1204,
	-2, 1895,
	-1, 880,
	5, 1205,
	-2, 1897,
	-1, 881,
	5, 1206,
	-2, 1909,
	-1, 882,
	5, 1207,
	-2, 1898,
	-1, 883,
	5, 1208,
	-2, 1899,
	-1, 884,
	5, 1209,
	-2, 1715,
	-1, 885,
	5, 1210,
	-2, 1945,
	-1, 886,
	5, 1211,
	-2, 1789,
	-1, 887,
	5, 1212,
	-2, 1834,
	-1, 888,
	5, 1213,
	-2, 1836,
	-1, 889,
	5, 1214,
	-2, 1793,
	-1, 890,
	5, 1215,
	457, 1692,
	-2, 1683,
	-1, 891,
	5, 1271,
	457, 1271,
	-2, 1980,
	-1, 896,
	457, 1693,
	-2, 1684,
	-1, 898,
	5, 1219,
	-2, 1978,
	-1, 899,
	5, 1220,
	-2, 1979,
	-1, 900,
	5, 1221,
	-2, 1792,
	-1, 901,
	5, 1222,
	-2, 1991,
	-1, 902,
	5, 1223,
	-2, 1794,
	-1, 903,
	5, 1224,
	-2, 1795,
	-1, 904,
	5, 1225,
	-2, 1796,
	-1, 905,
	5, 1226,
	-2, 1960,
	-1, 906,
	5, 1227,
	-2, 1989,
	-1, 907,
	5, 1228,
	-2, 1772,
	-1, 908,
	5, 1229,
	-2, 1773,
	-1, 909,
	5, 1243,
	-2, 1972,
	-1, 911,
	5, 1218,
	-2, 1968,
	-1, 912,
	5, 1218,
	-2, 1967,
	-1, 913,
	5, 1218,
	-2, 1984,
	-1, 914,
	5, 1235,
	-2, 1962,
	-1, 915,
	5, 1236,
	-2, 1717,
	-1, 916,
	5, 1246,
	-2, 1961,
	-1, 917,
	5, 1248,
	-2, 2000,
	-1, 919,
	5, 1259,
	-2, 1746,
	-1, 920,
	5, 1270,
	-2, 1993,
	-1, 921,
	5, 1262,
	-2, 1994,
	-1, 922,
	5, 1270,
	-2, 1995,
	-1, 923,
	5, 1266,
	-2, 1996,
	-1, 924,
	5, 1186,
	-2, 1802,
	-1, 925,
	5, 1187,
	-2, 1803,
	-1, 926,
	459, 1680,
	-2, 1664,
	-1, 927,
	457, 2020,
	-2, 1681,
	-1, 947,
	5, 1254,
	-2, 1919,
	-1, 964,
	5, 1253,
	-2, 2001,
	-1, 974,
	5, 1255,
	423, 1255,
	-2, 1963,
	-1, 975,
	5, 1256,
	423, 1256,
	-2, 1964,
	-1, 1011,
	457, 1692,
	-2, 1683,
	-1, 1038,
	154, 1932,
	388, 1932,
	440, 1932,
	459, 1932,
	-2, 0,
	-1, 1041,
	1, 488,
	460, 488,
	-2, 955,
	-1, 1161,
	309, 1661,
	450, 1661,
	-2, 1660,
	-1, 1184,
	461, 1661,
	-2, 1662,
	-1, 1219,
	300, 730,
	422, 730,
	-2, 248,
	-1, 1239,
	280, 1052,
	-2, 863,
	-1, 1248,
	260, 1687,
	-2, 0,
	-1, 1312,
	1, 363,
	456, 363,
	458, 363,
	460, 363,
	-2, 1026,
	-1, 1315,
	4, 1999,
	11, 1999,
	12, 1999,
	14, 1999,
	15, 1999,
	16, 1999,
	17, 1999,
	18, 1999,
	19, 1999,
	21, 1999,
	22, 1999,
	23, 1999,
	24, 1999,
	25, 1999,
	27, 1999,
	30, 1999,
	31, 1999,
	33, 1999,
	35, 1999,
	38, 1999,
	39, 1999,
	40, 1999,
	41, 1999,
	42, 1999,
	43, 1999,
	44, 1999,
	45, 1999,
	46, 1999,
	47, 1999,
	48, 1999,
	49, 1999,
	51, 1999,
	52, 1999,
	53, 1999,
	54, 1999,
	55, 1999,
	56, 1999,
	59, 1999,
	60, 1999,
	61, 1999,
	62, 1999,
	64, 1999,
	65, 1999,
	66, 1999,
	69, 1999,
	70, 1999,
	71, 1999,
	72, 1999,
	73, 1999,
	74, 1999,
	75, 1999,
	76, 1999,
	77, 1999,
	78, 1999,
	79, 1999,
	81, 1999,
	82, 1999,
	83, 1999,
	84, 1999,
	85, 1999,
	87, 1999,
	88, 1999,
	89, 1999,
	97, 1999,
	98, 1999,
	99, 1999,
	100, 1999,
	101, 1999,
	102, 1999,
	103, 1999,
	104, 1999,
	106, 1999,
	108, 1999,
	109, 1999,
	111, 1999,
	114, 1999,
	115, 1999,
	116, 1999,
	118, 1999,
	120, 1999,
	121, 1999,
	123, 1999,
	124, 1999,
	125, 1999,
	126, 1999,
	127, 1999,
	128, 1999,
	129, 1999,
	130, 1999,
	131, 1999,
	132, 1999,
	133, 1999,
	134, 1999,
	135, 1999,
	139, 1999,
	140, 1999,
	141, 1999,
	142, 1999,
	143, 1999,
	144, 1999,
	145, 1999,
	146, 1999,
	147, 1999,
	148, 1999,
	149, 1999,
	150, 1999,
	152, 1999,
	155, 1999,
	156, 1999,
	157, 1999,
	159, 1999,
	160, 1999,
	162, 1999,
	163, 1999,
	165, 1999,
	166, 1999,
	167, 1999,
	168, 1999,
	169, 1999,
	170, 1999,
	171, 1999,
	172, 1999,
	173, 1999,
	174, 1999,
	175, 1999,
	176, 1999,
	177, 1999,
	178, 1999,
	179, 1999,
	180, 1999,
	181, 1999,
	183, 1999,
	184, 1999,
	185, 1999,
	187, 1999,
	188, 1999,
	189, 1999,
	190, 1999,
	191, 1999,
	192, 1999,
	193, 1999,
	194, 1999,
	195, 1999,
	197, 1999,
	199, 1999,
	200, 1999,
	201, 1999,
	202, 1999,
	203, 1999,
	204, 1999,
	205, 1999,
	206, 1999,
	207, 1999,
	208, 1999,
	209, 1999,
	210, 1999,
	211, 1999,
	212, 1999,
	213, 1999,
	214, 1999,
	216, 1999,
	217, 1999,
	219, 1999,
	220, 1999,
	221, 1999,
	222, 1999,
	223, 1999,
	224, 1999,
	226, 1999,
	227, 1999,
	230, 1999,
	231, 1999,
	232, 1999,
	233, 1999,
	234, 1999,
	235, 1999,
	236, 1999,
	237, 1999,
	238, 1999,
	239, 1999,
	240, 1999,
	241, 1999,
	242, 1999,
	243, 1999,
	244, 1999,
	245, 1999,
	246, 1999,
	247, 1999,
	250, 1999,
	252, 1999,
	253, 1999,
	254, 1999,
	255, 1999,
	257, 1999,
	258, 1999,
	259, 1999,
	262, 1999,
	263, 1999,
	264, 1999,
	265, 1999,
	267, 1999,
	268, 1999,
	269, 1999,
	271, 1999,
	273, 1999,
	274, 1999,
	275, 1999,
	276, 1999,
	277, 1999,
	278, 1999,
	279, 1999,
	280, 1999,
	281, 1999,
	282, 1999,
	284, 1999,
	285, 1999,
	286, 1999,
	287, 1999,
	288, 1999,
	289, 1999,
	291, 1999,
	293, 1999,
	294, 1999,
	295, 1999,
	296, 1999,
	297, 1999,
	298, 1999,
	299, 1999,
	300, 1999,
	301, 1999,
	303, 1999,
	304, 1999,
	305, 1999,
	306, 1999,
	307, 1999,
	308, 1999,
	309, 1999,
	310, 1999,
	311, 1999,
	312, 1999,
	313, 1999,
	314, 1999,
	315, 1999,
	316, 1999,
	318, 1999,
	319, 1999,
	320, 1999,
	321, 1999,
	322, 1999,
	323, 1999,
	324, 1999,
	325, 1999,
	326, 1999,
	327, 1999,
	328, 1999,
	329, 1999,
	330, 1999,
	331, 1999,
	332, 1999,
	333, 1999,
	334, 1999,
	336, 1999,
	337, 1999,
	338, 1999,
	339, 1999,
	340, 1999,
	341, 1999,
	342, 1999,
	343, 1999,
	344, 1999,
	345, 1999,
	347, 1999,
	348, 1999,
	349, 1999,
	350, 1999,
	351, 1999,
	352, 1999,
	353, 1999,
	354, 1999,
	355, 1999,
	356, 1999,
	358, 1999,
	359, 1999,
	360, 1999,
	361, 1999,
	362, 1999,
	363, 1999,
	364, 1999,
	365, 1999,
	366, 1999,
	367, 1999,
	368, 1999,
	369, 1999,
	371, 1999,
	372, 1999,
	373, 1999,
	375, 1999,
	376, 1999,
	377, 1999,
	378, 1999,
	379, 1999,
	380, 1999,
	381, 1999,
	383, 1999,
	384, 1999,
	385, 1999,
	386, 1999,
	387, 1999,
	389, 1999,
	391, 1999,
	392, 1999,
	393, 1999,
	394, 1999,
	395, 1999,
	397, 1999,
	398, 1999,
	399, 1999,
	401, 1999,
	402, 1999,
	405, 1999,
	406, 1999,
	407, 1999,
	408, 1999,
	409, 1999,
	410, 1999,
	412, 1999,
	414, 1999,
	415, 1999,
	416, 1999,
	417, 1999,
	418, 1999,
	419, 1999,
	420, 1999,
	422, 1999,
	423, 1999,
	424, 1999,
	429, 1999,
	430, 1999,
	431, 1999,
	432, 1999,
	433, 1999,
	434, 1999,
	435, 1999,
	436, 1999,
	438, 1999,
	439, 1999,
	440, 1999,
	441, 1999,
	442, 1999,
	443, 1999,
	445, 1999,
	446, 1999,
	447, 1999,
	448, 1999,
	449, 1999,
	450, 1999,
	451, 1999,
	452, 1999,
	453, 1999,
	455, 1999,
	458, 1999,
	459, 1999,
	461, 1999,
	462, 1999,
	-2, 0,
	-1, 1318,
	154, 1903,
	388, 1903,
	440, 1903,
	459, 1903,
	-2, 0,
	-1, 1347,
	294, 632,
	345, 632,
	-2, 0,
	-1, 1370,
	1, 627,
	456, 627,
	458, 627,
	460, 627,
	-2, 0,
	-1, 1371,
	1, 652,
	456, 652,
	458, 652,
	460, 652,
	-2, 0,
	-1, 1372,
	1, 634,
	456, 634,
	458, 634,
	460, 634,
	-2, 0,
	-1, 1374,
	1, 638,
	456, 638,
	458, 638,
	460, 638,
	-2, 0,
	-1, 1399,
	1, 1952,
	456, 1952,
	458, 1952,
	459, 1952,
	460, 1952,
	-2, 678,
	-1, 1400,
	1, 1901,
	456, 1901,
	458, 1901,
	459, 1901,
	460, 1901,
	-2, 679,
	-1, 1413,
	1, 950,
	460, 950,
	-2, 955,
	-1, 1418,
	138, 1064,
	225, 1064,
	256, 1064,
	-2, 1021,
	-1, 1514,
	122, 1028,
	138, 1028,
	196, 1028,
	225, 1028,
	256, 1028,
	266, 1028,
	403, 1028,
	-2, 1427,
	-1, 1567,
	458, 1565,
	-2, 0,
	-1, 1609,
	122, 1028,
	138, 1028,
	196, 1028,
	225, 1028,
	256, 1028,
	266, 1028,
	403, 1028,
	-2, 1136,
	-1, 1663,
	457, 1258,
	-2, 1246,
	-1, 1702,
	1, 490,
	460, 490,
	-2, 955,
	-1, 1899,
	1, 629,
	456, 629,
	458, 629,
	460, 629,
	-2, 0,
	-1, 1900,
	1, 654,
	456, 654,
	458, 654,
	460, 654,
	-2, 0,
	-1, 1984,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1307,
	-1, 1985,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1308,
	-1, 1986,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1309,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1310,
	-1, 1988,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1311,
	-1, 1989,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1312,
	-1, 1990,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1313,
	-1, 1991,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1314,
	-1, 2003,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1326,
	-1, 2004,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1327,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1328,
	-1, 2008,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1333,
	-1, 2014,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1337,
	-1, 2016,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1345,
	-1, 2017,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1346,
	-1, 2018,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1347,
	-1, 2019,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1348,
	-1, 2113,
	5, 1215,
	154, 1576,
	457, 1692,
	-2, 1683,
	-1, 2114,
	154, 1577,
	-2, 1956,
	-1, 2115,
	154, 1578,
	-2, 1823,
	-1, 2116,
	154, 1579,
	-2, 1747,
	-1, 2117,
	154, 1580,
	-2, 1783,
	-1, 2118,
	154, 1581,
	-2, 1821,
	-1, 2119,
	154, 1582,
	-2, 1894,
	-1, 2195,
	1, 1137,
	2, 1137,
	87, 1137,
	122, 1137,
	138, 1137,
	151, 1137,
	155, 1137,
	161, 1137,
	164, 1137,
	187, 1137,
	196, 1137,
	206, 1137,
	221, 1137,
	225, 1137,
	243, 1137,
	256, 1137,
	260, 1137,
	266, 1137,
	317, 1137,
	319, 1137,
	403, 1137,
	413, 1137,
	426, 1137,
	427, 1137,
	428, 1137,
	437, 1137,
	456, 1137,
	458, 1137,
	460, 1137,
	462, 1137,
	-2, 1136,
	-1, 2200,
	457, 1666,
	-2, 1678,
	-1, 2221,
	457, 1257,
	-2, 1247,
	-1, 2460,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1335,
	-1, 2461,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1339,
	-1, 2467,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1341,
	-1, 2647,
	203, 955,
	291, 955,
	298, 955,
	437, 955,
	-2, 487,
	-1, 2739,
	280, 1052,
	-2, 863,
	-1, 2820,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1343,
	-1, 2827,
	200, 0,
	202, 0,
	250, 0,
	-2, 1362,
	-1, 2890,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1391,
	-1, 2891,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1392,
	-1, 2892,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1393,
	-1, 2896,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1397,
	-1, 2897,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1398,
	-1, 2898,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1399,
	-1, 2941,
	457, 1667,
	-2, 1679,
	-1, 3030,
	459, 2102,
	-2, 998,
	-1, 3077,
	200, 0,
	202, 0,
	250, 0,
	-2, 1363,
	-1, 3080,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1366,
	-1, 3081,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1368,
	-1, 3239,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1367,
	-1, 3240,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1369,
	-1, 3250,
	200, 0,
	-2, 1400,
	-1, 3355,
	200, 0,
	-2, 1401,
	-1, 3471,
	43, 0,
	173, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1959,
}

const sqlPrivate = 57344

const sqlLast = 74579

var sqlAct = [...]int{

	896, 3280, 3183, 3470, 3565, 3307, 3283, 3480, 2352, 3555,
	2144, 3449, 3440, 3481, 3437, 3482, 3518, 3314, 1012, 3269,
	2726, 2858, 3424, 2961, 3063, 3359, 2250, 2361, 2353, 3207,
	3469, 3230, 1971, 3021, 1047, 3016, 3319, 3139, 2748, 213,
	825, 213, 213, 1633, 213, 213, 213, 213, 213, 1304,
	2755, 213, 2031, 2187, 1165, 1429, 3026, 2722, 3003, 586,
	2750, 1190, 565, 2962, 2393, 1750, 1634, 2664, 1066, 2349,
	2326, 1875, 3254, 2324, 2623, 2609, 2453, 213, 1604, 2395,
	1158, 586, 2329, 2596, 1004, 1602, 3062, 2569, 1354, 816,
	2308, 2403, 1854, 1833, 1836, 3111, 682, 1512, 2384, 2585,
	2386, 2392, 32, 2362, 1576, 1826, 1825, 2913, 2252, 2568,
	2309, 4, 1300, 2188, 2488, 1759, 2062, 3360, 1540, 2044,
	1522, 824, 141, 1968, 1964, 2449, 1777, 1788, 1177, 1784,
	2402, 892, 2327, 1735, 1054, 1737, 1413, 2628, 1577, 2162,
	2074, 2190, 2028, 2285, 86, 2724, 1287, 1167, 813, 1313,
	3308, 1297, 1822, 2355, 2141, 1233, 2242, 2056, 2082, 2396,
	587, 533, 588, 1174, 999, 978, 996, 1043, 2170, 2152,
	2109, 207, 2045, 1586, 1503, 1535, 213, 213, 1307, 1430,
	205, 1428, 519, 148, 549, 1821, 541, 677, 206, 582,
	1311, 1263, 2284, 1842, 559, 149, 658, 141, 627, 1749,
	852, 853, 1612, 1001, 1187, 536, 976, 544, 37, 36,
	918, 34, 25, 23, 21, 1412, 1434, 729, 745, 2930,
	1245, 2931, 1876, 2484, 1856, 2354, 1442, 1443, 3595, 1856,
	591, 1051, 2161, 3586, 3585, 1051, 3564, 2161, 2161, 1856,
	1793, 3547, 820, 2765, 3545, 3153, 1473, 594, 3153, 2645,
	3504, 3502, 591, 1445, 3505, 2161, 2408, 820, 3500, 3497,
	2916, 2764, 2161, 3498, 815, 2154, 2161, 3494, 3491, 594,
	692, 3495, 1793, 3467, 3466, 3465, 1028, 1793, 1793, 1868,
	1513, 1444, 3462, 3461, 3419, 3409, 1868, 1868, 2214, 3153,
	1464, 3420, 3408, 3402, 3396, 821, 3153, 1793, 3153, 3394,
	3357, 3343, 3340, 3153, 2214, 1373, 1793, 3337, 3297, 3296,
	3289, 3153, 1793, 1793, 1793, 3288, 1868, 979, 979, 3153,
	1208, 2916, 3260, 3241, 3228, 801, 1793, 2214, 1868, 3219,
	3180, 3170, 1023, 2777, 2161, 2161, 3073, 800, 3152, 3079,
	3038, 3032, 3153, 2214, 2793, 2793, 3001, 2936, 1202, 2926,
	3002, 2937, 2153, 2927, 1467, 1468, 1469, 1470, 2919, 2851,
	3171, 1793, 2161, 1793, 1450, 808, 2839, 2792, 2784, 2717,
	2161, 2793, 2785, 1868, 2582, 2580, 2579, 2533, 2161, 2161,
	2161, 2161, 2059, 980, 2516, 2505, 993, 2503, 2517, 2161,
	2382, 2210, 2785, 2504, 1872, 1472, 1474, 2227, 2213, 2186,
	2208, 2161, 2214, 75, 2161, 2202, 1024, 2541, 2542, 1793,
	2559, 2560, 2561, 2160, 1871, 2299, 2241, 2161, 1872, 982,
	1708, 983, 1754, 2777, 2336, 1793, 3075, 2452, 1792, 2239,
	1572, 1186, 1603, 2988, 181, 2815, 1442, 1443, 2161, 2802,
	1787, 2766, 1485, 1486, 1487, 1356, 2181, 1465, 2060, 2180,
	2179, 3487, 2178, 2487, 2177, 984, 1473, 2541, 2542, 981,
	2767, 3468, 807, 1445, 181, 2541, 2542, 806, 1491, 805,
	804, 2556, 803, 183, 799, 798, 2432, 2100, 797, 796,
	795, 794, 793, 1857, 792, 791, 790, 1207, 1857, 1442,
	1443, 1444, 1475, 1476, 1477, 1485, 1486, 1487, 1857, 789,
	1464, 788, 787, 183, 727, 2541, 2542, 726, 725, 1473,
	1728, 724, 723, 722, 721, 1201, 1445, 182, 2061, 2058,
	720, 1491, 719, 1471, 213, 718, 717, 175, 716, 715,
	714, 713, 712, 711, 710, 176, 709, 708, 707, 706,
	705, 1466, 704, 703, 1444, 2547, 702, 182, 701, 3390,
	691, 2764, 213, 1464, 690, 3128, 150, 1024, 649, 213,
	1461, 648, 607, 606, 1467, 1468, 1469, 1470, 605, 597,
	596, 1513, 595, 2153, 1450, 213, 1069, 213, 213, 1170,
	213, 1069, 213, 572, 1024, 571, 150, 570, 569, 3090,
	213, 213, 553, 203, 202, 2547, 2562, 201, 1482, 200,
	199, 1492, 198, 2547, 1053, 1472, 1474, 181, 1058, 197,
	196, 195, 194, 193, 2063, 213, 192, 1467, 1468, 1469,
	1470, 191, 190, 117, 189, 188, 187, 1450, 2557, 213,
	1864, 1170, 1170, 213, 213, 1855, 213, 186, 181, 2358,
	185, 184, 3350, 2547, 2934, 1943, 183, 2794, 213, 1480,
	2626, 1482, 2510, 181, 1492, 2499, 213, 1465, 1472, 1474,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 2314,
	213, 213, 213, 213, 213, 1170, 1170, 183, 2557, 2203,
	1170, 181, 213, 1170, 213, 213, 2557, 1459, 1460, 1605,
	182, 2194, 183, 1733, 1180, 2098, 1619, 1041, 213, 1878,
	175, 1529, 1480, 1195, 1192, 1200, 2342, 1206, 176, 1060,
	1465, 1441, 3346, 2057, 2096, 2094, 895, 2092, 1442, 1443,
	183, 182, 2558, 1014, 1524, 1308, 2557, 3220, 1375, 150,
	3344, 175, 3132, 1471, 1170, 3279, 182, 2219, 1473, 176,
	3215, 1062, 3110, 1155, 1160, 1445, 175, 3109, 3097, 1543,
	1189, 1466, 1188, 1036, 176, 1542, 213, 1163, 1161, 3096,
	150, 591, 1184, 3095, 182, 3094, 3088, 1877, 3087, 213,
	3086, 3000, 2558, 1444, 175, 150, 1546, 1483, 594, 1543,
	2558, 2950, 176, 2949, 213, 1542, 1471, 2947, 2940, 2910,
	2909, 1324, 1316, 2908, 1328, 2835, 2831, 2788, 1327, 1250,
	2621, 2576, 141, 150, 1466, 2986, 1541, 1830, 2567, 1239,
	1242, 2540, 2537, 1246, 1246, 2536, 2534, 1291, 1294, 2523,
	2558, 2522, 2521, 2518, 821, 2515, 2493, 1314, 2492, 2485,
	1483, 2541, 2542, 2383, 2553, 2554, 2555, 1301, 2195, 1383,
	2067, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549,
	1374, 1441, 1798, 1184, 1247, 1525, 1450, 1523, 1796, 1524,
	1481, 1320, 992, 2541, 2542, 1440, 3593, 3563, 1484, 181,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 3562,
	3503, 1013, 2343, 1511, 2860, 3457, 3455, 1472, 1474, 3387,
	1419, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549,
	1007, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 183, 3384,
	3381, 1196, 1340, 1481, 3380, 1418, 1456, 1457, 1463, 1462,
	1458, 1484, 3379, 1455, 1453, 1454, 1446, 1447, 1448, 1449,
	1451, 1452, 3362, 2099, 3375, 1411, 3369, 3214, 3341, 1465,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 1333, 1417,
	1729, 2286, 182, 3336, 1348, 3335, 2034, 3275, 3252, 2448,
	3225, 3224, 175, 2304, 1427, 2271, 3205, 3202, 1416, 2547,
	176, 3196, 3127, 3108, 3052, 1067, 823, 3049, 213, 2977,
	1178, 2976, 2965, 2964, 2541, 2542, 2922, 2826, 2795, 2778,
	1414, 2357, 2040, 2742, 2711, 2689, 2667, 2666, 1574, 1442,
	1443, 2547, 1583, 2641, 213, 821, 2639, 2581, 801, 2514,
	2513, 2498, 2476, 2323, 213, 1069, 213, 213, 213, 1473,
	800, 2602, 1547, 586, 213, 213, 1445, 1420, 586, 213,
	1628, 1544, 1536, 1466, 213, 1437, 1438, 1533, 2541, 2542,
	1170, 1545, 2223, 2341, 2222, 2198, 1700, 2175, 2159, 1442,
	1443, 2090, 2557, 1507, 1444, 1618, 1575, 1571, 1570, 1569,
	1568, 1069, 1567, 1464, 1566, 1565, 1564, 1563, 1561, 1560,
	1879, 1559, 2667, 1558, 1557, 1621, 1445, 1556, 1555, 181,
	1613, 181, 1554, 1553, 1552, 1630, 1442, 1443, 1537, 1538,
	1697, 1580, 1581, 1593, 1705, 1731, 1699, 1551, 1598, 1550,
	1549, 1526, 2556, 1508, 1444, 851, 1473, 1506, 1501, 2824,
	1035, 1026, 1019, 1445, 3201, 3129, 3083, 141, 183, 979,
	183, 2946, 2547, 1442, 1443, 2929, 2925, 1467, 1468, 1469,
	1470, 2502, 2216, 2176, 3264, 835, 3131, 1450, 2541, 2542,
	2945, 1444, 1525, 3347, 868, 821, 2558, 2637, 1728, 1625,
	1445, 2097, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 3345, 182, 1504, 182, 1610, 1614, 3173, 1472, 1474,
	2095, 2093, 175, 2091, 175, 1702, 2547, 3382, 1444, 1623,
	176, 2751, 176, 1728, 1573, 1556, 1170, 213, 3218, 1057,
	3278, 1556, 3172, 1069, 591, 1055, 1727, 1728, 2932, 591,
	2780, 150, 1607, 150, 1601, 1600, 2779, 1599, 1597, 1596,
	1595, 594, 1629, 1743, 3011, 3320, 594, 1696, 1051, 1543,
	1465, 1442, 1443, 1051, 1450, 1542, 2288, 894, 1640, 1831,
	1631, 1605, 213, 213, 2520, 2975, 2519, 1665, 1409, 213,
	1774, 1056, 1347, 1776, 181, 2458, 1781, 2273, 1445, 213,
	1052, 785, 1384, 1720, 1724, 1472, 1474, 1531, 213, 2557,
	213, 1450, 213, 1051, 2692, 2728, 213, 2727, 2543, 2544,
	2545, 2546, 2548, 2549, 1876, 1714, 1444, 1355, 213, 3315,
	3566, 1356, 1048, 183, 1827, 2992, 2979, 2508, 2354, 2800,
	786, 1758, 2705, 1772, 3255, 1703, 1471, 2862, 2075, 2221,
	2543, 2544, 2545, 2546, 2548, 2549, 1562, 1465, 1539, 181,
	2720, 3488, 1818, 1814, 1466, 1223, 3499, 991, 1170, 213,
	1170, 3496, 2760, 213, 3434, 2957, 1170, 182, 1010, 1170,
	213, 1785, 213, 213, 3017, 1510, 2390, 175, 3533, 2445,
	3534, 3401, 1170, 1170, 1170, 176, 213, 1189, 183, 1188,
	2649, 213, 1848, 2558, 1042, 1754, 1839, 1337, 591, 1450,
	586, 213, 3163, 213, 1789, 213, 150, 213, 3489, 213,
	1049, 2254, 644, 1442, 1443, 594, 1211, 1050, 2228, 1221,
	1780, 1931, 779, 213, 1859, 3590, 213, 1861, 213, 781,
	1863, 1791, 182, 1473, 1866, 777, 775, 213, 3306, 3299,
	1445, 1466, 175, 1929, 1382, 766, 772, 1846, 1895, 2994,
	176, 1006, 2990, 1817, 1622, 2651, 213, 1808, 1807, 1881,
	2989, 2954, 213, 2545, 2546, 2548, 2549, 1381, 1444, 1057,
	1426, 150, 2953, 1455, 1453, 1454, 1446, 1447, 1448, 1449,
	1451, 1452, 2497, 1719, 1718, 1069, 1715, 1728, 1725, 1841,
	1222, 645, 2496, 1883, 2638, 1844, 2495, 2494, 2462, 2306,
	1734, 2257, 821, 761, 1424, 1314, 2298, 2350, 2295, 1806,
	639, 2276, 2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548,
	2549, 1056, 819, 2209, 1947, 812, 1952, 2015, 1415, 1185,
	2086, 1452, 2085, 1973, 2801, 1886, 1048, 1738, 1874, 1941,
	3400, 1739, 1890, 1942, 1789, 2059, 1335, 1884, 1873, 1969,
	1970, 1450, 1380, 1036, 2235, 1885, 1051, 2245, 2046, 2047,
	1892, 1893, 1894, 1446, 1447, 1448, 1449, 1451, 1452, 2243,
	1069, 591, 1256, 2245, 1255, 2201, 2046, 2072, 2264, 3550,
	638, 1057, 1472, 1474, 1722, 2243, 2030, 3558, 594, 1911,
	1254, 1234, 1253, 2217, 3236, 1048, 818, 1949, 762, 1275,
	1446, 1447, 1448, 1449, 1451, 1452, 2691, 1945, 2292, 1425,
	2967, 2060, 2108, 213, 2112, 2112, 2125, 1950, 2046, 3285,
	2549, 2145, 2147, 1898, 1049, 3159, 2151, 1232, 1729, 2286,
	1740, 1050, 1794, 1056, 1465, 2075, 3459, 769, 2256, 3485,
	1944, 1946, 1422, 1742, 1069, 213, 1751, 1330, 2263, 1951,
	2275, 3551, 1349, 2030, 213, 3174, 850, 213, 801, 1217,
	1069, 801, 801, 1729, 2286, 1231, 820, 1423, 1940, 2199,
	1960, 1845, 1346, 1961, 1962, 1747, 1666, 1729, 2286, 3533,
	1904, 2061, 2058, 1049, 1640, 1640, 2071, 2804, 2803, 1034,
	1050, 821, 531, 1665, 1665, 2429, 1752, 1753, 1744, 2063,
	1448, 1449, 1451, 1452, 821, 1899, 1723, 2196, 821, 1370,
	1408, 647, 646, 2845, 2450, 2451, 526, 2042, 1356, 1017,
	2648, 2182, 2207, 1760, 1748, 2192, 2193, 3417, 1466, 637,
	1379, 636, 699, 1394, 2183, 3553, 1219, 2231, 2069, 213,
	2084, 763, 1764, 1356, 1331, 2088, 2089, 1170, 3570, 2233,
	1015, 1939, 2255, 3523, 979, 1007, 1900, 1007, 2038, 640,
	1371, 3486, 2757, 1905, 2036, 1738, 2166, 1614, 3157, 1739,
	1051, 2702, 2697, 3580, 1069, 2120, 3556, 2063, 2149, 213,
	2136, 2234, 2758, 1856, 2211, 1761, 3235, 213, 819, 1738,
	2157, 2158, 1745, 1739, 141, 2232, 821, 1754, 213, 2172,
	2173, 1705, 2168, 817, 1745, 1771, 1756, 1234, 1336, 2063,
	1930, 213, 773, 3376, 1170, 783, 1610, 814, 3192, 782,
	676, 2650, 2635, 2685, 1534, 773, 774, 213, 1069, 1051,
	2167, 1170, 1928, 213, 213, 2714, 773, 3484, 2218, 2757,
	1008, 2968, 2274, 2246, 573, 764, 3557, 1545, 1453, 1454,
	1446, 1447, 1448, 1449, 1451, 1452, 2991, 2338, 1740, 213,
	3415, 213, 818, 2310, 213, 1765, 2296, 2279, 1745, 3064,
	1334, 1742, 761, 3552, 2226, 1274, 2057, 2978, 3559, 213,
	2311, 3246, 1740, 765, 1972, 3540, 213, 3158, 213, 3416,
	213, 2293, 2270, 2244, 812, 1742, 213, 1537, 1538, 213,
	2225, 213, 3286, 213, 2842, 213, 213, 3445, 213, 1170,
	1170, 1170, 2365, 1170, 2278, 2229, 2066, 213, 213, 2464,
	213, 213, 2333, 2303, 1766, 1767, 1744, 1729, 1726, 2127,
	1741, 213, 820, 1762, 1391, 1216, 2258, 2260, 2249, 2307,
	2316, 579, 2318, 1938, 213, 213, 213, 2404, 3386, 213,
	1744, 213, 2026, 2266, 213, 1903, 213, 2407, 213, 2378,
	2379, 2310, 1763, 2310, 2277, 2012, 3522, 762, 1500, 2076,
	1897, 3193, 2347, 2512, 2843, 527, 2024, 2294, 2171, 213,
	213, 213, 213, 2681, 213, 2356, 2029, 2356, 1421, 1754,
	3571, 1161, 2297, 1189, 2406, 2312, 2409, 2410, 2287, 2289,
	2290, 2291, 1640, 2321, 591, 700, 2683, 1184, 213, 770,
	2422, 1665, 2423, 2191, 2389, 1585, 2337, 2374, 1345, 1332,
	1745, 594, 1392, 2380, 581, 1016, 3150, 528, 1775, 2367,
	2435, 2417, 3581, 141, 211, 1033, 1516, 2411, 2360, 2412,
	1521, 2679, 1857, 820, 1745, 2371, 3200, 2372, 1768, 2373,
	2942, 2654, 3058, 2682, 3147, 3232, 1585, 2375, 2420, 2200,
	1314, 2433, 2381, 1029, 3067, 2391, 529, 2427, 530, 817,
	2063, 2376, 1358, 3483, 3532, 1736, 3005, 3530, 829, 1589,
	2020, 3325, 3204, 1589, 2678, 1184, 1184, 2377, 2021, 2037,
	2746, 2022, 2440, 1393, 2027, 2010, 3148, 2345, 2013, 1820,
	1432, 2490, 2491, 3521, 1582, 1027, 2465, 213, 2419, 2473,
	763, 1592, 1769, 2438, 1022, 1592, 2500, 2424, 518, 2425,
	575, 2426, 1433, 3065, 1589, 2899, 1184, 1755, 3106, 1716,
	2169, 3575, 2629, 2471, 1587, 2444, 3291, 3290, 580, 2447,
	3273, 3366, 2956, 598, 2441, 1590, 2009, 3162, 1713, 1590,
	2443, 2747, 2662, 1500, 3161, 2658, 1592, 3231, 1741, 3388,
	1184, 2346, 2328, 2325, 1840, 1829, 1828, 1802, 2501, 2841,
	3425, 1588, 1637, 2240, 1956, 1587, 2163, 2486, 577, 1935,
	1709, 3022, 1741, 1010, 1432, 1010, 839, 1431, 2598, 1745,
	1590, 2322, 3208, 1277, 2578, 2463, 1069, 3313, 3311, 3274,
	2669, 2583, 1626, 2280, 2668, 2456, 2590, 2591, 1891, 2437,
	2592, 1948, 1588, 1711, 764, 213, 574, 696, 1433, 821,
	1783, 2924, 1372, 213, 689, 2595, 2594, 2434, 2206, 1712,
	213, 2205, 2204, 213, 213, 1069, 2023, 2468, 1248, 3143,
	1782, 2165, 3144, 1591, 1069, 2025, 2164, 1591, 2469, 2616,
	213, 2474, 765, 578, 2507, 1249, 1262, 3233, 1260, 818,
	2335, 2900, 698, 3371, 576, 213, 1006, 2901, 1006, 1778,
	3107, 1431, 3184, 1957, 2011, 3281, 2606, 3574, 2789, 1838,
	2716, 3146, 2914, 213, 213, 213, 2617, 2618, 1591, 213,
	1752, 1753, 213, 3149, 3537, 2605, 3309, 3160, 3112, 213,
	213, 213, 213, 213, 2080, 2436, 3389, 2646, 3428, 2655,
	2656, 2633, 1406, 2604, 2620, 213, 213, 213, 1779, 3372,
	2652, 2636, 2607, 2624, 213, 2670, 2644, 2673, 2601, 2625,
	1359, 3539, 2584, 2573, 2574, 2575, 213, 1170, 3501, 213,
	3271, 2597, 2281, 2282, 1007, 599, 600, 1069, 2599, 3383,
	3251, 2611, 3105, 2659, 3282, 1069, 2996, 2663, 1388, 1386,
	213, 1369, 1367, 213, 213, 1365, 1363, 2671, 1007, 2675,
	2676, 2615, 3272, 213, 3429, 1361, 1170, 213, 2630, 1170,
	1170, 1170, 2570, 2631, 2632, 3373, 213, 1353, 2731, 2825,
	2725, 1351, 213, 2470, 2798, 3145, 1258, 2587, 213, 2696,
	213, 2535, 2472, 2475, 2332, 2647, 2305, 213, 2571, 2272,
	2686, 2687, 2600, 2224, 2688, 1620, 2703, 2653, 1617, 694,
	695, 2642, 2643, 1407, 2404, 2612, 687, 688, 2694, 1325,
	1170, 1170, 1743, 2404, 814, 602, 601, 2712, 213, 213,
	2684, 1927, 213, 2708, 2709, 2431, 2735, 2710, 2690, 1170,
	2430, 2762, 1261, 2414, 1259, 2698, 1640, 1743, 697, 1937,
	1908, 3479, 1698, 1548, 1405, 1665, 2701, 2610, 1329, 2707,
	1238, 2079, 3179, 213, 2713, 1069, 213, 213, 1069, 213,
	3169, 3519, 2753, 2278, 771, 603, 604, 2614, 1627, 3422,
	1785, 3136, 1640, 3020, 2973, 2776, 1184, 213, 1785, 2971,
	2955, 1665, 2706, 2745, 2770, 2771, 2772, 2730, 2773, 2774,
	1387, 1385, 2729, 1368, 1366, 2704, 1817, 1364, 1362, 2796,
	2351, 2699, 2340, 2339, 926, 2700, 2319, 1360, 2759, 1870,
	1584, 1869, 2787, 1867, 2775, 1865, 2791, 2768, 1862, 1352,
	1069, 2761, 821, 1350, 141, 1860, 2809, 1858, 1257, 1849,
	1799, 1069, 1797, 213, 2736, 2752, 1786, 2738, 2739, 2740,
	2828, 2613, 1773, 209, 1770, 521, 522, 1757, 537, 521,
	537, 547, 552, 1746, 2853, 568, 2797, 2749, 3329, 3534,
	988, 3451, 1435, 209, 2454, 3227, 3222, 3221, 1637, 1637,
	1926, 2810, 2405, 1732, 1213, 2589, 3331, 2262, 839, 2245,
	3031, 686, 839, 2806, 989, 209, 776, 778, 2782, 2783,
	1153, 2243, 2811, 2245, 2245, 1153, 1754, 2813, 1901, 2837,
	2838, 1906, 3352, 1403, 1404, 2261, 2259, 1789, 2911, 1925,
	3378, 1924, 1969, 2869, 2619, 3113, 1442, 1443, 2283, 2807,
	810, 2265, 761, 2627, 2833, 1439, 213, 532, 1969, 2879,
	2302, 1706, 2844, 2846, 2847, 1008, 2300, 1008, 2455, 1184,
	2310, 213, 2301, 1445, 812, 2852, 2269, 1069, 1436, 2863,
	2859, 1442, 1443, 2267, 2933, 2634, 2039, 2865, 2268, 2907,
	3421, 2866, 827, 3391, 3009, 3004, 213, 2939, 2876, 2868,
	990, 1444, 2359, 543, 2150, 1516, 2903, 1701, 1632, 2928,
	521, 521, 811, 3554, 3573, 2878, 2541, 2542, 209, 1442,
	1443, 2237, 2236, 3393, 1339, 1513, 2864, 2083, 1640, 2904,
	1338, 2944, 2848, 2237, 2640, 2238, 1444, 1665, 2087, 2081,
	2054, 1390, 213, 2912, 1389, 3084, 2915, 762, 2917, 2918,
	2980, 2943, 2132, 141, 2840, 1511, 1509, 2951, 3582, 3363,
	3303, 3265, 3263, 3195, 2627, 3130, 3055, 3048, 3037, 3015,
	2999, 2998, 2993, 2997, 2970, 2769, 2743, 1640, 1640, 213,
	213, 213, 1010, 2741, 2935, 2416, 1665, 1665, 2415, 2369,
	2344, 2320, 2041, 1640, 1640, 1923, 1069, 213, 1922, 1921,
	1920, 1170, 1665, 1665, 2984, 1852, 1010, 1851, 1850, 2985,
	2987, 1832, 1810, 1809, 1805, 213, 2972, 3012, 2974, 1804,
	1803, 1801, 3033, 2959, 1640, 1800, 1402, 1401, 213, 213,
	1170, 1170, 1170, 1665, 213, 213, 213, 2995, 1286, 213,
	213, 2365, 2663, 213, 213, 1285, 1170, 2920, 2921, 1284,
	2948, 1283, 213, 1069, 1282, 3024, 1281, 3028, 1280, 3027,
	3023, 3008, 1279, 1278, 1276, 1006, 1069, 2278, 1271, 1270,
	2404, 1269, 1268, 1267, 1230, 1229, 1228, 1227, 1226, 1225,
	1224, 1218, 3013, 1212, 1178, 1210, 3018, 1067, 1209, 1006,
	763, 1032, 1031, 3082, 963, 3056, 3014, 873, 1707, 784,
	631, 768, 3284, 1396, 3044, 73, 1220, 618, 3025, 67,
	2969, 213, 3029, 3433, 2677, 3035, 1637, 1907, 3034, 1357,
	3078, 1007, 1909, 2603, 2174, 3414, 3091, 3040, 3039, 2511,
	3045, 3046, 3050, 3358, 3051, 3054, 1007, 3047, 3245, 3053,
	2078, 3069, 1530, 69, 3061, 861, 946, 3066, 3191, 2850,
	3190, 3057, 3137, 2958, 2394, 3188, 3070, 3187, 828, 1072,
	2856, 1817, 1717, 867, 1730, 1007, 2220, 2111, 1636, 870,
	1638, 872, 871, 213, 1639, 1532, 869, 1640, 1635, 2334,
	2363, 1265, 749, 1069, 1721, 1069, 1665, 2035, 2073, 2506,
	1527, 841, 809, 863, 764, 2070, 1025, 840, 2608, 2756,
	2938, 3213, 1955, 2446, 213, 213, 213, 634, 3041, 3042,
	3043, 2538, 2055, 1018, 3104, 2133, 213, 2126, 2587, 2122,
	1410, 1502, 213, 2364, 213, 1059, 844, 213, 213, 213,
	3133, 3134, 765, 2033, 3118, 1518, 2480, 2763, 3155, 1069,
	213, 213, 1170, 2622, 2215, 1069, 3448, 1170, 3164, 1963,
	1819, 987, 986, 213, 985, 3117, 3122, 3439, 1020, 1153,
	3436, 3120, 3126, 3115, 3116, 2723, 1710, 2230, 213, 1494,
	3135, 1069, 2624, 3123, 1170, 3121, 2941, 3156, 1640, 3185,
	2732, 857, 1183, 2588, 2790, 1235, 1030, 1665, 3166, 3167,
	3154, 3165, 3377, 568, 1493, 780, 3182, 3368, 1046, 839,
	1045, 1044, 2661, 213, 827, 1153, 3579, 2966, 827, 209,
	180, 209, 209, 177, 1175, 1069, 209, 179, 178, 2982,
	2715, 3177, 3176, 3223, 209, 1191, 90, 3212, 3210, 3198,
	35, 3197, 3186, 3209, 16, 3181, 116, 115, 114, 113,
	1193, 1069, 1197, 112, 1203, 3211, 111, 110, 109, 1215,
	108, 107, 106, 105, 104, 103, 102, 3194, 101, 100,
	99, 3206, 3199, 1237, 3226, 98, 97, 209, 209, 3114,
	1175, 96, 95, 3217, 3257, 94, 93, 3119, 92, 1069,
	91, 564, 209, 3234, 561, 3216, 49, 213, 48, 213,
	1273, 1069, 213, 89, 88, 15, 33, 3237, 13, 53,
	213, 54, 3253, 12, 209, 209, 209, 209, 1175, 1882,
	28, 29, 79, 78, 2132, 2132, 568, 27, 209, 209,
	3178, 1817, 213, 3268, 14, 3242, 26, 24, 1323, 10,
	8, 7, 686, 30, 1594, 1326, 11, 1153, 3258, 3259,
	146, 145, 72, 213, 144, 71, 143, 213, 142, 3261,
	70, 3266, 22, 9, 1008, 213, 3267, 138, 3318, 3010,
	1170, 66, 3312, 3302, 140, 213, 139, 3287, 3317, 63,
	137, 136, 3262, 2725, 64, 135, 3322, 134, 1008, 3324,
	3293, 65, 133, 20, 3300, 3321, 213, 213, 5, 1376,
	209, 3304, 52, 6, 3310, 3229, 2799, 83, 3338, 3339,
	3328, 84, 31, 209, 3316, 61, 213, 3294, 3295, 60,
	59, 19, 213, 51, 3327, 2132, 2132, 2132, 552, 3326,
	18, 3333, 213, 3027, 3332, 170, 3330, 169, 168, 167,
	162, 161, 166, 164, 163, 165, 3374, 160, 132, 172,
	171, 3365, 3334, 174, 158, 154, 3356, 153, 157, 1010,
	3342, 159, 156, 155, 152, 3364, 173, 131, 130, 56,
	1640, 1007, 1007, 129, 1010, 3361, 128, 127, 126, 1665,
	1637, 1495, 1496, 1497, 1498, 1499, 213, 1170, 3385, 125,
	55, 17, 213, 2, 3125, 3351, 1170, 1170, 1, 0,
	0, 0, 1170, 1010, 3407, 0, 213, 0, 213, 3349,
	0, 1515, 0, 3321, 0, 3392, 1637, 1528, 0, 3395,
	0, 0, 3399, 3418, 0, 1640, 0, 0, 0, 0,
	213, 0, 0, 0, 1665, 3411, 213, 213, 0, 1069,
	3430, 3398, 1006, 3404, 0, 3405, 3406, 213, 213, 0,
	0, 3410, 3442, 3452, 0, 3446, 0, 1006, 0, 3403,
	0, 3454, 0, 3456, 3438, 3441, 0, 3412, 0, 3413,
	3463, 3435, 0, 0, 3450, 3464, 0, 1184, 0, 0,
	0, 213, 0, 3443, 0, 0, 1006, 0, 1626, 3458,
	0, 3460, 3490, 0, 0, 0, 0, 3431, 0, 1153,
	0, 0, 0, 3478, 0, 0, 3477, 3475, 3476, 0,
	0, 3492, 0, 0, 1640, 0, 0, 3508, 3506, 3510,
	213, 0, 521, 1665, 1067, 0, 0, 3516, 0, 3515,
	0, 3507, 1959, 0, 0, 3520, 1578, 1578, 1578, 3509,
	213, 3511, 1007, 209, 0, 209, 2365, 3512, 209, 0,
	3243, 0, 3526, 3527, 3453, 0, 3531, 3529, 1191, 3528,
	1175, 209, 0, 0, 213, 0, 213, 209, 1191, 537,
	3536, 3538, 209, 1191, 3544, 3535, 3546, 3542, 568, 0,
	3438, 3548, 3549, 3441, 1153, 0, 0, 3543, 3243, 0,
	0, 0, 3450, 3513, 3514, 0, 0, 3517, 0, 0,
	1972, 0, 0, 3561, 3560, 827, 0, 0, 0, 0,
	0, 3568, 3567, 0, 3569, 0, 0, 3150, 3572, 0,
	0, 0, 0, 3576, 0, 3541, 0, 0, 0, 0,
	3583, 0, 3584, 3577, 3578, 0, 0, 0, 0, 0,
	0, 0, 1637, 0, 0, 3147, 0, 0, 3140, 3587,
	3588, 3589, 3591, 3592, 0, 0, 0, 0, 1153, 2132,
	2132, 3596, 3138, 0, 3594, 2128, 0, 0, 3142, 0,
	0, 0, 0, 0, 1153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3148, 0, 0,
	0, 1637, 1637, 1007, 0, 0, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 1637, 1637, 0,
	0, 0, 0, 0, 1007, 0, 0, 0, 0, 3141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 1637, 2132,
	2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132,
	2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 0, 2132,
	2541, 2542, 0, 2559, 2560, 2561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 0, 3074,
	0, 0, 0, 209, 0, 0, 0, 0, 1153, 0,
	0, 0, 0, 1837, 0, 0, 0, 0, 0, 1010,
	1010, 0, 209, 0, 209, 0, 209, 0, 0, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1853, 0, 2556, 1442, 1443, 0, 0, 0,
	3143, 1008, 0, 3144, 0, 0, 0, 0, 1972, 0,
	0, 0, 1153, 0, 0, 1473, 1008, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 686, 0, 0,
	0, 0, 3146, 0, 209, 1008, 1175, 209, 0, 0,
	1444, 0, 1006, 1006, 3149, 0, 0, 0, 0, 1464,
	568, 1637, 0, 0, 0, 209, 0, 0, 2547, 0,
	0, 0, 0, 0, 209, 209, 0, 209, 0, 209,
	0, 209, 0, 209, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1932, 0, 0,
	1933, 0, 1934, 0, 0, 2819, 1473, 0, 0, 0,
	0, 209, 0, 1445, 0, 0, 0, 0, 0, 2562,
	0, 0, 0, 1467, 1468, 1469, 1470, 0, 0, 0,
	552, 0, 0, 1450, 0, 0, 568, 0, 0, 0,
	1010, 1444, 0, 0, 0, 0, 0, 0, 2477, 2478,
	0, 2557, 1954, 0, 1958, 0, 3145, 0, 0, 0,
	1965, 0, 1637, 0, 1472, 1474, 0, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 0, 2014, 0, 2016, 2017, 2018, 2019, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1006, 1450, 2043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 2068, 2558, 0, 0, 0, 2564,
	2565, 2566, 0, 0, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2541, 2542, 0, 2559,
	2560, 2561, 0, 0, 0, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 0, 0, 0, 2830, 2124, 521, 2135, 2137,
	2142, 1010, 1471, 0, 0, 0, 0, 2128, 2128, 1010,
	0, 0, 209, 0, 0, 0, 0, 1465, 0, 0,
	1466, 0, 1010, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 0, 0, 209, 0, 521, 0,
	2556, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2553, 2554, 2555,
	0, 0, 0, 0, 2552, 2550, 2551, 2543, 2544, 2545,
	2546, 2548, 2549, 0, 1006, 0, 0, 0, 0, 0,
	1153, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 0, 2128, 2128,
	2128, 1466, 0, 0, 2547, 0, 2541, 2542, 0, 2559,
	2560, 2561, 0, 537, 0, 0, 0, 0, 0, 1153,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 1455,
	1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0,
	0, 1008, 1008, 0, 1637, 0, 0, 0, 0, 0,
	0, 839, 0, 2253, 0, 2562, 0, 0, 0, 0,
	0, 209, 0, 0, 839, 0, 0, 0, 0, 0,
	2556, 2132, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 2557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1637,
	0, 209, 0, 0, 0, 0, 0, 209, 2313, 0,
	0, 0, 0, 0, 2132, 0, 0, 2315, 0, 2317,
	0, 0, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0,
	0, 1153, 0, 209, 0, 1191, 0, 0, 209, 1153,
	0, 0, 0, 0, 2547, 0, 0, 0, 0, 0,
	0, 0, 0, 1837, 0, 0, 0, 0, 1442, 1443,
	2253, 0, 521, 0, 2368, 0, 0, 0, 0, 0,
	209, 0, 0, 209, 0, 209, 0, 209, 1473, 209,
	209, 2558, 1175, 2821, 2822, 1445, 0, 0, 1637, 0,
	0, 2387, 686, 0, 2253, 2253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 1008, 1444, 0, 0, 0, 2132, 209, 1175,
	209, 0, 1464, 1191, 0, 1191, 0, 2557, 1175, 0,
	1175, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2428, 0, 0, 0,
	0, 0, 0, 209, 209, 1175, 209, 0, 209, 1153,
	0, 0, 1153, 2880, 2881, 2882, 2883, 2884, 2885, 2886,
	2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896,
	2897, 2898, 209, 2902, 0, 0, 1467, 1468, 1469, 1470,
	0, 0, 0, 2553, 2554, 2555, 1450, 0, 0, 0,
	2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2558, 0, 0, 1153, 0, 0, 1472, 1474, 0,
	2460, 2461, 2128, 2128, 0, 1153, 2467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2481, 2482, 0, 0, 0,
	0, 2068, 0, 1008, 0, 0, 0, 0, 0, 0,
	2489, 1008, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1191, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2524, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128,
	2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128,
	2128, 0, 2128, 2553, 2554, 2555, 0, 0, 0, 0,
	2552, 2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 0,
	0, 1153, 0, 0, 0, 1471, 0, 0, 0, 2142,
	2142, 2142, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 1466, 1578, 0, 0, 0, 0, 0,
	0, 0, 2593, 0, 209, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 0, 678, 0, 521, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 521, 521, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	57, 0, 680, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 1191,
	0, 0, 0, 0, 0, 0, 0, 827, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 2253, 2253, 209,
	827, 0, 0, 2253, 0, 0, 2665, 0, 0, 0,
	1153, 0, 0, 2253, 2665, 2253, 2665, 2665, 0, 68,
	0, 0, 0, 0, 0, 2680, 0, 0, 0, 209,
	209, 209, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	209, 0, 0, 1175, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 75, 82, 0, 1153, 0, 0,
	0, 0, 0, 0, 2719, 0, 0, 2721, 2253, 0,
	1153, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 927, 1175, 0, 76, 0,
	0, 0, 2253, 0, 521, 2754, 0, 0, 0, 0,
	0, 2253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 209, 1837, 0, 0, 1837, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 2805, 0, 0,
	1175, 209, 0, 209, 0, 0, 0, 1153, 0, 1153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2812,
	0, 209, 0, 1965, 77, 0, 0, 0, 0, 2816,
	2817, 0, 0, 2820, 0, 0, 0, 2823, 0, 0,
	0, 0, 0, 0, 0, 0, 2827, 0, 0, 0,
	0, 0, 0, 0, 0, 2834, 147, 80, 2593, 81,
	0, 0, 0, 1153, 0, 0, 0, 0, 0, 1153,
	0, 0, 0, 0, 0, 3250, 0, 2861, 181, 2854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 117, 1153, 0, 57, 2870, 2871,
	0, 2872, 2873, 2874, 0, 0, 2875, 0, 0, 0,
	2877, 58, 0, 0, 0, 0, 0, 183, 3276, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 1153,
	118, 2905, 2906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 68, 0, 0, 209,
	209, 182, 0, 0, 0, 1153, 0, 0, 0, 2923,
	521, 175, 208, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 521, 74, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 85, 0, 0, 0,
	679, 75, 82, 1153, 0, 0, 0, 0, 0, 0,
	1191, 0, 0, 0, 592, 1153, 0, 0, 0, 0,
	0, 3355, 2952, 0, 2128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2960, 2963, 0,
	0, 0, 0, 0, 0, 76, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 2981, 0, 0, 0, 0, 0, 2128, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 3006, 209, 209, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1578, 2253,
	209, 68, 2212, 0, 0, 0, 0, 3036, 0, 0,
	0, 0, 2387, 2387, 0, 0, 0, 0, 686, 686,
	2253, 77, 0, 1837, 1837, 0, 0, 686, 2253, 0,
	0, 74, 0, 0, 0, 0, 209, 0, 0, 0,
	2128, 85, 0, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 0, 147, 80, 0, 81, 0, 0, 3071,
	3072, 0, 0, 0, 0, 3076, 3077, 0, 0, 0,
	3080, 3081, 0, 0, 0, 181, 0, 3085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	76, 117, 0, 0, 0, 3092, 3089, 0, 0, 0,
	0, 0, 0, 3093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 2541, 2542, 0, 2559, 2560,
	2561, 0, 0, 1153, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 2829, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 209, 0, 0, 0, 0, 0, 1191, 182, 209,
	210, 1074, 210, 210, 1074, 0, 1074, 210, 175, 0,
	0, 0, 209, 0, 0, 210, 176, 0, 0, 2556,
	0, 0, 0, 0, 0, 0, 0, 0, 2253, 2253,
	2253, 0, 0, 0, 0, 0, 77, 150, 0, 0,
	1191, 0, 0, 0, 0, 2963, 2253, 0, 2665, 0,
	0, 1191, 1191, 209, 0, 0, 1074, 1074, 210, 210,
	0, 0, 0, 0, 209, 209, 0, 0, 147, 80,
	0, 81, 0, 210, 0, 0, 0, 2253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 3203, 2547, 0, 210, 210, 210, 210, 0,
	1074, 1074, 681, 0, 0, 1074, 117, 0, 1074, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1191, 0, 183,
	2963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2562, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 3238, 3239, 3240, 0, 0, 1074,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	57, 0, 0, 182, 0, 0, 2557, 0, 0, 3248,
	3249, 210, 0, 175, 58, 0, 0, 0, 0, 0,
	0, 176, 0, 3256, 210, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2253, 150, 2665, 0, 0, 3270, 0, 208, 0,
	208, 208, 0, 0, 209, 208, 0, 0, 0, 68,
	0, 0, 0, 592, 2963, 0, 0, 0, 0, 0,
	0, 0, 3292, 0, 0, 0, 568, 0, 0, 0,
	3298, 0, 0, 827, 0, 0, 0, 0, 0, 74,
	3305, 0, 0, 0, 0, 0, 0, 3270, 0, 85,
	2558, 2253, 0, 0, 75, 82, 208, 208, 0, 209,
	0, 0, 0, 2963, 0, 0, 2963, 0, 0, 1191,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2963, 2963, 0, 0, 0,
	209, 209, 0, 208, 208, 208, 208, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 208, 0,
	2861, 0, 0, 0, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3367, 0, 0, 3370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2541, 2542, 0, 2559, 2560,
	2561, 0, 2553, 2554, 2555, 0, 0, 214, 0, 2552,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 0, 208,
	209, 0, 0, 0, 0, 0, 2665, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 1442, 1443,
	1191, 0, 1191, 0, 77, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 2556,
	1074, 0, 210, 210, 3426, 1445, 585, 0, 210, 0,
	1191, 209, 0, 210, 0, 0, 147, 80, 0, 81,
	0, 209, 2253, 827, 0, 1074, 0, 0, 585, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 181, 0,
	0, 0, 1464, 0, 0, 0, 1074, 0, 0, 0,
	681, 0, 0, 0, 117, 2861, 3474, 3474, 3474, 0,
	0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477, 1485,
	1486, 1487, 0, 2547, 0, 3493, 0, 183, 0, 0,
	0, 0, 1478, 1473, 0, 0, 0, 0, 2818, 0,
	1445, 0, 0, 0, 2253, 1491, 2963, 0, 2963, 0,
	118, 0, 0, 0, 0, 0, 1467, 1468, 1469, 1470,
	0, 0, 3474, 151, 3270, 0, 1450, 0, 1444, 0,
	0, 182, 0, 0, 2562, 0, 0, 1464, 0, 0,
	0, 175, 0, 0, 1461, 0, 0, 0, 1191, 176,
	2253, 0, 0, 0, 0, 0, 0, 1472, 1474, 0,
	0, 0, 0, 0, 0, 0, 2557, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 210, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 1468, 1469, 1470, 3474, 0, 0, 0, 1465,
	0, 1450, 1608, 0, 1009, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 210, 0,
	208, 1608, 0, 0, 210, 1482, 592, 0, 1492, 0,
	0, 592, 1472, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 210, 0, 210, 0, 0,
	2558, 0, 1488, 0, 1489, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 1480, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 1074, 0, 1074, 0, 0, 0, 0,
	0, 1074, 0, 0, 1074, 210, 0, 1479, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 1074, 1074,
	0, 0, 0, 0, 862, 87, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 210, 0, 210, 0,
	210, 0, 210, 0, 210, 0, 0, 0, 0, 0,
	1471, 0, 2553, 2554, 2555, 0, 897, 0, 0, 2552,
	2550, 2551, 2543, 2544, 2545, 2546, 2548, 2549, 1466, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	87, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 208, 208, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 208, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 1481, 0, 0,
	1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453, 1454,
	1446, 1447, 1448, 1449, 1451, 1452, 668, 0, 0, 0,
	3100, 0, 0, 0, 3099, 1074, 0, 0, 997, 0,
	0, 0, 0, 1070, 0, 0, 1171, 0, 1070, 650,
	0, 0, 0, 208, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 651, 592, 208, 0, 208, 0, 208, 0,
	208, 652, 208, 0, 0, 0, 0, 0, 1171, 1171,
	0, 0, 0, 0, 0, 0, 0, 653, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 210, 673, 124, 1074, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 1442, 1443, 654, 0,
	0, 0, 1171, 1171, 58, 119, 0, 1171, 0, 0,
	1171, 0, 0, 0, 0, 0, 1473, 655, 62, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 121, 0, 0, 656, 0, 0,
	657, 0, 0, 0, 0, 0, 0, 38, 0, 68,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1171, 0, 0, 0, 0, 672, 0, 0, 41,
	0, 0, 1074, 0, 42, 0, 0, 0, 0, 74,
	0, 0, 122, 0, 0, 0, 0, 0, 40, 85,
	0, 0, 0, 0, 75, 82, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 2466, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 210, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 0, 0, 1450, 0, 210, 0, 76, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 1074, 0, 0, 1074, 0, 210, 659,
	0, 0, 0, 0, 0, 1472, 1474, 0, 0, 0,
	0, 1009, 0, 0, 0, 0, 676, 660, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 1009, 0, 0, 0, 0,
	208, 0, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 662, 0, 0, 1465, 0, 0,
	670, 210, 0, 0, 210, 0, 210, 663, 210, 0,
	210, 210, 0, 0, 1074, 1074, 1074, 0, 1074, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 210, 664, 671, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 0, 210,
	0, 210, 0, 0, 0, 47, 147, 80, 667, 81,
	0, 45, 0, 666, 0, 123, 0, 0, 0, 0,
	0, 46, 0, 1471, 0, 674, 0, 0, 181, 0,
	0, 0, 0, 0, 210, 210, 669, 210, 0, 210,
	50, 1466, 0, 0, 117, 87, 0, 87, 0, 87,
	0, 0, 1071, 120, 0, 1172, 0, 1071, 0, 0,
	208, 0, 0, 210, 0, 0, 0, 183, 0, 0,
	0, 208, 1070, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 208, 585, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	208, 0, 0, 151, 0, 0, 592, 1172, 1172, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 175, 0, 0, 822, 87, 0, 0, 0, 176,
	0, 0, 208, 87, 0, 0, 0, 208, 0, 0,
	87, 2541, 2542, 0, 2559, 2560, 2561, 0, 0, 0,
	150, 1172, 1172, 3, 0, 0, 1172, 0, 0, 1172,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 208,
	0, 0, 208, 0, 208, 0, 208, 0, 208, 208,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 208, 2556, 0, 0, 0, 1445,
	1172, 0, 0, 0, 0, 0, 0, 208, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 1171, 0, 0, 1464, 0, 0, 0,
	1070, 1074, 208, 208, 0, 208, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 2547,
	0, 208, 0, 0, 0, 0, 0, 1505, 0, 0,
	1074, 0, 2459, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 1514, 2563, 0, 0, 1520,
	1467, 1468, 1469, 1470, 0, 0, 204, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2557, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 210, 0, 0, 1171, 0, 1171, 0, 210,
	0, 0, 0, 1171, 0, 0, 1171, 0, 0, 0,
	0, 210, 1074, 0, 0, 0, 0, 0, 0, 1171,
	1171, 1171, 1074, 1465, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 1074, 210, 0, 1074, 1074, 1074, 0, 0, 0,
	87, 210, 0, 1606, 0, 1609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 1009, 0, 1074, 1074, 0, 0, 0,
	0, 1071, 0, 210, 0, 0, 0, 1466, 0, 0,
	0, 0, 1070, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 1608, 0, 0, 0, 1172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 210, 1074, 210, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2553, 2554,
	2555, 0, 0, 0, 0, 2552, 2550, 2551, 2543, 2544,
	2545, 2546, 2548, 2549, 0, 0, 0, 1070, 208, 208,
	208, 0, 0, 0, 0, 1074, 0, 1608, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 1455, 1453, 1454, 1446,
	1447, 1448, 1449, 1451, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 761, 0, 0, 208, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 1070, 1172, 0, 0, 735, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 1070, 0, 746,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 736, 0,
	0, 208, 767, 0, 0, 0, 0, 0, 0, 743,
	744, 0, 1074, 0, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 1171, 0, 760, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 1172, 0, 1172, 0, 739, 0,
	0, 0, 1172, 0, 0, 1172, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1172, 1172,
	1172, 740, 741, 0, 0, 210, 210, 0, 0, 0,
	0, 1171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 210, 748, 747, 1070, 1074, 0, 1171, 0,
	0, 742, 1064, 0, 0, 0, 0, 0, 0, 1182,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1074, 1074, 0, 802,
	0, 763, 802, 802, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 210, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 1009,
	0, 1074, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 1071, 0, 0, 0, 1266, 1171, 1171, 1171, 0,
	1171, 0, 0, 0, 0, 0, 759, 2032, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 1290, 1290,
	1182, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 1321, 1322, 0, 1514, 0, 0, 0, 1514, 0,
	751, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 730, 0, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	753, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 0, 0, 0, 0, 1074, 0,
	1074, 754, 997, 1395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1609, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 210, 0, 0, 87, 0, 1009,
	1071, 0, 0, 0, 1074, 210, 210, 1074, 0, 0,
	1074, 0, 1074, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 1074, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 1475, 1476,
	1477, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 1478, 1473, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 1172, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1071, 0, 0, 1070, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 1074, 87, 0, 0, 0, 0,
	1009, 0, 0, 0, 0, 0, 1074, 0, 1009, 0,
	0, 0, 87, 0, 87, 210, 0, 0, 0, 0,
	1172, 1608, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 1071, 0, 0, 1172, 0, 0,
	0, 0, 0, 1467, 1468, 1469, 1470, 0, 0, 0,
	0, 1615, 0, 1450, 0, 0, 0, 87, 0, 87,
	0, 0, 208, 0, 1624, 0, 0, 0, 0, 0,
	210, 0, 0, 208, 208, 1074, 0, 1482, 0, 0,
	1492, 0, 0, 0, 1472, 1474, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 210, 0, 1488, 0, 1489, 0, 0, 0,
	0, 0, 0, 1459, 1460, 1172, 1172, 1172, 0, 1172,
	0, 0, 0, 0, 1171, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 1070, 0, 1465, 0, 608, 87,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 609, 0, 1171, 0, 0, 1171, 1171, 1171, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 1074, 0, 610, 629, 0, 0, 0, 0,
	0, 1074, 1074, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 1471, 0, 0, 0, 611, 1171, 1171, 612,
	0, 0, 0, 0, 0, 0, 0, 0, 2032, 0,
	1466, 0, 0, 208, 0, 635, 1171, 0, 0, 0,
	0, 613, 210, 0, 1074, 0, 0, 0, 0, 1514,
	633, 0, 210, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 1070, 0, 0, 1070, 0, 0, 0, 614,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1812,
	0, 0, 0, 0, 0, 0, 1824, 0, 208, 615,
	0, 0, 616, 639, 0, 0, 0, 642, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 1843, 0, 1843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	208, 0, 0, 0, 0, 0, 0, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 1481,
	0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455,
	1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0,
	0, 0, 2529, 638, 0, 0, 2530, 0, 0, 997,
	619, 0, 0, 0, 0, 0, 0, 1824, 0, 0,
	1888, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1902, 0,
	0, 617, 1071, 0, 0, 0, 0, 0, 1912, 208,
	1914, 620, 1916, 0, 1918, 0, 1919, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 1936, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 1070, 0, 641, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 622, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 87, 87, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 637, 0, 636, 87, 87, 625, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 632, 0, 0, 0, 0,
	643, 0, 640, 1172, 0, 0, 0, 630, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 1070, 0, 0, 0, 0, 1171, 0,
	0, 0, 1172, 0, 0, 1172, 1172, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 1171, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1171, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 1172, 1172, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 2197, 0, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0,
	0, 1071, 0, 0, 1071, 0, 0, 0, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	1070, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 0, 0, 0, 1450, 997,
	997, 0, 0, 0, 0, 0, 1070, 0, 0, 1171,
	0, 0, 1070, 0, 1171, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 1182, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 1171, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 2331, 0, 1459, 1460,
	0, 1824, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 1465, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2370, 0, 0, 1290, 0, 1290, 1490,
	1290, 0, 1182, 1182, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2418, 0, 2421, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 1466, 2439, 1182, 0, 2442,
	0, 0, 1071, 0, 0, 0, 0, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 87, 0, 2457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1172, 1172, 1172, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	0, 0, 1172, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 0, 0, 0, 0, 2064, 0, 0,
	0, 2065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1171, 0, 0, 0, 0, 0,
	0, 0, 0, 1171, 1171, 0, 0, 0, 0, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 87, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 1071, 0, 0, 1172, 0,
	0, 1071, 0, 1172, 0, 1478, 1473, 87, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 2657, 0, 0, 0, 0, 1461, 1442, 1443,
	0, 1475, 1476, 1477, 1485, 1486, 1487, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 1478, 1473, 0,
	0, 0, 2693, 2695, 2331, 1445, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 1464, 0, 1450, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	2733, 0, 0, 0, 2737, 0, 0, 1071, 1482, 0,
	0, 1492, 0, 2744, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 1467, 1468, 1469, 1470,
	0, 0, 0, 2032, 0, 0, 1450, 0, 0, 1480,
	0, 0, 0, 0, 0, 2786, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 1172, 0, 0, 0,
	1482, 0, 0, 1492, 0, 1490, 0, 1472, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 2808, 0, 1182, 1488, 0, 1489,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 0, 0, 2814, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 1172, 1172, 0, 0, 0, 0, 1172, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 1466, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 1478, 1473, 0, 0, 0, 0, 1483,
	0, 1445, 0, 0, 0, 0, 1491, 0, 0, 0,
	1481, 0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 1444,
	0, 0, 0, 0, 0, 0, 0, 3098, 1464, 0,
	0, 0, 0, 0, 0, 1461, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 0,
	0, 0, 1481, 0, 0, 1456, 1457, 1463, 1462, 1458,
	1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 1444, 1467, 1468, 1469, 1470, 0, 0, 0, 2832,
	1464, 0, 1450, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 3007, 0, 1492,
	0, 0, 0, 1472, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3019, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 3059,
	0, 1492, 0, 1490, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 1662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 1674, 1656, 1663, 1646, 1684, 1683,
	0, 0, 1648, 1647, 0, 0, 0, 0, 0, 0,
	1694, 1695, 0, 0, 0, 0, 3168, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2331, 1481, 0,
	0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0, 0,
	0, 1685, 0, 1681, 1680, 2532, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1678, 1676, 1677, 0,
	1481, 0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 2531, 0, 1658,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1667,
	1661, 1669, 1671, 1672, 1673, 1668, 0, 1666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1690, 1691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3277, 0, 0,
	0, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1682, 0, 0, 0, 1659, 0, 1660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3323, 0, 0, 0, 0, 0, 0, 1675,
	0, 0, 0, 1643, 1641, 1642, 1645, 1644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3348, 1182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1651, 1652,
	1654, 1655, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1670, 1653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1649, 0, 0, 1686, 1687, 1688, 1689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3397, 1657, 0, 0, 0, 0, 1664,
	1692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 3432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3447, 218, 219, 220, 221, 222,
	1075, 223, 1076, 1077, 1078, 0, 1079, 472, 1080, 1081,
	1082, 1083, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1084, 232, 233, 234, 235, 236,
	237, 1085, 1086, 238, 477, 478, 479, 1087, 239, 480,
	1088, 1073, 1089, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1090, 250, 0, 251, 252, 253,
	1091, 948, 254, 255, 1092, 1093, 1095, 1094, 1096, 1097,
	1098, 256, 257, 258, 259, 260, 261, 481, 482, 1099,
	262, 1100, 264, 263, 1101, 265, 1102, 1103, 266, 267,
	268, 1104, 269, 1105, 270, 271, 1106, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1107, 215, 1108, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1109, 289, 1110, 1111, 949,
	290, 291, 1112, 292, 487, 1113, 488, 293, 1114, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1115, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1116, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1117, 494, 1118, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1119,
	323, 322, 1120, 324, 496, 955, 325, 326, 956, 1121,
	327, 328, 1122, 1123, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1124, 217, 958, 1125, 497, 498, 346, 347,
	1126, 348, 349, 350, 1127, 1128, 352, 353, 354, 1129,
	1130, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1131, 366, 367,
	501, 368, 502, 369, 1132, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1133, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1134, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1135,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1136, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1137, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1138, 436, 437, 435, 1139, 438,
	439, 440, 441, 442, 277, 443, 1140, 444, 507, 508,
	509, 510, 1141, 451, 1142, 445, 446, 511, 447, 512,
	1143, 448, 449, 450, 0, 452, 453, 1144, 1145, 454,
	455, 456, 457, 458, 460, 1146, 461, 1147, 459, 462,
	463, 464, 513, 514, 515, 1148, 466, 465, 516, 1149,
	1150, 1151, 1152, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 2184,
	0, 0, 0, 0, 0, 0, 0, 2185, 218, 219,
	220, 221, 222, 1075, 223, 1076, 1077, 1078, 0, 1079,
	472, 1080, 1081, 1082, 1083, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 1084, 232, 233,
	234, 235, 236, 237, 1085, 1086, 238, 477, 478, 479,
	1087, 239, 480, 1088, 1073, 1089, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1090, 250, 0,
	251, 252, 253, 1091, 948, 254, 255, 1092, 1093, 1095,
	1094, 1096, 1097, 1098, 256, 257, 258, 259, 260, 261,
	481, 482, 1099, 262, 1100, 264, 263, 1101, 265, 1102,
	1103, 266, 267, 268, 1104, 269, 1105, 270, 271, 1106,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 1107, 215, 1108, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 1109, 289,
	1110, 1111, 949, 290, 291, 1112, 292, 487, 1113, 488,
	293, 1114, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 1115, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1116, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 1117, 494, 1118, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 1119, 323, 322, 1120, 324, 496, 955, 325,
	326, 956, 1121, 327, 328, 1122, 1123, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 1124, 217, 958, 1125, 497,
	498, 346, 347, 1126, 348, 349, 350, 1127, 1128, 352,
	353, 354, 1129, 1130, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	1131, 366, 367, 501, 368, 502, 369, 1132, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 1133,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 1134, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 1135, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 1136, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 1137, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 1138, 436, 437,
	435, 1139, 438, 439, 440, 441, 442, 277, 443, 1140,
	444, 507, 508, 509, 510, 1141, 451, 1142, 445, 446,
	511, 447, 512, 1143, 448, 449, 450, 0, 452, 453,
	1144, 1145, 454, 455, 456, 457, 458, 460, 1146, 461,
	1147, 459, 462, 463, 464, 513, 514, 515, 1148, 466,
	465, 516, 1149, 1150, 1151, 1152, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3124, 218, 219, 220, 221, 222, 1075, 223,
	1076, 1077, 1078, 0, 1079, 472, 1080, 1081, 1082, 1083,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1084, 232, 233, 234, 235, 236, 237, 1085,
	1086, 238, 477, 478, 479, 1087, 239, 480, 1088, 1073,
	1089, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1090, 250, 0, 251, 252, 253, 1091, 948,
	254, 255, 1092, 1093, 1095, 1094, 1096, 1097, 1098, 256,
	257, 258, 259, 260, 261, 481, 482, 1099, 262, 1100,
	264, 263, 1101, 265, 1102, 1103, 266, 267, 268, 1104,
	269, 1105, 270, 271, 1106, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1107, 215,
	1108, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1109, 289, 1110, 1111, 949, 290, 291,
	1112, 292, 487, 1113, 488, 293, 1114, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1115, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1116, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1117, 494,
	1118, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1119, 323, 322,
	1120, 324, 496, 955, 325, 326, 956, 1121, 327, 328,
	1122, 1123, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1124, 217, 958, 1125, 497, 498, 346, 347, 1126, 348,
	349, 350, 1127, 1128, 352, 353, 354, 1129, 1130, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1131, 366, 367, 501, 368,
	502, 369, 1132, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1133, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1134,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1135, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1136, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1137,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1138, 436, 437, 435, 1139, 438, 439, 440,
	441, 442, 277, 443, 1140, 444, 507, 508, 509, 510,
	1141, 451, 1142, 445, 446, 511, 447, 512, 1143, 448,
	449, 450, 0, 452, 453, 1144, 1145, 454, 455, 456,
	457, 458, 460, 1146, 461, 1147, 459, 462, 463, 464,
	513, 514, 515, 1148, 466, 465, 516, 1149, 1150, 1151,
	1152, 467, 468, 517, 469, 470, 471, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3244, 0, 218, 219, 220, 221, 222, 1075,
	223, 1076, 1077, 1078, 0, 1079, 472, 1080, 1081, 1082,
	1083, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1084, 232, 233, 234, 235, 236, 237,
	1085, 1086, 238, 477, 478, 479, 1087, 239, 480, 1088,
	1073, 1089, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1090, 250, 0, 251, 252, 253, 1091,
	948, 254, 255, 1092, 1093, 1095, 1094, 1096, 1097, 1098,
	256, 257, 258, 259, 260, 261, 481, 482, 1099, 262,
	1100, 264, 263, 1101, 265, 1102, 1103, 266, 267, 268,
	1104, 269, 1105, 270, 271, 1106, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1107,
	215, 1108, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1109, 289, 1110, 1111, 949, 290,
	291, 1112, 292, 487, 1113, 488, 293, 1114, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1115,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1116,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1117,
	494, 1118, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1119, 323,
	322, 1120, 324, 496, 955, 325, 326, 956, 1121, 327,
	328, 1122, 1123, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1124, 217, 958, 1125, 497, 498, 346, 347, 1126,
	348, 349, 350, 1127, 1128, 352, 353, 354, 1129, 1130,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1131, 366, 367, 501,
	368, 502, 369, 1132, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1133, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1134, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1135, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1136,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1137, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1138, 436, 437, 435, 1139, 438, 439,
	440, 441, 442, 277, 443, 1140, 444, 507, 508, 509,
	510, 1141, 451, 1142, 445, 446, 511, 447, 512, 1143,
	448, 449, 450, 0, 452, 453, 1144, 1145, 454, 455,
	456, 457, 458, 460, 1146, 461, 1147, 459, 462, 463,
	464, 513, 514, 515, 1148, 466, 465, 516, 1149, 1150,
	1151, 1152, 467, 468, 517, 469, 470, 471, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3175, 0, 218, 219, 220, 221, 222,
	1075, 223, 1076, 1077, 1078, 0, 1079, 472, 1080, 1081,
	1082, 1083, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1084, 232, 233, 234, 235, 236,
	237, 1085, 1086, 238, 477, 478, 479, 1087, 239, 480,
	1088, 1073, 1089, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1090, 250, 0, 251, 252, 253,
	1091, 948, 254, 255, 1092, 1093, 1095, 1094, 1096, 1097,
	1098, 256, 257, 258, 259, 260, 261, 481, 482, 1099,
	262, 1100, 264, 263, 1101, 265, 1102, 1103, 266, 267,
	268, 1104, 269, 1105, 270, 271, 1106, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1107, 215, 1108, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1109, 289, 1110, 1111, 949,
	290, 291, 1112, 292, 487, 1113, 488, 293, 1114, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1115, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1116, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1117, 494, 1118, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1119,
	323, 322, 1120, 324, 496, 955, 325, 326, 956, 1121,
	327, 328, 1122, 1123, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1124, 217, 958, 1125, 497, 498, 346, 347,
	1126, 348, 349, 350, 1127, 1128, 352, 353, 354, 1129,
	1130, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1131, 366, 367,
	501, 368, 502, 369, 1132, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1133, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1134, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1135,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1136, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1137, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1138, 436, 437, 435, 1139, 438,
	439, 440, 441, 442, 277, 443, 1140, 444, 507, 508,
	509, 510, 1141, 451, 1142, 445, 446, 511, 447, 512,
	1143, 448, 449, 450, 0, 452, 453, 1144, 1145, 454,
	455, 456, 457, 458, 460, 1146, 461, 1147, 459, 462,
	463, 464, 513, 514, 515, 1148, 466, 465, 516, 1149,
	1150, 1151, 1152, 467, 468, 517, 469, 470, 471, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3060, 0, 218, 219, 220, 221,
	222, 1075, 223, 1076, 1077, 1078, 0, 1079, 472, 1080,
	1081, 1082, 1083, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 1084, 232, 233, 234, 235,
	236, 237, 1085, 1086, 238, 477, 478, 479, 1087, 239,
	480, 1088, 1073, 1089, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1090, 250, 0, 251, 252,
	253, 1091, 948, 254, 255, 1092, 1093, 1095, 1094, 1096,
	1097, 1098, 256, 257, 258, 259, 260, 261, 481, 482,
	1099, 262, 1100, 264, 263, 1101, 265, 1102, 1103, 266,
	267, 268, 1104, 269, 1105, 270, 271, 1106, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 1107, 215, 1108, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 1109, 289, 1110, 1111,
	949, 290, 291, 1112, 292, 487, 1113, 488, 293, 1114,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 1115, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1116, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 1117, 494, 1118, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	1119, 323, 322, 1120, 324, 496, 955, 325, 326, 956,
	1121, 327, 328, 1122, 1123, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 1124, 217, 958, 1125, 497, 498, 346,
	347, 1126, 348, 349, 350, 1127, 1128, 352, 353, 354,
	1129, 1130, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 1131, 366,
	367, 501, 368, 502, 369, 1132, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 1133, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 1134, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	1135, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 1136, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 1137, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 1138, 436, 437, 435, 1139,
	438, 439, 440, 441, 442, 277, 443, 1140, 444, 507,
	508, 509, 510, 1141, 451, 1142, 445, 446, 511, 447,
	512, 1143, 448, 449, 450, 0, 452, 453, 1144, 1145,
	454, 455, 456, 457, 458, 460, 1146, 461, 1147, 459,
	462, 463, 464, 513, 514, 515, 1148, 466, 465, 516,
	1149, 1150, 1151, 1152, 467, 468, 517, 469, 470, 471,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2857, 0, 218, 219, 220,
	221, 222, 1075, 223, 1076, 1077, 1078, 0, 1079, 472,
	1080, 1081, 1082, 1083, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 1084, 232, 233, 234,
	235, 236, 237, 1085, 1086, 238, 477, 478, 479, 1087,
	239, 480, 1088, 1073, 1089, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1090, 250, 0, 251,
	252, 253, 1091, 948, 254, 255, 1092, 1093, 1095, 1094,
	1096, 1097, 1098, 256, 257, 258, 259, 260, 261, 481,
	482, 1099, 262, 1100, 264, 263, 1101, 265, 1102, 1103,
	266, 267, 268, 1104, 269, 1105, 270, 271, 1106, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 1107, 215, 1108, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 1109, 289, 1110,
	1111, 949, 290, 291, 1112, 292, 487, 1113, 488, 293,
	1114, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 1115, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1116, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 1117, 494, 1118, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 1119, 323, 322, 1120, 324, 496, 955, 325, 326,
	956, 1121, 327, 328, 1122, 1123, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 1124, 217, 958, 1125, 497, 498,
	346, 347, 1126, 348, 349, 350, 1127, 1128, 352, 353,
	354, 1129, 1130, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 1131,
	366, 367, 501, 368, 502, 369, 1132, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 1133, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 1134, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 1135, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 1136, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 1137, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 1138, 436, 437, 435,
	1139, 438, 439, 440, 441, 442, 277, 443, 1140, 444,
	507, 508, 509, 510, 1141, 451, 1142, 445, 446, 511,
	447, 512, 1143, 448, 449, 450, 0, 452, 453, 1144,
	1145, 454, 455, 456, 457, 458, 460, 1146, 461, 1147,
	459, 462, 463, 464, 513, 514, 515, 1148, 466, 465,
	516, 1149, 1150, 1151, 1152, 467, 468, 517, 469, 470,
	471, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2849, 0, 218, 219,
	220, 221, 222, 1075, 223, 1076, 1077, 1078, 0, 1079,
	472, 1080, 1081, 1082, 1083, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 1084, 232, 233,
	234, 235, 236, 237, 1085, 1086, 238, 477, 478, 479,
	1087, 239, 480, 1088, 1073, 1089, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1090, 250, 0,
	251, 252, 253, 1091, 948, 254, 255, 1092, 1093, 1095,
	1094, 1096, 1097, 1098, 256, 257, 258, 259, 260, 261,
	481, 482, 1099, 262, 1100, 264, 263, 1101, 265, 1102,
	1103, 266, 267, 268, 1104, 269, 1105, 270, 271, 1106,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 1107, 215, 1108, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 1109, 289,
	1110, 1111, 949, 290, 291, 1112, 292, 487, 1113, 488,
	293, 1114, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 1115, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1116, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 1117, 494, 1118, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 1119, 323, 322, 1120, 324, 496, 955, 325,
	326, 956, 1121, 327, 328, 1122, 1123, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 1124, 217, 958, 1125, 497,
	498, 346, 347, 1126, 348, 349, 350, 1127, 1128, 352,
	353, 354, 1129, 1130, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	1131, 366, 367, 501, 368, 502, 369, 1132, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 1133,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 1134, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 1135, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 1136, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 1137, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 1138, 436, 437,
	435, 1139, 438, 439, 440, 441, 442, 277, 443, 1140,
	444, 507, 508, 509, 510, 1141, 451, 1142, 445, 446,
	511, 447, 512, 1143, 448, 449, 450, 0, 452, 453,
	1144, 1145, 454, 455, 456, 457, 458, 460, 1146, 461,
	1147, 459, 462, 463, 464, 513, 514, 515, 1148, 466,
	465, 516, 1149, 1150, 1151, 1152, 467, 468, 517, 469,
	470, 471, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2718, 0, 218,
	219, 220, 221, 222, 1075, 223, 1076, 1077, 1078, 0,
	1079, 472, 1080, 1081, 1082, 1083, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 1084, 232,
	233, 234, 235, 236, 237, 1085, 1086, 238, 477, 478,
	479, 1087, 239, 480, 1088, 1073, 1089, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1090, 250,
	0, 251, 252, 253, 1091, 948, 254, 255, 1092, 1093,
	1095, 1094, 1096, 1097, 1098, 256, 257, 258, 259, 260,
	261, 481, 482, 1099, 262, 1100, 264, 263, 1101, 265,
	1102, 1103, 266, 267, 268, 1104, 269, 1105, 270, 271,
	1106, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 1107, 215, 1108, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 1109,
	289, 1110, 1111, 949, 290, 291, 1112, 292, 487, 1113,
	488, 293, 1114, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 1115, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1116, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 1117, 494, 1118, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 1119, 323, 322, 1120, 324, 496, 955,
	325, 326, 956, 1121, 327, 328, 1122, 1123, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 1124, 217, 958, 1125,
	497, 498, 346, 347, 1126, 348, 349, 350, 1127, 1128,
	352, 353, 354, 1129, 1130, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 1131, 366, 367, 501, 368, 502, 369, 1132, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	1133, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 1134, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 1135, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 1136, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 1137, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 1138, 436,
	437, 435, 1139, 438, 439, 440, 441, 442, 277, 443,
	1140, 444, 507, 508, 509, 510, 1141, 451, 1142, 445,
	446, 511, 447, 512, 1143, 448, 449, 450, 0, 452,
	453, 1144, 1145, 454, 455, 456, 457, 458, 460, 1146,
	461, 1147, 459, 462, 463, 464, 513, 514, 515, 1148,
	466, 465, 516, 1149, 1150, 1151, 1152, 467, 468, 517,
	469, 470, 471, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2077, 0,
	218, 219, 220, 221, 222, 1075, 223, 1076, 1077, 1078,
	0, 1079, 472, 1080, 1081, 1082, 1083, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 1084,
	232, 233, 234, 235, 236, 237, 1085, 1086, 238, 477,
	478, 479, 1087, 239, 480, 1088, 1073, 1089, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 1090,
	250, 0, 251, 252, 253, 1091, 948, 254, 255, 1092,
	1093, 1095, 1094, 1096, 1097, 1098, 256, 257, 258, 259,
	260, 261, 481, 482, 1099, 262, 1100, 264, 263, 1101,
	265, 1102, 1103, 266, 267, 268, 1104, 269, 1105, 270,
	271, 1106, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 1107, 215, 1108, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	1109, 289, 1110, 1111, 949, 290, 291, 1112, 292, 487,
	1113, 488, 293, 1114, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 1115, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 1116, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 1117, 494, 1118, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 1119, 323, 322, 1120, 324, 496,
	955, 325, 326, 956, 1121, 327, 328, 1122, 1123, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 1124, 217, 958,
	1125, 497, 498, 346, 347, 1126, 348, 349, 350, 1127,
	1128, 352, 353, 354, 1129, 1130, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 1131, 366, 367, 501, 368, 502, 369, 1132,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 1133, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 1134, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 1135, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 1136, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 1137, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 1138,
	436, 437, 435, 1139, 438, 439, 440, 441, 442, 277,
	443, 1140, 444, 507, 508, 509, 510, 1141, 451, 1142,
	445, 446, 511, 447, 512, 1143, 448, 449, 450, 0,
	452, 453, 1144, 1145, 454, 455, 456, 457, 458, 460,
	1146, 461, 1147, 459, 462, 463, 464, 513, 514, 515,
	1148, 466, 465, 516, 1149, 1150, 1151, 1152, 467, 468,
	517, 469, 470, 471, 1176, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1795,
	0, 0, 0, 218, 219, 220, 221, 222, 1075, 223,
	1076, 1077, 1078, 0, 1079, 472, 1080, 1081, 1082, 1083,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1084, 232, 233, 234, 235, 236, 237, 1085,
	1086, 238, 477, 478, 479, 1087, 239, 480, 1088, 1073,
	1089, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1090, 250, 0, 251, 252, 253, 1091, 948,
	254, 255, 1092, 1093, 1095, 1094, 1096, 1097, 1098, 256,
	257, 258, 259, 260, 261, 481, 482, 1099, 262, 1100,
	264, 263, 1101, 265, 1102, 1103, 266, 267, 268, 1104,
	269, 1105, 270, 271, 1106, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1107, 215,
	1108, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1109, 289, 1110, 1111, 949, 290, 291,
	1112, 292, 487, 1113, 488, 293, 1114, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1115, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1116, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1117, 494,
	1118, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1119, 323, 322,
	1120, 324, 496, 955, 325, 326, 956, 1121, 327, 328,
	1122, 1123, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1124, 217, 958, 1125, 497, 498, 346, 347, 1126, 348,
	349, 350, 1127, 1128, 352, 353, 354, 1129, 1130, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1131, 366, 367, 501, 368,
	502, 369, 1132, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1133, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1134,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1135, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1136, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1137,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1138, 436, 437, 435, 1139, 438, 439, 440,
	441, 442, 277, 443, 1140, 444, 507, 508, 509, 510,
	1141, 451, 1142, 445, 446, 511, 447, 512, 1143, 448,
	449, 450, 0, 452, 453, 1144, 1145, 454, 455, 456,
	457, 458, 460, 1146, 461, 1147, 459, 462, 463, 464,
	513, 514, 515, 1148, 466, 465, 516, 1149, 1150, 1151,
	1152, 467, 468, 517, 469, 470, 471, 1065, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 1075, 223, 1076, 1077, 1078, 0, 1079, 472, 1080,
	1081, 1082, 1083, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 1084, 232, 233, 234, 235,
	236, 237, 1085, 1086, 238, 477, 478, 479, 1087, 239,
	480, 1088, 1073, 1089, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1090, 250, 0, 251, 252,
	253, 1091, 948, 254, 255, 1092, 1093, 1095, 1094, 1096,
	1097, 1098, 256, 257, 258, 259, 260, 261, 481, 482,
	1099, 262, 1100, 264, 263, 1101, 265, 1102, 1103, 266,
	267, 268, 1104, 269, 1105, 270, 271, 1106, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 1107, 215, 1108, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 1109, 289, 1110, 1111,
	949, 290, 291, 1112, 292, 487, 1113, 488, 293, 1114,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 1115, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1116, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 1117, 494, 1118, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	1119, 323, 322, 1120, 324, 496, 955, 325, 326, 956,
	1121, 327, 328, 1122, 1123, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 1124, 217, 958, 1125, 497, 498, 346,
	347, 1126, 348, 349, 350, 1127, 1128, 352, 353, 354,
	1129, 1130, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 1131, 366,
	367, 501, 368, 502, 369, 1132, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 1133, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 1134, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	1135, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 1136, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 1137, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 1138, 436, 437, 435, 1139,
	438, 439, 440, 441, 442, 277, 443, 1140, 444, 507,
	508, 509, 510, 1141, 451, 1142, 445, 446, 511, 447,
	512, 1143, 448, 449, 450, 0, 452, 453, 1144, 1145,
	454, 455, 456, 457, 458, 460, 1146, 461, 1147, 459,
	462, 463, 464, 513, 514, 515, 1148, 466, 465, 516,
	1149, 1150, 1151, 1152, 467, 468, 517, 469, 470, 471,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 1075, 223, 1076, 1077, 1078, 0, 1079, 472,
	1080, 1081, 1082, 1083, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 1084, 232, 233, 234,
	235, 236, 237, 1085, 1086, 238, 477, 478, 479, 1087,
	239, 480, 1088, 1073, 1089, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1090, 250, 0, 251,
	252, 253, 1091, 948, 254, 255, 1092, 1093, 1095, 1094,
	1096, 1097, 1098, 256, 257, 258, 259, 260, 261, 481,
	482, 1099, 262, 1100, 264, 263, 1101, 265, 1102, 1103,
	266, 267, 268, 1104, 269, 1105, 270, 271, 1106, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 1107, 215, 1108, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 1109, 289, 1110,
	1111, 949, 290, 291, 1112, 292, 487, 1113, 488, 293,
	1114, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 1115, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1116, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 1117, 494, 1118, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 1119, 323, 322, 1120, 324, 496, 955, 325, 326,
	956, 1121, 327, 328, 1122, 1123, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 1124, 217, 958, 1125, 497, 498,
	346, 347, 1126, 348, 349, 350, 1127, 1128, 352, 353,
	354, 1129, 1130, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 1131,
	366, 367, 501, 368, 502, 369, 1132, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 1133, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 1134, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 1135, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 1136, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 1137, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 1138, 436, 437, 435,
	1139, 438, 439, 440, 441, 442, 277, 443, 1140, 444,
	507, 508, 509, 510, 1141, 451, 1142, 445, 446, 511,
	447, 512, 1143, 448, 449, 450, 0, 452, 453, 1144,
	1145, 454, 455, 456, 457, 458, 460, 1146, 461, 1147,
	459, 462, 463, 464, 513, 514, 515, 1148, 466, 465,
	516, 1149, 1150, 1151, 1152, 467, 468, 517, 469, 470,
	471, 2053, 0, 890, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 2050, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 2051, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	2049, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 2052,
	0, 0, 0, 0, 0, 0, 860, 2048, 0, 823,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 181, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 183, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 1315, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 175, 467, 468, 517, 469,
	470, 471, 834, 176, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 1519, 1517, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 181, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 183, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 1315, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 175, 467, 468, 517, 469, 470, 471, 834, 176,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	1519, 2479, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 181, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 183, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 1315, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 175, 467, 468,
	517, 469, 470, 471, 834, 176, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 1519, 1517, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 2138, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 2143,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 2139, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 2140, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 1378, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 1377, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 826, 858, 890, 847, 848, 849, 845,
	846, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 838, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 890, 847, 848, 849, 845, 846, 859, 860, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 3444, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 838, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 3301, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 838, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 3030, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 1579,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 0,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 2836, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 1967, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 1966, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 838,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 890,
	847, 848, 849, 845, 846, 859, 860, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 1579, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 2143, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 1517, 0, 2148,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 2146, 858, 890,
	847, 848, 849, 845, 846, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 2134, 858, 890, 847, 848,
	849, 845, 846, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 2123, 858, 890, 847, 848, 849, 845,
	846, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 2121, 858, 2113, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 2116, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 2117, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 2118, 2115, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 2119, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 2114, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 2110,
	858, 2113, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 2116,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 2117, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 2118, 2115, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 2119, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	2114, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 452, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 0, 0, 0, 0, 0, 1525, 0,
	860, 0, 0, 0, 858, 890, 847, 848, 849, 845,
	846, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 1953, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 1205, 858, 890, 847, 848, 849, 845, 846, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 1204, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 834, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 1199,
	858, 890, 847, 848, 849, 845, 846, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 1198, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 452, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 1194, 858, 890,
	847, 848, 849, 845, 846, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 958, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 452, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	834, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 830, 831, 890, 847, 848, 849, 845,
	846, 859, 860, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 864, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 905, 884, 916, 874, 915,
	914, 0, 232, 876, 875, 235, 236, 237, 866, 938,
	238, 974, 975, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 919, 261, 912, 911, 836, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 910, 268, 0, 269,
	0, 270, 271, 0, 272, 842, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 855, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 909, 907, 908,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 865, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	886, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	898, 889, 900, 902, 903, 904, 899, 0, 891, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 924, 925,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 878, 338, 957, 341, 342, 344, 343, 833,
	217, 958, 856, 943, 913, 346, 347, 0, 887, 349,
	888, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	906, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 843, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 879,
	880, 882, 883, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 901, 881, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 947, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 877, 0, 444, 920, 921, 922, 923, 0,
	451, 0, 445, 446, 970, 447, 971, 854, 448, 449,
	450, 0, 452, 453, 0, 837, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 885, 462, 463, 464, 513,
	917, 964, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 834, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 830,
	831, 890, 847, 848, 849, 845, 846, 859, 860, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 864, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 905, 884, 916, 874, 915, 914, 0, 232, 876,
	875, 235, 236, 237, 866, 938, 238, 974, 975, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 3473, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 919, 261,
	912, 911, 836, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 910, 268, 0, 269, 0, 270, 271, 0,
	272, 842, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 855, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 909, 907, 908, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 865,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 886, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 898, 889, 900, 902,
	903, 904, 899, 0, 891, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 924, 925, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 878, 338,
	957, 341, 342, 344, 343, 833, 217, 958, 856, 943,
	913, 346, 347, 0, 887, 349, 888, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 906, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 843, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 879, 880, 882, 883, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 901, 881, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 947, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 877, 0,
	444, 920, 921, 922, 923, 0, 451, 0, 445, 446,
	970, 447, 971, 854, 448, 449, 450, 0, 3472, 453,
	0, 837, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 885, 462, 463, 464, 513, 917, 964, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 834, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 830, 831, 890, 847, 848,
	849, 845, 846, 859, 860, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 939, 864, 0, 0,
	0, 224, 226, 225, 227, 228, 3471, 905, 884, 916,
	874, 915, 914, 0, 232, 876, 875, 235, 236, 237,
	866, 938, 238, 974, 975, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 3473, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 919, 261, 912, 911, 836, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 910, 268,
	0, 269, 0, 270, 271, 0, 272, 842, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 855,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 909,
	907, 908, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 865, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 886, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 898, 889, 900, 902, 903, 904, 899, 0,
	891, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	924, 925, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 878, 338, 957, 341, 342, 344,
	343, 833, 217, 958, 856, 943, 913, 346, 347, 0,
	887, 349, 888, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 906, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 843, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 879, 880, 882, 883, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 901, 881, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 947, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 877, 0, 444, 920, 921, 922,
	923, 0, 451, 0, 445, 446, 970, 447, 971, 854,
	448, 449, 450, 0, 3472, 453, 0, 837, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 885, 462, 463,
	464, 513, 917, 964, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 834, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 830, 831, 890, 847, 848, 849, 845, 846, 859,
	860, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 0, 217, 958,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 890, 847, 848, 849, 845, 846,
	859, 0, 2131, 0, 0, 0, 0, 2129, 2130, 0,
	0, 218, 219, 220, 221, 222, 860, 223, 0, 0,
	858, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 0, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 3473,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 0, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	0, 942, 0, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	0, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 0, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 3472, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 1011, 0, 0, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	0, 858, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 938,
	238, 477, 478, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 488, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 998, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	217, 958, 0, 943, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 1005, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 181, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	969, 0, 436, 437, 435, 183, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 970, 447, 971, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 459, 462, 463, 464, 1315,
	514, 515, 0, 466, 465, 516, 1011, 0, 0, 175,
	467, 468, 517, 469, 470, 471, 0, 176, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 995, 0, 1611, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	938, 238, 477, 478, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 488, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 998, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 217, 958, 0, 943, 498, 346, 347, 0, 348,
	349, 350, 0, 1003, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 1005, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 181, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 969, 0, 436, 437, 435, 183, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 970, 447, 971, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 459, 462, 463, 464,
	1315, 514, 515, 0, 466, 465, 516, 2586, 0, 1011,
	175, 467, 468, 517, 469, 470, 471, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 995, 939, 1611,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 938, 238, 477, 478, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 488, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	998, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 217, 958, 0, 943, 498, 346,
	347, 0, 348, 349, 350, 0, 1003, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	1005, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 970, 447,
	971, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	994, 0, 1011, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	995, 939, 1000, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 938, 238, 477, 478,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	488, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 998, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 217, 958, 0,
	943, 498, 346, 347, 0, 348, 349, 350, 0, 1003,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 1005, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 970, 447, 971, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1011, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 995, 0, 1000, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 938, 238, 477,
	478, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 488, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 998, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 217, 958,
	0, 943, 498, 346, 347, 0, 348, 349, 350, 0,
	1003, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 1005, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 970, 447, 971, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1011, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 995, 0, 1000, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 938, 238,
	477, 478, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 488, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 217,
	958, 0, 943, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 1005, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 970, 447, 971, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 823, 0, 1169, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 1506, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1073, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 181, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 183, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 1315, 514, 515, 0, 466, 465, 516, 1312, 0,
	1169, 175, 467, 468, 517, 469, 470, 471, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	150, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 1073, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 0, 958, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 181, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	183, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 1315, 514, 515, 0, 466, 465,
	516, 0, 0, 0, 175, 467, 468, 517, 469, 470,
	471, 0, 176, 0, 0, 0, 0, 1169, 1168, 0,
	0, 0, 0, 1166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1073, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 1169, 1168,
	0, 0, 0, 0, 1166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	1790, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 1073, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 0, 958, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 1169,
	1168, 0, 0, 0, 0, 1166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 2781, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1073, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1011, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	0, 0, 1319, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 938, 238, 477, 478, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 488, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 217, 958, 0, 943, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 970,
	447, 971, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 823, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 181, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 183, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 1315, 514, 515,
	0, 466, 465, 516, 212, 0, 0, 175, 467, 468,
	517, 469, 470, 471, 0, 176, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 150, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 212, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 1616, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 212, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 2734, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 212, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 2366,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 212, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	2860, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 693,
	0, 584, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 1880, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 590, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 589, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 0, 583, 0, 584, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 593, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	590, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 589, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 584, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 593, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 590, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 1910, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 589, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 584, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 593, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 590, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 589, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 212, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 593, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 1344,
	0, 1169, 1168, 0, 0, 0, 0, 1166, 0, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 1073, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	1343, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 0, 958, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 1342, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 1341, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 1310, 0, 1169, 1168, 0, 0, 0, 0,
	1166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 1073, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1309,
	490, 491, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 0,
	958, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 1306, 0, 1169, 1168, 0,
	0, 0, 0, 1166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1073, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1305, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 1244, 0,
	1169, 1168, 0, 0, 0, 0, 1166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 1073, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1243, 490, 491, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 0, 958, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 1241, 0, 1169, 1168, 0, 0, 0, 0, 1166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1073, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1240, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1162, 0, 1169, 1168, 0, 0,
	0, 0, 1166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1073,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1164, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 1169, 1168, 0,
	0, 0, 0, 1166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1073, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1169, 1168,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 1073, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 1704,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 0, 958, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1169,
	1168, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1073, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 1169, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1073,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 2254, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 2251,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 2401, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 2257, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 2398, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 2400, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 2397, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 2256,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 2399, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 2254,
	239, 480, 0, 0, 2248, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 2251, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 2257,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 2247, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 2256, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	2255, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1397, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 1400, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 1398, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 1399, 465, 516, 1157, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1159, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 1003, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1154, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1156, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 1003, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1061, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1063, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 1003,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 546, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 545, 222, 535, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 538, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 539,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 540, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 534, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	535, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	538, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 539, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 540,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 2330, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1889,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 1823, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1816,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1815, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1811, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1813,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1299, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1298, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1296, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1295, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1293, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1292, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1289, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1288, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1264, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1179, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1181, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 538, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	539, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 540, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 1917, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 1915, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 1913, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 685, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 684, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	683, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	2401, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 3189, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 525, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 524, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 523, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 2189, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 212, 2388,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 2983, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 212, 2388, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 2385, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 1896, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1887, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 566, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 1039, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 1037, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 567, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 563, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 1040,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 562,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1835, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1834, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 566, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 556, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 567, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 563, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 1318, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 562, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1303, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1302, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1252,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1251, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1236, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1173, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 566, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 1039, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 1037, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 567, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 563, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	1040, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	562, 508, 509, 510, 0, 451, 0, 445, 1038, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 1021,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 566, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	556, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 554, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 555, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 567, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	557, 397, 0, 398, 402, 403, 563, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	558, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	562, 508, 509, 510, 0, 451, 0, 445, 560, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 550, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 551, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 548, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 542, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	520, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 2674, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 2672, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 2660, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 2348, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 551, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 1847, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 0, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1272, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1214, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 977, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 0, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 0, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 0, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	0, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1478, 1473, 0, 0, 0,
	0, 1461, 0, 1445, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1492, 0, 1480, 0, 1472, 1474, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 1490,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0,
	0, 1483, 0, 1471, 0, 0, 0, 0, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 1466, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 1483, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 2528, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 0, 0, 0, 1450, 0,
	1481, 0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0,
	0, 0, 1482, 0, 0, 1492, 0, 2527, 0, 1472,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 1480, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1478, 1473, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 1491, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 1478, 1473, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1466, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 0, 0, 0, 1444,
	0, 1483, 1450, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 1492,
	0, 0, 0, 1472, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 0, 1480, 0, 0,
	0, 0, 1450, 0, 1481, 1465, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 1490, 0, 0, 1482, 0, 0, 1492,
	0, 2526, 0, 1472, 1474, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 1442, 1443,
	0, 1475, 1476, 1477, 1485, 1486, 1487, 1480, 0, 0,
	0, 1471, 0, 0, 0, 1465, 0, 1478, 1473, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 1466,
	1491, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1444, 0, 1483, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 1469, 1470,
	0, 0, 0, 0, 0, 1483, 1450, 0, 1481, 0,
	0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0, 0,
	1482, 0, 0, 1492, 0, 2065, 0, 1472, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 1489,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 1481, 1465,
	0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 1490, 0, 0,
	0, 3427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 1478, 1473,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 1491, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 1475, 1476,
	1477, 1485, 1486, 1487, 1444, 0, 0, 0, 0, 1483,
	0, 0, 0, 1464, 1478, 1473, 0, 0, 0, 0,
	1461, 0, 1445, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 1468, 1469,
	1470, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 1481, 0, 0, 1456, 1457, 1463, 1462, 1458,
	1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 1482, 0, 0, 1492, 3423, 0, 0, 1472, 1474,
	0, 0, 0, 1467, 1468, 1469, 1470, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 1488, 0,
	1489, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	1492, 0, 1480, 0, 1472, 1474, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 1489, 0, 1490, 0,
	0, 0, 0, 1459, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	1483, 0, 1471, 0, 0, 1478, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 1483, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 1456, 1457, 1463, 1462,
	1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449,
	1451, 1452, 0, 0, 0, 0, 3354, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 1481,
	0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455,
	1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 1482, 0,
	0, 1492, 3353, 0, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 1480,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1491, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 1466, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 1444, 0, 1483, 1450, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 1480, 0, 0, 0, 0, 1450, 0,
	1481, 1465, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 1490,
	0, 0, 1482, 3247, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 1480, 0, 0, 0, 1471, 0, 0,
	0, 1465, 0, 1478, 1473, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1466, 1491, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1444,
	0, 1483, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 0, 0, 0, 0,
	0, 1483, 1450, 0, 1481, 0, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 0, 0, 0, 1482, 3151, 0, 1492,
	0, 0, 0, 1472, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 1481, 1465, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 1490, 0, 0, 0, 3103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 1475, 1476,
	1477, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 1478, 1473, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 1491, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487,
	1444, 0, 0, 0, 0, 1483, 0, 0, 0, 1464,
	1478, 1473, 0, 0, 0, 0, 1461, 0, 1445, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 1469, 1470, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 1481, 0,
	0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 1482, 0, 0,
	1492, 3102, 0, 0, 1472, 1474, 0, 0, 0, 1467,
	1468, 1469, 1470, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 1488, 0, 1489, 0, 0, 0,
	0, 0, 0, 1459, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 1492, 0, 1480, 0,
	1472, 1474, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 1489, 0, 1490, 0, 0, 0, 0, 1459,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 1475, 1476, 1477, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 1483, 0, 1471, 0,
	0, 1478, 1473, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 1491, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 1483, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455,
	1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0,
	0, 0, 3101, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 1469, 1470, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 1481, 0, 0, 1456, 1457,
	1463, 1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447,
	1448, 1449, 1451, 1452, 1482, 0, 0, 1492, 3068, 0,
	0, 1472, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 1489, 0, 0, 0, 0, 0, 0,
	1459, 1460, 0, 0, 0, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 1480, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1478, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 1478, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 1466, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 0,
	0, 1444, 0, 1483, 1450, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1492, 0, 0, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 1480,
	0, 0, 0, 0, 1450, 3525, 1481, 1465, 0, 1456,
	1457, 1463, 1462, 1458, 1484, 0, 1455, 1453, 1454, 1446,
	1447, 1448, 1449, 1451, 1452, 1490, 0, 0, 1482, 2867,
	0, 1492, 0, 0, 0, 1472, 1474, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 1480,
	0, 0, 0, 1471, 0, 0, 0, 1465, 0, 1478,
	1473, 0, 0, 0, 0, 2454, 0, 1445, 0, 0,
	0, 1466, 1491, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 1444, 0, 1483, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 3524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 2455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 0, 0, 1483, 1450, 0,
	1481, 0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 0,
	0, 2483, 1482, 0, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	1481, 1465, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 1466, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 0,
	0, 0, 0, 0, 1450, 0, 2571, 0, 0, 2570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1492, 0, 0, 1481, 1472, 1474, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 2156, 1459, 1460, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 1480,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1478,
	1473, 0, 0, 0, 2155, 0, 0, 1445, 0, 0,
	0, 0, 1491, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 1475, 1476, 1477, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 1478, 1473, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	1491, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 1444, 0, 0, 0, 1483, 1450, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 0, 0, 1467, 1468, 1469, 1470,
	0, 0, 0, 1480, 0, 0, 1450, 0, 0, 0,
	1481, 1465, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452, 1490,
	1482, 0, 0, 1492, 0, 0, 0, 1472, 1474, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 1489,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 1442, 1443, 0, 1475, 1476, 1477, 1485, 1486,
	1487, 1480, 0, 0, 0, 0, 0, 1471, 0, 1465,
	0, 1478, 1473, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 1491, 1466, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 820, 0, 0, 0, 1444, 0, 0,
	0, 1483, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 1469, 1470, 0, 0, 0, 0, 0, 1483,
	1450, 0, 0, 0, 1481, 0, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 0, 1482, 0, 0, 1492, 0, 0,
	0, 1472, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 1489, 0, 0, 0, 0, 0, 0,
	1459, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1481, 1465, 0, 1456, 1457, 1463, 1462, 1458,
	1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1442, 1443,
	0, 1475, 1476, 1477, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 1473, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 1466, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 1469, 1470,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 2577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 1492, 0, 0, 1481, 1472, 1474, 1456,
	1457, 1463, 1462, 1458, 1484, 0, 1455, 1453, 1454, 1446,
	1447, 1448, 1449, 1451, 1452, 0, 0, 1488, 0, 1489,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 1442, 1443, 0, 1475, 1476, 1477, 1485, 1486,
	1487, 1480, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1478, 1473, 0, 0, 0, 2572, 0, 0, 1445,
	0, 0, 0, 0, 1491, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 1475, 1476, 1477, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 1478,
	1473, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1491, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 1469, 1470, 0, 1444, 0, 0, 0, 1483,
	1450, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 1492, 0, 0,
	0, 1472, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 1489, 0, 0, 0, 0, 0, 0,
	1459, 1460, 0, 0, 0, 0, 0, 0, 1467, 1468,
	1469, 1470, 0, 0, 0, 1480, 0, 0, 1450, 0,
	0, 0, 1481, 1465, 0, 1456, 1457, 1463, 1462, 1458,
	1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 1490, 1482, 0, 0, 1492, 0, 0, 0, 1472,
	1474, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 1489, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 1480, 0, 0, 0, 0, 0, 1471,
	0, 1465, 0, 1478, 1473, 0, 0, 0, 2525, 0,
	0, 1445, 0, 0, 0, 0, 1491, 1466, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1444,
	0, 0, 0, 1483, 0, 0, 0, 0, 1464, 0,
	0, 0, 2539, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 1475, 1476, 1477,
	1485, 1486, 1487, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 1478, 1473, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1466, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 0, 0, 0, 1444,
	0, 1483, 1450, 0, 0, 0, 1481, 0, 1464, 1456,
	1457, 1463, 1462, 1458, 1484, 1461, 1455, 1453, 1454, 1446,
	1447, 1448, 1449, 1451, 1452, 0, 1482, 0, 0, 1492,
	0, 0, 0, 1472, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 0, 1480, 0, 0,
	0, 0, 1450, 0, 1481, 1465, 0, 1456, 1457, 1463,
	1462, 1458, 1484, 0, 1455, 1453, 1454, 1446, 1447, 1448,
	1449, 1451, 1452, 1490, 0, 0, 1482, 0, 0, 1492,
	0, 0, 0, 1472, 1474, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1489, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 0, 0, 0, 1442, 1443,
	0, 1475, 1476, 1477, 1485, 1486, 1487, 1480, 0, 0,
	0, 1471, 0, 0, 0, 1465, 0, 1478, 1473, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 1466,
	1491, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1444, 0, 1483, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 1475,
	1476, 1477, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 1491, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 1469, 1470,
	0, 1444, 0, 0, 0, 1483, 1450, 0, 1481, 0,
	1464, 1456, 1457, 1463, 1462, 1458, 1484, 1461, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 0, 0, 0,
	1482, 0, 0, 1492, 0, 0, 0, 1472, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 1489,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 0, 0, 1467, 1468, 1469, 1470, 0, 0,
	0, 1480, 0, 0, 1450, 0, 0, 0, 1481, 1465,
	0, 1456, 1457, 1463, 1462, 1458, 1484, 0, 1455, 1453,
	1454, 1446, 1447, 1448, 1449, 1451, 1452, 1490, 1482, 0,
	0, 1492, 0, 0, 0, 1472, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1489, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 1471, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 1481, 0, 0, 1456, 1457, 1463, 1462, 1458,
	1484, 0, 1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 1456, 1457, 1463, 1462, 1458, 1484, 0,
	1455, 1453, 1454, 1446, 1447, 1448, 1449, 1451, 1452,
}
var sqlPact = [...]int{

	6433, -1000, -1000, -1000, -1000, -1000, -1000, 181, 180, 177,
	166, 165, 164, 162, 161, -1000, -1000, -1000, 156, -1000,
	-1000, 153, -1000, 152, 151, 150, 149, -1000, 142, 140,
	139, -1000, -1000, -1000, -1000, 137, 134, 133, 52895, 1818,
	64258, 55826, 1650, 47414, 63835, 46991, 63412, 62989, 132, -1000,
	62566, 128, 127, 125, -1000, -1000, 123, 1802, 38491, 112,
	110, 109, 2101, 108, 103, -1000, 102, -1000, 8106, 1263,
	-1000, 101, 98, -1000, 6354, 4663, 54986, 2182, 94, 90,
	38067, 2175, 2220, -1000, -1000, 1633, -1000, -1000, 88, 86,
	83, 82, 80, 79, 78, 77, 76, -1000, 74, 73,
	72, 71, 70, 69, 68, 66, 65, 62, 60, 54,
	53, 52, 51, 48, 47, 44, -1000, 7379, 1595, 1404,
	1394, 1393, 1380, 1387, 859, 42, 41, 39, 26, 25,
	24, 22, -1000, -1000, 21, 20, 19, 18, -1000, 15,
	14, 129, 12, 10, 9, 7, 2, 2598, 2243, 1360,
	974, 18721, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 68428, 64675, -1, -41, -5,
	-1000, 2538, 860, 31708, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 424, -1000, -1000, -1000, 264, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1611, 655,
	-1000, -1000, -1000, 62143, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1814, -56, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 654, -1000, 1805, 122, 1760, -1000, -1000, -1000, -1000,
	-1000, 64675, -1000, -1000, 2840, 2839, 1647, 653, 61726, -1000,
	1352, -1000, 816, 21409, -1000, 1041, -1000, 21409, 250, -1000,
	-1000, -1000, -1000, -1000, 46568, 15145, 46145, 45722, 42352, 61303,
	14712, 52478, 1101, -1000, -1000, -1000, -1000, -1000, -31, 39754,
	64675, -1000, 245, -1000, -1000, -1000, -1000, -1000, -1000, 27785,
	909, 27327, 346, 26869, 318, -1000, -1000, -1000, -1000, 2836,
	2833, 982, 2831, 2471, 68011, 1521, 2829, 1385, 1052, 893,
	2828, 2827, 2826, 2825, 2824, 2823, 2822, 1251, 60880, 2279,
	41919, 41486, 52895, 52895, 2016, 60457, -1000, -1000, 1174, 1156,
	-1000, -1000, -1000, -1000, 2354, 2216, 2214, 52055, -1000, -1000,
	2821, 2820, 2819, 2817, 2816, 67594, 1461, 2812, 1939, 2811,
	2810, 2806, 2804, 2802, 2799, 2797, 2793, 2786, -1000, 51632,
	51209, 50786, 50363, 60034, 41053, 40620, -1000, -1000, -1000, 33396,
	5553, 59611, 34695, 52895, 52895, -1000, -1000, 28231, 99, -1000,
	-1000, -1000, 2235, -1000, 28231, 99, -1000, 64675, -1000, 2277,
	1605, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1828, 1355, 2672, 40187, 1630, 1178, 2349, 2345, 1275, 2030,
	2333, 2324, 2323, 2320, 2319, 1375, 1977, 303, 18263, 1299,
	1250, 2317, 2316, 2689, 1691, 45299, 2775, 2774, 2507, 2270,
	2229, -1000, -1000, -1000, -1000, 1236, -1000, -1000, 47831, -1000,
	-1000, 1079, -1000, -1000, 1079, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1100, 66760, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1626, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1459,
	-1000, 1600, -1000, -1000, 1219, 2243, 1922, 2516, 2516, 2516,
	2554, 407, 393, -1000, 129, -1000, -1000, 73843, -1000, -1000,
	28231, 28231, 28231, 28231, 28231, 1656, -1000, 651, -1000, -1000,
	708, -1000, 650, 596, -1000, -1000, -1000, -1000, -1000, -1000,
	646, 2701, -1000, 878, -1000, -1000, -1000, -1000, 2667, -1000,
	17359, -1000, -1000, -1000, 400, 644, 28231, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 242, 828, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 580,
	1496, 575, 575, 575, -1000, -1000, 885, -1000, -1000, -1000,
	349, 574, 319, 565, -1000, -1000, -1000, -1000, 2272, 643,
	642, -1000, 640, 627, 626, -1000, -1000, -1000, 625, 621,
	620, 617, 616, 614, 612, 611, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 883, -1000, 610, 609, 608, 607, 605,
	603, 602, 601, 600, -1000, -1000, -32, 64675, -1000, 424,
	-32, -1000, -1000, 599, -1000, 21855, 21855, 21855, -1000, -1000,
	1804, 28231, -1000, 1929, -1000, 272, -29, 795, 32550, -1000,
	30862, 795, 716, 35960, -1000, 2224, -1000, -1000, 598, 237,
	-1000, -1000, 2221, 64675, 15576, 64675, 52895, 52895, 2337, 28231,
	-1000, -1000, 39333, 64675, 53312, 2623, 9930, 39333, 64675, 2271,
	-1000, -1000, -1000, 64675, -1000, 28231, -1000, 2622, 1293, 43204,
	2572, -42, -1000, -1000, -1000, -1000, -1000, -1000, 1917, 1942,
	1014, 1835, 1439, -1000, 21409, 2464, -1000, -1000, -1000, 234,
	15576, -1000, 1726, 2409, 1277, -1000, 1833, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1457, 2403, -1000, 1648, 2400,
	1456, -1000, -1000, 865, 2398, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1679, -1000, -1000, 2498, -1000, -1000,
	1871, 2392, -21, -1000, -1000, 33833, 39754, -34, -1000, -1000,
	-101, -1000, 14279, 73843, -1000, -1000, -1000, 73843, 734, -1000,
	-1000, 2388, -1000, 73843, 728, -1000, -1000, 2386, -1000, -1000,
	-1000, 2773, -1000, 2769, 1879, 2768, 2767, 2762, -1000, 1313,
	1488, 2761, -1000, 2760, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49940, 49517, 890, -1000, 1799, -1000, -1000, 49094, 856,
	1878, -1000, -1000, 1877, -1000, 772, -1000, 2759, 59188, 2057,
	856, 1876, -1000, -1000, -1000, -1000, -1000, 52895, -1000, 52895,
	-1000, 52895, -1000, 1284, -1000, 67177, -29, -1000, -1000, -1000,
	-1000, -1000, 2385, 2756, 2755, 2753, -1000, 64675, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 173, 2383, -1000,
	-1000, 173, 2381, -1000, 173, 2374, -1000, 168, 2371, -1000,
	-1000, 1687, 2369, -1000, -146, 2367, -1000, -1000, -146, 2365,
	-1000, -44, -1000, -1000, -1000, 860, -1000, 32973, 58765, 42783,
	846, 613, 37644, 73843, -1000, 33833, 73843, -1000, 42783, 49094,
	-1000, 58342, 48677, -1000, -1000, 1128, 1961, -1000, -1000, -1000,
	-1000, 42783, 42783, 42783, -1000, 57919, -1000, 1581, 1371, 2501,
	52895, -1000, 1541, -1000, -1000, -1000, 2511, 2269, -1000, 38912,
	54563, -1000, 54146, -1000, 53729, -1000, 52895, -1000, 52895, -1000,
	2748, 2747, 2746, -1000, 2743, 2517, 73843, 2515, -1000, 2399,
	1401, 1379, 64675, -1000, -1000, 64675, -1000, 64675, -1000, -1000,
	-1000, 1916, -1000, -1000, -1000, -1000, 52895, -1000, -1000, -1000,
	-1000, -1000, -1000, 2268, -1000, 1529, -1000, 1125, -1000, -1000,
	183, -1000, -1000, -42, -1000, 66760, -1000, -1000, 2243, 1922,
	-1000, 64675, -1000, -1000, 1960, -1000, 1207, -1000, 2243, 1826,
	2006, 26411, 1989, 28231, 129, -1000, -1000, 129, 129, 20963,
	-1000, -1000, 9930, 9930, 15576, 1109, 28231, 28231, 28231, 28231,
	28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231,
	28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231,
	28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231, 28231,
	28231, 1882, 28231, 1099, 28231, 28231, 28231, 28231, 1800, -1000,
	-1000, 1576, 499, 1692, -1000, 2658, 2658, 2658, 74125, 74125,
	535, 2740, 708, -1000, 28231, -1000, 99, 28231, 16009, -1000,
	2682, 1403, -1000, -1000, 393, 8629, 1841, -1000, 382, 16467,
	-1000, -1000, -1000, 17359, 596, 25953, 28231, 873, 73843, 13848,
	2287, 2103, -1000, 2681, -1000, -1000, 2669, -1000, -1000, -1000,
	-1000, 2669, 1108, 1106, 2680, -1000, 2669, 2669, 594, 715,
	713, 712, 693, 475, 28231, 28231, 28231, 28231, 28231, 28231,
	28231, 28231, -1000, 25507, 25049, 24591, 29569, 24133, 28231, 17805,
	23675, 23217, 64675, -32, 2619, 28231, 111, -1000, 72739, -1000,
	111, 111, 591, -45, 73843, 1971, 1971, 32129, 1884, 1668,
	1668, 1668, -1000, 590, 677, -6, -8, -10, -1000, -1000,
	-11, -14, 795, 10384, 56243, 1706, 795, 795, 232, 253,
	380, 30441, 1929, 56243, -1000, -1000, 52895, 588, 16009, 15576,
	1172, -53, 220, 1992, 1991, 1988, -1000, 1357, -58, 1095,
	-37, -1000, 4990, -60, -1000, 1098, -1000, -1000, -1000, -1000,
	280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 876, 587, 585, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 580, 1496,
	575, 575, 575, -1000, -1000, -1000, 349, 574, 319, 565,
	-1000, -1000, -1000, -1000, -1000, -1000, 2219, -101, 53312, 801,
	-61, 986, -42, -1000, -1000, -1000, 43204, 1079, -1000, 1399,
	-1000, -1000, -1000, -1000, -1000, -1000, 1142, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2700, -1000, 2663, -1000, -1000, 2677,
	-33, -1000, -1000, 15576, -1000, -46, 1465, -1000, 44876, 2506,
	2505, 2477, 1261, -1000, 1177, 2550, 47831, 2595, 2600, 746,
	-1000, 2215, -1000, -1000, 813, 1428, 1083, 47831, 1648, -1000,
	9930, -1000, 2066, 2547, 1189, 1175, 1189, 1189, 1140, -1000,
	47831, 1080, 1546, 42783, -1000, 1078, -1000, -47, 2578, 2584,
	744, -1000, 2212, 1071, -1000, -1000, 52895, 15576, 781, -1000,
	42783, -34, 39754, 64675, 210, -1000, 28231, 99, 28231, 99,
	-1000, -1000, 2362, -1000, -1000, -1000, 2739, 1467, 1937, -1000,
	-1000, -1000, 556, 1875, 1648, 1874, -1000, -1000, 48254, 2210,
	64675, 2022, -38, 52895, -1000, -1000, 1537, -1000, 2359, 2358,
	586, 2738, -1000, 1797, 1873, -1000, -1000, -1000, 66343, 1090,
	2356, 862, 534, 2617, 534, 36802, -1000, 64675, -1000, 64675,
	-1000, -1000, -1000, 2737, -1000, 52895, -1000, -1000, 52895, -1000,
	52895, -1000, 52895, -1000, 52895, 52895, -1000, 64675, 42783, 42783,
	42783, 5165, 44042, -68, 375, -1000, 57502, 64675, 923, 44459,
	64675, 2454, -206, -1000, 846, 846, 781, -1000, 781, -1000,
	52895, 2262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2736,
	2733, -1000, 853, 52895, 64675, 52895, -1000, -1000, 64675, -1000,
	64675, -1000, -1000, 64675, -1000, 64675, -1000, 64675, -1000, -1000,
	-1000, -1000, -1000, -1000, 99, 28231, 1311, -1000, 2259, -1000,
	2254, -1000, 17, -1000, -1000, -1000, -1000, 1891, 52895, 52895,
	64675, 52895, -1000, 47831, -1000, -1000, 2243, -1000, 931, -1000,
	-1000, -1000, -1000, -1000, 73843, 502, -1000, -1000, 73843, 1350,
	2023, -1000, 2023, -35, -1000, 72279, 1954, 52895, -1000, -1000,
	-1000, -1000, -1000, 811, 1210, 1210, 1038, 1038, 1038, 1038,
	2585, 3845, 1075, 1362, 425, 425, 425, 425, 425, 425,
	425, 425, 707, 1112, 1112, 707, 707, 707, 707, 707,
	1112, 1112, 1112, 425, 425, 425, 74125, 74047, 6911, 28231,
	28231, 1070, 1509, 499, 6455, 28231, 4317, 4317, 4317, 4317,
	-1000, 1957, -1000, -1000, -1000, -1000, 2209, 555, 29569, 29569,
	-1000, -1000, -1000, -1000, 16913, 28231, -1000, -1000, -1000, -1000,
	22759, -1000, -1000, 71995, -242, 371, -196, -9, -1000, 28231,
	28231, 28231, 370, -1000, 368, -1000, -1000, 1069, -1000, 1068,
	1064, 1054, -1000, 554, 196, 28231, 64675, -1000, 69803, 675,
	-69, -1000, -73, 1170, -1000, 28231, 193, -1000, 1662, 553,
	552, 367, -74, -1000, 365, 802, 800, 364, 363, 361,
	28231, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 73763, 69599, 69315, 69269, 7874, 9645, 9573, -81, 358,
	-1000, 2207, -196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	357, -1000, 354, -1000, 73559, -196, 353, 6870, -1000, 29569,
	29569, 29569, -1000, 350, -1000, 72535, -1000, 73481, 22313, 22313,
	22313, 343, 73277, 28231, -196, -82, -1000, -83, -1000, -1000,
	550, -84, 862, 21855, 31285, 15576, -1000, 862, 862, 28231,
	-1000, 28231, 1980, -1000, -1000, -1000, 1979, 1888, 1971, 32129,
	-1000, -1000, -1000, -1000, 56243, 563, 795, -1000, -1000, -1000,
	-1000, -1000, 56243, -1000, 2667, 2275, -1000, -1000, -1000, 64675,
	424, -1000, 56243, 56243, 15576, 795, -1000, 342, 35116, -9,
	191, -1000, -1000, 15576, 2087, 2087, 2087, -1000, -1000, 64675,
	2611, -1000, 1498, -1000, 9930, -1000, 692, 998, -1000, 2676,
	546, -1000, 2669, 2669, 64675, 95, 21409, -1000, 1079, -1000,
	-1000, 1278, -1000, 1483, -1000, 1031, -1000, -1000, -1000, 21409,
	-1000, 1702, 64675, 64675, 52895, -1000, -1000, 1867, 65926, 1864,
	9930, 64675, -1000, -1000, 540, 539, 1953, 1949, 64675, 64675,
	65509, 65092, 64675, 1746, 28231, 1717, 1474, 99, 99, -1000,
	-1000, 99, 538, 1153, 52895, 52895, 52895, 1423, -1000, -1000,
	-1000, -1000, -1000, 52895, -1000, -1000, 2675, -1000, 1189, -1000,
	-1000, -1000, 1189, 1648, 1422, 52895, 42783, 864, 64675, 1550,
	99, 99, -1000, -1000, 99, 537, 15576, 1486, -1000, 2062,
	-1000, -89, -1000, -1000, 13417, 73843, -1000, 73843, -1000, 64675,
	-1000, 888, 64675, 44459, 837, 2348, -1000, 1648, 2343, 424,
	-1000, -1000, 36381, -101, 846, 42783, 52895, -38, 42783, 42783,
	42783, 2731, 536, 2724, -1000, 52895, 2339, 1790, 1863, 2419,
	741, 64675, 1737, -1000, 28231, 1482, -1000, 35539, 904, 64675,
	1405, 89, -1000, -1000, -1000, 1, 64675, -1000, 2723, -1000,
	-1000, 173, 173, 173, -1000, 168, 1687, -1000, -146, -146,
	-1000, -1000, 5165, 846, -39, 532, -1000, 766, 760, 34264,
	42783, -90, -1000, -1000, -1000, -1000, -1000, 52895, 64675, 615,
	2056, 64675, -91, -1000, 188, 531, -1000, 846, 33833, 2200,
	-1000, -1000, 861, -1000, 1120, -1000, -1000, -1000, -1000, -1000,
	-1000, -22, -101, -101, -1000, -1000, -1000, -1000, 73843, -1000,
	1304, 1303, 64675, -1000, 15576, 64675, 52895, 15576, 52895, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1350, -1000, 28231, -1000,
	-1000, -1000, 20963, -1000, -1000, -1000, 52895, -26, 28231, 28231,
	5817, 3754, 28231, 29569, 29569, -1000, 28231, 988, -1000, -1000,
	-1000, -1000, -1000, 2195, 530, 28231, 9930, 5354, 4025, -1000,
	338, 9257, 707, -1000, 28231, -1000, 337, 20517, -1000, 72817,
	-24, -92, -1000, 2699, 1890, 1696, 1435, 1325, 2674, 12986,
	-196, -99, -1000, -1000, 687, -1000, 2415, -1000, 28231, 73021,
	12555, -1000, 37223, 871, 1737, -1000, -1000, 2669, 789, -1000,
	-1000, -1000, 789, -1000, 71791, 9930, 9930, 28231, 28231, -1000,
	28231, 28231, 28231, -1000, -1000, 28231, -1000, -1000, 2188, 28231,
	-1000, 9930, 9930, 29569, 29569, 29569, 29569, 29569, 29569, 29569,
	29569, 29569, 29569, 29569, 29569, 29569, 29569, 29569, 29569, 29569,
	29569, 29569, 1973, 29569, 2655, 2655, 2655, -1000, 2217, 2188,
	28231, 28231, 9930, 335, 332, 331, -1000, 28231, -196, -1000,
	-1000, 5165, -1000, 2081, -1000, -202, -1000, 1929, -1000, -1000,
	2081, 2081, -100, 73843, 32129, 32129, -1000, 529, 28231, 1975,
	-1000, 670, -1000, -109, -1000, 56243, -1000, 669, -243, -1000,
	758, -1000, -1000, -1000, -1000, 424, -1000, -1000, -1000, 185,
	56243, -1000, -111, -1000, 2612, 330, 15576, -1000, -1000, -1000,
	-1000, -1000, -1000, -101, 1747, 2696, -1000, 2673, 685, 665,
	329, 2669, 325, 323, -101, 64675, -1000, -42, -1000, -1000,
	-1000, 28231, -1000, -1000, 2491, 1044, 1033, -1000, 2336, -1000,
	1854, -1000, 910, -1000, 1308, -1000, 28231, 28231, 526, 525,
	1454, 2722, 2335, 1687, 2330, 1687, -1000, -1000, 803, -1000,
	73843, 524, 522, -1000, -46, 1449, 858, -1000, -1000, 28231,
	28231, 57081, -1000, 344, 2498, -28, -1000, 1032, -1000, -1000,
	-1000, 1648, 1024, -1000, -1000, 1536, -1000, -1000, 857, -1000,
	-1000, 28231, -1000, -47, 1021, 846, 2162, -1000, -1000, 2721,
	2719, 2718, 313, -112, -70, 9930, 2610, 1778, 64675, 52895,
	52895, 2609, 786, -1000, 2667, -1000, -1000, -1000, -1000, 856,
	-1000, -1000, 2717, -1000, 921, 15576, 52895, 2329, 1924, 741,
	43625, -1000, 856, 2006, 73843, -1000, 1405, 20059, 2481, -117,
	-1000, -1000, -1000, 862, 36802, 32129, 28231, 2716, -118, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56664, 56664, 42783,
	42783, 42783, 846, 64675, 64675, 44459, 2715, 520, 64675, 64675,
	517, -1000, 64675, 64675, 2714, 42783, -1000, -1000, 99, -1000,
	1748, 52895, 12124, -1000, -1000, 853, -1000, -1000, 1551, 1829,
	1551, 1763, 71510, -1000, 2508, 15576, 2620, 4317, 28231, 28231,
	215, 3689, 396, 4317, 28231, 28231, 9930, 478, -119, 28231,
	28231, -1000, 28231, 660, 73843, 2690, 28231, 312, 310, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000,
	-1000, -1000, -1000, -1000, 73843, 28231, 130, -1000, -1000, -1000,
	68845, -1000, 28231, 307, 305, -1000, -1000, -1000, 301, 290,
	9185, 5902, 71464, 71183, 70979, 73843, 2217, 73843, -1000, -1000,
	973, 973, 1127, 1127, 1127, 1127, 2655, 454, 820, 494,
	1027, 1027, 1027, 446, 852, 852, 1027, 1027, 1027, 2158,
	1976, 516, 5774, -1000, -1000, 73843, 73843, 289, -1000, -1000,
	-1000, -196, 284, 2094, 2544, -1000, 32129, 2094, 2094, -1000,
	-1000, 1888, 64675, 73843, 32129, -29, -1000, 2667, -1000, -1000,
	2275, -1000, 10827, -1000, 15576, -1000, -1000, 35116, -1000, 515,
	-1000, 96, -1000, -1000, 659, 2713, 681, -1000, 274, -1000,
	-1000, -101, 73843, 64675, 64675, 64675, 2327, -1000, 3522, -1000,
	70899, -120, -1000, 72279, 28231, 64675, -1000, 1480, 2009, 963,
	-1000, 64675, -1000, 64675, -1000, -1000, 64675, 64675, 52895, 2310,
	-127, 73843, -102, -1000, 752, -1000, 1165, -1000, 11693, 52895,
	52895, 42783, 2302, -128, 15576, -1000, 42783, -1000, -1000, -1000,
	2047, -1000, 55403, 1641, 99, -1000, 2711, 514, 1648, 99,
	-1000, 1742, -1000, 658, -1000, -1000, 510, 64675, 1782, 509,
	15576, 1936, 741, 43625, -1000, 1090, 1405, -1000, -1000, -110,
	-1000, 480, 99, 1737, -1000, -141, 73843, -1000, 748, -1000,
	-129, -1000, -1000, 269, -1000, 2449, 2448, -1000, -1000, 28231,
	504, 503, 64675, 2447, -1000, -1000, -134, -1000, 1935, -1000,
	-1000, -1000, -1000, -1000, 15576, 1372, -1000, -1000, -1000, -1000,
	2508, 4317, 4317, 28231, 28231, 28231, 4317, 478, -135, -1000,
	4317, 4317, -196, -1000, -1000, 72817, -1000, -1000, -1000, 73843,
	11262, 1563, -1000, 70695, -1000, -1000, -1000, -1000, 28231, 28231,
	-1000, -1000, -1000, -1000, -1000, 29569, 2156, 501, 9930, -1000,
	-1000, 867, 28231, 28231, 1929, 867, 867, -1000, -136, -1000,
	795, -1000, -1000, -1000, 2667, 96, -1000, 2710, 15576, 679,
	-1000, 2709, -1000, -1000, -1000, -1000, 64675, -1000, 64675, -1000,
	15576, 64675, 2163, 1849, -1000, -1000, 1948, 500, 29569, 52895,
	733, 2128, 1494, 28231, -1000, -143, -148, 1846, -1000, -1000,
	1845, 28231, -1000, 9930, 1687, 1687, -149, -150, -1000, 28231,
	1011, 64675, 19613, -1000, 2708, 2498, -1000, -1000, -1000, 28231,
	1010, -1000, -146, 1550, 2080, -1000, -1000, -1000, -1000, 1947,
	-1000, -1000, 64675, 1946, 851, -1000, 44459, 837, -1000, -1000,
	826, -1000, 28231, -1000, 52895, 28231, 1781, -1000, 741, 43625,
	-1000, 2419, -1000, 2425, 64675, 2476, -1000, 2006, 499, -1000,
	846, 498, 496, -151, 28231, 28231, -156, 481, 846, -161,
	-1000, 704, 686, -1000, -1000, 52895, 52895, -1000, 4317, 4317,
	4317, -1000, 184, -1000, -1000, 1737, 2531, -1000, 70414, 70368,
	4165, 29569, 9930, -158, -1000, 64675, 73843, -196, -1000, -1000,
	-1000, 56243, 476, -1000, 2707, -1000, -1000, 1951, -1000, -1000,
	-1000, 64675, 1853, -1000, -1000, 28231, 5774, 479, 28231, -1000,
	-1000, 2037, 2171, 2047, 477, -1000, -1000, -1000, -1000, 1471,
	-1000, -1000, 73843, 2524, -1000, -1000, 465, 457, 73843, 453,
	737, 2155, -1000, -1000, -1000, 73843, 452, 837, -1000, 1632,
	1641, 432, -1000, -1000, -1000, 2021, 91, 2608, 826, -1000,
	2664, -1000, -159, 921, -164, 52895, 43625, -1000, 1924, 1092,
	-165, 64675, 1405, -1000, -1000, 42783, 42783, 1494, -166, -173,
	-1000, 42783, -1000, 1935, -1000, 64675, -1000, 64675, -1000, -1000,
	-1000, 1524, 28231, -1000, -1000, 4165, -174, -1000, -171, -1000,
	2605, -1000, -1000, -1000, -1000, -1000, 2325, 70087, 1897, 64675,
	69883, 2160, -1000, -1000, 1550, 64675, 52895, 911, 15576, 1551,
	1551, 28231, 19167, 1591, 28231, -1000, 52895, 64675, -1000, 2443,
	2047, 99, -1000, -1000, 1494, 429, 1494, 428, -1000, 1936,
	1249, -1000, 862, -1000, -1000, -175, -176, 2047, 1494, -1000,
	-183, -1000, -184, -185, 3, 29123, 29123, 29123, -196, -1000,
	64675, 427, 2284, -1000, 1773, 1444, -7, 944, -1000, -1000,
	2128, -190, 424, -1000, 28231, -1000, -191, -1000, 903, -199,
	-1000, 898, -200, -1000, 2144, -1000, -207, 423, -208, -1000,
	-1000, -1000, 1550, 851, 2047, 28231, 2047, 28231, -1000, 36802,
	-1000, 846, 846, 1550, 2047, 846, -1000, -1000, -1000, 2318,
	-1000, 30000, 1776, 1389, 72075, 2318, 2318, -1000, -1000, 64675,
	-1000, 1777, 1774, 1231, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1897, 73843, -1000, 1551, 2078, -1000, 1551, 2137,
	-1000, 1569, -1000, 64675, -1000, 64675, 837, -1000, 1550, -214,
	1550, -217, -201, -1000, -1000, -1000, 1550, -1000, -1000, 1450,
	2633, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2430, -1000, 930, 1491, 1491, 1773, -1000, 422, -1000, 410,
	-1000, -222, -1000, -1000, 854, 1494, 854, 1494, -1000, -1000,
	1384, -1000, -1000, 1682, 28677, -1000, 2642, -1000, -1000, 1986,
	-1000, 2128, 28231, 28231, 1677, -1000, 2706, 2047, -1000, 2047,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -224, -225, -1000,
	-1000, -1000, -1000, 1550, 1550, 1550, 997, 854, 854, -1000,
	409, -1000, -1000, 28231, -230, 1550, -1000,
}
var sqlPgo = [...]int{

	0, 3338, 3333, 3331, 3330, 3329, 3318, 3317, 3316, 3313,
	3309, 3308, 3307, 3306, 3304, 3303, 3302, 3301, 3298, 3297,
	3295, 3294, 3293, 3290, 3289, 3288, 3287, 3285, 3284, 3283,
	3282, 3281, 3280, 3279, 3278, 3277, 3275, 3270, 3263, 3261,
	3260, 3259, 3255, 3252, 3251, 3247, 3246, 3245, 31, 3243,
	3242, 3238, 3233, 3232, 3231, 3227, 3225, 3224, 3221, 3220,
	3219, 3216, 3214, 3211, 3209, 3208, 36, 3207, 214, 3203,
	3202, 3200, 3198, 3196, 3195, 3194, 3192, 3191, 3190, 213,
	3186, 111, 3184, 3183, 3181, 3180, 3179, 212, 3177, 3176,
	3174, 3167, 3163, 3162, 3161, 3160, 127, 3159, 3153, 102,
	3151, 3149, 3148, 3146, 3145, 3144, 3143, 3138, 3136, 3134,
	194, 3131, 211, 3130, 3128, 3126, 3125, 3122, 3121, 3116,
	3115, 3110, 3109, 3108, 3106, 3105, 3104, 3103, 3102, 3101,
	3100, 3098, 3097, 3096, 3093, 3089, 3088, 3087, 3086, 217,
	137, 3084, 3080, 209, 208, 3076, 3070, 100, 98, 71,
	3069, 96, 144, 195, 6184, 183, 3068, 3067, 3063, 148,
	3060, 3057, 76, 135, 133, 129, 126, 92, 3056, 3052,
	69, 38, 33, 29, 106, 3051, 3050, 3048, 2484, 94,
	3047, 3045, 205, 184, 3044, 1616, 3042, 163, 90, 93,
	26, 91, 3035, 117, 19, 3034, 141, 67, 3033, 128,
	68, 32, 5053, 7017, 3032, 80, 220, 82, 180, 188,
	171, 162, 160, 131, 1144, 3031, 193, 3030, 112, 151,
	3019, 3017, 3016, 57, 145, 73, 3015, 2, 5, 150,
	24, 86, 14, 3010, 12, 3007, 3004, 3002, 3001, 18,
	130, 3000, 114, 89, 2999, 23, 2996, 61, 161, 2994,
	169, 99, 2993, 2987, 204, 152, 146, 10, 172, 2986,
	2985, 2983, 2976, 2975, 104, 27, 103, 2973, 2971, 107,
	181, 2970, 50, 132, 70, 115, 216, 88, 168, 83,
	173, 139, 170, 2969, 2967, 2965, 154, 2963, 2962, 116,
	157, 2961, 2957, 218, 35, 55, 179, 56, 2953, 125,
	2952, 153, 2951, 2950, 2949, 215, 136, 167, 6, 64,
	101, 28, 8, 174, 119, 85, 75, 2948, 2490, 1889,
	2038, 2947, 109, 87, 52, 95, 120, 200, 43, 2946,
	2945, 1135, 2943, 2941, 2940, 2939, 140, 2938, 2937, 2934,
	113, 53, 78, 2932, 124, 63, 11, 202, 203, 74,
	164, 166, 191, 2931, 138, 2930, 34, 110, 2929, 149,
	190, 66, 2928, 1105, 118, 2926, 175, 2925, 2924, 2922,
	2921, 201, 2920, 2919, 210, 2918, 123, 2917, 2916, 143,
	158, 192, 97, 40, 2914, 62, 399, 2913, 147, 54,
	2912, 178, 49, 0, 6216, 4835, 5797, 2909, 1994, 2908,
	159, 108, 2907, 2905, 2904, 79, 2903, 58, 2902, 2900,
	37, 2898, 22, 7, 9, 15, 13, 1227, 716, 2896,
	2895, 84, 105, 121, 2893, 206, 165, 2892, 2890, 2888,
	72, 2883, 25, 2879, 21, 2876, 2875, 30, 3, 16,
	2874, 2873, 189, 2872, 185, 2869, 2867, 2607, 2864, 199,
	65, 2863, 134, 156, 2860, 2859, 2857, 2856, 196, 2855,
	198, 2853, 20, 17, 1, 2852, 2851, 2850, 155, 4,
	2444, 2849, 2848, 60, 2847, 2844, 142,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 449,
	449, 19, 31, 20, 32, 13, 450, 450, 450, 450,
	24, 21, 33, 22, 22, 22, 22, 22, 150, 150,
	150, 150, 18, 18, 27, 27, 164, 164, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 448,
	448, 166, 166, 165, 161, 161, 451, 451, 167, 167,
	167, 169, 169, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 151, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 391, 391, 392, 392, 146, 146,
	147, 147, 147, 147, 148, 148, 149, 149, 149, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 140, 140, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 456, 456,
	457, 457, 458, 458, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 63,
	63, 241, 241, 217, 217, 64, 64, 64, 65, 65,
	66, 66, 53, 53, 444, 444, 255, 255, 358, 358,
	68, 68, 69, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 77, 77, 77, 78, 78,
	78, 75, 75, 75, 73, 73, 73, 72, 72, 72,
	76, 76, 76, 74, 74, 74, 256, 256, 79, 79,
	79, 79, 79, 79, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 360,
	360, 80, 80, 80, 329, 329, 84, 84, 84, 287,
	287, 85, 85, 85, 85, 85, 86, 86, 86, 86,
	98, 98, 98, 98, 447, 447, 248, 248, 182, 182,
	182, 182, 91, 91, 91, 91, 92, 92, 92, 93,
	93, 145, 145, 104, 104, 104, 104, 104, 103, 103,
	103, 103, 103, 103, 43, 43, 43, 44, 44, 45,
	45, 46, 46, 47, 47, 48, 48, 48, 48, 48,
	106, 106, 452, 452, 108, 105, 105, 105, 107, 107,
	107, 107, 109, 110, 110, 110, 110, 110, 110, 110,
	110, 111, 111, 385, 385, 263, 263, 383, 383, 399,
	399, 384, 384, 221, 221, 221, 221, 221, 222, 222,
	222, 390, 390, 390, 390, 390, 390, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 130, 130,
	130, 139, 139, 139, 139, 139, 139, 139, 132, 132,
	132, 121, 121, 113, 113, 113, 113, 113, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 293, 293, 293, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 135, 135, 135, 135, 135, 135,
	343, 343, 131, 131, 131, 131, 134, 134, 134, 134,
	277, 277, 128, 128, 128, 129, 129, 129, 133, 133,
	136, 136, 136, 136, 116, 116, 116, 461, 461, 461,
	137, 137, 127, 127, 138, 138, 138, 138, 138, 138,
	138, 138, 126, 126, 126, 126, 119, 445, 445, 442,
	442, 442, 442, 442, 442, 442, 443, 443, 446, 446,
	89, 89, 89, 58, 58, 462, 462, 462, 59, 59,
	463, 463, 463, 460, 460, 460, 460, 460, 460, 460,
	460, 223, 223, 224, 224, 310, 310, 310, 310, 310,
	227, 227, 168, 168, 168, 230, 231, 231, 228, 228,
	229, 229, 229, 233, 233, 232, 235, 235, 234, 309,
	406, 406, 408, 408, 408, 408, 408, 408, 408, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 404,
	404, 404, 405, 400, 400, 401, 401, 401, 401, 225,
	225, 226, 226, 226, 226, 402, 403, 246, 246, 346,
	407, 407, 409, 409, 411, 464, 464, 464, 464, 464,
	464, 465, 465, 308, 308, 239, 239, 412, 412, 412,
	412, 413, 413, 413, 413, 413, 416, 415, 414, 414,
	414, 414, 414, 339, 339, 339, 62, 62, 62, 274,
	274, 273, 273, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 142, 142, 60,
	60, 60, 174, 174, 57, 57, 57, 467, 467, 61,
	61, 61, 468, 468, 67, 67, 67, 67, 67, 67,
	56, 56, 56, 56, 56, 469, 469, 294, 294, 292,
	292, 245, 245, 345, 186, 186, 162, 162, 162, 23,
	25, 25, 17, 17, 34, 34, 35, 35, 30, 30,
	453, 453, 454, 454, 90, 90, 94, 94, 94, 102,
	102, 141, 141, 141, 141, 141, 141, 141, 38, 38,
	38, 38, 50, 50, 50, 50, 100, 471, 471, 471,
	101, 101, 470, 470, 181, 181, 181, 181, 183, 183,
	305, 305, 306, 306, 472, 472, 307, 307, 307, 307,
	176, 175, 177, 177, 55, 55, 55, 170, 170, 171,
	171, 172, 172, 173, 173, 473, 473, 87, 87, 87,
	144, 144, 216, 216, 301, 301, 301, 240, 240, 191,
	191, 304, 304, 302, 302, 302, 302, 272, 272, 272,
	143, 143, 253, 253, 265, 265, 266, 266, 355, 355,
	267, 99, 99, 154, 154, 152, 152, 152, 152, 152,
	152, 159, 159, 159, 159, 159, 153, 153, 153, 155,
	155, 155, 155, 155, 155, 155, 158, 158, 158, 158,
	160, 160, 160, 157, 157, 423, 423, 423, 425, 425,
	426, 422, 422, 424, 424, 466, 466, 276, 276, 276,
	237, 238, 236, 236, 243, 243, 242, 244, 244, 344,
	344, 344, 270, 270, 270, 270, 297, 297, 295, 295,
	295, 296, 296, 298, 298, 298, 299, 299, 300, 300,
	269, 269, 325, 325, 156, 156, 156, 250, 250, 250,
	251, 251, 316, 316, 316, 316, 316, 316, 317, 317,
	315, 315, 315, 315, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 348, 348, 252, 252, 349, 303, 303,
	440, 440, 440, 441, 441, 342, 342, 350, 350, 350,
	350, 350, 350, 340, 340, 341, 341, 356, 357, 357,
	280, 280, 280, 280, 278, 278, 281, 281, 281, 281,
	279, 279, 351, 351, 351, 351, 271, 271, 352, 352,
	352, 353, 311, 312, 312, 361, 361, 361, 361, 361,
	376, 249, 249, 249, 249, 249, 474, 474, 362, 362,
	362, 362, 362, 362, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 366, 366, 366, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 375, 375, 375,
	375, 375, 367, 367, 372, 372, 373, 373, 373, 368,
	369, 374, 374, 374, 374, 475, 475, 378, 378, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 364, 364,
	364, 371, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 288, 288, 289, 289, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 320, 320, 320, 320, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 417, 417, 417, 417, 417, 417, 417,
	417, 420, 420, 421, 421, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 427, 427, 428, 428, 430, 430,
	431, 431, 432, 433, 433, 433, 434, 435, 435, 429,
	429, 436, 436, 436, 436, 437, 437, 438, 438, 438,
	438, 438, 439, 439, 439, 439, 439, 331, 331, 332,
	332, 338, 338, 338, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	184, 184, 184, 184, 184, 261, 261, 259, 259, 259,
	262, 262, 260, 260, 258, 258, 257, 257, 328, 328,
	326, 326, 330, 330, 282, 282, 377, 377, 377, 377,
	377, 377, 377, 283, 283, 283, 291, 284, 284, 285,
	285, 285, 285, 285, 322, 323, 286, 286, 286, 324,
	324, 333, 337, 337, 336, 335, 335, 334, 334, 313,
	313, 314, 314, 268, 268, 476, 476, 264, 264, 354,
	354, 354, 354, 219, 219, 254, 254, 218, 218, 211,
	211, 212, 212, 212, 212, 247, 247, 379, 379, 379,
	380, 381, 382, 327, 201, 200, 188, 189, 199, 198,
	197, 187, 190, 194, 195, 196, 192, 193, 207, 206,
	205, 203, 204, 359, 213, 213, 214, 214, 214, 215,
	215, 215, 215, 185, 185, 208, 208, 209, 210, 210,
	202, 202, 202, 178, 178, 178, 179, 179, 180, 180,
	389, 389, 387, 387, 387, 388, 388, 388, 388, 386,
	386, 386, 386, 386, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 395, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 398, 398,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 6, 3, 1, 1, 2, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	3, 5, 7, 2, 3, 0, 3, 5, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 3, 3, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 4, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 4, 3, 5, 4, 5, 3,
	4, 5, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 2, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 3, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 2, 3, 4, 3, 4,
	5, 0, 2, 4, 2, 3, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 2,
	5, 2, 3, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 460, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 289, 318, 328, 312, -107, -108,
	347, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -455, 86, -424,
	-71, -74, -76, -459, 116, 131, 175, 281, -92, -93,
	314, 316, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 351, 397, 42,
	360, 71, 119, 322, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -423, -72, -73, -75, -77, -78, 313, -155, -153,
	457, 410, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 428, 436, -158, -156, -157,
	-160, 335, 418, 374, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, -203, -208, -209, -210, -202, -178,
	-395, -398, 4, -393, -396, 137, 182, 249, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 380, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 233, 234, 237, 235, 238, 236, 239, 242, 240,
	241, 244, 245, 247, 246, 172, 254, 255, 257, 258,
	259, 275, 262, 263, 264, 267, 268, 271, 274, 276,
	277, 278, 279, 280, 281, 282, 284, 285, 287, 289,
	291, 293, 294, 295, 296, 297, 298, 300, 301, 303,
	304, 305, 306, 307, 312, 309, 310, 311, 313, 314,
	315, 316, 318, 320, 321, 322, 323, 325, 327, 348,
	349, 362, 328, 329, 330, 331, 332, 333, 334, 338,
	342, 339, 340, 341, 343, 336, 337, 344, 345, 347,
	350, 351, 353, 355, 356, 359, 360, 361, 363, 366,
	367, 368, 364, 365, 358, 373, 371, 372, 375, 376,
	377, 378, 379, 381, 383, 391, 392, 394, 397, 398,
	399, 389, 401, 402, 405, 406, 407, 408, 409, 414,
	410, 412, 415, 416, 417, 423, 422, 429, 430, 432,
	433, 434, 33, 43, 44, 46, 49, 60, 61, 62,
	65, 103, 104, 124, 134, 135, 146, 160, 162, 169,
	170, 171, 189, 195, 197, 201, 220, 252, 253, 269,
	273, 286, 288, 299, 324, 354, 369, 384, 385, 386,
	387, 393, 395, 418, 419, 420, 424, 431, 260, -196,
	2, -178, -178, 289, 26, 2, 26, 285, 337, 376,
	378, 2, -447, -248, 2, 26, -182, -178, 86, 158,
	335, -196, 2, -447, -248, 24, 2, -178, 2, -183,
	2, 328, -178, 460, 81, 227, 64, 324, 344, -110,
	392, -109, 384, 330, -111, -385, 2, 242, -178, 460,
	460, 460, 460, 2, 374, 278, 422, 336, 411, 99,
	296, 182, -442, 2, 4, -396, -393, -212, -211, 374,
	99, -210, -202, 450, -209, 460, 460, 460, 2, 204,
	205, 295, 294, 344, 345, 460, 460, 460, 2, 25,
	58, 80, 83, 105, 133, 153, 156, 265, -456, 234,
	275, 293, 330, 343, 373, 381, 394, -460, 361, 59,
	411, -467, 399, 114, -292, 99, 378, 376, 227, 157,
	406, 320, 161, 404, 109, 188, 409, 408, 460, 460,
	25, 58, 67, 83, 114, 133, 153, 156, -458, 275,
	293, 327, 330, 343, 373, 381, 399, 394, 2, 422,
	336, 374, 182, 99, 411, 320, 292, -81, 2, 457,
	29, 347, -151, 374, 198, 2, -178, 204, 205, 2,
	460, 460, -442, 2, 204, 205, 2, 198, 2, 59,
	332, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 2, -139,
	344, 361, 167, 41, 64, 26, 69, 279, 100, 159,
	182, 183, 212, 80, 81, -293, 40, 205, 204, -343,
	375, 331, 337, 371, 392, 86, 412, 321, 434, 297,
	127, 4, 99, 242, 346, 384, 227, 73, -466, 2,
	374, -470, 2, 392, 392, 2, -470, 2, -470, 2,
	-181, 2, 392, 388, -471, 392, 431, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	-153, -155, -154, 460, 460, 460, 460, 460, -139, 344,
	2, 64, 26, -159, 151, -242, -243, 403, 196, 122,
	266, -152, -154, 2, -423, -383, 2, -318, -399, -320,
	448, 449, 443, 248, 435, -331, 105, 404, 260, -398,
	-321, -333, 124, 324, -262, 8, 9, 5, 6, 7,
	-185, -363, -327, -371, 396, 136, 251, -215, 461, 10,
	457, -420, -154, -332, 34, 162, 57, -387, -214, -365,
	-373, -369, -370, -474, 47, 53, 52, 381, 241, 338,
	339, 355, 340, 341, 45, 414, 179, 257, 259, 190,
	4, 197, -213, -202, -417, -418, -393, -394, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 46, 419, -374, 101,
	384, 385, 386, 387, 207, 208, -178, -395, 67, 91,
	92, 90, 95, 94, 96, 93, 346, 411, 58, 33,
	169, 170, 201, 252, 171, 65, -419, 365, 87, 155,
	187, 173, 200, 202, 206, 221, 224, 243, 250, 270,
	272, 319, 352, -475, 420, 134, 135, 273, 286, 369,
	393, 395, 160, 220, 60, 61, -425, 300, -426, -196,
	-425, 460, 460, 462, 460, -236, -237, -238, 2, 26,
	112, 457, 2, -347, 2, 455, -351, -154, 215, -350,
	457, -348, -203, 261, -421, 325, -417, -418, -185, -202,
	-214, 4, -239, 457, 459, 99, 374, 68, -287, 457,
	-178, 26, 260, 388, 462, -329, 457, 260, 154, 263,
	-178, 2, 2, 348, 2, 457, -110, 62, 392, 39,
	344, -306, 2, -307, -175, -176, -177, -356, 203, 291,
	298, 437, 434, -383, -452, 154, 440, 388, -383, -263,
	459, 2, -351, 169, -203, 2, -200, -386, 4, -393,
	-396, -394, -397, 67, -395, 26, 28, 29, 30, 32,
	34, 35, 36, 37, 50, 57, 58, 63, 66, 68,
	80, 86, 90, 91, 93, 92, 94, 95, 96, 105,
	107, 110, 112, 113, 117, 119, 122, 136, 138, 151,
	153, 154, 158, 161, 164, 176, 186, 196, 198, 215,
	218, 225, 228, 229, 248, 251, 256, 260, 261, 265,
	266, 283, 290, 302, 317, 335, 346, 357, 370, 374,
	382, 388, 390, 396, 403, 404, 411, 413, 421, 425,
	426, 427, 428, -398, 2, -351, 169, 2, -205, 169,
	-351, -208, 2, -391, 169, -389, 10, -388, 5, 4,
	-393, -396, -394, 2, -187, -178, 2, -199, -386, 2,
	-218, 169, -203, -204, -208, 388, 462, -254, -211, -212,
	-247, -178, 459, -318, 2, -99, 2, -318, 169, 2,
	-99, 169, 2, -318, 169, 2, -99, 169, 2, 2,
	2, 394, 2, 83, 169, -178, 374, 98, 2, 311,
	-457, 327, 398, 422, 2, 2, 2, 2, 2, 2,
	2, 374, 336, -468, 300, -192, 2, -178, 151, -391,
	169, 2, -391, 169, 2, -206, -208, -206, 182, 199,
	-187, 169, 2, 378, 376, 378, 376, 154, 2, 198,
	2, 198, 2, -352, 2, -353, -203, 2, 2, 2,
	2, 2, 169, -178, 374, 98, 2, 214, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -256, 169, 2,
	-203, -256, 169, 2, -256, 169, 2, -219, 169, 2,
	-218, -187, 169, 2, -392, 169, 2, -391, -392, 169,
	2, -360, 2, -359, -388, 418, -81, 457, 344, 457,
	-391, -203, -203, -318, -99, 154, -318, -99, -151, 151,
	2, 99, 374, -139, 2, 151, 413, 2, 8, 2,
	-391, 331, 297, 143, 2, 348, 2, 64, -293, 434,
	154, 2, 154, 2, -277, 2, 428, -445, 2, 260,
	154, 2, 154, 2, 154, 2, 154, 2, 154, 2,
	294, 345, 205, 2, -99, 425, -318, 425, 2, 391,
	213, 128, 154, -277, 2, 154, 2, 154, 2, 5,
	2, 203, 291, 362, 2, -203, -461, 2, 374, 422,
	336, 2, 2, 76, 77, 154, 2, 154, 434, 2,
	-271, -351, -305, -306, -305, 388, -183, -159, -242, -243,
	-139, 348, 2, 408, 245, 350, 211, -159, -270, -295,
	-296, 225, 138, 256, -276, 26, 112, -276, -276, 51,
	458, 458, 11, 12, 66, 38, 448, 449, 450, 451,
	149, 452, 453, 446, 447, 445, 438, 439, 442, 209,
	210, 82, 441, 440, 75, 232, 326, 139, 140, 141,
	142, 308, 180, 31, 181, 14, 15, 16, 30, 265,
	224, 435, 173, 352, 443, 17, 18, 19, 200, 202,
	250, 43, 176, -184, -220, -318, -318, -318, -318, -318,
	272, 457, -268, -313, 455, -154, 457, 457, 457, 5,
	457, 5, -382, 8, -154, -318, -331, 458, -260, 457,
	-154, -331, -326, 457, 324, 455, 457, -334, -318, 459,
	-427, 429, -367, 457, 288, -366, 457, -366, -366, 423,
	-364, 457, 436, 430, 457, -364, 457, 457, 151, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 423, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 462, -425, -239, 457, -264, -354, -318, 450,
	-264, -264, 260, -257, -318, 87, -280, 206, 243, 155,
	221, 319, 187, -382, -82, -68, -79, -87, -99, -112,
	-143, -144, -315, 461, -342, 436, -154, -348, -202, -154,
	-350, 457, -347, -342, 450, -203, 457, 154, 457, 459,
	154, -247, -386, -187, -203, -213, -214, 111, -257, -442,
	-247, -182, 35, -328, -361, -362, -375, -363, -372, -368,
	-371, 304, 305, 303, 307, 306, 47, 53, 52, 381,
	241, 338, 339, 355, 340, 341, 45, 414, 179, 257,
	259, 190, 4, 46, 419, -374, 197, 189, 195, 191,
	354, 192, 193, 194, 44, 299, 147, 148, 146, 115,
	104, 103, 253, 49, 48, 101, 384, 385, 386, 387,
	207, 208, 420, 365, 60, 61, -442, -247, 151, -385,
	-257, 35, -306, 2, 105, -389, 39, -472, 462, 223,
	-222, 231, 247, 166, 261, 432, 254, -390, 5, 4,
	-327, -339, 105, 227, -371, 9, 449, -379, 8, 448,
	-384, -383, 89, 459, -386, -164, 309, -163, 23, 27,
	116, 416, 129, -229, 184, 278, 124, 358, 407, -449,
	-450, 329, 379, 380, 78, 254, 309, 124, -273, -275,
	35, 97, 245, 274, 54, 177, 236, 237, 360, 424,
	124, 309, 428, 124, -450, 309, -450, -166, 358, 407,
	-449, -450, 329, 309, -165, -229, 124, 461, -96, -391,
	457, -254, 462, 462, -386, 450, 124, 124, 124, 124,
	2, 2, 248, 2, 2, 2, 156, -460, -458, 2,
	2, 2, -203, 169, -205, 169, 2, -208, 422, -241,
	260, -444, -255, 374, -203, -174, -422, 428, 248, 248,
	35, 457, 2, -189, 169, 2, -179, -178, 182, -422,
	248, -352, -216, -203, -216, 347, -196, 35, -315, 124,
	2, 2, 2, -178, -167, 462, 56, 315, 124, -167,
	124, -167, 124, -167, 462, 124, -167, 124, 462, 124,
	124, 458, 462, -360, -391, -149, 428, 154, 86, 457,
	457, -151, -97, -96, -391, -444, -187, 2, -203, 2,
	374, 207, -391, -391, -391, -385, 26, 349, 2, 294,
	345, 77, -203, 374, 99, 182, 70, -446, 151, -443,
	320, -442, -203, 99, -203, 99, -203, 99, -203, -203,
	2, 2, 2, 2, 74, 74, 151, 2, 391, 2,
	391, 2, -178, -178, -178, 223, -203, 151, 374, 182,
	99, 374, -167, 462, -183, -159, -270, -385, 211, 350,
	-159, -296, -295, 26, -318, -300, 145, 244, -318, -320,
	-153, -153, -153, -244, -344, -318, 290, 182, -376, -361,
	-361, -201, -386, 384, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, 224,
	173, 352, 43, 176, -318, 388, -318, -318, -318, -318,
	240, 248, 251, 396, 136, 405, 112, 254, -476, 370,
	37, -324, -154, -261, 457, -338, 32, 357, 26, -331,
	457, 2, -313, -318, -314, -258, -257, -257, 458, 421,
	26, 112, 450, 2, 8, -288, -290, 433, 239, 102,
	168, 238, -289, 334, 458, 462, 35, 458, -318, -258,
	-330, -326, -257, -337, -336, 425, -386, 450, -428, 144,
	161, 8, -380, 8, -380, 384, 384, 8, -380, -380,
	457, 458, 2, 458, 2, 458, 2, 458, 2, 458,
	2, -318, -318, -318, -318, -318, -318, -318, -257, -282,
	2, -377, -257, 4, 433, 239, 102, 168, 238, 334,
	-282, 2, -283, 2, -318, -257, -284, -319, -320, 448,
	449, 443, -331, -285, 2, -318, -258, -318, 50, 218,
	390, -286, -318, 154, -257, -257, 2, -257, 2, -426,
	35, -257, -250, 462, 154, 35, 4, -250, -250, 457,
	458, 462, -281, 165, 235, 230, -281, -347, -280, 206,
	-278, 270, -278, -278, -440, 457, 456, 460, 460, 460,
	460, 460, -342, -188, 455, 463, -386, -341, -340, 35,
	-196, 267, -342, -342, 459, 458, -341, -203, 457, -257,
	-386, 363, 458, 459, 200, 200, 200, 325, 458, 388,
	428, -81, 262, 458, 462, -249, 34, 455, -290, 457,
	-378, 423, 457, 457, 154, -248, -452, 458, 392, -307,
	-221, 298, 356, 310, 342, 372, 9, 8, 8, 462,
	-386, 462, -453, 80, 388, 68, -309, 169, 68, -400,
	-190, 80, -401, -178, 63, 404, 290, 153, -453, 80,
	-453, 80, 80, 347, 361, 51, -351, 38, 38, 26,
	-99, 219, 154, 434, 374, 182, 388, -351, -275, -361,
	97, 236, 237, 51, -381, -379, 449, -381, 51, -381,
	-381, -381, 428, -205, -351, 388, 280, -391, 388, 462,
	38, 38, 26, -99, 219, 154, 388, -218, -188, -357,
	-356, -392, -211, -178, 459, -318, -99, -318, -99, 124,
	2, -468, 214, 457, -225, 248, -274, -273, 248, -207,
	2, -203, 154, -247, -358, 198, 462, -255, 280, 124,
	124, 457, 120, 296, 2, 260, 248, -189, 169, -170,
	377, 124, -312, -311, 426, -301, -99, 457, 105, 35,
	-301, -265, -266, -355, -267, -190, 457, -196, -178, 2,
	-203, -256, -256, -256, -218, -219, -187, -391, -392, -392,
	-81, -359, 458, 458, -148, 264, -147, -178, 5, -151,
	413, -224, -310, -309, -404, -405, -400, 224, 182, 404,
	199, 137, -240, -191, -190, 98, -149, -356, 462, -149,
	-149, -357, -357, -203, 151, 2, 2, -277, -203, -187,
	-218, -203, -247, -247, -187, -187, -187, -99, -318, 344,
	151, 151, 459, -277, 296, 99, 374, 278, 182, -203,
	-218, -187, -203, -351, -159, 408, -298, -379, 457, -299,
	324, 325, 462, -162, 36, 110, 211, -203, 434, 121,
	-318, -318, 388, -476, 370, -324, 121, -318, 240, 251,
	396, 136, 405, 112, 254, 154, 457, -319, -319, 458,
	-259, -318, -318, 456, 465, 458, -243, 462, -242, -318,
	-257, -257, 458, 458, 388, 388, 388, 388, 457, 459,
	-257, -247, 456, 456, 462, 458, -335, -336, 117, -318,
	459, -433, 271, 457, 457, 458, 458, 462, 458, 434,
	434, 458, 458, 458, -318, 35, 462, 462, 462, 458,
	462, 462, 462, 458, 458, 154, 458, 458, -291, 283,
	458, 11, 12, 448, 449, 450, 451, 149, 452, 453,
	446, 447, 445, 438, 439, 440, 75, 232, 326, 14,
	15, 16, 200, 176, -319, -319, -319, 458, -322, -323,
	154, 151, 35, -286, -286, -286, 458, 154, -257, 458,
	458, 457, 458, -312, -354, -251, 2, -347, -198, -386,
	-312, -312, -257, -318, 206, 206, -279, 413, 260, -281,
	-347, -340, 458, -441, -382, -342, -341, -382, -317, -316,
	152, 36, 110, 246, 172, -196, -239, -341, -341, -386,
	-342, 458, -252, -349, -421, -243, 459, -386, -140, 5,
	251, -140, -140, -247, 24, 284, -361, 455, 456, 8,
	8, 457, -380, -380, -247, 154, -383, -306, 402, 72,
	298, 384, -383, -163, 309, -190, -190, -203, 248, -309,
	169, -169, 248, -361, -197, -178, 457, 457, 211, 211,
	-190, -197, 169, -190, 169, -197, -197, -448, 298, 255,
	-318, 226, 296, 249, -164, 309, -99, -99, -99, 457,
	-452, 413, 111, -203, -218, -203, -207, 309, -213, -381,
	-381, -273, 309, -205, -391, 428, -187, -165, -99, -99,
	-99, 457, -188, -166, 309, -146, 178, 458, 450, -178,
	422, -178, -223, -226, -224, -190, -462, 430, 428, 124,
	124, -239, -217, -203, 455, -149, -391, -203, -391, -391,
	-391, 2, 457, 2, -203, 124, 260, 248, -171, 118,
	-473, 440, -187, -243, -318, -272, -304, 317, 260, -240,
	418, -196, -272, -253, 462, 154, 440, 459, -240, 2,
	-167, -167, -167, -167, -167, -81, -149, 462, 457, 440,
	440, 457, -391, -391, 458, 462, -203, -189, 182, 182,
	-195, -179, 458, 462, 459, 457, -149, -96, 154, -46,
	428, 374, 461, 344, 344, -178, -199, -187, -203, -200,
	-218, -299, -318, -344, -203, 461, -318, -318, 121, 121,
	-318, -319, -319, -318, 121, 154, 457, -318, -328, 30,
	30, 458, 462, -314, -318, 458, 421, -243, -243, 458,
	5, 239, 168, 238, -289, 238, -289, -289, 8, 450,
	-386, 458, -326, 119, -318, 382, -386, 450, -434, -193,
	457, -178, 426, -242, -380, -364, -364, 458, -376, -361,
	-318, -318, -318, -318, -318, -318, -322, -318, -376, -361,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, 112,
	248, 254, -319, -323, -322, -318, -318, -361, 458, 458,
	458, -257, -81, -269, 161, -357, 462, -269, -269, 458,
	-347, -347, 457, -318, 206, 456, 458, 462, -341, 456,
	462, 464, 440, -239, 459, -340, 458, 462, -303, 35,
	458, -386, 263, 5, 8, 455, 456, 458, -380, 458,
	458, -247, -318, 388, 388, 124, 248, 415, -406, -401,
	-318, -245, -345, -318, 457, 457, -161, 116, 347, -454,
	2, 124, -167, 124, -167, 432, 457, 457, 388, 428,
	-257, -318, -150, 105, -385, -450, 461, -450, 461, 388,
	388, 280, 428, -257, 388, -149, 154, 2, 2, 2,
	458, 458, 462, -407, 35, 258, -178, -203, -205, 35,
	-64, 428, -356, -382, -174, 2, -294, 413, -188, -203,
	124, -172, 217, -473, -389, -422, -297, -295, -272, -264,
	249, 79, 458, -312, -266, -251, -318, 2, 458, -147,
	-148, -391, -391, -391, -149, -151, -151, -310, 2, 457,
	-189, -179, 457, -151, -191, 2, -392, -99, 264, -203,
	450, -277, -231, -230, 278, 254, -231, 261, 458, -162,
	-188, -318, -318, 121, 30, 30, -318, -318, -328, 458,
	-318, -318, -257, 456, 5, -318, 458, 458, 458, -318,
	459, -435, -178, -318, 458, 458, 458, 458, 462, 462,
	458, 458, 458, 458, -323, 154, 112, 254, 457, 458,
	458, -325, 164, 51, -347, -325, -325, -279, -247, -347,
	-315, -382, -316, -188, 455, -386, -349, 457, 459, 456,
	2, 455, 458, -190, -190, -309, 124, -408, 80, -410,
	66, 137, 86, 248, 251, 404, 290, 63, 105, 302,
	35, 458, 458, 462, -162, -245, -247, 248, 367, 105,
	248, 105, 98, 399, -190, -197, -247, -247, -203, 130,
	458, 462, 440, 2, 450, 450, -207, -205, -391, 130,
	458, -188, -392, -227, 185, -190, -405, -402, -403, 290,
	-409, -411, 137, 290, -99, 2, 457, -225, -274, -99,
	264, 456, 457, -178, 260, 457, -188, -173, 216, -473,
	-389, -170, -272, -302, 457, 260, -99, -243, 440, 458,
	458, 98, 98, -245, 457, 457, -247, 98, 458, -47,
	-48, 182, 80, 282, -200, 374, 182, -162, -318, -318,
	-318, 458, -243, -386, 450, -429, 278, 458, -318, -318,
	-319, 154, 457, -328, -430, 427, -318, -257, -430, -430,
	458, -342, -382, 2, 455, 2, -309, -197, -201, -194,
	-178, 137, 169, 251, 211, 457, -319, -203, 457, 2,
	-464, 107, 186, -308, -465, 85, 368, -345, 458, 458,
	251, 251, -318, -361, -167, -167, 458, 458, -318, 388,
	-385, 84, -383, 2, -450, -318, 388, -228, -229, 176,
	-407, 211, -194, 211, -463, 428, -223, -462, -65, -66,
	389, -356, -245, -203, -245, 260, -473, -389, -171, 113,
	-247, 80, -297, -324, -149, 457, 457, 458, -245, -245,
	458, 457, -149, 462, 26, 457, 26, 457, -203, -218,
	458, -243, 51, 458, 458, -319, -328, 458, -431, -432,
	-193, -341, 456, 2, -410, -194, 248, -318, -180, 457,
	-318, 186, 108, 174, -227, 457, 302, -186, 66, 457,
	457, 457, 440, 154, 457, -462, 276, 457, 98, 245,
	458, 35, -66, 9, 458, -294, 458, -203, -389, -172,
	408, 249, 458, -197, -272, -392, -392, -308, 458, 458,
	-392, -48, -247, -247, -436, 296, 325, 163, -257, 458,
	462, 35, 124, 458, -412, 233, -178, 458, 108, 174,
	-228, -247, -203, -451, 413, -201, -233, -232, -230, -235,
	-234, -230, -257, -383, 84, 276, -257, -203, -246, -346,
	-190, 98, -227, -99, -308, 457, -308, 457, -173, 347,
	-311, 458, 458, -227, -308, 458, 458, 458, 458, -437,
	-438, 43, 401, 89, -318, -437, -437, -432, -434, 137,
	-413, -416, -415, 260, 353, 155, 277, 458, 367, 424,
	-464, 458, -239, -318, 458, 462, 418, 458, 462, 418,
	458, 154, 458, 457, 458, 462, -228, -463, -227, -245,
	-227, -245, -265, -149, -149, -228, -227, -149, -439, 123,
	-438, 287, 150, 324, 287, 150, -439, -439, -194, -415,
	260, -416, 260, 408, 109, -412, -232, 176, -234, 154,
	276, -247, -346, -462, -228, 458, -228, 458, -312, -228,
	89, 161, 383, 245, 30, -414, 245, 315, 56, 347,
	-414, -413, 457, 457, 458, -469, 426, -308, -469, -308,
	324, 268, -438, 22, 251, 105, -464, -257, -257, -168,
	56, 315, 2, -227, -227, 458, 458, -228, -228, -228,
	388, -469, -469, 457, -257, 458, -228,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 364, 365, 367,
	368, 369, 371, 372, 374, 376, 378, 380, 381, 383,
	385, 387, 388, 389, 390, 391, 393, 395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 455,
	0, 921, 923, 925, 927, 25, 26, 0, 0, 190,
	192, 194, 0, 218, 220, 222, 223, 225, -2, 0,
	318, 319, 321, 323, -2, -2, 0, 0, 442, 444,
	0, 0, 0, 464, 465, 0, 1011, -2, 458, 460,
	462, 527, 529, 531, 533, 535, 537, 539, 540, 542,
	544, 546, 548, 550, 552, 554, 556, 558, 560, 562,
	564, 566, 568, 570, 572, 574, 576, -2, -2, -2,
	0, -2, -2, -2, 939, 29, 31, 33, 35, 37,
	39, 41, 61, 274, 275, 277, 279, 281, 284, 285,
	287, 1053, 325, 327, 329, 331, 333, 0, -2, 1065,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1029, 1031, 1033,
	1035, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 366, 370, 373, 375, 377, 379, 382, 384,
	386, 392, 394, 396, 816, 1661, 1675, 1676, 1677, 1680,
	1681, 1682, 1683, 1684, 1685, 2021, 2101, 2102, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 0, 420,
	418, 1655, 421, 1855, 423, 425, 312, 313, 314, 315,
	316, 317, 0, 435, 429, 434, 436, 438, 439, 440,
	441, 415, 413, 0, 435, 1707, 433, 919, 920, 914,
	915, 1888, 949, 454, -2, -2, -2, 1990, -2, 486,
	-2, 493, 1993, 1890, 498, 0, 500, -2, 503, 922,
	924, 926, 27, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, -2, -2, -2, -2, 0, 0,
	1744, 1631, 1677, 1634, 1629, 191, 193, 195, 196, 0,
	0, 0, 0, 0, 0, 219, 221, 224, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 724, 0, 0,
	729, 867, 868, 889, 0, 0, 0, 0, 320, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 0, 0, 0, 252, 358, 359, 0,
	1054, 0, 0, 0, 0, 171, 162, 0, 0, 712,
	443, 445, 0, 157, 0, 0, 918, 0, 173, 0,
	0, 459, 461, 463, 528, 530, 532, 534, 536, 538,
	541, 543, 545, 547, 549, 551, 553, 555, 557, 559,
	561, 563, 565, 567, 569, 571, 573, 575, 577, 578,
	0, 0, 0, 0, -2, -2, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 581, 583, 584, 585, 0, 633, 650, 0, 858,
	1055, 951, 929, 942, 951, 931, 932, 933, 934, 935,
	940, 941, 944, 0, 936, 937, 938, 30, 32, 34,
	36, 38, 40, 42, 276, 278, 280, 282, 286, 288,
	-2, 1027, 1028, 326, 328, 330, 332, 334, 446, 0,
	448, 0, 582, 1015, 0, -2, 0, 1059, 1059, 1059,
	0, 0, 1028, 1026, 0, 451, 452, 507, 508, 1289,
	0, 0, 0, 0, 0, 1529, 1373, 0, 509, -2,
	1404, 1406, 1969, 1990, 1528, 1408, 1409, 1410, 1411, 1412,
	0, 0, 1415, 0, 1417, 1418, 1419, 1420, 0, 1422,
	0, 1426, 1427, 1428, 0, 1974, 1608, 1673, -2, 1194,
	1195, 1196, 1197, 1198, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1669, 0, 1495, 1442, -2, 1694, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1753, -2, -2, -2, -2, -2, -2, -2, 1250, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2004, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 0, 1958,
	1975, 1976, 1981, 1983, 1977, 1966, 1465, -2, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 1251, -2, 1970, 1971, 1986, 1987, 1992,
	1997, 1998, 1973, 1982, -2, -2, 1045, 1863, 1048, 816,
	1046, 1030, 1032, 0, 1034, 0, 0, 0, 1039, 1062,
	1060, 0, 1095, 1043, 1044, 1054, 1113, 1136, 0, 1118,
	0, 1136, 1162, 0, 1123, 1883, 1443, 1444, 0, 1677,
	1674, -2, 0, 0, 0, 0, 0, 0, 416, 0,
	422, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 456, 457, 0, 481, 0, 485, 1965, -2, 1712,
	1903, -2, 489, 952, 956, 957, 958, 959, 0, 0,
	0, 0, 0, 495, 0, 0, 482, 483, 501, 504,
	0, 51, 0, 1975, 1162, 53, 0, 1645, 1699, 1700,
	1701, 1702, 1703, 2004, 2020, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 55, 0, 1975, 58, 0, 1975,
	0, -2, 62, 0, 1975, 174, 175, 1690, 1691, 1695,
	1696, 1697, 1698, 65, 0, 1651, 67, 0, 1648, 76,
	0, 1975, 0, 1628, -2, 0, 0, 704, 1625, 1630,
	705, 1635, 0, 197, 198, 199, 200, 201, 1975, 203,
	204, 0, 206, 207, 1975, 209, 210, 0, 212, 227,
	228, 0, 230, 0, 1975, 0, 0, 0, 236, -2,
	253, 0, 250, 0, 240, 241, 243, 244, 245, 246,
	247, 0, 0, 0, 873, 292, 290, 1656, 0, -2,
	1975, 861, 864, 1975, 866, 878, 1659, 0, -2, 0,
	1052, 1975, 966, 725, 726, 727, 728, 0, 311, 0,
	979, 0, 981, 0, 1001, 1168, 1113, 254, 255, 256,
	257, 258, 1975, 0, 0, 0, 263, 0, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 150, 1975, 337,
	356, 150, 1975, 340, 150, 1975, 343, 150, 1975, 346,
	1623, 150, 1975, 349, 350, 1975, 352, 176, 353, 1975,
	355, 0, -2, 409, 1663, -2, 361, 0, -2, 0,
	188, 0, 0, 710, 711, 0, 916, 917, 0, 0,
	466, 0, 0, 579, 580, 0, 0, 590, 591, 592,
	593, 1891, 1861, 1769, 597, 0, 600, -2, 0, 0,
	0, 604, 0, 609, 610, 611, 0, 709, 613, 0,
	0, 615, 0, 619, 0, 622, 0, 624, 0, 626,
	-2, -2, -2, 637, -2, 0, 641, 0, 643, 0,
	0, 0, 0, 658, 659, 0, 664, 0, 667, 668,
	669, 0, 671, 672, 673, 674, 0, 676, 677, -2,
	-2, 681, 683, 0, 690, 0, 695, 0, 586, 587,
	150, 1166, 928, -2, 930, 0, 946, 1018, -2, 0,
	447, 0, 450, 1022, 0, 1024, 0, 1016, 1021, 1074,
	1075, 0, 0, 0, 0, 1057, 1058, 0, 0, 0,
	1013, 1014, 0, 0, 0, 0, 1534, 1535, 1536, 1537,
	1538, 1539, 1542, 1543, 1540, 1541, 1544, 1545, 0, 0,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 1548, 1549, 0, 0,
	1551, 0, 1553, 0, 0, 0, 0, 0, 0, 1352,
	1354, 1616, 0, 0, 1550, 1294, 1295, 1296, 1331, 1332,
	0, 0, 1405, 1613, 1612, 1407, 0, 1565, 0, 1414,
	0, 1286, 1421, 1642, -2, 0, 1529, 1560, 0, 0,
	1429, 1430, 1431, 0, 0, 1565, 0, 0, 1607, 0,
	1497, 0, 1230, 0, 1231, 1232, 0, 1233, 1234, 1247,
	1260, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 0, 1588, -2, 0, 0,
	0, 0, 0, 1047, 0, 0, 1099, 1617, 1621, 1622,
	1099, 1099, 0, 0, 1566, 1159, 1159, 0, 0, 1155,
	1155, 1155, 1153, 1130, 0, 397, 399, 401, 403, 404,
	405, 407, 1136, 0, 1146, 0, 1136, 1136, 0, -2,
	1118, 0, 0, 1146, 1163, 1164, 0, 0, 0, 0,
	0, 0, 1678, 0, 0, 0, 1665, 0, 0, 0,
	427, 437, 1054, 0, 1568, 1185, 1179, 1188, 1189, 1190,
	1191, 1237, 1238, 1239, 1240, 1241, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, -2, 1248, 1250, 1271, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1243, 0,
	1218, 1218, 1218, 1235, 1236, 1259, 1270, 1262, 1270, 1266,
	1186, 1187, 1253, 1254, 1255, 1256, 0, 431, 0, 0,
	0, 0, -2, 491, 496, 497, 0, 0, 954, 0,
	960, 518, 519, 520, 962, 963, 0, 494, 521, 522,
	523, 524, 525, 526, 0, 833, 0, 835, 1637, 0,
	492, 511, 499, 0, 505, 77, 911, 116, 0, 911,
	911, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	101, 112, 89, 90, 0, 0, 0, 0, 59, 841,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 100, 0, 95, 79, 0, 0,
	0, 102, 114, 0, 141, 143, 0, 0, 1149, 158,
	0, 703, 0, 0, 1678, 1633, 0, 0, 0, 0,
	229, 231, 0, 233, 234, 235, 0, 872, 0, 242,
	239, 283, 790, 1975, 840, 1975, 838, 1660, 0, 0,
	0, 309, 304, 0, 306, 859, 0, 1051, 0, 0,
	0, 0, 879, 0, 1975, 884, 1647, 1686, 1687, 968,
	0, 1174, 0, 982, 0, 0, 1169, 0, 1171, 0,
	260, 261, 262, 0, 335, 0, 148, 149, 0, 338,
	0, 341, 0, 344, 0, 0, 347, 0, 0, 0,
	0, 1054, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 188, 160, 188, 188, 1149, 468, 1149, 470,
	0, 0, 594, 595, 596, 598, 599, 601, 602, -2,
	-2, 691, 661, 0, 0, 0, 660, 612, 0, 697,
	1879, 707, 614, 1744, 617, 1744, 620, 1744, 623, 625,
	628, 653, 636, 640, 0, 0, 0, 645, 0, 647,
	0, 649, 661, 662, 665, 670, 675, 0, 0, 0,
	0, 0, 857, 0, 945, 1019, 1021, 449, 0, 1025,
	1017, 1072, 1073, 1078, 1079, 1085, 1088, 1089, 1081, 1289,
	1040, 1041, 1042, 1066, 1067, 898, 0, 2101, 1290, 1180,
	1291, 1292, 1644, 0, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, -2, -2, -2, -2, -2, -2,
	-2, -2, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, -2, -2, -2, 1329, 1330, -2, 1552,
	1554, 0, 1616, 0, -2, 0, -2, -2, -2, -2,
	1349, 0, 1351, 1356, 1358, 1360, 0, 0, 0, 0,
	1615, 1370, 1599, 1600, 0, 0, 1531, 1532, 1533, 1355,
	0, 1374, 1614, 1611, 0, 0, 1564, 1065, 1433, 0,
	0, 0, 0, 1440, 0, 1643, 1285, 1272, 1273, 1274,
	1275, 1276, 1277, 1287, 1425, 1562, 0, 1561, 0, 0,
	0, 1572, 0, 1606, 1602, 0, 1666, 1672, 1505, 0,
	0, 0, 0, 1640, 0, 0, 0, 0, 0, 0,
	0, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 1575, -2, -2, -2, -2, -2, -2, -2,
	0, 1479, 0, 1481, 1566, 1585, 0, 0, 1375, 0,
	0, 0, 1529, 0, 1484, 1566, 1593, 0, 0, 0,
	0, 0, 1566, 0, 1598, 0, 1491, 0, 1493, 1049,
	0, 0, 1174, 0, 0, 0, 1620, 1174, 1174, 0,
	1094, 0, 0, 1156, 1157, 1158, 0, 0, 1159, 0,
	1150, 1154, 1151, 1152, 0, 0, 1136, 398, 400, 402,
	406, 408, 1146, 1110, 0, 0, 1646, 1116, 1145, 0,
	816, 1135, 1146, 1146, 0, -2, 1120, 0, 0, 1065,
	-2, 189, 815, 0, 0, 0, 0, 417, 419, 0,
	0, 411, 0, 414, 0, 1175, 1178, 0, 1192, 0,
	0, -2, 0, 0, 0, 0, 0, 484, 0, 953,
	961, 0, 515, 0, 517, 0, 834, 1639, 1638, 0,
	506, 0, 0, 0, 0, 910, 120, 1975, 0, 152,
	0, 0, 784, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	91, 0, 0, 0, 0, 0, 0, 0, 842, 843,
	845, 851, 853, 0, 847, 1641, 0, 848, 0, 850,
	852, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 92, 0, 0, 0, 0, 1627, 179,
	1148, 0, 1626, 1636, 0, 202, 205, 208, 211, 0,
	237, 0, 0, 732, 715, 0, 836, 839, 0, 816,
	871, 1658, 0, 291, 188, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 1975, 970,
	976, 0, 1065, 1173, 0, 999, 984, 0, 0, 0,
	999, 1003, 1004, 1006, 1007, 0, 0, 1170, 0, 264,
	357, 150, 150, 150, 1624, 150, 150, 177, 351, 354,
	360, 410, 1054, 188, 186, 1840, 184, 181, 183, 0,
	0, 0, 733, 735, 736, 737, 738, 0, 1687, 0,
	1798, 1687, 0, 987, 989, 0, 155, 188, 0, 0,
	303, 467, 472, 588, 0, 630, 655, 603, 605, 606,
	607, 0, 708, 706, 616, 618, 621, 639, 642, 644,
	0, 0, 0, 657, 0, 0, 0, 0, 0, 692,
	693, 694, 696, 1167, 1020, 1023, 0, 1083, 0, 1082,
	1086, 1087, 0, 1069, 896, 897, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1371, 0, -2, 1350, 1353,
	1357, 1359, 1361, 0, 0, 0, 0, 0, 0, 1555,
	0, 1557, 1372, 1609, 1612, 1527, 0, 0, 1064, 1065,
	1065, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	1563, 0, 1570, 1571, 0, 1432, 0, 1603, 0, 0,
	0, 1441, 0, 0, 0, 1242, 1216, 0, 1270, 1268,
	1269, 1263, 1270, 1267, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 1464, 1476, 0, 1478, 1480, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1378, 1379, 1380, 1483, 1591, 1592,
	0, 0, 0, 0, 0, 0, 1489, 0, 1597, 1490,
	1492, 1054, 1096, 1091, 1618, 1149, 1098, 1100, 1619, 1649,
	1091, 1091, 0, 1567, 0, 0, 1140, 0, 0, 0,
	1142, 0, 1131, 0, 1133, 1146, 1115, 0, 0, 1108,
	0, 1104, 1105, 1106, 1107, 816, 1144, 1117, 1121, 1666,
	0, 1165, 0, 1125, 1128, 0, 0, 1679, 213, 216,
	217, 214, 215, 426, 0, 0, 1569, 0, 1181, 0,
	0, 0, 0, 0, 430, 0, 480, -2, 513, 514,
	516, 0, 512, 117, 911, 0, 0, 902, 0, 122,
	1975, 131, 0, 761, 0, 1650, 0, 0, 0, 0,
	913, 0, 1975, 150, 1975, 150, 133, 136, 0, 140,
	138, 0, 0, 752, 78, 911, 81, 85, 93, 0,
	0, 0, 99, 0, 0, 0, 904, 0, 846, 849,
	855, 60, 0, 906, 900, 0, 899, 142, 83, 87,
	94, 0, 908, 80, 0, 188, 0, 159, 1632, 0,
	0, 0, 0, 0, 731, 801, 0, 0, 0, 0,
	0, 0, 297, 293, 0, 302, 308, 307, 862, -2,
	865, 874, 0, 876, 888, 0, 0, 0, 972, 976,
	0, 975, 1052, 1077, 1172, 977, 999, 0, 0, 0,
	986, 983, 980, 1174, 0, 0, 0, 0, 0, 259,
	336, 339, 342, 345, 348, 362, 163, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 1687, 1687,
	0, 1654, 0, 0, 0, 0, 156, 161, 0, 469,
	0, 0, 0, 646, 648, 661, 684, 685, 747, 0,
	747, 0, 0, 1068, 898, 0, 1293, 1334, 0, 0,
	-2, 0, 0, 1338, 0, 0, 0, -2, 0, 0,
	0, 1556, 1558, 0, 1611, 1434, 0, 0, 0, 1438,
	1416, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 0, 1423,
	1424, 1530, 1573, 1601, 1605, 0, 1667, 1671, 1503, 1504,
	1508, 1657, 0, 0, 0, 1261, 1265, 1445, 0, 0,
	0, 0, 0, 0, 0, 1574, 1584, 1586, 1376, 1377,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	-2, -2, -2, 1394, 1395, 1396, -2, -2, -2, 0,
	0, 0, 1587, 1589, 1590, 1594, 1595, 0, 1486, 1487,
	1488, 1596, 0, 1093, 0, 1097, 0, 1093, 1093, 1061,
	1138, 0, 0, 1161, 0, 1113, 1132, 0, 1122, 1111,
	0, 1112, 0, 1143, 0, 1119, 1124, 0, 1127, 0,
	1434, -2, 428, 412, 0, 0, 1183, 1193, 0, 1245,
	1249, 432, 1147, 0, 0, 0, 0, 151, 759, 783,
	0, 0, 891, 898, 0, 0, 124, 0, 0, 0,
	132, 0, 129, 0, 135, 139, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 103, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 232, 870, 238,
	741, 789, 0, 791, 0, 716, 0, 790, 840, 0,
	289, 0, 296, 0, 860, 875, 0, 0, 0, 0,
	0, 974, 976, 0, 967, 968, 999, 1076, 978, 997,
	-2, 996, 0, 1065, 1005, 1002, 1008, 1009, 0, 185,
	0, 180, 182, 0, 166, 0, 0, 734, 739, 0,
	0, 0, 0, 0, 988, 990, 0, 172, 0, 589,
	608, 656, 686, 746, 0, 0, 688, 1080, 1084, 1070,
	898, 1336, 1340, 0, 0, 0, 1342, -2, 0, 1364,
	-2, -2, 1559, 1610, 1413, 1065, 1435, 1437, 1288, 1604,
	0, 1510, 1507, 0, 1494, 1217, 1455, 1456, 0, 0,
	1459, 1461, 1462, 1463, 1583, 0, 0, 0, 0, 1485,
	1050, 1499, 0, 0, 1101, 1499, 1499, 1139, 0, 1141,
	1136, 1134, 1109, 1102, 0, 1667, 1126, 0, 0, 1176,
	1182, 0, 1244, 118, 119, 121, 0, 760, 0, 763,
	0, 0, 0, 0, 770, 771, 0, 0, 0, 0,
	0, 805, 814, 0, 893, 0, 0, 0, 126, 145,
	0, 0, 912, 0, 150, 150, 0, 0, 903, 0,
	0, 0, 0, 106, 0, 0, 905, 907, 901, 0,
	0, 909, 178, 749, 0, 801, 793, 794, 795, 0,
	800, 802, 0, 0, 720, 717, 732, 715, 837, 869,
	0, 294, 0, 887, 0, 0, 0, 964, 976, 0,
	969, 970, 310, 0, 0, 0, 985, 1077, 0, 187,
	188, 0, 0, 0, 0, 0, 0, 0, 188, 471,
	473, 0, 0, 479, 745, 0, 0, 1071, 1344, -2,
	-2, 1365, 0, 1668, 1670, 1065, 0, 1496, 0, 0,
	-2, 0, 0, 0, 1036, 0, 1092, 1090, 1037, 1038,
	1160, 1146, 0, 1129, 0, 1184, 123, 0, 764, 765,
	1653, 767, 0, 769, 772, 0, 774, 1689, 0, 778,
	785, 806, 0, 741, 0, 811, 812, 892, 787, 0,
	125, 127, 144, 895, 128, 134, 0, 0, 82, 0,
	0, 1738, 109, 107, 105, 84, 0, 715, 748, 0,
	792, 0, 803, 804, 718, 0, 0, 0, 295, 298,
	0, 301, 0, 888, 0, 0, 0, 971, 972, 0,
	0, 0, 999, 1010, 165, 0, 0, 814, 0, 0,
	782, 0, 170, 0, 475, 0, 477, 0, 687, 689,
	1436, 1514, 0, 1457, 1458, -2, 0, 1402, 1498, 1500,
	0, 1114, 1103, 1177, 762, 766, 0, 0, 820, 0,
	0, 0, 809, 810, 749, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 721, 0,
	741, 0, 299, 300, 814, 0, 814, 0, 973, 974,
	0, 992, 993, 995, 1000, 0, 0, 741, 814, 781,
	0, 474, 0, 0, 0, 0, 0, 0, 1509, 1403,
	0, 0, 0, 773, 825, 0, 0, 0, 807, 808,
	805, 0, 816, 130, 0, 894, 0, 753, 0, 0,
	756, 0, 0, 110, 1738, 108, 0, 0, 0, 797,
	799, 722, 749, 720, 741, 0, 741, 0, 965, 0,
	994, 188, 188, 749, 741, 188, 476, 478, 1506, 1526,
	1515, -2, 1938, 1741, 0, 1526, 1526, 1501, 1502, 0,
	775, 821, 822, 0, 817, 818, 819, 1688, 776, 777,
	786, 813, 820, 146, 750, 0, 0, 751, 0, 0,
	113, 0, 115, 0, 796, 0, 715, 719, 749, 0,
	749, 0, 1174, 167, 168, 779, 749, 169, 1511, 0,
	0, 1517, 1518, 1519, 1520, 1521, 1512, 1513, 768, 823,
	0, 824, 0, 0, 0, 825, 754, 0, 757, 0,
	111, 0, 798, 714, 885, 814, 885, 814, 991, 780,
	0, 1523, 1524, 0, 0, 826, 0, 829, 830, 0,
	827, 805, 0, 0, 744, 880, 0, 741, 882, 741,
	1522, 1525, 1516, 828, 831, 832, 788, 0, 0, 740,
	742, 743, 886, 749, 749, 749, 0, 885, 885, 755,
	0, 881, 883, 0, 0, 749, 758,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 446, 3, 452, 447, 3,
	457, 458, 450, 448, 462, 449, 459, 451, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 465, 3,
	438, 440, 439, 442, 461, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 455, 3, 456, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 463, 445, 464, 443,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 441, 57781, 444, 57782, 454, 57783, 460, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1073
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1093
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1112
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1217
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1225
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1267
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1299
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1303
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1313
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1323
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1332
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1353
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1371
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1385
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1403
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1422
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1458
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1469
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1479
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1498
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1509
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1515
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1541
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1546
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1649
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1666
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1685
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1699
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1737
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1805
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1835
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1896
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1905
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1911
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1916
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1921
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1926
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1931
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1935
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1954
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1962
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1984
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2018
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2032
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2048
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2104
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2155
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2177
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2189
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2190
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2193
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "CREATE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplemented(sqllex, "create cast")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplemented(sqllex, "create operator")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplemented(sqllex, "create publication")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplemented(sqllex, "create rule")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2221
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2224
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2225
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2228
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2229
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2255
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2256
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2258
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2260
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2295
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2308
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2321
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2327
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2331
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2342
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2362
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2370
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2405
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2429
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2436
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2441
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2442
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2452
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2454
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return helpWith(sqllex, "DROP")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2459
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2515
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2530
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2546
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2568
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2587
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2592
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2635
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2639
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "DELETE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2644
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2645
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "INSERT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2659
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2660
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "DELETE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "INSERT")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2674
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2693
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2701
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2717
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2734
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2742
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2764
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2775
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2795
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "GRANT")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2837
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2846
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2874
		{
			return helpWith(sqllex, "RESET")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2883
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2890
		{
			return helpWith(sqllex, "RESET")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2901
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "USE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2920
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2921
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2928
		{
			return helpWith(sqllex, "USE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2944
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2959
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3099
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3102
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3106
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3125
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3132
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3137
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3142
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3147
		{
			return unimplemented(sqllex, "set from current")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3156
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3161
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3168
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3189
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3236
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3242
		{
			sqlVAL.union.val = tree.Low
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3246
		{
			sqlVAL.union.val = tree.Normal
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = tree.High
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3293
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3305
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3307
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3309
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3310
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3311
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3337
		{
			sqlVAL.str = "client_encoding"
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.str = "timezone"
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3355
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3359
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3397
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3405
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3413
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3430
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3476
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3500
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3519
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3541
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3552
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3568
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = true
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = true
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = false
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3598
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3626
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3638
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3643
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3645
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3649
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3652
		{
			sqlVAL.union.val = true
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = false
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3664
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3666
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3669
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3718
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3732
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3739
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3751
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3756
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3761
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3777
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3781
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3794
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3797
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3812
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3820
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3828
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3836
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3843
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3850
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3854
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3865
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3877
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3881
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3888
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3893
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4021
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4060
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4064
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4082
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4114
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4117
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4153
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4165
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4178
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4179
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4184
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4195
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4207
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4209
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4223
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4224
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4225
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4226
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4227
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4228
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4229
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4230
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4257
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4260
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4264
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4280
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4285
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4296
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.str = ""
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4346
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4380
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4443
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4467
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4481
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 779:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4536
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4574
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4598
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4608
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4623
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4630
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4636
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4647
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4673
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4688
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4689
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4690
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4691
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4692
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4693
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4823
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4827
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4852
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4857
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4861
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4865
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4872
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4873
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4875
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4876
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4877
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4880
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4882
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4884
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4889
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4890
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4892
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4905
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4920
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = nil
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4945
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4950
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4951
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4959
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4967
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4968
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4971
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4972
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4978
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4980
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4982
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4984
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4986
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4988
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5004
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5018
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5033
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5047
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5061
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5065
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.union.val = false
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.union.val = true
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = false
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5100
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5113
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.str = ""
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = tree.Descending
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 899:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5150
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5154
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5160
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5166
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5174
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5180
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5188
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5194
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5202
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5211
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5212
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5215
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5216
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5227
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5237
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5246
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5249
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5260
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5264
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5266
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5285
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5287
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5290
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5300
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5303
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5308
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5317
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5318
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5319
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5327
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5334
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5337
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5338
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.str = ""
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5350
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.str = ""
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5370
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5374
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5384
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5399
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5403
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5412
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5448
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5468
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5482
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.str = ""
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5511
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5512
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5524
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5538
		{
			return helpWith(sqllex, "INSERT")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5556
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5560
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5569
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5614
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5631
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5640
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5649
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5678
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5710
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5757
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5763
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5807
		{
			sqlVAL.union.val = tree.ForNone
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5809
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5816
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5851
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5852
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5853
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5888
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5914
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5936
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5958
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5974
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5978
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5982
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6001
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = nil
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6015
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6019
		{
			sqlVAL.union.val = true
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = false
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = false
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = true
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6044
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6045
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6049
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6079
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6084
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6099
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6128
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6173
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6174
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6177
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6178
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6195
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6231
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6233
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6248
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6256
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6270
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6275
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6280
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6291
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6303
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6322
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6330
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6361
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6375
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6402
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6410
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6421
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6473
		{
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6475
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = nil
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6479
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = true
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = false
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.str = tree.AstFull
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6578
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.str = tree.AstRight
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.str = tree.AstInner
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6593
		{
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.str = tree.AstHash
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.str = ""
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6655
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6660
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6678
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6684
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6692
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6721
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6734
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6742
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6743
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6765
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6767
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6775
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6787
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6788
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = types.String
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = types.Name
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6829
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = types.INet
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = types.Oid
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6909
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6917
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = nil
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = types.Int2
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.Int2
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = types.Int4
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = types.Int
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = types.Int
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = types.Int
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = types.Float4
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.Float4
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Float
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.Float
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6992
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7000
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = types.Bool
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.Bool
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = types.RegType
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = types.Float
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7060
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7066
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7088
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = types.String
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = true
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = false
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = types.Date
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7137
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7142
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7149
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7150
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7152
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7160
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7176
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = true
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = false
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = false
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = types.Interval
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = tree.Year
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = tree.Month
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Day
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Month
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = nil
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.Second
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7263
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7310
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7463
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7620
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7642
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7841
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7850
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7868
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7877
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7916
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7927
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7928
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7954
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8076
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8078
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8101
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8110
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8111
		{
			return unimplemented(sqllex, "treat")
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8132
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8137
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8142
		{
			return unimplemented(sqllex, "within group")
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8143
		{
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8147
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8178
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.str = ""
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8267
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8280
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8348
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8377
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.Any
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Some
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.All
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = tree.Div
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.LT
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = tree.GT
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = tree.LE
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.GE
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8417
		{
			sqlVAL.union.val = tree.NE
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8421
		{
			sqlVAL.union.val = tree.Like
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8659
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8722
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8737
		{
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8738
		{
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8742
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8761
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8810
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8818
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8858
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8868
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8884
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8904
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8913
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8921
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9025
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9047
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9051
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9055
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9068
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9086
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9099
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9106
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9131
		{
			sqlVAL.str = ""
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9137
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
