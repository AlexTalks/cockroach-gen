// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:585
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9513

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1037,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	179, 876,
	196, 876,
	211, 244,
	288, 244,
	296, 716,
	323, 244,
	332, 716,
	369, 716,
	392, 244,
	416, 716,
	-2, 0,
	-1, 74,
	211, 248,
	-2, 0,
	-1, 75,
	106, 1037,
	185, 1037,
	402, 1037,
	403, 1037,
	-2, 0,
	-1, 87,
	119, 1011,
	134, 1011,
	193, 1011,
	222, 1011,
	253, 1011,
	263, 1011,
	397, 1011,
	-2, 998,
	-1, 117,
	124, 637,
	202, 629,
	210, 637,
	290, 623,
	341, 623,
	385, 637,
	-2, 0,
	-1, 118,
	4, 1039,
	21, 1039,
	22, 1039,
	23, 1039,
	24, 1039,
	25, 1039,
	27, 1039,
	32, 1039,
	37, 1039,
	38, 1039,
	39, 1039,
	40, 1039,
	41, 1039,
	42, 1039,
	43, 1039,
	44, 1039,
	45, 1039,
	46, 1039,
	47, 1039,
	49, 1039,
	50, 1039,
	51, 1039,
	52, 1039,
	53, 1039,
	54, 1039,
	57, 1039,
	58, 1039,
	59, 1039,
	60, 1039,
	62, 1039,
	63, 1039,
	67, 1039,
	68, 1039,
	69, 1039,
	70, 1039,
	71, 1039,
	73, 1039,
	74, 1039,
	75, 1039,
	76, 1039,
	78, 1039,
	80, 1039,
	81, 1039,
	82, 1039,
	85, 1039,
	86, 1039,
	94, 1039,
	95, 1039,
	96, 1039,
	97, 1039,
	98, 1039,
	99, 1039,
	100, 1039,
	101, 1039,
	103, 1039,
	105, 1039,
	106, 1039,
	108, 1039,
	111, 1039,
	112, 1039,
	113, 1039,
	115, 1039,
	117, 1039,
	118, 1039,
	120, 1039,
	121, 1039,
	122, 1039,
	123, 1039,
	124, 1039,
	125, 1039,
	126, 1039,
	127, 1039,
	128, 1039,
	129, 1039,
	130, 1039,
	131, 1039,
	133, 1039,
	139, 1039,
	140, 1039,
	141, 1039,
	142, 1039,
	143, 1039,
	144, 1039,
	146, 1039,
	148, 1039,
	152, 1039,
	153, 1039,
	155, 1039,
	156, 1039,
	158, 1039,
	159, 1039,
	161, 1039,
	162, 1039,
	163, 1039,
	164, 1039,
	165, 1039,
	166, 1039,
	167, 1039,
	168, 1039,
	170, 1039,
	171, 1039,
	173, 1039,
	174, 1039,
	175, 1039,
	179, 1039,
	180, 1039,
	181, 1039,
	182, 1039,
	185, 1039,
	186, 1039,
	187, 1039,
	188, 1039,
	189, 1039,
	190, 1039,
	191, 1039,
	192, 1039,
	194, 1039,
	196, 1039,
	198, 1039,
	200, 1039,
	201, 1039,
	202, 1039,
	204, 1039,
	205, 1039,
	208, 1039,
	209, 1039,
	210, 1039,
	211, 1039,
	213, 1039,
	214, 1039,
	216, 1039,
	217, 1039,
	219, 1039,
	220, 1039,
	223, 1039,
	224, 1039,
	227, 1039,
	228, 1039,
	230, 1039,
	231, 1039,
	232, 1039,
	233, 1039,
	234, 1039,
	235, 1039,
	236, 1039,
	237, 1039,
	238, 1039,
	239, 1039,
	241, 1039,
	242, 1039,
	243, 1039,
	244, 1039,
	246, 1039,
	249, 1039,
	250, 1039,
	251, 1039,
	252, 1039,
	254, 1039,
	255, 1039,
	256, 1039,
	258, 1039,
	259, 1039,
	260, 1039,
	261, 1039,
	264, 1039,
	265, 1039,
	267, 1039,
	269, 1039,
	270, 1039,
	271, 1039,
	272, 1039,
	273, 1039,
	274, 1039,
	275, 1039,
	276, 1039,
	277, 1039,
	278, 1039,
	280, 1039,
	281, 1039,
	282, 1039,
	283, 1039,
	284, 1039,
	285, 1039,
	287, 1039,
	289, 1039,
	290, 1039,
	291, 1039,
	292, 1039,
	293, 1039,
	294, 1039,
	295, 1039,
	296, 1039,
	297, 1039,
	299, 1039,
	300, 1039,
	301, 1039,
	302, 1039,
	303, 1039,
	305, 1039,
	306, 1039,
	307, 1039,
	308, 1039,
	309, 1039,
	310, 1039,
	311, 1039,
	312, 1039,
	314, 1039,
	316, 1039,
	317, 1039,
	318, 1039,
	319, 1039,
	320, 1039,
	321, 1039,
	323, 1039,
	324, 1039,
	325, 1039,
	326, 1039,
	327, 1039,
	328, 1039,
	329, 1039,
	330, 1039,
	332, 1039,
	333, 1039,
	334, 1039,
	335, 1039,
	336, 1039,
	337, 1039,
	338, 1039,
	339, 1039,
	340, 1039,
	341, 1039,
	343, 1039,
	344, 1039,
	345, 1039,
	346, 1039,
	348, 1039,
	349, 1039,
	350, 1039,
	351, 1039,
	353, 1039,
	354, 1039,
	355, 1039,
	356, 1039,
	357, 1039,
	358, 1039,
	359, 1039,
	360, 1039,
	361, 1039,
	362, 1039,
	363, 1039,
	364, 1039,
	366, 1039,
	367, 1039,
	368, 1039,
	370, 1039,
	371, 1039,
	372, 1039,
	373, 1039,
	374, 1039,
	375, 1039,
	376, 1039,
	378, 1039,
	379, 1039,
	380, 1039,
	381, 1039,
	383, 1039,
	385, 1039,
	386, 1039,
	387, 1039,
	388, 1039,
	389, 1039,
	391, 1039,
	392, 1039,
	393, 1039,
	395, 1039,
	396, 1039,
	399, 1039,
	400, 1039,
	401, 1039,
	402, 1039,
	403, 1039,
	404, 1039,
	406, 1039,
	408, 1039,
	409, 1039,
	410, 1039,
	411, 1039,
	412, 1039,
	413, 1039,
	414, 1039,
	416, 1039,
	417, 1039,
	418, 1039,
	423, 1039,
	424, 1039,
	425, 1039,
	426, 1039,
	427, 1039,
	428, 1039,
	-2, 0,
	-1, 119,
	1, 929,
	200, 929,
	287, 929,
	294, 929,
	431, 929,
	454, 929,
	-2, 0,
	-1, 121,
	1, 929,
	454, 929,
	-2, 0,
	-1, 122,
	1, 929,
	454, 929,
	-2, 0,
	-1, 123,
	1, 933,
	454, 933,
	-2, 0,
	-1, 147,
	119, 1010,
	134, 1010,
	193, 1010,
	222, 1010,
	253, 1010,
	263, 1010,
	397, 1010,
	-2, 1007,
	-1, 179,
	4, 1046,
	5, 1046,
	6, 1046,
	7, 1046,
	8, 1046,
	9, 1046,
	10, 1046,
	21, 1046,
	22, 1046,
	23, 1046,
	24, 1046,
	25, 1046,
	27, 1046,
	32, 1046,
	33, 1046,
	37, 1046,
	38, 1046,
	39, 1046,
	40, 1046,
	41, 1046,
	42, 1046,
	43, 1046,
	44, 1046,
	45, 1046,
	46, 1046,
	47, 1046,
	49, 1046,
	50, 1046,
	51, 1046,
	52, 1046,
	53, 1046,
	54, 1046,
	55, 1046,
	56, 1046,
	57, 1046,
	58, 1046,
	59, 1046,
	60, 1046,
	62, 1046,
	63, 1046,
	65, 1046,
	67, 1046,
	68, 1046,
	69, 1046,
	70, 1046,
	71, 1046,
	73, 1046,
	74, 1046,
	75, 1046,
	76, 1046,
	78, 1046,
	80, 1046,
	81, 1046,
	82, 1046,
	84, 1046,
	85, 1046,
	86, 1046,
	87, 1046,
	88, 1046,
	89, 1046,
	90, 1046,
	91, 1046,
	92, 1046,
	93, 1046,
	94, 1046,
	95, 1046,
	96, 1046,
	97, 1046,
	98, 1046,
	99, 1046,
	100, 1046,
	101, 1046,
	102, 1046,
	103, 1046,
	105, 1046,
	106, 1046,
	108, 1046,
	111, 1046,
	112, 1046,
	113, 1046,
	115, 1046,
	117, 1046,
	118, 1046,
	120, 1046,
	121, 1046,
	122, 1046,
	123, 1046,
	124, 1046,
	125, 1046,
	126, 1046,
	127, 1046,
	128, 1046,
	129, 1046,
	130, 1046,
	131, 1046,
	132, 1046,
	133, 1046,
	139, 1046,
	140, 1046,
	141, 1046,
	142, 1046,
	143, 1046,
	144, 1046,
	146, 1046,
	148, 1046,
	151, 1046,
	152, 1046,
	153, 1046,
	155, 1046,
	156, 1046,
	158, 1046,
	159, 1046,
	161, 1046,
	162, 1046,
	163, 1046,
	164, 1046,
	165, 1046,
	166, 1046,
	167, 1046,
	168, 1046,
	169, 1046,
	170, 1046,
	171, 1046,
	173, 1046,
	174, 1046,
	175, 1046,
	179, 1046,
	180, 1046,
	181, 1046,
	182, 1046,
	184, 1046,
	185, 1046,
	186, 1046,
	187, 1046,
	188, 1046,
	189, 1046,
	190, 1046,
	191, 1046,
	192, 1046,
	194, 1046,
	196, 1046,
	197, 1046,
	198, 1046,
	199, 1046,
	200, 1046,
	201, 1046,
	202, 1046,
	203, 1046,
	204, 1046,
	205, 1046,
	208, 1046,
	209, 1046,
	210, 1046,
	211, 1046,
	213, 1046,
	214, 1046,
	216, 1046,
	217, 1046,
	218, 1046,
	219, 1046,
	220, 1046,
	221, 1046,
	223, 1046,
	224, 1046,
	227, 1046,
	228, 1046,
	230, 1046,
	231, 1046,
	232, 1046,
	233, 1046,
	234, 1046,
	235, 1046,
	236, 1046,
	237, 1046,
	238, 1046,
	239, 1046,
	240, 1046,
	241, 1046,
	242, 1046,
	243, 1046,
	244, 1046,
	245, 1046,
	246, 1046,
	247, 1046,
	248, 1046,
	249, 1046,
	250, 1046,
	251, 1046,
	252, 1046,
	254, 1046,
	255, 1046,
	256, 1046,
	259, 1046,
	260, 1046,
	261, 1046,
	264, 1046,
	265, 1046,
	266, 1046,
	267, 1046,
	268, 1046,
	269, 1046,
	270, 1046,
	271, 1046,
	272, 1046,
	273, 1046,
	274, 1046,
	275, 1046,
	276, 1046,
	277, 1046,
	278, 1046,
	280, 1046,
	281, 1046,
	282, 1046,
	283, 1046,
	284, 1046,
	285, 1046,
	287, 1046,
	289, 1046,
	290, 1046,
	291, 1046,
	292, 1046,
	293, 1046,
	294, 1046,
	295, 1046,
	296, 1046,
	297, 1046,
	299, 1046,
	300, 1046,
	301, 1046,
	302, 1046,
	303, 1046,
	305, 1046,
	306, 1046,
	307, 1046,
	308, 1046,
	309, 1046,
	310, 1046,
	311, 1046,
	312, 1046,
	314, 1046,
	315, 1046,
	316, 1046,
	317, 1046,
	318, 1046,
	319, 1046,
	320, 1046,
	321, 1046,
	323, 1046,
	324, 1046,
	325, 1046,
	326, 1046,
	327, 1046,
	328, 1046,
	329, 1046,
	330, 1046,
	332, 1046,
	333, 1046,
	334, 1046,
	335, 1046,
	336, 1046,
	337, 1046,
	338, 1046,
	339, 1046,
	340, 1046,
	341, 1046,
	342, 1046,
	343, 1046,
	344, 1046,
	345, 1046,
	346, 1046,
	347, 1046,
	348, 1046,
	349, 1046,
	350, 1046,
	351, 1046,
	353, 1046,
	354, 1046,
	355, 1046,
	356, 1046,
	357, 1046,
	358, 1046,
	359, 1046,
	360, 1046,
	361, 1046,
	362, 1046,
	363, 1046,
	364, 1046,
	366, 1046,
	367, 1046,
	368, 1046,
	370, 1046,
	371, 1046,
	372, 1046,
	373, 1046,
	374, 1046,
	375, 1046,
	376, 1046,
	378, 1046,
	379, 1046,
	380, 1046,
	381, 1046,
	383, 1046,
	385, 1046,
	386, 1046,
	387, 1046,
	388, 1046,
	389, 1046,
	390, 1046,
	391, 1046,
	392, 1046,
	393, 1046,
	395, 1046,
	396, 1046,
	398, 1046,
	399, 1046,
	400, 1046,
	401, 1046,
	402, 1046,
	403, 1046,
	404, 1046,
	405, 1046,
	406, 1046,
	408, 1046,
	409, 1046,
	410, 1046,
	411, 1046,
	412, 1046,
	413, 1046,
	414, 1046,
	416, 1046,
	417, 1046,
	418, 1046,
	423, 1046,
	424, 1046,
	425, 1046,
	426, 1046,
	427, 1046,
	428, 1046,
	429, 1046,
	437, 1046,
	442, 1046,
	443, 1046,
	444, 1046,
	451, 1046,
	456, 1046,
	-2, 0,
	-1, 546,
	150, 1713,
	382, 1713,
	434, 1713,
	453, 1713,
	-2, 0,
	-1, 547,
	150, 1790,
	382, 1790,
	434, 1790,
	453, 1790,
	-2, 0,
	-1, 548,
	150, 1703,
	382, 1703,
	434, 1703,
	453, 1703,
	-2, 0,
	-1, 550,
	150, 1878,
	382, 1878,
	434, 1878,
	453, 1878,
	-2, 0,
	-1, 552,
	150, 1905,
	382, 1905,
	434, 1905,
	453, 1905,
	-2, 0,
	-1, 559,
	150, 1800,
	382, 1800,
	434, 1800,
	453, 1800,
	-2, 495,
	-1, 576,
	453, 1662,
	455, 1662,
	-2, 685,
	-1, 577,
	453, 1664,
	455, 1664,
	-2, 686,
	-1, 578,
	453, 1663,
	455, 1663,
	-2, 687,
	-1, 579,
	455, 1609,
	-2, 688,
	-1, 726,
	290, 624,
	341, 624,
	-2, 0,
	-1, 727,
	290, 623,
	341, 623,
	-2, 575,
	-1, 730,
	1, 647,
	450, 647,
	452, 647,
	454, 647,
	-2, 0,
	-1, 731,
	1, 684,
	147, 684,
	450, 684,
	452, 684,
	454, 684,
	-2, 0,
	-1, 740,
	1, 647,
	450, 647,
	452, 647,
	454, 647,
	-2, 0,
	-1, 741,
	1, 649,
	450, 649,
	452, 649,
	454, 649,
	-2, 0,
	-1, 742,
	1, 652,
	450, 652,
	452, 652,
	454, 652,
	-2, 0,
	-1, 746,
	1, 666,
	450, 666,
	452, 666,
	454, 666,
	-2, 0,
	-1, 747,
	1, 668,
	450, 668,
	452, 668,
	454, 668,
	-2, 0,
	-1, 790,
	134, 1048,
	222, 1048,
	253, 1048,
	-2, 1007,
	-1, 805,
	134, 1047,
	222, 1047,
	253, 1047,
	-2, 1007,
	-1, 829,
	453, 1661,
	-2, 503,
	-1, 858,
	451, 1653,
	-2, 1644,
	-1, 864,
	5, 1183,
	-2, 1694,
	-1, 865,
	5, 1184,
	-2, 1698,
	-1, 866,
	5, 1185,
	-2, 1697,
	-1, 867,
	5, 1186,
	-2, 1903,
	-1, 868,
	5, 1187,
	-2, 1802,
	-1, 869,
	5, 1188,
	-2, 1870,
	-1, 870,
	5, 1189,
	-2, 1872,
	-1, 871,
	5, 1190,
	-2, 1883,
	-1, 872,
	5, 1191,
	-2, 1873,
	-1, 873,
	5, 1192,
	-2, 1874,
	-1, 874,
	5, 1193,
	-2, 1693,
	-1, 875,
	5, 1194,
	-2, 1918,
	-1, 876,
	5, 1195,
	-2, 1765,
	-1, 877,
	5, 1196,
	-2, 1810,
	-1, 878,
	5, 1197,
	-2, 1812,
	-1, 879,
	5, 1198,
	-2, 1769,
	-1, 880,
	5, 1199,
	451, 1671,
	-2, 1662,
	-1, 881,
	5, 1255,
	451, 1255,
	-2, 1953,
	-1, 886,
	451, 1672,
	-2, 1663,
	-1, 888,
	5, 1203,
	-2, 1951,
	-1, 889,
	5, 1204,
	-2, 1952,
	-1, 890,
	5, 1205,
	-2, 1768,
	-1, 891,
	5, 1206,
	-2, 1964,
	-1, 892,
	5, 1207,
	-2, 1770,
	-1, 893,
	5, 1208,
	-2, 1771,
	-1, 894,
	5, 1209,
	-2, 1772,
	-1, 895,
	5, 1210,
	-2, 1933,
	-1, 896,
	5, 1211,
	-2, 1962,
	-1, 897,
	5, 1212,
	-2, 1748,
	-1, 898,
	5, 1213,
	-2, 1749,
	-1, 899,
	5, 1227,
	-2, 1945,
	-1, 901,
	5, 1202,
	-2, 1941,
	-1, 902,
	5, 1202,
	-2, 1940,
	-1, 903,
	5, 1202,
	-2, 1957,
	-1, 904,
	5, 1219,
	-2, 1935,
	-1, 905,
	5, 1220,
	-2, 1695,
	-1, 906,
	5, 1230,
	-2, 1934,
	-1, 907,
	5, 1232,
	-2, 1973,
	-1, 909,
	5, 1243,
	-2, 1723,
	-1, 910,
	5, 1254,
	-2, 1966,
	-1, 911,
	5, 1246,
	-2, 1967,
	-1, 912,
	5, 1254,
	-2, 1968,
	-1, 913,
	5, 1250,
	-2, 1969,
	-1, 914,
	5, 1170,
	-2, 1778,
	-1, 915,
	5, 1171,
	-2, 1779,
	-1, 916,
	453, 1659,
	-2, 1643,
	-1, 917,
	451, 1993,
	-2, 1660,
	-1, 937,
	5, 1238,
	-2, 1893,
	-1, 954,
	5, 1237,
	-2, 1974,
	-1, 964,
	5, 1239,
	417, 1239,
	-2, 1936,
	-1, 965,
	5, 1240,
	417, 1240,
	-2, 1937,
	-1, 1001,
	451, 1671,
	-2, 1662,
	-1, 1029,
	150, 1905,
	382, 1905,
	434, 1905,
	453, 1905,
	-2, 0,
	-1, 1030,
	1, 483,
	454, 483,
	-2, 941,
	-1, 1150,
	305, 1640,
	444, 1640,
	-2, 1639,
	-1, 1173,
	456, 1640,
	-2, 1641,
	-1, 1208,
	296, 716,
	416, 716,
	-2, 243,
	-1, 1228,
	276, 1035,
	-2, 849,
	-1, 1237,
	257, 1666,
	-2, 0,
	-1, 1301,
	1, 358,
	450, 358,
	452, 358,
	454, 358,
	-2, 1009,
	-1, 1304,
	4, 1972,
	11, 1972,
	12, 1972,
	14, 1972,
	15, 1972,
	16, 1972,
	17, 1972,
	18, 1972,
	19, 1972,
	21, 1972,
	22, 1972,
	23, 1972,
	24, 1972,
	25, 1972,
	27, 1972,
	30, 1972,
	32, 1972,
	34, 1972,
	37, 1972,
	38, 1972,
	39, 1972,
	40, 1972,
	41, 1972,
	42, 1972,
	43, 1972,
	44, 1972,
	45, 1972,
	46, 1972,
	47, 1972,
	49, 1972,
	50, 1972,
	51, 1972,
	52, 1972,
	53, 1972,
	54, 1972,
	57, 1972,
	58, 1972,
	59, 1972,
	60, 1972,
	62, 1972,
	63, 1972,
	64, 1972,
	67, 1972,
	68, 1972,
	69, 1972,
	70, 1972,
	71, 1972,
	72, 1972,
	73, 1972,
	74, 1972,
	75, 1972,
	76, 1972,
	78, 1972,
	79, 1972,
	80, 1972,
	81, 1972,
	82, 1972,
	84, 1972,
	85, 1972,
	86, 1972,
	94, 1972,
	95, 1972,
	96, 1972,
	97, 1972,
	98, 1972,
	99, 1972,
	100, 1972,
	101, 1972,
	103, 1972,
	105, 1972,
	106, 1972,
	108, 1972,
	111, 1972,
	112, 1972,
	113, 1972,
	115, 1972,
	117, 1972,
	118, 1972,
	120, 1972,
	121, 1972,
	122, 1972,
	123, 1972,
	124, 1972,
	125, 1972,
	126, 1972,
	127, 1972,
	128, 1972,
	129, 1972,
	130, 1972,
	131, 1972,
	135, 1972,
	136, 1972,
	137, 1972,
	138, 1972,
	139, 1972,
	140, 1972,
	141, 1972,
	142, 1972,
	143, 1972,
	144, 1972,
	145, 1972,
	146, 1972,
	148, 1972,
	151, 1972,
	152, 1972,
	153, 1972,
	155, 1972,
	156, 1972,
	158, 1972,
	159, 1972,
	161, 1972,
	162, 1972,
	163, 1972,
	164, 1972,
	165, 1972,
	166, 1972,
	167, 1972,
	168, 1972,
	169, 1972,
	170, 1972,
	171, 1972,
	172, 1972,
	173, 1972,
	174, 1972,
	175, 1972,
	176, 1972,
	177, 1972,
	178, 1972,
	180, 1972,
	181, 1972,
	182, 1972,
	184, 1972,
	185, 1972,
	186, 1972,
	187, 1972,
	188, 1972,
	189, 1972,
	190, 1972,
	191, 1972,
	192, 1972,
	194, 1972,
	196, 1972,
	197, 1972,
	198, 1972,
	199, 1972,
	200, 1972,
	201, 1972,
	202, 1972,
	203, 1972,
	204, 1972,
	205, 1972,
	206, 1972,
	207, 1972,
	208, 1972,
	209, 1972,
	210, 1972,
	211, 1972,
	213, 1972,
	214, 1972,
	216, 1972,
	217, 1972,
	218, 1972,
	219, 1972,
	220, 1972,
	221, 1972,
	223, 1972,
	224, 1972,
	227, 1972,
	228, 1972,
	229, 1972,
	230, 1972,
	231, 1972,
	232, 1972,
	233, 1972,
	234, 1972,
	235, 1972,
	236, 1972,
	237, 1972,
	238, 1972,
	239, 1972,
	240, 1972,
	241, 1972,
	242, 1972,
	243, 1972,
	244, 1972,
	247, 1972,
	249, 1972,
	250, 1972,
	251, 1972,
	252, 1972,
	254, 1972,
	255, 1972,
	256, 1972,
	259, 1972,
	260, 1972,
	261, 1972,
	262, 1972,
	264, 1972,
	265, 1972,
	267, 1972,
	269, 1972,
	270, 1972,
	271, 1972,
	272, 1972,
	273, 1972,
	274, 1972,
	275, 1972,
	276, 1972,
	277, 1972,
	278, 1972,
	280, 1972,
	281, 1972,
	282, 1972,
	283, 1972,
	284, 1972,
	285, 1972,
	287, 1972,
	289, 1972,
	290, 1972,
	291, 1972,
	292, 1972,
	293, 1972,
	294, 1972,
	295, 1972,
	296, 1972,
	297, 1972,
	299, 1972,
	300, 1972,
	301, 1972,
	302, 1972,
	303, 1972,
	304, 1972,
	305, 1972,
	306, 1972,
	307, 1972,
	308, 1972,
	309, 1972,
	310, 1972,
	311, 1972,
	312, 1972,
	314, 1972,
	315, 1972,
	316, 1972,
	317, 1972,
	318, 1972,
	319, 1972,
	320, 1972,
	321, 1972,
	322, 1972,
	323, 1972,
	324, 1972,
	325, 1972,
	326, 1972,
	327, 1972,
	328, 1972,
	329, 1972,
	330, 1972,
	332, 1972,
	333, 1972,
	334, 1972,
	335, 1972,
	336, 1972,
	337, 1972,
	338, 1972,
	339, 1972,
	340, 1972,
	341, 1972,
	343, 1972,
	344, 1972,
	345, 1972,
	346, 1972,
	347, 1972,
	348, 1972,
	349, 1972,
	350, 1972,
	351, 1972,
	353, 1972,
	354, 1972,
	355, 1972,
	356, 1972,
	357, 1972,
	358, 1972,
	359, 1972,
	360, 1972,
	361, 1972,
	362, 1972,
	363, 1972,
	364, 1972,
	366, 1972,
	367, 1972,
	368, 1972,
	370, 1972,
	371, 1972,
	372, 1972,
	373, 1972,
	374, 1972,
	375, 1972,
	376, 1972,
	378, 1972,
	379, 1972,
	380, 1972,
	381, 1972,
	383, 1972,
	385, 1972,
	386, 1972,
	387, 1972,
	388, 1972,
	389, 1972,
	391, 1972,
	392, 1972,
	393, 1972,
	395, 1972,
	396, 1972,
	399, 1972,
	400, 1972,
	401, 1972,
	402, 1972,
	403, 1972,
	404, 1972,
	406, 1972,
	408, 1972,
	409, 1972,
	410, 1972,
	411, 1972,
	412, 1972,
	413, 1972,
	414, 1972,
	416, 1972,
	417, 1972,
	418, 1972,
	423, 1972,
	424, 1972,
	425, 1972,
	426, 1972,
	427, 1972,
	428, 1972,
	429, 1972,
	430, 1972,
	432, 1972,
	433, 1972,
	434, 1972,
	435, 1972,
	436, 1972,
	437, 1972,
	439, 1972,
	440, 1972,
	441, 1972,
	442, 1972,
	443, 1972,
	444, 1972,
	445, 1972,
	446, 1972,
	447, 1972,
	449, 1972,
	452, 1972,
	453, 1972,
	455, 1972,
	456, 1972,
	-2, 0,
	-1, 1307,
	150, 1878,
	382, 1878,
	434, 1878,
	453, 1878,
	-2, 0,
	-1, 1336,
	290, 624,
	341, 624,
	-2, 0,
	-1, 1359,
	1, 619,
	450, 619,
	452, 619,
	454, 619,
	-2, 0,
	-1, 1360,
	1, 638,
	450, 638,
	452, 638,
	454, 638,
	-2, 0,
	-1, 1361,
	1, 626,
	450, 626,
	452, 626,
	454, 626,
	-2, 0,
	-1, 1382,
	1, 1925,
	450, 1925,
	452, 1925,
	453, 1925,
	454, 1925,
	-2, 664,
	-1, 1383,
	1, 1876,
	450, 1876,
	452, 1876,
	453, 1876,
	454, 1876,
	-2, 665,
	-1, 1396,
	1, 936,
	454, 936,
	-2, 941,
	-1, 1401,
	134, 1047,
	222, 1047,
	253, 1047,
	-2, 1007,
	-1, 1494,
	119, 1011,
	134, 1011,
	193, 1011,
	222, 1011,
	253, 1011,
	263, 1011,
	397, 1011,
	-2, 1411,
	-1, 1547,
	452, 1544,
	-2, 0,
	-1, 1589,
	119, 1011,
	134, 1011,
	193, 1011,
	222, 1011,
	253, 1011,
	263, 1011,
	397, 1011,
	-2, 1120,
	-1, 1643,
	451, 1242,
	-2, 1230,
	-1, 1682,
	1, 485,
	454, 485,
	-2, 941,
	-1, 1876,
	1, 621,
	450, 621,
	452, 621,
	454, 621,
	-2, 0,
	-1, 1877,
	1, 640,
	450, 640,
	452, 640,
	454, 640,
	-2, 0,
	-1, 1957,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1291,
	-1, 1958,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1292,
	-1, 1959,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1293,
	-1, 1960,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1294,
	-1, 1961,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1295,
	-1, 1962,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1296,
	-1, 1963,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1297,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1298,
	-1, 1976,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1310,
	-1, 1977,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1311,
	-1, 1978,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1312,
	-1, 1981,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1317,
	-1, 1987,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1321,
	-1, 1989,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1329,
	-1, 1990,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1330,
	-1, 1991,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1331,
	-1, 1992,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1332,
	-1, 2086,
	5, 1199,
	150, 1555,
	451, 1671,
	-2, 1662,
	-1, 2087,
	150, 1556,
	-2, 1929,
	-1, 2088,
	150, 1557,
	-2, 1799,
	-1, 2089,
	150, 1558,
	-2, 1724,
	-1, 2090,
	150, 1559,
	-2, 1759,
	-1, 2091,
	150, 1560,
	-2, 1797,
	-1, 2092,
	150, 1561,
	-2, 1869,
	-1, 2168,
	1, 1121,
	84, 1121,
	119, 1121,
	134, 1121,
	147, 1121,
	151, 1121,
	157, 1121,
	160, 1121,
	184, 1121,
	193, 1121,
	203, 1121,
	218, 1121,
	222, 1121,
	240, 1121,
	253, 1121,
	257, 1121,
	263, 1121,
	313, 1121,
	315, 1121,
	397, 1121,
	407, 1121,
	420, 1121,
	421, 1121,
	422, 1121,
	431, 1121,
	450, 1121,
	452, 1121,
	454, 1121,
	455, 1121,
	-2, 1120,
	-1, 2173,
	451, 1645,
	-2, 1657,
	-1, 2194,
	451, 1241,
	-2, 1231,
	-1, 2429,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1319,
	-1, 2430,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1323,
	-1, 2436,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1325,
	-1, 2616,
	200, 941,
	287, 941,
	294, 941,
	431, 941,
	-2, 482,
	-1, 2707,
	276, 1035,
	-2, 849,
	-1, 2787,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1327,
	-1, 2794,
	197, 0,
	199, 0,
	247, 0,
	-2, 1346,
	-1, 2857,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1375,
	-1, 2858,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1376,
	-1, 2859,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1377,
	-1, 2863,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1381,
	-1, 2864,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1382,
	-1, 2865,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1383,
	-1, 2908,
	451, 1646,
	-2, 1658,
	-1, 2995,
	453, 2075,
	-2, 984,
	-1, 3041,
	197, 0,
	199, 0,
	247, 0,
	-2, 1347,
	-1, 3044,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1350,
	-1, 3045,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1352,
	-1, 3200,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1351,
	-1, 3201,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1353,
	-1, 3211,
	197, 0,
	-2, 1384,
	-1, 3314,
	197, 0,
	-2, 1385,
	-1, 3430,
	41, 0,
	169, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1932,
}

const sqlPrivate = 57344

const sqlLast = 72370

var sqlAct = [...]int{

	886, 3516, 3241, 3429, 3439, 3244, 3506, 3144, 2325, 2694,
	2117, 3408, 3396, 3399, 3266, 3440, 3230, 2334, 3441, 3273,
	3383, 1002, 2825, 3428, 3318, 2326, 3168, 3191, 3027, 2928,
	815, 1293, 1944, 2986, 2981, 3278, 3103, 1036, 1289, 211,
	2633, 211, 211, 1409, 211, 211, 211, 211, 211, 2723,
	2718, 211, 2004, 1154, 2716, 2690, 2991, 2968, 1179, 578,
	2929, 2366, 1055, 1492, 2368, 1613, 843, 557, 3215, 2322,
	2159, 2299, 1852, 2422, 2297, 2592, 1584, 211, 1147, 2156,
	2302, 578, 1582, 994, 2578, 2565, 2538, 3026, 1810, 2376,
	1343, 1614, 3075, 2365, 2359, 2160, 1813, 2357, 1802, 2554,
	674, 2335, 2225, 1556, 1803, 806, 2537, 2055, 814, 140,
	2161, 2880, 2282, 1520, 1941, 1727, 1736, 3319, 2035, 1502,
	2457, 1937, 2017, 4, 1592, 2375, 2418, 1166, 86, 1761,
	2257, 1754, 2300, 882, 1712, 1714, 1557, 1043, 2597, 1396,
	1765, 3267, 203, 2135, 2047, 2223, 2001, 2258, 2163, 2692,
	1156, 1302, 2114, 1276, 1222, 1286, 2369, 2328, 579, 1799,
	205, 986, 525, 803, 1032, 2029, 1163, 580, 1515, 1831,
	2143, 989, 204, 968, 211, 211, 1566, 2125, 2082, 2018,
	147, 2215, 1483, 1410, 140, 1408, 148, 574, 541, 511,
	1300, 1819, 551, 533, 1252, 619, 650, 1176, 1726, 669,
	1798, 842, 37, 528, 36, 991, 34, 1395, 536, 25,
	23, 21, 966, 1414, 2453, 737, 1296, 721, 1234, 583,
	2897, 1833, 1583, 2898, 1853, 2277, 1833, 3544, 2327, 2244,
	2134, 586, 32, 1040, 3535, 2032, 1833, 2134, 810, 3534,
	3515, 583, 2134, 1770, 3502, 3500, 3463, 3117, 3117, 3464,
	1422, 1423, 3461, 586, 2782, 2134, 3459, 2381, 3456, 2134,
	179, 3457, 3453, 2732, 810, 3454, 2134, 858, 684, 805,
	3450, 3426, 3425, 1770, 1770, 1770, 1425, 3424, 811, 2733,
	1845, 3421, 2331, 3420, 1845, 885, 1845, 3378, 3368, 3367,
	2187, 3117, 3117, 3361, 3355, 1040, 1770, 3117, 181, 3353,
	2033, 3316, 3117, 1424, 2187, 3299, 983, 3296, 1770, 3258,
	3117, 1444, 1770, 3257, 3250, 3249, 1770, 1770, 3117, 2883,
	3379, 791, 969, 969, 1764, 3221, 3202, 790, 1770, 2187,
	3189, 3180, 3141, 1845, 2745, 2134, 3134, 2614, 3302, 2134,
	179, 180, 3116, 3043, 179, 3117, 2187, 3003, 2127, 2997,
	2761, 173, 2761, 2966, 1019, 2903, 2967, 3037, 2904, 174,
	2893, 2472, 2886, 2894, 798, 2134, 2473, 2818, 1014, 1197,
	1770, 2034, 2031, 1845, 1447, 1448, 1449, 1450, 181, 2883,
	149, 670, 181, 2806, 1430, 2760, 2134, 970, 2761, 2752,
	2685, 1493, 2753, 1845, 2551, 2549, 2548, 2134, 2134, 2134,
	2502, 2485, 2474, 2134, 2486, 2134, 57, 2355, 672, 2200,
	1849, 2186, 2134, 2183, 2187, 1452, 1453, 1454, 58, 2181,
	2175, 180, 2134, 1770, 2133, 180, 2126, 2134, 1422, 1423,
	2134, 173, 62, 1848, 3135, 173, 1849, 972, 973, 174,
	1770, 1015, 2753, 174, 2272, 1191, 1770, 2214, 1685, 1000,
	2745, 1422, 1423, 2309, 1425, 2421, 2456, 1769, 2212, 1552,
	149, 1175, 68, 2734, 149, 2154, 2036, 997, 1445, 2510,
	2511, 1345, 1705, 2153, 2152, 2151, 2150, 1425, 1834, 974,
	971, 1424, 2735, 1834, 797, 796, 795, 794, 793, 1444,
	789, 788, 74, 1834, 787, 2510, 2511, 786, 2528, 2529,
	2530, 85, 2402, 3092, 1424, 785, 75, 82, 784, 783,
	75, 179, 1444, 782, 781, 780, 211, 779, 778, 719,
	718, 717, 884, 716, 715, 714, 713, 712, 711, 710,
	2525, 709, 1196, 708, 707, 2791, 706, 705, 704, 703,
	702, 701, 700, 1451, 211, 699, 698, 1185, 697, 181,
	76, 211, 1447, 1448, 1449, 1450, 2525, 696, 2786, 695,
	694, 1446, 1430, 2030, 693, 683, 682, 211, 1058, 211,
	211, 1159, 211, 1058, 211, 1447, 1448, 1449, 1450, 641,
	640, 599, 211, 211, 2732, 1430, 1042, 2192, 598, 597,
	1047, 589, 180, 1452, 1453, 1454, 588, 587, 2510, 2511,
	908, 564, 173, 2516, 563, 209, 562, 211, 1190, 561,
	174, 545, 1169, 179, 201, 200, 1452, 1453, 1454, 199,
	198, 211, 1841, 1159, 1159, 211, 211, 1832, 211, 2516,
	197, 2330, 196, 195, 1504, 194, 3054, 1917, 1056, 193,
	211, 2901, 1015, 1167, 192, 191, 1445, 190, 211, 189,
	188, 181, 2762, 2126, 2510, 2511, 77, 187, 2595, 1015,
	186, 185, 211, 211, 211, 211, 211, 1159, 1159, 1445,
	1422, 1423, 1159, 184, 211, 1159, 211, 211, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 2526, 146, 80,
	211, 81, 1030, 1493, 180, 183, 1425, 182, 179, 1297,
	2479, 2468, 2287, 2176, 996, 1585, 2167, 2073, 1710, 2071,
	179, 1855, 1150, 2526, 179, 1599, 1173, 2510, 2511, 1509,
	2315, 1451, 673, 1424, 1181, 117, 1159, 1421, 1051, 117,
	1144, 1149, 2516, 149, 2069, 2067, 181, 1049, 1004, 1446,
	1178, 3446, 583, 1027, 1451, 1523, 211, 3427, 181, 1177,
	2065, 1522, 181, 3349, 586, 1523, 829, 3309, 3240, 3181,
	211, 1522, 1446, 1505, 3176, 1503, 982, 1235, 1235, 3096,
	118, 3074, 1526, 3305, 179, 211, 3073, 3303, 1854, 180,
	2527, 140, 1521, 150, 3061, 3060, 3059, 1152, 2516, 173,
	1317, 180, 3058, 3052, 1239, 180, 1305, 174, 2510, 2511,
	811, 173, 3051, 3050, 1430, 173, 2527, 1173, 2965, 174,
	2917, 2916, 181, 174, 2914, 2907, 1280, 1283, 149, 2756,
	2877, 2876, 1303, 2875, 2802, 1184, 2798, 1189, 2590, 1195,
	671, 1366, 1290, 2545, 149, 1452, 1453, 1454, 2536, 1228,
	1231, 2509, 2506, 2505, 1236, 2503, 2492, 2491, 2490, 2487,
	2484, 2516, 2462, 2461, 2454, 180, 1435, 1433, 1434, 1426,
	1427, 1428, 1429, 1431, 1432, 173, 2356, 2168, 2040, 1504,
	1421, 1807, 2526, 174, 813, 1420, 179, 1775, 1773, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1445, 3542,
	3514, 1309, 3513, 1491, 149, 2316, 1402, 2521, 2519, 2520,
	2512, 2513, 2514, 2515, 2517, 2518, 1706, 2259, 3462, 2608,
	1003, 1401, 2827, 1313, 181, 2417, 2522, 2523, 2524, 3416,
	1316, 1394, 3414, 2521, 2519, 2520, 2512, 2513, 2514, 2515,
	2517, 2518, 2516, 3346, 3343, 2526, 3340, 3339, 3338, 3334,
	1322, 3328, 1329, 1337, 3300, 3295, 3294, 2007, 3236, 840,
	3213, 3186, 3185, 3166, 1400, 3163, 3157, 180, 3175, 3091,
	3072, 3017, 3014, 1399, 2944, 2527, 2943, 173, 211, 1407,
	2932, 2931, 2889, 1397, 2793, 174, 2763, 2746, 2710, 811,
	2679, 1446, 2658, 1422, 1423, 2636, 2635, 2610, 2550, 2483,
	2482, 1554, 1563, 2467, 211, 791, 149, 2445, 1422, 1423,
	2013, 790, 2296, 1527, 211, 1058, 211, 211, 211, 1425,
	1524, 1516, 1422, 1423, 578, 211, 211, 1403, 1513, 578,
	211, 1608, 1417, 1418, 1425, 211, 1525, 2196, 2527, 2512,
	2513, 2514, 2515, 2517, 2518, 2195, 1424, 1680, 1425, 2171,
	2148, 2132, 2063, 57, 1487, 1598, 1555, 1551, 1550, 1573,
	1058, 1424, 1549, 1548, 2314, 58, 1547, 1546, 1545, 1544,
	1543, 1541, 1601, 1540, 1539, 1424, 1538, 1537, 1593, 62,
	1536, 1517, 1518, 1610, 1708, 1602, 1535, 1534, 1677, 1856,
	1560, 1561, 1533, 1532, 1620, 2512, 2513, 2514, 2515, 2517,
	2518, 2636, 1679, 1531, 140, 1530, 1529, 1506, 1488, 68,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 1486, 1701, 1481,
	2189, 1026, 1017, 1010, 3321, 3162, 969, 1430, 3093, 811,
	1711, 3047, 2913, 2896, 2892, 2471, 2149, 3225, 3095, 74,
	2912, 998, 1430, 2510, 2511, 1505, 841, 2571, 85, 2606,
	1484, 1605, 1705, 75, 82, 2521, 2519, 2520, 2512, 2513,
	2514, 2515, 2517, 2518, 1594, 3341, 1705, 2072, 1046, 2070,
	2719, 829, 1590, 3179, 3136, 829, 3279, 1037, 1044, 1682,
	2661, 2899, 1603, 1142, 583, 1159, 211, 2748, 1142, 583,
	1553, 1040, 1058, 2261, 2068, 2066, 586, 76, 1581, 1704,
	1580, 586, 1579, 1720, 1587, 1577, 1576, 1575, 3306, 2747,
	2064, 1609, 3304, 179, 2976, 2032, 1676, 3239, 1536, 1536,
	1045, 1422, 1423, 1040, 1040, 981, 1705, 1523, 1578, 1611,
	1585, 211, 211, 1522, 2489, 2488, 1392, 2427, 211, 2246,
	1336, 2514, 2515, 2517, 2518, 1041, 2942, 1425, 211, 776,
	1691, 181, 1731, 1697, 2696, 1683, 2695, 211, 1367, 211,
	1511, 211, 1771, 1031, 1038, 211, 1000, 1344, 1000, 3517,
	1853, 1039, 3274, 1345, 1424, 1804, 2957, 211, 2946, 2768,
	2033, 2673, 1749, 3216, 997, 1606, 997, 2327, 777, 1751,
	1735, 2829, 1753, 2048, 180, 1758, 2194, 2477, 1808, 2688,
	3447, 1542, 1519, 77, 173, 1795, 1212, 3458, 3455, 2728,
	1791, 2924, 174, 3393, 2982, 2363, 3360, 1159, 211, 1159,
	3488, 1762, 211, 1326, 3127, 1159, 3489, 1210, 1159, 211,
	1200, 211, 211, 149, 770, 146, 80, 2618, 81, 768,
	565, 1159, 1159, 1159, 1178, 211, 583, 2201, 1825, 1490,
	211, 2034, 2031, 1177, 1816, 1430, 3448, 179, 586, 578,
	211, 2607, 211, 766, 211, 3539, 211, 2227, 211, 673,
	636, 3265, 117, 772, 1794, 763, 211, 1905, 1757, 211,
	1903, 211, 3260, 1768, 2959, 2955, 1452, 1453, 1454, 2218,
	211, 2954, 2921, 1696, 1695, 181, 1211, 1705, 1702, 2920,
	2216, 1766, 756, 1364, 2466, 819, 1365, 2465, 1040, 211,
	1046, 2464, 1872, 1823, 1784, 211, 1785, 118, 1692, 2463,
	2431, 2279, 1858, 2271, 1426, 1427, 1428, 1429, 1431, 1432,
	150, 2268, 2249, 2182, 571, 1058, 1988, 1398, 180, 1445,
	1174, 1428, 1429, 1431, 1432, 811, 2036, 2620, 173, 637,
	2323, 1818, 1821, 1037, 1046, 2230, 174, 825, 1432, 2059,
	1836, 1037, 1045, 1838, 1924, 1860, 1840, 1303, 1324, 2218,
	1843, 2058, 3359, 1946, 1245, 1008, 1244, 149, 3197, 2660,
	2216, 1243, 1921, 1242, 2769, 2208, 2248, 809, 1264, 1363,
	1206, 1699, 1915, 809, 1914, 1867, 2003, 1863, 3246, 1620,
	1620, 1223, 1728, 760, 2174, 1945, 1045, 1850, 2019, 2020,
	1027, 2237, 3418, 2236, 2934, 804, 1822, 573, 2180, 583,
	1058, 996, 2771, 996, 1942, 1943, 2019, 2045, 2770, 1862,
	1724, 586, 1446, 1875, 3123, 1851, 2190, 1221, 1405, 1007,
	1038, 1766, 1876, 2030, 1861, 2003, 1888, 1039, 1038, 1881,
	691, 1729, 1730, 1319, 2399, 1039, 1715, 1869, 1870, 1871,
	1716, 808, 2081, 211, 2085, 2085, 2098, 808, 2019, 1005,
	1335, 2118, 2120, 1916, 1220, 1919, 2124, 1913, 1725, 2518,
	2265, 2036, 1922, 1646, 2011, 1025, 1706, 2259, 3480, 2009,
	2049, 2725, 2229, 1877, 1058, 211, 2100, 1918, 1920, 2812,
	1706, 2259, 2048, 1923, 211, 791, 1338, 211, 791, 791,
	1058, 1933, 567, 1700, 1934, 1935, 1565, 2419, 2420, 2172,
	1142, 1594, 3488, 2726, 3529, 811, 1208, 2670, 1645, 2809,
	572, 810, 1882, 2665, 1748, 2044, 3376, 810, 811, 2057,
	1359, 1722, 811, 3335, 2061, 2062, 1717, 1320, 1733, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1719, 829,
	1706, 2259, 1391, 2617, 1362, 1142, 639, 638, 3196, 2155,
	569, 2648, 2682, 2165, 2166, 2015, 2247, 3121, 1345, 2725,
	2173, 2510, 2511, 1569, 1040, 2204, 1715, 1345, 1731, 211,
	1716, 1360, 1040, 1223, 2036, 2042, 2619, 2206, 1833, 2169,
	2810, 2405, 2140, 668, 2228, 2945, 1514, 566, 523, 2604,
	2956, 969, 3479, 2647, 1721, 1715, 1572, 2311, 764, 1716,
	2139, 1058, 1737, 764, 3153, 2269, 211, 3495, 1325, 2207,
	811, 140, 518, 2093, 211, 1567, 2122, 2109, 1377, 1480,
	1741, 1722, 2205, 570, 2935, 211, 2184, 765, 2130, 2131,
	1570, 2145, 2146, 774, 568, 2141, 3028, 773, 211, 764,
	1904, 1159, 1263, 1902, 1205, 807, 3207, 1912, 3404, 3374,
	3345, 807, 1568, 1590, 211, 1058, 1717, 2481, 1159, 3247,
	211, 211, 1738, 2144, 2408, 2217, 2164, 2219, 1719, 2567,
	2039, 2213, 1525, 3444, 3122, 2036, 2191, 1142, 3375, 1783,
	631, 1985, 810, 3161, 3023, 1717, 211, 1722, 211, 2284,
	2909, 211, 2280, 2283, 1620, 2516, 1020, 1719, 3031, 1347,
	3442, 692, 1880, 3252, 3487, 2433, 211, 2199, 3485, 3284,
	3165, 1706, 1703, 211, 2714, 211, 2266, 211, 2654, 2252,
	1517, 1518, 1006, 211, 1721, 1000, 211, 1571, 211, 3478,
	211, 2198, 211, 211, 2281, 211, 1159, 1159, 1159, 2202,
	1159, 1742, 2251, 997, 211, 211, 2306, 211, 211, 1000,
	761, 630, 3509, 1721, 2002, 2318, 1874, 3154, 211, 2407,
	1404, 3530, 2222, 2260, 2262, 2263, 2264, 997, 2351, 2352,
	2347, 211, 211, 211, 1797, 2239, 211, 2404, 211, 2526,
	1150, 211, 1562, 211, 1731, 211, 2250, 2380, 2231, 2233,
	2010, 2283, 1334, 2283, 2320, 3445, 1173, 1018, 1752, 2267,
	1321, 1743, 1744, 211, 211, 211, 211, 1024, 211, 1983,
	1739, 2393, 1986, 1013, 3193, 510, 1374, 1722, 1178, 2566,
	583, 2970, 2379, 1718, 2382, 2383, 3114, 2285, 998, 2294,
	998, 211, 586, 2650, 2394, 1834, 2395, 1413, 1740, 3070,
	3029, 1732, 2410, 1569, 1693, 2362, 1722, 140, 2623, 2243,
	2310, 2598, 3524, 3111, 2406, 3251, 2652, 2270, 2338, 3234,
	2390, 1982, 2353, 2340, 2866, 3325, 2384, 519, 2385, 2333,
	3443, 3126, 2527, 2923, 1173, 1173, 1572, 1713, 3125, 2344,
	2276, 2345, 1412, 2346, 2715, 3347, 2631, 2403, 2348, 2627,
	1303, 2354, 2319, 2377, 3112, 2142, 2364, 2289, 629, 2291,
	628, 2349, 2651, 1375, 1480, 2301, 2298, 1817, 2442, 1806,
	1570, 1805, 1779, 1645, 1645, 1173, 3192, 2808, 2136, 520,
	1142, 3384, 1412, 1745, 2459, 2460, 2253, 632, 1929, 2434,
	211, 2440, 1999, 1909, 1686, 2987, 1690, 3169, 2392, 2469,
	3507, 3272, 2329, 2295, 2329, 1266, 1173, 2396, 1323, 2397,
	751, 2398, 2350, 1718, 1348, 1997, 1251, 521, 2308, 522,
	3270, 3235, 2638, 2891, 2637, 1868, 2416, 2425, 2564, 2413,
	1411, 2411, 802, 1376, 2414, 800, 2563, 751, 2179, 1361,
	996, 3071, 1718, 1722, 2138, 3242, 1746, 1984, 2470, 2137,
	2519, 2520, 2512, 2513, 2514, 2515, 2517, 2518, 3523, 802,
	2867, 1413, 1688, 2178, 996, 1142, 2868, 1571, 2177, 3508,
	1411, 808, 3330, 3145, 1760, 3194, 2455, 2547, 1689, 1058,
	2757, 3124, 2432, 1249, 2552, 688, 811, 681, 1930, 2559,
	2560, 1237, 3348, 2561, 1759, 801, 2437, 3107, 211, 690,
	3108, 3510, 752, 1815, 1617, 2684, 211, 2438, 1238, 3492,
	2443, 3268, 3387, 211, 3331, 3232, 211, 211, 1058, 3076,
	1993, 2881, 1755, 2053, 3243, 2254, 2255, 1058, 1994, 752,
	1389, 1995, 1901, 211, 2000, 2585, 2510, 2511, 3110, 1142,
	3494, 2476, 3460, 1729, 1730, 1371, 1369, 3233, 211, 2558,
	3113, 1358, 3342, 1356, 2599, 1142, 1354, 3381, 3212, 1352,
	3069, 2961, 2573, 2539, 2540, 751, 211, 211, 211, 1350,
	1756, 2576, 211, 2792, 2766, 211, 2574, 3388, 1342, 3332,
	2615, 2504, 211, 211, 211, 211, 211, 802, 2588, 1340,
	1247, 2602, 2444, 2621, 2305, 2589, 2278, 2596, 211, 211,
	211, 2575, 2556, 2245, 1620, 2593, 2613, 211, 2570, 1250,
	2197, 2586, 2587, 2553, 2542, 2543, 2544, 2569, 1600, 211,
	1159, 1597, 211, 2640, 1390, 2644, 2645, 1314, 2594, 2605,
	1058, 804, 3438, 2628, 2401, 2568, 2400, 2663, 1058, 2387,
	1620, 1911, 1885, 211, 3140, 753, 211, 211, 1496, 2439,
	3109, 1678, 1501, 2611, 2612, 1528, 211, 752, 2441, 1159,
	211, 2584, 1159, 1159, 1159, 2632, 1142, 2600, 2601, 211,
	2516, 1318, 753, 1996, 2699, 211, 1248, 1900, 1388, 1227,
	2664, 211, 1998, 211, 686, 687, 679, 680, 1645, 3133,
	211, 2616, 689, 1370, 1368, 2052, 590, 2671, 3100, 1357,
	2622, 1355, 2985, 2940, 1353, 2580, 1720, 1351, 2596, 2680,
	2938, 2624, 2625, 1159, 1159, 2922, 2713, 1349, 2698, 2697,
	1142, 211, 211, 2324, 2653, 211, 1341, 2639, 2313, 2642,
	2703, 1720, 1159, 2730, 2659, 2312, 762, 1339, 1246, 2292,
	2666, 1173, 2667, 1847, 1846, 1000, 2668, 1844, 754, 2669,
	1842, 1839, 2675, 211, 2526, 1058, 211, 211, 1058, 211,
	1000, 1794, 2681, 997, 1762, 1837, 1835, 2251, 1826, 1776,
	1774, 1763, 1762, 799, 1750, 754, 211, 2581, 997, 2744,
	1747, 2721, 1734, 1723, 755, 2820, 2717, 3288, 2674, 1000,
	1415, 1607, 2693, 3489, 3410, 3188, 3183, 2777, 978, 3182,
	753, 2378, 1709, 2764, 916, 2423, 2727, 997, 1202, 811,
	2755, 755, 3290, 2235, 140, 2736, 2996, 1731, 2579, 1058,
	2776, 2759, 979, 2655, 2656, 1167, 2377, 2657, 1056, 2743,
	1058, 2729, 211, 2218, 1878, 2377, 2672, 1883, 2583, 1386,
	1387, 2720, 2218, 207, 2216, 513, 514, 2527, 529, 513,
	529, 539, 544, 2234, 3337, 560, 2676, 2677, 767, 769,
	2678, 2795, 1620, 207, 2738, 2739, 2740, 998, 2741, 2742,
	3311, 3077, 2765, 1416, 1606, 2704, 2218, 2424, 2706, 2707,
	2708, 678, 2773, 2256, 2238, 207, 1419, 2232, 2273, 2817,
	2240, 998, 2778, 2780, 3380, 591, 592, 1422, 1423, 524,
	2823, 1173, 3350, 754, 2974, 980, 2275, 2878, 2242, 1617,
	1617, 1620, 1620, 2582, 2804, 2805, 2603, 2274, 2969, 2241,
	1422, 1423, 2774, 1425, 2906, 211, 2800, 1620, 1620, 2750,
	2751, 2332, 2123, 2811, 2813, 2814, 1942, 2836, 1681, 755,
	211, 1612, 2283, 2819, 2831, 535, 1058, 3505, 1766, 2826,
	1424, 2832, 1942, 2846, 2830, 2833, 2900, 3522, 1620, 2835,
	1493, 1565, 2510, 2511, 2843, 211, 2520, 2512, 2513, 2514,
	2515, 2517, 2518, 1424, 2870, 2845, 1422, 1423, 513, 513,
	2210, 2209, 3352, 2874, 594, 593, 207, 1328, 2056, 2911,
	2815, 2210, 2609, 1327, 2211, 2871, 2060, 2054, 2027, 1373,
	996, 3048, 1372, 2910, 2807, 1491, 1489, 3531, 3322, 140,
	3226, 211, 3224, 3156, 3094, 996, 2908, 2882, 3020, 2947,
	2895, 2884, 2885, 2918, 2879, 3013, 3002, 2980, 1569, 2964,
	2963, 2962, 2937, 2737, 595, 596, 2711, 2709, 2887, 2888,
	2958, 2389, 2388, 2342, 996, 2317, 2293, 211, 211, 211,
	2902, 2014, 1899, 1898, 1897, 1829, 1828, 1827, 1809, 1787,
	1786, 1572, 1782, 1781, 1058, 211, 1780, 1778, 2915, 1159,
	1777, 1406, 1385, 1384, 1275, 1274, 1273, 1272, 2951, 1271,
	1567, 1270, 1269, 211, 1142, 1268, 2926, 1267, 2977, 1265,
	2998, 1260, 1259, 1258, 1257, 1570, 211, 211, 1159, 1159,
	1159, 1256, 211, 211, 211, 1219, 2960, 211, 211, 1218,
	1620, 211, 211, 1217, 1159, 2992, 2978, 1568, 2988, 1216,
	211, 1215, 2989, 1142, 2993, 1214, 1213, 2973, 2952, 2953,
	1207, 1201, 1142, 1058, 1199, 2632, 2251, 1198, 1645, 1023,
	1022, 953, 863, 2983, 1684, 3021, 775, 623, 759, 3245,
	1379, 73, 1209, 610, 67, 829, 2979, 2936, 3392, 1932,
	3046, 2646, 2939, 1884, 2941, 1346, 1886, 2572, 829, 2147,
	3373, 3055, 2480, 3009, 1645, 2990, 3317, 3206, 211, 2994,
	2051, 1000, 1000, 3000, 2999, 1510, 69, 851, 936, 3152,
	3004, 1794, 1571, 3151, 3005, 3015, 3101, 3012, 2925, 997,
	997, 3019, 3010, 3011, 3016, 3033, 2367, 3149, 2556, 3042,
	1620, 3018, 3034, 3025, 3148, 3030, 818, 1061, 1694, 857,
	1707, 2193, 2084, 1616, 1617, 860, 1618, 862, 2338, 861,
	1619, 1512, 859, 1615, 2307, 1142, 2336, 1254, 738, 739,
	211, 1698, 2008, 1142, 2046, 2475, 1507, 831, 853, 2043,
	1058, 1016, 1058, 830, 2577, 2724, 2905, 2377, 3174, 1928,
	2415, 1925, 626, 2507, 2028, 1009, 2106, 2099, 2095, 1393,
	1482, 211, 211, 211, 2337, 1048, 834, 2006, 2012, 1498,
	3068, 2449, 2731, 211, 2591, 2188, 3407, 1936, 1796, 211,
	977, 211, 2101, 976, 211, 211, 211, 1496, 3082, 975,
	3398, 3395, 2691, 1687, 2203, 211, 211, 1159, 3085, 1474,
	1058, 3119, 1159, 2700, 3006, 3007, 3008, 847, 211, 1172,
	1011, 2557, 3089, 2758, 3081, 3084, 1224, 3079, 3080, 3087,
	3090, 3129, 3086, 211, 3099, 3336, 1058, 1473, 2593, 1159,
	771, 3120, 3327, 3143, 2105, 1035, 1034, 1033, 1021, 3022,
	2630, 1000, 3130, 3131, 3118, 560, 3528, 2933, 3078, 178,
	1142, 175, 177, 1142, 176, 2949, 3083, 2683, 211, 997,
	90, 207, 35, 207, 207, 16, 1164, 116, 207, 1058,
	115, 114, 3147, 113, 3138, 3137, 207, 1180, 3170, 3142,
	112, 3173, 3171, 111, 3184, 3159, 1645, 3158, 110, 109,
	108, 107, 106, 105, 104, 1058, 103, 102, 101, 100,
	3172, 1204, 99, 98, 97, 3167, 3097, 3098, 96, 95,
	94, 93, 92, 91, 1142, 1226, 3187, 998, 556, 207,
	207, 553, 1164, 49, 3128, 1142, 996, 996, 3218, 48,
	89, 3195, 998, 1058, 207, 1645, 1645, 88, 1794, 1056,
	15, 211, 1262, 211, 3178, 1058, 211, 33, 3198, 13,
	53, 1645, 1645, 3146, 211, 54, 207, 207, 207, 207,
	1164, 998, 12, 1859, 28, 3204, 29, 79, 560, 78,
	207, 207, 27, 14, 26, 24, 211, 3229, 3214, 1620,
	10, 8, 1645, 3228, 678, 7, 30, 1574, 3219, 3220,
	11, 1000, 3223, 145, 211, 3203, 144, 72, 211, 1000,
	143, 3222, 3227, 3204, 71, 142, 211, 3263, 3276, 997,
	3271, 1159, 1000, 3139, 141, 1945, 211, 997, 3248, 70,
	22, 9, 137, 3277, 2975, 66, 139, 138, 63, 136,
	997, 135, 64, 3281, 1620, 134, 3283, 211, 211, 3280,
	207, 1142, 3155, 3261, 3269, 133, 65, 3160, 132, 20,
	5, 52, 6, 3275, 207, 3297, 3298, 211, 3190, 3254,
	3285, 2767, 2992, 211, 3286, 83, 84, 3287, 31, 544,
	3177, 61, 3292, 211, 3289, 3291, 3308, 60, 59, 19,
	51, 18, 169, 168, 167, 166, 161, 160, 165, 3324,
	163, 162, 3333, 164, 3293, 159, 996, 131, 171, 170,
	157, 153, 3301, 152, 156, 3323, 158, 155, 154, 151,
	172, 130, 56, 129, 128, 127, 3344, 126, 125, 3315,
	1620, 55, 17, 2, 1, 211, 1159, 0, 0, 0,
	0, 211, 0, 0, 1645, 1159, 1159, 0, 3255, 3256,
	0, 1159, 3366, 2693, 0, 211, 0, 211, 0, 0,
	0, 0, 3310, 3351, 0, 3280, 0, 3354, 3320, 1142,
	0, 3358, 3377, 0, 1617, 0, 3364, 3365, 0, 211,
	3370, 3362, 3369, 0, 0, 211, 211, 0, 1058, 3357,
	1173, 3363, 0, 0, 0, 0, 211, 211, 3389, 0,
	0, 3401, 3114, 0, 3405, 0, 0, 3411, 0, 3413,
	1617, 3415, 0, 3371, 0, 3372, 0, 3397, 3400, 0,
	3394, 0, 3402, 3423, 3422, 0, 0, 0, 0, 3111,
	211, 0, 3104, 0, 0, 3417, 0, 3419, 1142, 0,
	0, 0, 3449, 3390, 1645, 3102, 0, 2101, 2101, 3434,
	3435, 3106, 0, 3437, 3436, 0, 996, 0, 1945, 0,
	0, 0, 0, 3451, 996, 0, 0, 0, 0, 211,
	3112, 3467, 513, 3469, 0, 0, 3465, 996, 0, 0,
	0, 3475, 3466, 0, 3477, 0, 3471, 3474, 0, 211,
	0, 0, 0, 207, 3468, 207, 3470, 0, 207, 2105,
	2105, 3105, 0, 0, 0, 3483, 0, 3486, 1180, 3484,
	1164, 207, 0, 211, 0, 211, 0, 3491, 207, 1180,
	529, 3493, 3490, 207, 1180, 3498, 3497, 0, 0, 560,
	3503, 0, 3499, 3397, 3501, 0, 3400, 0, 0, 0,
	3504, 0, 3409, 3472, 3473, 3512, 3511, 3476, 2101, 2101,
	2101, 0, 0, 3519, 0, 1142, 3518, 1142, 3520, 3521,
	0, 0, 0, 998, 998, 3525, 0, 0, 0, 0,
	0, 3496, 0, 0, 3526, 3527, 3532, 0, 3533, 0,
	0, 0, 0, 0, 0, 1564, 0, 0, 3540, 3541,
	0, 0, 0, 0, 0, 0, 0, 3536, 3537, 3538,
	2105, 2105, 2105, 3543, 0, 0, 0, 0, 0, 3545,
	0, 0, 0, 3107, 2338, 1142, 3108, 0, 2510, 2511,
	0, 2528, 2529, 2530, 0, 0, 0, 0, 0, 0,
	0, 0, 1617, 3412, 0, 0, 0, 3039, 2446, 2447,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3110, 0, 0, 0, 0, 0,
	3409, 0, 0, 0, 0, 0, 3113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2525,
	207, 1617, 1617, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1617, 1617, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1645, 0, 207, 207, 0, 1617, 0,
	0, 0, 207, 998, 0, 0, 817, 0, 0, 2533,
	2534, 2535, 1814, 0, 0, 0, 0, 0, 1142, 0,
	0, 207, 2516, 207, 0, 207, 0, 0, 0, 513,
	1142, 0, 0, 0, 0, 0, 3109, 0, 0, 0,
	0, 1830, 0, 0, 0, 0, 0, 0, 1645, 0,
	0, 1422, 1423, 0, 0, 0, 0, 1465, 1466, 1467,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2531, 0, 0, 1425, 0, 0,
	0, 1471, 560, 0, 0, 0, 678, 0, 0, 0,
	0, 0, 0, 207, 0, 1164, 207, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 2526, 0, 0, 560,
	0, 0, 1444, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 207, 0, 207, 0, 207, 0,
	207, 0, 207, 0, 1645, 0, 0, 0, 0, 0,
	1906, 0, 0, 1907, 0, 1908, 0, 0, 2101, 2101,
	1617, 0, 0, 998, 207, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 998, 1447, 1448, 1449, 1450, 560,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2527,
	2105, 2105, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1472, 0, 0, 0, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2101, 2101,
	2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101,
	2101, 2101, 2101, 2101, 2101, 2101, 2101, 0, 2101, 0,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1142, 0, 0, 0, 829, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105,
	2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 0,
	2105, 0, 0, 0, 0, 0, 0, 0, 0, 2522,
	2523, 2524, 0, 0, 0, 0, 2521, 2519, 2520, 2512,
	2513, 2514, 2515, 2517, 2518, 0, 0, 513, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 2788,
	2789, 0, 207, 0, 1451, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 513,
	1471, 0, 1446, 0, 0, 0, 207, 0, 513, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1463, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 1422, 1423, 0, 817, 0, 0, 0, 2847,
	2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857,
	2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 1425, 2869,
	0, 0, 0, 0, 0, 0, 0, 1182, 0, 1186,
	0, 1192, 0, 529, 1447, 1448, 1449, 1450, 0, 0,
	0, 0, 0, 0, 1430, 1424, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1462, 0,
	2226, 1472, 0, 0, 57, 1452, 1453, 1454, 207, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	62, 0, 207, 0, 0, 1439, 1440, 0, 0, 1617,
	0, 0, 0, 0, 0, 1312, 0, 0, 207, 0,
	1460, 0, 1315, 0, 207, 2286, 1430, 0, 1445, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	207, 0, 1180, 0, 0, 207, 0, 1452, 1453, 1454,
	74, 1459, 0, 0, 1617, 0, 0, 0, 0, 85,
	1814, 0, 0, 0, 75, 82, 0, 2226, 0, 513,
	0, 2341, 0, 0, 0, 0, 0, 207, 0, 0,
	207, 0, 207, 0, 207, 0, 207, 207, 0, 1164,
	0, 0, 0, 1451, 0, 0, 0, 0, 2360, 678,
	1445, 2226, 2226, 0, 0, 0, 0, 0, 76, 0,
	0, 1446, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 1164, 207, 0, 0,
	1180, 0, 1180, 0, 0, 1164, 1463, 1164, 0, 1164,
	1617, 0, 0, 0, 0, 0, 1475, 1476, 1477, 1478,
	1479, 0, 0, 0, 0, 0, 0, 207, 207, 1164,
	207, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 1508, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 2185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 1461, 0,
	0, 1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0,
	0, 3064, 0, 0, 3063, 0, 146, 80, 0, 81,
	0, 0, 0, 0, 0, 2101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 1422,
	1423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 0, 117, 1180, 0, 0, 2510, 2511, 0,
	2528, 2529, 2530, 0, 0, 1425, 0, 0, 2101, 0,
	0, 1558, 1558, 1558, 0, 0, 181, 2105, 0, 0,
	0, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 118, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 2525, 180,
	2105, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 817,
	0, 0, 207, 0, 0, 0, 2785, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 149, 0,
	0, 0, 513, 1447, 1448, 1449, 1450, 0, 2101, 0,
	513, 0, 0, 1430, 0, 0, 0, 513, 0, 0,
	513, 513, 0, 0, 2510, 2511, 207, 2528, 2529, 2530,
	0, 2516, 0, 0, 0, 0, 0, 1180, 0, 0,
	0, 0, 0, 3038, 1452, 1453, 1454, 0, 0, 0,
	0, 0, 1180, 0, 0, 0, 3211, 0, 2532, 0,
	2105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2226, 2226, 207, 0, 0, 0, 2226, 0, 0, 2634,
	0, 0, 0, 2531, 0, 2525, 2226, 2634, 2226, 2634,
	2634, 0, 0, 0, 0, 0, 0, 1445, 0, 3237,
	0, 0, 207, 207, 207, 0, 1422, 1423, 0, 1455,
	1456, 1457, 1465, 1466, 1467, 2526, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 1458, 1164, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2687, 0, 0,
	2689, 2226, 0, 0, 0, 0, 0, 0, 2516, 1424,
	207, 0, 0, 0, 207, 0, 0, 1444, 0, 0,
	0, 0, 1451, 207, 1441, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 2226, 0, 513, 0, 0,
	1446, 0, 0, 0, 2226, 0, 0, 0, 0, 3314,
	0, 0, 0, 0, 0, 0, 0, 0, 2527, 0,
	2531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 1814, 0, 0, 1814,
	1447, 1448, 1449, 1450, 0, 0, 0, 0, 0, 0,
	1430, 0, 2526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2772, 0, 0,
	1164, 207, 0, 207, 1462, 0, 0, 1472, 0, 0,
	0, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 1469, 0, 0, 0, 0, 0,
	0, 1439, 1440, 0, 0, 0, 0, 1435, 1433, 1434,
	1426, 1427, 1428, 1429, 1431, 1432, 1460, 0, 2522, 2523,
	2524, 0, 0, 0, 1445, 2521, 2519, 2520, 2512, 2513,
	2514, 2515, 2517, 2518, 0, 2527, 2828, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 1926, 0, 1931,
	0, 0, 0, 0, 0, 1938, 0, 1459, 0, 0,
	0, 0, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 0, 1987, 1451,
	1989, 1990, 1991, 1992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 207, 207,
	2016, 0, 0, 0, 0, 1422, 1423, 0, 0, 513,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 2041,
	0, 0, 1463, 0, 513, 2522, 2523, 2524, 0, 0,
	0, 1425, 2521, 2519, 2520, 2512, 2513, 2514, 2515, 2517,
	2518, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 0, 1424, 0,
	0, 2097, 0, 2108, 2110, 2115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1436, 1437, 1443,
	1442, 1438, 1464, 0, 1435, 1433, 1434, 1426, 1427, 1428,
	1429, 1431, 1432, 0, 0, 0, 0, 2498, 0, 0,
	2499, 2971, 207, 207, 0, 917, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2226, 207, 0,
	1452, 1453, 1454, 0, 208, 0, 0, 0, 0, 0,
	2360, 2360, 0, 0, 0, 0, 678, 678, 2226, 0,
	0, 1814, 1814, 0, 208, 678, 2226, 0, 0, 57,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 1445, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	1422, 1423, 3056, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 74, 1425, 0, 0, 2288,
	1471, 2290, 0, 0, 85, 0, 0, 0, 0, 75,
	82, 2510, 2511, 0, 2528, 2529, 2530, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 1446, 0, 207, 0,
	2797, 1444, 0, 0, 1180, 0, 207, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2226, 2226, 2226, 0, 0,
	0, 0, 2525, 0, 0, 0, 0, 1180, 0, 0,
	0, 0, 0, 2226, 0, 2634, 0, 0, 1180, 1180,
	207, 0, 0, 0, 1447, 1448, 1449, 1450, 0, 207,
	207, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 2226, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3164, 1462, 0,
	0, 1472, 0, 0, 0, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 2516, 1426, 1427, 1428, 1429,
	1431, 1432, 0, 206, 0, 0, 1468, 0, 1469, 77,
	0, 0, 1180, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 146, 80, 0, 81, 584, 0, 2531, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 0, 2429, 2430,
	0, 0, 0, 179, 2436, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 673, 0, 0, 117, 2526,
	0, 0, 0, 2450, 2451, 0, 0, 0, 0, 2041,
	0, 0, 0, 0, 0, 2226, 0, 2634, 2458, 0,
	3231, 181, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 2478, 0, 0, 0, 0, 0,
	560, 1446, 0, 0, 0, 0, 150, 0, 0, 2493,
	0, 0, 0, 0, 180, 0, 999, 0, 3231, 212,
	0, 0, 2226, 0, 173, 0, 1463, 0, 0, 0,
	207, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	1180, 0, 2527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1306, 0, 0, 0, 2115, 2115, 2115,
	0, 207, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1558, 0, 0, 0, 0, 0, 577, 0,
	2562, 2828, 0, 0, 0, 0, 0, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3231, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0,
	0, 3386, 208, 1063, 208, 208, 1063, 0, 1063, 208,
	0, 0, 0, 0, 0, 817, 0, 208, 0, 207,
	0, 0, 2522, 2523, 2524, 2634, 0, 0, 817, 2521,
	2519, 2520, 2512, 2513, 2514, 2515, 2517, 2518, 0, 1180,
	0, 1180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2649, 0, 0, 0, 0, 1063, 1063,
	208, 208, 0, 3385, 1422, 1423, 0, 0, 0, 1180,
	207, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	207, 2226, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 208, 208, 208,
	208, 0, 1063, 1063, 0, 0, 0, 1063, 0, 0,
	1063, 208, 208, 0, 2828, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2226, 2510, 2511, 0, 2528, 2529, 2530,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2435, 0, 3231, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 1447, 1448,
	1449, 1450, 0, 0, 0, 208, 0, 1180, 1430, 2226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2525, 0, 0, 0, 2510,
	2511, 0, 2528, 2529, 2530, 0, 0, 0, 0, 1452,
	1453, 1454, 0, 2779, 0, 0, 0, 1938, 2796, 0,
	0, 0, 0, 2783, 2784, 0, 0, 2787, 0, 0,
	0, 2790, 0, 0, 0, 0, 0, 0, 0, 0,
	2794, 0, 0, 0, 0, 0, 0, 0, 0, 2801,
	0, 206, 2562, 206, 206, 0, 0, 0, 206, 0,
	2525, 0, 1445, 0, 0, 0, 584, 0, 2516, 0,
	0, 0, 0, 2821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2837, 2838, 0, 2839, 2840, 2841, 0, 0,
	2842, 0, 0, 0, 2844, 0, 0, 0, 0, 206,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2531, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 2516, 0, 2872, 2873, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 206, 206, 206,
	0, 0, 2526, 0, 0, 1446, 0, 0, 0, 0,
	206, 206, 0, 2890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2531, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 2919, 2526, 0, 1425,
	1063, 0, 208, 208, 0, 0, 0, 0, 0, 208,
	206, 2927, 2930, 0, 208, 0, 0, 1059, 0, 0,
	1160, 0, 1059, 0, 206, 2527, 1424, 0, 0, 0,
	0, 0, 0, 0, 1444, 2948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 1160, 0, 0, 0, 0, 0, 0,
	2428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2527, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 1558, 0, 0, 0, 0, 0, 1430, 0, 0,
	3001, 0, 0, 0, 0, 0, 1160, 1160, 0, 0,
	0, 1160, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2522, 2523, 2524, 1452, 1453,
	1454, 0, 2521, 2519, 2520, 2512, 2513, 2514, 2515, 2517,
	2518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3035, 3036, 0, 0, 0, 0, 3040, 3041, 0,
	1063, 208, 3044, 3045, 0, 1160, 0, 1063, 0, 3049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 3053, 0,
	2522, 2523, 2524, 0, 0, 3057, 0, 2521, 2519, 2520,
	2512, 2513, 2514, 2515, 2517, 2518, 208, 208, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 208, 0, 208, 0, 208, 0, 0, 0,
	0, 0, 1458, 1588, 0, 999, 0, 0, 206, 1425,
	0, 0, 0, 1471, 0, 0, 1451, 0, 0, 0,
	0, 206, 1588, 0, 0, 0, 0, 0, 584, 0,
	0, 0, 0, 584, 1446, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1441, 1063, 0, 1063, 0, 0, 2930, 0, 0,
	1063, 0, 0, 1063, 208, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 887, 1063, 1063, 1063, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 208, 0, 208, 0, 208,
	0, 208, 0, 208, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2930, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 3199, 3200, 3201, 0, 0, 0, 1468,
	1063, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 3209, 3210,
	584, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 1445, 3217, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 577, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 206, 206, 0, 0, 0,
	0, 0, 206, 2930, 0, 0, 0, 0, 0, 1059,
	0, 3253, 0, 0, 0, 1063, 0, 0, 0, 3259,
	0, 206, 817, 206, 0, 206, 3264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2930,
	0, 0, 2930, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2930, 2930, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 206, 0, 0, 206, 0, 0, 0,
	0, 0, 208, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 3326, 584, 206, 3329, 206, 0, 206, 0,
	206, 0, 206, 0, 1160, 0, 0, 0, 124, 0,
	0, 1059, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 58, 119, 0, 0,
	0, 1461, 0, 0, 1436, 1437, 1443, 1442, 1438, 1464,
	62, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 0, 2037, 39, 121, 2038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	41, 0, 0, 0, 0, 42, 0, 817, 0, 208,
	74, 0, 0, 122, 0, 0, 0, 0, 40, 85,
	208, 0, 0, 0, 75, 82, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1063, 0, 0, 0,
	3433, 3433, 3433, 0, 0, 0, 1160, 0, 1160, 208,
	1063, 43, 0, 1063, 1160, 208, 0, 1160, 0, 3452,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	1160, 1160, 1160, 0, 0, 0, 0, 0, 0, 0,
	2930, 208, 2930, 0, 0, 0, 208, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 3433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 208, 999, 208, 0, 208, 0, 208, 208, 0,
	0, 1063, 1063, 1063, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 206, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 208, 0, 208, 0,
	0, 3433, 0, 992, 77, 0, 0, 0, 0, 0,
	0, 0, 44, 1060, 0, 0, 1161, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 208,
	0, 208, 0, 208, 0, 47, 146, 80, 0, 81,
	0, 45, 202, 0, 0, 123, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 208, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	50, 0, 0, 117, 0, 1422, 1423, 0, 0, 1059,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 1161, 1161, 0, 0, 0, 1161, 118, 206,
	1161, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 150, 206, 0, 0, 0, 1444, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 173,
	0, 0, 0, 1059, 584, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 1161, 0, 852, 87, 0, 0, 0, 149, 0,
	206, 3, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	1448, 1449, 1450, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 660, 0, 0, 0, 0, 206, 0, 0,
	206, 0, 206, 0, 206, 0, 206, 206, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1452, 1453, 1454, 0, 1063, 0, 0, 0, 0, 87,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 643, 206, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	1059, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	645, 0, 1063, 1445, 0, 0, 0, 206, 206, 0,
	206, 0, 206, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	1160, 646, 0, 812, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 208, 1059, 0, 0, 1160, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 648,
	0, 0, 649, 208, 208, 208, 0, 0, 1451, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 1063, 1446, 0, 0, 664,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 1160, 1160, 0, 1160,
	0, 208, 0, 0, 1063, 208, 0, 1063, 1063, 1063,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 1063,
	0, 651, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 1063, 668, 652,
	0, 0, 0, 1435, 1433, 1434, 1426, 1427, 1428, 1429,
	1431, 1432, 999, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 208, 1063, 208, 0, 667, 999, 0, 0,
	0, 0, 0, 653, 0, 0, 654, 0, 0, 0,
	0, 208, 662, 0, 0, 0, 0, 0, 0, 655,
	0, 0, 0, 0, 0, 0, 1588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 1171, 656, 663,
	0, 0, 0, 0, 1063, 0, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 659, 0,
	0, 0, 206, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 661, 1060, 0, 0,
	0, 0, 206, 206, 206, 0, 0, 0, 0, 0,
	0, 1588, 0, 1255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 1279, 1279, 1171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 206, 0, 0, 0, 1059, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1378,
	0, 0, 1161, 0, 1161, 206, 0, 0, 0, 0,
	1161, 0, 0, 1161, 0, 0, 87, 0, 87, 0,
	87, 0, 0, 0, 0, 0, 1161, 1161, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 208, 208, 0, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	208, 0, 0, 0, 1063, 0, 0, 0, 0, 1160,
	0, 601, 0, 0, 0, 812, 87, 0, 0, 1059,
	0, 0, 0, 0, 87, 0, 0, 1059, 0, 0,
	0, 87, 0, 1063, 1063, 1063, 0, 0, 0, 0,
	1060, 0, 602, 621, 0, 0, 0, 0, 1160, 1063,
	0, 1160, 1160, 1160, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 604, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 1160, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 999, 999,
	0, 1160, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 608, 631,
	0, 0, 0, 634, 1059, 0, 0, 1059, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 1595, 0, 0,
	0, 0, 0, 0, 0, 0, 1485, 0, 0, 0,
	1604, 0, 0, 0, 0, 1063, 0, 1063, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 1500, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	630, 0, 0, 0, 0, 1060, 0, 611, 0, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 208, 1063, 0, 0, 1063, 0, 1063, 609, 0,
	0, 0, 206, 206, 0, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 1063, 0, 0, 1063, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 999, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 615, 1060, 0, 0, 87,
	0, 0, 1586, 0, 1589, 1059, 0, 0, 0, 0,
	1063, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 629, 0, 628,
	0, 0, 617, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 0, 1063, 624,
	1060, 0, 0, 1161, 635, 0, 632, 0, 0, 0,
	1063, 622, 0, 0, 1789, 0, 0, 0, 0, 208,
	0, 1801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1255, 0, 1820, 0, 1820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 999, 0,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 208, 0, 1059, 0, 0, 1063, 0, 1160, 1588,
	0, 1161, 1161, 1161, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 208, 0, 0, 0, 1160, 1160, 1160,
	0, 0, 1801, 0, 0, 1865, 0, 0, 0, 0,
	206, 0, 0, 1160, 1642, 0, 0, 0, 0, 206,
	206, 0, 0, 1879, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 1889, 0, 1891, 0, 1893, 0, 1895,
	0, 1896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1654, 1636, 1643, 1626, 1664, 1663, 0, 0,
	1628, 1627, 0, 1910, 0, 0, 0, 0, 1674, 1675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 1063, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1665, 0,
	1661, 1660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1659, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 1059, 1658, 1656, 1657, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1647, 1641, 1649, 1651,
	1652, 1653, 1648, 0, 1646, 0, 1160, 0, 0, 1059,
	0, 1160, 0, 0, 1670, 1671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 1059, 0, 0, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1630, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	1662, 206, 206, 0, 1639, 0, 1640, 0, 792, 0,
	0, 792, 792, 0, 0, 0, 0, 0, 1059, 0,
	2170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 1059, 1655, 0, 0, 0, 1623,
	1621, 1622, 1625, 1624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2005, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 1059, 0, 1631, 1632, 1634, 1635, 0, 206,
	0, 0, 0, 1494, 1059, 0, 0, 1494, 0, 1650,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 0, 1666, 1667,
	1668, 1669, 0, 0, 0, 1161, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	206, 0, 0, 1060, 0, 0, 0, 0, 1637, 0,
	1160, 987, 0, 1644, 1672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 1161, 1161, 1161,
	0, 0, 0, 0, 0, 1589, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2304,
	0, 0, 0, 0, 1801, 0, 0, 0, 1161, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 2343, 0, 0, 1279,
	0, 1279, 0, 1279, 0, 1171, 1171, 0, 0, 0,
	1060, 0, 0, 1060, 0, 1160, 0, 0, 0, 0,
	0, 0, 0, 0, 1160, 1160, 0, 0, 0, 0,
	1160, 2386, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2391, 0, 1171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 0, 1060, 0, 2409, 1171, 0, 2412,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 87, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 0, 0, 2426, 0, 0, 0, 87, 0,
	87, 0, 1458, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 87, 1444, 87, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 1060,
	2005, 0, 0, 0, 1161, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 1161, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2626, 0, 0, 0, 0, 1451, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 2662, 1171, 2304, 0, 0, 0, 0, 1422, 1423,
	0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 2701,
	0, 1424, 0, 2705, 0, 0, 987, 0, 0, 1444,
	0, 0, 2712, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 1060, 0, 0,
	0, 1461, 0, 0, 1436, 1437, 1443, 1442, 1438, 1464,
	0, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 0, 2754, 0, 0, 3062, 0, 0,
	0, 0, 1447, 1448, 1449, 1450, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 0, 0, 1060, 0, 1161, 0, 0,
	2775, 0, 1171, 0, 87, 87, 1462, 0, 87, 1472,
	0, 0, 0, 1452, 1453, 1454, 0, 0, 0, 2781,
	0, 1060, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 1469, 87, 87, 0,
	0, 87, 0, 1439, 1440, 0, 0, 0, 0, 1422,
	1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 1460, 0,
	0, 0, 0, 0, 1060, 0, 1445, 0, 1458, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 1471,
	0, 0, 0, 0, 1470, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 812, 0, 0, 0, 0, 1459,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 1441, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 1430, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 1462, 0, 0,
	1472, 0, 0, 0, 1452, 1453, 1454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 1469, 0, 0,
	0, 0, 0, 0, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 1461, 1445, 0, 1436,
	1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434, 1426,
	1427, 1428, 1429, 1431, 1432, 1470, 0, 0, 0, 0,
	0, 2972, 2799, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 2984, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 987, 987, 0,
	1161, 1161, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 3024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 1422, 1423, 0, 1455, 1456,
	1457, 1465, 1466, 1467, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434,
	1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 2501, 0, 0, 0, 987, 0, 1447,
	1448, 1449, 1450, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 751, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 1462, 0, 0, 1472, 0, 0, 3132,
	1452, 1453, 1454, 0, 0, 727, 0, 0, 2304, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 725, 0,
	0, 1468, 0, 1469, 0, 0, 0, 0, 0, 0,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 1460, 728, 0, 0, 0,
	758, 0, 0, 1445, 0, 0, 735, 736, 0, 0,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 752, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 733,
	0, 0, 0, 0, 0, 0, 0, 3238, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 3282,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3307, 1171, 0, 1461, 729, 0, 1436, 1437, 1443, 1442,
	1438, 1464, 0, 1435, 1433, 1434, 1426, 1427, 1428, 1429,
	1431, 1432, 749, 0, 0, 0, 0, 0, 0, 2500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 0, 722,
	0, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 3356, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 3391,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3406,
	1057, 0, 0, 2005, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 1064, 221, 1065, 1066, 1067, 1068, 464, 1069,
	1070, 1071, 1072, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 1073, 229, 230, 231, 232, 233,
	234, 1074, 1075, 235, 469, 470, 471, 1076, 236, 472,
	1077, 1062, 1078, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 1079, 246, 0, 247, 248, 249, 1080,
	938, 250, 251, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	252, 253, 254, 255, 256, 257, 473, 474, 1088, 258,
	1089, 260, 259, 1090, 261, 1091, 1092, 262, 263, 264,
	1093, 265, 1094, 266, 267, 1095, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 1096, 213,
	1097, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 1098, 284, 1099, 1100, 939, 285, 286,
	1101, 287, 479, 1102, 480, 288, 1103, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 1104, 295,
	296, 298, 0, 0, 87, 214, 297, 299, 306, 1105,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 1106,
	486, 1107, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 1108, 318,
	317, 1109, 319, 488, 945, 320, 321, 946, 1110, 322,
	323, 1111, 1112, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 1113, 215, 948, 1114, 489, 490, 341, 342, 1115,
	343, 344, 345, 1116, 1117, 347, 348, 349, 1118, 1119,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 1120, 360, 361, 493, 362,
	494, 363, 1121, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 1122, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 1123,
	386, 951, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 1124, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 1125, 413,
	393, 394, 414, 952, 415, 497, 416, 417, 1126, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 1127, 429, 430, 428, 1128, 431, 432, 433, 434,
	435, 272, 436, 1129, 499, 500, 501, 502, 1130, 443,
	1131, 437, 438, 503, 439, 504, 1132, 440, 441, 442,
	0, 444, 445, 1133, 1134, 446, 447, 448, 449, 450,
	452, 1135, 453, 1136, 451, 454, 455, 456, 505, 506,
	507, 1137, 458, 457, 508, 1138, 1139, 1140, 1141, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	0, 0, 0, 2158, 216, 217, 218, 219, 220, 1064,
	221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 1073, 229, 230, 231, 232, 233, 234, 1074, 1075,
	235, 469, 470, 471, 1076, 236, 472, 1077, 1062, 1078,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	1079, 246, 0, 247, 248, 249, 1080, 938, 250, 251,
	1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254,
	255, 256, 257, 473, 474, 1088, 258, 1089, 260, 259,
	1090, 261, 1091, 1092, 262, 263, 264, 1093, 265, 1094,
	266, 267, 1095, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 1096, 213, 1097, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1098, 284, 1099, 1100, 939, 285, 286, 1101, 287, 479,
	1102, 480, 288, 1103, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1104, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 1105, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1106, 486, 1107, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1108, 318, 317, 1109, 319,
	488, 945, 320, 321, 946, 1110, 322, 323, 1111, 1112,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1113, 215,
	948, 1114, 489, 490, 341, 342, 1115, 343, 344, 345,
	1116, 1117, 347, 348, 349, 1118, 1119, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 1120, 360, 361, 493, 362, 494, 363, 1121,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 1122, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 1123, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 1124, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 1125, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 1126, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 1127, 429,
	430, 428, 1128, 431, 432, 433, 434, 435, 272, 436,
	1129, 499, 500, 501, 502, 1130, 443, 1131, 437, 438,
	503, 439, 504, 1132, 440, 441, 442, 0, 444, 445,
	1133, 1134, 446, 447, 448, 449, 450, 452, 1135, 453,
	1136, 451, 454, 455, 456, 505, 506, 507, 1137, 458,
	457, 508, 1138, 1139, 1140, 1141, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3088, 216, 217, 218, 219, 220, 1064, 221,
	1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1073, 229, 230, 231, 232, 233, 234, 1074, 1075, 235,
	469, 470, 471, 1076, 236, 472, 1077, 1062, 1078, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1079,
	246, 0, 247, 248, 249, 1080, 938, 250, 251, 1081,
	1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255,
	256, 257, 473, 474, 1088, 258, 1089, 260, 259, 1090,
	261, 1091, 1092, 262, 263, 264, 1093, 265, 1094, 266,
	267, 1095, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1096, 213, 1097, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1098,
	284, 1099, 1100, 939, 285, 286, 1101, 287, 479, 1102,
	480, 288, 1103, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1104, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1105, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1106, 486, 1107, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1108, 318, 317, 1109, 319, 488,
	945, 320, 321, 946, 1110, 322, 323, 1111, 1112, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1113, 215, 948,
	1114, 489, 490, 341, 342, 1115, 343, 344, 345, 1116,
	1117, 347, 348, 349, 1118, 1119, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1120, 360, 361, 493, 362, 494, 363, 1121, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1122, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1123, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1124, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1125, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 1126, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1127, 429, 430,
	428, 1128, 431, 432, 433, 434, 435, 272, 436, 1129,
	499, 500, 501, 502, 1130, 443, 1131, 437, 438, 503,
	439, 504, 1132, 440, 441, 442, 0, 444, 445, 1133,
	1134, 446, 447, 448, 449, 450, 452, 1135, 453, 1136,
	451, 454, 455, 456, 505, 506, 507, 1137, 458, 457,
	508, 1138, 1139, 1140, 1141, 459, 460, 509, 461, 462,
	463, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3205, 0, 216, 217,
	218, 219, 220, 1064, 221, 1065, 1066, 1067, 1068, 464,
	1069, 1070, 1071, 1072, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 1073, 229, 230, 231, 232,
	233, 234, 1074, 1075, 235, 469, 470, 471, 1076, 236,
	472, 1077, 1062, 1078, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 1079, 246, 0, 247, 248, 249,
	1080, 938, 250, 251, 1081, 1082, 1084, 1083, 1085, 1086,
	1087, 252, 253, 254, 255, 256, 257, 473, 474, 1088,
	258, 1089, 260, 259, 1090, 261, 1091, 1092, 262, 263,
	264, 1093, 265, 1094, 266, 267, 1095, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 1096,
	213, 1097, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1098, 284, 1099, 1100, 939, 285,
	286, 1101, 287, 479, 1102, 480, 288, 1103, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1104,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	1105, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1106, 486, 1107, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1108,
	318, 317, 1109, 319, 488, 945, 320, 321, 946, 1110,
	322, 323, 1111, 1112, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1113, 215, 948, 1114, 489, 490, 341, 342,
	1115, 343, 344, 345, 1116, 1117, 347, 348, 349, 1118,
	1119, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 1120, 360, 361, 493,
	362, 494, 363, 1121, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 1122, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	1123, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 1124, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 1125,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 1126,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 1127, 429, 430, 428, 1128, 431, 432, 433,
	434, 435, 272, 436, 1129, 499, 500, 501, 502, 1130,
	443, 1131, 437, 438, 503, 439, 504, 1132, 440, 441,
	442, 0, 444, 445, 1133, 1134, 446, 447, 448, 449,
	450, 452, 1135, 453, 1136, 451, 454, 455, 456, 505,
	506, 507, 1137, 458, 457, 508, 1138, 1139, 1140, 1141,
	459, 460, 509, 461, 462, 463, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2824, 0, 216, 217, 218, 219, 220, 1064, 221,
	1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1073, 229, 230, 231, 232, 233, 234, 1074, 1075, 235,
	469, 470, 471, 1076, 236, 472, 1077, 1062, 1078, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1079,
	246, 0, 247, 248, 249, 1080, 938, 250, 251, 1081,
	1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255,
	256, 257, 473, 474, 1088, 258, 1089, 260, 259, 1090,
	261, 1091, 1092, 262, 263, 264, 1093, 265, 1094, 266,
	267, 1095, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1096, 213, 1097, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1098,
	284, 1099, 1100, 939, 285, 286, 1101, 287, 479, 1102,
	480, 288, 1103, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1104, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1105, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1106, 486, 1107, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1108, 318, 317, 1109, 319, 488,
	945, 320, 321, 946, 1110, 322, 323, 1111, 1112, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1113, 215, 948,
	1114, 489, 490, 341, 342, 1115, 343, 344, 345, 1116,
	1117, 347, 348, 349, 1118, 1119, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1120, 360, 361, 493, 362, 494, 363, 1121, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1122, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1123, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1124, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1125, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 1126, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1127, 429, 430,
	428, 1128, 431, 432, 433, 434, 435, 272, 436, 1129,
	499, 500, 501, 502, 1130, 443, 1131, 437, 438, 503,
	439, 504, 1132, 440, 441, 442, 0, 444, 445, 1133,
	1134, 446, 447, 448, 449, 450, 452, 1135, 453, 1136,
	451, 454, 455, 456, 505, 506, 507, 1137, 458, 457,
	508, 1138, 1139, 1140, 1141, 459, 460, 509, 461, 462,
	463, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2816, 0, 216, 217,
	218, 219, 220, 1064, 221, 1065, 1066, 1067, 1068, 464,
	1069, 1070, 1071, 1072, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 1073, 229, 230, 231, 232,
	233, 234, 1074, 1075, 235, 469, 470, 471, 1076, 236,
	472, 1077, 1062, 1078, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 1079, 246, 0, 247, 248, 249,
	1080, 938, 250, 251, 1081, 1082, 1084, 1083, 1085, 1086,
	1087, 252, 253, 254, 255, 256, 257, 473, 474, 1088,
	258, 1089, 260, 259, 1090, 261, 1091, 1092, 262, 263,
	264, 1093, 265, 1094, 266, 267, 1095, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 1096,
	213, 1097, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1098, 284, 1099, 1100, 939, 285,
	286, 1101, 287, 479, 1102, 480, 288, 1103, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1104,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	1105, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1106, 486, 1107, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1108,
	318, 317, 1109, 319, 488, 945, 320, 321, 946, 1110,
	322, 323, 1111, 1112, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1113, 215, 948, 1114, 489, 490, 341, 342,
	1115, 343, 344, 345, 1116, 1117, 347, 348, 349, 1118,
	1119, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 1120, 360, 361, 493,
	362, 494, 363, 1121, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 1122, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	1123, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 1124, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 1125,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 1126,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 1127, 429, 430, 428, 1128, 431, 432, 433,
	434, 435, 272, 436, 1129, 499, 500, 501, 502, 1130,
	443, 1131, 437, 438, 503, 439, 504, 1132, 440, 441,
	442, 0, 444, 445, 1133, 1134, 446, 447, 448, 449,
	450, 452, 1135, 453, 1136, 451, 454, 455, 456, 505,
	506, 507, 1137, 458, 457, 508, 1138, 1139, 1140, 1141,
	459, 460, 509, 461, 462, 463, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2686, 0, 216, 217, 218, 219, 220, 1064, 221,
	1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1073, 229, 230, 231, 232, 233, 234, 1074, 1075, 235,
	469, 470, 471, 1076, 236, 472, 1077, 1062, 1078, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1079,
	246, 0, 247, 248, 249, 1080, 938, 250, 251, 1081,
	1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255,
	256, 257, 473, 474, 1088, 258, 1089, 260, 259, 1090,
	261, 1091, 1092, 262, 263, 264, 1093, 265, 1094, 266,
	267, 1095, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1096, 213, 1097, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1098,
	284, 1099, 1100, 939, 285, 286, 1101, 287, 479, 1102,
	480, 288, 1103, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1104, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1105, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1106, 486, 1107, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1108, 318, 317, 1109, 319, 488,
	945, 320, 321, 946, 1110, 322, 323, 1111, 1112, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1113, 215, 948,
	1114, 489, 490, 341, 342, 1115, 343, 344, 345, 1116,
	1117, 347, 348, 349, 1118, 1119, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1120, 360, 361, 493, 362, 494, 363, 1121, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1122, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1123, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1124, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1125, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 1126, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1127, 429, 430,
	428, 1128, 431, 432, 433, 434, 435, 272, 436, 1129,
	499, 500, 501, 502, 1130, 443, 1131, 437, 438, 503,
	439, 504, 1132, 440, 441, 442, 0, 444, 445, 1133,
	1134, 446, 447, 448, 449, 450, 452, 1135, 453, 1136,
	451, 454, 455, 456, 505, 506, 507, 1137, 458, 457,
	508, 1138, 1139, 1140, 1141, 459, 460, 509, 461, 462,
	463, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2050, 0, 216, 217,
	218, 219, 220, 1064, 221, 1065, 1066, 1067, 1068, 464,
	1069, 1070, 1071, 1072, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 1073, 229, 230, 231, 232,
	233, 234, 1074, 1075, 235, 469, 470, 471, 1076, 236,
	472, 1077, 1062, 1078, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 1079, 246, 0, 247, 248, 249,
	1080, 938, 250, 251, 1081, 1082, 1084, 1083, 1085, 1086,
	1087, 252, 253, 254, 255, 256, 257, 473, 474, 1088,
	258, 1089, 260, 259, 1090, 261, 1091, 1092, 262, 263,
	264, 1093, 265, 1094, 266, 267, 1095, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 1096,
	213, 1097, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1098, 284, 1099, 1100, 939, 285,
	286, 1101, 287, 479, 1102, 480, 288, 1103, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1104,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	1105, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1106, 486, 1107, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1108,
	318, 317, 1109, 319, 488, 945, 320, 321, 946, 1110,
	322, 323, 1111, 1112, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1113, 215, 948, 1114, 489, 490, 341, 342,
	1115, 343, 344, 345, 1116, 1117, 347, 348, 349, 1118,
	1119, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 1120, 360, 361, 493,
	362, 494, 363, 1121, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 1122, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	1123, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 1124, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 1125,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 1126,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 1127, 429, 430, 428, 1128, 431, 432, 433,
	434, 435, 272, 436, 1129, 499, 500, 501, 502, 1130,
	443, 1131, 437, 438, 503, 439, 504, 1132, 440, 441,
	442, 0, 444, 445, 1133, 1134, 446, 447, 448, 449,
	450, 452, 1135, 453, 1136, 451, 454, 455, 456, 505,
	506, 507, 1137, 458, 457, 508, 1138, 1139, 1140, 1141,
	459, 460, 509, 461, 462, 463, 1165, 0, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1772, 0, 0, 0, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 1054, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 1064, 221, 1065,
	1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 1073,
	229, 230, 231, 232, 233, 234, 1074, 1075, 235, 469,
	470, 471, 1076, 236, 472, 1077, 1062, 1078, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 1079, 246,
	0, 247, 248, 249, 1080, 938, 250, 251, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255, 256,
	257, 473, 474, 1088, 258, 1089, 260, 259, 1090, 261,
	1091, 1092, 262, 263, 264, 1093, 265, 1094, 266, 267,
	1095, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 1096, 213, 1097, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1098, 284,
	1099, 1100, 939, 285, 286, 1101, 287, 479, 1102, 480,
	288, 1103, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1104, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 1105, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1106, 486, 1107, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1108, 318, 317, 1109, 319, 488, 945,
	320, 321, 946, 1110, 322, 323, 1111, 1112, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1113, 215, 948, 1114,
	489, 490, 341, 342, 1115, 343, 344, 345, 1116, 1117,
	347, 348, 349, 1118, 1119, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	1120, 360, 361, 493, 362, 494, 363, 1121, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 1122,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 1123, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 1124, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 1125, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 1126, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 1127, 429, 430, 428,
	1128, 431, 432, 433, 434, 435, 272, 436, 1129, 499,
	500, 501, 502, 1130, 443, 1131, 437, 438, 503, 439,
	504, 1132, 440, 441, 442, 0, 444, 445, 1133, 1134,
	446, 447, 448, 449, 450, 452, 1135, 453, 1136, 451,
	454, 455, 456, 505, 506, 507, 1137, 458, 457, 508,
	1138, 1139, 1140, 1141, 459, 460, 509, 461, 462, 463,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 1064, 221, 1065, 1066, 1067, 1068, 464, 1069,
	1070, 1071, 1072, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 1073, 229, 230, 231, 232, 233,
	234, 1074, 1075, 235, 469, 470, 471, 1076, 236, 472,
	1077, 1062, 1078, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 1079, 246, 0, 247, 248, 249, 1080,
	938, 250, 251, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	252, 253, 254, 255, 256, 257, 473, 474, 1088, 258,
	1089, 260, 259, 1090, 261, 1091, 1092, 262, 263, 264,
	1093, 265, 1094, 266, 267, 1095, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 1096, 213,
	1097, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 1098, 284, 1099, 1100, 939, 285, 286,
	1101, 287, 479, 1102, 480, 288, 1103, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 1104, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 1105,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 1106,
	486, 1107, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 1108, 318,
	317, 1109, 319, 488, 945, 320, 321, 946, 1110, 322,
	323, 1111, 1112, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 1113, 215, 948, 1114, 489, 490, 341, 342, 1115,
	343, 344, 345, 1116, 1117, 347, 348, 349, 1118, 1119,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 1120, 360, 361, 493, 362,
	494, 363, 1121, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 1122, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 1123,
	386, 951, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 1124, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 1125, 413,
	393, 394, 414, 952, 415, 497, 416, 417, 1126, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 1127, 429, 430, 428, 1128, 431, 432, 433, 434,
	435, 272, 436, 1129, 499, 500, 501, 502, 1130, 443,
	1131, 437, 438, 503, 439, 504, 1132, 440, 441, 442,
	0, 444, 445, 1133, 1134, 446, 447, 448, 449, 450,
	452, 1135, 453, 1136, 451, 454, 455, 456, 505, 506,
	507, 1137, 458, 457, 508, 1138, 1139, 1140, 1141, 459,
	460, 509, 461, 462, 463, 2026, 0, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 2023,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 2024, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 2022, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 2025, 0, 0,
	0, 0, 0, 0, 850, 2021, 0, 0, 813, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 179, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 181, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 1304, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 173, 459,
	460, 509, 461, 462, 463, 824, 174, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 1499, 1497, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 179, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 181, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 1304, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 173, 459,
	460, 509, 461, 462, 463, 824, 174, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 1499, 2448, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 179, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 181, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 1304, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 173, 459,
	460, 509, 461, 462, 463, 824, 174, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 1499, 1497, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 2111, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 2116, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 2112, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	2113, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 816, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 828, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	3403, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 828, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	3262, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 828, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 2995, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 1559, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 2803, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 1940, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 1939, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 828,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 1559, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 2116, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 1497, 0, 0,
	2121, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 465,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 257, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2119, 848, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 2107, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 2096,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 2094, 848, 2086, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 2089,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 2090, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 2091, 2088, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	2092, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 2087, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 2083, 848, 2086, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 2089, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 2090, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 2091, 2088,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 2092, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	2087, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 1505, 0, 850, 0, 0, 0, 0, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 1927, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 1194, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 1193, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 1188, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 1187, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 1183, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 3432, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	3431, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 3430, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 3432, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	3431, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	0, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 880, 837, 838, 839, 835, 836,
	849, 0, 2104, 0, 0, 0, 0, 2102, 2103, 0,
	0, 216, 217, 218, 219, 220, 850, 221, 0, 0,
	0, 848, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 0, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 3432, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 0,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 0, 932, 0,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 0, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 0, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 3431, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 813, 0,
	1001, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 848, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 928, 235, 469, 470, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 480, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 988, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 215, 948, 0, 933, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 496, 995, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 179, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	959, 0, 429, 430, 428, 181, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 960, 439, 961, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 451, 454, 455, 456, 1304, 506,
	507, 0, 458, 457, 508, 1001, 0, 0, 173, 459,
	460, 509, 461, 462, 463, 0, 174, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 0, 985, 0, 1591, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 928, 235, 469,
	470, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 480,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 988, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 215, 948, 0,
	933, 490, 341, 342, 0, 343, 344, 345, 0, 993,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 995, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 179, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 959, 0, 429, 430, 428,
	181, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 960, 439,
	961, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 451,
	454, 455, 456, 1304, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 173, 459, 460, 509, 461, 462, 463,
	0, 174, 0, 0, 2555, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 1591, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 928, 235,
	469, 470, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	480, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 988, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 215, 948,
	0, 933, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 995, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 960,
	439, 961, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 984, 0, 1001, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 985, 929, 990, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 928, 235, 469, 470,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 988, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 215, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 995, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1001,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 0, 985,
	0, 990, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 928, 235, 469, 470, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 480, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 988, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 215, 948, 0, 933, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 995, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 960, 439, 961, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1001, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 0, 985, 0, 990, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 928, 235, 469, 470,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 215, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 995, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 813,
	0, 1158, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 1486, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1062, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 179, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 181, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 1304,
	506, 507, 0, 458, 457, 508, 1301, 0, 1158, 173,
	459, 460, 509, 461, 462, 463, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 149, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 1304, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 0, 174, 0, 0, 0, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1158, 1157, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 1767, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1062, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 2749, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1001, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 0, 0, 0, 1308, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 928, 235, 469, 470,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 215, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 813,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 179, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 181, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 1304,
	506, 507, 0, 458, 457, 508, 210, 0, 0, 173,
	459, 460, 509, 461, 462, 463, 0, 174, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 149, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 210, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 1596, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 210, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 2702, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 210, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 2339, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 210, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 2827, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 685, 0, 576, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 1857, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 582, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 581, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 575,
	0, 576, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 585, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 582, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 581, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 576, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 585, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 582, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 1887, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 581, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 576, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 585, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 582, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 581, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 585, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1333,
	0, 1158, 1157, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1062, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 1332, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	1331, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 1330, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1299, 0, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1298,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1295, 0, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1062, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1294, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1233, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1062, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1232, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1230, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1229, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1151, 0, 1158, 1157, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1153, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1158, 1157, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1062, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1158, 1157, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 1158, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 1062, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 2227, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 2224, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 2374, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 2230, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 2371, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	2373, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 2370, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	2229, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 2372, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 2227, 236, 472, 0,
	0, 2221, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 2224, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 2230, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	2220, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 2229, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 2228, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1380, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 1383, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 1381, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 1382, 457,
	508, 1146, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1148, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1143, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1145, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1050, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1052, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 538, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 537, 220, 527, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 530, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 531, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 532, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 526,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 527, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	530, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 531, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 532, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 2303, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1866, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 1800, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1793, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1792, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1788,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1790, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1288, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1287,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1285, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1284, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1282, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1281, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1278, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1277, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1253, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1168, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1170, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 530, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 531, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 532, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 1894, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 1892,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	1890, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 677, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 676, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	675, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 2374, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 3150, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 517, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 516, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 515, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 2162, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 210,
	2361, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 2950, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 210, 2361, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 2358, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 1873, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1864, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 558, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 1028, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 559, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 555, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 554, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1812, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1811, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 558, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 548, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 559,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 555, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	1307, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 554, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1292,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1291, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1241, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1240,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1225, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1162, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 558, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 1028, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 559, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 555, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 554, 500, 501, 502, 0, 443, 0,
	437, 1029, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 1012, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 558, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 548, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 546, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 547, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 559, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 549, 391, 0, 392, 396, 397, 555,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 550, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 554, 500, 501, 502, 0, 443, 0, 437, 552,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 542, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 543, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 540,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 534, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 512, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 2643, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 2641,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	2629, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 2321, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 543, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 1824, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 0, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1261, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1203, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 967, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 0, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 0, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 0, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 0, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 1423,
	0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 1448, 1449, 1450, 0,
	0, 1424, 0, 0, 0, 1430, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1472, 0, 0, 0, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 1469,
	0, 0, 0, 0, 0, 0, 1439, 1440, 0, 0,
	0, 0, 1447, 1448, 1449, 1450, 0, 0, 0, 0,
	0, 1460, 1430, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 1470, 0, 1472,
	0, 0, 0, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 1469, 0, 0, 0,
	0, 0, 0, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 1451, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 1451, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 1446,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 1463, 0, 0, 0, 0, 1461,
	0, 1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0,
	0, 0, 0, 0, 0, 2497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 1447, 1448, 1449, 1450, 0, 1425,
	0, 0, 0, 1471, 1430, 0, 1461, 0, 0, 1436,
	1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434, 1426,
	1427, 1428, 1429, 1431, 1432, 0, 1424, 0, 1462, 0,
	0, 1472, 2496, 0, 1444, 1452, 1453, 1454, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	0, 0, 0, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 1470, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 1451, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 1423, 0, 1455, 1456,
	1457, 1465, 1466, 1467, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 1446, 1471, 0, 0, 1461, 0,
	0, 1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 1424, 1463,
	0, 0, 0, 0, 2495, 0, 1444, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	1448, 1449, 1450, 0, 0, 1424, 0, 0, 0, 1430,
	0, 1461, 0, 1444, 1436, 1437, 1443, 1442, 1438, 1464,
	1441, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 1462, 0, 0, 1472, 2038, 0, 0,
	1452, 1453, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 1469, 0, 0, 0, 0, 0, 0,
	1439, 1440, 0, 0, 0, 0, 1447, 1448, 1449, 1450,
	0, 0, 0, 0, 0, 1460, 1430, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 1470, 0, 1472, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 1451, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457,
	1465, 1466, 1467, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 1446, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 1463, 0,
	0, 0, 0, 1461, 0, 1444, 1436, 1437, 1443, 1442,
	1438, 1464, 1441, 1435, 1433, 1434, 1426, 1427, 1428, 1429,
	1431, 1432, 0, 0, 0, 0, 3382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 1423, 0,
	1455, 1456, 1457, 1465, 1466, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 1447, 1448,
	1449, 1450, 0, 1425, 0, 0, 0, 1471, 1430, 0,
	1461, 0, 0, 1436, 1437, 1443, 1442, 1438, 1464, 0,
	1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0,
	1424, 0, 1462, 3313, 0, 1472, 0, 0, 1444, 1452,
	1453, 1454, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 0, 1469, 0, 0, 0, 0, 0, 0, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	1470, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 1472, 0,
	0, 0, 1452, 1453, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 0, 1469, 0, 1451, 0, 0,
	0, 0, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 1446, 1471,
	0, 0, 1461, 0, 0, 1436, 1437, 1443, 1442, 1438,
	1464, 0, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431,
	1432, 0, 1424, 1463, 0, 3312, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 1423, 0, 1455,
	1456, 1457, 1465, 1466, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1448, 1449, 1450, 0, 0, 1424,
	0, 0, 0, 1430, 0, 1461, 0, 1444, 1436, 1437,
	1443, 1442, 1438, 1464, 1441, 1435, 1433, 1434, 1426, 1427,
	1428, 1429, 1431, 1432, 0, 0, 0, 1462, 3208, 0,
	1472, 0, 0, 0, 1452, 1453, 1454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 1469, 0, 0,
	0, 0, 0, 0, 1439, 1440, 0, 0, 0, 0,
	1447, 1448, 1449, 1450, 0, 0, 0, 0, 0, 1460,
	1430, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 1470, 0, 1472, 0, 0,
	0, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 1469, 0, 0, 0, 0, 0,
	0, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 1451, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 1423,
	0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0, 1451,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 1446, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 1463, 0, 0, 0, 0, 1461, 0, 1444,
	1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435, 1433, 1434,
	1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0, 0,
	3115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 1447, 1448, 1449, 1450, 0, 1425, 0, 0,
	0, 1471, 1430, 0, 1461, 0, 0, 1436, 1437, 1443,
	1442, 1438, 1464, 0, 1435, 1433, 1434, 1426, 1427, 1428,
	1429, 1431, 1432, 0, 1424, 0, 1462, 3067, 0, 1472,
	0, 0, 1444, 1452, 1453, 1454, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 1469, 0, 0, 0,
	0, 0, 0, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 1470, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1472, 0, 0, 0, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 1469,
	0, 1451, 0, 0, 0, 0, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 1446, 1471, 0, 0, 1461, 0, 0, 1436,
	1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434, 1426,
	1427, 1428, 1429, 1431, 1432, 0, 1424, 1463, 0, 3066,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 1424, 0, 0, 0, 1430, 0, 1461,
	0, 1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0,
	0, 1462, 3065, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 1447, 1448, 1449, 1450, 0, 0,
	0, 0, 0, 1460, 1430, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 1470,
	0, 1472, 0, 0, 0, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	0, 0, 0, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 1451, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466,
	1467, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 1446, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 1463, 0, 0, 0,
	0, 1461, 0, 1444, 1436, 1437, 1443, 1442, 1438, 1464,
	1441, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 0, 3032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 1448, 1449, 1450,
	0, 0, 0, 0, 0, 0, 1430, 0, 1461, 0,
	0, 1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0,
	1462, 2834, 0, 1472, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 1471, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 1463, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 2423, 0, 1425, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 1424, 1430, 3482, 0, 0, 0,
	1461, 0, 1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441,
	1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1462,
	0, 2452, 1472, 0, 0, 0, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 2424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 1469,
	0, 0, 0, 0, 0, 0, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 1448, 1449, 1450, 0,
	0, 1460, 0, 0, 0, 1430, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 1462,
	0, 0, 1472, 0, 0, 0, 1452, 1453, 1454, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 1469,
	0, 0, 0, 3481, 0, 0, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 1451, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2129, 0, 0, 0, 0, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 1458,
	0, 0, 0, 2128, 0, 0, 1425, 0, 0, 0,
	1471, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1463, 0, 1461,
	0, 1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 1448, 1449, 1450, 0, 0,
	0, 0, 0, 1424, 1430, 0, 0, 0, 0, 1461,
	0, 1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435,
	1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1462, 0,
	0, 1472, 0, 0, 0, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	0, 0, 0, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 1447, 1448, 1449, 1450, 0, 0,
	1460, 0, 0, 0, 1430, 0, 2540, 0, 1445, 2539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 0, 1462, 0,
	0, 1472, 0, 0, 0, 1452, 1453, 1454, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	0, 0, 0, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1451, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 1471,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 1463, 0, 1461, 0,
	1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 1422,
	1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 1424, 1430, 0, 0, 0, 0, 1461, 0,
	1444, 1436, 1437, 1443, 1442, 1438, 1464, 1441, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 1462, 0, 0,
	1472, 0, 0, 0, 1452, 1453, 1454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 1469, 0, 0,
	0, 0, 0, 0, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 1447, 1448, 1449, 1450, 0, 0, 1460,
	0, 0, 0, 1430, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 1462, 0, 0,
	1472, 0, 0, 0, 1452, 1453, 1454, 0, 0, 0,
	1459, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 1469, 0, 0,
	0, 0, 0, 0, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 1451, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 1461, 0, 0,
	1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434,
	1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 1471, 0, 0, 0, 1461, 0, 0,
	1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433, 1434,
	1426, 1427, 1428, 1429, 1431, 1432, 1424, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 1423, 0, 1455, 1456, 1457, 1465, 1466, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 2541, 0, 0, 1425, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 1424, 0, 0, 0, 1430, 0, 0,
	0, 1444, 2546, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 1447, 1448, 1449, 1450, 0, 0,
	0, 0, 0, 1460, 1430, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 1470,
	0, 1472, 0, 0, 0, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 0,
	0, 0, 0, 0, 0, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 1451, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466,
	1467, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 1446, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 1463, 0, 0, 0,
	0, 1461, 0, 1444, 1436, 1437, 1443, 1442, 1438, 1464,
	1441, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 1448, 1449, 1450,
	0, 0, 0, 0, 0, 0, 1430, 0, 1461, 0,
	0, 1436, 1437, 1443, 1442, 1438, 1464, 0, 1435, 1433,
	1434, 1426, 1427, 1428, 1429, 1431, 1432, 0, 0, 0,
	1462, 0, 0, 1472, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 1460, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 1458, 0, 0, 0, 2494, 0, 0, 1425,
	0, 0, 0, 1471, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	2508, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466,
	1467, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 1471, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 1424, 0, 1430, 1463, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 1447, 1448, 1449, 1450,
	0, 0, 0, 1460, 0, 0, 1430, 0, 0, 0,
	1461, 1445, 0, 1436, 1437, 1443, 1442, 1438, 1464, 0,
	1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1470,
	1462, 0, 0, 1472, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 1460, 0, 0, 0, 1451, 0, 0, 0,
	1445, 0, 1458, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 1471, 1446, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1424, 0, 0, 1463,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465, 1466,
	1467, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 1471, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 1424, 0, 1430, 1463, 0,
	0, 1461, 0, 1444, 1436, 1437, 1443, 1442, 1438, 1464,
	1441, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 1469, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 1447, 1448, 1449, 1450,
	0, 0, 0, 1460, 0, 0, 1430, 0, 0, 0,
	1461, 1445, 0, 1436, 1437, 1443, 1442, 1438, 1464, 0,
	1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 1470,
	1462, 0, 0, 1472, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 1422, 1423, 0, 1455, 1456, 1457, 1465,
	1466, 1467, 1460, 0, 0, 0, 1451, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 1471, 1446, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 1463,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 1430, 1463, 0,
	0, 1461, 0, 0, 1436, 1437, 1443, 1442, 1438, 1464,
	0, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
	0, 1462, 0, 0, 1472, 0, 0, 0, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	1461, 1445, 0, 1436, 1437, 1443, 1442, 1438, 1464, 0,
	1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 1436, 1437, 1443, 1442, 1438, 1464,
	0, 1435, 1433, 1434, 1426, 1427, 1428, 1429, 1431, 1432,
}
var sqlPact = [...]int{

	6767, -1000, -1000, -1000, -1000, -1000, -1000, 243, 241, 219,
	207, 206, 203, 196, 195, -1000, -1000, -1000, 193, -1000,
	-1000, 191, -1000, 190, 185, 181, 179, -1000, 178, 176,
	166, -1000, -1000, -1000, -1000, 165, 161, 160, 50610, 1668,
	61811, 53499, 1696, 45207, 61394, 44790, 60977, 60560, 157, -1000,
	60143, 155, 152, 150, -1000, -1000, 147, 1328, 36837, 143,
	142, 137, 2344, 135, 134, -1000, 127, -1000, 7856, 1254,
	-1000, 126, 125, -1000, 7250, 379, 52671, 2135, 112, 111,
	36419, 2133, 2147, -1000, -1000, 1483, -1000, -1000, 110, 106,
	105, 103, 94, 92, 91, 88, 87, -1000, 86, 85,
	84, 83, 82, 80, 79, 77, 75, 74, 73, 72,
	71, 70, 69, 67, 66, 65, -1000, 9969, 1491, 1363,
	1351, 1327, 1322, 1361, 853, 64, 63, 61, 60, 59,
	55, -1000, -1000, 54, 51, 43, 40, -1000, 37, 36,
	282, 34, 33, 32, 31, 30, 2083, 2134, 1364, 872,
	17309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 65921, 62222, 26, -17, 25, -1000, 2446,
	764, 30150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 459, -1000, -1000, -1000, 285, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1463, 662, -1000, -1000, -1000, 59726, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1666, -14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, -1000, 1650, 204, 1546, -1000, -1000,
	-1000, -1000, -1000, 62222, -1000, -1000, 2788, 2787, 1573, 660,
	59315, -1000, 1251, -1000, 807, 19962, -1000, 1018, -1000, 19962,
	284, -1000, -1000, -1000, -1000, -1000, 44373, 14231, 43956, 43539,
	40632, 58898, 13804, 50199, 1048, -1000, -1000, -1000, -1000, -1000,
	6, 38070, 62222, -1000, 271, -1000, -1000, -1000, -1000, -1000,
	-1000, 26265, 545, 25812, 443, 25359, 367, -1000, -1000, -1000,
	-1000, 2785, 2782, 932, 2779, 2378, 65510, 1385, 2778, 1309,
	994, 880, 2774, 2773, 2769, 2767, 2761, 2757, 2753, 1195,
	58481, 2182, 40205, 39778, 50610, 50610, 1962, 58064, -1000, -1000,
	1100, 1093, -1000, -1000, -1000, -1000, 2238, 2131, 2064, 49782,
	-1000, -1000, 2749, 2742, 2741, 2740, 2739, 65099, 1383, 2737,
	1844, 2735, 2733, 2730, 2729, 2727, 2725, 2724, 2723, 2722,
	-1000, 49365, 48948, 48531, 48114, 57647, 39351, 38924, -1000, -1000,
	-1000, 31814, 5192, 57230, 33095, 50610, 50610, -1000, -1000, 26705,
	-71, -1000, -1000, -1000, 2127, -1000, 26705, -71, -1000, 62222,
	-1000, 2174, 1541, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2056, 1311, 2635, 38497, 1558, 1168, 2237, 2226,
	1255, 1807, 2217, 2207, 2204, 2201, 2199, 1340, 1887, 1269,
	1246, 2194, 2193, 2647, 1726, 43122, 2721, 2720, 2416, 2178,
	2124, -1000, -1000, -1000, -1000, 1224, -1000, -1000, -1000, 45618,
	-1000, -1000, 967, -1000, -1000, 967, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1045, 64277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1358, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2211,
	-1000, 1526, -1000, -1000, 2719, 2134, 1858, 2414, 2414, 2414,
	2487, 423, 418, -1000, 282, -1000, -1000, 71441, -1000, -1000,
	26705, 26705, 26705, 26705, 26705, 1461, -1000, 658, -1000, -1000,
	691, -1000, 656, 593, -1000, -1000, -1000, -1000, -1000, -1000,
	647, 2651, -1000, 888, -1000, -1000, -1000, -1000, 2602, -1000,
	16416, -1000, -1000, -1000, 314, 646, 26705, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 266, 827, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 567,
	1412, 560, 560, 560, -1000, -1000, 875, -1000, -1000, -1000,
	331, 559, 321, 552, -1000, -1000, -1000, -1000, 2158, 645,
	644, -1000, 642, 632, 631, -1000, -1000, -1000, 626, 625,
	619, 616, 615, 613, 612, 610, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 874, -1000, 609, 608, 607, 606, 605,
	602, 601, 597, 596, -1000, -1000, 4, 62222, -1000, 459,
	4, -1000, -1000, 595, -1000, 20402, 20402, 20402, -1000, -1000,
	1635, 26705, -1000, 2527, -1000, 383, -234, 790, 30980, -1000,
	29301, 790, 710, 34342, -1000, 2121, -1000, -1000, 594, 262,
	-1000, -1000, 2118, 62222, 14656, 62222, 50610, 50610, -1000, 2333,
	26705, -1000, -1000, 37659, 62222, 51021, 2557, 8370, 37659, 62222,
	2154, -1000, -1000, -1000, 62222, -1000, 26705, -1000, 2554, 1243,
	-7, -1000, -1000, -1000, -1000, -1000, -1000, 1824, 1884, 982,
	1703, 1379, -1000, 19962, 2366, -1000, -1000, -1000, 255, 14656,
	-1000, 1682, 2313, 1167, -1000, 1700, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1333, 2312, -1000, 1678, 2310, 1319,
	-1000, -1000, 850, 2304, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1603, -1000, -1000, 2392, -1000, -1000, 1819,
	2301, -132, -1000, -1000, 32245, 38070, 2, -1000, -1000, -15,
	-1000, 13377, 71441, -1000, -1000, -1000, 71441, 758, -1000, -1000,
	2300, -1000, 71441, 757, -1000, -1000, 2299, -1000, -1000, -1000,
	2718, -1000, 2715, 1777, 2714, 2711, 2710, -1000, 1637, 1405,
	2708, -1000, 2707, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47697, 47280, 879, -1000, 1627, -1000, -1000, 46863, 843, 1776,
	-1000, -1000, 1774, -1000, 837, -1000, 2706, 56813, 1974, 843,
	1772, -1000, -1000, -1000, -1000, -1000, 50610, -1000, 50610, -1000,
	50610, -1000, 1163, -1000, 64688, -234, -1000, -1000, -1000, -1000,
	-1000, 2298, 2705, 2704, 2703, -1000, 62222, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 172, 2296, -1000, -1000,
	172, 2295, -1000, 172, 2281, -1000, 167, 2280, -1000, -1000,
	1634, 2277, -1000, -82, 2274, -1000, -1000, -82, 2273, -1000,
	-19, -1000, -1000, -1000, 764, -1000, 31397, 56396, 41057, 838,
	628, 36002, 71441, -1000, 32245, 71441, -1000, 41057, 46863, -1000,
	55979, 46452, -1000, -1000, 1116, 1871, -1000, -1000, -1000, -1000,
	41057, 41057, 41057, -1000, 55562, -1000, 1521, 1242, 2410, 50610,
	-1000, 1443, -1000, -1000, -1000, 2419, 2145, -1000, 37248, 52254,
	-1000, 51843, -1000, 51432, -1000, 50610, -1000, 50610, -1000, 2702,
	2701, 2700, 2180, 1368, 1365, 62222, -1000, -1000, 62222, -1000,
	62222, -1000, -1000, -1000, 1823, -1000, -1000, -1000, -1000, 50610,
	-1000, -1000, -1000, -1000, -1000, -1000, 2144, -1000, 1388, -1000,
	1113, -1000, -1000, 182, -1000, -1000, -7, -1000, 64277, -1000,
	-1000, 2134, 1858, -1000, 62222, -1000, -1000, -1000, 2134, 1694,
	1898, 24906, 1897, 26705, 282, -1000, -1000, 282, 282, 19522,
	-1000, -1000, 8370, 8370, 14656, 1085, 26705, 26705, 26705, 26705,
	26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705,
	26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705,
	26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705, 26705,
	26705, 1750, 26705, 1044, 26705, 26705, 26705, 26705, 1933, -1000,
	-1000, 1499, 496, 1548, -1000, 2615, 2615, 2615, 71721, 71721,
	549, 2699, 691, -1000, 26705, -1000, -71, 26705, 15083, -1000,
	2640, 1106, -1000, -1000, 418, 6382, 1746, -1000, 416, 15536,
	-1000, -1000, -1000, 16416, 593, 24453, 26705, 864, 71441, 12952,
	2205, 2016, -1000, 2639, -1000, -1000, 2630, -1000, -1000, -1000,
	-1000, 2630, 1083, 1071, 2638, -1000, 2630, 2630, 591, 748,
	733, 732, 707, 705, 26705, 26705, 26705, 26705, 26705, 26705,
	26705, 26705, -1000, 24013, 23560, 23107, 28025, 22654, 26705, 16856,
	22201, 21748, 62222, 4, 2548, 26705, 198, -1000, 69979, -1000,
	198, 198, 590, -28, 71441, 1867, 1867, 30565, 1802, 1507,
	1507, 1507, -1000, 589, 676, 22, 21, 20, -1000, -1000,
	19, 11, 790, 10386, 53910, 1512, 790, 790, 253, 275,
	415, 28886, 2527, 53910, -1000, -1000, 50610, 588, 15083, 14656,
	1136, -32, 250, 1921, 1916, 1891, -1000, 1187, -33, 1041,
	-9, -1000, 4147, -41, -1000, 1077, -1000, -1000, -1000, -1000,
	136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 869, 584, 576, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 567, 1412,
	560, 560, 560, -1000, -1000, -1000, 331, 559, 321, 552,
	-1000, -1000, -1000, -1000, -1000, -1000, 2110, -15, 51021, 776,
	-43, 951, -7, -1000, 967, -1000, 1381, -1000, -1000, -1000,
	-1000, -1000, -1000, 1108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2650, -1000, 2622, -1000, -1000, 2636, 3, -1000, -1000,
	14656, -1000, -8, 1393, -1000, 42705, 2460, 2426, 2386, 1160,
	-1000, 1145, 2485, 45618, 2503, 2532, 13, -1000, 2103, -1000,
	-1000, 801, 1297, 1040, 45618, 1678, -1000, 8370, -1000, 1942,
	2484, 1208, 1134, 1208, 1208, 1148, -1000, 45618, 1039, 1439,
	41057, -1000, 1031, -1000, -11, 2501, 2530, 9, -1000, 2096,
	1029, -1000, -1000, 50610, 14656, 750, -1000, 41057, 2, 38070,
	62222, 249, -1000, 26705, -71, 26705, -71, -1000, -1000, 2269,
	-1000, -1000, -1000, 2694, 1387, 1842, -1000, -1000, -1000, 551,
	1771, 1678, 1770, -1000, -1000, 46035, 2094, 62222, 1873, -2,
	50610, -1000, -1000, 1431, -1000, 2265, 2258, 603, 2693, -1000,
	1608, 1757, -1000, -1000, -1000, 63866, 1068, 2253, 857, 180,
	2547, 180, 35172, -1000, 62222, -1000, 62222, -1000, -1000, -1000,
	2691, -1000, 50610, -1000, -1000, 50610, -1000, 50610, -1000, 50610,
	-1000, 50610, 50610, -1000, 62222, 41057, 41057, 41057, 1016, 41883,
	-45, 414, -1000, 55151, 62222, 898, 42294, 62222, 2356, -198,
	-1000, 838, 838, 750, -1000, 750, -1000, 50610, 2142, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2690, 2689, -1000, 841,
	50610, 62222, 50610, -1000, -1000, 62222, -1000, 62222, -1000, -1000,
	62222, -1000, 62222, -1000, 62222, -1000, -1000, -1000, -1000, -1000,
	1204, -1000, 2139, -1000, 2137, -1000, 49, -1000, -1000, -1000,
	-1000, 1595, 50610, 50610, 62222, 50610, -1000, 45618, -1000, -1000,
	2134, -1000, -1000, -1000, -1000, -1000, 71441, -1000, 464, -1000,
	-1000, 71441, 1287, 1928, -1000, 1928, 0, -1000, 69700, 1869,
	50610, -1000, -1000, -1000, -1000, -1000, 799, 987, 987, 1001,
	1001, 1001, 1001, 2536, 659, 5014, 4081, 3720, 3720, 3720,
	3720, 3720, 3720, 3720, 3720, 1200, 972, 972, 1200, 1200,
	1200, 1200, 1200, 972, 972, 972, 3720, 3720, 3720, 71721,
	71642, 6122, 26705, 26705, 1028, 1450, 496, 5773, 26705, 7104,
	7104, 7104, 7104, -1000, 1909, -1000, -1000, -1000, -1000, 2092,
	546, 28025, 28025, -1000, -1000, -1000, -1000, 15976, 26705, -1000,
	-1000, -1000, -1000, 21295, -1000, -1000, 69341, -245, 402, -189,
	1, -1000, 26705, 26705, 26705, 401, -1000, 400, -1000, -1000,
	1027, -1000, 1019, 1015, 1012, -1000, 542, 248, 26705, 62222,
	-1000, 67212, 675, -89, -1000, -50, 1173, -1000, 26705, 247,
	-1000, 1500, 539, 538, 398, -51, -1000, 397, 797, 796,
	396, 395, 394, 26705, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 71362, 67109, 66827, 66750, 4695, 9814,
	9488, -52, 393, -1000, 2081, -189, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 391, -1000, 390, -1000, 71161, -189, 389,
	4486, -1000, 28025, 28025, 28025, -1000, 386, -1000, 70059, -1000,
	70879, 20855, 20855, 20855, 381, 70802, 26705, -189, -56, -1000,
	-57, -1000, -1000, 537, -58, 857, 20402, 29732, 14656, -1000,
	857, 857, 26705, -1000, 26705, 1883, -1000, -1000, -1000, 1875,
	1522, 1867, 30565, -1000, -1000, -1000, -1000, 53910, 685, 790,
	-1000, -1000, -1000, -1000, -1000, 53910, -1000, 2602, 2320, -1000,
	-1000, -1000, 62222, 459, -1000, 53910, 53910, 14656, 790, -1000,
	376, 33510, 1, 205, -1000, -1000, 14656, 1956, 1956, 1956,
	-1000, -1000, 62222, 2542, -1000, 1419, -1000, 8370, -1000, 690,
	901, -1000, 2634, 536, -1000, 2630, 2630, 62222, 187, 19962,
	-1000, 967, -1000, -1000, 1257, -1000, 1392, -1000, 1059, -1000,
	-1000, -1000, 19962, -1000, 1653, 62222, 62222, 50610, -1000, -1000,
	1754, 63455, 1751, 8370, 62222, -1000, -1000, 535, 534, 1866,
	1864, 62222, 62222, 63044, 62633, 62222, 1409, 26705, 1720, 1523,
	-71, -71, -1000, -1000, -71, 531, 1062, 50610, 50610, 50610,
	1318, -1000, -1000, -1000, -1000, -1000, 50610, -1000, -1000, 2633,
	-1000, 1208, -1000, -1000, -1000, 1208, 1678, 1312, 50610, 41057,
	849, 62222, 1457, -71, -71, -1000, -1000, -71, 529, 14656,
	1357, -1000, 1981, -1000, -62, -1000, -1000, 12527, 71441, -1000,
	71441, -1000, 62222, -1000, 873, 62222, 42294, 822, 2249, -1000,
	1678, 2248, 459, -1000, -1000, 34757, -15, 838, 41057, 50610,
	-2, 41057, 41057, 41057, 2685, 527, 2684, -1000, 50610, 2246,
	1567, 1749, 2321, 726, 62222, 1529, -1000, 26705, 1356, -1000,
	33927, 887, 62222, 1268, 129, -1000, -1000, -1000, 29, 62222,
	-1000, 2681, -1000, -1000, 172, 172, 172, -1000, 167, 1634,
	-1000, -82, -82, -1000, -1000, 1016, 838, -5, 526, -1000,
	765, 743, 32670, 41057, -63, -1000, -1000, -1000, -1000, -1000,
	50610, 62222, 640, 1951, 62222, -67, -1000, 199, 525, -1000,
	838, 32245, 2074, -1000, -1000, 847, -1000, 1105, -1000, -1000,
	-1000, -1000, -1000, -1000, -15, -15, -1000, -1000, -1000, -1000,
	1178, 1172, 62222, -1000, 14656, 62222, 50610, 14656, 50610, -1000,
	-1000, -1000, -1000, -1000, -1000, 1287, -1000, 26705, -1000, -1000,
	-1000, 19522, -1000, -1000, -1000, 50610, -202, 26705, 26705, 4468,
	440, 26705, 28025, 28025, -1000, 26705, 417, -1000, -1000, -1000,
	-1000, -1000, 2073, 523, 26705, 8370, 5928, 5310, -1000, 374,
	9287, 1200, -1000, 26705, -1000, 372, 19082, -1000, 70338, -25,
	-69, -1000, 2649, 1791, 1455, 1354, 1241, 2632, 12102, -189,
	-85, -1000, -1000, 686, -1000, 2319, -1000, 26705, 70418, 11677,
	-1000, 35587, 861, 1529, -1000, -1000, 2630, 793, -1000, -1000,
	-1000, 793, -1000, 69059, 8370, 8370, 26705, 26705, -1000, 26705,
	26705, 26705, -1000, -1000, 26705, -1000, -1000, 2063, 26705, -1000,
	8370, 8370, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025,
	28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025, 28025,
	28025, 1865, 28025, 2601, 2601, 2601, -1000, 2067, 2063, 26705,
	26705, 8370, 371, 369, 368, -1000, 26705, -189, -1000, -1000,
	1016, -1000, 2014, -1000, -136, -1000, 2527, -1000, -1000, 2014,
	2014, -90, 71441, 30565, 30565, -1000, 521, 26705, 1870, -1000,
	674, -1000, -92, -1000, 53910, -1000, 673, -235, -1000, 737,
	-1000, -1000, -1000, -1000, 459, -1000, -1000, -1000, 188, 53910,
	-1000, -97, -1000, 2540, 363, 14656, -1000, -1000, -1000, -1000,
	-1000, -1000, -15, 1540, 2648, -1000, 2631, 681, 672, 362,
	2630, 359, 358, -15, 62222, -1000, -7, -1000, -1000, -1000,
	26705, -1000, -1000, 2417, 1007, 1000, -1000, 2245, -1000, 1738,
	-1000, 892, -1000, 1296, -1000, 26705, 26705, 520, 519, 1391,
	2680, 2240, 1634, 2233, 1634, -1000, -1000, 810, -1000, 71441,
	515, 513, -1000, -8, 1313, 846, -1000, -1000, 26705, 26705,
	54736, -1000, 2392, 2392, -1000, 999, -1000, -1000, -1000, 1678,
	993, -1000, -1000, 1424, -1000, -1000, 844, -1000, -1000, 26705,
	-1000, -11, 992, 838, 2061, -1000, -1000, 2679, 2678, 2677,
	356, -99, -13, 8370, 2534, 1676, 62222, 50610, 50610, 2520,
	782, -1000, 2602, -1000, -1000, -1000, -1000, 843, -1000, -1000,
	2675, -1000, 897, 14656, 50610, 2232, 1831, 726, 41472, -1000,
	843, 1898, 71441, -1000, 1268, 18629, 2390, -103, -1000, -1000,
	-1000, 857, 35172, 30565, 26705, 2674, -105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54325, 54325, 41057, 41057, 41057,
	838, 62222, 62222, 42294, 2673, 511, 62222, 62222, 510, -1000,
	62222, 62222, 2666, 41057, -1000, -1000, -71, -1000, 1533, 50610,
	-1000, -1000, 841, -1000, -1000, 1472, 1699, 1472, 1550, 68982,
	-1000, 2420, 14656, 2559, 7104, 26705, 26705, 239, 4613, 3557,
	7104, 26705, 26705, 8370, 71922, -109, 26705, 26705, -1000, 26705,
	671, 71441, 2646, 26705, 351, 350, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 341, -1000, -1000, -1000, -1000,
	-1000, 71441, 26705, 183, -1000, -1000, -1000, 66332, -1000, 26705,
	340, 334, -1000, -1000, -1000, 333, 332, 8962, 3999, 68700,
	68597, 68315, 71441, 2067, 71441, -1000, -1000, 787, 787, 1122,
	1122, 1122, 1122, 2601, 2175, 643, 1660, 458, 458, 458,
	706, 587, 587, 458, 458, 458, 2060, 1840, 509, 5863,
	-1000, -1000, 71441, 71441, 324, -1000, -1000, -1000, -189, 319,
	2009, 2472, -1000, 30565, 2009, 2009, -1000, -1000, 1522, 62222,
	71441, 30565, -234, -1000, 2602, -1000, -1000, 2320, -1000, 10823,
	-1000, 14656, -1000, -1000, 33510, -1000, 508, -1000, 50, -1000,
	-1000, 668, 2662, 679, -1000, 317, -1000, -1000, -15, 71441,
	62222, 62222, 62222, 2228, -1000, 3318, -1000, 68238, -110, -1000,
	69700, 26705, 62222, -1000, 1422, 1886, 921, -1000, 62222, -1000,
	62222, -1000, -1000, 62222, 62222, 50610, 2213, -116, 71441, -21,
	-1000, 730, -1000, -1000, 50610, 50610, 41057, 2168, -120, 14656,
	-1000, 41057, -1000, -1000, -1000, 1941, -1000, 53082, 1581, -71,
	-1000, 2661, 505, 1678, -71, -1000, 1532, -1000, 665, -1000,
	-1000, 504, 62222, 1563, 502, 14656, 1834, 726, 41472, -1000,
	1068, 1268, -1000, -1000, -29, -1000, 507, -71, 1529, -1000,
	-76, 71441, -1000, 729, -1000, -121, -1000, -1000, 307, -1000,
	2354, 2351, -1000, -1000, 26705, 501, 500, 62222, 2350, -1000,
	-1000, -122, -1000, 1847, -1000, -1000, -1000, -1000, 14656, 1289,
	-1000, -1000, -1000, -1000, 2420, 7104, 7104, 26705, 26705, 26705,
	7104, 71922, -126, -1000, 7104, 7104, -189, -1000, -1000, 70338,
	-1000, -1000, -1000, 71441, 11252, 1482, -1000, 67956, -1000, -1000,
	-1000, -1000, 26705, 26705, -1000, -1000, -1000, -1000, -1000, 28025,
	2058, 499, 8370, -1000, -1000, 852, 26705, 26705, 2527, 852,
	852, -1000, -127, -1000, 790, -1000, -1000, -1000, 2602, 50,
	-1000, 2660, 14656, 678, -1000, 2658, -1000, -1000, -1000, -1000,
	62222, -1000, 62222, -1000, 14656, 62222, 2032, 1721, -1000, -1000,
	1863, 497, 28025, 50610, 756, 1991, 1406, 26705, -1000, -137,
	-138, 1717, -1000, -1000, 1565, 26705, -1000, 8370, 1634, 1634,
	-139, -143, -1000, 26705, 990, 62222, 18189, -1000, -1000, -1000,
	26705, 979, -1000, -82, 1457, 1989, -1000, -1000, -1000, -1000,
	1862, -1000, -1000, 62222, 1843, 840, -1000, 42294, 822, -1000,
	-1000, 783, -1000, 26705, -1000, 50610, 26705, 1562, -1000, 726,
	41472, -1000, 2321, -1000, 2327, 62222, 2385, -1000, 1898, 496,
	-1000, 838, 495, 494, -145, 26705, 26705, -147, 493, 838,
	-117, -1000, 751, 747, -1000, -1000, 50610, 50610, -1000, 7104,
	7104, 7104, -1000, 305, -1000, -1000, 1529, 2471, -1000, 67853,
	67571, 484, 28025, 8370, -151, -1000, 62222, 71441, -189, -1000,
	-1000, -1000, 53910, 664, -1000, 2656, -1000, -1000, 1902, -1000,
	-1000, -1000, 62222, 1730, -1000, -1000, 26705, 5863, 490, 26705,
	-1000, -1000, 1939, 2059, 1941, 488, -1000, -1000, -1000, -1000,
	1335, -1000, -1000, 71441, 2440, -1000, -1000, 487, 486, 71441,
	485, 721, 2052, -1000, 71441, 483, 822, -1000, 1488, 1581,
	482, -1000, -1000, -1000, 1900, 301, 2518, 783, -1000, 2623,
	-1000, -153, 897, -158, 50610, 41472, -1000, 1831, 1060, -159,
	62222, 1268, -1000, -1000, 41057, 41057, 1406, -163, -164, -1000,
	41057, -1000, 1847, -1000, 62222, -1000, 62222, -1000, -1000, -1000,
	1467, 26705, -1000, -1000, 484, -165, -1000, -135, -1000, 2510,
	-1000, -1000, -1000, -1000, -1000, 2087, 67494, 1801, 62222, 5269,
	2057, -1000, -1000, 1457, 62222, 50610, 896, 14656, 1472, 1472,
	26705, 17749, 1486, 26705, -1000, 50610, 62222, -1000, 2349, 1941,
	-71, -1000, -1000, 1406, 471, 1406, 468, -1000, 1834, 1159,
	-1000, 857, -1000, -1000, -169, -171, 1941, 1406, -1000, -175,
	-1000, -180, -181, 295, 27585, 27585, 27585, -189, -1000, 62222,
	461, 2149, -1000, 1553, 1632, 289, 928, -1000, -1000, 1991,
	-182, 459, -1000, 26705, -1000, -190, -1000, 886, -194, -1000,
	885, -196, -1000, 2042, -1000, -200, 457, -206, -1000, -1000,
	-1000, 1457, 840, 1941, 26705, 1941, 26705, -1000, 35172, -1000,
	838, 838, 1457, 1941, 838, -1000, -1000, -1000, -1000, -1000,
	28450, 1556, 1258, 69620, -1000, -1000, -1000, -1000, 62222, -1000,
	1561, 1557, 1210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1801, 71441, -1000, 1472, 1987, -1000, 1472, 2040, -1000,
	1445, -1000, 62222, -1000, 62222, 822, -1000, 1457, -207, 1457,
	-208, -192, -1000, -1000, -1000, 1457, -1000, 2567, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2337, -1000, 908, 1808, 1808,
	1553, -1000, 441, -1000, 439, -1000, -212, -1000, -1000, 839,
	1406, 839, 1406, -1000, -1000, 27145, -1000, 2585, -1000, -1000,
	1860, -1000, 1991, 26705, 26705, 1560, -1000, 2655, 1941, -1000,
	1941, -1000, -1000, -1000, -1000, -1000, -213, -218, -1000, -1000,
	-1000, -1000, 1457, 1457, 1457, 973, 839, 839, -1000, 438,
	-1000, -1000, 26705, -225, 1457, -1000,
}
var sqlPgo = [...]int{

	0, 3284, 3283, 3282, 3281, 3278, 3277, 3275, 3274, 3273,
	3272, 3271, 3270, 3269, 3268, 3267, 3266, 3264, 3263, 3261,
	3260, 3259, 3258, 3257, 3255, 3253, 3251, 3250, 3248, 3247,
	3246, 3245, 3244, 3243, 3242, 3241, 3240, 3239, 3238, 3237,
	3231, 3228, 3226, 3225, 3221, 3218, 27, 3212, 3211, 3210,
	3209, 3208, 3206, 3205, 3195, 3192, 3191, 3189, 3188, 3187,
	3186, 3185, 3184, 3183, 35, 3182, 211, 3181, 3180, 3179,
	3174, 3165, 3164, 3160, 3157, 3156, 3153, 210, 3150, 123,
	3147, 3146, 3145, 3141, 3140, 209, 3135, 3134, 3133, 3132,
	3129, 3127, 3126, 3124, 140, 3123, 3122, 232, 3115, 3110,
	3109, 3107, 3100, 3097, 3090, 3089, 3083, 3081, 192, 3078,
	206, 3073, 3072, 3071, 3070, 3069, 3068, 3064, 3063, 3062,
	3059, 3058, 3057, 3056, 3054, 3053, 3052, 3051, 3050, 3049,
	3048, 3043, 3040, 3033, 3031, 3030, 3027, 217, 138, 3025,
	3022, 204, 202, 3020, 3017, 94, 97, 72, 3015, 100,
	128, 186, 7213, 180, 3014, 3012, 3011, 3009, 3007, 73,
	135, 134, 129, 131, 169, 3006, 3000, 69, 54, 33,
	26, 98, 2997, 2996, 2995, 2454, 96, 2992, 2990, 203,
	188, 2987, 949, 2985, 166, 79, 88, 145, 89, 2976,
	117, 16, 2973, 148, 40, 2971, 127, 62, 32, 5424,
	7043, 2969, 78, 218, 80, 142, 172, 160, 167, 158,
	133, 267, 2967, 191, 2963, 38, 155, 2959, 2954, 2953,
	55, 149, 74, 2952, 7, 14, 141, 28, 87, 12,
	2951, 13, 2950, 2949, 2943, 2940, 21, 125, 2938, 120,
	105, 2937, 29, 2936, 58, 162, 2935, 177, 99, 2934,
	2932, 197, 159, 153, 10, 179, 2931, 2929, 2927, 2926,
	2925, 103, 17, 101, 2924, 2920, 111, 185, 2919, 49,
	132, 71, 116, 213, 90, 170, 85, 176, 143, 178,
	2918, 2917, 2916, 152, 2915, 2914, 118, 165, 2913, 2912,
	215, 34, 43, 183, 56, 2911, 2910, 126, 2909, 157,
	2908, 2906, 2905, 207, 139, 164, 5, 61, 93, 25,
	8, 182, 122, 82, 84, 2904, 3535, 1586, 1395, 2903,
	106, 86, 52, 92, 119, 201, 65, 2901, 2899, 1447,
	2898, 2897, 2896, 2895, 144, 2894, 2892, 2891, 110, 95,
	76, 2889, 2888, 121, 60, 11, 124, 205, 75, 171,
	161, 194, 2887, 136, 2886, 37, 112, 2884, 151, 190,
	91, 2883, 1136, 113, 2882, 168, 2881, 2880, 2879, 2877,
	66, 2876, 2875, 600, 2873, 114, 2872, 2871, 147, 107,
	130, 63, 30, 2870, 67, 70, 2869, 150, 53, 2868,
	216, 31, 0, 6485, 5155, 5609, 2867, 605, 2866, 156,
	102, 2864, 2857, 2856, 64, 2848, 57, 2846, 2843, 36,
	2839, 20, 4, 6, 18, 15, 522, 285, 2838, 2837,
	83, 104, 108, 2836, 212, 173, 2835, 2830, 2827, 68,
	2826, 24, 2822, 22, 2821, 2820, 23, 3, 2819, 2817,
	187, 2816, 200, 2815, 2813, 2549, 2811, 198, 115, 2808,
	137, 181, 2807, 2804, 2803, 2802, 196, 2801, 195, 2800,
	9, 19, 2, 2799, 2798, 2797, 154, 1, 2386, 2796,
	2794, 50, 163, 2792, 2791, 146,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 447, 447, 18, 29,
	19, 30, 12, 448, 448, 448, 448, 22, 20, 20,
	31, 31, 148, 148, 148, 148, 17, 17, 25, 25,
	161, 161, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 446, 446, 163, 163, 162, 158, 158,
	449, 449, 164, 164, 164, 166, 166, 35, 35, 93,
	93, 93, 94, 94, 95, 95, 149, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 81, 81, 390, 390,
	391, 391, 144, 144, 145, 145, 145, 145, 146, 146,
	147, 147, 147, 49, 37, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 47, 47, 47,
	47, 138, 138, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 454, 454, 455, 455, 456, 456, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 61, 61, 238, 238, 214, 214,
	62, 62, 62, 63, 63, 64, 64, 51, 51, 442,
	442, 252, 252, 357, 357, 66, 66, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	75, 75, 75, 76, 76, 76, 73, 73, 73, 71,
	71, 71, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 253, 253, 77, 77, 77, 77, 77, 77, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 359, 359, 78, 78, 78, 327,
	327, 82, 82, 82, 284, 284, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 96, 96, 96, 96, 445,
	445, 245, 245, 179, 179, 179, 179, 89, 89, 89,
	89, 90, 90, 90, 91, 91, 143, 143, 102, 102,
	102, 102, 102, 101, 101, 101, 101, 101, 101, 41,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 46, 104, 104, 450, 450, 106,
	103, 103, 103, 105, 105, 105, 105, 107, 108, 108,
	108, 108, 108, 108, 109, 109, 384, 384, 260, 260,
	382, 382, 398, 398, 383, 383, 218, 218, 218, 218,
	218, 219, 219, 219, 389, 389, 389, 389, 389, 389,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 128, 128, 128, 137, 137, 137, 137, 137, 137,
	137, 130, 130, 130, 119, 119, 111, 111, 111, 111,
	111, 115, 115, 115, 115, 115, 112, 112, 121, 121,
	121, 121, 116, 116, 118, 118, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 113, 113, 113, 113, 123,
	123, 123, 123, 290, 290, 290, 122, 122, 342, 342,
	133, 133, 133, 133, 133, 133, 341, 341, 129, 129,
	129, 129, 132, 132, 132, 132, 274, 274, 126, 126,
	126, 127, 127, 127, 131, 131, 134, 134, 134, 134,
	114, 114, 114, 459, 459, 459, 135, 135, 125, 125,
	136, 136, 136, 136, 136, 136, 136, 136, 124, 124,
	124, 124, 117, 443, 443, 440, 440, 440, 440, 440,
	440, 440, 441, 441, 444, 444, 87, 87, 87, 56,
	56, 460, 460, 460, 57, 57, 461, 461, 461, 458,
	458, 458, 458, 458, 458, 458, 458, 220, 220, 221,
	221, 308, 308, 308, 308, 308, 224, 224, 165, 165,
	165, 227, 228, 228, 225, 225, 226, 226, 226, 230,
	230, 229, 232, 232, 231, 307, 405, 405, 407, 407,
	407, 407, 407, 407, 407, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 403, 403, 403, 404, 399,
	399, 400, 400, 400, 400, 222, 222, 223, 223, 223,
	223, 401, 402, 243, 243, 345, 406, 406, 408, 408,
	410, 462, 462, 462, 462, 462, 462, 463, 463, 306,
	306, 236, 236, 411, 411, 411, 411, 412, 412, 412,
	412, 412, 415, 414, 413, 413, 413, 413, 413, 337,
	337, 337, 60, 60, 60, 271, 271, 270, 270, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 140, 140, 58, 58, 58, 171, 171,
	55, 55, 55, 465, 465, 59, 59, 59, 466, 466,
	65, 65, 65, 65, 65, 65, 54, 54, 54, 54,
	54, 467, 467, 291, 291, 289, 289, 242, 242, 344,
	183, 183, 159, 159, 159, 21, 23, 23, 16, 16,
	32, 32, 33, 33, 28, 28, 451, 451, 452, 452,
	88, 88, 92, 92, 92, 100, 100, 139, 139, 139,
	139, 139, 139, 139, 36, 36, 36, 36, 48, 48,
	48, 48, 98, 469, 469, 469, 99, 99, 468, 468,
	178, 178, 178, 178, 180, 180, 303, 303, 304, 304,
	470, 470, 305, 305, 305, 305, 173, 172, 174, 174,
	53, 53, 53, 167, 167, 168, 168, 169, 169, 170,
	170, 471, 471, 85, 85, 85, 142, 142, 213, 213,
	299, 299, 299, 237, 237, 188, 188, 302, 302, 300,
	300, 300, 300, 269, 269, 269, 141, 141, 250, 250,
	262, 262, 263, 263, 354, 354, 264, 97, 97, 152,
	152, 150, 150, 150, 150, 150, 150, 472, 472, 151,
	151, 151, 153, 153, 153, 153, 153, 153, 153, 156,
	156, 156, 156, 157, 157, 157, 155, 155, 422, 422,
	422, 424, 424, 425, 421, 421, 423, 423, 464, 464,
	273, 273, 273, 234, 235, 233, 233, 240, 240, 239,
	241, 241, 343, 343, 343, 267, 267, 267, 267, 294,
	294, 292, 292, 293, 293, 295, 295, 296, 296, 296,
	297, 297, 298, 298, 266, 266, 323, 323, 154, 154,
	154, 247, 247, 247, 248, 248, 314, 314, 314, 314,
	314, 314, 315, 315, 313, 313, 313, 313, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 347, 347, 249,
	249, 348, 301, 301, 438, 438, 438, 439, 439, 340,
	340, 349, 349, 349, 349, 349, 349, 338, 338, 339,
	339, 355, 356, 356, 277, 277, 277, 277, 275, 275,
	278, 278, 278, 278, 276, 276, 350, 350, 350, 350,
	268, 268, 351, 351, 351, 352, 309, 310, 310, 360,
	360, 360, 360, 360, 375, 246, 246, 246, 246, 246,
	473, 473, 361, 361, 361, 361, 361, 361, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	365, 365, 365, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 374, 374, 374, 374, 374, 366, 366, 371, 371,
	372, 372, 372, 367, 368, 373, 373, 373, 373, 474,
	474, 377, 377, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 363, 363, 363, 370, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 285,
	285, 286, 286, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 318, 318,
	318, 318, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 416, 416, 416,
	416, 416, 416, 416, 416, 419, 419, 420, 420, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 426, 426,
	427, 427, 429, 429, 430, 430, 431, 432, 432, 432,
	433, 434, 434, 428, 428, 435, 435, 435, 435, 436,
	436, 437, 437, 437, 437, 437, 329, 329, 330, 330,
	336, 336, 336, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 181,
	181, 181, 181, 181, 258, 258, 256, 256, 256, 259,
	259, 257, 257, 255, 255, 254, 254, 326, 326, 324,
	324, 328, 328, 279, 279, 376, 376, 376, 376, 376,
	376, 376, 280, 280, 280, 288, 281, 281, 282, 282,
	282, 282, 282, 320, 321, 283, 283, 283, 322, 322,
	331, 335, 335, 334, 333, 333, 332, 332, 311, 311,
	312, 312, 265, 265, 475, 475, 261, 261, 353, 353,
	353, 353, 216, 216, 251, 251, 215, 215, 208, 208,
	209, 209, 209, 209, 244, 244, 378, 378, 378, 379,
	380, 381, 325, 198, 197, 185, 186, 196, 195, 194,
	184, 187, 191, 192, 193, 189, 190, 204, 203, 202,
	200, 201, 358, 210, 210, 211, 211, 211, 212, 212,
	212, 212, 182, 182, 205, 205, 206, 207, 207, 199,
	199, 199, 175, 175, 175, 176, 176, 177, 177, 388,
	388, 386, 386, 386, 387, 387, 387, 387, 385, 385,
	385, 385, 385, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 394, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 397, 397,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 3, 1, 3, 1, 6, 4, 9,
	7, 12, 12, 12, 9, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 6,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 3, 3, 4, 3, 4, 7, 4, 4,
	4, 3, 5, 7, 4, 3, 3, 4, 3, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 1,
	1, 2, 1, 2, 7, 3, 2, 0, 1, 3,
	3, 1, 0, 1, 2, 2, 1, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 5, 5,
	5, 3, 3, 3, 4, 3, 4, 3, 5, 4,
	5, 3, 4, 5, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 4, 1, 0,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 7, 9, 3, 4, 5, 5,
	5, 3, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 10,
	13, 0, 2, 3, 9, 12, 0, 2, 3, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 5, 8, 5, 11, 3, 0, 2, 4, 3,
	3, 1, 5, 1, 3, 1, 2, 0, 1, 2,
	2, 0, 1, 3, 3, 2, 2, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 1, 1, 8, 7, 5, 0, 1,
	6, 7, 6, 5, 3, 4, 14, 17, 14, 17,
	4, 0, 2, 2, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 5, 6, 4, 6, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	1, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 1, 2, 4, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-84, -78, -96, -100, -88, -102, -139, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -97, -101, -110, -140, -141, -142, 81, 68,
	121, 103, 108, 154, 285, 314, 324, 308, -105, -106,
	343, -36, -48, -99, -98, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -453, 83, -423,
	-69, -72, -74, -457, 113, 127, 171, 277, -90, -91,
	310, 312, 128, -43, -42, 122, -150, -152, -103, -104,
	-143, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, 346, 391, 40,
	355, 69, 116, 318, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-422, -70, -71, -73, -75, -76, 309, -153, -151, 451,
	404, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 422, 430, -156, -154, -155, -157, 331,
	412, 369, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, -200, -205, -206, -207, -199, -175, -394, -397,
	4, -392, -395, 133, 179, 246, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 76, 73, 74, 75, 78, 80, 81, 82,
	85, 86, 94, 95, 96, 97, 98, 99, 103, 106,
	105, 108, 111, 112, 113, 115, 117, 118, 121, 122,
	125, 123, 375, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 278,
	280, 281, 283, 285, 287, 289, 290, 291, 292, 293,
	294, 296, 297, 299, 300, 301, 302, 303, 308, 305,
	306, 307, 309, 310, 311, 312, 314, 316, 317, 318,
	319, 321, 323, 344, 345, 357, 324, 325, 326, 327,
	328, 329, 330, 334, 338, 335, 336, 337, 339, 332,
	333, 340, 341, 343, 346, 348, 350, 351, 354, 355,
	356, 358, 361, 362, 363, 359, 360, 353, 368, 366,
	367, 370, 371, 372, 373, 374, 376, 385, 386, 388,
	391, 392, 393, 383, 395, 396, 399, 400, 401, 402,
	403, 408, 404, 406, 409, 410, 411, 417, 416, 423,
	424, 426, 427, 428, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 282, 284, 295, 320, 349, 364, 378,
	379, 380, 381, 387, 389, 412, 413, 414, 418, 425,
	257, -193, 2, -175, -175, 285, 26, 2, 26, 281,
	333, 371, 373, 2, -445, -245, 2, 26, -179, -175,
	83, 154, 331, -193, 2, -445, -245, 24, 2, -175,
	2, -180, 2, 324, -175, 454, 78, 224, 62, 320,
	340, -108, 386, -107, 378, 326, -109, -384, 2, 239,
	-175, 454, 454, 454, 454, 2, 369, 274, 416, 332,
	405, 96, 292, 179, -440, 2, 4, -395, -392, -209,
	-208, 369, 96, -207, -199, 444, -206, 454, 454, 454,
	2, 201, 202, 291, 290, 340, 341, 454, 454, 454,
	2, 25, 56, 77, 80, 102, 129, 149, 152, 262,
	-454, 231, 271, 289, 326, 339, 368, 376, 388, -458,
	356, 57, 405, -465, 393, 111, -289, 96, 373, 371,
	224, 153, 400, 316, 157, 398, 106, 185, 403, 402,
	454, 454, 25, 56, 65, 80, 111, 129, 149, 152,
	-456, 271, 289, 323, 326, 339, 368, 376, 393, 388,
	2, 416, 332, 369, 179, 96, 405, 316, 288, -79,
	2, 451, 29, 343, -149, 369, 195, 2, -175, 201,
	202, 2, 454, 454, -440, 2, 201, 202, 2, 195,
	2, 57, 328, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	2, -137, 340, 356, 163, 39, 62, 26, 67, 275,
	97, 155, 179, 180, 209, 77, 78, -290, -342, -341,
	370, 327, 333, 366, 386, 83, 406, 317, 428, 293,
	123, 4, 96, 239, 342, 378, 224, 38, 71, -464,
	2, 369, -468, 2, 386, 386, 2, -468, 2, -468,
	2, -178, 2, 386, 382, -469, 386, 425, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	-151, -153, -152, 454, 454, 454, 454, 454, -137, 340,
	2, 62, 26, -472, 147, -239, -240, 397, 193, 119,
	263, -150, -152, 2, -422, -382, 2, -316, -398, -318,
	442, 443, 437, 245, 429, -329, 102, 398, 257, -397,
	-319, -331, 120, 320, -259, 8, 9, 5, 6, 7,
	-182, -362, -325, -370, 390, 132, 248, -212, 456, 10,
	451, -419, -152, -330, 33, 158, 55, -386, -211, -364,
	-372, -368, -369, -473, 45, 51, 50, 376, 238, 334,
	335, 350, 336, 337, 43, 408, 175, 254, 256, 187,
	4, 194, -210, -199, -416, -417, -392, -393, 186, 192,
	188, 349, 189, 190, 191, 42, 295, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 413, -373, 98,
	378, 379, 380, 381, 204, 205, -175, -394, 65, 88,
	89, 87, 92, 91, 93, 90, 342, 405, 56, 32,
	165, 166, 198, 249, 167, 63, -418, 360, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 315, 347, -474, 414, 130, 131, 269, 282, 364,
	387, 389, 156, 217, 58, 59, -424, 296, -425, -193,
	-424, 454, 454, 455, 454, -233, -234, -235, 2, 26,
	109, 451, 2, -346, 2, 449, -350, -152, 212, -349,
	451, -347, -200, 258, -420, 321, -416, -417, -182, -199,
	-211, 4, -236, 451, 453, 96, 369, 66, 2, -284,
	451, -175, 26, 257, 382, 455, -327, 451, 257, 150,
	260, -175, 2, 2, 344, 2, 451, -108, 60, 386,
	-304, 2, -305, -172, -173, -174, -355, 200, 287, 294,
	431, 428, -382, -450, 150, 434, 382, -382, -260, 453,
	2, -350, 165, -200, 2, -197, -385, 4, -392, -395,
	-393, -396, 65, -394, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 48, 55, 56, 61, 64, 66, 77,
	83, 87, 88, 90, 89, 91, 92, 93, 102, 104,
	107, 109, 110, 114, 116, 119, 132, 134, 147, 149,
	150, 154, 157, 160, 172, 183, 193, 195, 212, 215,
	222, 225, 226, 245, 248, 253, 257, 258, 262, 263,
	279, 286, 298, 313, 331, 342, 352, 365, 369, 377,
	382, 384, 390, 397, 398, 405, 407, 415, 419, 420,
	421, 422, -397, 2, -350, 165, 2, -202, 165, -350,
	-205, 2, -390, 165, -388, 10, -387, 5, 4, -392,
	-395, -393, 2, -184, -175, 2, -196, -385, 2, -215,
	165, -200, -201, -205, 382, 455, -251, -208, -209, -244,
	-175, 453, -316, 2, -97, 2, -316, 165, 2, -97,
	165, 2, -316, 165, 2, -97, 165, 2, 2, 2,
	388, 2, 80, 165, -175, 369, 95, 2, 307, -455,
	323, 392, 416, 2, 2, 2, 2, 2, 2, 2,
	369, 332, -466, 296, -189, 2, -175, 147, -390, 165,
	2, -390, 165, 2, -203, -205, -203, 179, 196, -184,
	165, 2, 373, 371, 373, 371, 150, 2, 195, 2,
	195, 2, -351, 2, -352, -200, 2, 2, 2, 2,
	2, 165, -175, 369, 95, 2, 211, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -253, 165, 2, -200,
	-253, 165, 2, -253, 165, 2, -216, 165, 2, -215,
	-184, 165, 2, -391, 165, 2, -390, -391, 165, 2,
	-359, 2, -358, -387, 412, -79, 451, 340, 451, -390,
	-200, -200, -316, -97, 150, -316, -97, -149, 147, 2,
	96, 369, -137, 2, 147, 407, 2, 8, 2, -390,
	327, 293, 139, 2, 344, 2, 62, -290, 428, 150,
	2, 150, 2, -274, 2, 422, -443, 2, 257, 150,
	2, 150, 2, 150, 2, 150, 2, 150, 2, 290,
	341, 202, 385, 210, 124, 150, -274, 2, 150, 2,
	150, 2, 5, 2, 200, 287, 357, 2, -200, -459,
	2, 369, 416, 332, 2, 2, 73, 74, 150, 2,
	150, 428, 2, -268, -350, -303, -304, -303, 382, -180,
	-472, -239, -240, -137, 344, 2, 2, -472, -267, -292,
	-293, 222, 134, 253, -273, 26, 109, -273, -273, 49,
	452, 452, 11, 12, 64, 37, 442, 443, 444, 445,
	145, 446, 447, 440, 441, 439, 432, 433, 436, 206,
	207, 79, 435, 434, 72, 229, 322, 135, 136, 137,
	138, 304, 176, 177, 178, 14, 15, 16, 30, 262,
	221, 429, 169, 347, 437, 17, 18, 19, 197, 199,
	247, 41, 172, -181, -217, -316, -316, -316, -316, -316,
	268, 451, -265, -311, 449, -152, 451, 451, 451, 5,
	451, 5, -381, 8, -152, -316, -329, 452, -257, 451,
	-152, -329, -324, 451, 320, 449, 451, -332, -316, 453,
	-426, 423, -366, 451, 284, -365, 451, -365, -365, 417,
	-363, 451, 430, 424, 451, -363, 451, 451, 147, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 417, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 455, -424, -236, 451, -261, -353, -316, 444,
	-261, -261, 257, -254, -316, 84, -277, 203, 240, 151,
	218, 315, 184, -381, -80, -66, -77, -85, -97, -110,
	-141, -142, -313, 456, -340, 430, -152, -347, -199, -152,
	-349, 451, -346, -340, 444, -200, 451, 150, 451, 453,
	150, -244, -385, -184, -200, -210, -211, 108, -254, -440,
	-244, -179, 34, -326, -360, -361, -374, -362, -371, -367,
	-370, 300, 301, 299, 303, 302, 45, 51, 50, 376,
	238, 334, 335, 350, 336, 337, 43, 408, 175, 254,
	256, 187, 4, 44, 413, -373, 194, 186, 192, 188,
	349, 189, 190, 191, 42, 295, 143, 144, 142, 112,
	101, 100, 250, 47, 46, 98, 378, 379, 380, 381,
	204, 205, 414, 360, 58, 59, -440, -244, 147, -384,
	-254, 34, -304, 2, -470, 455, 220, -219, 228, 244,
	162, 258, 426, 251, -389, 5, 4, -325, -337, 102,
	224, -370, 9, 443, -378, 8, 442, -383, -382, 86,
	453, -385, -161, 305, -160, 23, 27, 113, 410, 125,
	-226, 181, 274, 120, 353, 401, -447, -448, 325, 374,
	375, 75, 251, 305, 120, -270, -272, 34, 94, 242,
	270, 52, 173, 233, 234, 355, 418, 120, 305, 422,
	120, -448, 305, -448, -163, 353, 401, -447, -448, 325,
	305, -162, -226, 120, 456, -94, -390, 451, -251, 455,
	455, -385, 444, 120, 120, 120, 120, 2, 2, 245,
	2, 2, 2, 152, -458, -456, 2, 2, 2, -200,
	165, -202, 165, 2, -205, 416, -238, 257, -442, -252,
	369, -200, -171, -421, 422, 245, 245, 34, 451, 2,
	-186, 165, 2, -176, -175, 179, -421, 245, -351, -213,
	-200, -213, 343, -193, 34, -313, 120, 2, 2, 2,
	-175, -164, 455, 54, 311, 120, -164, 120, -164, 120,
	-164, 455, 120, -164, 120, 455, 120, 120, 452, 455,
	-359, -390, -147, 422, 150, 83, 451, 451, -149, -95,
	-94, -390, -442, -184, 2, -200, 2, 369, 204, -390,
	-390, -390, -384, 26, 345, 2, 290, 341, 74, -200,
	369, 96, 179, 68, -444, 147, -441, 316, -440, -200,
	96, -200, 96, -200, 96, -200, -200, 2, 2, 2,
	147, 2, 385, 2, 385, 2, -175, -175, -175, 220,
	-200, 147, 369, 179, 96, 369, -164, 455, -180, -472,
	-267, -384, -472, -293, -292, -295, -316, 26, -298, 141,
	241, -316, -318, -151, -151, -151, -241, -343, -316, 286,
	179, -375, -360, -360, -198, -385, 378, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, 221, 169, 347, 41, 172, -316, 382, -316,
	-316, -316, -316, 237, 245, 248, 390, 132, 399, 109,
	251, -475, 365, 36, -322, -152, -258, 451, -336, 31,
	352, 26, -329, 451, 2, -311, -316, -312, -255, -254,
	-254, 452, 415, 26, 109, 444, 2, 8, -285, -287,
	427, 236, 99, 164, 235, -286, 330, 452, 455, 34,
	452, -316, -255, -328, -324, -254, -335, -334, 419, -385,
	444, -427, 140, 157, 8, -379, 8, -379, 378, 378,
	8, -379, -379, 451, 452, 2, 452, 2, 452, 2,
	452, 2, 452, 2, -316, -316, -316, -316, -316, -316,
	-316, -254, -279, 2, -376, -254, 4, 427, 236, 99,
	164, 235, 330, -279, 2, -280, 2, -316, -254, -281,
	-317, -318, 442, 443, 437, -329, -282, 2, -316, -255,
	-316, 48, 215, 384, -283, -316, 150, -254, -254, 2,
	-254, 2, -425, 34, -254, -247, 455, 150, 34, 4,
	-247, -247, 451, 452, 455, -278, 161, 232, 227, -278,
	-346, -277, 203, -275, 266, -275, -275, -438, 451, 450,
	454, 454, 454, 454, 454, -340, -185, 449, 457, -385,
	-339, -338, 34, -193, 264, -340, -340, 453, 452, -339,
	-200, 451, -254, -385, 358, 452, 453, 197, 197, 197,
	321, 452, 382, 422, -79, 259, 452, 455, -246, 33,
	449, -287, 451, -377, 417, 451, 451, 150, -245, -450,
	452, 386, -305, -218, 294, 351, 306, 338, 367, 9,
	8, 8, 455, -385, 455, -451, 77, 382, 66, -307,
	165, 66, -399, -187, 77, -400, -175, 61, 398, 286,
	149, -451, 77, -451, 77, 77, 343, 356, 49, -350,
	37, 37, 26, -97, 216, 150, 428, 369, 179, 382,
	-350, -272, -360, 94, 233, 234, 49, -380, -378, 443,
	-380, 49, -380, -380, -380, 422, -202, -350, 382, 276,
	-390, 382, 455, 37, 37, 26, -97, 216, 150, 382,
	-215, -185, -356, -355, -391, -208, -175, 453, -316, -97,
	-316, -97, 120, 2, -466, 211, 451, -222, 245, -271,
	-270, 245, -204, 2, -200, 150, -244, -357, 195, 455,
	-252, 276, 120, 120, 451, 117, 292, 2, 257, 245,
	-186, 165, -167, 372, 120, -310, -309, 420, -299, -97,
	451, 102, 34, -299, -262, -263, -354, -264, -187, 451,
	-193, -175, 2, -200, -253, -253, -253, -215, -216, -184,
	-390, -391, -391, -79, -358, 452, 452, -146, 261, -145,
	-175, 5, -149, 407, -221, -308, -307, -403, -404, -399,
	221, 179, 398, 196, 133, -237, -188, -187, 95, -147,
	-355, 455, -147, -147, -356, -356, -200, 147, 2, 2,
	-274, -200, -184, -215, -244, -244, -184, -184, -184, 340,
	147, 147, 453, -274, 292, 96, 369, 274, 179, -200,
	-215, -184, -200, -350, -472, -296, -378, 451, -297, 320,
	321, 455, -159, 35, 107, 208, -200, 428, 118, -316,
	-316, 382, -475, 365, -322, 118, -316, 237, 248, 390,
	132, 399, 109, 251, 150, 451, -317, -317, 452, -256,
	-316, -316, 450, 459, 452, -240, 455, -239, -316, -254,
	-254, 452, 452, 382, 382, 382, 382, 451, 453, -254,
	-244, 450, 450, 455, 452, -333, -334, 114, -316, 453,
	-432, 267, 451, 451, 452, 452, 455, 452, 428, 428,
	452, 452, 452, -316, 34, 455, 455, 455, 452, 455,
	455, 455, 452, 452, 150, 452, 452, -288, 279, 452,
	11, 12, 442, 443, 444, 445, 145, 446, 447, 440,
	441, 439, 432, 433, 434, 72, 229, 322, 14, 15,
	16, 197, 172, -317, -317, -317, 452, -320, -321, 150,
	147, 34, -283, -283, -283, 452, 150, -254, 452, 452,
	451, 452, -310, -353, -248, 2, -346, -195, -385, -310,
	-310, -254, -316, 203, 203, -276, 407, 257, -278, -346,
	-338, 452, -439, -381, -340, -339, -381, -315, -314, 148,
	35, 107, 243, 168, -193, -236, -339, -339, -385, -340,
	452, -249, -348, -420, -240, 453, -385, -138, 5, 248,
	-138, -138, -244, 24, 280, -360, 449, 450, 8, 8,
	451, -379, -379, -244, 150, -382, -304, 396, 70, 294,
	378, -382, -160, 305, -187, -187, -200, 245, -307, 165,
	-166, 245, -360, -194, -175, 451, 451, 208, 208, -187,
	-194, 165, -187, 165, -194, -194, -446, 294, 252, -316,
	223, 292, 246, -161, 305, -97, -97, -97, 451, -450,
	407, 108, -200, -215, -204, 305, -210, -380, -380, -270,
	305, -202, -390, 422, -184, -162, -97, -97, -97, 451,
	-185, -163, 305, -144, 174, 452, 444, -175, 416, -175,
	-220, -223, -221, -187, -460, 424, 422, 120, 120, -236,
	-214, -200, 449, -147, -390, -200, -390, -390, -390, 2,
	451, 2, -200, 120, 257, 245, -168, 115, -471, 434,
	-184, -240, -316, -269, -302, 313, 257, -237, 412, -193,
	-269, -250, 455, 150, 434, 453, -237, 2, -164, -164,
	-164, -164, -164, -79, -147, 455, 451, 434, 434, 451,
	-390, -390, 452, 455, -200, -186, 179, 179, -192, -176,
	452, 455, 453, 451, -147, -94, 150, -44, 422, 369,
	340, 340, -175, -196, -184, -200, -197, -215, -297, -316,
	-343, -200, 456, -316, -316, 118, 118, -316, -317, -317,
	-316, 118, 150, 451, -316, -326, 30, 30, 452, 455,
	-312, -316, 452, 415, -240, -240, 452, 5, 236, 164,
	235, -286, 235, -286, -286, 8, 444, -385, 452, -324,
	116, -316, 377, -385, 444, -433, -190, 451, -175, 420,
	-239, -379, -363, -363, 452, -375, -360, -316, -316, -316,
	-316, -316, -316, -320, -316, -375, -360, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, 109, 245, 251, -317,
	-321, -320, -316, -316, -360, 452, 452, 452, -254, -79,
	-266, 157, -356, 455, -266, -266, 452, -346, -346, 451,
	-316, 203, 450, 452, 455, -339, 450, 455, 458, 434,
	-236, 453, -338, 452, 455, -301, 34, 452, -385, 260,
	5, 8, 449, 450, 452, -379, 452, 452, -244, -316,
	382, 382, 120, 245, 409, -405, -400, -316, -242, -344,
	-316, 451, 451, -158, 113, 343, -452, 2, 120, -164,
	120, -164, 426, 451, 451, 382, 422, -254, -316, -148,
	102, -384, -448, -448, 382, 382, 276, 422, -254, 382,
	-147, 150, 2, 2, 2, 452, 452, 455, -406, 34,
	255, -175, -200, -202, 34, -62, 422, -355, -381, -171,
	2, -291, 407, -185, -200, 120, -169, 214, -471, -388,
	-421, -294, -292, -269, -261, 246, 76, 452, -310, -263,
	-248, -316, 2, 452, -145, -146, -390, -390, -390, -147,
	-149, -149, -308, 2, 451, -186, -176, 451, -149, -188,
	2, -391, -97, 261, -200, -274, -228, -227, 274, 251,
	-228, 258, 452, -159, -185, -316, -316, 118, 30, 30,
	-316, -316, -326, 452, -316, -316, -254, 450, 5, -316,
	452, 452, 452, -316, 453, -434, -175, -316, 452, 452,
	452, 452, 455, 455, 452, 452, 452, 452, -321, 150,
	109, 251, 451, 452, 452, -323, 160, 49, -346, -323,
	-323, -276, -244, -346, -313, -381, -314, -185, 449, -385,
	-348, 451, 453, 450, 2, 449, 452, -187, -187, -307,
	120, -407, 77, -409, 64, 133, 83, 245, 248, 398,
	286, 61, 102, 298, 34, 452, 452, 455, -159, -242,
	-244, 245, 362, 102, 245, 102, 95, 393, -187, -194,
	-244, -244, -200, 126, 452, 455, 434, -204, -202, -390,
	126, 452, -185, -391, -224, 182, -187, -404, -401, -402,
	286, -408, -410, 133, 286, -97, 2, 451, -222, -271,
	-97, 261, 450, 451, -175, 257, 451, -185, -170, 213,
	-471, -388, -167, -269, -300, 451, 257, -97, -240, 434,
	452, 452, 95, 95, -242, 451, 451, -244, 95, 452,
	-45, -46, 179, 77, 278, -197, 369, 179, -159, -316,
	-316, -316, 452, -240, -385, 444, -428, 274, 452, -316,
	-316, -317, 150, 451, -326, -429, 421, -316, -254, -429,
	-429, 452, -340, -381, 2, 449, 2, -307, -194, -198,
	-191, -175, 133, 165, 248, 208, 451, -317, -200, 451,
	2, -462, 104, 183, -306, -463, 82, 363, -344, 452,
	452, 248, 248, -316, -360, -164, -164, 452, 452, -316,
	382, -384, 81, -382, -316, 382, -225, -226, 172, -406,
	208, -191, 208, -461, 422, -220, -460, -63, -64, 383,
	-355, -242, -200, -242, 257, -471, -388, -168, 110, -244,
	77, -294, -322, -147, 451, 451, 452, -242, -242, 452,
	451, -147, 455, 26, 451, 26, 451, -200, -215, 452,
	-240, 49, 452, 452, -317, -326, 452, -430, -431, -190,
	-339, 450, 2, -409, -191, 245, -316, -177, 451, -316,
	183, 105, 170, -224, 451, 298, -183, 64, 451, 451,
	451, 434, 150, 451, -460, 272, 451, 95, 242, 452,
	34, -64, 9, 452, -291, 452, -200, -388, -169, 402,
	246, 452, -194, -269, -391, -391, -306, 452, 452, -391,
	-46, -244, -244, -435, 292, 321, 159, -254, 452, 455,
	34, 120, 452, -411, 230, -175, 452, 105, 170, -225,
	-244, -200, -449, 407, -198, -230, -229, -227, -232, -231,
	-227, -254, -382, 81, 272, -254, -200, -243, -345, -187,
	95, -224, -97, -306, 451, -306, 451, -170, 343, -309,
	452, 452, -224, -306, 452, 452, 452, 452, -436, -437,
	41, 395, 86, -316, -436, -436, -431, -433, 133, -412,
	-415, -414, 257, 348, 151, 273, 452, 362, 418, -462,
	452, -236, -316, 452, 455, 412, 452, 455, 412, 452,
	150, 452, 451, 452, 455, -225, -461, -224, -242, -224,
	-242, -262, -147, -147, -225, -224, -147, -437, 283, 146,
	320, 283, 146, -191, -414, 257, -415, 257, 402, 106,
	-411, -229, 172, -231, 150, 272, -244, -345, -460, -225,
	452, -225, 452, -310, -225, 30, -413, 242, 311, 54,
	343, -413, -412, 451, 451, 452, -467, 420, -306, -467,
	-306, -437, 22, 248, 102, -462, -254, -254, -165, 54,
	311, 2, -224, -224, 452, 452, -225, -225, -225, 382,
	-467, -467, 451, -254, 452, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 359, 360, 362,
	363, 364, 366, 367, 369, 371, 373, 375, 376, 378,
	380, 382, 383, 384, 385, 386, 388, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 450,
	0, 907, 909, 911, 913, 25, 26, 0, 0, 184,
	186, 188, 0, 213, 215, 217, 218, 220, -2, 0,
	313, 314, 316, 318, -2, -2, 0, 0, 437, 439,
	0, 0, 0, 459, 460, 0, 997, -2, 453, 455,
	457, 520, 522, 524, 526, 528, 530, 532, 533, 535,
	537, 539, 541, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, -2, -2, -2,
	0, -2, -2, -2, 925, 29, 31, 33, 35, 37,
	39, 58, 269, 270, 272, 274, 276, 279, 280, 282,
	1036, 320, 322, 324, 326, 328, 0, -2, 1048, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1012, 1014, 1016, 1018, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	361, 365, 368, 370, 372, 374, 377, 379, 381, 387,
	389, 391, 802, 1640, 1654, 1655, 1656, 1659, 1660, 1661,
	1662, 1663, 1664, 1994, 2074, 2075, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	0, 415, 413, 1634, 416, 1830, 418, 420, 307, 308,
	309, 310, 311, 312, 0, 430, 424, 429, 431, 433,
	434, 435, 436, 410, 408, 0, 430, 1686, 428, 905,
	906, 900, 901, 1863, 935, 449, -2, -2, -2, 1963,
	-2, 481, -2, 488, 1966, 1865, 491, 0, 493, -2,
	496, 908, 910, 912, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, -2, -2, -2, -2,
	0, 0, 1721, 1610, 1656, 1613, 1608, 185, 187, 189,
	190, 0, 0, 0, 0, 0, 0, 214, 216, 219,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 709, 710,
	0, 0, 715, 853, 854, 875, 0, 0, 0, 0,
	315, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 247, 353,
	354, 0, 1037, 0, 0, 0, 0, 165, 156, 0,
	0, 698, 438, 440, 0, 151, 0, 0, 904, 0,
	167, 0, 0, 454, 456, 458, 521, 523, 525, 527,
	529, 531, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, 562, 564, 566, 568,
	570, 571, 0, 0, 0, 0, -2, -2, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 574, 576, 577, 578, 0, 625, 628, 636, 0,
	844, 1038, 937, 915, 928, 937, 917, 918, 919, 920,
	921, 926, 927, 930, 0, 922, 923, 924, 30, 32,
	34, 36, 38, 40, 271, 273, 275, 277, 281, 283,
	-2, 1010, 1011, 321, 323, 325, 327, 329, 441, 0,
	443, 0, 575, 1001, 0, -2, 0, 1042, 1042, 1042,
	0, 0, 1011, 1009, 0, 446, 447, 500, 501, 1273,
	0, 0, 0, 0, 0, 1508, 1357, 0, 502, -2,
	1388, 1390, 1942, 1963, 1507, 1392, 1393, 1394, 1395, 1396,
	0, 0, 1399, 0, 1401, 1402, 1403, 1404, 0, 1406,
	0, 1410, 1411, 1412, 0, 1947, 1587, 1652, -2, 1178,
	1179, 1180, 1181, 1182, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1648, 0, 1479, 1426, -2, 1673, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1730, -2, -2, -2, -2, -2, -2, -2, 1234, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1977, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 0, 1931,
	1948, 1949, 1954, 1956, 1950, 1939, 1449, -2, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1235, -2, 1943, 1944, 1959, 1960, 1965,
	1970, 1971, 1946, 1955, -2, -2, 1028, 1838, 1031, 802,
	1029, 1013, 1015, 0, 1017, 0, 0, 0, 1022, 1045,
	1043, 0, 1079, 1026, 1027, 1037, 1097, 1120, 0, 1102,
	0, 1120, 1146, 0, 1107, 1858, 1427, 1428, 0, 1656,
	1653, -2, 0, 0, 0, 0, 0, 0, 210, 411,
	0, 417, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 451, 452, 0, 476, 0, 480, 1938, -2,
	-2, 484, 938, 942, 943, 944, 945, 0, 0, 0,
	0, 0, 490, 0, 0, 477, 478, 494, 497, 0,
	49, 0, 1948, 1146, 50, 0, 1624, 1678, 1679, 1680,
	1681, 1682, 1977, 1993, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 52, 0, 1948, 55, 0, 1948, 0,
	-2, 59, 0, 1948, 168, 169, 1669, 1670, 1674, 1675,
	1676, 1677, 62, 0, 1630, 64, 0, 1627, 73, 0,
	1948, 0, 1607, -2, 0, 0, 690, 1604, 1609, 691,
	1614, 0, 191, 192, 193, 194, 195, 1948, 197, 198,
	0, 200, 201, 1948, 203, 204, 0, 206, 222, 223,
	0, 225, 0, 1948, 0, 0, 0, 231, -2, 248,
	0, 245, 0, 235, 236, 238, 239, 240, 241, 242,
	0, 0, 0, 859, 287, 285, 1635, 0, -2, 1948,
	847, 850, 1948, 852, 864, 1638, 0, -2, 0, 1035,
	1948, 952, 711, 712, 713, 714, 0, 306, 0, 965,
	0, 967, 0, 987, 1152, 1097, 249, 250, 251, 252,
	253, 1948, 0, 0, 0, 258, 0, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 144, 1948, 332, 351,
	144, 1948, 335, 144, 1948, 338, 144, 1948, 341, 1602,
	144, 1948, 344, 345, 1948, 347, 170, 348, 1948, 350,
	0, -2, 404, 1642, -2, 356, 0, -2, 0, 182,
	0, 0, 696, 697, 0, 902, 903, 0, 0, 461,
	0, 0, 572, 573, 0, 0, 583, 584, 585, 586,
	1866, 1836, 1745, 590, 0, 593, -2, 0, 0, 0,
	597, 0, 601, 602, 603, 0, 695, 605, 0, 0,
	607, 0, 611, 0, 614, 0, 616, 0, 618, -2,
	-2, -2, 0, 0, 0, 0, 644, 645, 0, 650,
	0, 653, 654, 655, 0, 657, 658, 659, 660, 0,
	662, 663, -2, -2, 667, 669, 0, 676, 0, 681,
	0, 579, 580, 144, 1150, 914, -2, 916, 0, 932,
	1004, -2, 0, 442, 0, 445, 1008, 1002, 1007, 1057,
	1058, 0, 0, 0, 0, 1040, 1041, 0, 0, 0,
	999, 1000, 0, 0, 0, 0, 1513, 1514, 1515, 1516,
	1517, 1518, 1521, 1522, 1519, 1520, 1523, 1524, 0, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1526, 1527, 1528, 0, 0,
	1530, 0, 1532, 0, 0, 0, 0, 0, 0, 1336,
	1338, 1595, 0, 0, 1529, 1278, 1279, 1280, 1315, 1316,
	0, 0, 1389, 1592, 1591, 1391, 0, 1544, 0, 1398,
	0, 1270, 1405, 1621, -2, 0, 1508, 1539, 0, 0,
	1413, 1414, 1415, 0, 0, 1544, 0, 0, 1586, 0,
	1481, 0, 1214, 0, 1215, 1216, 0, 1217, 1218, 1231,
	1244, 0, 0, 0, 0, 1248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 0, 1567, -2, 0, 0,
	0, 0, 0, 1030, 0, 0, 1083, 1596, 1600, 1601,
	1083, 1083, 0, 0, 1545, 1143, 1143, 0, 0, 1139,
	1139, 1139, 1137, 1114, 0, 392, 394, 396, 398, 399,
	400, 402, 1120, 0, 1130, 0, 1120, 1120, 0, -2,
	1102, 0, 0, 1130, 1147, 1148, 0, 0, 0, 0,
	0, 0, 1657, 0, 0, 0, 1644, 0, 0, 0,
	422, 432, 1037, 0, 1547, 1169, 1163, 1172, 1173, 1174,
	1175, 1221, 1222, 1223, 1224, 1225, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, -2, 1232, 1234, 1255, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1227, 0,
	1202, 1202, 1202, 1219, 1220, 1243, 1254, 1246, 1254, 1250,
	1170, 1171, 1237, 1238, 1239, 1240, 0, 426, 0, 0,
	0, 0, -2, 486, 0, 940, 0, 946, 511, 512,
	513, 948, 949, 0, 489, 514, 515, 516, 517, 518,
	519, 0, 819, 0, 821, 1616, 0, 487, 504, 492,
	0, 498, 74, 897, 110, 0, 897, 897, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 98, 106, 86,
	87, 0, 0, 0, 0, 56, 827, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 97, 0, 92, 76, 0, 0, 0, 100, 108,
	0, 135, 137, 0, 0, 1133, 152, 0, 689, 0,
	0, 1657, 1612, 0, 0, 0, 0, 224, 226, 0,
	228, 229, 230, 0, 858, 0, 237, 234, 278, 776,
	1948, 826, 1948, 824, 1639, 0, 0, 0, 304, 299,
	0, 301, 845, 0, 1034, 0, 0, 0, 0, 865,
	0, 1948, 870, 1626, 1665, 1666, 954, 0, 1158, 0,
	968, 0, 0, 1153, 0, 1155, 0, 255, 256, 257,
	0, 330, 0, 142, 143, 0, 333, 0, 336, 0,
	339, 0, 0, 342, 0, 0, 0, 0, 1037, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 182,
	154, 182, 182, 1133, 463, 1133, 465, 0, 0, 587,
	588, 589, 591, 592, 594, 595, -2, -2, 677, 647,
	0, 0, 0, 646, 604, 0, 683, 1854, 693, 606,
	1721, 609, 1721, 612, 1721, 615, 617, 620, 639, 627,
	0, 631, 0, 633, 0, 635, 647, 648, 651, 656,
	661, 0, 0, 0, 0, 0, 843, 0, 931, 1005,
	1007, 444, 1003, 1055, 1056, 1061, 1065, 1066, 1069, 1072,
	1073, 1063, 1273, 1023, 1024, 1025, 1049, 1050, 884, 0,
	2074, 1274, 1164, 1275, 1276, 1623, 0, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, -2, -2, -2,
	-2, -2, -2, -2, -2, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, -2, -2, -2, 1313,
	1314, -2, 1531, 1533, 0, 1595, 0, -2, 0, -2,
	-2, -2, -2, 1333, 0, 1335, 1340, 1342, 1344, 0,
	0, 0, 0, 1594, 1354, 1578, 1579, 0, 0, 1510,
	1511, 1512, 1339, 0, 1358, 1593, 1590, 0, 0, 1543,
	1048, 1417, 0, 0, 0, 0, 1424, 0, 1622, 1269,
	1256, 1257, 1258, 1259, 1260, 1261, 1271, 1409, 1541, 0,
	1540, 0, 0, 0, 1551, 0, 1585, 1581, 0, 1645,
	1651, 1489, 0, 0, 0, 0, 1619, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1554, -2, -2, -2, -2,
	-2, -2, -2, 0, 1463, 0, 1465, 1545, 1564, 0,
	0, 1359, 0, 0, 0, 1508, 0, 1468, 1545, 1572,
	0, 0, 0, 0, 0, 1545, 0, 1577, 0, 1475,
	0, 1477, 1032, 0, 0, 1158, 0, 0, 0, 1599,
	1158, 1158, 0, 1078, 0, 0, 1140, 1141, 1142, 0,
	0, 1143, 0, 1134, 1138, 1135, 1136, 0, 0, 1120,
	393, 395, 397, 401, 403, 1130, 1094, 0, 0, 1625,
	1100, 1129, 0, 802, 1119, 1130, 1130, 0, -2, 1104,
	0, 0, 1048, -2, 183, 801, 0, 0, 0, 0,
	412, 414, 0, 0, 406, 0, 409, 0, 1159, 1162,
	0, 1176, 0, 0, -2, 0, 0, 0, 0, 0,
	479, 0, 939, 947, 0, 508, 0, 510, 0, 820,
	1618, 1617, 0, 499, 0, 0, 0, 0, 896, 114,
	1948, 0, 146, 0, 0, 770, 1631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 88, 0, 0, 0, 0, 0, 0,
	0, 828, 829, 831, 837, 839, 0, 833, 1620, 0,
	834, 0, 836, 838, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 89, 0, 0, 0,
	0, 1606, 173, 1132, 0, 1605, 1615, 0, 196, 199,
	202, 205, 0, 232, 0, 0, 718, 701, 0, 822,
	825, 0, 802, 857, 1637, 0, 286, 182, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 1948, 956, 962, 0, 1048, 1157, 0, 985, 970,
	0, 0, 0, 985, 989, 990, 992, 993, 0, 0,
	1154, 0, 259, 352, 144, 144, 144, 1603, 144, 144,
	171, 346, 349, 355, 405, 1037, 182, 180, 1816, 178,
	175, 177, 0, 0, 0, 719, 721, 722, 723, 724,
	0, 1666, 0, 1774, 1666, 0, 973, 975, 0, 149,
	182, 0, 0, 298, 462, 467, 581, 0, 622, 641,
	596, 598, 599, 600, 694, 692, 608, 610, 613, 630,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 678,
	679, 680, 682, 1151, 1006, 0, 1067, 0, 1064, 1070,
	1071, 0, 1052, 882, 883, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1355, 0, -2, 1334, 1337, 1341,
	1343, 1345, 0, 0, 0, 0, 0, 0, 1534, 0,
	1536, 1356, 1588, 1591, 1506, 0, 0, 1047, 1048, 1048,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1542,
	0, 1549, 1550, 0, 1416, 0, 1582, 0, 0, 0,
	1425, 0, 0, 0, 1226, 1200, 0, 1254, 1252, 1253,
	1247, 1254, 1251, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 1448, 1460, 0, 1462, 1464, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 1364, 1467, 1570, 1571, 0,
	0, 0, 0, 0, 0, 1473, 0, 1576, 1474, 1476,
	1037, 1080, 1075, 1597, 1133, 1082, 1084, 1598, 1628, 1075,
	1075, 0, 1546, 0, 0, 1124, 0, 0, 0, 1126,
	0, 1115, 0, 1117, 1130, 1099, 0, 0, 1092, 0,
	1088, 1089, 1090, 1091, 802, 1128, 1101, 1105, 1645, 0,
	1149, 0, 1109, 1112, 0, 0, 1658, 207, 211, 212,
	208, 209, 421, 0, 0, 1548, 0, 1165, 0, 0,
	0, 0, 0, 425, 0, 475, -2, 506, 507, 509,
	0, 505, 111, 897, 0, 0, 888, 0, 116, 1948,
	125, 0, 747, 0, 1629, 0, 0, 0, 0, 899,
	0, 1948, 144, 1948, 144, 127, 130, 0, 134, 132,
	0, 0, 738, 75, 897, 78, 82, 90, 0, 0,
	0, 96, 0, 0, 890, 0, 832, 835, 841, 57,
	0, 892, 886, 0, 885, 136, 80, 84, 91, 0,
	894, 77, 0, 182, 0, 153, 1611, 0, 0, 0,
	0, 0, 717, 787, 0, 0, 0, 0, 0, 0,
	292, 288, 0, 297, 303, 302, 848, -2, 851, 860,
	0, 862, 874, 0, 0, 0, 958, 962, 0, 961,
	1035, 1060, 1156, 963, 985, 0, 0, 0, 972, 969,
	966, 1158, 0, 0, 0, 0, 0, 254, 331, 334,
	337, 340, 343, 357, 157, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 1666, 1666, 0, 1633,
	0, 0, 0, 0, 150, 155, 0, 464, 0, 0,
	632, 634, 647, 670, 671, 733, 0, 733, 0, 0,
	1051, 884, 0, 1277, 1318, 0, 0, -2, 0, 0,
	1322, 0, 0, 0, -2, 0, 0, 0, 1535, 1537,
	0, 1590, 1418, 0, 0, 0, 1422, 1400, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 0, 1407, 1408, 1509, 1552,
	1580, 1584, 0, 1646, 1650, 1487, 1488, 1492, 1636, 0,
	0, 0, 1245, 1249, 1429, 0, 0, 0, 0, 0,
	0, 0, 1553, 1563, 1565, 1360, 1361, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, -2, -2, -2,
	1378, 1379, 1380, -2, -2, -2, 0, 0, 0, 1566,
	1568, 1569, 1573, 1574, 0, 1470, 1471, 1472, 1575, 0,
	1077, 0, 1081, 0, 1077, 1077, 1044, 1122, 0, 0,
	1145, 0, 1097, 1116, 0, 1106, 1095, 0, 1096, 0,
	1127, 0, 1103, 1108, 0, 1111, 0, 1418, -2, 423,
	407, 0, 0, 1167, 1177, 0, 1229, 1233, 427, 1131,
	0, 0, 0, 0, 145, 745, 769, 0, 0, 877,
	884, 0, 0, 118, 0, 0, 0, 126, 0, 123,
	0, 129, 133, 0, 0, 0, 0, 0, 93, 94,
	95, 0, 99, 101, 0, 0, 0, 0, 0, 0,
	147, 0, 227, 856, 233, 727, 775, 0, 777, 0,
	702, 0, 776, 826, 0, 284, 0, 291, 0, 846,
	861, 0, 0, 0, 0, 0, 960, 962, 0, 953,
	954, 985, 1059, 964, 983, -2, 982, 0, 1048, 991,
	988, 994, 995, 0, 179, 0, 174, 176, 0, 160,
	0, 0, 720, 725, 0, 0, 0, 0, 0, 974,
	976, 0, 166, 0, 582, 642, 672, 732, 0, 0,
	674, 1062, 1068, 1053, 884, 1320, 1324, 0, 0, 0,
	1326, -2, 0, 1348, -2, -2, 1538, 1589, 1397, 1048,
	1419, 1421, 1272, 1583, 0, 1494, 1491, 0, 1478, 1201,
	1439, 1440, 0, 0, 1443, 1445, 1446, 1447, 1562, 0,
	0, 0, 0, 1469, 1033, 1483, 0, 0, 1085, 1483,
	1483, 1123, 0, 1125, 1120, 1118, 1093, 1086, 0, 1646,
	1110, 0, 0, 1160, 1166, 0, 1228, 112, 113, 115,
	0, 746, 0, 749, 0, 0, 0, 0, 756, 757,
	0, 0, 0, 0, 0, 791, 800, 0, 879, 0,
	0, 0, 120, 139, 0, 0, 898, 0, 144, 144,
	0, 0, 889, 0, 0, 0, 0, 891, 893, 887,
	0, 0, 895, 172, 735, 0, 787, 779, 780, 781,
	0, 786, 788, 0, 0, 706, 703, 718, 701, 823,
	855, 0, 289, 0, 873, 0, 0, 0, 950, 962,
	0, 955, 956, 305, 0, 0, 0, 971, 1060, 0,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 182,
	466, 468, 0, 0, 474, 731, 0, 0, 1054, 1328,
	-2, -2, 1349, 0, 1647, 1649, 1048, 0, 1480, 0,
	0, -2, 0, 0, 0, 1019, 0, 1076, 1074, 1020,
	1021, 1144, 1130, 0, 1113, 0, 1168, 117, 0, 750,
	751, 1632, 753, 0, 755, 758, 0, 760, 1668, 0,
	764, 771, 792, 0, 727, 0, 797, 798, 878, 773,
	0, 119, 121, 138, 881, 122, 128, 0, 0, 79,
	0, 0, 1715, 103, 81, 0, 701, 734, 0, 778,
	0, 789, 790, 704, 0, 0, 0, 290, 293, 0,
	296, 0, 874, 0, 0, 0, 957, 958, 0, 0,
	0, 985, 996, 159, 0, 0, 800, 0, 0, 768,
	0, 164, 0, 470, 0, 472, 0, 673, 675, 1420,
	1498, 0, 1441, 1442, -2, 0, 1386, 1482, 1484, 0,
	1098, 1087, 1161, 748, 752, 0, 0, 806, 0, 0,
	0, 795, 796, 735, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 707, 0, 727,
	0, 294, 295, 800, 0, 800, 0, 959, 960, 0,
	978, 979, 981, 986, 0, 0, 727, 800, 767, 0,
	469, 0, 0, 0, 0, 0, 0, 1493, 1387, 0,
	0, 0, 759, 811, 0, 0, 0, 793, 794, 791,
	0, 802, 124, 0, 880, 0, 739, 0, 0, 742,
	0, 0, 104, 1715, 102, 0, 0, 0, 783, 785,
	708, 735, 706, 727, 0, 727, 0, 951, 0, 980,
	182, 182, 735, 727, 182, 471, 473, 1490, 1495, 1499,
	-2, 1911, 1718, 0, 1496, 1497, 1485, 1486, 0, 761,
	807, 808, 0, 803, 804, 805, 1667, 762, 763, 772,
	799, 806, 140, 736, 0, 0, 737, 0, 0, 107,
	0, 109, 0, 782, 0, 701, 705, 735, 0, 735,
	0, 1158, 161, 162, 765, 735, 163, 0, 1501, 1502,
	1503, 1504, 1505, 754, 809, 0, 810, 0, 0, 0,
	811, 740, 0, 743, 0, 105, 0, 784, 700, 871,
	800, 871, 800, 977, 766, 0, 812, 0, 815, 816,
	0, 813, 791, 0, 0, 730, 866, 0, 727, 868,
	727, 1500, 814, 817, 818, 774, 0, 0, 726, 728,
	729, 872, 735, 735, 735, 0, 871, 871, 741, 0,
	867, 869, 0, 0, 735, 744,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1062
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1082
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1185
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1189
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1264
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1297
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1326
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1350
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1368
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1395
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1432
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1452
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1606
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1646
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1775
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1836
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1845
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1851
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1856
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1861
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1866
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1871
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1875
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1902
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1986
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1987
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2116
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2121
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return unimplemented(sqllex, "create cast")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "create operator")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "create publication")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "create rule")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "create server")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2164
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2165
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2168
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2177
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2178
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "drop server")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2217
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2314
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2349
		{

			sqlVAL.union.val = nil
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DELETE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2383
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2385
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2386
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "DROP")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2402
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2404
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2405
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2451
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2531
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2536
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2586
		{
			return helpWith(sqllex, "DELETE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "INSERT")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2603
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			return helpWith(sqllex, "DELETE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2645
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2678
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2790
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2845
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2859
		{
			return helpWith(sqllex, "USE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2864
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2865
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2866
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3082
		{
			return unimplemented(sqllex, "set from current")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3177
		{
			sqlVAL.union.val = tree.Low
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.Normal
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.High
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3227
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.str = "client_encoding"
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.str = "timezone"
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3294
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3340
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3348
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3365
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3431
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3520
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3523
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = true
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3527
		{
			sqlVAL.union.val = false
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3544
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3546
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3550
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = true
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = false
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3565
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3570
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3598
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3601
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3604
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = false
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3616
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3633
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3640
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3652
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3657
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3662
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3666
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3678
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3682
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3698
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3721
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3729
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3744
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3766
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3775
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3782
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3789
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3794
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3914
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3918
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3922
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3961
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3965
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3994
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4006
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4015
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4018
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4054
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4066
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4079
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4080
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4081
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4085
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4096
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4108
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4109
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4124
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4125
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4126
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4127
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4128
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4129
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4130
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4131
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4161
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4165
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4174
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4181
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4186
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4197
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.str = ""
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4211
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4224
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4237
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4257
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4281
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4292
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4296
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4364
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4368
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4382
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 765:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4475
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4499
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4509
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4524
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4531
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4558
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4574
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4584
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4590
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4591
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4593
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4653
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4688
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4728
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4753
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4758
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4762
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4766
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4777
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4778
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4781
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4783
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4785
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4788
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4790
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4791
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4793
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4806
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4821
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = nil
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4846
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4851
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4852
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4860
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4868
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4869
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4872
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4873
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4879
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4881
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4883
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4885
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4887
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4889
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4905
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4919
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4934
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4948
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4962
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4965
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4966
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4985
		{
			sqlVAL.union.val = false
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = true
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = false
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.union.val = tree.Descending
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5061
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5067
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5075
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5081
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5089
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5095
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5112
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5113
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5116
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5117
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5128
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5161
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5165
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5166
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5183
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5186
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5191
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5204
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5209
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5218
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5219
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5220
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5228
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5235
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5238
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5239
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.str = ""
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.str = ""
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5271
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5285
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5298
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5300
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5304
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5323
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5349
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5369
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5373
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5377
		{
			sqlVAL.str = ""
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5383
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.str = ""
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.str = ""
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5412
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5413
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5432
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5439
		{
			return helpWith(sqllex, "INSERT")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5457
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5461
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5470
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5491
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5515
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5529
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5532
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5533
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5535
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5541
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 986:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5579
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5585
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5611
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5708
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5709
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5714
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5749
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5750
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5751
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5800
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5812
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5816
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5849
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5856
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5872
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5876
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5898
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5899
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = nil
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5912
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5913
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = true
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = false
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = false
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5931
		{
			sqlVAL.union.val = true
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5942
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5943
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5957
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5963
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5973
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5977
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5982
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5997
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6021
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6050
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6073
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6074
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6077
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6078
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6095
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6099
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6109
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6131
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6133
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6148
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6170
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6175
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6180
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6191
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6198
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6203
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6214
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6222
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6261
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6275
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6310
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6321
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6373
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6375
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = nil
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6394
		{
			sqlVAL.union.val = true
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6398
		{
			sqlVAL.union.val = false
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.str = tree.AstFull
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.str = tree.AstRight
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.str = tree.AstInner
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6493
		{
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.str = tree.AstHash
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.str = ""
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6560
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6578
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6584
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6592
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6621
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6634
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6642
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6665
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6667
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6675
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6687
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6688
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = types.String
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = types.Name
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6729
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = types.INet
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = types.Oid
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6809
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6817
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = nil
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = types.Int2
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = types.Int2
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = types.Int4
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = types.Int
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = types.Int
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = types.Int
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = types.Float4
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = types.Float4
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = types.Float
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = types.Float
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6884
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6892
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6900
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = types.Bool
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = types.Bool
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = types.RegType
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6941
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = types.Float
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6960
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6966
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6988
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = types.String
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = true
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = false
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = types.Date
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7037
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7042
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7049
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7050
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7052
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7060
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7076
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = true
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = false
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = false
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = types.Interval
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = tree.Year
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = tree.Month
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = tree.Day
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = tree.Month
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = nil
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.Second
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7163
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7210
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7454
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7520
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7736
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7741
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7750
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7768
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7777
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7816
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7827
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7828
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7854
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7898
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7966
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7971
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7976
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7981
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7986
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7991
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8011
		{
			return unimplemented(sqllex, "treat")
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8037
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8042
		{
			return unimplemented(sqllex, "within group")
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8043
		{
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8078
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.str = ""
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8169
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8182
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8256
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = tree.Any
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = tree.Some
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.All
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.Div
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = tree.LT
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = tree.GT
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = tree.LE
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = tree.GE
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = tree.NE
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Like
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8469
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8616
		{
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8617
		{
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8689
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8747
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8763
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8772
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8783
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8792
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8800
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8912
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8926
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8930
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8934
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8965
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8978
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8985
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9010
		{
			sqlVAL.str = ""
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
