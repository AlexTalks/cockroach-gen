// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:8083

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	420, 57,
	-2, 879,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	165, 717,
	-2, 0,
	-1, 60,
	101, 879,
	171, 879,
	368, 879,
	369, 879,
	-2, 0,
	-1, 74,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 842,
	-1, 110,
	195, 535,
	356, 535,
	-2, 0,
	-1, 115,
	4, 881,
	20, 881,
	21, 881,
	22, 881,
	23, 881,
	25, 881,
	30, 881,
	35, 881,
	36, 881,
	37, 881,
	38, 881,
	39, 881,
	40, 881,
	41, 881,
	42, 881,
	43, 881,
	44, 881,
	46, 881,
	47, 881,
	48, 881,
	49, 881,
	50, 881,
	51, 881,
	54, 881,
	55, 881,
	56, 881,
	58, 881,
	59, 881,
	63, 881,
	64, 881,
	65, 881,
	66, 881,
	67, 881,
	69, 881,
	70, 881,
	71, 881,
	72, 881,
	74, 881,
	76, 881,
	77, 881,
	80, 881,
	81, 881,
	82, 881,
	90, 881,
	91, 881,
	92, 881,
	93, 881,
	94, 881,
	95, 881,
	96, 881,
	97, 881,
	99, 881,
	101, 881,
	103, 881,
	106, 881,
	107, 881,
	109, 881,
	110, 881,
	114, 881,
	115, 881,
	116, 881,
	117, 881,
	118, 881,
	119, 881,
	120, 881,
	121, 881,
	122, 881,
	123, 881,
	124, 881,
	132, 881,
	133, 881,
	134, 881,
	135, 881,
	136, 881,
	138, 881,
	140, 881,
	144, 881,
	146, 881,
	147, 881,
	149, 881,
	151, 881,
	152, 881,
	153, 881,
	154, 881,
	155, 881,
	156, 881,
	157, 881,
	158, 881,
	161, 881,
	166, 881,
	167, 881,
	168, 881,
	171, 881,
	172, 881,
	173, 881,
	174, 881,
	175, 881,
	176, 881,
	177, 881,
	178, 881,
	180, 881,
	182, 881,
	185, 881,
	186, 881,
	187, 881,
	189, 881,
	190, 881,
	193, 881,
	194, 881,
	195, 881,
	197, 881,
	198, 881,
	200, 881,
	202, 881,
	203, 881,
	206, 881,
	207, 881,
	210, 881,
	212, 881,
	215, 881,
	216, 881,
	217, 881,
	218, 881,
	219, 881,
	221, 881,
	222, 881,
	223, 881,
	224, 881,
	229, 881,
	230, 881,
	231, 881,
	232, 881,
	233, 881,
	235, 881,
	236, 881,
	238, 881,
	239, 881,
	240, 881,
	243, 881,
	244, 881,
	246, 881,
	248, 881,
	249, 881,
	250, 881,
	251, 881,
	252, 881,
	253, 881,
	254, 881,
	255, 881,
	257, 881,
	258, 881,
	259, 881,
	260, 881,
	261, 881,
	263, 881,
	264, 881,
	265, 881,
	266, 881,
	267, 881,
	268, 881,
	269, 881,
	270, 881,
	272, 881,
	273, 881,
	274, 881,
	275, 881,
	276, 881,
	278, 881,
	279, 881,
	280, 881,
	281, 881,
	282, 881,
	283, 881,
	284, 881,
	286, 881,
	288, 881,
	289, 881,
	290, 881,
	291, 881,
	292, 881,
	293, 881,
	295, 881,
	296, 881,
	297, 881,
	298, 881,
	299, 881,
	300, 881,
	301, 881,
	303, 881,
	304, 881,
	305, 881,
	306, 881,
	307, 881,
	308, 881,
	309, 881,
	310, 881,
	311, 881,
	313, 881,
	314, 881,
	315, 881,
	316, 881,
	318, 881,
	319, 881,
	320, 881,
	321, 881,
	323, 881,
	324, 881,
	325, 881,
	326, 881,
	327, 881,
	328, 881,
	329, 881,
	330, 881,
	331, 881,
	332, 881,
	333, 881,
	334, 881,
	336, 881,
	337, 881,
	339, 881,
	340, 881,
	341, 881,
	342, 881,
	343, 881,
	344, 881,
	345, 881,
	346, 881,
	347, 881,
	348, 881,
	350, 881,
	351, 881,
	352, 881,
	353, 881,
	356, 881,
	357, 881,
	358, 881,
	359, 881,
	361, 881,
	362, 881,
	363, 881,
	364, 881,
	367, 881,
	368, 881,
	369, 881,
	370, 881,
	372, 881,
	374, 881,
	375, 881,
	376, 881,
	377, 881,
	378, 881,
	379, 881,
	382, 881,
	383, 881,
	388, 881,
	389, 881,
	390, 881,
	391, 881,
	392, 881,
	393, 881,
	-2, 0,
	-1, 136,
	113, 852,
	127, 852,
	179, 852,
	205, 852,
	234, 852,
	242, 852,
	365, 852,
	-2, 845,
	-1, 141,
	1, 775,
	185, 775,
	263, 775,
	267, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 143,
	1, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 144,
	1, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 145,
	1, 779,
	419, 779,
	420, 779,
	-2, 0,
	-1, 171,
	4, 888,
	5, 888,
	6, 888,
	7, 888,
	8, 888,
	9, 888,
	20, 888,
	21, 888,
	22, 888,
	23, 888,
	25, 888,
	30, 888,
	31, 888,
	35, 888,
	36, 888,
	37, 888,
	38, 888,
	39, 888,
	40, 888,
	41, 888,
	42, 888,
	43, 888,
	44, 888,
	46, 888,
	47, 888,
	48, 888,
	49, 888,
	50, 888,
	51, 888,
	52, 888,
	53, 888,
	54, 888,
	55, 888,
	56, 888,
	58, 888,
	59, 888,
	61, 888,
	63, 888,
	64, 888,
	65, 888,
	66, 888,
	67, 888,
	69, 888,
	70, 888,
	71, 888,
	72, 888,
	74, 888,
	76, 888,
	77, 888,
	79, 888,
	80, 888,
	81, 888,
	82, 888,
	83, 888,
	84, 888,
	85, 888,
	86, 888,
	87, 888,
	88, 888,
	89, 888,
	90, 888,
	91, 888,
	92, 888,
	93, 888,
	94, 888,
	95, 888,
	96, 888,
	97, 888,
	98, 888,
	99, 888,
	101, 888,
	103, 888,
	106, 888,
	107, 888,
	109, 888,
	110, 888,
	114, 888,
	115, 888,
	116, 888,
	117, 888,
	118, 888,
	119, 888,
	120, 888,
	121, 888,
	122, 888,
	123, 888,
	124, 888,
	125, 888,
	126, 888,
	132, 888,
	133, 888,
	134, 888,
	135, 888,
	136, 888,
	138, 888,
	140, 888,
	143, 888,
	144, 888,
	146, 888,
	147, 888,
	149, 888,
	151, 888,
	152, 888,
	153, 888,
	154, 888,
	155, 888,
	156, 888,
	157, 888,
	158, 888,
	159, 888,
	161, 888,
	166, 888,
	167, 888,
	168, 888,
	170, 888,
	171, 888,
	172, 888,
	173, 888,
	174, 888,
	175, 888,
	176, 888,
	177, 888,
	178, 888,
	180, 888,
	182, 888,
	183, 888,
	184, 888,
	185, 888,
	186, 888,
	187, 888,
	188, 888,
	189, 888,
	190, 888,
	193, 888,
	194, 888,
	195, 888,
	197, 888,
	198, 888,
	200, 888,
	201, 888,
	202, 888,
	203, 888,
	204, 888,
	206, 888,
	207, 888,
	210, 888,
	212, 888,
	213, 888,
	214, 888,
	215, 888,
	216, 888,
	217, 888,
	218, 888,
	219, 888,
	220, 888,
	221, 888,
	222, 888,
	223, 888,
	224, 888,
	225, 888,
	227, 888,
	228, 888,
	229, 888,
	230, 888,
	231, 888,
	232, 888,
	233, 888,
	235, 888,
	236, 888,
	239, 888,
	240, 888,
	243, 888,
	244, 888,
	245, 888,
	246, 888,
	247, 888,
	248, 888,
	249, 888,
	250, 888,
	251, 888,
	252, 888,
	253, 888,
	254, 888,
	255, 888,
	257, 888,
	258, 888,
	259, 888,
	260, 888,
	261, 888,
	263, 888,
	264, 888,
	265, 888,
	266, 888,
	267, 888,
	268, 888,
	269, 888,
	270, 888,
	272, 888,
	273, 888,
	274, 888,
	275, 888,
	276, 888,
	278, 888,
	279, 888,
	280, 888,
	281, 888,
	282, 888,
	283, 888,
	284, 888,
	286, 888,
	287, 888,
	288, 888,
	289, 888,
	290, 888,
	291, 888,
	292, 888,
	293, 888,
	295, 888,
	296, 888,
	297, 888,
	298, 888,
	299, 888,
	300, 888,
	301, 888,
	303, 888,
	304, 888,
	305, 888,
	306, 888,
	307, 888,
	308, 888,
	309, 888,
	310, 888,
	311, 888,
	312, 888,
	313, 888,
	314, 888,
	315, 888,
	316, 888,
	317, 888,
	318, 888,
	319, 888,
	320, 888,
	321, 888,
	323, 888,
	324, 888,
	325, 888,
	326, 888,
	327, 888,
	328, 888,
	329, 888,
	330, 888,
	331, 888,
	332, 888,
	333, 888,
	334, 888,
	336, 888,
	337, 888,
	339, 888,
	340, 888,
	341, 888,
	342, 888,
	343, 888,
	344, 888,
	345, 888,
	346, 888,
	347, 888,
	348, 888,
	350, 888,
	351, 888,
	352, 888,
	353, 888,
	356, 888,
	357, 888,
	358, 888,
	359, 888,
	360, 888,
	361, 888,
	362, 888,
	363, 888,
	364, 888,
	367, 888,
	368, 888,
	369, 888,
	370, 888,
	371, 888,
	372, 888,
	374, 888,
	375, 888,
	376, 888,
	377, 888,
	378, 888,
	379, 888,
	382, 888,
	383, 888,
	388, 888,
	389, 888,
	390, 888,
	391, 888,
	392, 888,
	393, 888,
	394, 888,
	402, 888,
	407, 888,
	408, 888,
	409, 888,
	416, 888,
	422, 888,
	-2, 0,
	-1, 174,
	1, 57,
	420, 57,
	-2, 879,
	-1, 207,
	418, 1453,
	421, 1453,
	-2, 578,
	-1, 208,
	418, 1455,
	421, 1455,
	-2, 579,
	-1, 209,
	418, 1454,
	421, 1454,
	-2, 580,
	-1, 210,
	421, 1395,
	-2, 581,
	-1, 608,
	142, 1568,
	354, 1568,
	399, 1568,
	418, 1568,
	-2, 0,
	-1, 609,
	142, 1491,
	354, 1491,
	399, 1491,
	418, 1491,
	-2, 0,
	-1, 611,
	142, 1641,
	354, 1641,
	399, 1641,
	418, 1641,
	-2, 0,
	-1, 613,
	142, 1670,
	354, 1670,
	399, 1670,
	418, 1670,
	-2, 0,
	-1, 620,
	142, 1573,
	354, 1573,
	399, 1573,
	418, 1573,
	-2, 409,
	-1, 655,
	1, 507,
	415, 507,
	417, 507,
	419, 507,
	420, 507,
	-2, 0,
	-1, 656,
	1, 577,
	139, 577,
	415, 577,
	417, 577,
	419, 577,
	420, 577,
	-2, 0,
	-1, 662,
	1, 521,
	415, 521,
	417, 521,
	419, 521,
	420, 521,
	-2, 0,
	-1, 664,
	1, 525,
	415, 525,
	417, 525,
	419, 525,
	420, 525,
	-2, 0,
	-1, 667,
	1, 536,
	415, 536,
	417, 536,
	419, 536,
	420, 536,
	-2, 0,
	-1, 668,
	1, 542,
	415, 542,
	417, 542,
	419, 542,
	420, 542,
	-2, 0,
	-1, 669,
	1, 545,
	415, 545,
	417, 545,
	419, 545,
	420, 545,
	-2, 0,
	-1, 673,
	1, 559,
	415, 559,
	417, 559,
	419, 559,
	420, 559,
	-2, 0,
	-1, 674,
	1, 561,
	415, 561,
	417, 561,
	419, 561,
	420, 561,
	-2, 0,
	-1, 702,
	127, 890,
	205, 890,
	234, 890,
	-2, 848,
	-1, 710,
	127, 889,
	205, 889,
	234, 889,
	-2, 846,
	-1, 737,
	416, 1743,
	-2, 1169,
	-1, 738,
	416, 1744,
	-2, 1170,
	-1, 769,
	416, 1447,
	-2, 1438,
	-1, 770,
	5, 1025,
	416, 1462,
	-2, 1453,
	-1, 771,
	416, 1463,
	-2, 1454,
	-1, 778,
	5, 1009,
	-2, 1483,
	-1, 779,
	5, 1010,
	-2, 1487,
	-1, 780,
	5, 1011,
	-2, 1486,
	-1, 781,
	5, 1012,
	-2, 1666,
	-1, 782,
	5, 1013,
	-2, 1575,
	-1, 783,
	5, 1014,
	-2, 1634,
	-1, 784,
	5, 1015,
	-2, 1636,
	-1, 785,
	5, 1016,
	-2, 1637,
	-1, 786,
	5, 1017,
	-2, 1638,
	-1, 787,
	5, 1018,
	-2, 1646,
	-1, 788,
	5, 1019,
	-2, 1678,
	-1, 789,
	5, 1020,
	-2, 1545,
	-1, 790,
	5, 1021,
	-2, 1482,
	-1, 791,
	5, 1022,
	-2, 1583,
	-1, 792,
	5, 1023,
	-2, 1584,
	-1, 793,
	5, 1024,
	-2, 1549,
	-1, 794,
	5, 1073,
	416, 1073,
	-2, 1711,
	-1, 812,
	5, 1046,
	-2, 1484,
	-1, 813,
	5, 1064,
	-2, 1511,
	-1, 815,
	5, 1038,
	-2, 1532,
	-1, 816,
	5, 1039,
	-2, 1533,
	-1, 817,
	5, 1030,
	-2, 1548,
	-1, 818,
	5, 1031,
	-2, 1550,
	-1, 819,
	5, 1032,
	-2, 1551,
	-1, 820,
	5, 1033,
	-2, 1552,
	-1, 821,
	5, 997,
	-2, 1558,
	-1, 822,
	5, 998,
	-2, 1559,
	-1, 823,
	5, 1061,
	-2, 1656,
	-1, 824,
	5, 1071,
	-2, 1668,
	-1, 825,
	5, 1036,
	-2, 1692,
	-1, 826,
	5, 1063,
	-2, 1693,
	-1, 827,
	5, 1045,
	-2, 1694,
	-1, 828,
	5, 1063,
	-2, 1695,
	-1, 829,
	5, 1063,
	-2, 1696,
	-1, 830,
	5, 1028,
	-2, 1699,
	-1, 831,
	5, 1028,
	-2, 1700,
	-1, 834,
	5, 1053,
	-2, 1704,
	-1, 836,
	5, 1029,
	-2, 1709,
	-1, 837,
	5, 1034,
	-2, 1710,
	-1, 839,
	5, 1028,
	-2, 1714,
	-1, 842,
	5, 1037,
	-2, 1719,
	-1, 843,
	5, 1035,
	-2, 1721,
	-1, 845,
	5, 1065,
	-2, 1723,
	-1, 846,
	5, 1067,
	-2, 1724,
	-1, 847,
	5, 1069,
	-2, 1725,
	-1, 850,
	5, 1060,
	-2, 1729,
	-1, 920,
	416, 1462,
	-2, 1453,
	-1, 937,
	278, 1435,
	409, 1435,
	-2, 1434,
	-1, 1078,
	253, 877,
	-2, 703,
	-1, 1087,
	237, 1457,
	-2, 0,
	-1, 1130,
	1, 276,
	415, 276,
	417, 276,
	419, 276,
	420, 276,
	-2, 851,
	-1, 1133,
	4, 1728,
	10, 1728,
	11, 1728,
	13, 1728,
	14, 1728,
	15, 1728,
	16, 1728,
	17, 1728,
	18, 1728,
	20, 1728,
	21, 1728,
	22, 1728,
	23, 1728,
	25, 1728,
	28, 1728,
	30, 1728,
	32, 1728,
	35, 1728,
	36, 1728,
	37, 1728,
	38, 1728,
	39, 1728,
	40, 1728,
	41, 1728,
	42, 1728,
	43, 1728,
	44, 1728,
	46, 1728,
	47, 1728,
	48, 1728,
	49, 1728,
	50, 1728,
	51, 1728,
	54, 1728,
	55, 1728,
	56, 1728,
	58, 1728,
	59, 1728,
	60, 1728,
	63, 1728,
	64, 1728,
	65, 1728,
	66, 1728,
	67, 1728,
	68, 1728,
	69, 1728,
	70, 1728,
	71, 1728,
	72, 1728,
	74, 1728,
	75, 1728,
	76, 1728,
	77, 1728,
	79, 1728,
	80, 1728,
	81, 1728,
	82, 1728,
	90, 1728,
	91, 1728,
	92, 1728,
	93, 1728,
	94, 1728,
	95, 1728,
	96, 1728,
	97, 1728,
	99, 1728,
	101, 1728,
	103, 1728,
	106, 1728,
	107, 1728,
	109, 1728,
	110, 1728,
	114, 1728,
	115, 1728,
	116, 1728,
	117, 1728,
	118, 1728,
	119, 1728,
	120, 1728,
	121, 1728,
	122, 1728,
	123, 1728,
	124, 1728,
	128, 1728,
	129, 1728,
	130, 1728,
	131, 1728,
	132, 1728,
	133, 1728,
	134, 1728,
	135, 1728,
	136, 1728,
	137, 1728,
	138, 1728,
	140, 1728,
	143, 1728,
	144, 1728,
	146, 1728,
	147, 1728,
	149, 1728,
	151, 1728,
	152, 1728,
	153, 1728,
	154, 1728,
	155, 1728,
	156, 1728,
	157, 1728,
	158, 1728,
	159, 1728,
	160, 1728,
	161, 1728,
	162, 1728,
	163, 1728,
	164, 1728,
	166, 1728,
	167, 1728,
	168, 1728,
	170, 1728,
	171, 1728,
	172, 1728,
	173, 1728,
	174, 1728,
	175, 1728,
	176, 1728,
	177, 1728,
	178, 1728,
	180, 1728,
	182, 1728,
	183, 1728,
	184, 1728,
	185, 1728,
	186, 1728,
	187, 1728,
	188, 1728,
	189, 1728,
	190, 1728,
	191, 1728,
	192, 1728,
	193, 1728,
	194, 1728,
	195, 1728,
	197, 1728,
	198, 1728,
	200, 1728,
	201, 1728,
	202, 1728,
	203, 1728,
	204, 1728,
	206, 1728,
	207, 1728,
	210, 1728,
	211, 1728,
	212, 1728,
	215, 1728,
	216, 1728,
	217, 1728,
	218, 1728,
	219, 1728,
	220, 1728,
	221, 1728,
	222, 1728,
	223, 1728,
	224, 1728,
	227, 1728,
	229, 1728,
	230, 1728,
	231, 1728,
	232, 1728,
	233, 1728,
	235, 1728,
	236, 1728,
	239, 1728,
	240, 1728,
	241, 1728,
	243, 1728,
	244, 1728,
	246, 1728,
	248, 1728,
	249, 1728,
	250, 1728,
	251, 1728,
	252, 1728,
	253, 1728,
	254, 1728,
	255, 1728,
	257, 1728,
	258, 1728,
	259, 1728,
	260, 1728,
	261, 1728,
	263, 1728,
	264, 1728,
	265, 1728,
	266, 1728,
	267, 1728,
	268, 1728,
	269, 1728,
	270, 1728,
	272, 1728,
	273, 1728,
	274, 1728,
	275, 1728,
	276, 1728,
	277, 1728,
	278, 1728,
	279, 1728,
	280, 1728,
	281, 1728,
	282, 1728,
	283, 1728,
	284, 1728,
	286, 1728,
	287, 1728,
	288, 1728,
	289, 1728,
	290, 1728,
	291, 1728,
	292, 1728,
	293, 1728,
	294, 1728,
	295, 1728,
	296, 1728,
	297, 1728,
	298, 1728,
	299, 1728,
	300, 1728,
	301, 1728,
	303, 1728,
	304, 1728,
	305, 1728,
	306, 1728,
	307, 1728,
	308, 1728,
	309, 1728,
	310, 1728,
	311, 1728,
	313, 1728,
	314, 1728,
	315, 1728,
	316, 1728,
	317, 1728,
	318, 1728,
	319, 1728,
	320, 1728,
	321, 1728,
	323, 1728,
	324, 1728,
	325, 1728,
	326, 1728,
	327, 1728,
	328, 1728,
	329, 1728,
	330, 1728,
	331, 1728,
	332, 1728,
	333, 1728,
	334, 1728,
	336, 1728,
	337, 1728,
	339, 1728,
	340, 1728,
	341, 1728,
	342, 1728,
	343, 1728,
	344, 1728,
	345, 1728,
	346, 1728,
	347, 1728,
	348, 1728,
	350, 1728,
	351, 1728,
	352, 1728,
	353, 1728,
	356, 1728,
	357, 1728,
	358, 1728,
	359, 1728,
	361, 1728,
	362, 1728,
	363, 1728,
	364, 1728,
	367, 1728,
	368, 1728,
	369, 1728,
	370, 1728,
	372, 1728,
	374, 1728,
	375, 1728,
	376, 1728,
	377, 1728,
	378, 1728,
	379, 1728,
	382, 1728,
	383, 1728,
	388, 1728,
	389, 1728,
	390, 1728,
	391, 1728,
	392, 1728,
	393, 1728,
	394, 1728,
	395, 1728,
	397, 1728,
	398, 1728,
	399, 1728,
	400, 1728,
	401, 1728,
	402, 1728,
	404, 1728,
	405, 1728,
	406, 1728,
	407, 1728,
	408, 1728,
	409, 1728,
	410, 1728,
	411, 1728,
	412, 1728,
	414, 1728,
	417, 1728,
	418, 1728,
	421, 1728,
	422, 1728,
	-2, 0,
	-1, 1151,
	142, 1641,
	354, 1641,
	399, 1641,
	418, 1641,
	-2, 0,
	-1, 1178,
	142, 1670,
	354, 1670,
	399, 1670,
	418, 1670,
	-2, 0,
	-1, 1179,
	185, 787,
	263, 787,
	267, 787,
	-2, 396,
	-1, 1256,
	127, 889,
	205, 889,
	234, 889,
	-2, 849,
	-1, 1340,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 1212,
	-1, 1387,
	417, 1330,
	-2, 0,
	-1, 1395,
	185, 787,
	263, 787,
	267, 787,
	-2, 782,
	-1, 1424,
	417, 1330,
	-2, 0,
	-1, 1432,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 956,
	-1, 1631,
	185, 787,
	263, 787,
	267, 787,
	-2, 398,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1108,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1109,
	-1, 1741,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1110,
	-1, 1742,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1111,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1112,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1113,
	-1, 1745,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1114,
	-1, 1746,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1115,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1127,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1128,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1129,
	-1, 1763,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1134,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1136,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1140,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1141,
	-1, 1773,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1142,
	-1, 1774,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1143,
	-1, 1852,
	5, 1025,
	142, 1341,
	416, 1462,
	-2, 1453,
	-1, 1853,
	142, 1342,
	-2, 1688,
	-1, 1854,
	142, 1343,
	-2, 1572,
	-1, 1855,
	142, 1344,
	-2, 1512,
	-1, 1856,
	142, 1345,
	-2, 1540,
	-1, 1857,
	142, 1346,
	-2, 1571,
	-1, 1858,
	142, 1347,
	-2, 1633,
	-1, 1927,
	417, 1330,
	-2, 0,
	-1, 1937,
	1, 957,
	79, 957,
	113, 957,
	127, 957,
	143, 957,
	148, 957,
	150, 957,
	170, 957,
	179, 957,
	188, 957,
	201, 957,
	205, 957,
	220, 957,
	234, 957,
	237, 957,
	242, 957,
	285, 957,
	287, 957,
	365, 957,
	373, 957,
	385, 957,
	386, 957,
	396, 957,
	415, 957,
	417, 957,
	419, 957,
	420, 957,
	421, 957,
	-2, 956,
	-1, 1939,
	416, 1439,
	-2, 1451,
	-1, 2019,
	417, 1400,
	421, 1400,
	-2, 1427,
	-1, 2141,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1135,
	-1, 2142,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1137,
	-1, 2147,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1138,
	-1, 2165,
	247, 1301,
	-2, 1303,
	-1, 2376,
	253, 877,
	-2, 703,
	-1, 2440,
	185, 787,
	263, 787,
	267, 787,
	-2, 395,
	-1, 2455,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1139,
	-1, 2460,
	183, 0,
	184, 0,
	227, 0,
	-2, 1157,
	-1, 2471,
	247, 1302,
	-2, 1304,
	-1, 2520,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1187,
	-1, 2521,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1188,
	-1, 2522,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1189,
	-1, 2526,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1193,
	-1, 2527,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1194,
	-1, 2528,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1195,
	-1, 2569,
	416, 1440,
	-2, 1452,
	-1, 2683,
	183, 0,
	184, 0,
	227, 0,
	-2, 1158,
	-1, 2686,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1161,
	-1, 2687,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1163,
	-1, 2832,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1162,
	-1, 2833,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1164,
	-1, 2843,
	183, 0,
	-2, 1196,
	-1, 2932,
	183, 0,
	-2, 1197,
	-1, 3030,
	38, 0,
	159, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1691,
}

const sqlPrivate = 57344

const sqlLast = 58656

var sqlAct = [...]int{

	771, 3092, 2785, 3038, 3029, 2618, 3006, 1800, 3005, 2992,
	2045, 3008, 3039, 2872, 2492, 2073, 2936, 1062, 3040, 2053,
	3028, 2800, 2861, 941, 1120, 2823, 2135, 2636, 1726, 2740,
	1044, 768, 1786, 2631, 2390, 1259, 2755, 2383, 1562, 1561,
	2641, 209, 2579, 2412, 2042, 2385, 488, 2017, 2848, 767,
	745, 2021, 2414, 488, 1924, 2395, 956, 1084, 2284, 1422,
	488, 711, 1152, 488, 2054, 2260, 488, 209, 2242, 488,
	488, 1116, 2718, 1513, 1512, 1509, 488, 1403, 1951, 1461,
	2020, 1518, 1521, 2004, 488, 1942, 1431, 2545, 2271, 537,
	2241, 2937, 1799, 1347, 2178, 483, 2301, 1712, 1798, 1932,
	719, 130, 534, 1825, 950, 1656, 1921, 1717, 2131, 1395,
	2394, 2359, 1934, 1477, 934, 754, 1404, 1483, 1440, 1442,
	1807, 1783, 1979, 1181, 572, 558, 28, 1510, 2005, 1373,
	1978, 905, 1375, 1819, 943, 1131, 2018, 73, 1103, 1413,
	1113, 2024, 2047, 2580, 210, 211, 910, 1344, 1848, 598,
	1913, 735, 887, 1123, 1890, 485, 1898, 618, 136, 1258,
	1931, 130, 1335, 1655, 2786, 1260, 488, 488, 137, 205,
	762, 575, 531, 612, 1100, 1453, 1528, 1394, 584, 1048,
	647, 885, 1264, 2164, 1536, 2561, 484, 1435, 2562, 1536,
	1536, 3119, 2046, 591, 715, 1907, 471, 715, 488, 488,
	488, 946, 488, 488, 959, 959, 2578, 2074, 3113, 811,
	1423, 3112, 1907, 488, 488, 1907, 2006, 3089, 2453, 3086,
	3064, 2754, 471, 1492, 2754, 3058, 3057, 474, 2401, 1907,
	1907, 3054, 710, 3051, 3048, 3055, 586, 3052, 1492, 3026,
	3025, 1548, 1907, 1492, 1492, 3024, 725, 3023, 2987, 1548,
	2974, 1548, 2084, 474, 1492, 2430, 2967, 2965, 957, 1045,
	2754, 2754, 2963, 1498, 2934, 2918, 2754, 2908, 2084, 2657,
	891, 2754, 892, 2903, 953, 130, 716, 1492, 888, 888,
	2901, 2891, 2890, 2883, 2754, 1492, 1492, 1492, 2882, 703,
	2854, 2402, 2754, 2834, 1492, 937, 2006, 2084, 729, 702,
	28, 2780, 769, 2776, 2753, 1907, 2685, 1907, 2754, 2655,
	2084, 2647, 2557, 2648, 2551, 2648, 2558, 2372, 1907, 2464,
	720, 2548, 2420, 1907, 1900, 2076, 2364, 1155, 565, 927,
	931, 936, 2257, 2207, 2206, 1822, 1907, 1907, 1907, 40,
	2200, 2199, 2102, 2169, 2201, 1907, 1907, 2083, 889, 2170,
	1164, 2084, 2070, 44, 939, 763, 1907, 1050, 1049, 1492,
	2013, 902, 1906, 1552, 1492, 760, 1907, 1553, 471, 1486,
	2988, 2921, 1548, 1907, 1492, 2548, 2177, 1899, 171, 1634,
	2657, 564, 1994, 908, 718, 1940, 2533, 146, 2466, 2364,
	2050, 2134, 39, 1823, 1156, 2113, 1491, 1399, 1802, 474,
	1047, 174, 1653, 40, 141, 171, 2403, 1150, 1149, 1148,
	566, 1534, 1147, 1146, 173, 1145, 1537, 44, 1144, 59,
	568, 1537, 1537, 1143, 60, 2404, 1345, 1142, 1141, 1140,
	1139, 46, 143, 1138, 1137, 1136, 1135, 1134, 893, 890,
	709, 173, 708, 45, 707, 51, 706, 705, 2212, 2213,
	701, 700, 699, 698, 172, 1824, 1821, 63, 697, 696,
	695, 694, 693, 165, 692, 691, 52, 687, 686, 685,
	54, 166, 645, 644, 58, 643, 914, 1051, 144, 642,
	641, 172, 565, 59, 72, 640, 639, 638, 60, 61,
	637, 636, 138, 40, 635, 1840, 634, 488, 488, 633,
	488, 946, 946, 488, 632, 631, 488, 44, 630, 488,
	629, 628, 62, 627, 626, 488, 625, 624, 623, 138,
	622, 63, 2808, 607, 606, 488, 488, 488, 488, 488,
	946, 946, 2212, 2213, 1156, 564, 605, 946, 604, 906,
	603, 1826, 602, 522, 521, 494, 493, 492, 2212, 2213,
	477, 2230, 2231, 2232, 1544, 1124, 476, 64, 2733, 1535,
	1696, 475, 195, 194, 566, 193, 2682, 192, 488, 191,
	2401, 190, 189, 59, 568, 2218, 188, 187, 60, 2212,
	2213, 488, 186, 185, 139, 66, 184, 67, 183, 182,
	2227, 181, 180, 179, 171, 1077, 1492, 178, 177, 176,
	175, 488, 1930, 1899, 2692, 171, 2227, 2649, 2566, 2297,
	1089, 63, 488, 2446, 1074, 2175, 567, 2166, 2123, 110,
	2014, 64, 2009, 1430, 1659, 1439, 3045, 1838, 65, 1156,
	173, 1351, 1820, 1117, 1195, 1064, 1836, 1053, 1834, 2212,
	2213, 173, 2230, 2231, 2232, 1271, 1102, 75, 139, 66,
	3027, 67, 946, 68, 1078, 1081, 2089, 145, 1832, 2218,
	3010, 2999, 69, 2928, 1107, 1110, 2904, 2924, 2922, 171,
	172, 1132, 2821, 2871, 716, 2218, 2717, 1275, 1276, 165,
	83, 172, 2716, 110, 171, 2715, 2708, 166, 2704, 488,
	165, 2703, 142, 2702, 2698, 2697, 2696, 2227, 166, 2695,
	2688, 2807, 1278, 2668, 2666, 173, 2218, 2565, 2049, 1794,
	2542, 64, 2541, 1345, 2212, 2213, 2540, 2478, 2367, 138,
	173, 2233, 1189, 1179, 2363, 2296, 1193, 1277, 115, 2287,
	2253, 565, 2240, 2228, 2211, 2208, 2205, 140, 139, 66,
	2204, 67, 40, 1275, 1276, 172, 2202, 2212, 2213, 2228,
	2183, 1342, 2182, 2165, 165, 1937, 44, 1271, 1558, 171,
	172, 901, 166, 1270, 1257, 1355, 2218, 2119, 1278, 165,
	567, 3117, 1348, 110, 1338, 3100, 3099, 166, 1496, 1495,
	2228, 1063, 2494, 138, 564, 1176, 4, 3018, 3013, 2234,
	2969, 2960, 2959, 1277, 2955, 173, 2954, 1256, 138, 2948,
	2945, 2920, 1654, 1980, 1283, 1203, 2919, 1788, 2867, 2845,
	2795, 2130, 2233, 566, 2790, 2788, 2229, 2775, 2759, 2713,
	1255, 2658, 59, 568, 2634, 2625, 2624, 60, 2622, 1196,
	2599, 2598, 2229, 1795, 2588, 172, 2277, 2587, 2553, 2459,
	2228, 2218, 2426, 2424, 165, 2214, 2215, 2216, 2217, 2219,
	2220, 2348, 166, 2332, 2939, 2212, 2213, 2311, 2310, 2256,
	63, 2239, 2192, 2229, 2191, 2188, 2161, 2156, 1275, 1276,
	1283, 1376, 1381, 138, 2218, 2091, 1927, 1918, 703, 1905,
	1830, 716, 488, 1504, 1363, 1362, 1361, 488, 702, 1360,
	1359, 1424, 1402, 1278, 1393, 1392, 1267, 1268, 1387, 1386,
	1385, 1383, 1272, 1382, 1379, 1378, 1401, 1369, 1410, 2820,
	1839, 1368, 1367, 1366, 488, 2228, 1365, 1364, 1277, 1352,
	1339, 1338, 1175, 2229, 1160, 1128, 2223, 2221, 2222, 2214,
	2215, 2216, 2217, 2219, 2220, 2224, 2225, 2226, 2690, 2665,
	2560, 2556, 2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219,
	2220, 2168, 2086, 1653, 1919, 1348, 1371, 2422, 1336, 1374,
	64, 1436, 2212, 2213, 1377, 1653, 2101, 1653, 1430, 2311,
	2386, 2813, 1384, 1407, 1408, 2222, 2214, 2215, 2216, 2217,
	2219, 2220, 2218, 1192, 2660, 2659, 2563, 139, 66, 2006,
	67, 1390, 1982, 1253, 1388, 1429, 2897, 1391, 2229, 888,
	1389, 1170, 1454, 2352, 2347, 130, 2343, 1421, 171, 852,
	2331, 2100, 1822, 2248, 2247, 2246, 2245, 2140, 1640, 567,
	1627, 1188, 110, 2597, 2849, 1357, 2224, 2225, 2226, 2074,
	883, 1398, 1514, 2223, 2221, 2222, 2214, 2215, 2216, 2217,
	2219, 2220, 1837, 3046, 173, 2432, 2342, 946, 488, 716,
	1396, 1835, 1420, 1833, 959, 1473, 2228, 2046, 1433, 2925,
	2923, 2496, 1460, 884, 488, 959, 488, 488, 1400, 1808,
	1823, 2173, 1246, 1831, 209, 1372, 1281, 1282, 1284, 1285,
	1366, 1366, 3002, 3056, 172, 3053, 1505, 2870, 488, 488,
	2397, 2574, 1448, 165, 3047, 488, 1559, 488, 196, 488,
	2632, 166, 1517, 488, 2077, 200, 530, 1244, 1493, 2221,
	2222, 2214, 2215, 2216, 2217, 2219, 2220, 1426, 1484, 1499,
	2973, 908, 138, 761, 3079, 3080, 201, 1200, 511, 1479,
	2767, 2442, 1824, 1821, 877, 875, 1551, 501, 1953, 2229,
	1279, 1280, 1281, 1282, 1284, 1285, 2216, 2217, 2219, 2220,
	1245, 879, 488, 946, 2103, 209, 488, 488, 1232, 1231,
	3116, 2896, 946, 1525, 209, 488, 714, 1681, 488, 488,
	1523, 1641, 873, 1944, 488, 900, 1354, 2895, 2893, 1944,
	870, 1455, 1501, 1629, 2602, 2892, 1617, 2612, 201, 529,
	1943, 2607, 1050, 1049, 2606, 1190, 959, 2571, 512, 202,
	1489, 2570, 2187, 471, 2186, 2185, 488, 2184, 1452, 2143,
	914, 488, 2212, 2213, 914, 1532, 209, 488, 1826, 488,
	500, 488, 1956, 488, 2075, 488, 1102, 1490, 2032, 471,
	1456, 1457, 713, 1999, 474, 488, 1993, 488, 1989, 2784,
	1191, 1970, 1770, 1508, 1397, 488, 488, 488, 1885, 1046,
	1660, 2423, 2214, 2215, 2216, 2217, 2219, 2220, 1884, 1883,
	474, 202, 2972, 1882, 1198, 1728, 2043, 2927, 1166, 1527,
	1285, 2445, 1621, 1425, 488, 1530, 2003, 906, 959, 1644,
	1643, 1693, 1653, 1650, 689, 1066, 204, 1694, 1631, 581,
	2012, 1661, 2617, 1785, 1436, 715, 1699, 1963, 597, 3042,
	203, 596, 2874, 1688, 2590, 3021, 1554, 1274, 1962, 1820,
	471, 1652, 1531, 2485, 1718, 1725, 1243, 1785, 597, 471,
	1230, 1871, 2488, 1174, 1555, 1176, 1666, 1227, 1557, 1826,
	2984, 1628, 1727, 1618, 2106, 2087, 1767, 199, 3071, 2218,
	2392, 474, 1077, 1955, 1792, 1986, 2108, 1808, 204, 1790,
	474, 1342, 959, 1654, 1980, 1657, 2393, 2985, 1167, 1645,
	1812, 1690, 203, 1663, 2220, 1654, 1980, 1654, 1980, 1503,
	1169, 471, 197, 1647, 1228, 2486, 2109, 1846, 1206, 2132,
	2133, 1475, 2339, 1450, 1252, 1672, 1851, 1851, 2107, 2951,
	1862, 1864, 3079, 1869, 2443, 514, 513, 1370, 488, 199,
	488, 1893, 474, 2608, 2392, 200, 1809, 3043, 1826, 2351,
	1897, 478, 2334, 2228, 1472, 198, 1458, 1697, 712, 1556,
	2034, 1990, 1185, 703, 959, 1698, 703, 703, 1619, 2441,
	488, 1716, 488, 1708, 197, 1443, 1709, 1710, 1444, 488,
	959, 1803, 1805, 1450, 488, 2323, 2829, 1954, 3102, 3070,
	2840, 2899, 488, 1333, 1692, 1587, 2190, 1765, 1768, 1914,
	488, 1826, 1632, 495, 1935, 2600, 523, 200, 1536, 715,
	2670, 1941, 488, 2661, 3044, 946, 716, 198, 1165, 2322,
	1881, 716, 1648, 2677, 3041, 1793, 488, 959, 3078, 871,
	871, 3076, 488, 488, 1939, 1945, 2229, 1796, 1199, 1240,
	1186, 1973, 1764, 881, 1187, 488, 880, 1214, 488, 1920,
	2591, 2799, 888, 1928, 1929, 528, 1567, 1925, 2325, 1539,
	1445, 1680, 1541, 1180, 1847, 1543, 2797, 872, 1859, 1546,
	1957, 1959, 488, 1447, 488, 871, 488, 2040, 2327, 488,
	1972, 488, 1476, 488, 1649, 488, 488, 1894, 488, 946,
	946, 946, 1895, 505, 946, 1911, 528, 2000, 2875, 505,
	488, 1065, 1707, 2038, 1903, 1904, 2825, 937, 1915, 1916,
	3069, 1507, 716, 1409, 2068, 2069, 498, 1241, 2326, 1967,
	1449, 1433, 498, 1965, 1163, 1948, 1987, 1949, 527, 3095,
	1972, 1971, 1936, 2001, 2145, 479, 2153, 1154, 1981, 1983,
	1984, 1985, 1910, 1988, 1168, 1996, 2223, 2221, 2222, 2214,
	2215, 2216, 2217, 2219, 2220, 1766, 2064, 2151, 1784, 1273,
	690, 488, 491, 1443, 908, 580, 1444, 1443, 1991, 527,
	1444, 1567, 1567, 2092, 1263, 1173, 1050, 2007, 1781, 1665,
	1207, 1242, 1791, 504, 908, 1185, 2059, 471, 1949, 504,
	2079, 1262, 2066, 130, 2048, 2071, 2048, 2830, 2824, 1779,
	959, 130, 488, 2711, 2356, 1450, 1695, 1488, 2360, 2529,
	488, 2885, 488, 2052, 480, 2057, 3108, 2061, 474, 2062,
	3103, 2063, 1654, 1651, 2884, 1872, 2065, 1208, 1132, 2072,
	1205, 2329, 2763, 488, 488, 488, 2078, 488, 2865, 2942,
	1537, 2088, 2067, 1949, 1639, 2096, 1185, 2097, 1445, 2148,
	677, 530, 1445, 2573, 2114, 2090, 488, 914, 2484, 481,
	2149, 1447, 2307, 1186, 2154, 1447, 525, 1187, 2303, 1261,
	724, 2041, 2766, 2039, 1377, 1526, 1384, 914, 2434, 2765,
	1516, 1515, 1215, 1374, 1511, 2095, 2093, 1506, 2826, 501,
	1685, 1775, 530, 2285, 2993, 501, 1704, 2104, 1263, 1776,
	3093, 526, 1777, 1637, 499, 2125, 1782, 525, 1449, 1262,
	499, 2031, 1449, 1635, 2637, 2866, 2801, 1638, 2313, 130,
	906, 2120, 2312, 130, 1186, 2122, 2138, 497, 1187, 1446,
	2530, 2712, 1662, 497, 529, 2274, 2159, 2531, 678, 496,
	906, 2146, 526, 2162, 524, 496, 3107, 1909, 1908, 755,
	2016, 2437, 589, 1416, 1974, 2015, 713, 583, 1567, 2762,
	2619, 3094, 2180, 2181, 1099, 2365, 2129, 506, 2127, 1088,
	563, 36, 500, 506, 1480, 529, 2286, 1087, 500, 520,
	1419, 1412, 502, 3083, 1705, 524, 1097, 1261, 502, 2787,
	472, 3096, 2150, 1450, 570, 486, 2355, 1450, 1912, 2152,
	2719, 515, 507, 562, 35, 2796, 2764, 2546, 2863, 533,
	1829, 1417, 576, 3, 2176, 533, 472, 3085, 576, 594,
	2844, 1250, 2710, 1441, 2238, 601, 561, 32, 2616, 2144,
	1237, 2361, 1235, 621, 1778, 1893, 1893, 1893, 2436, 2864,
	2255, 1780, 959, 2243, 1828, 1416, 2458, 2411, 2203, 2258,
	2155, 1225, 2433, 2267, 2265, 2266, 2094, 1998, 488, 1969,
	1497, 488, 1251, 869, 1161, 679, 716, 2172, 1679, 488,
	488, 959, 1419, 2117, 488, 2118, 2244, 1975, 1976, 1223,
	1221, 2121, 488, 488, 488, 560, 79, 2116, 488, 3037,
	1414, 488, 2294, 2098, 2990, 1682, 2264, 1418, 488, 488,
	488, 488, 488, 1417, 1669, 1620, 1358, 559, 78, 1450,
	2614, 488, 556, 23, 1487, 533, 533, 1446, 488, 557,
	24, 1446, 1415, 921, 2435, 2292, 555, 30, 2308, 2737,
	488, 946, 1219, 2473, 488, 1482, 588, 1217, 1211, 2304,
	959, 582, 2384, 1098, 488, 36, 2280, 486, 486, 486,
	959, 951, 486, 1481, 716, 959, 2259, 2276, 680, 2595,
	2288, 1249, 472, 1052, 2295, 1096, 1095, 488, 2333, 488,
	1236, 488, 1234, 569, 488, 946, 946, 946, 35, 488,
	1478, 488, 2250, 2251, 2252, 488, 2293, 2309, 925, 1418,
	488, 1224, 488, 554, 21, 2315, 681, 2319, 2320, 488,
	2298, 32, 1456, 1457, 2358, 1678, 2279, 874, 876, 2358,
	2282, 552, 20, 2593, 2751, 488, 488, 2572, 946, 1222,
	1220, 2281, 1872, 1872, 2328, 1077, 2300, 2399, 2262, 2290,
	2291, 1949, 2330, 2335, 516, 488, 2269, 2270, 2344, 2748,
	2275, 2314, 2382, 2317, 2340, 1448, 2349, 2388, 2366, 2428,
	908, 2369, 2345, 2336, 2350, 2338, 2380, 2337, 908, 908,
	79, 2346, 908, 2421, 488, 2044, 553, 19, 2362, 1077,
	1448, 2036, 1218, 542, 15, 2035, 2033, 1216, 1210, 488,
	2749, 517, 78, 2030, 2341, 1550, 1549, 23, 2374, 2387,
	1547, 1545, 543, 16, 24, 2370, 551, 57, 1542, 1484,
	1540, 30, 1538, 2378, 2398, 1484, 1094, 959, 1485, 2405,
	1586, 1474, 1872, 1872, 1872, 1471, 959, 518, 1459, 519,
	550, 56, 1451, 1073, 2913, 541, 55, 716, 2375, 2376,
	2377, 488, 897, 2396, 549, 12, 2461, 540, 50, 1265,
	547, 47, 2396, 914, 548, 48, 2438, 2439, 3080, 539,
	49, 914, 914, 2440, 898, 914, 546, 7, 2819, 2444,
	2818, 2470, 130, 1658, 2447, 1153, 545, 6, 21, 1944,
	2476, 2419, 2451, 1718, 2500, 2915, 722, 2449, 677, 2427,
	1960, 2480, 2481, 2482, 544, 38, 20, 538, 37, 1944,
	2136, 1718, 2509, 1961, 2465, 2646, 2782, 2002, 724, 1997,
	1958, 2099, 2543, 2467, 2472, 1992, 906, 2744, 1968, 2953,
	2745, 1625, 1626, 571, 906, 906, 2756, 1209, 906, 1266,
	1503, 488, 2493, 2930, 1564, 1586, 1586, 2497, 2539, 2487,
	2489, 2490, 723, 2720, 899, 1977, 488, 1964, 959, 1269,
	2506, 19, 2499, 1995, 2747, 1567, 486, 1072, 15, 486,
	2535, 2567, 486, 2750, 1966, 951, 2989, 2793, 1092, 2137,
	2508, 1275, 1276, 1197, 486, 677, 678, 16, 2051, 2037,
	2029, 57, 2534, 2536, 486, 486, 486, 486, 951, 2417,
	2605, 1896, 590, 2585, 2547, 724, 2544, 1630, 1560, 2504,
	3091, 2418, 2569, 2549, 2550, 56, 2611, 130, 2429, 2552,
	55, 2584, 1275, 1276, 3106, 488, 488, 1345, 488, 12,
	2615, 1277, 50, 488, 2564, 47, 2664, 621, 2491, 48,
	1202, 959, 2603, 959, 49, 1201, 946, 1278, 2576, 2626,
	486, 7, 2212, 2213, 2609, 2568, 1275, 1276, 2610, 1564,
	1564, 6, 488, 2613, 2111, 2110, 2425, 2111, 2746, 2639,
	1171, 2650, 1277, 678, 2112, 2601, 1861, 1818, 1972, 38,
	1239, 621, 37, 1238, 2642, 2693, 2643, 2483, 1355, 1353,
	2638, 488, 2373, 2811, 959, 488, 488, 959, 488, 2654,
	1567, 2559, 1248, 1872, 1872, 2620, 488, 1247, 2621, 2623,
	2629, 2630, 1233, 679, 959, 1229, 1226, 2628, 1212, 1172,
	1633, 2640, 2555, 882, 688, 2873, 2651, 2674, 2652, 675,
	2644, 2321, 1586, 2406, 2407, 2408, 1668, 2409, 2410, 2679,
	1213, 1670, 2662, 2663, 908, 2278, 1917, 2633, 957, 2635,
	2671, 1045, 2983, 2699, 2189, 488, 2935, 2839, 486, 2684,
	1827, 1356, 53, 2581, 748, 2738, 2575, 2023, 1949, 2675,
	2022, 962, 1567, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
	1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
	1872, 1872, 1642, 1872, 772, 1850, 1719, 2656, 774, 2672,
	679, 1565, 777, 776, 721, 2057, 680, 775, 1566, 1380,
	1567, 1567, 773, 1563, 488, 1129, 2055, 665, 1646, 1789,
	2680, 1806, 2171, 1349, 959, 488, 740, 959, 1567, 1567,
	752, 488, 488, 488, 2667, 2709, 751, 914, 1804, 1159,
	739, 2283, 2391, 2806, 681, 1703, 1564, 2128, 1700, 488,
	2262, 2592, 503, 2209, 488, 1127, 488, 1878, 1870, 488,
	488, 488, 488, 488, 1866, 1567, 1254, 488, 488, 946,
	1334, 2056, 908, 959, 914, 1194, 2725, 946, 2757, 2585,
	2727, 2732, 2722, 2723, 2736, 488, 488, 2400, 2085, 1711,
	896, 895, 894, 680, 914, 3007, 3004, 2584, 2827, 946,
	906, 2783, 1636, 2105, 2794, 1327, 914, 744, 2263, 488,
	914, 2368, 2731, 1070, 2585, 914, 1326, 878, 488, 488,
	946, 946, 2803, 2944, 2777, 1184, 2585, 1183, 2735, 1182,
	2728, 681, 2584, 2792, 2306, 3101, 2805, 2586, 2952, 2589,
	2828, 3001, 170, 2802, 2584, 2804, 167, 169, 168, 2354,
	82, 601, 2769, 959, 2669, 34, 533, 2604, 33, 2774,
	109, 108, 2815, 1077, 2810, 914, 2726, 2831, 107, 2604,
	2814, 106, 2812, 2604, 2734, 105, 1949, 1428, 2604, 2781,
	104, 921, 2778, 486, 103, 2730, 102, 101, 2851, 2594,
	100, 2596, 488, 99, 959, 98, 2721, 2768, 488, 97,
	488, 96, 959, 488, 95, 2773, 94, 2836, 93, 92,
	91, 488, 90, 2846, 89, 88, 2838, 959, 908, 87,
	86, 85, 2779, 84, 617, 614, 81, 2881, 906, 1949,
	2860, 2852, 2853, 2809, 80, 31, 26, 113, 114, 25,
	77, 76, 2877, 2894, 2879, 2878, 2585, 29, 2836, 2858,
	18, 11, 2396, 17, 2760, 22, 1727, 2876, 488, 135,
	488, 134, 133, 946, 2584, 132, 2887, 131, 488, 14,
	13, 1727, 2855, 2816, 2817, 1567, 128, 2724, 129, 127,
	2585, 126, 2585, 125, 124, 123, 2911, 2585, 10, 2789,
	959, 8, 112, 9, 2822, 2898, 2859, 2431, 2584, 70,
	2584, 2798, 2912, 71, 27, 2584, 2917, 2910, 2642, 43,
	488, 914, 2761, 2916, 42, 41, 488, 472, 111, 161,
	2926, 160, 2770, 2771, 488, 159, 158, 154, 157, 155,
	156, 153, 122, 1052, 163, 486, 1502, 2856, 2947, 162,
	151, 1949, 148, 472, 1045, 2933, 2941, 150, 2791, 2940,
	914, 152, 2857, 488, 488, 149, 147, 1522, 1522, 164,
	488, 2929, 121, 120, 486, 119, 486, 118, 486, 117,
	2966, 946, 533, 116, 906, 2964, 488, 2949, 5, 2905,
	946, 946, 2, 1, 488, 914, 488, 0, 488, 0,
	0, 0, 0, 0, 2970, 0, 0, 914, 2986, 0,
	2971, 2968, 0, 2950, 2977, 2978, 488, 2979, 2961, 488,
	2996, 2976, 488, 2586, 959, 0, 2958, 0, 0, 1586,
	0, 621, 3009, 0, 472, 1052, 576, 3011, 3012, 3016,
	3014, 0, 0, 472, 1052, 0, 2998, 951, 486, 3015,
	0, 3017, 3003, 621, 0, 3022, 0, 0, 2586, 488,
	2957, 0, 0, 3020, 0, 2900, 0, 2902, 0, 0,
	2586, 2585, 2906, 0, 3036, 3035, 3034, 0, 1727, 1872,
	0, 0, 2975, 0, 488, 621, 2938, 3060, 3049, 2584,
	486, 3061, 488, 3062, 0, 472, 486, 0, 486, 0,
	486, 0, 486, 489, 486, 3068, 2956, 0, 488, 3066,
	3067, 3065, 0, 0, 1683, 0, 1684, 0, 1872, 0,
	2585, 0, 0, 3077, 486, 486, 486, 914, 3075, 3081,
	3074, 3082, 3009, 0, 3087, 3088, 0, 3084, 2584, 1567,
	0, 2914, 0, 1564, 208, 0, 3090, 1412, 0, 535,
	0, 0, 3097, 621, 0, 3098, 0, 914, 0, 0,
	0, 914, 0, 914, 1586, 0, 3105, 0, 914, 0,
	208, 0, 565, 3104, 0, 2157, 2158, 3109, 3110, 0,
	3111, 0, 0, 40, 3114, 3115, 0, 2751, 0, 0,
	2586, 0, 3120, 1567, 0, 3118, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 2080, 0, 0, 0, 0,
	0, 1416, 2748, 1872, 0, 2741, 40, 0, 0, 0,
	2604, 0, 0, 0, 2586, 564, 2586, 0, 2739, 0,
	44, 2586, 0, 2743, 0, 2057, 1586, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 3019, 0, 0, 0,
	2888, 2889, 0, 2749, 566, 0, 1414, 2980, 2081, 2981,
	0, 0, 0, 59, 568, 2235, 2236, 2237, 60, 1417,
	914, 1567, 0, 0, 1586, 1586, 0, 601, 1564, 533,
	0, 2742, 2997, 0, 0, 1462, 0, 2082, 1415, 0,
	0, 0, 1586, 1586, 921, 3063, 0, 568, 0, 0,
	0, 63, 1466, 0, 947, 2273, 0, 960, 960, 533,
	0, 533, 0, 0, 921, 0, 0, 0, 486, 0,
	0, 0, 0, 1952, 0, 0, 0, 0, 0, 1586,
	0, 486, 0, 2604, 63, 0, 0, 0, 0, 486,
	0, 0, 914, 1463, 0, 1275, 1276, 3059, 0, 0,
	1564, 486, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	1278, 472, 2008, 0, 0, 0, 0, 0, 0, 0,
	2744, 0, 0, 2745, 2019, 0, 0, 1052, 1564, 1564,
	0, 914, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 2586, 1564, 1564, 1467, 0,
	0, 1952, 0, 533, 0, 486, 0, 2747, 486, 0,
	486, 565, 486, 0, 486, 486, 2750, 951, 139, 66,
	0, 67, 40, 0, 64, 0, 0, 0, 0, 1952,
	0, 2272, 0, 1564, 0, 0, 44, 0, 0, 171,
	0, 0, 0, 0, 2586, 0, 0, 0, 0, 0,
	567, 139, 66, 110, 67, 0, 1468, 1469, 0, 0,
	0, 0, 1283, 0, 564, 1464, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 110, 1305, 1306, 1307,
	576, 0, 1465, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 568, 0, 0, 0, 60, 173, 0,
	0, 2746, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 2456, 2457, 0, 1586,
	0, 486, 166, 0, 0, 0, 1298, 0, 0, 1052,
	63, 1052, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 536, 0, 0, 0, 165, 0, 0,
	0, 0, 486, 486, 486, 166, 486, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 138, 0, 0, 0,
	0, 0, 0, 0, 947, 947, 2510, 2511, 2512, 2513,
	2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523,
	2524, 2525, 2526, 2527, 2528, 0, 2532, 0, 0, 1299,
	0, 0, 0, 947, 947, 0, 0, 0, 0, 0,
	947, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	64, 0, 0, 1564, 0, 2212, 2213, 0, 2230, 2231,
	2232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2681, 0, 0, 0, 139, 66, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 567,
	0, 0, 110, 2227, 0, 0, 0, 0, 2212, 2213,
	0, 2230, 2231, 2232, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 173, 0, 2463, 0, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1277,
	0, 0, 0, 0, 0, 947, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 2227, 0, 0, 0,
	921, 0, 2218, 165, 0, 0, 727, 0, 921, 921,
	0, 166, 921, 1586, 0, 0, 0, 533, 0, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 533, 533,
	0, 0, 138, 533, 0, 0, 0, 1300, 1301, 1302,
	1303, 486, 1952, 2302, 0, 0, 1283, 1952, 2233, 0,
	2302, 851, 0, 0, 0, 0, 0, 1952, 2302, 1952,
	2302, 2302, 0, 0, 0, 2218, 0, 1586, 1315, 1325,
	486, 1305, 1306, 1307, 0, 0, 2228, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 486,
	0, 1275, 1276, 951, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 2233, 0, 1313, 0, 0, 1278, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 1522, 1564, 1522, 0,
	486, 0, 0, 486, 0, 0, 0, 0, 486, 2228,
	486, 1277, 0, 0, 951, 1586, 0, 0, 0, 1952,
	0, 533, 0, 0, 0, 0, 0, 0, 1952, 2229,
	0, 2212, 2213, 0, 2230, 2231, 2232, 0, 0, 0,
	0, 0, 0, 0, 2415, 1052, 0, 1275, 1276, 0,
	0, 1564, 0, 912, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 1278, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 2227,
	0, 0, 2229, 2448, 0, 0, 1316, 1277, 0, 482,
	0, 0, 0, 0, 0, 1297, 2212, 2213, 486, 2230,
	2231, 2232, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 948, 0, 2462, 961, 961, 0, 0, 1564,
	0, 0, 2224, 2225, 2226, 0, 0, 0, 0, 2223,
	2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2218, 0,
	2495, 0, 1298, 0, 2227, 1300, 1301, 1302, 1303, 0,
	0, 0, 0, 1314, 1283, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 2843, 0, 0, 2224, 2225, 2226, 0, 1305,
	1306, 1307, 2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219,
	2220, 0, 0, 0, 0, 1054, 1056, 1059, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2868, 2228, 2218, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 0, 921, 1299, 0, 960, 1298, 0,
	533, 929, 0, 0, 0, 0, 955, 0, 960, 1275,
	1276, 0, 0, 0, 0, 533, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2233,
	0, 2583, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 2228, 0, 1277,
	0, 0, 0, 1428, 1304, 2229, 0, 1428, 1158, 0,
	0, 0, 1428, 0, 1162, 0, 2932, 0, 0, 1275,
	1276, 1299, 0, 0, 1952, 1522, 0, 1522, 0, 0,
	0, 0, 486, 0, 0, 0, 947, 0, 208, 0,
	0, 0, 727, 0, 1278, 947, 727, 208, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 0, 0, 0, 0, 0,
	0, 1952, 921, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1283, 0, 0, 960,
	2229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 951, 486, 0, 486, 0, 208,
	0, 1305, 1306, 1307, 0, 486, 0, 0, 2224, 2225,
	2226, 0, 948, 948, 0, 2223, 2221, 2222, 2214, 2215,
	2216, 2217, 2219, 2220, 0, 0, 749, 74, 0, 0,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	0, 948, 948, 0, 0, 0, 1283, 0, 948, 0,
	1298, 0, 0, 0, 2700, 0, 1328, 1329, 1330, 1331,
	1332, 960, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 1350,
	0, 0, 0, 2224, 2225, 2226, 0, 74, 0, 0,
	2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 533, 0, 0, 0, 0, 0,
	1952, 2302, 1952, 1299, 0, 960, 0, 0, 2212, 2213,
	1068, 2230, 2231, 2232, 0, 0, 1086, 2583, 1052, 0,
	0, 0, 0, 1952, 0, 2302, 0, 704, 1052, 1052,
	486, 1952, 2302, 948, 0, 717, 486, 486, 1106, 1106,
	1106, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2583, 0, 1052, 2019, 0, 0, 0, 0,
	0, 0, 0, 0, 2583, 0, 2227, 0, 0, 0,
	909, 74, 0, 1299, 0, 0, 0, 960, 1952, 0,
	0, 0, 0, 0, 0, 0, 0, 2415, 2415, 0,
	1405, 1405, 1405, 960, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 2218, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 0, 0, 0, 0, 0, 1952, 0, 2302,
	0, 0, 2862, 0, 0, 0, 0, 0, 0, 0,
	486, 2233, 0, 0, 2583, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 947, 947, 0, 0, 947, 0, 2228,
	0, 0, 0, 0, 1428, 0, 0, 0, 2583, 0,
	2583, 0, 0, 0, 0, 2583, 0, 486, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2495,
	0, 0, 0, 0, 0, 533, 0, 0, 0, 0,
	0, 0, 2229, 2862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 1952, 2302, 0, 0, 0, 1428, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2302, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 1052, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2994, 0, 0, 1052, 0,
	0, 486, 0, 0, 0, 0, 727, 727, 0, 0,
	0, 0, 0, 0, 0, 2224, 2225, 2226, 0, 2583,
	0, 0, 2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219,
	2220, 0, 0, 0, 0, 0, 0, 0, 2495, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 948, 0,
	0, 0, 0, 717, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 961, 0, 2583, 0,
	0, 1952, 0, 0, 0, 0, 0, 1701, 0, 1706,
	0, 0, 0, 0, 0, 1713, 0, 2862, 0, 0,
	0, 0, 0, 0, 0, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	0, 1769, 0, 1771, 1772, 1773, 1774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1797, 0, 948, 0, 0, 0, 0, 1341,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	1841, 1842, 1843, 1844, 1845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 1500,
	0, 1868, 0, 1880, 960, 0, 0, 0, 1886, 1891,
	0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 1529, 0, 0, 0, 704, 1278, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	1340, 0, 1277, 0, 947, 0, 0, 1346, 0, 0,
	1297, 0, 0, 960, 0, 0, 0, 1294, 0, 961,
	0, 0, 0, 960, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1623, 0, 0, 0, 0, 0, 947, 947,
	947, 2010, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 1667, 0, 0, 0, 0, 0,
	1673, 947, 1674, 961, 1675, 0, 1676, 0, 1677, 0,
	0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1686, 1086,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 1427, 961, 0, 0, 1432, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 961, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 948, 948, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 1938, 0, 0, 0, 0, 0, 0, 0,
	2141, 2142, 0, 0, 0, 0, 2147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 2160, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 0, 0, 2167, 955,
	0, 0, 0, 0, 2174, 0, 0, 0, 0, 2179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2193, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 960, 0, 0, 947,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 2060,
	0, 0, 1106, 0, 1106, 0, 1106, 0, 955, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1891, 1891, 1891, 0, 960, 0, 0,
	960, 0, 0, 0, 0, 1405, 0, 0, 0, 0,
	0, 0, 0, 2268, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2324,
	0, 704, 0, 0, 704, 704, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2124, 955, 2126, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	960, 0, 1787, 0, 0, 0, 0, 0, 0, 2139,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	1340, 0, 2389, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 960, 0, 0, 0,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 727, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 909, 961, 947, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2450, 0, 0, 0,
	1713, 1432, 0, 0, 0, 0, 2454, 0, 0, 2455,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	74, 2460, 0, 0, 0, 0, 0, 0, 0, 0,
	2468, 0, 0, 0, 0, 0, 0, 0, 0, 2474,
	0, 0, 948, 2268, 0, 0, 74, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 961, 2501, 2502, 2503, 960, 961, 0, 0, 2505,
	0, 0, 0, 0, 0, 0, 2507, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 948, 948, 948, 0,
	0, 0, 0, 0, 0, 74, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2537,
	2538, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 2299, 947, 74, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2371, 0, 0, 0, 961, 0,
	0, 0, 2379, 0, 2381, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 947, 74, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2653,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2452, 0, 2683, 0, 0, 0, 2686, 2687,
	0, 0, 2689, 0, 0, 1787, 0, 0, 0, 0,
	0, 2691, 0, 0, 0, 2694, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 2701, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 2714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 961, 0, 961, 0, 0, 948, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 2758, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 0, 909, 909, 0, 0, 909,
	0, 1300, 1301, 1302, 1303, 961, 0, 0, 961, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 2832, 2833, 0,
	0, 0, 0, 0, 0, 0, 2627, 1313, 0, 0,
	0, 0, 74, 0, 1298, 0, 0, 0, 0, 0,
	0, 2842, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 2850, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 717, 0, 961, 2673,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 2676,
	1304, 2886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1275, 1276,
	0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0,
	948, 0, 0, 0, 961, 0, 1311, 0, 948, 0,
	1316, 0, 0, 1278, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 948, 948, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2943, 0, 0, 2946, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 1314, 0, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 2705, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 2772, 961, 0, 0, 0, 0,
	1086, 0, 0, 961, 0, 0, 0, 1315, 1325, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 74, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 1313, 0, 0, 0, 0, 0, 0, 1298,
	3033, 3033, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 1275, 1276, 3050, 0,
	0, 0, 1318, 1319, 1320, 0, 0, 0, 0, 1312,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1324, 0, 3033, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 1304, 1277, 0, 0, 0,
	0, 1311, 0, 0, 1297, 0, 0, 0, 1278, 0,
	0, 1324, 1299, 0, 2869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 1316, 0, 3033, 0, 0,
	0, 1297, 948, 0, 0, 0, 0, 0, 1294, 909,
	0, 948, 948, 0, 0, 0, 0, 0, 74, 0,
	0, 2907, 0, 2909, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 1325, 0, 1305, 1306,
	1307, 1300, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	1283, 0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 2198,
	1313, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 2962, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 2982, 0, 0, 0, 909, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 1312, 3000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 2197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1787, 256, 257, 258, 259, 963, 260, 964, 965, 966,
	967, 214, 968, 969, 970, 971, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 972, 267, 268, 269,
	270, 271, 272, 973, 974, 219, 220, 221, 975, 273,
	222, 976, 922, 977, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 978, 283, 0, 284, 285, 979,
	853, 286, 287, 288, 980, 981, 983, 982, 984, 985,
	986, 289, 290, 490, 291, 292, 293, 223, 224, 987,
	294, 988, 295, 989, 296, 990, 991, 297, 298, 992,
	299, 300, 993, 0, 994, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 995, 854, 996, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	997, 316, 998, 999, 855, 317, 1000, 318, 229, 1001,
	230, 1002, 319, 320, 321, 322, 323, 324, 231, 232,
	857, 1003, 326, 0, 0, 0, 1004, 325, 327, 334,
	1005, 856, 328, 233, 330, 329, 331, 332, 333, 234,
	1006, 235, 1007, 335, 858, 859, 336, 337, 338, 860,
	339, 340, 0, 0, 341, 342, 343, 1008, 345, 344,
	1009, 236, 861, 346, 347, 862, 1010, 348, 349, 1011,
	1012, 350, 0, 351, 924, 923, 352, 353, 355, 356,
	354, 863, 357, 358, 360, 359, 1013, 1014, 864, 1015,
	237, 361, 238, 362, 363, 1016, 364, 365, 1017, 1018,
	366, 367, 1019, 1020, 368, 239, 865, 369, 866, 240,
	370, 371, 372, 373, 374, 375, 376, 1021, 377, 241,
	378, 242, 379, 1022, 380, 381, 382, 383, 384, 243,
	385, 386, 1023, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 1024, 399, 867, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 1025, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 1026, 424, 405, 406, 425, 868, 426,
	245, 427, 428, 1027, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 1028, 439, 440, 1029,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	1030, 247, 248, 249, 449, 1031, 1032, 450, 451, 250,
	251, 1033, 452, 453, 454, 455, 1034, 1035, 456, 457,
	458, 460, 1036, 461, 1037, 459, 462, 463, 464, 252,
	253, 1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 1922, 0, 0, 0, 0,
	0, 0, 0, 0, 1923, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2729,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2837,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2477,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2469,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2357,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1810,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 1817, 0, 770, 758, 759, 756,
	757, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 1814, 260, 0, 0,
	0, 0, 806, 750, 0, 0, 0, 261, 262, 263,
	215, 825, 790, 826, 778, 812, 827, 0, 267, 780,
	779, 270, 271, 272, 753, 805, 828, 829, 221, 0,
	273, 810, 0, 795, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 798, 796, 797, 802, 800,
	799, 801, 289, 290, 490, 291, 813, 293, 830, 831,
	736, 294, 0, 295, 0, 296, 1815, 0, 814, 298,
	0, 299, 300, 0, 0, 0, 741, 304, 301, 302,
	305, 308, 303, 309, 310, 832, 833, 765, 854, 0,
	0, 0, 0, 0, 311, 312, 834, 815, 816, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 835,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 807,
	809, 857, 0, 789, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 836, 793, 817, 818, 819, 820,
	837, 0, 794, 0, 335, 858, 859, 336, 337, 338,
	860, 821, 822, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 838, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 738, 737, 352, 353, 355,
	782, 354, 863, 357, 358, 360, 359, 733, 0, 864,
	766, 808, 361, 839, 362, 363, 0, 791, 792, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	840, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	841, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	842, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 742, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 783, 784, 785,
	786, 416, 422, 423, 803, 424, 405, 406, 425, 868,
	426, 843, 787, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 823, 433, 434, 435, 844, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 781,
	448, 0, 845, 846, 847, 824, 0, 0, 450, 451,
	848, 849, 764, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 804, 461, 0, 788, 462, 463, 464,
	252, 850, 1813, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 734, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 730,
	731, 1816, 0, 0, 0, 0, 0, 0, 743, 1811,
	0, 0, 0, 718, 746, 770, 758, 759, 756, 757,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 171, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 173,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 1133,
	850, 0, 0, 465, 254, 0, 0, 0, 165, 466,
	467, 255, 468, 469, 470, 734, 166, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	770, 758, 759, 756, 757, 747, 0, 1343, 0, 0,
	0, 0, 0, 746, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 171, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 173, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 1133, 850, 0, 0, 465, 254,
	0, 0, 0, 165, 466, 467, 255, 468, 469, 470,
	734, 166, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 770, 758, 759, 756, 757,
	747, 0, 1343, 0, 0, 0, 0, 0, 746, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 1887, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 1892, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	1888, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 1889, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	770, 758, 759, 756, 757, 747, 0, 743, 0, 0,
	0, 0, 0, 746, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 2645, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 1406, 770, 758, 759, 756,
	757, 747, 743, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 806, 750, 0, 0, 0, 261, 262, 263,
	215, 825, 790, 826, 778, 812, 827, 0, 267, 780,
	779, 270, 271, 272, 753, 805, 828, 829, 221, 0,
	273, 810, 0, 795, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 798, 796, 797, 802, 800,
	799, 801, 289, 290, 490, 291, 813, 293, 830, 831,
	736, 294, 0, 295, 0, 296, 0, 0, 814, 298,
	0, 299, 300, 0, 0, 0, 741, 304, 301, 302,
	305, 308, 303, 309, 310, 832, 833, 765, 854, 0,
	0, 0, 0, 0, 311, 312, 834, 815, 816, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 835,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 807,
	809, 857, 0, 789, 0, 0, 0, 1715, 325, 327,
	334, 0, 856, 328, 836, 793, 817, 818, 819, 820,
	837, 0, 794, 0, 335, 858, 859, 336, 337, 338,
	860, 821, 822, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 838, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 738, 737, 352, 353, 355,
	782, 354, 863, 357, 358, 360, 359, 733, 0, 864,
	766, 808, 361, 839, 362, 363, 0, 791, 792, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	840, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	841, 378, 242, 379, 1714, 380, 381, 382, 383, 384,
	842, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 742, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 783, 784, 785,
	786, 416, 422, 423, 803, 424, 405, 406, 425, 868,
	426, 843, 787, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 823, 433, 434, 435, 844, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 781,
	448, 0, 845, 846, 847, 824, 0, 0, 450, 451,
	848, 849, 764, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 804, 461, 0, 788, 462, 463, 464,
	252, 850, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 734, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 726, 746, 770, 758, 759, 756, 757,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 728, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	770, 758, 759, 756, 757, 747, 0, 743, 0, 0,
	0, 0, 0, 746, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 2479, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 770, 758, 759, 756, 757,
	747, 0, 743, 0, 0, 0, 0, 0, 746, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 728, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 2289, 746, 770, 758, 759, 756, 757, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 770,
	758, 759, 756, 757, 747, 0, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 1406, 770, 758, 759, 756, 757,
	747, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 1892, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 1926, 746, 770, 758, 759, 756, 757, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 1879, 746, 770, 758, 759, 756, 757, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 806,
	750, 0, 0, 0, 261, 262, 263, 215, 825, 790,
	826, 778, 812, 827, 0, 267, 780, 779, 270, 271,
	272, 753, 805, 828, 829, 221, 0, 273, 810, 0,
	795, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 798, 796, 797, 802, 800, 799, 801, 289,
	290, 490, 291, 813, 293, 830, 831, 736, 294, 0,
	295, 0, 296, 0, 0, 814, 298, 0, 299, 300,
	0, 0, 0, 741, 304, 301, 302, 305, 308, 303,
	309, 310, 832, 833, 765, 854, 0, 0, 0, 0,
	0, 311, 312, 834, 815, 816, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 835, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 807, 809, 857, 0,
	789, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 836, 793, 817, 818, 819, 820, 837, 0, 794,
	0, 335, 858, 859, 336, 337, 338, 860, 821, 822,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 838,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 738, 737, 352, 353, 355, 782, 354, 863,
	357, 358, 360, 359, 733, 0, 864, 766, 808, 361,
	839, 362, 363, 0, 791, 792, 0, 0, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 840, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 841, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 842, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 742, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 783, 784, 785, 786, 416, 422,
	423, 803, 424, 405, 406, 425, 868, 426, 843, 787,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 823,
	433, 434, 435, 844, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 781, 448, 0, 845,
	846, 847, 824, 0, 0, 450, 451, 848, 849, 764,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	804, 461, 0, 788, 462, 463, 464, 252, 850, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 734, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 0, 730, 731, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	1867, 746, 770, 758, 759, 756, 757, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 806, 750,
	0, 0, 0, 261, 262, 263, 215, 825, 790, 826,
	778, 812, 827, 0, 267, 780, 779, 270, 271, 272,
	753, 805, 828, 829, 221, 0, 273, 810, 0, 795,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 798, 796, 797, 802, 800, 799, 801, 289, 290,
	490, 291, 813, 293, 830, 831, 736, 294, 0, 295,
	0, 296, 0, 0, 814, 298, 0, 299, 300, 0,
	0, 0, 741, 304, 301, 302, 305, 308, 303, 309,
	310, 832, 833, 765, 854, 0, 0, 0, 0, 0,
	311, 312, 834, 815, 816, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 835, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 807, 809, 857, 0, 789,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	836, 793, 817, 818, 819, 820, 837, 0, 794, 0,
	335, 858, 859, 336, 337, 338, 860, 821, 822, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 838, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 738, 737, 352, 353, 355, 782, 354, 863, 357,
	358, 360, 359, 733, 0, 864, 766, 808, 361, 839,
	362, 363, 0, 791, 792, 0, 0, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 840, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 841, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 842, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	742, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 783, 784, 785, 786, 416, 422, 423,
	803, 424, 405, 406, 425, 868, 426, 843, 787, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 823, 433,
	434, 435, 844, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 781, 448, 0, 845, 846,
	847, 824, 0, 0, 450, 451, 848, 849, 764, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 804,
	461, 0, 788, 462, 463, 464, 252, 850, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 734, 0, 0, 0, 0, 0, 0, 0,
	732, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 1865,
	746, 770, 758, 759, 756, 757, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 806, 750, 0,
	0, 0, 261, 262, 263, 215, 825, 790, 826, 778,
	812, 827, 0, 267, 780, 779, 270, 271, 272, 753,
	805, 828, 829, 221, 0, 273, 810, 0, 795, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	798, 796, 797, 802, 800, 799, 801, 289, 290, 490,
	291, 813, 293, 830, 831, 736, 294, 0, 295, 0,
	296, 0, 0, 814, 298, 0, 299, 300, 0, 0,
	0, 741, 304, 301, 302, 305, 308, 303, 309, 310,
	832, 833, 765, 854, 0, 0, 0, 0, 0, 311,
	312, 834, 815, 816, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 835, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 807, 809, 857, 0, 789, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 836,
	793, 817, 818, 819, 820, 837, 0, 794, 0, 335,
	858, 859, 336, 337, 338, 860, 821, 822, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 838, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	738, 737, 352, 353, 355, 782, 354, 863, 357, 358,
	360, 359, 733, 0, 864, 766, 808, 361, 839, 362,
	363, 0, 791, 792, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 840, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 841, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 842, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 742,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 783, 784, 785, 786, 416, 422, 423, 803,
	424, 405, 406, 425, 868, 426, 843, 787, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 823, 433, 434,
	435, 844, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 781, 448, 0, 845, 846, 847,
	824, 0, 0, 450, 451, 848, 849, 764, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 804, 461,
	0, 788, 462, 463, 464, 252, 850, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 734, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 730, 731, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 1863, 746,
	770, 758, 759, 756, 757, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 1860, 746, 1852,
	758, 759, 756, 757, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	1855, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 1856, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	1857, 1854, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 1858, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 1853, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 1849, 746, 1852, 758,
	759, 756, 757, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 806, 750, 0, 0, 0, 261,
	262, 263, 215, 825, 790, 826, 778, 812, 827, 0,
	267, 780, 779, 270, 271, 272, 753, 805, 828, 829,
	221, 0, 273, 810, 0, 795, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 798, 796, 797,
	802, 800, 799, 801, 289, 290, 490, 291, 813, 1855,
	830, 831, 736, 294, 0, 295, 0, 296, 0, 0,
	814, 298, 0, 299, 300, 0, 0, 0, 741, 304,
	301, 302, 305, 308, 303, 309, 310, 832, 833, 765,
	854, 0, 0, 0, 0, 0, 311, 312, 834, 815,
	816, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 835, 0, 230, 0, 319, 320, 1856, 322, 323,
	324, 807, 809, 857, 0, 789, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 836, 793, 817, 818,
	819, 820, 837, 0, 794, 0, 335, 858, 859, 336,
	337, 338, 860, 821, 822, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 838, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 738, 737, 1857,
	1854, 355, 782, 354, 863, 357, 358, 360, 359, 733,
	0, 864, 766, 808, 361, 839, 362, 363, 0, 791,
	792, 0, 0, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 840, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 841, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 842, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 742, 404, 0, 408,
	409, 410, 411, 412, 413, 1858, 0, 420, 421, 783,
	784, 785, 786, 416, 422, 423, 803, 424, 405, 406,
	425, 868, 426, 843, 787, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 823, 433, 434, 435, 844, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 781, 448, 0, 845, 846, 847, 824, 0, 0,
	450, 451, 848, 849, 764, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 804, 461, 0, 788, 462,
	463, 464, 252, 850, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 1853, 470, 734, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 730, 731, 770, 758, 759, 756, 757, 747, 0,
	743, 0, 0, 0, 0, 0, 746, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 806,
	750, 0, 0, 0, 261, 262, 263, 215, 825, 790,
	826, 778, 812, 827, 0, 267, 780, 779, 270, 271,
	272, 753, 805, 828, 829, 221, 0, 273, 810, 0,
	795, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 798, 796, 797, 802, 800, 799, 801, 289,
	290, 490, 291, 813, 293, 830, 831, 736, 294, 0,
	295, 0, 296, 0, 0, 814, 298, 0, 299, 300,
	0, 0, 0, 741, 304, 301, 302, 305, 308, 303,
	309, 310, 832, 833, 765, 854, 0, 0, 0, 0,
	0, 311, 312, 834, 815, 816, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 835, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 807, 809, 857, 0,
	789, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 836, 793, 817, 818, 819, 820, 837, 0, 794,
	0, 335, 858, 859, 336, 337, 338, 860, 821, 822,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 838,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 738, 737, 352, 353, 355, 782, 354, 863,
	357, 358, 360, 359, 733, 0, 864, 766, 808, 361,
	839, 362, 363, 0, 791, 792, 0, 0, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 840, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 841, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 842, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 742, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 783, 784, 785, 786, 416, 422,
	423, 803, 424, 405, 406, 425, 868, 426, 843, 787,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 823,
	433, 434, 435, 844, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 781, 448, 0, 845,
	846, 847, 824, 0, 0, 450, 451, 848, 849, 764,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	804, 461, 0, 788, 462, 463, 464, 252, 850, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 734, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 0, 730, 731, 0, 0,
	0, 0, 0, 1348, 0, 743, 0, 0, 0, 0,
	0, 746, 770, 758, 759, 756, 757, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 1702, 260, 0, 0, 0, 0, 806, 750,
	0, 0, 0, 261, 262, 263, 215, 825, 790, 826,
	778, 812, 827, 0, 267, 780, 779, 270, 271, 272,
	753, 805, 828, 829, 221, 0, 273, 810, 0, 795,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 798, 796, 797, 802, 800, 799, 801, 289, 290,
	490, 291, 813, 293, 830, 831, 736, 294, 0, 295,
	0, 296, 0, 0, 814, 298, 0, 299, 300, 0,
	0, 0, 741, 304, 301, 302, 305, 308, 303, 309,
	310, 832, 833, 765, 854, 0, 0, 0, 0, 0,
	311, 312, 834, 815, 816, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 835, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 807, 809, 857, 0, 789,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	836, 793, 817, 818, 819, 820, 837, 0, 794, 0,
	335, 858, 859, 336, 337, 338, 860, 821, 822, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 838, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 738, 737, 352, 353, 355, 782, 354, 863, 357,
	358, 360, 359, 733, 0, 864, 766, 808, 361, 839,
	362, 363, 0, 791, 792, 0, 0, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 840, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 841, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 842, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	742, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 783, 784, 785, 786, 416, 422, 423,
	803, 424, 405, 406, 425, 868, 426, 843, 787, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 823, 433,
	434, 435, 844, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 781, 448, 0, 845, 846,
	847, 824, 0, 0, 450, 451, 848, 849, 764, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 804,
	461, 0, 788, 462, 463, 464, 252, 850, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 734, 0, 0, 0, 0, 0, 0, 0,
	732, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 1061,
	746, 770, 758, 759, 756, 757, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 806, 750, 0,
	0, 0, 261, 262, 263, 215, 825, 790, 826, 778,
	812, 827, 0, 267, 780, 779, 270, 271, 272, 753,
	805, 828, 829, 221, 0, 273, 810, 0, 795, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	798, 796, 797, 802, 800, 799, 801, 289, 290, 490,
	291, 813, 293, 830, 831, 736, 294, 0, 295, 0,
	296, 0, 0, 814, 298, 0, 299, 300, 0, 0,
	0, 741, 304, 301, 302, 305, 308, 303, 309, 310,
	832, 833, 765, 854, 0, 0, 0, 0, 0, 311,
	312, 834, 815, 816, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 835, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1060, 809, 857, 0, 789, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 836,
	793, 817, 818, 819, 820, 837, 0, 794, 0, 335,
	858, 859, 336, 337, 338, 860, 821, 822, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 838, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	738, 737, 352, 353, 355, 782, 354, 863, 357, 358,
	360, 359, 733, 0, 864, 766, 808, 361, 839, 362,
	363, 0, 791, 792, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 840, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 841, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 842, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 742,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 783, 784, 785, 786, 416, 422, 423, 803,
	424, 405, 406, 425, 868, 426, 843, 787, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 823, 433, 434,
	435, 844, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 781, 448, 0, 845, 846, 847,
	824, 0, 0, 450, 451, 848, 849, 764, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 804, 461,
	0, 788, 462, 463, 464, 252, 850, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 734, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 730, 731, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 1058, 746,
	770, 758, 759, 756, 757, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 1057, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 1055, 746, 770,
	758, 759, 756, 757, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 770, 758, 759, 756, 757, 747,
	0, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 770,
	758, 759, 756, 757, 747, 0, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 3032, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 3031, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 770, 758, 759, 756, 757, 747,
	0, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 3030, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 3032, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 3031, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 770,
	758, 759, 756, 757, 747, 0, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 0, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 924, 923,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	0, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 1877, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 770,
	758, 759, 756, 757, 747, 0, 0, 1875, 0, 0,
	0, 0, 1873, 1874, 0, 256, 257, 258, 259, 0,
	260, 1876, 0, 0, 0, 806, 750, 746, 0, 0,
	261, 262, 263, 0, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 3032, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 0, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 0, 0,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 0, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 0, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 3031, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 718, 0, 920, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 256, 257, 258, 259, 746, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 922, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 0, 915, 916, 0,
	918, 917, 919, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 832, 833, 0, 854,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	835, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 857, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 858, 859, 336, 337,
	338, 860, 339, 340, 0, 0, 341, 342, 343, 907,
	345, 344, 0, 838, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 924, 923, 352, 353,
	355, 356, 354, 863, 357, 358, 360, 359, 0, 0,
	864, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 913, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 840, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 841, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 171, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	868, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 844, 0, 439,
	440, 173, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 848, 849, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 1133, 253, 0, 0, 465, 254, 0, 0, 920,
	165, 466, 467, 255, 468, 469, 470, 0, 166, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 904, 0, 1434,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 922, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 0, 915,
	916, 0, 918, 917, 919, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	0, 854, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 907, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	0, 0, 864, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 913, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 171, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 844,
	0, 439, 440, 173, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 848, 849, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 1133, 253, 0, 0, 465, 254, 0,
	0, 920, 165, 466, 467, 255, 468, 469, 470, 0,
	166, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 806, 0, 904,
	0, 1434, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	805, 219, 220, 221, 0, 273, 810, 0, 795, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	798, 796, 797, 802, 800, 799, 801, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	832, 833, 0, 854, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 835, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 807, 809, 857, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	858, 859, 336, 337, 338, 860, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 838, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	924, 923, 352, 353, 355, 356, 354, 863, 357, 358,
	360, 359, 0, 0, 864, 0, 808, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 840, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 841, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 803,
	424, 405, 406, 425, 868, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 844, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 848, 849, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 804, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 2261, 0, 920, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 2582, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	922, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 0, 915, 916, 0, 918, 917, 919, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 832, 833, 0, 854, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 835, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 857, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 858, 859, 336, 337, 338, 860, 339, 340,
	0, 0, 341, 342, 343, 907, 345, 344, 0, 838,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 924, 923, 352, 353, 355, 356, 354, 863,
	357, 358, 360, 359, 0, 0, 864, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 913, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 840, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 841, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 868, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 844, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 848, 849, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 903, 0, 920, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 904, 0, 911, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 922, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 0, 915, 916, 0, 918, 917,
	919, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 0, 854, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	857, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 858, 859, 336, 337, 338, 860,
	339, 340, 0, 0, 341, 342, 343, 907, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 924, 923, 352, 353, 355, 356,
	354, 863, 357, 358, 360, 359, 0, 0, 864, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 913,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 868, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 848,
	849, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 0, 0, 920, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 904, 0, 911, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 922, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 0, 915, 916, 0,
	918, 917, 919, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 832, 833, 0, 854,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	835, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 857, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 858, 859, 336, 337,
	338, 860, 339, 340, 0, 0, 341, 342, 343, 907,
	345, 344, 0, 838, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 924, 923, 352, 353,
	355, 356, 354, 863, 357, 358, 360, 359, 0, 0,
	864, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 913, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 840, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 841, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	868, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 844, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 848, 849, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 920,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 904, 0, 911,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 922, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 0, 915,
	916, 0, 918, 917, 919, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	0, 854, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	0, 0, 864, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 848, 849, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1130,
	0, 945, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 1338, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 922, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 854, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 857, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	858, 859, 336, 337, 338, 860, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	924, 923, 352, 353, 355, 356, 354, 863, 357, 358,
	360, 359, 0, 0, 864, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 171,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 868, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 173, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 1133, 253, 0, 0, 465,
	254, 718, 0, 487, 165, 466, 467, 255, 468, 469,
	470, 0, 166, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 138, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 171, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 173, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 1133, 253, 0,
	0, 465, 254, 0, 0, 0, 165, 466, 467, 255,
	468, 469, 470, 0, 166, 770, 758, 759, 756, 757,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 138, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 0, 0, 828, 829, 221, 0, 273,
	222, 0, 922, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 813, 293, 830, 831, 0,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 924, 923, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 0, 0, 864, 766,
	237, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 0, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 250,
	251, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 788, 462, 463, 464, 252,
	850, 487, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 2058, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 0, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 2494, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 1204, 0, 945, 944, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 1438, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 922, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 854,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 857, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 858, 859, 336, 337,
	338, 860, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 924, 923, 352, 353,
	355, 356, 354, 863, 357, 358, 360, 359, 0, 0,
	864, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	868, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 1126, 0, 945,
	944, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 922, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 854, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1125, 232, 857, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	0, 0, 864, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 1122,
	0, 945, 944, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 922, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 854, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1121, 232, 857, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	858, 859, 336, 337, 338, 860, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	924, 923, 352, 353, 355, 356, 354, 863, 357, 358,
	360, 359, 0, 0, 864, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 868, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 1083, 0, 945, 944, 0, 0, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	922, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 854, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1082, 232, 857, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 858, 859, 336, 337, 338, 860, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 924, 923, 352, 353, 355, 356, 354, 863,
	357, 358, 360, 359, 0, 0, 864, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 868, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 1080, 0, 945, 944, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 922, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 854, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1079, 232,
	857, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 858, 859, 336, 337, 338, 860,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 924, 923, 352, 353, 355, 356,
	354, 863, 357, 358, 360, 359, 0, 0, 864, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 868, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 938, 0, 945, 944, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 922, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 854,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	940, 232, 857, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 858, 859, 336, 337,
	338, 860, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 924, 923, 352, 353,
	355, 356, 354, 863, 357, 358, 360, 359, 0, 0,
	864, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	868, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 945, 944, 465, 254, 0, 942, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	922, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 854, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 857, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 858, 859, 336, 337, 338, 860, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 924, 923, 352, 353, 355, 356, 354, 863,
	357, 358, 360, 359, 0, 0, 864, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 868, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 945,
	944, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 922, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 854, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	0, 0, 864, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 945, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 922, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 854, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	857, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 858, 859, 336, 337, 338, 860,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 924, 923, 352, 353, 355, 356,
	354, 863, 357, 358, 360, 359, 0, 0, 864, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 868, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 587, 0, 207, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 213, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 212, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 206, 0, 207,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 473, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 213, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 212, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 207, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 473, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 213, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 1671,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 212,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 207, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	473, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 213,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 212, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 487, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 473, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 487, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 473, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 1953, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 1950, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 2028, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	1956, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 2026, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 2025, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 1955, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 2027, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 487,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 1953, 273, 222, 0, 0, 1947, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 1950, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 1956, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1946, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 1955, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 1954, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 593,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	592, 574, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 577, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 578, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 579,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 573, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 574, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 577, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 578, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 579, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 487,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 577, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	578, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 579, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1101,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 913, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 933, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 935, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 913, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 930, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 932, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 913,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 926, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	928, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 913, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 510, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 509,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 508, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 487, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 1933, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 487, 2416, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 487, 2416, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 2413, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 487, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 913, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1691, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1689, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1687, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 487, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 1664, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1624, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1622, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 619,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 1177, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 620, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 616, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 615, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1520, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1519, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 619, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 1177, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	620, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 616, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 615, 248, 249, 449, 0, 0, 450, 1178, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 619, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 609, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 620, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	616, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 1151, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 615, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1119, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1118, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1115,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1114, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1112, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1111, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1109, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1108, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1105, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	1104, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 487, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 1093, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1091, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1090, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1085, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1076, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1075, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1071,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1067, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1069, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 952, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 954, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 949, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 619, 0, 487,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 609, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 608, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 620, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 610, 404, 0,
	408, 409, 616, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 611, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 615, 248, 249, 449, 0,
	0, 450, 613, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 599,
	0, 487, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 600, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 595, 0, 487, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 585, 0, 487, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 532, 0, 487, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 487, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 487,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 2318, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 487, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 2316, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 487, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 2305, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 487, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 490, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 600, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 487, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 1533, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 490, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 0, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 487,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 490, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1524, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 487, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 490, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	886, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 487, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 490,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 0,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 0, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	0, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 1311, 0, 1297,
	0, 0, 0, 0, 1278, 0, 1294, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 1300, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 1313, 0, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 1323, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 1313, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 1277, 0, 0, 0, 0,
	0, 0, 2196, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	2195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307,
	1311, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 1313,
	1297, 0, 0, 0, 0, 0, 1298, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1283,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1304,
	0, 0, 2995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 1316,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303, 2991,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 1315, 1325, 0, 1305,
	1306, 1307, 1311, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 1313, 1297, 0, 0, 0, 0, 0, 1298, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1283, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	0, 1304, 0, 0, 2931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 1316, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302,
	1303, 2880, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 1311, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 1313, 1297, 0, 0, 0, 0, 0,
	1298, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 1315, 1325, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 1304, 0, 0, 2847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 1316, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300,
	1301, 1302, 1303, 2841, 0, 0, 0, 0, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 1276,
	0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 1311, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 1313, 1297, 0, 0, 0,
	0, 0, 1298, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 1283, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 1315, 1325, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 1304, 0, 0, 2835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 1316, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 1300, 1301, 1302, 1303, 2752, 0, 0, 0, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0,
	0, 0, 1315, 1325, 0, 1305, 1306, 1307, 1311, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 1313, 1297, 0,
	0, 0, 0, 0, 1298, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 0, 0, 1283, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 1315,
	1325, 0, 1305, 1306, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 1304, 0, 0,
	2707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 1316, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 1300, 1301, 1302, 1303, 2706, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307,
	1311, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 1313,
	1297, 0, 0, 0, 0, 0, 1298, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1283,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1304,
	0, 0, 2678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 1316,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303, 2498,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 1315, 1325, 0, 1305,
	1306, 1307, 1311, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 1313, 1297, 0, 0, 0, 0, 0, 1298, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1283, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	0, 1304, 0, 0, 2471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 1316, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302,
	1303, 1801, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 1311, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 1313, 1297, 0, 0, 0, 0, 0,
	1298, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 3073, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 1315, 1325, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 3072, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 1304, 2163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 1316, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 2136, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300,
	1301, 1302, 1303, 1277, 0, 0, 0, 0, 1283, 0,
	2244, 1297, 0, 2243, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2137, 0, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 1302, 1303, 1313, 0, 0, 0, 0,
	1283, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1304, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1902, 0, 0, 0, 1299, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1316, 1901, 0, 0, 1278, 1314, 0, 1324, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 1314, 0, 1324,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 1300, 1301, 1302,
	1303, 1277, 0, 0, 0, 0, 1283, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 1313, 0, 0, 0, 0, 1283, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 715, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 1316, 0,
	0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 1315, 1325, 0, 1305, 1306,
	1307, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	1313, 1297, 0, 0, 0, 0, 0, 1298, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	1283, 0, 0, 1304, 0, 2254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1298, 2475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1316, 2249, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 1314, 0, 1324,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 1300, 1301, 1302,
	1303, 1277, 0, 0, 0, 0, 1283, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 1313, 0, 0, 0, 0, 1283, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1316, 2194,
	0, 0, 1278, 1314, 0, 1324, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 1278, 1314, 0, 1324, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 1300, 1301, 1302, 1303, 1277,
	0, 0, 0, 0, 1283, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 1302,
	1303, 1313, 0, 0, 0, 0, 1283, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 1304, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 1316, 0, 0, 1278,
	0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1584, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 1595,
	1580, 1585, 1568, 1605, 1604, 1292, 1293, 1570, 1569, 0,
	0, 0, 0, 0, 1614, 1613, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1606, 0, 1602, 1601, 0, 0,
	0, 0, 0, 0, 0, 0, 1600, 0, 0, 0,
	0, 0, 0, 0, 1584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 1599, 1597, 1598, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 1595,
	1580, 1585, 1568, 1605, 1604, 0, 0, 1570, 1569, 0,
	0, 1579, 0, 0, 1614, 1613, 0, 0, 0, 0,
	0, 1316, 1588, 1583, 1589, 1590, 1591, 1592, 1593, 0,
	1587, 0, 0, 0, 0, 0, 0, 0, 0, 1611,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1606, 0, 1602, 1601, 0, 0,
	0, 0, 0, 0, 0, 0, 1600, 0, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 0, 0, 0, 1581, 1582, 0, 0, 0,
	0, 0, 0, 0, 1599, 1597, 1598, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1596, 0,
	0, 1579, 1722, 1720, 1721, 1724, 1723, 0, 0, 0,
	0, 0, 1588, 1583, 1589, 1590, 1591, 1592, 1593, 0,
	1587, 0, 0, 0, 0, 0, 0, 0, 0, 1611,
	1612, 0, 0, 0, 0, 1573, 1574, 1575, 1576, 0,
	0, 0, 0, 0, 0, 646, 0, 677, 0, 1594,
	1577, 0, 0, 0, 0, 0, 0, 0, 1572, 0,
	1616, 0, 0, 0, 0, 0, 0, 653, 0, 0,
	0, 1603, 0, 0, 0, 1581, 1582, 1571, 0, 651,
	1607, 1608, 1609, 1610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 652, 0, 0, 1578, 0, 654, 0, 1596, 1615,
	682, 0, 0, 0, 0, 0, 660, 661, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 1573, 1574, 1575, 1576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1594,
	1577, 676, 666, 0, 0, 0, 0, 0, 0, 0,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1571, 0, 656,
	1607, 1608, 1609, 1610, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 658,
	0, 0, 0, 0, 1578, 0, 0, 0, 0, 1615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 667, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 668, 0, 0, 0, 683, 684, 0, 0,
	0, 0, 0, 681, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 673,
}
var sqlPact = [...]int{

	367, -1000, -19, -1000, -1000, -1000, 181, -1000, -1000, -1000,
	-1000, 180, 179, 178, -1000, 174, 173, 172, 170, 169,
	167, 164, 163, 158, 157, 153, 152, -1000, -1000, 150,
	-1000, -1000, -1000, -1000, 148, 146, 144, -1000, 143, 1096,
	31355, 142, 137, 131, 1409, 48849, 1385, 128, 127, -1000,
	126, 1461, 36285, 1027, 1837, -1000, 125, 124, 1464, 48473,
	3077, 1852, 33999, 1287, 1815, 48091, 30973, 1810, 33617, 47709,
	-1000, -1000, 1002, -1000, -1000, 47327, 123, 121, 119, 117,
	105, -1000, 104, 46945, 101, 99, 98, 97, 95, 94,
	92, 91, -1000, 89, 86, 85, 80, 77, 75, 72,
	71, 68, 67, 66, 61, 60, 56, 54, 53, -1000,
	58283, 50, 49, 48, -1000, 1282, 46, 45, 43, 42,
	41, -1000, -1000, 40, 39, 34, 33, 32, 31, -1000,
	103, 28, 27, 25, 23, 21, -1000, 1053, 382, 2234,
	13061, 1178, 1170, 1133, 1132, 1149, 673, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51481, 48849, 20, -149, 19,
	-1000, 2190, 759, 24051, 367, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35903, 35521, 35139,
	29463, 46563, 46181, 10210, 10210, 895, -1000, -1000, -1000, -1000,
	-1000, -21, 32483, 48849, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 219, -1000, -1000, -1000, -1000, -1000, -1000, 20115,
	19696, 19277, 365, -1000, -1000, -1000, 217, -1000, -1000, -1000,
	-1000, 1223, -1000, -1000, -1000, -1000, 45799, 45417, 2074, 45035,
	29071, 28679, 44653, 1672, 1664, 44271, -1000, -1000, 43889, -1000,
	-1000, 2024, 1844, 1822, 34757, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43513, 43131, 42749, 42367, 41985, 28287,
	27895, 509, -1000, -1000, -1000, -1000, 25197, -1000, -1000, -1000,
	-1000, -1000, 18, -1000, 17, 16, -1000, 15, 14, 11,
	10, 9, 8, 4, -1, -1000, -4, -6, -1000, -7,
	-10, -1000, -11, -12, 1467, 1034, 1423, 41603, 982, 2145,
	-1000, 1360, -27, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48849, -1000, 20520, -1000, 508, -1000, 1782, -1000, 20520, -1000,
	1347, 208, 1239, -1000, -1000, -1000, 1266, 977, -1000, -1000,
	48849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2457, 1321,
	506, 41221, -1000, 1521, -1000, 628, 13871, -1000, 841, -1000,
	13871, 216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2321, 1125,
	2378, 27503, 1376, 2219, 1996, 2456, 1505, 1995, 1990, 1938,
	1937, 1909, 2454, 1063, 2453, 964, 802, 2450, 1890, 1888,
	2418, 1314, 769, 2445, 2440, 1879, 1780, -1000, -1000, -1000,
	-1000, 991, -1000, -1000, -1000, -1000, -1000, -1000, 37789, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1053, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1524, 2175, 2175, 2175, 2253, 346, 340, -1000, 103,
	-1000, 1706, -1000, 1305, -1000, -1000, -1000, 57539, -1000, -1000,
	20520, 20520, 20520, 20520, 20520, 1206, -1000, -1000, -1000, 544,
	-1000, 505, 504, 11426, -1000, -1000, 2360, -1000, -1000, -1000,
	358, -1000, -1000, 20520, -1000, 213, -1000, -1000, -1000, -1000,
	503, 2424, -1000, 760, -1000, -1000, -1000, 637, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1827, 474, 473, -1000, 470,
	469, 468, -1000, -1000, -1000, 501, 500, 497, 496, 495,
	491, -1000, -1000, -1000, 1137, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 693, -1000, 693, 693,
	455, 455, 489, 488, 456, 487, -1000, -1000, 485, 455,
	484, 483, -1000, -1000, 482, 605, -1000, 602, 479, 478,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1237,
	-1000, -1000, 1237, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	890, 50353, -1000, -1000, -1000, -24, 48849, -1000, 365, -24,
	-1000, -1000, 476, -1000, 14695, 14695, 14695, -1000, -1000, 1336,
	20520, -1000, 1762, -1000, 706, -212, 475, 24815, 573, 573,
	-1000, 22905, 552, 27111, -1000, 474, 473, 470, 469, 468,
	-1000, 207, -1000, -1000, -1000, -1000, -1000, 1605, 2068, 885,
	-1000, 1138, 2064, -1000, 3183, 2061, 1136, -1000, -1000, 668,
	2057, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1264, -1000, -1000, 1717, 2054, -53, 1857, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1435, -1000, 29839, 32483, -25, -1000,
	-1000, -47, -1000, 9820, 57539, -1000, 57539, 665, -1000, 57539,
	664, -1000, 1778, 48849, 10210, 48849, 48849, -1000, 467, 1522,
	1334, -1000, -1000, 32107, 3183, 1519, -1000, -1000, 645, 1516,
	-1000, -1000, 1515, -1000, 365, -1000, -1000, 40839, 51105, 645,
	1510, -1000, -1000, -1000, 37789, -1000, 48849, -1000, 48849, -1000,
	999, -1000, 50729, 138, 2048, -1000, -1000, 138, 2046, -1000,
	138, 2044, -1000, 133, 2037, -1000, -1000, 1417, 2036, -1000,
	-49, 2032, -1000, -1000, -49, 2031, -1000, -1000, 20520, -54,
	-1000, -1000, -1000, 759, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40457, 29839, -1000, 32107, 48849, 34375, 680, 57539, 2316,
	58080, 29839, 57539, 32107, 48849, 1826, -1000, 40075, 39693, 2202,
	627, -1000, -1000, 48849, -1000, 20520, -1000, 2315, 1460, -42,
	-1000, -1000, -1000, -1000, -1000, 1570, 1553, 780, 1275, -1000,
	13871, 13871, 2141, -1000, 206, 10210, -1000, -1000, 953, 1603,
	-1000, -1000, -1000, -1000, -1000, 39311, -1000, -1000, -1000, 1324,
	48849, -1000, -1000, 1825, -1000, 31731, 48849, -1000, 48849, -1000,
	48849, -1000, 48849, -1000, 48849, -1000, -1000, -1000, -1000, -1000,
	1926, 1165, 1816, -1000, 48849, -1000, 48849, -1000, -1000, -1000,
	1547, -1000, -1000, -1000, 38935, 38553, 38171, -1000, -1000, 1116,
	-1000, 949, -1000, -1000, 139, -1000, -1000, 1524, -1000, 1400,
	1642, 18858, 1623, 20520, 103, -1000, -1000, 103, 103, 12642,
	-1000, -1000, -1000, 48849, -1000, 57970, 58080, 10210, 915, 20520,
	20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520,
	20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520,
	20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520, 20520,
	20520, 20520, 20520, 20520, 1298, 20520, 888, 20520, 20520, 20520,
	20520, 1534, -1000, -1000, 1283, 391, 1320, -1000, 2386, 2386,
	2386, 4962, 4962, 417, 544, -1000, 20520, -1000, 76, 20520,
	340, 55264, -23, 11021, -1000, -1000, -1000, -1000, 18439, 685,
	57539, 9430, 10602, -1000, 2410, 917, 1772, 1722, 464, 656,
	636, 634, 625, 493, 20520, 20520, 20520, 20520, 20520, 20520,
	-1000, -1000, -1000, -1000, -1000, -1000, 2360, -1000, 18034, 17615,
	-1000, 2409, 17196, 16777, -1000, 16358, 21735, 15939, 913, 909,
	908, 898, 20520, 11831, -1000, -42, -1000, 50353, -1000, 48849,
	-24, 2309, 20520, 182, -1000, 56329, -1000, 182, 182, 463,
	-55, 57539, 1620, 1619, 24433, 1670, 1214, 1214, 1214, -1000,
	461, 539, 573, 7071, 15520, 460, 573, 573, 184, 36661,
	1221, 36661, 228, 338, 22523, 1762, -1000, -1000, 48849, 10210,
	-36, 1117, -1000, 33235, 2187, 2167, 2180, 995, -1000, 971,
	2251, 37789, 2279, 76, 2197, 1777, -1000, -1000, 887, 37789,
	3183, -1000, 58080, -1000, 1724, 2249, 960, 946, 960, 960,
	958, 37789, 884, 1168, 29839, 2194, 882, -39, 2268, 76,
	2188, 1775, 879, -1000, -1000, 48849, 10210, 2186, 938, 593,
	-25, 32483, 48849, 204, -1000, 20520, 20520, 962, -57, 202,
	1632, 1627, 184, -1000, 32859, 2298, 2029, 48849, 874, -1000,
	3183, 2022, -1000, 1167, -1000, 2021, 2017, 2297, 1326, 1508,
	-1000, -1000, -1000, 1300, 1506, 925, 2011, 672, 292, 2296,
	292, 26347, -1000, 48849, -1000, 48849, -1000, -1000, 48849, -1000,
	48849, -1000, 48849, -1000, 48849, 48849, -1000, 48849, 29839, 29839,
	29839, -65, 3326, 30591, 642, 870, -62, -1000, 731, 32859,
	3110, -70, -1000, 921, -1000, -1000, -1000, 240, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 693, 459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 456,
	1137, 455, 455, 455, -1000, -1000, -1000, 605, -1000, 602,
	-1000, -1000, -1000, 693, 693, -1000, -1000, -180, 1774, -47,
	34375, 593, -1000, 593, -1000, 1814, -1000, 2191, 612, -75,
	797, -42, -1000, 1237, -1000, 1067, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2423,
	-1000, 2397, -1000, -1000, 2407, -26, -1000, -26, -1000, 10210,
	-1000, 48849, 1808, -1000, -1000, -1000, -1000, -1000, -1000, 48849,
	-1000, 48849, -1000, -1000, -1000, -1000, -1000, -1000, 457, -1000,
	1802, -1000, 3326, 200, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48849, 48849, 48849, -1000, 37789, -1000, -1000, -1000,
	-1000, 57539, -1000, 395, -1000, -1000, 57539, 1087, 1637, -1000,
	1637, -30, -1000, 56043, 1593, 48849, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 624, 667,
	667, 858, 858, 858, 858, 2352, 4159, 3791, 4089, 6566,
	6566, 6566, 6566, 6566, 6566, 6566, 6566, 3265, 733, 733,
	3265, 3265, 3265, 3265, 3265, 733, 733, 733, 6566, 6566,
	6566, 4962, 57824, 3877, 20520, 20520, 855, 1259, 391, 3877,
	20520, 3877, 3877, 3877, 3877, -1000, 1492, -1000, -1000, -1000,
	-1000, 1768, 451, 21735, 21735, -1000, -1000, -1000, 11426, 20520,
	-1000, -1000, -1000, -1000, 450, 20520, -1000, 55549, -242, 336,
	-179, 199, 20520, 536, -72, -1000, 963, -1000, 20520, 197,
	-1000, -1000, -45, 20520, 20520, 20520, 335, -1000, 333, -1000,
	853, -1000, 851, 850, 848, -1000, 449, 1210, 448, 446,
	20520, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57467, 52279, 52241, 6603, 6348, -76, -77, 329, -1000,
	1766, -179, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 323,
	-1000, 319, -83, -1000, -84, -1000, 318, -1000, 57181, -179,
	317, 629, -1000, 21735, 21735, 21735, 11426, 445, 315, -1000,
	55971, -1000, 623, 622, 621, 620, 57109, 15101, 15101, 15101,
	313, 56823, 20520, -179, -1000, -1000, 443, -85, 672, 14695,
	23669, 10210, -1000, 672, 672, 20520, -1000, 20520, 24433, 24433,
	2998, 1607, 24433, -1000, -1000, -1000, -1000, 36661, 419, 573,
	36661, -1000, 2360, 1613, -1000, 312, -1000, 14290, 36661, 36661,
	10210, -1000, -1000, 48849, 365, -1000, -1000, 573, 308, 191,
	1601, 48849, 48849, 48849, -1000, -1000, 1503, 49977, 1497, 58080,
	48849, -1000, -1000, 442, 441, 1589, 1585, 48849, 48849, 49601,
	49225, 48849, 1212, 20520, 1312, 1413, 76, -1000, 617, 437,
	48849, 1134, -1000, -1000, -1000, -1000, -1000, 48849, -1000, -1000,
	2400, -1000, 960, -1000, -1000, -1000, 960, 3183, 1104, 48849,
	29839, 659, 613, 48849, 1191, 76, -1000, 611, 435, 10210,
	1131, -1000, 610, 48849, 1700, -1000, 1432, -1000, -1000, 9040,
	57539, 57539, -1000, -1000, 10210, 1663, 1663, 307, -32, -1000,
	-1000, -1000, -1000, -1000, -1000, 1660, 48849, 553, 48849, 76,
	48849, 175, 2428, 48849, 29839, 29839, 29839, 76, 48849, 2002,
	48849, 1988, 1892, 571, 48849, 1227, 20520, 1119, -1000, 25579,
	712, 48849, 1055, 149, -1000, -1000, -1000, 7, 48849, -1000,
	-1000, 138, 138, 138, -1000, 133, 1417, -1000, -49, -49,
	-1000, -1000, -1000, 1765, 37413, 48849, 2328, 29839, -95, -1000,
	734, 849, 818, -1000, 58080, -1000, 543, 836, -1000, 2399,
	426, 2360, -1000, 642, 48849, 113, -1000, 658, 1646, -1000,
	13871, 13871, -1000, 1237, -1000, -1000, 1065, -1000, 1127, -1000,
	-1000, -1000, -1000, 13871, -1000, -1000, 933, -47, -47, -1000,
	-1000, 303, -1000, 48849, -1000, -1000, -1000, -1000, 1087, -1000,
	20520, -1000, -1000, -1000, 12642, -1000, -1000, -1000, 48849, -204,
	20520, 3877, 3877, 20520, 21735, 21735, -1000, 3877, -1000, -1000,
	-1000, -1000, -1000, 1764, 423, 20520, 58080, 3936, 3638, -98,
	3265, 20520, -33, -1000, 20520, -1000, 8650, 55127, -1000, -1000,
	541, 1882, -1000, 20520, 56686, 8260, 300, 13466, -1000, 56401,
	-48, -48, -1000, 2422, 1502, 1160, 1107, 1028, 2371, -1000,
	26729, 676, 1227, 54842, 57970, 58080, 20520, 20520, 20520, -1000,
	-1000, 2360, -1000, 20520, -1000, -1000, -1000, -1000, -1000, 1761,
	20520, -1000, 57970, 58080, 21735, 21735, 21735, 21735, 21735, 21735,
	21735, 21735, 21735, 21735, 21735, 21735, 21735, 21735, 21735, 21735,
	21735, 21735, 21735, 1565, 21735, 2382, 2382, 2382, -35, 20520,
	-1000, 1797, 1761, 20520, 20520, -1000, -1000, -1000, -1000, 58080,
	299, 295, 293, -1000, 20520, -179, 3110, -1000, 1719, -1000,
	-100, -1000, 1762, -1000, -1000, 1719, 1719, -103, 57539, -1000,
	2998, -1000, 422, 20520, 24433, -1000, 526, -1000, -105, -1000,
	36661, -1000, 525, -236, -1000, 587, -1000, 573, 290, -1000,
	-1000, -1000, 190, 365, -1000, 36661, -1000, 10210, -1000, -1000,
	847, 843, -1000, 1963, -1000, 1488, -1000, 716, -1000, 1081,
	20520, 23287, 421, 418, 1197, -1000, 1959, 1417, 1905, 1417,
	-1000, -1000, 632, -1000, 57539, 415, 414, -1000, -36, 1111,
	-1000, 25971, 20520, -1000, 840, -1000, -1000, -1000, 3183, 837,
	-1000, -1000, 1150, 25971, -1000, -1000, -1000, 25971, 20520, -1000,
	-39, 833, 25971, 1853, 642, 1746, 955, -1000, -1000, -1000,
	-1000, -1000, -1000, 1652, 32859, 48849, 412, 48849, 410, -1000,
	-1000, 409, 48849, 593, 3183, -1000, 645, -1000, -1000, 727,
	10210, 408, 10210, 1576, 571, 30215, -1000, 645, 1642, 57539,
	-1000, 1055, 12236, 2183, -106, -1000, 189, -1000, -1000, -1000,
	672, 26347, 24433, 20520, 2437, -108, -1000, -1000, -1000, -1000,
	-1000, 76, -41, 405, -1000, 586, 585, -47, 1234, 2145,
	2145, -1000, 2369, -1000, 524, 287, 2360, 286, -1000, -47,
	48849, -1000, 1230, 10210, 48849, 48849, 10210, 48849, -1000, -1000,
	-42, -1000, -1000, -1000, -1000, 48849, -1000, -1000, -1000, 1245,
	54705, -1000, 2217, 10210, 2311, 3877, 3575, 538, 20520, 58080,
	3619, -111, 20520, 20520, -1000, 283, 20520, 523, 57539, -1000,
	-1000, -1000, -1000, -1000, 57539, 20520, 186, -1000, 2420, 20520,
	282, 279, 278, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 277, -1000, -1000, 51857, -1000, 20520, 276, -1000, 274,
	271, 6063, 54420, 54283, 269, 57539, 1797, 57539, -1000, -1000,
	737, 737, 952, 952, 952, 952, 2382, 569, 845, 704,
	522, 522, 522, 1202, 438, 438, 522, 522, 522, 1740,
	1559, 403, 4378, 20520, 268, -1000, -1000, 57539, 57539, 265,
	-1000, -1000, -1000, -179, 259, 1710, 2247, -1000, 24433, 1710,
	1710, -1000, -1000, 48849, 57539, -1000, -212, -1000, 2360, -1000,
	-1000, 1613, -1000, 7475, 36661, 573, 10210, -1000, -1000, 140,
	48849, 48849, 48849, 1875, -1000, 3085, -1000, 53998, -113, -1000,
	2216, 2216, 20520, 184, -1000, -1000, 402, 23287, 48849, -1000,
	1594, 1641, 768, 48849, -1000, 48849, -1000, -1000, 48849, 48849,
	48849, 48849, 48849, -1000, 401, -114, 48849, 48849, 29839, -1000,
	-1000, -116, 10210, -1000, 2185, -1000, 29839, 889, 1191, 1689,
	-1000, 399, 23287, 398, 48849, 32859, 2285, -1000, 642, -1000,
	-1000, 394, 1721, 1289, 23287, 1274, 1579, 571, 30215, -1000,
	925, 1055, -1000, -1000, -44, -1000, 285, 76, 48849, 2431,
	1227, -1000, -46, 57539, -1000, 572, -1000, 37037, 37037, 29839,
	29839, -1000, 2129, 2127, 494, -1000, -1000, 255, -1000, -47,
	1493, -1000, -1000, 1194, 1425, -1000, -1000, -1000, -1000, -1000,
	2217, 20520, 20520, 3619, -124, -1000, 3877, 3877, -1000, 53861,
	-1000, 57539, 7870, -1000, 56401, -1000, -1000, -1000, -1000, 1198,
	-1000, 53576, -1000, -1000, -1000, 20520, -1000, -1000, -1000, -1000,
	21735, 1738, 393, 58080, 53439, -1000, -1000, -1000, 638, 20520,
	20520, 1762, 638, 638, -127, 573, -1000, -1000, -1000, 2360,
	-1000, 36661, 140, 10210, -1000, -1000, -1000, 48849, -1000, 48849,
	-1000, 10210, 48849, 1742, 1470, -1000, -1000, 1582, 392, 21735,
	48849, 671, -1000, 1225, 23287, 2217, 10210, 2217, 53154, 10602,
	-129, -134, 1456, -1000, 1443, 20520, -1000, 58080, 1417, 1417,
	-135, -136, -1000, 831, 824, 20520, 823, -1000, -1000, -1000,
	807, -1000, 603, -49, 25971, -1000, -1000, 1201, 23287, -137,
	23287, -144, 249, 76, -1000, 23287, -1000, 48849, -150, 48849,
	-1000, 571, 30215, -1000, 1892, -1000, 2079, 48849, 2162, -1000,
	-1000, -1000, 1642, 391, -1000, -152, -1000, -1000, 390, 385,
	-1000, -1000, -50, -1000, 644, 643, -1000, -1000, -1000, 10210,
	929, -1000, 3877, 3877, -1000, -1000, -1000, -1000, 246, 1227,
	2237, -1000, 53017, 3861, 21735, 58080, -153, -1000, -1000, 48849,
	57539, -179, -1000, -1000, -1000, 36661, 439, -1000, -1000, 2042,
	-1000, -1000, -1000, 48849, 1474, -1000, -1000, 20520, 4378, 384,
	20520, -1000, 1652, 383, -1000, -1000, -1000, -1000, -1000, -1000,
	2216, -45, -1000, 1118, -1000, -1000, 57539, 2209, -1000, -1000,
	380, 378, 48849, 48849, -48, 376, 375, 25971, -1000, 48849,
	-155, 1225, -160, -1000, 1652, -1000, -161, 727, -1000, 374,
	30215, -1000, 1576, 894, -167, 48849, 1055, -1000, -1000, 29839,
	29839, 1493, -1000, 48849, -1000, 48849, -1000, 48849, -1000, 1064,
	20520, -1000, 3861, -169, -1000, -51, -1000, 2284, -1000, -1000,
	-1000, -1000, 1840, 52732, 1542, 48849, 52595, 1191, 48849, 2217,
	244, 48849, 709, 10210, 1194, 1194, -1000, -1000, 243, 20520,
	20520, -1000, 372, -1000, 1652, 1225, 1191, 1225, 371, 23287,
	-1000, 1579, 992, -1000, 672, -1000, -1000, -170, -172, -1000,
	-177, -178, -1000, 233, 21330, 21330, -179, -1000, 48849, 366,
	1823, -1000, 1247, 1156, 209, 711, -1000, -183, -1000, -1000,
	365, -1000, 20520, -1000, -184, -1000, 707, -186, -1000, 705,
	2420, -191, -192, 48849, 1191, 1652, -1000, 1652, 23287, -197,
	-1000, 26347, -1000, 642, 642, -1000, -1000, -1000, -1000, -1000,
	22125, 1311, 1046, 55686, -1000, -1000, -1000, 48849, -1000, 1254,
	1251, 1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1542,
	57539, -1000, 1194, 1683, -1000, 1194, 1735, -1000, -1000, -198,
	-1000, 1191, 1191, -200, -1000, -193, -1000, -1000, 2322, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2107, -1000, 756, 1538,
	1538, 1247, -1000, 360, -1000, 359, 1397, -1000, -1000, 1225,
	-1000, 20925, -1000, 2343, -1000, -1000, 1578, -1000, -1000, 20520,
	20520, -1000, -1000, -1000, 1652, -1000, -1000, -1000, -1000, -206,
	-209, 1191, 1191, 806, -1000, -1000, 355, 20520, -226, 1191,
	-1000,
}
var sqlPgo = [...]int{

	0, 2923, 2922, 1873, 2918, 2247, 2913, 2909, 2907, 2905,
	2903, 2244, 2902, 2899, 2896, 2895, 2891, 2887, 2882, 2880,
	2879, 2874, 2872, 2871, 2870, 2869, 2868, 2867, 2866, 2865,
	2861, 2859, 2226, 2858, 2216, 2855, 2854, 2849, 2844, 2843,
	2839, 2837, 2834, 25, 2833, 2832, 2831, 2828, 2209, 2825,
	2824, 2204, 2823, 2821, 2200, 2819, 2818, 2816, 2197, 2194,
	2810, 2809, 2185, 2807, 2805, 2180, 2802, 2156, 2801, 2799,
	2152, 2795, 89, 102, 2793, 2133, 2791, 2790, 2126, 2071,
	2053, 2787, 1986, 2781, 2780, 1979, 1972, 2779, 125, 2778,
	2777, 2776, 2775, 1967, 1945, 2774, 2766, 2765, 173, 2764,
	1886, 2763, 2761, 2760, 2759, 2755, 2754, 2752, 2750, 2749,
	2748, 2746, 2744, 2741, 2739, 2735, 2733, 2730, 2727, 2726,
	2724, 2720, 2715, 2711, 2708, 2701, 2700, 180, 111, 2698,
	2695, 1863, 1830, 2690, 2689, 52, 43, 15, 62, 137,
	168, 4276, 158, 2688, 2687, 2686, 2682, 2681, 2679, 26,
	119, 118, 117, 113, 2678, 411, 2675, 2674, 44, 37,
	27, 21, 74, 2669, 2667, 2665, 1809, 82, 2663, 2657,
	171, 149, 2656, 365, 36, 104, 106, 81, 143, 55,
	2653, 91, 22, 2651, 112, 96, 2648, 56, 30, 28,
	3893, 114, 57, 95, 186, 155, 145, 144, 115, 302,
	2647, 176, 71, 140, 2645, 2643, 2642, 47, 136, 5,
	2, 164, 6, 2638, 8, 2636, 11, 2635, 2632, 2631,
	2630, 17, 110, 94, 61, 2629, 206, 263, 124, 2628,
	156, 2627, 65, 179, 138, 7, 92, 2615, 77, 19,
	64, 2611, 2610, 87, 159, 2606, 34, 127, 75, 79,
	182, 150, 88, 139, 148, 2604, 2598, 2597, 154, 2595,
	133, 103, 2593, 2592, 85, 33, 2591, 35, 165, 40,
	2588, 2587, 108, 2585, 142, 2583, 2582, 177, 109, 123,
	13, 51, 80, 10, 162, 98, 59, 58, 2581, 3575,
	1321, 298, 50, 2580, 90, 68, 32, 72, 93, 170,
	39, 2579, 2578, 151, 2576, 2570, 2566, 2563, 2562, 120,
	2561, 2559, 2558, 99, 160, 86, 2557, 97, 42, 187,
	146, 131, 174, 116, 2556, 128, 83, 135, 2555, 38,
	2553, 1123, 2552, 132, 2549, 2548, 2547, 2543, 355, 2542,
	2541, 2538, 1009, 2536, 107, 2535, 129, 122, 130, 147,
	105, 163, 157, 54, 2534, 134, 23, 2532, 153, 24,
	0, 3761, 3033, 2511, 141, 78, 2510, 2507, 2506, 2505,
	29, 9, 3, 1, 18, 12, 49, 31, 209, 2504,
	2503, 73, 100, 2502, 181, 152, 2501, 2500, 2497, 48,
	2496, 16, 2494, 14, 2493, 2492, 20, 4, 2486, 2485,
	169, 2481, 2480, 2476, 2273, 2471, 175, 2469, 2465, 2464,
	1923, 2463, 2460, 45, 121,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 406, 406, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 405,
	405, 153, 153, 152, 148, 148, 155, 155, 155, 157,
	157, 154, 154, 147, 147, 32, 32, 86, 86, 86,
	138, 79, 79, 79, 74, 74, 358, 358, 359, 359,
	134, 134, 135, 135, 135, 135, 136, 136, 137, 137,
	137, 46, 34, 34, 34, 34, 34, 34, 34, 35,
	35, 36, 36, 36, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 234, 234, 70, 70, 70, 70, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 328, 328, 71, 71, 301, 301, 75, 75, 259,
	259, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	87, 87, 87, 87, 404, 404, 228, 228, 170, 170,
	170, 170, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 133, 133, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 94,
	94, 94, 96, 93, 93, 93, 95, 95, 95, 95,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 99,
	352, 352, 237, 237, 350, 350, 351, 351, 205, 205,
	205, 205, 205, 206, 206, 206, 357, 357, 357, 357,
	357, 357, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 118, 118, 118, 127, 127, 127, 127,
	127, 127, 127, 120, 120, 120, 111, 111, 101, 101,
	107, 107, 107, 107, 107, 102, 102, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 103, 103, 103,
	103, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 123, 316, 316, 119, 119, 119, 119,
	122, 122, 122, 122, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 104, 104, 105, 105, 106, 106, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 407, 407, 109, 402, 402, 400, 400,
	400, 400, 400, 400, 400, 401, 401, 403, 403, 80,
	80, 52, 52, 53, 53, 207, 207, 208, 208, 282,
	282, 282, 282, 209, 209, 156, 156, 156, 212, 213,
	213, 210, 210, 211, 211, 211, 215, 215, 214, 217,
	217, 216, 281, 368, 368, 369, 369, 369, 369, 369,
	369, 369, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 366, 366, 366, 367, 364, 364, 365, 365,
	365, 365, 408, 408, 280, 280, 221, 221, 371, 371,
	371, 371, 372, 372, 372, 372, 372, 375, 374, 373,
	373, 373, 373, 373, 312, 312, 312, 57, 57, 57,
	248, 248, 247, 247, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 130, 130, 54,
	54, 54, 162, 162, 51, 51, 51, 55, 55, 50,
	50, 50, 50, 50, 265, 265, 263, 263, 226, 226,
	318, 318, 318, 174, 174, 149, 149, 149, 20, 22,
	22, 16, 16, 16, 16, 16, 16, 29, 29, 30,
	30, 26, 26, 264, 264, 266, 266, 81, 81, 85,
	85, 91, 91, 129, 129, 129, 129, 129, 129, 129,
	33, 33, 33, 33, 45, 45, 45, 45, 89, 411,
	411, 411, 90, 90, 410, 410, 169, 169, 169, 169,
	171, 171, 277, 277, 278, 278, 412, 412, 279, 279,
	279, 164, 163, 165, 165, 49, 49, 49, 158, 158,
	159, 159, 160, 160, 161, 161, 413, 413, 78, 78,
	78, 132, 132, 201, 201, 274, 274, 274, 222, 222,
	179, 179, 276, 276, 275, 275, 275, 246, 246, 246,
	131, 131, 231, 231, 239, 239, 240, 240, 324, 324,
	241, 88, 88, 141, 141, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 142, 142, 142, 142, 142, 142,
	142, 145, 145, 145, 145, 146, 146, 146, 144, 144,
	382, 382, 382, 384, 384, 385, 381, 381, 383, 383,
	409, 409, 250, 250, 250, 219, 220, 218, 218, 224,
	224, 223, 225, 225, 317, 317, 317, 244, 244, 244,
	244, 269, 269, 267, 267, 268, 268, 270, 270, 271,
	271, 271, 272, 272, 273, 273, 243, 243, 297, 297,
	143, 143, 143, 230, 230, 230, 232, 232, 287, 287,
	287, 288, 288, 286, 286, 286, 286, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	398, 398, 398, 399, 399, 315, 315, 320, 320, 320,
	320, 320, 320, 313, 313, 314, 314, 325, 326, 326,
	253, 253, 253, 253, 251, 251, 252, 252, 321, 321,
	321, 321, 245, 245, 322, 322, 322, 283, 283, 329,
	329, 329, 344, 344, 229, 229, 229, 339, 339, 330,
	330, 330, 330, 330, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 333, 333, 333, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 343, 343, 343,
	343, 343, 334, 334, 340, 341, 335, 336, 342, 342,
	342, 342, 346, 346, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 338, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 261, 261,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	291, 291, 291, 291, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 376, 376, 376,
	376, 376, 376, 376, 376, 379, 379, 380, 380, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 386, 386, 387, 387, 389, 389,
	390, 390, 391, 392, 392, 392, 393, 394, 394, 388,
	388, 395, 395, 395, 396, 396, 397, 397, 397, 397,
	397, 303, 303, 304, 305, 311, 311, 311, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 172, 172, 172, 172, 172, 236,
	236, 235, 235, 300, 300, 298, 298, 302, 302, 254,
	254, 345, 345, 345, 345, 345, 345, 345, 255, 255,
	255, 262, 256, 256, 257, 257, 257, 257, 257, 294,
	295, 258, 258, 258, 296, 296, 306, 310, 310, 309,
	308, 308, 307, 307, 284, 284, 285, 285, 242, 242,
	414, 414, 238, 238, 323, 323, 323, 323, 203, 203,
	233, 233, 202, 202, 196, 196, 197, 197, 197, 197,
	227, 227, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 347, 347, 347, 348, 349, 299, 189,
	188, 176, 177, 187, 186, 185, 175, 178, 182, 183,
	184, 180, 181, 192, 191, 190, 327, 198, 198, 199,
	199, 199, 200, 200, 200, 200, 173, 173, 193, 193,
	194, 195, 195, 166, 166, 166, 167, 167, 168, 168,
	356, 356, 354, 354, 354, 355, 355, 355, 355, 353,
	353, 353, 353, 353, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 3, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 5, 6, 5, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 6, 3, 13,
	16, 9, 12, 4, 2, 0, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	7, 3, 4, 3, 4, 3, 4, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 419, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -383, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 254, 261, 282, 284, 286, 295,
	-40, -39, 117, -139, -141, 280, -83, -84, -93, -94,
	-95, -96, -133, 313, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	316, -33, -45, -90, -89, 361, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-382, -63, -64, -66, -68, -69, -142, -140, 416, 281,
	370, 37, 325, 65, 111, 290, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 387, 395, -145, -143, -144,
	-146, 302, 378, 338, 420, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 2, 338, 381, 303,
	371, 92, 165, 266, 252, -400, 2, 4, -362, -360,
	-197, -196, 338, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 172, 178, 180, 200, 229, 231, 244,
	248, 258, 260, 268, 292, 319, 334, 350, 351, 352,
	358, 359, 378, 379, 383, 390, 20, 21, 22, 23,
	25, 35, 36, 37, 40, 42, 43, 46, 47, 48,
	49, 50, 51, 58, 63, 64, 65, 66, 67, 72,
	69, 70, 71, 74, 76, 77, 80, 81, 82, 90,
	91, 93, 94, 95, 99, 101, 103, 106, 107, 109,
	110, 116, 117, 120, 115, 118, 344, 346, 119, 121,
	122, 132, 133, 135, 136, 138, 140, 144, 146, 151,
	152, 153, 154, 155, 156, 166, 161, 167, 171, 174,
	173, 175, 176, 177, 168, 182, 185, 186, 187, 189,
	190, 193, 194, 195, 198, 197, 202, 203, 206, 207,
	210, 212, 215, 216, 219, 217, 218, 221, 222, 224,
	223, 230, 232, 233, 235, 236, 239, 240, 243, 246,
	249, 250, 251, 252, 253, 254, 255, 257, 259, 261,
	263, 264, 265, 266, 267, 269, 270, 272, 273, 274,
	275, 276, 280, 278, 279, 281, 282, 283, 284, 286,
	288, 289, 290, 291, 293, 314, 315, 327, 295, 296,
	297, 298, 299, 300, 301, 305, 309, 306, 307, 308,
	303, 304, 310, 311, 313, 316, 318, 320, 321, 324,
	325, 326, 328, 331, 332, 333, 329, 330, 323, 336,
	337, 339, 340, 341, 342, 343, 345, 347, 348, 353,
	356, 357, 361, 362, 363, 364, 367, 368, 369, 374,
	370, 372, 375, 376, 377, 382, 388, 389, 391, 392,
	393, -195, -166, 409, -194, 419, 419, 419, 2, 186,
	265, 310, -190, -193, -194, -195, -166, 4, -360, -362,
	92, 237, 419, 419, 419, 2, 338, 326, 115, 303,
	371, 288, 381, -263, 182, 92, 366, -166, 261, 24,
	2, 101, 171, 369, 368, 24, 257, 304, 340, 342,
	2, 419, 419, 2, 381, 303, 338, 165, 92, 371,
	288, -184, 2, -166, -73, 2, 416, -72, -5, -48,
	-58, -62, -75, -70, -11, -32, -34, -54, -51, -59,
	-65, -67, -79, -78, -80, -82, -86, -85, -88, -93,
	-94, -100, -131, -132, 78, 25, 107, 313, 117, 181,
	2, -404, -228, 2, 24, -170, -166, 78, 145, 302,
	338, 2, 186, 2, -184, 2, -400, 2, 186, 2,
	-404, -228, 23, 2, -166, 2, 299, 316, -171, 2,
	295, -166, 419, 419, 419, 419, 419, 419, 207, 58,
	292, 310, -98, 357, -97, 350, 297, -99, -352, 2,
	219, -166, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 2, -127, 310, 326,
	152, 36, 58, 24, 63, 93, 146, 165, 166, 194,
	73, 74, 264, 207, 187, -316, 119, 311, 339, 298,
	336, 357, 78, 372, 289, -407, 118, 4, 92, 219,
	312, 350, 67, 343, 344, 419, 419, 419, -409, 2,
	338, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, -140, -142, -141, 419, 419, 419, 419, 419,
	-223, -224, 365, 179, 113, 242, -139, -141, 2, -382,
	-127, 310, 2, 58, 24, -350, 2, -289, 237, -291,
	407, 408, 402, 225, 394, -303, 98, 214, 213, -293,
	-306, 114, 292, 416, -200, -292, 422, 9, -379, -141,
	31, -304, -305, 52, -198, -166, 7, 8, 5, 6,
	-173, -331, -299, -338, 360, 125, 228, -376, -377, -199,
	4, -360, -354, -332, -341, -336, -337, -339, 42, 48,
	47, 347, 218, 305, 306, 307, 308, 320, 374, 161,
	40, 235, 236, 173, 180, 61, 84, 85, 83, 88,
	87, 89, 86, 312, 371, 53, 30, 157, 229, 158,
	59, -378, 43, 94, 106, 135, 136, 174, 175, 176,
	177, 189, 190, 330, 353, 39, 41, 44, 54, 55,
	96, 97, 123, 124, 134, 147, 172, 178, 200, 231,
	248, 258, 268, 319, 334, 350, 351, 352, 358, 359,
	379, -361, -342, 79, 126, 143, 170, 159, 183, 184,
	188, 201, 204, 220, 227, 245, 247, 287, 317, -410,
	2, 357, 357, 2, -410, 2, -410, 2, -169, 2,
	357, 354, -411, 357, 390, -384, 269, -385, -184, -384,
	419, 419, 421, 419, -218, -219, -220, 2, 24, 104,
	416, 2, -319, 2, 414, -321, -173, 196, -378, -141,
	-320, 416, -190, 238, -199, 84, 85, 88, 87, 89,
	4, -166, 61, 214, 213, -3, 2, -321, 157, -190,
	2, -321, 157, 2, -191, 157, -321, -193, 2, -358,
	157, -356, 9, -355, 5, 4, -360, -362, -361, 2,
	-175, -166, 2, -202, 157, -190, -187, -353, 4, -360,
	-362, -361, -363, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 111, 113, 125, 127, 139, 141, 142,
	145, 148, 150, 160, 165, 169, 179, 181, 196, 199,
	205, 208, 209, 225, 226, 228, 234, 237, 238, 241,
	242, 256, 262, 271, 285, 302, 312, 322, 335, 338,
	349, 354, 355, 360, 365, 366, 371, 373, 380, 381,
	384, 385, 386, 387, -188, -353, 354, 421, -233, -196,
	-197, -227, -166, 418, -289, 2, -289, 157, 2, -289,
	157, 2, -221, 416, 418, 338, 62, 2, -190, 157,
	-180, 2, -166, 109, -191, 157, 2, -193, -358, 157,
	2, -358, 157, 2, -192, 2, -190, 165, 165, -175,
	157, 2, -166, 24, 142, 2, 181, 2, 181, 2,
	-322, 2, -321, -234, 157, 2, -190, -234, 157, 2,
	-234, 157, 2, -203, 157, 2, -202, -175, 157, 2,
	-359, 157, 2, -358, -359, 157, 2, -259, 416, -328,
	2, -327, -355, 378, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 310, -138, 80, 237, 354, 421, -190, -289, -301,
	416, 142, -289, 237, 142, 239, 2, 92, 338, 393,
	24, -166, 2, 314, 2, 416, -98, 56, 357, -278,
	2, -279, -163, -164, -165, 185, 263, 267, 393, -350,
	354, 399, 142, -350, -237, 418, -127, 2, 139, 373,
	2, 7, 2, -358, 2, 314, 2, 264, 311, 58,
	142, 2, 2, -402, 2, 237, 142, 2, 142, 2,
	142, 2, 142, 2, 142, 2, 2, 264, 311, 2,
	356, 195, 356, 2, 142, 2, 142, 2, 5, 2,
	185, 263, 327, 2, 338, 381, 303, 2, 2, 142,
	2, 142, 393, 2, -245, -321, -223, -224, -244, -267,
	-268, 205, 127, 234, -250, 24, 104, -250, -250, 46,
	417, 417, -127, 314, 2, 10, 11, 60, 35, 407,
	408, 409, 410, 137, 411, 412, 405, 406, 404, 397,
	398, 401, 191, 192, 75, 400, 399, 68, 211, 294,
	128, 129, 130, 131, 277, 162, 163, 164, 13, 14,
	15, 28, 241, 204, 394, 159, 317, 402, 16, 17,
	18, 183, 184, 227, 38, 160, -172, -204, -289, -289,
	-289, -289, -289, 247, -242, -284, 414, -141, 416, 416,
	-141, -289, -235, 416, -349, 7, -141, -298, 414, -307,
	-289, 418, 416, 5, 416, 5, -386, 388, 139, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	260, -346, 382, -346, -346, -333, 416, -333, 416, 416,
	-334, 416, 416, 416, -333, 416, 416, 416, 389, 395,
	389, 395, 416, 416, -277, -278, -277, 354, -171, 421,
	-384, -221, 416, -238, -323, -289, 409, -238, -238, 237,
	-235, -289, 79, -253, 188, 220, 143, 201, 287, 170,
	-349, -73, -286, 422, 416, -173, -378, -141, -166, -315,
	395, -315, -141, -320, 416, -319, 409, -190, 416, 418,
	-151, 278, -150, 22, 25, 107, 376, 120, -211, 167,
	252, 114, 323, -406, 117, 296, 345, 346, 278, 114,
	-247, -249, 32, 90, 222, 249, 49, 155, 213, 214,
	325, 114, 278, 387, 114, 117, 278, -153, 323, -406,
	117, 296, 278, -152, -211, 114, 422, 117, 232, -358,
	-233, 421, 421, -353, 409, 114, 114, 142, -227, -353,
	-190, -198, -166, -199, 416, -221, 225, 237, -400, -248,
	-247, 225, -162, -381, 387, 225, 225, -221, -177, 157,
	2, -167, -166, -177, 157, -381, 225, -322, -201, -190,
	-201, 313, -184, 32, -155, 421, 51, 283, 114, -155,
	114, -155, 114, -155, 421, 114, -155, 114, 421, 114,
	114, -235, 417, 421, -358, -400, -227, -170, 78, 416,
	32, -300, -329, -330, -331, -340, -335, -338, 42, 48,
	47, 347, 218, 305, 306, 307, 308, 320, 374, 161,
	40, 235, 236, 173, 4, 41, -342, 180, 172, 174,
	175, 176, 177, 178, 319, 39, 268, 135, 136, 134,
	106, 97, 96, 231, 44, 43, 94, 350, 351, 352,
	353, 189, 190, 55, 54, 379, 330, -359, -400, -227,
	139, -175, 2, -190, 2, 69, 70, 393, -352, -235,
	32, -278, 2, -412, 421, 203, -206, 210, 224, 151,
	238, 391, -357, 5, 4, -299, -312, 98, 207, -338,
	8, 408, -347, 7, 407, -351, -350, -351, 82, 418,
	-353, 338, 189, -352, 24, 315, 2, -190, -403, 139,
	-401, 288, -400, -190, -190, -190, -190, -190, 139, 2,
	356, 2, 139, -166, -166, 203, -190, 2, -192, 2,
	-191, 2, 338, 165, 338, -155, 421, -244, -268, -267,
	-270, -289, 24, -273, 133, 221, -289, -291, -140, -140,
	-140, -225, -317, -289, 262, 165, -352, -344, -329, -343,
	273, 274, 272, 276, 275, -329, -189, -353, 350, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 204, 159, 317, 38, 160, -289,
	354, -289, -289, -289, -289, 217, 225, 228, 360, 125,
	367, 104, 232, -414, 335, 34, -296, -141, 416, -311,
	29, 322, 24, -303, 292, 416, -284, -289, -285, -236,
	-235, 417, 421, -236, -302, -298, -310, -309, 384, -353,
	409, 417, -235, 380, 24, 104, 409, 2, 7, -260,
	392, 216, 95, 153, 215, -261, 301, -387, 132, 148,
	416, 417, 2, 417, 2, 417, 2, 417, 2, 417,
	2, -289, -289, -289, -289, -289, -235, -349, -254, 2,
	-345, -235, 4, 392, 216, 95, 153, 215, 301, -254,
	2, 7, -235, 2, -235, 2, -255, 2, -289, -235,
	-256, -290, -291, 407, 408, 402, 416, 292, -257, 2,
	-289, -236, 350, 350, 350, 350, -289, 45, 199, 355,
	-258, -289, 142, -235, -171, -385, 32, -235, -230, 421,
	142, 32, 4, -230, -230, 416, 417, 421, 188, 188,
	-319, -253, 188, -251, 245, -251, -251, -398, 416, 415,
	-315, -176, 414, 423, -353, -236, 2, 416, -315, -315,
	418, -314, -313, 32, -184, 243, -314, 417, -190, -353,
	421, 354, -264, 73, 62, -281, 157, 62, -364, -178,
	73, -365, -166, 57, 366, 262, 141, -264, 73, -264,
	73, 73, 313, 326, 46, -321, 35, -88, 71, 142,
	354, -321, -249, -329, 90, 213, 214, 46, -348, -347,
	408, -348, 46, -348, -348, -348, 387, -191, -321, 354,
	253, -358, 71, 354, 421, 35, -88, 71, 142, 354,
	-202, -176, 71, 338, -326, -325, 396, -196, -166, 418,
	-289, -289, 328, 417, 418, 183, 183, -207, -208, -166,
	-282, -281, -366, -367, -364, 182, 165, 366, 126, 32,
	114, -227, 354, 114, 253, 114, 114, 32, 237, 225,
	237, 225, -158, 341, 114, -283, 385, -274, -88, 416,
	98, 32, -274, -239, -240, -324, -241, -178, 416, -184,
	-190, -234, -234, -234, -202, -203, -175, -358, -359, -359,
	417, -73, -327, -137, 387, 354, 387, 373, -208, -72,
	25, 78, 107, 417, 421, -229, 31, 414, -260, 416,
	-346, 416, -137, -325, 142, -228, -326, -326, 139, 70,
	399, 354, 417, 357, -279, -205, 267, 321, 279, 309,
	8, 7, 7, 421, -353, -190, 139, -227, -227, 310,
	-73, 139, -73, 418, -190, -202, -190, -321, -271, -347,
	416, -272, 292, 293, 421, -149, 33, 102, 193, -190,
	393, -289, -289, 354, -414, 335, -296, -289, 217, 228,
	360, 125, 367, 104, 232, 142, 416, -290, -290, -235,
	-289, 416, -235, 415, 425, 417, 418, -289, 415, 415,
	421, -308, -309, 108, -289, 418, -224, 421, -223, -289,
	-235, -235, 417, 417, 354, 354, 354, 354, 416, -392,
	246, 416, 416, -289, 32, 421, 421, 421, 421, 417,
	417, 421, 417, 142, 417, 417, 417, 417, 417, -262,
	256, 417, 10, 11, 407, 408, 409, 410, 137, 411,
	412, 405, 406, 404, 397, 398, 399, 68, 211, 294,
	13, 14, 15, 183, 160, -290, -290, -290, -235, 416,
	417, -294, -295, 142, 139, 393, 393, 393, 393, 32,
	-258, -258, -258, 417, 142, -235, 416, 417, -283, -323,
	-232, 2, -319, -186, -353, -283, -283, -235, -289, -319,
	-319, -252, 373, 237, 188, -319, -313, 417, -399, -349,
	-315, -314, -349, -288, -287, 140, 223, 417, -236, 2,
	-314, -314, -353, -184, -221, -315, 417, 418, -150, -190,
	-178, -185, -166, 225, -281, 157, -157, 225, -329, -185,
	416, 416, 193, 193, -178, -185, 157, -178, 157, -185,
	-185, -405, 267, 233, -289, 206, 266, 226, -151, 278,
	-88, 393, 416, -192, 278, -198, -348, -348, -247, 278,
	-191, -358, 387, 393, -175, -152, -88, 393, 416, -176,
	-153, 278, 393, -190, -134, 156, 232, 409, -353, -128,
	5, 228, -128, 417, 421, 165, -177, 165, -183, -167,
	-88, -190, 142, 4, -191, -358, -358, -358, -88, -190,
	114, -190, 114, -159, 110, -413, 399, -175, -224, -289,
	-246, -276, 285, 237, -222, -179, -178, 378, -184, -246,
	-231, 421, 142, 399, 418, -222, -155, -155, -155, -155,
	-155, 142, -136, 240, -135, -166, 5, -227, 23, -358,
	417, -329, 414, 415, 7, 7, 416, -349, -137, -227,
	142, -41, 387, 266, 92, 338, 252, 165, -350, -350,
	-278, 364, 66, 267, -350, 338, 310, -73, -166, -272,
	-289, -317, -190, 422, -289, -289, -290, -290, 142, 416,
	-289, -300, 28, 28, 417, -236, 421, -285, -289, 409,
	-353, 417, -298, 111, -289, 349, -353, 409, 417, 380,
	-224, -224, -224, 5, 216, 153, 215, -261, 215, -261,
	-261, 7, -393, -181, 416, -166, 385, -223, 417, -344,
	-329, -289, -289, -289, -349, -289, -294, -289, -344, -329,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, 104,
	225, 232, -290, 421, -236, -295, -294, -289, -289, -329,
	417, 417, 417, -235, -72, -243, 148, -326, 421, -243,
	-243, 417, -252, 416, -289, -319, 415, 417, 421, -314,
	415, 421, 424, 399, -315, 417, 418, -221, -313, -353,
	354, 354, 114, 225, 375, -368, -365, -289, -226, -318,
	-178, -380, 416, -166, -376, -377, -173, 416, 416, -148,
	107, 313, -266, 114, -155, 114, -155, 391, 416, 416,
	354, -264, 73, -292, -173, -235, 354, 354, 253, -292,
	-292, -235, 354, -292, 117, -137, 142, 337, -209, 168,
	-282, -167, 416, -177, 416, 416, -221, -190, -326, -248,
	-162, -265, 373, -176, 416, -176, -160, 198, -413, -356,
	-381, -269, -267, -246, -238, 226, 72, 417, 421, 418,
	-283, -240, -232, -289, 2, 417, -88, 421, 416, 399,
	399, 239, -138, -138, 7, 415, 417, -349, 417, -227,
	240, -187, -175, -190, -188, -202, -190, 238, 417, -149,
	-176, 28, 28, -289, -300, 417, -289, -289, 417, -289,
	415, -289, 418, 5, -289, 417, 417, 417, 417, -394,
	-166, -289, 417, 417, 417, 421, 417, 417, 417, -295,
	142, 104, 232, 416, -289, 417, 417, 417, -297, 150,
	46, -319, -297, -297, -227, -286, -349, -287, -176, 414,
	-314, -315, -353, 418, -178, -185, -281, 114, -369, 73,
	-370, 60, 126, 78, 225, 228, 366, 262, 57, 98,
	271, 32, 417, 417, 421, -174, 60, -174, -289, 416,
	-226, -227, 225, 98, 225, 98, 91, 362, -178, -185,
	-227, -227, -190, -178, -185, 416, 417, -192, -191, -358,
	417, -176, 71, -359, 350, -210, -211, 160, 416, -226,
	416, -227, -207, 32, -137, 416, 144, 237, -226, 237,
	-161, 197, -413, -356, -158, -246, -275, 416, 237, -88,
	-179, 2, -224, 399, -135, -136, -358, -358, 91, 91,
	415, 417, -42, -43, 165, 73, 255, -213, -212, 252,
	232, -149, -289, -289, 417, 417, -353, 409, -224, -388,
	252, 417, -289, -290, 142, 416, -300, 417, -389, 386,
	-289, -235, -389, -389, 417, -315, -349, -314, -281, -185,
	-189, -182, -166, 126, 157, 228, 193, 416, -290, -190,
	416, 2, -280, -408, 77, 333, -318, -149, -189, -149,
	417, -235, 417, 417, 228, 228, -289, -329, -155, -155,
	417, 417, 354, 354, -235, 354, 354, 393, -292, 250,
	-226, 417, -226, 417, 417, -88, -226, -190, 417, -190,
	-413, -356, -159, 105, -227, 73, -269, -296, 417, 416,
	416, 421, 24, 416, 24, 416, -188, 338, 417, -224,
	46, 417, -290, -300, 417, -390, -391, -181, -314, 415,
	-370, -182, 225, -289, -168, 416, -289, -209, 416, -174,
	-224, 271, -154, 60, 416, 416, -178, -185, -224, 416,
	416, -292, -190, 417, -280, 417, -209, 417, -265, 416,
	-356, -160, 368, 226, 417, -185, -246, -359, -359, -43,
	-227, -227, -190, -395, 266, 293, -235, 417, 421, 32,
	114, 417, -371, 212, -166, 417, -210, -227, -149, 417,
	-190, -147, 373, -189, -215, -214, -212, -217, -216, -212,
	417, -235, -235, 416, -209, -280, -210, -280, 416, -226,
	-161, 313, -283, 417, 417, 417, 417, 417, -396, -397,
	38, 363, 82, -289, -396, -391, -393, 126, -372, -375,
	-374, 237, 143, 251, 318, 417, 332, 383, 417, -221,
	-289, 417, 421, 378, 417, 421, 378, 417, 417, -227,
	-210, -209, -209, -226, 417, -239, -137, -137, -397, 259,
	138, 292, 259, 138, -182, -374, 237, -375, 237, 368,
	101, -371, -214, 160, -216, 142, 417, -210, -210, 417,
	-283, 28, -373, 222, 283, 51, 313, -373, -372, 416,
	416, -156, 51, 283, -280, -397, 21, 228, 98, -235,
	-235, -209, 417, 417, -210, -210, 354, 416, -235, 417,
	-210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 182, 184, 186, 0, 0, 0, 201, 203, 205,
	206, -2, 0, 0, 0, 234, 235, 237, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 0, 841, -2, 0, 352, 354, 363, 365,
	367, 369, 370, 0, 432, 434, 436, 438, 440, 442,
	444, 446, 448, 449, 451, 453, 455, 457, 459, 461,
	463, 465, 467, 469, 471, 473, 475, 477, 479, 481,
	-2, 753, 755, 757, 759, -2, 62, 64, 66, 68,
	70, 72, 87, 209, 211, 213, 215, 218, 220, 222,
	878, 240, 242, 244, 246, 248, -2, 890, 0, 0,
	0, -2, 0, -2, -2, -2, 771, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 854, 856, 858,
	860, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, -2, -2, -2,
	-2, 0, 0, 1509, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1396, 1450, 1399, 1394, 183, 185, 187, 188, 0,
	0, 0, 657, 1435, 1448, 1449, 1450, 1453, 1454, 1455,
	1509, 0, 202, 204, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 331, 1598, 333,
	335, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	233, 236, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 330, 328, 1430, 273, 274, 0, 313, 314, 315,
	316, 317, 318, 320, 277, 279, 281, 282, 284, 286,
	288, 290, 292, 294, 296, 298, 299, 301, 303, 304,
	306, 308, 309, 311, 717, 0, 0, 0, 0, 0,
	165, 0, 345, 339, 344, 346, 348, 349, 350, 351,
	0, 163, 0, 590, 326, 324, 0, 159, 0, 750,
	0, 345, 1477, 343, 751, 752, 0, 0, 747, 748,
	1627, 781, 353, 355, 364, 366, 368, 371, -2, -2,
	1720, -2, 394, -2, 402, 1723, 1629, 405, 0, 407,
	-2, 410, 433, 435, 437, 439, 441, 443, 445, 447,
	450, 452, 454, 456, 458, 460, 462, 464, 466, 468,
	470, 472, 474, 476, 478, 480, 482, 483, 0, 0,
	0, 0, 0, 487, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 486, 488, 489,
	490, 0, 534, 573, 574, 754, 756, 758, 0, 698,
	880, 63, 65, 67, 69, 71, 210, 212, 214, 216,
	219, 221, -2, 852, 853, 241, 243, 245, 247, 249,
	-2, 0, 884, 884, 884, 0, 0, 853, 851, 0,
	356, 0, 358, 0, 487, 361, 362, 414, 415, 1090,
	0, 0, 0, 0, 0, 0, 1168, -2, -2, 1200,
	1202, 1701, 1720, 0, 1204, 1205, 0, 1207, 1211, 1212,
	0, 1215, 1216, 1373, 1442, 1437, 1402, 1403, 1404, 1405,
	0, 0, 1408, 0, 1410, 1411, 1412, 1275, 1226, -2,
	-2, -2, 1446, 1004, 1005, 1006, 1007, 1008, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1732, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 0, 1690, 1707, 1713, 1708,
	1698, 1245, -2, -2, 1516, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1702, 1703, -2, 1705, -2, -2, 1712, -2,
	1716, 1717, -2, -2, 1722, -2, -2, -2, 1726, 1727,
	-2, 1464, 1057, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1745, 1746, 1747, 1748, 1749, 1750, 783,
	761, 774, 783, 763, 764, 765, 766, 767, 772, 773,
	776, 0, 768, 769, 770, 870, 1604, 873, 657, 871,
	855, 857, 0, 859, 0, 0, 0, 864, 887, 885,
	0, 921, 868, 869, 879, 936, 0, 0, 956, 956,
	947, 0, 978, 0, 1447, 0, 0, 0, 0, 0,
	-2, 1450, 1732, 1743, 1744, 2, 79, 0, 1707, 978,
	81, 0, 1707, 84, 0, 1707, 0, -2, 88, 0,
	1707, 166, 167, 1460, 1461, 1465, 1466, 1467, 1468, 91,
	0, 1426, 99, 0, 1707, 1393, 0, 1423, 1469, 1470,
	1471, 1472, 1473, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 0, 1420, 0, 0, 583, 1390,
	1395, 584, 1400, 0, 189, 190, 191, 1707, 193, 194,
	1707, 196, 0, 0, 0, 0, 0, 217, 657, 1707,
	0, 224, 1431, 0, 681, 1707, 679, 1434, -2, 1707,
	701, 704, 1707, 706, 657, 708, 1433, -2, 1457, 877,
	1707, 797, 332, 334, 0, 227, 0, 810, 0, 812,
	0, 831, 984, 148, 1707, 252, 271, 148, 1707, 255,
	148, 1707, 258, 148, 1707, 261, 1388, 148, 1707, 264,
	265, 1707, 267, 168, 268, 1707, 270, 327, 0, 0,
	-2, 321, 1436, -2, 319, 278, 280, 283, 285, 287,
	289, 291, 293, 295, 297, 300, 302, 305, 307, 310,
	312, -2, 0, 160, 0, 0, 0, 0, 589, 0,
	0, 0, 749, 0, 0, 0, 375, 0, 0, 0,
	0, 780, 372, 0, 391, 0, 393, 1697, -2, -2,
	397, 784, 788, 789, 790, 0, 0, 0, 0, 404,
	0, 0, 0, 408, 411, 0, 484, 485, 0, 0,
	495, 496, 497, 498, 499, 0, 502, 523, 538, 0,
	0, 506, 508, 588, 510, 0, 0, 512, 0, 514,
	0, 516, 0, 518, 0, 520, 522, 524, 539, 526,
	0, 0, 0, 537, 0, 543, 0, 546, 547, 548,
	0, 550, 551, 552, 0, 0, 0, 560, 562, 0,
	572, 0, 491, 492, 148, 982, -2, 0, 847, 899,
	900, 0, 0, 0, 0, 882, 883, 0, 0, 0,
	843, 844, 357, 0, 360, 0, 0, 0, 0, 1308,
	1309, 1310, 1311, 1312, 1313, 1316, 1317, 1314, 1315, 1318,
	1319, 0, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 0, 0, 1325, 0, 1327, 0, 0, 0, 0,
	0, 0, 1147, 1149, 1381, 0, 0, 1324, 1095, 1096,
	1097, 1132, 1133, 0, 1201, 1378, 1377, 1203, 0, 1330,
	-2, 1331, 0, 0, 1206, 1417, 1213, 1214, 1330, 0,
	1372, 0, 0, 1407, 0, 1087, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 1055, 1062, 1059, 1058, 1043, 0, 1042, 0, 0,
	1040, 0, 0, 0, 1044, 0, 1353, -2, 0, 0,
	0, 0, 0, 0, 760, -2, 762, 0, 778, 0,
	872, 0, 0, 925, 1382, 1386, 1387, 925, 925, 0,
	0, 1331, 0, 0, 0, 0, 975, 975, 975, 973,
	950, 0, 956, 0, -2, 0, 956, 956, 0, 966,
	0, 966, -2, 947, 0, 0, 979, 980, 0, 0,
	100, 744, 119, 0, 744, 744, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 115, 107, 108, 0, 0,
	85, 682, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 117, 0, 141, 143, 0, 0, 0, 0, 969,
	582, 0, 0, 1451, 1398, 0, 0, 0, 0, 1451,
	0, 0, 1437, 1438, 596, 0, 0, 0, 0, 677,
	680, 0, 699, 0, 876, 0, 0, 0, 0, 1707,
	713, 1422, 1456, 0, 1707, 799, 0, 988, 0, 813,
	0, 0, 985, 0, 250, 0, 146, 147, 0, 253,
	0, 256, 0, 259, 0, 0, 262, 0, 0, 0,
	0, 0, 879, 0, 180, 0, 337, 347, 0, 0,
	879, 0, 1333, 996, 999, 1000, 1001, 1087, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1063, 1057, 1073, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1053,
	0, 1028, 1028, 1028, 1045, 1046, 1064, 1065, 1067, 1069,
	1071, 997, 998, 1063, 1063, 1060, 1061, 180, 0, 341,
	0, 969, 377, 969, 379, 0, 568, 0, 0, 0,
	0, -2, 399, 0, 786, 0, 791, 423, 424, 425,
	793, 794, 403, 426, 427, 428, 429, 430, 431, 0,
	674, 0, 676, 1413, 0, 400, 416, 401, 406, 0,
	412, 0, 0, 500, 501, 503, 504, 505, 509, 0,
	576, 1619, 586, 511, 513, 515, 517, 519, 879, 528,
	0, 530, 879, 541, 544, 549, 553, 554, 555, 556,
	557, 558, 0, 0, 0, 697, 0, 850, 897, 898,
	903, 907, 908, 911, 914, 915, 905, 1090, 865, 866,
	867, 891, 892, 727, 0, 0, 359, 1091, 992, 993,
	1047, 1048, 1049, 1050, 1051, 1092, 1093, 1419, 0, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, -2,
	-2, -2, -2, -2, -2, -2, -2, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, -2, -2,
	-2, 1130, 1131, -2, 1326, 1328, 0, 1381, 0, -2,
	0, -2, -2, -2, -2, 1144, 0, 1146, 1151, 1153,
	1155, 0, 0, 0, 0, 1380, 1165, 1364, 0, 0,
	1305, 1306, 1307, 1150, 0, 0, 1379, 1376, 0, 0,
	1329, 1210, 0, 0, 0, 1337, 1371, 1367, 0, 1439,
	1445, 1217, 890, 0, 0, 0, 0, 1224, 0, 1418,
	1074, 1075, 1076, 1077, 1078, 1079, 1088, 1285, 0, 0,
	0, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 0, 0, 0, 0, 0, 0, 0, 0, 1257,
	0, 1340, -2, -2, -2, -2, -2, -2, -2, 0,
	1259, 0, 0, 1271, 0, 1273, 0, 1261, 1331, 1350,
	0, 0, 1171, 0, 0, 0, 0, 1720, 0, 1264,
	1331, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 1363, 777, 874, 0, 0, 988, 0,
	0, 0, 1385, 988, 988, 0, 920, 0, 0, 0,
	0, 0, 0, 970, 974, 971, 972, 0, 0, 956,
	966, 933, 0, 0, 1421, 0, 941, -2, 966, 966,
	0, 943, 965, 0, 657, 955, 945, -2, 0, -2,
	0, 0, 0, 0, 743, 121, 1707, 0, 150, 0,
	0, 647, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 683, 684, 686, 692, 694, 0, 688, 1416,
	0, 689, 0, 691, 693, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 1392, 0, 0, 171, 968, 0, 1391, 1401, 0,
	192, 195, 181, 656, 0, 0, 0, 0, 595, -2,
	597, 599, 600, 601, 602, 1554, 1457, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 807, 0, 890, 0, 829, 815, 0,
	0, 0, 829, 833, 834, 836, 837, 0, 0, 986,
	272, 148, 148, 148, 1389, 148, 148, 169, 266, 269,
	329, 275, 322, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 0, 325, 0, 989, 991, 0, 1002, 0,
	1055, 0, 157, 180, 0, 0, 376, 381, 0, 569,
	0, 0, 392, 0, 785, 792, 0, 420, 0, 422,
	675, 1415, 1414, 0, 413, 493, 0, 587, 585, 527,
	531, 879, 533, 0, 570, 571, 575, 983, 0, 909,
	0, 906, 912, 913, 0, 894, 725, 726, 0, 0,
	0, -2, -2, 0, 0, 0, 1166, -2, 1145, 1148,
	1152, 1154, 1156, 0, 0, 0, 0, 0, 0, 0,
	1167, 1330, 0, 1374, 1377, -2, 0, 1332, 1335, 1336,
	0, 0, 1368, 0, 0, 0, 0, 0, 889, 890,
	890, 890, 1223, 0, 0, 0, 0, 0, 0, 1225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	1026, 0, 1256, 0, 1258, 1052, 1270, 1272, 1260, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1174, 1175, 1176, 0, 1330,
	1263, 1356, 1357, 0, 0, 1066, 1068, 1070, 1072, 0,
	0, 0, 0, 1269, 0, 1362, 879, 922, 917, 1383,
	969, 924, 926, 1384, 1424, 917, 917, 0, 1332, 958,
	0, 960, 0, 0, 0, 962, 0, 951, 0, 953,
	966, 938, 0, 0, 931, 0, 930, 956, 0, 942,
	944, 946, 1439, 657, 964, 0, 981, 0, 120, 731,
	0, 0, 1425, 0, 123, 1707, 131, 0, 624, 0,
	0, 0, 0, 0, 746, 132, 1707, 148, 1707, 148,
	133, 136, 0, 140, 138, 0, 0, 615, 101, 744,
	104, 0, 0, 737, 0, 687, 690, 696, 86, 0,
	739, 729, 0, 0, 728, 142, 105, 0, 0, 741,
	103, 0, 0, 0, 180, 0, 0, 1397, 1452, 197,
	199, 200, 198, 604, 0, 1457, 0, 1457, 0, 1429,
	593, 657, 0, 969, 681, 702, -2, 705, 707, 715,
	0, 0, 0, 803, 807, 0, 806, 877, 902, 987,
	808, 829, 0, 0, 0, 818, 820, 817, 814, 811,
	988, 0, 0, 0, 0, 0, 251, 254, 257, 260,
	263, 0, 178, 1586, 176, 173, 175, 336, 0, 0,
	0, 1334, 0, 994, 0, 0, 0, 0, 158, 340,
	0, 378, 0, 0, 0, 0, 0, 0, 389, 390,
	-2, 418, 419, 421, 417, 0, 529, 532, 540, 0,
	0, 893, 727, 0, 1094, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1365, 0, 0, 0, 1376, 1208,
	1209, -2, 1338, 1366, 1370, 0, 1440, 1444, 1218, 0,
	0, 0, 0, 1409, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 0, 1283, 1284, 1288, 1432, 0, 0, 1229, 0,
	0, 0, 0, 0, 0, 1339, 1349, 1351, 1172, 1173,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	-2, -2, -2, 1190, 1191, 1192, -2, -2, -2, 0,
	0, 0, 1352, 0, 0, 1354, 1355, 1359, 1360, 0,
	1266, 1267, 1268, 1361, 0, 919, 0, 923, 0, 919,
	919, 886, 959, 0, 977, 961, 936, 952, 0, 949,
	934, 0, 935, 0, 966, 956, 0, 963, 948, -2,
	0, 0, 0, 0, 149, 622, 646, 0, 0, 718,
	724, 724, 0, 1427, 1227, 1228, 0, 0, 0, 125,
	0, 0, 0, 0, 129, 0, 135, 139, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 111,
	114, 0, 0, 110, 0, 155, 0, 0, 612, 0,
	598, 0, 0, 0, 0, 596, 0, 223, 180, 678,
	700, 0, 0, 0, 0, 0, 805, 807, 0, 798,
	799, 829, 901, 809, 827, 828, 826, 0, 0, 0,
	890, 835, 832, 838, 839, 0, 164, 0, 0, 0,
	0, 338, 0, 0, 0, 995, 1003, 0, 1056, 342,
	0, 563, 564, 610, 0, 567, 494, 904, 910, 895,
	727, 0, 0, -2, 0, 1159, -2, -2, 1301, 1332,
	1375, 1369, 0, 1406, 890, 1219, 1221, 1222, 1089, 1290,
	1287, 0, 1274, 1239, 1240, 0, 1242, 1243, 1027, 1348,
	0, 0, 0, 0, 1332, 1303, 1265, 875, 1279, 0,
	0, 927, 1279, 1279, 0, 956, 954, 932, 928, 0,
	939, 966, 1440, 0, 733, 735, 122, 0, 623, 0,
	626, 0, 0, 0, 0, 633, 634, 0, 0, 0,
	0, 0, 648, 655, 0, 727, 0, 727, 0, 0,
	0, 0, 0, 145, 0, 0, 745, 0, 148, 148,
	0, 0, 732, 0, 0, 0, 0, 738, 740, 730,
	0, 742, 0, 170, 0, 591, 611, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 714, 0, 0, 0,
	795, 807, 0, 800, 801, 226, 0, 0, 0, 816,
	819, 821, 902, 0, 177, 0, 172, 174, 0, 0,
	990, 1054, 380, 382, 0, 0, 388, 565, 609, 0,
	0, 896, -2, -2, 1160, 1302, 1441, 1443, 0, 890,
	0, 1276, 0, -2, 0, 0, 0, 1304, 861, 0,
	918, 916, 862, 863, 976, 966, 0, 940, 124, 0,
	627, 628, 1428, 630, 0, 632, 635, 0, 637, 1459,
	0, 641, 604, 0, 652, 653, 719, 720, 723, 721,
	724, 890, 650, 0, 126, 127, 144, 152, 128, 134,
	0, 0, 0, 0, 890, 0, 0, 0, 967, 0,
	0, 655, 0, 645, 604, 594, 0, 715, 711, 0,
	0, 802, 803, 0, 0, 0, 829, 840, 179, 0,
	0, 0, 384, 0, 386, 0, 608, 0, 1220, 1293,
	0, 1241, -2, 0, 1198, 1278, 1280, 0, 937, 929,
	625, 629, 0, 0, 661, 0, 0, 612, 0, 727,
	0, 0, 154, 0, 0, 0, 734, 736, 0, 0,
	0, 113, 0, 644, 604, 655, 612, 655, 0, 0,
	804, 805, 0, 823, 988, 825, 830, 0, 0, 383,
	0, 0, 566, 0, 0, 0, 1289, 1199, 0, 0,
	0, 636, 666, 0, 0, 0, 649, 0, 722, 1218,
	657, 130, 0, 151, 0, 616, 0, 0, 619, 0,
	0, 0, 0, 0, 612, 604, 592, 604, 0, 0,
	796, 0, 824, 180, 180, 385, 387, 1286, 1291, 1294,
	-2, 1673, 1506, 0, 1292, 1281, 1282, 0, 638, 662,
	663, 0, 658, 659, 660, 1458, 639, 640, 654, 661,
	153, 613, 0, 0, 614, 0, 0, 116, 118, 0,
	642, 612, 612, 0, 712, 988, 161, 162, 0, 1296,
	1297, 1298, 1299, 1300, 631, 664, 0, 665, 0, 0,
	0, 666, 617, 0, 620, 0, 607, 643, 709, 655,
	822, 0, 667, 0, 670, 671, 0, 668, 651, 0,
	0, 603, 605, 606, 604, 1295, 669, 672, 673, 0,
	0, 612, 612, 0, 710, 618, 0, 0, 0, 612,
	621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 405, 3, 411, 406, 3,
	416, 417, 409, 407, 421, 408, 418, 410, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 425, 420,
	397, 399, 398, 401, 422, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 414, 3, 415, 412, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 423, 404, 424, 402,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 400,
	57740, 403, 57741, 413, 57742, 419, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1236
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1246
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1252
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1270
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1291
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1362
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1385
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return unimplemented(sqllex, "alter using")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1503
		{
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.str = "CSV"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1687
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.str = ""
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "CREATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1806
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "DELETE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "DELETE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{ /* SKIP DOC */
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "GRANT")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "RESET")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "RESET")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "USE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{ /* SKIP DOC */
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "USE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return unimplemented(sqllex, "set local")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			return unimplemented(sqllex, "set from current")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = tree.Low
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = tree.Normal
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = tree.High
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			return helpWith(sqllex, "SHOW")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.str = "client_encoding"
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.str = "timezone"
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2879
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = true
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = false
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2997
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3008
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3065
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			return unimplemented(sqllex, "match full")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			return unimplemented(sqllex, "match partial")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex, "match simple")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3788
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3879
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3887
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = nil
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = true
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = true
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4096
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = tree.Descending
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4151
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4153
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4197
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4289
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.str = ""
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4477
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4503
		{
			return helpWith(sqllex, "INSERT")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 830:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4644
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4645
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4669
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4768
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			return helpWith(sqllex, "SELECT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			return helpWith(sqllex, "VALUES")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			return helpWith(sqllex, "TABLE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			return helpWith(sqllex, "SELECT")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			return helpWith(sqllex, "TABLE")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4925
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4949
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4956
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4960
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = true
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = false
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = false
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = true
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4990
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5061
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5117
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5118
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5176
		{
			return helpWith(sqllex, "VALUES")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5178
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5215
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5293
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5313
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = nil
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = true
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = false
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5471
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5545
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5559
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = nil
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5777
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5861
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5914
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = tree.Year
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = tree.Month
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = tree.Day
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = tree.Month
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = nil
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = tree.Second
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6025
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6060
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6217
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6288
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6354
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6422
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6560
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6565
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6574
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6579
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6587
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6596
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6616
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6623
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6624
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6637
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6648
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6655
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6664
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6665
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6669
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6671
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6675
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6685
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6689
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6693
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6707
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6723
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6727
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6731
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6738
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6741
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6746
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6751
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6756
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6758
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6761
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6766
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6771
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6776
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6785
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6786
		{
			return unimplemented(sqllex, "treat")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6807
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6809
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6812
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6817
		{
			return unimplemented(sqllex, "within group")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6818
		{
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6822
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6826
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6833
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6837
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6843
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6853
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6861
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6865
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6869
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6876
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.str = ""
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6901
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6905
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6915
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6916
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6917
		{
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6920
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6921
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6927
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6928
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6929
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6930
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6931
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6942
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6946
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6952
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6958
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = tree.Any
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6968
		{
			sqlVAL.union.val = tree.Some
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6972
		{
			sqlVAL.union.val = tree.All
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6977
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6978
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6979
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6980
		{
			sqlVAL.union.val = tree.Div
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6981
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6982
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6983
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6984
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6985
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6986
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6987
		{
			sqlVAL.union.val = tree.LT
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6988
		{
			sqlVAL.union.val = tree.GT
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6989
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6990
		{
			sqlVAL.union.val = tree.LE
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6991
		{
			sqlVAL.union.val = tree.GE
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6992
		{
			sqlVAL.union.val = tree.NE
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = tree.Like
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6997
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6998
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6999
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7017
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7027
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7037
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7041
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7047
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7057
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7061
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7083
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7087
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7091
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7097
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7108
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7125
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7129
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7133
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7137
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7147
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7159
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7163
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7167
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7173
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7177
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7188
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7195
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7205
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7215
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7222
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7228
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7232
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7239
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7245
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7254
		{
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7255
		{
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7259
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7269
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7286
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7294
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7304
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7314
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7321
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7349
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7353
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7357
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7363
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7374
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7378
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7382
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7386
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7389
		{
			return unimplemented(sqllex, "func const")
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7391
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7395
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7398
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7400
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7404
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7408
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7415
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7419
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7428
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7439
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7449
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7545
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7552
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7556
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7560
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7574
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7578
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7582
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7595
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7613
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7623
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7627
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7641
		{
			sqlVAL.str = ""
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7647
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7651
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
