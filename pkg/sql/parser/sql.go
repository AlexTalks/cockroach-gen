// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:558
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8312

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 896,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 731,
	-2, 0,
	-1, 60,
	101, 896,
	174, 896,
	376, 896,
	377, 896,
	-2, 0,
	-1, 74,
	113, 870,
	127, 870,
	182, 870,
	208, 870,
	239, 870,
	247, 870,
	373, 870,
	-2, 859,
	-1, 110,
	198, 548,
	363, 548,
	-2, 0,
	-1, 115,
	4, 898,
	20, 898,
	21, 898,
	22, 898,
	23, 898,
	25, 898,
	30, 898,
	35, 898,
	36, 898,
	37, 898,
	38, 898,
	39, 898,
	40, 898,
	41, 898,
	42, 898,
	43, 898,
	44, 898,
	46, 898,
	47, 898,
	48, 898,
	49, 898,
	50, 898,
	51, 898,
	54, 898,
	55, 898,
	56, 898,
	58, 898,
	59, 898,
	63, 898,
	64, 898,
	65, 898,
	66, 898,
	67, 898,
	69, 898,
	70, 898,
	71, 898,
	72, 898,
	74, 898,
	76, 898,
	77, 898,
	80, 898,
	81, 898,
	82, 898,
	90, 898,
	91, 898,
	92, 898,
	93, 898,
	94, 898,
	95, 898,
	96, 898,
	97, 898,
	99, 898,
	101, 898,
	103, 898,
	106, 898,
	107, 898,
	109, 898,
	110, 898,
	114, 898,
	115, 898,
	116, 898,
	117, 898,
	118, 898,
	119, 898,
	120, 898,
	121, 898,
	122, 898,
	123, 898,
	124, 898,
	132, 898,
	133, 898,
	134, 898,
	135, 898,
	136, 898,
	137, 898,
	139, 898,
	141, 898,
	145, 898,
	147, 898,
	148, 898,
	150, 898,
	152, 898,
	153, 898,
	154, 898,
	155, 898,
	156, 898,
	157, 898,
	158, 898,
	159, 898,
	160, 898,
	163, 898,
	164, 898,
	169, 898,
	170, 898,
	171, 898,
	174, 898,
	175, 898,
	176, 898,
	177, 898,
	178, 898,
	179, 898,
	180, 898,
	181, 898,
	183, 898,
	185, 898,
	188, 898,
	189, 898,
	190, 898,
	192, 898,
	193, 898,
	196, 898,
	197, 898,
	198, 898,
	200, 898,
	201, 898,
	203, 898,
	205, 898,
	206, 898,
	209, 898,
	210, 898,
	213, 898,
	215, 898,
	218, 898,
	219, 898,
	220, 898,
	221, 898,
	222, 898,
	223, 898,
	224, 898,
	226, 898,
	227, 898,
	228, 898,
	229, 898,
	234, 898,
	235, 898,
	236, 898,
	237, 898,
	238, 898,
	240, 898,
	241, 898,
	243, 898,
	244, 898,
	245, 898,
	248, 898,
	249, 898,
	251, 898,
	253, 898,
	254, 898,
	255, 898,
	256, 898,
	257, 898,
	258, 898,
	259, 898,
	260, 898,
	261, 898,
	263, 898,
	264, 898,
	265, 898,
	266, 898,
	267, 898,
	269, 898,
	270, 898,
	271, 898,
	272, 898,
	273, 898,
	274, 898,
	275, 898,
	276, 898,
	277, 898,
	279, 898,
	280, 898,
	281, 898,
	282, 898,
	283, 898,
	285, 898,
	286, 898,
	287, 898,
	288, 898,
	289, 898,
	290, 898,
	291, 898,
	293, 898,
	295, 898,
	296, 898,
	297, 898,
	298, 898,
	299, 898,
	300, 898,
	302, 898,
	303, 898,
	304, 898,
	305, 898,
	306, 898,
	307, 898,
	308, 898,
	310, 898,
	311, 898,
	312, 898,
	313, 898,
	314, 898,
	315, 898,
	316, 898,
	317, 898,
	318, 898,
	320, 898,
	321, 898,
	322, 898,
	323, 898,
	325, 898,
	326, 898,
	327, 898,
	328, 898,
	330, 898,
	331, 898,
	332, 898,
	333, 898,
	334, 898,
	335, 898,
	336, 898,
	337, 898,
	338, 898,
	339, 898,
	340, 898,
	341, 898,
	343, 898,
	344, 898,
	346, 898,
	347, 898,
	348, 898,
	349, 898,
	350, 898,
	351, 898,
	352, 898,
	353, 898,
	354, 898,
	355, 898,
	357, 898,
	358, 898,
	359, 898,
	360, 898,
	363, 898,
	364, 898,
	365, 898,
	366, 898,
	368, 898,
	369, 898,
	371, 898,
	372, 898,
	375, 898,
	376, 898,
	377, 898,
	378, 898,
	380, 898,
	382, 898,
	383, 898,
	384, 898,
	385, 898,
	386, 898,
	387, 898,
	390, 898,
	391, 898,
	396, 898,
	397, 898,
	398, 898,
	399, 898,
	400, 898,
	401, 898,
	-2, 0,
	-1, 136,
	113, 869,
	127, 869,
	182, 869,
	208, 869,
	239, 869,
	247, 869,
	373, 869,
	-2, 862,
	-1, 141,
	1, 792,
	188, 792,
	269, 792,
	274, 792,
	427, 792,
	428, 792,
	-2, 0,
	-1, 143,
	1, 792,
	427, 792,
	428, 792,
	-2, 0,
	-1, 144,
	1, 792,
	427, 792,
	428, 792,
	-2, 0,
	-1, 145,
	1, 796,
	427, 796,
	428, 796,
	-2, 0,
	-1, 171,
	4, 905,
	5, 905,
	6, 905,
	7, 905,
	8, 905,
	9, 905,
	20, 905,
	21, 905,
	22, 905,
	23, 905,
	25, 905,
	30, 905,
	31, 905,
	35, 905,
	36, 905,
	37, 905,
	38, 905,
	39, 905,
	40, 905,
	41, 905,
	42, 905,
	43, 905,
	44, 905,
	46, 905,
	47, 905,
	48, 905,
	49, 905,
	50, 905,
	51, 905,
	52, 905,
	53, 905,
	54, 905,
	55, 905,
	56, 905,
	58, 905,
	59, 905,
	61, 905,
	63, 905,
	64, 905,
	65, 905,
	66, 905,
	67, 905,
	69, 905,
	70, 905,
	71, 905,
	72, 905,
	74, 905,
	76, 905,
	77, 905,
	79, 905,
	80, 905,
	81, 905,
	82, 905,
	83, 905,
	84, 905,
	85, 905,
	86, 905,
	87, 905,
	88, 905,
	89, 905,
	90, 905,
	91, 905,
	92, 905,
	93, 905,
	94, 905,
	95, 905,
	96, 905,
	97, 905,
	98, 905,
	99, 905,
	101, 905,
	103, 905,
	106, 905,
	107, 905,
	109, 905,
	110, 905,
	114, 905,
	115, 905,
	116, 905,
	117, 905,
	118, 905,
	119, 905,
	120, 905,
	121, 905,
	122, 905,
	123, 905,
	124, 905,
	125, 905,
	126, 905,
	132, 905,
	133, 905,
	134, 905,
	135, 905,
	136, 905,
	137, 905,
	139, 905,
	141, 905,
	144, 905,
	145, 905,
	147, 905,
	148, 905,
	150, 905,
	152, 905,
	153, 905,
	154, 905,
	155, 905,
	156, 905,
	157, 905,
	158, 905,
	159, 905,
	160, 905,
	161, 905,
	163, 905,
	164, 905,
	169, 905,
	170, 905,
	171, 905,
	173, 905,
	174, 905,
	175, 905,
	176, 905,
	177, 905,
	178, 905,
	179, 905,
	180, 905,
	181, 905,
	183, 905,
	185, 905,
	186, 905,
	187, 905,
	188, 905,
	189, 905,
	190, 905,
	191, 905,
	192, 905,
	193, 905,
	196, 905,
	197, 905,
	198, 905,
	200, 905,
	201, 905,
	203, 905,
	204, 905,
	205, 905,
	206, 905,
	207, 905,
	209, 905,
	210, 905,
	213, 905,
	215, 905,
	216, 905,
	217, 905,
	218, 905,
	219, 905,
	220, 905,
	221, 905,
	222, 905,
	223, 905,
	224, 905,
	225, 905,
	226, 905,
	227, 905,
	228, 905,
	229, 905,
	230, 905,
	232, 905,
	233, 905,
	234, 905,
	235, 905,
	236, 905,
	237, 905,
	238, 905,
	240, 905,
	241, 905,
	244, 905,
	245, 905,
	248, 905,
	249, 905,
	250, 905,
	251, 905,
	252, 905,
	253, 905,
	254, 905,
	255, 905,
	256, 905,
	257, 905,
	258, 905,
	259, 905,
	260, 905,
	261, 905,
	263, 905,
	264, 905,
	265, 905,
	266, 905,
	267, 905,
	269, 905,
	270, 905,
	271, 905,
	272, 905,
	273, 905,
	274, 905,
	275, 905,
	276, 905,
	277, 905,
	279, 905,
	280, 905,
	281, 905,
	282, 905,
	283, 905,
	285, 905,
	286, 905,
	287, 905,
	288, 905,
	289, 905,
	290, 905,
	291, 905,
	293, 905,
	294, 905,
	295, 905,
	296, 905,
	297, 905,
	298, 905,
	299, 905,
	300, 905,
	302, 905,
	303, 905,
	304, 905,
	305, 905,
	306, 905,
	307, 905,
	308, 905,
	310, 905,
	311, 905,
	312, 905,
	313, 905,
	314, 905,
	315, 905,
	316, 905,
	317, 905,
	318, 905,
	319, 905,
	320, 905,
	321, 905,
	322, 905,
	323, 905,
	324, 905,
	325, 905,
	326, 905,
	327, 905,
	328, 905,
	330, 905,
	331, 905,
	332, 905,
	333, 905,
	334, 905,
	335, 905,
	336, 905,
	337, 905,
	338, 905,
	339, 905,
	340, 905,
	341, 905,
	343, 905,
	344, 905,
	346, 905,
	347, 905,
	348, 905,
	349, 905,
	350, 905,
	351, 905,
	352, 905,
	353, 905,
	354, 905,
	355, 905,
	357, 905,
	358, 905,
	359, 905,
	360, 905,
	363, 905,
	364, 905,
	365, 905,
	366, 905,
	367, 905,
	368, 905,
	369, 905,
	371, 905,
	372, 905,
	375, 905,
	376, 905,
	377, 905,
	378, 905,
	379, 905,
	380, 905,
	382, 905,
	383, 905,
	384, 905,
	385, 905,
	386, 905,
	387, 905,
	390, 905,
	391, 905,
	396, 905,
	397, 905,
	398, 905,
	399, 905,
	400, 905,
	401, 905,
	402, 905,
	410, 905,
	415, 905,
	416, 905,
	417, 905,
	424, 905,
	430, 905,
	-2, 0,
	-1, 174,
	1, 57,
	428, 57,
	-2, 896,
	-1, 207,
	426, 1477,
	429, 1477,
	-2, 591,
	-1, 208,
	426, 1479,
	429, 1479,
	-2, 592,
	-1, 209,
	426, 1478,
	429, 1478,
	-2, 593,
	-1, 210,
	429, 1419,
	-2, 594,
	-1, 621,
	143, 1593,
	361, 1593,
	407, 1593,
	426, 1593,
	-2, 0,
	-1, 622,
	143, 1515,
	361, 1515,
	407, 1515,
	426, 1515,
	-2, 0,
	-1, 624,
	143, 1670,
	361, 1670,
	407, 1670,
	426, 1670,
	-2, 0,
	-1, 626,
	143, 1699,
	361, 1699,
	407, 1699,
	426, 1699,
	-2, 0,
	-1, 633,
	143, 1600,
	361, 1600,
	407, 1600,
	426, 1600,
	-2, 420,
	-1, 668,
	1, 520,
	423, 520,
	425, 520,
	427, 520,
	428, 520,
	-2, 0,
	-1, 669,
	1, 590,
	140, 590,
	423, 590,
	425, 590,
	427, 590,
	428, 590,
	-2, 0,
	-1, 675,
	1, 534,
	423, 534,
	425, 534,
	427, 534,
	428, 534,
	-2, 0,
	-1, 677,
	1, 538,
	423, 538,
	425, 538,
	427, 538,
	428, 538,
	-2, 0,
	-1, 680,
	1, 549,
	423, 549,
	425, 549,
	427, 549,
	428, 549,
	-2, 0,
	-1, 681,
	1, 555,
	423, 555,
	425, 555,
	427, 555,
	428, 555,
	-2, 0,
	-1, 682,
	1, 558,
	423, 558,
	425, 558,
	427, 558,
	428, 558,
	-2, 0,
	-1, 686,
	1, 572,
	423, 572,
	425, 572,
	427, 572,
	428, 572,
	-2, 0,
	-1, 687,
	1, 574,
	423, 574,
	425, 574,
	427, 574,
	428, 574,
	-2, 0,
	-1, 715,
	127, 909,
	208, 909,
	239, 909,
	-2, 865,
	-1, 723,
	127, 908,
	208, 908,
	239, 908,
	-2, 863,
	-1, 750,
	424, 1774,
	-2, 1191,
	-1, 751,
	424, 1775,
	-2, 1192,
	-1, 780,
	424, 1471,
	-2, 1462,
	-1, 781,
	5, 1047,
	424, 1486,
	-2, 1477,
	-1, 782,
	424, 1487,
	-2, 1478,
	-1, 789,
	5, 1031,
	-2, 1507,
	-1, 790,
	5, 1032,
	-2, 1511,
	-1, 791,
	5, 1033,
	-2, 1510,
	-1, 792,
	5, 1034,
	-2, 1695,
	-1, 793,
	5, 1035,
	-2, 1602,
	-1, 794,
	5, 1036,
	-2, 1663,
	-1, 795,
	5, 1037,
	-2, 1665,
	-1, 796,
	5, 1038,
	-2, 1666,
	-1, 797,
	5, 1039,
	-2, 1667,
	-1, 798,
	5, 1040,
	-2, 1675,
	-1, 799,
	5, 1041,
	-2, 1707,
	-1, 800,
	5, 1042,
	-2, 1570,
	-1, 801,
	5, 1043,
	-2, 1506,
	-1, 802,
	5, 1044,
	-2, 1610,
	-1, 803,
	5, 1045,
	-2, 1611,
	-1, 804,
	5, 1046,
	-2, 1574,
	-1, 805,
	5, 1095,
	424, 1095,
	-2, 1741,
	-1, 825,
	5, 1068,
	-2, 1508,
	-1, 826,
	5, 1086,
	-2, 1535,
	-1, 828,
	5, 1060,
	-2, 1557,
	-1, 829,
	5, 1061,
	-2, 1558,
	-1, 830,
	5, 1052,
	-2, 1573,
	-1, 831,
	5, 1053,
	-2, 1575,
	-1, 832,
	5, 1054,
	-2, 1576,
	-1, 833,
	5, 1055,
	-2, 1577,
	-1, 834,
	5, 1019,
	-2, 1583,
	-1, 835,
	5, 1020,
	-2, 1584,
	-1, 836,
	5, 1083,
	-2, 1685,
	-1, 837,
	5, 1093,
	-2, 1697,
	-1, 838,
	5, 1058,
	-2, 1721,
	-1, 839,
	5, 1085,
	-2, 1722,
	-1, 840,
	5, 1067,
	-2, 1723,
	-1, 841,
	5, 1085,
	-2, 1724,
	-1, 842,
	5, 1085,
	-2, 1725,
	-1, 843,
	5, 1050,
	-2, 1728,
	-1, 844,
	5, 1050,
	-2, 1729,
	-1, 847,
	5, 1075,
	-2, 1733,
	-1, 849,
	5, 1051,
	-2, 1739,
	-1, 850,
	5, 1056,
	-2, 1740,
	-1, 852,
	5, 1050,
	-2, 1745,
	-1, 855,
	5, 1059,
	-2, 1750,
	-1, 856,
	5, 1057,
	-2, 1752,
	-1, 858,
	5, 1087,
	-2, 1754,
	-1, 859,
	5, 1089,
	-2, 1755,
	-1, 860,
	5, 1091,
	-2, 1756,
	-1, 863,
	5, 1082,
	-2, 1760,
	-1, 933,
	424, 1486,
	-2, 1477,
	-1, 948,
	285, 1459,
	417, 1459,
	-2, 1458,
	-1, 1098,
	258, 894,
	-2, 717,
	-1, 1107,
	242, 1481,
	-2, 0,
	-1, 1150,
	1, 287,
	423, 287,
	425, 287,
	427, 287,
	428, 287,
	-2, 868,
	-1, 1153,
	4, 1759,
	10, 1759,
	11, 1759,
	13, 1759,
	14, 1759,
	15, 1759,
	16, 1759,
	17, 1759,
	18, 1759,
	20, 1759,
	21, 1759,
	22, 1759,
	23, 1759,
	25, 1759,
	28, 1759,
	30, 1759,
	32, 1759,
	35, 1759,
	36, 1759,
	37, 1759,
	38, 1759,
	39, 1759,
	40, 1759,
	41, 1759,
	42, 1759,
	43, 1759,
	44, 1759,
	46, 1759,
	47, 1759,
	48, 1759,
	49, 1759,
	50, 1759,
	51, 1759,
	54, 1759,
	55, 1759,
	56, 1759,
	58, 1759,
	59, 1759,
	60, 1759,
	63, 1759,
	64, 1759,
	65, 1759,
	66, 1759,
	67, 1759,
	68, 1759,
	69, 1759,
	70, 1759,
	71, 1759,
	72, 1759,
	74, 1759,
	75, 1759,
	76, 1759,
	77, 1759,
	79, 1759,
	80, 1759,
	81, 1759,
	82, 1759,
	90, 1759,
	91, 1759,
	92, 1759,
	93, 1759,
	94, 1759,
	95, 1759,
	96, 1759,
	97, 1759,
	99, 1759,
	101, 1759,
	103, 1759,
	106, 1759,
	107, 1759,
	109, 1759,
	110, 1759,
	114, 1759,
	115, 1759,
	116, 1759,
	117, 1759,
	118, 1759,
	119, 1759,
	120, 1759,
	121, 1759,
	122, 1759,
	123, 1759,
	124, 1759,
	128, 1759,
	129, 1759,
	130, 1759,
	131, 1759,
	132, 1759,
	133, 1759,
	134, 1759,
	135, 1759,
	136, 1759,
	137, 1759,
	138, 1759,
	139, 1759,
	141, 1759,
	144, 1759,
	145, 1759,
	147, 1759,
	148, 1759,
	150, 1759,
	152, 1759,
	153, 1759,
	154, 1759,
	155, 1759,
	156, 1759,
	157, 1759,
	158, 1759,
	159, 1759,
	160, 1759,
	161, 1759,
	162, 1759,
	163, 1759,
	164, 1759,
	165, 1759,
	166, 1759,
	167, 1759,
	169, 1759,
	170, 1759,
	171, 1759,
	173, 1759,
	174, 1759,
	175, 1759,
	176, 1759,
	177, 1759,
	178, 1759,
	179, 1759,
	180, 1759,
	181, 1759,
	183, 1759,
	185, 1759,
	186, 1759,
	187, 1759,
	188, 1759,
	189, 1759,
	190, 1759,
	191, 1759,
	192, 1759,
	193, 1759,
	194, 1759,
	195, 1759,
	196, 1759,
	197, 1759,
	198, 1759,
	200, 1759,
	201, 1759,
	203, 1759,
	204, 1759,
	205, 1759,
	206, 1759,
	207, 1759,
	209, 1759,
	210, 1759,
	213, 1759,
	214, 1759,
	215, 1759,
	218, 1759,
	219, 1759,
	220, 1759,
	221, 1759,
	222, 1759,
	223, 1759,
	224, 1759,
	225, 1759,
	226, 1759,
	227, 1759,
	228, 1759,
	229, 1759,
	232, 1759,
	234, 1759,
	235, 1759,
	236, 1759,
	237, 1759,
	238, 1759,
	240, 1759,
	241, 1759,
	244, 1759,
	245, 1759,
	246, 1759,
	248, 1759,
	249, 1759,
	251, 1759,
	253, 1759,
	254, 1759,
	255, 1759,
	256, 1759,
	257, 1759,
	258, 1759,
	259, 1759,
	260, 1759,
	261, 1759,
	263, 1759,
	264, 1759,
	265, 1759,
	266, 1759,
	267, 1759,
	269, 1759,
	270, 1759,
	271, 1759,
	272, 1759,
	273, 1759,
	274, 1759,
	275, 1759,
	276, 1759,
	277, 1759,
	279, 1759,
	280, 1759,
	281, 1759,
	282, 1759,
	283, 1759,
	284, 1759,
	285, 1759,
	286, 1759,
	287, 1759,
	288, 1759,
	289, 1759,
	290, 1759,
	291, 1759,
	293, 1759,
	294, 1759,
	295, 1759,
	296, 1759,
	297, 1759,
	298, 1759,
	299, 1759,
	300, 1759,
	301, 1759,
	302, 1759,
	303, 1759,
	304, 1759,
	305, 1759,
	306, 1759,
	307, 1759,
	308, 1759,
	310, 1759,
	311, 1759,
	312, 1759,
	313, 1759,
	314, 1759,
	315, 1759,
	316, 1759,
	317, 1759,
	318, 1759,
	320, 1759,
	321, 1759,
	322, 1759,
	323, 1759,
	324, 1759,
	325, 1759,
	326, 1759,
	327, 1759,
	328, 1759,
	330, 1759,
	331, 1759,
	332, 1759,
	333, 1759,
	334, 1759,
	335, 1759,
	336, 1759,
	337, 1759,
	338, 1759,
	339, 1759,
	340, 1759,
	341, 1759,
	343, 1759,
	344, 1759,
	346, 1759,
	347, 1759,
	348, 1759,
	349, 1759,
	350, 1759,
	351, 1759,
	352, 1759,
	353, 1759,
	354, 1759,
	355, 1759,
	357, 1759,
	358, 1759,
	359, 1759,
	360, 1759,
	363, 1759,
	364, 1759,
	365, 1759,
	366, 1759,
	368, 1759,
	369, 1759,
	371, 1759,
	372, 1759,
	375, 1759,
	376, 1759,
	377, 1759,
	378, 1759,
	380, 1759,
	382, 1759,
	383, 1759,
	384, 1759,
	385, 1759,
	386, 1759,
	387, 1759,
	390, 1759,
	391, 1759,
	396, 1759,
	397, 1759,
	398, 1759,
	399, 1759,
	400, 1759,
	401, 1759,
	402, 1759,
	403, 1759,
	405, 1759,
	406, 1759,
	407, 1759,
	408, 1759,
	409, 1759,
	410, 1759,
	412, 1759,
	413, 1759,
	414, 1759,
	415, 1759,
	416, 1759,
	417, 1759,
	418, 1759,
	419, 1759,
	420, 1759,
	422, 1759,
	425, 1759,
	426, 1759,
	429, 1759,
	430, 1759,
	-2, 0,
	-1, 1172,
	143, 1670,
	361, 1670,
	407, 1670,
	426, 1670,
	-2, 0,
	-1, 1204,
	143, 1699,
	361, 1699,
	407, 1699,
	426, 1699,
	-2, 0,
	-1, 1205,
	188, 804,
	269, 804,
	274, 804,
	-2, 407,
	-1, 1284,
	127, 908,
	208, 908,
	239, 908,
	-2, 866,
	-1, 1368,
	113, 870,
	127, 870,
	182, 870,
	208, 870,
	239, 870,
	247, 870,
	373, 870,
	-2, 1234,
	-1, 1418,
	425, 1354,
	-2, 0,
	-1, 1426,
	188, 804,
	269, 804,
	274, 804,
	-2, 799,
	-1, 1460,
	113, 870,
	127, 870,
	182, 870,
	208, 870,
	239, 870,
	247, 870,
	373, 870,
	-2, 978,
	-1, 1665,
	188, 804,
	269, 804,
	274, 804,
	-2, 409,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1130,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1131,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1132,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1133,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1134,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1135,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1149,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1150,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1151,
	-1, 1799,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1156,
	-1, 1805,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1158,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1162,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1163,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1164,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1165,
	-1, 1891,
	5, 1047,
	143, 1365,
	424, 1486,
	-2, 1477,
	-1, 1892,
	143, 1366,
	-2, 1717,
	-1, 1893,
	143, 1367,
	-2, 1597,
	-1, 1894,
	143, 1368,
	-2, 1536,
	-1, 1895,
	143, 1369,
	-2, 1565,
	-1, 1896,
	143, 1370,
	-2, 1596,
	-1, 1897,
	143, 1371,
	-2, 1662,
	-1, 1971,
	1, 979,
	79, 979,
	113, 979,
	127, 979,
	144, 979,
	149, 979,
	151, 979,
	173, 979,
	182, 979,
	191, 979,
	204, 979,
	208, 979,
	225, 979,
	239, 979,
	242, 979,
	247, 979,
	292, 979,
	294, 979,
	373, 979,
	381, 979,
	393, 979,
	394, 979,
	404, 979,
	423, 979,
	425, 979,
	427, 979,
	428, 979,
	429, 979,
	-2, 978,
	-1, 1976,
	424, 1463,
	-2, 1475,
	-1, 2058,
	425, 1424,
	429, 1424,
	-2, 1451,
	-1, 2181,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1157,
	-1, 2182,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1159,
	-1, 2187,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1160,
	-1, 2417,
	258, 894,
	-2, 717,
	-1, 2483,
	188, 804,
	269, 804,
	274, 804,
	-2, 406,
	-1, 2498,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1161,
	-1, 2503,
	186, 0,
	187, 0,
	232, 0,
	-2, 1179,
	-1, 2564,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1209,
	-1, 2565,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1210,
	-1, 2566,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1211,
	-1, 2570,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1215,
	-1, 2571,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1216,
	-1, 2572,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1217,
	-1, 2614,
	424, 1464,
	-2, 1476,
	-1, 2725,
	186, 0,
	187, 0,
	232, 0,
	-2, 1180,
	-1, 2728,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1183,
	-1, 2729,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1185,
	-1, 2873,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1184,
	-1, 2874,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1186,
	-1, 2884,
	186, 0,
	-2, 1218,
	-1, 2972,
	186, 0,
	-2, 1219,
	-1, 3068,
	38, 0,
	161, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1720,
}

const sqlPrivate = 57344

const sqlLast = 59691

var sqlAct = [...]int{

	782, 2660, 3067, 2912, 1931, 3076, 2826, 2084, 3130, 3031,
	3046, 3044, 3078, 2901, 3077, 2092, 2534, 3043, 2841, 2976,
	1762, 1140, 1082, 2864, 3066, 2175, 952, 2678, 2673, 2432,
	2796, 2623, 1963, 2113, 2215, 2217, 2781, 1822, 724, 1287,
	1595, 209, 1455, 2683, 2455, 1056, 498, 2624, 2888, 2424,
	2437, 1596, 2081, 498, 2060, 2056, 2426, 2457, 2335, 493,
	498, 1104, 2324, 498, 1453, 1463, 498, 209, 1136, 498,
	498, 968, 2759, 962, 945, 1173, 498, 2300, 1434, 2282,
	2093, 758, 1546, 2041, 498, 1373, 569, 28, 1545, 1542,
	1551, 1988, 1959, 1554, 2587, 2059, 548, 1964, 2977, 2311,
	2281, 1834, 1753, 1492, 1376, 1862, 1748, 2171, 1508, 1690,
	2436, 544, 73, 1979, 1426, 1966, 1543, 1514, 765, 2400,
	2015, 1471, 1473, 1435, 1928, 1819, 2016, 583, 732, 130,
	1844, 1207, 1406, 2042, 1856, 918, 1133, 954, 1404, 2086,
	1151, 2057, 210, 1951, 211, 921, 1887, 1835, 2063, 1444,
	2827, 1363, 495, 1288, 494, 900, 136, 631, 1286, 1936,
	205, 137, 611, 625, 773, 1689, 498, 498, 1149, 1561,
	586, 1123, 1120, 723, 1484, 541, 1060, 923, 898, 1425,
	660, 596, 1292, 2202, 2603, 1945, 1567, 2604, 2114, 130,
	1569, 728, 1569, 478, 1569, 481, 604, 2043, 498, 498,
	498, 957, 498, 498, 971, 971, 3157, 3151, 3150, 1531,
	1945, 1945, 1945, 498, 498, 1454, 2085, 2496, 2043, 478,
	3127, 481, 1581, 3027, 2795, 3124, 3102, 598, 3096, 1523,
	2795, 3095, 1945, 3092, 3089, 1945, 3086, 3093, 3090, 915,
	1523, 3064, 3063, 2590, 2116, 1523, 1523, 779, 926, 3062,
	738, 729, 2443, 1581, 3061, 728, 2473, 2444, 1581, 948,
	1081, 28, 3026, 2413, 3013, 3006, 2124, 2625, 1523, 2795,
	3004, 965, 3002, 2974, 2795, 2957, 2795, 2124, 1523, 2699,
	1938, 901, 901, 1517, 2342, 2947, 2942, 716, 2960, 2795,
	1523, 2940, 715, 2930, 2929, 2795, 2922, 1523, 1523, 1190,
	1523, 2921, 2894, 130, 2875, 2795, 1523, 2821, 2124, 2817,
	2794, 1945, 2727, 1945, 2795, 2697, 2124, 2689, 2609, 2690,
	733, 2690, 2610, 2599, 2593, 1075, 2512, 2600, 1945, 1179,
	1523, 1581, 2507, 938, 942, 947, 1945, 2463, 2297, 2249,
	2248, 2405, 1945, 1945, 1945, 902, 2242, 2241, 2208, 2142,
	2243, 1945, 1523, 1945, 2209, 1062, 545, 1061, 2123, 2112,
	2109, 2590, 2124, 1586, 1945, 478, 2052, 481, 1944, 904,
	1523, 905, 1945, 1945, 1585, 1859, 1303, 1304, 1586, 576,
	1937, 547, 171, 1668, 2699, 2031, 1977, 2405, 2174, 2153,
	40, 1522, 1430, 1839, 1059, 174, 2445, 1180, 1171, 1170,
	171, 1306, 1303, 1304, 44, 1336, 1337, 1338, 1346, 1347,
	1348, 1169, 1168, 1167, 1962, 2446, 1080, 1166, 173, 1687,
	1165, 929, 2089, 1063, 1164, 1163, 1305, 1306, 1162, 1570,
	1352, 1570, 575, 1570, 1860, 2774, 173, 2216, 1161, 1160,
	1159, 1158, 1157, 1156, 1155, 906, 903, 722, 1069, 721,
	720, 719, 1305, 1303, 1304, 718, 714, 778, 713, 172,
	1325, 577, 712, 711, 710, 709, 708, 1322, 165, 707,
	59, 579, 706, 705, 704, 60, 166, 172, 1306, 700,
	699, 1074, 731, 698, 658, 657, 656, 655, 654, 653,
	652, 651, 650, 649, 648, 647, 646, 138, 1861, 1858,
	2911, 645, 644, 1305, 1311, 643, 642, 498, 498, 63,
	498, 957, 957, 498, 641, 138, 498, 640, 1970, 498,
	1328, 1329, 1330, 1331, 639, 498, 638, 637, 636, 635,
	1311, 1333, 1334, 1335, 620, 498, 498, 498, 498, 498,
	957, 957, 1180, 2443, 619, 618, 617, 957, 616, 1523,
	615, 532, 1143, 1343, 1353, 2254, 2255, 1333, 1334, 1335,
	531, 504, 1144, 2254, 2255, 503, 1937, 171, 1577, 1097,
	1568, 502, 1732, 484, 1068, 483, 1073, 482, 1079, 498,
	1326, 1311, 195, 2732, 1094, 1180, 1320, 1321, 1863, 1109,
	194, 193, 498, 192, 191, 190, 189, 188, 187, 1341,
	186, 185, 184, 173, 1303, 1304, 1326, 183, 1333, 1334,
	1335, 182, 1137, 64, 498, 181, 180, 179, 969, 1057,
	178, 177, 176, 175, 2691, 498, 2607, 2338, 2214, 1306,
	1374, 928, 171, 171, 146, 2254, 2255, 2204, 2163, 39,
	2053, 2046, 139, 66, 172, 67, 1877, 780, 1456, 1875,
	40, 141, 1693, 165, 1305, 1470, 1873, 1326, 1871, 729,
	1122, 166, 1380, 171, 44, 957, 1221, 1327, 173, 173,
	1299, 2849, 1084, 1869, 578, 1065, 1332, 110, 46, 143,
	1857, 1183, 138, 2260, 1152, 3083, 3065, 3048, 1188, 2967,
	45, 2260, 51, 1327, 2943, 1303, 1304, 2963, 2862, 173,
	2758, 2757, 498, 2751, 2129, 1830, 2961, 1127, 1130, 172,
	172, 2744, 2743, 52, 2742, 2738, 1344, 54, 165, 165,
	1306, 58, 2737, 2736, 2735, 144, 166, 166, 2710, 2708,
	59, 72, 1311, 2613, 2584, 60, 61, 2583, 2582, 1215,
	172, 1205, 2520, 1219, 1327, 1305, 2408, 138, 2088, 165,
	2404, 1284, 2333, 950, 1285, 171, 2293, 166, 2280, 2270,
	62, 1371, 2253, 2260, 2250, 2247, 2246, 2270, 2244, 63,
	2222, 2221, 2203, 1971, 1299, 1592, 914, 1384, 546, 1314,
	1315, 1307, 1308, 1309, 1310, 1312, 1313, 1298, 1202, 171,
	1377, 173, 1366, 3155, 1342, 3138, 3137, 1317, 1318, 1324,
	1323, 1319, 1345, 1528, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 1083, 1526, 2536, 2126, 3056, 3051, 2254,
	2255, 932, 3008, 1311, 2999, 173, 2998, 1688, 2017, 2994,
	1831, 2993, 172, 2988, 2985, 2959, 2170, 1283, 2958, 1824,
	2907, 165, 1222, 2886, 2836, 2831, 2271, 2829, 771, 166,
	1333, 1334, 1335, 2848, 2271, 1316, 1314, 1315, 1307, 1308,
	1309, 1310, 1312, 1313, 2816, 2773, 172, 2467, 2756, 729,
	138, 1303, 1304, 64, 2700, 165, 2676, 2667, 2666, 2664,
	2641, 65, 2640, 166, 2630, 2629, 2595, 2502, 2469, 716,
	2389, 2254, 2255, 2373, 715, 498, 1306, 2352, 2351, 1326,
	498, 75, 139, 66, 138, 67, 2296, 68, 2231, 1295,
	1296, 145, 2230, 2227, 1367, 1300, 69, 2196, 1441, 1407,
	1412, 1305, 2910, 171, 1432, 2131, 498, 1974, 1956, 1943,
	1867, 1537, 1469, 1433, 83, 1424, 1423, 110, 1418, 1417,
	1416, 1414, 1413, 1410, 1409, 1400, 142, 2260, 1399, 2269,
	1398, 1397, 1396, 1395, 1303, 1304, 1394, 1393, 1392, 173,
	2256, 2257, 2258, 2259, 2261, 2262, 1464, 2264, 2256, 2257,
	2258, 2259, 2261, 2262, 1391, 1390, 1389, 1408, 1402, 1306,
	1388, 1405, 115, 1303, 1304, 1415, 1327, 1438, 1439, 1381,
	1366, 1201, 140, 1185, 1154, 1148, 2979, 2861, 2730, 1311,
	172, 1377, 2352, 1451, 1305, 2707, 2602, 2598, 1306, 165,
	2207, 1309, 1310, 1312, 1313, 901, 1957, 166, 2465, 2260,
	2254, 2255, 930, 1364, 1687, 1465, 1333, 1334, 1335, 1452,
	2043, 1687, 1456, 1305, 1687, 729, 1678, 1677, 138, 1687,
	1684, 4, 2258, 2259, 2261, 2262, 130, 2141, 2317, 2427,
	2854, 1218, 2702, 2701, 2936, 2605, 2393, 1429, 2388, 957,
	498, 1421, 1491, 1098, 1101, 1427, 971, 1422, 1461, 1876,
	2019, 1419, 1874, 1281, 1196, 1326, 1485, 1420, 1431, 1872,
	2384, 1870, 1311, 2639, 498, 971, 498, 498, 2372, 1479,
	1386, 2288, 2287, 2140, 209, 2270, 1868, 2964, 1458, 1315,
	1307, 1308, 1309, 1310, 1312, 1313, 2962, 2286, 498, 498,
	2285, 1538, 2180, 1395, 1661, 498, 1515, 498, 1214, 498,
	896, 1593, 2114, 498, 1395, 1547, 1674, 1550, 2475, 2383,
	1681, 1504, 2889, 2085, 2538, 1845, 3084, 1274, 2212, 1403,
	1510, 3094, 2619, 3091, 2254, 2255, 2439, 3040, 2674, 2117,
	521, 540, 1226, 1584, 897, 957, 200, 511, 3012, 3118,
	3117, 1859, 1327, 2808, 2485, 2143, 890, 1259, 929, 1717,
	929, 1260, 1272, 498, 957, 892, 3154, 888, 886, 209,
	498, 498, 2271, 2935, 2934, 2932, 2931, 957, 3085, 2654,
	209, 498, 1558, 883, 498, 498, 1383, 2649, 913, 1556,
	498, 2648, 1062, 2616, 1061, 1534, 1663, 2127, 1651, 2615,
	1981, 2226, 478, 2225, 481, 1621, 1273, 1229, 2224, 2223,
	1860, 2644, 971, 522, 2256, 2257, 2258, 2259, 2261, 2262,
	2183, 957, 957, 2115, 498, 539, 1521, 2071, 1565, 498,
	2036, 510, 1682, 2030, 209, 498, 478, 498, 481, 498,
	1122, 498, 2026, 498, 1541, 1474, 2007, 1981, 1475, 1806,
	727, 774, 1486, 498, 1428, 498, 1058, 1655, 1980, 1216,
	2825, 1923, 2260, 498, 498, 498, 1307, 1308, 1309, 1310,
	1312, 1313, 1675, 2466, 1861, 1858, 865, 1560, 1563, 1483,
	1224, 1922, 1152, 2265, 2263, 2264, 2256, 2257, 2258, 2259,
	2261, 2262, 498, 3011, 1921, 1920, 971, 1764, 2477, 2082,
	772, 1487, 1488, 2966, 1572, 1217, 1990, 1574, 1086, 1665,
	1576, 1192, 2488, 1587, 1579, 2040, 1730, 1729, 1735, 726,
	702, 478, 1258, 481, 1097, 1724, 1202, 592, 1695, 1589,
	1476, 1686, 478, 2659, 481, 1821, 1271, 2051, 2270, 1726,
	1652, 1591, 1821, 1478, 2000, 1754, 1761, 1662, 609, 1307,
	1308, 1309, 1310, 1312, 1313, 2914, 1828, 610, 3059, 1817,
	1702, 1826, 1836, 1999, 1863, 610, 1465, 1371, 928, 1679,
	928, 971, 1836, 1691, 2480, 1564, 1849, 2530, 1302, 1590,
	1815, 1699, 1863, 1313, 728, 3109, 478, 1200, 481, 3023,
	1653, 1993, 1255, 1480, 1708, 1885, 2172, 2173, 2254, 2255,
	2804, 1193, 2023, 2435, 1890, 1890, 2632, 2434, 1901, 1903,
	505, 1908, 1845, 1836, 3140, 524, 523, 3024, 2380, 498,
	2262, 498, 1688, 2017, 3117, 2271, 1481, 2375, 1935, 1688,
	2017, 1734, 1688, 2017, 1733, 1569, 3080, 1688, 1685, 716,
	1256, 1195, 716, 716, 1744, 971, 498, 1745, 1746, 1752,
	2486, 2990, 1503, 2434, 2392, 498, 1857, 1489, 498, 1731,
	2484, 971, 1280, 2479, 1975, 498, 1506, 1863, 1401, 729,
	1524, 2650, 1842, 498, 2073, 729, 2364, 1811, 2476, 2027,
	1481, 498, 1481, 1886, 2870, 1812, 1958, 1972, 1813, 1532,
	1968, 1969, 1818, 498, 1728, 2229, 957, 2880, 2938, 2642,
	515, 1948, 1234, 3108, 1832, 1361, 1952, 498, 971, 1967,
	725, 728, 2363, 498, 498, 1840, 2712, 1992, 884, 1982,
	1716, 1225, 1268, 508, 894, 1838, 2260, 893, 498, 884,
	885, 498, 2802, 2703, 1191, 2010, 901, 2263, 2264, 2256,
	2257, 2258, 2259, 2261, 2262, 884, 1978, 1898, 3081, 533,
	2719, 2478, 948, 1242, 3079, 498, 1919, 498, 932, 498,
	932, 2004, 498, 3116, 498, 729, 498, 2024, 498, 498,
	2366, 498, 957, 957, 957, 2037, 1933, 957, 2146, 1994,
	1996, 1932, 1953, 1954, 498, 2009, 1949, 2033, 1941, 1942,
	2148, 1085, 2368, 514, 2107, 2108, 3114, 201, 1461, 748,
	2038, 1520, 2270, 1269, 2048, 530, 2050, 1477, 2002, 2018,
	2020, 2021, 2022, 1985, 2840, 1174, 2008, 3082, 2915, 2633,
	2149, 1211, 1814, 1991, 1666, 766, 1694, 525, 2025, 3107,
	1816, 2838, 2147, 2367, 1507, 3133, 2103, 2009, 2087, 538,
	2087, 2803, 2079, 2185, 2105, 498, 515, 2077, 1540, 1206,
	1820, 1440, 1189, 3141, 1194, 1062, 1910, 2044, 538, 690,
	1223, 1827, 690, 703, 1178, 478, 479, 481, 1270, 508,
	591, 496, 2098, 202, 1570, 2132, 501, 1511, 517, 737,
	1701, 2119, 737, 929, 971, 543, 498, 2110, 587, 2271,
	2527, 543, 479, 2091, 587, 607, 498, 1301, 498, 2866,
	929, 614, 1212, 511, 130, 2104, 1199, 1213, 1291, 634,
	1763, 2871, 2397, 130, 1152, 537, 1588, 2111, 509, 498,
	498, 498, 742, 498, 1536, 2118, 2128, 2573, 1290, 2136,
	2401, 2137, 1986, 2100, 537, 2101, 2193, 2102, 2754, 514,
	2070, 507, 498, 1519, 2924, 1361, 3146, 691, 2130, 1803,
	691, 2923, 2905, 506, 2528, 1176, 1175, 2191, 1408, 930,
	1415, 930, 204, 2982, 2807, 2792, 2679, 2618, 2348, 2344,
	1235, 2806, 2135, 1697, 1698, 2133, 1405, 203, 2080, 2078,
	1559, 2526, 516, 1549, 3032, 1846, 1548, 510, 2165, 2144,
	2789, 543, 543, 1243, 2865, 1986, 1177, 512, 1544, 931,
	2265, 2263, 2264, 2256, 2257, 2258, 2259, 2261, 2262, 1289,
	1211, 3131, 735, 1539, 690, 199, 2160, 1481, 1236, 2199,
	2162, 1233, 2096, 496, 496, 496, 1371, 963, 496, 498,
	2325, 2790, 2186, 130, 737, 1211, 1721, 130, 479, 1064,
	1291, 2011, 540, 1740, 1863, 1513, 2219, 2220, 1290, 511,
	197, 1986, 1669, 2574, 2188, 1696, 2169, 535, 2167, 2842,
	2575, 540, 2906, 1512, 509, 2189, 526, 2354, 736, 2194,
	1673, 2755, 1801, 1804, 3132, 1976, 535, 2353, 2178, 692,
	726, 3145, 692, 2314, 200, 1947, 2867, 507, 1946, 2055,
	1509, 1212, 536, 928, 198, 2661, 1213, 2406, 2054, 506,
	1119, 3121, 691, 2805, 3134, 2157, 1108, 2158, 1107, 3,
	928, 536, 1487, 1488, 527, 602, 1212, 2326, 1800, 2184,
	2828, 1213, 574, 36, 2396, 2295, 539, 729, 516, 1289,
	971, 1671, 2760, 510, 2298, 1741, 534, 2588, 2307, 2305,
	2306, 573, 35, 512, 1117, 539, 498, 1672, 1474, 498,
	528, 1475, 529, 572, 32, 534, 498, 1866, 2402, 498,
	498, 971, 2837, 2785, 2211, 2903, 2786, 2012, 2013, 498,
	498, 498, 3123, 581, 693, 498, 1278, 693, 498, 2328,
	2885, 2321, 2284, 571, 79, 498, 498, 498, 498, 498,
	2320, 2329, 2330, 595, 2302, 570, 78, 2904, 498, 2190,
	2337, 2788, 2309, 2310, 2332, 498, 2315, 2192, 1265, 2753,
	2658, 2791, 694, 2283, 2501, 694, 2454, 498, 957, 567,
	23, 498, 485, 2245, 2161, 1447, 2195, 971, 2349, 2345,
	2134, 498, 2319, 1476, 692, 1802, 2322, 971, 2205, 2035,
	2290, 2291, 2292, 2316, 971, 2006, 1478, 1530, 2028, 568,
	24, 2299, 1468, 1279, 1450, 1186, 498, 2156, 498, 2374,
	498, 2138, 957, 498, 957, 957, 957, 1263, 498, 1718,
	498, 2327, 1950, 1705, 498, 1253, 1097, 1443, 1654, 498,
	2371, 498, 1118, 932, 936, 1448, 566, 30, 498, 1251,
	2339, 2381, 565, 21, 2385, 1249, 1480, 36, 2154, 1387,
	932, 1474, 600, 601, 1475, 498, 498, 2787, 957, 2387,
	2430, 2441, 1865, 2429, 2369, 3075, 35, 1277, 1479, 2390,
	563, 20, 1097, 2376, 2106, 498, 1116, 734, 32, 693,
	2377, 2379, 496, 1092, 2378, 496, 2391, 2415, 496, 2386,
	2656, 963, 1447, 1479, 1112, 2411, 2407, 2428, 1518, 1264,
	496, 2410, 1247, 2419, 498, 580, 3029, 2471, 79, 1245,
	496, 496, 496, 496, 963, 2403, 2464, 694, 882, 498,
	78, 1450, 1515, 564, 19, 1449, 929, 2778, 1515, 1715,
	593, 594, 2637, 1481, 929, 929, 1476, 1239, 929, 1445,
	2635, 729, 553, 15, 23, 971, 2440, 2617, 2447, 1478,
	1115, 2515, 1448, 2423, 634, 971, 2421, 2470, 1262, 486,
	487, 2370, 929, 2336, 2453, 2083, 1252, 496, 554, 16,
	498, 2075, 2074, 1446, 24, 2072, 2069, 2504, 562, 57,
	1250, 130, 561, 56, 552, 55, 1248, 2341, 1583, 1197,
	2481, 2482, 1986, 2522, 2523, 2524, 560, 12, 2483, 1480,
	634, 1582, 2355, 2487, 2358, 551, 50, 2539, 558, 47,
	1443, 30, 2350, 2490, 559, 48, 2492, 21, 1580, 1578,
	2356, 2494, 2360, 2361, 1575, 1754, 2542, 2448, 2449, 2450,
	130, 2451, 2452, 1573, 930, 1571, 550, 49, 1529, 2585,
	489, 488, 1449, 1246, 2508, 20, 1754, 2553, 1527, 2425,
	1244, 930, 557, 7, 2514, 556, 6, 555, 38, 1516,
	1477, 498, 887, 889, 1505, 2460, 1502, 1714, 2535, 2548,
	2529, 2531, 2532, 498, 1490, 1447, 2541, 496, 1238, 971,
	1482, 2581, 549, 37, 2472, 1093, 1481, 490, 491, 910,
	2606, 1114, 2550, 2601, 2304, 2952, 2438, 2552, 19, 1293,
	3118, 2577, 2860, 2859, 1450, 2438, 1370, 2176, 1692, 2954,
	1981, 911, 1998, 2688, 1472, 1981, 2823, 15, 2647, 2139,
	2597, 1997, 1445, 2578, 2589, 2331, 1995, 2039, 2034, 2029,
	2005, 1659, 1660, 2586, 2653, 1448, 928, 2992, 582, 2797,
	2591, 2592, 1237, 16, 928, 928, 498, 498, 928, 498,
	2594, 2969, 2761, 57, 498, 2014, 1446, 56, 2001, 55,
	1297, 2032, 971, 2003, 971, 130, 3028, 957, 2834, 2657,
	2608, 12, 928, 2313, 2612, 2668, 2177, 2090, 2076, 1294,
	50, 2068, 2621, 47, 498, 1934, 1664, 1601, 1594, 48,
	2692, 912, 3129, 2681, 2645, 2461, 3144, 1303, 1304, 2254,
	2255, 2399, 1374, 2685, 1303, 1304, 2651, 603, 2399, 2684,
	2652, 49, 1620, 1477, 498, 2655, 1683, 971, 498, 498,
	971, 498, 2680, 2009, 2643, 1449, 2706, 7, 1228, 498,
	6, 2897, 38, 1227, 1303, 1304, 1598, 971, 2670, 2665,
	2663, 2662, 2151, 2150, 2533, 2671, 2672, 1305, 2468, 2151,
	2302, 2682, 2152, 2686, 2675, 1900, 2677, 37, 1855, 1306,
	1267, 2721, 2694, 1266, 2693, 2716, 2733, 2525, 1384, 1382,
	614, 2852, 2696, 1276, 1275, 543, 1261, 498, 2704, 2705,
	1257, 2698, 1254, 2726, 1305, 2636, 1240, 2638, 2713, 2717,
	1198, 2714, 1667, 895, 701, 2709, 1459, 2913, 931, 3039,
	688, 496, 929, 2362, 1704, 1601, 1601, 1241, 1706, 2318,
	1955, 3022, 2312, 2739, 2228, 2975, 2879, 1864, 1385, 53,
	2382, 761, 824, 2779, 2620, 2062, 932, 2061, 974, 2722,
	1620, 1620, 1676, 783, 932, 932, 498, 1889, 932, 1755,
	929, 2626, 785, 1599, 788, 787, 971, 786, 971, 1600,
	1411, 784, 1597, 2094, 1598, 1598, 498, 498, 498, 2511,
	678, 1680, 932, 1825, 2414, 1843, 2416, 2417, 2418, 2518,
	2752, 498, 2210, 1378, 753, 1841, 498, 1184, 498, 752,
	2323, 498, 498, 498, 498, 498, 2433, 2611, 2847, 498,
	498, 957, 1739, 2168, 1736, 971, 2762, 2798, 2634, 957,
	513, 2800, 1536, 2766, 2763, 2764, 2768, 498, 498, 2772,
	2462, 2251, 2777, 1986, 1147, 1916, 1909, 1905, 1282, 1362,
	2824, 957, 2095, 2711, 1220, 2334, 2767, 2442, 2125, 1747,
	909, 498, 929, 908, 907, 479, 2830, 3045, 2769, 3042,
	498, 498, 957, 957, 2835, 2868, 1670, 2844, 2839, 1097,
	2818, 2096, 2145, 2846, 1355, 757, 2303, 2409, 1090, 1064,
	2991, 496, 1535, 2833, 2819, 1354, 891, 2869, 2430, 479,
	2984, 2853, 1210, 971, 1209, 2845, 2843, 1208, 2347, 3139,
	2631, 2851, 170, 1555, 1555, 2856, 167, 2822, 2872, 169,
	496, 168, 496, 2614, 496, 1601, 2395, 2855, 543, 82,
	34, 33, 109, 108, 107, 106, 2891, 105, 104, 2878,
	103, 102, 928, 101, 100, 971, 2850, 99, 98, 498,
	1620, 498, 97, 971, 498, 96, 95, 930, 94, 93,
	92, 91, 498, 90, 89, 930, 930, 2887, 971, 930,
	88, 87, 86, 2900, 1598, 2765, 85, 84, 634, 2895,
	928, 630, 2892, 2893, 479, 1064, 587, 627, 2918, 81,
	80, 2933, 2917, 930, 2919, 479, 1064, 31, 26, 963,
	496, 113, 114, 2898, 25, 634, 77, 76, 929, 498,
	2801, 498, 29, 2916, 957, 18, 11, 17, 22, 498,
	2811, 2812, 135, 134, 133, 132, 2896, 131, 929, 2336,
	2926, 2939, 14, 2941, 13, 128, 129, 127, 2945, 634,
	2950, 971, 126, 125, 496, 124, 2832, 929, 2626, 479,
	496, 123, 496, 2775, 496, 1986, 496, 10, 496, 8,
	498, 969, 2956, 2684, 1057, 2951, 498, 2955, 1719, 2949,
	1720, 2776, 928, 2809, 498, 112, 9, 2937, 496, 496,
	496, 2814, 929, 2626, 2987, 2430, 2965, 2981, 2968, 2863,
	2474, 2944, 2810, 70, 929, 2626, 71, 2973, 2978, 2815,
	27, 43, 498, 498, 42, 1986, 2980, 634, 41, 498,
	111, 161, 160, 159, 3003, 3005, 158, 154, 157, 155,
	957, 2989, 156, 153, 122, 498, 163, 162, 2438, 957,
	957, 151, 932, 498, 148, 498, 150, 498, 2997, 152,
	149, 1829, 147, 196, 3025, 3007, 3009, 164, 121, 3010,
	3016, 3017, 1370, 120, 3018, 3015, 498, 119, 118, 498,
	117, 498, 116, 971, 3035, 5, 2927, 2928, 2, 1,
	932, 0, 0, 3049, 3050, 3052, 3047, 0, 3053, 0,
	3055, 0, 3054, 3041, 0, 3037, 0, 0, 3000, 0,
	932, 3060, 2771, 0, 1743, 0, 0, 1915, 498, 3058,
	0, 0, 932, 0, 0, 0, 932, 0, 0, 0,
	3057, 932, 0, 929, 2626, 3074, 1986, 3073, 928, 3072,
	0, 0, 498, 0, 0, 3099, 1493, 3100, 2953, 3098,
	498, 3087, 0, 201, 614, 2899, 543, 0, 928, 0,
	0, 3106, 0, 1497, 2792, 3103, 498, 929, 2626, 929,
	2626, 931, 0, 0, 929, 2626, 0, 928, 3101, 3112,
	3113, 543, 932, 3115, 0, 3104, 3105, 3119, 931, 2789,
	543, 0, 2782, 496, 3122, 3047, 3125, 3126, 3120, 0,
	1989, 3128, 0, 0, 1494, 2780, 0, 0, 496, 0,
	2784, 0, 928, 0, 0, 3136, 496, 3135, 0, 0,
	0, 3142, 3143, 0, 928, 0, 0, 0, 496, 202,
	2790, 0, 3147, 3148, 3149, 0, 0, 2876, 0, 0,
	1911, 0, 496, 0, 0, 0, 3152, 3153, 479, 2045,
	3156, 0, 0, 930, 3158, 0, 0, 0, 2783, 0,
	0, 0, 3019, 2058, 3020, 0, 1064, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 2876,
	0, 0, 0, 0, 0, 0, 0, 1763, 3036, 2995,
	1989, 930, 543, 2820, 496, 0, 0, 496, 0, 496,
	0, 496, 1763, 496, 496, 0, 963, 2996, 0, 0,
	0, 2646, 0, 0, 0, 0, 0, 0, 204, 1989,
	0, 0, 0, 2646, 0, 0, 0, 2646, 932, 3014,
	1499, 1500, 2646, 203, 0, 0, 0, 0, 1601, 0,
	0, 1495, 0, 928, 2857, 2858, 929, 2626, 932, 0,
	0, 3097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2785, 1620, 0, 2786, 0, 932, 1496, 0,
	0, 199, 0, 0, 0, 1057, 0, 928, 0, 928,
	587, 0, 0, 930, 928, 0, 0, 1598, 0, 0,
	0, 0, 0, 0, 929, 2626, 0, 0, 0, 0,
	2788, 0, 932, 0, 0, 0, 197, 0, 0, 0,
	2791, 0, 0, 0, 932, 0, 0, 2096, 0, 0,
	0, 496, 0, 1303, 1304, 0, 0, 0, 0, 0,
	0, 1064, 0, 1064, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 1501, 0, 1306, 0,
	198, 0, 0, 0, 496, 496, 496, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1601, 496, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1763, 0, 0,
	0, 1620, 0, 0, 0, 0, 2787, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 1915,
	1915, 0, 0, 0, 0, 1598, 0, 0, 0, 930,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 1328, 1329, 1330, 1331, 0, 0, 0, 1601, 930,
	0, 1311, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 932, 1064, 0, 0, 932, 930, 932,
	0, 0, 0, 1620, 932, 0, 2197, 2198, 1333, 1334,
	1335, 0, 0, 0, 0, 1601, 1601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1598, 0, 0,
	0, 0, 0, 930, 928, 0, 1601, 1601, 0, 0,
	1620, 1620, 1915, 1915, 1915, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 1620, 1620, 0, 1598, 1598, 0, 0, 0, 0,
	0, 1601, 1911, 1911, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 1598, 1598, 2254, 2255, 0,
	2272, 2273, 2274, 0, 931, 0, 1620, 0, 0, 2277,
	2278, 2279, 931, 931, 932, 0, 931, 0, 0, 0,
	0, 543, 0, 0, 543, 0, 0, 0, 0, 0,
	1598, 543, 0, 0, 543, 543, 0, 1332, 0, 0,
	1459, 0, 0, 0, 496, 1989, 2343, 0, 0, 0,
	1989, 0, 0, 2343, 1327, 2269, 0, 0, 0, 0,
	1989, 2343, 1989, 2343, 2343, 0, 0, 0, 0, 0,
	0, 0, 0, 496, 930, 1911, 1911, 1911, 0, 0,
	1535, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 496, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 2646, 0, 496, 0, 930, 0,
	930, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2260, 0, 0, 0, 0,
	0, 1555, 0, 1555, 932, 496, 0, 0, 496, 0,
	0, 0, 0, 496, 0, 496, 0, 0, 0, 963,
	0, 0, 0, 0, 1989, 0, 543, 0, 0, 0,
	0, 0, 0, 1989, 0, 1316, 1314, 1315, 1307, 1308,
	1309, 1310, 1312, 1313, 0, 0, 0, 0, 0, 0,
	2458, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1601, 0, 0, 0, 0, 0,
	1064, 2270, 0, 0, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 2646, 0, 0, 0, 1620,
	0, 0, 0, 0, 1915, 1915, 0, 0, 0, 2491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1598, 496, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 2499, 2500, 924, 0, 0, 0, 930, 2271, 0,
	0, 0, 0, 0, 0, 2537, 1915, 1915, 1915, 1915,
	1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915,
	1915, 1915, 1915, 1915, 1915, 0, 1915, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 492,
	864, 0, 0, 0, 0, 930, 0, 1066, 0, 1070,
	0, 1076, 0, 0, 0, 0, 0, 1911, 1911, 0,
	0, 0, 0, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
	2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
	2571, 2572, 0, 2576, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 2266, 2267, 2268, 0, 0, 0, 543, 2265,
	2263, 2264, 2256, 2257, 2258, 2259, 2261, 2262, 958, 0,
	0, 972, 972, 0, 0, 0, 0, 0, 2628, 1911,
	1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
	1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1459, 1911,
	0, 0, 0, 0, 1182, 0, 0, 0, 1601, 0,
	1459, 1187, 0, 0, 1459, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1989, 1555, 1620, 1555, 0, 0, 0, 0, 496,
	740, 940, 0, 0, 740, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1598, 0, 0,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 1989,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1620, 0, 0, 0, 0,
	0, 959, 0, 0, 973, 973, 0, 0, 0, 1064,
	576, 0, 0, 963, 496, 0, 496, 0, 0, 1598,
	0, 40, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 1356, 1357, 1358, 1359, 1360, 0,
	0, 0, 2740, 1620, 0, 0, 0, 1369, 0, 0,
	0, 0, 0, 0, 0, 1379, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 0, 0, 1598, 0, 0,
	0, 59, 579, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 1989, 2343, 1989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2628, 1064, 0, 0, 0,
	0, 1989, 0, 2343, 0, 0, 1064, 1064, 496, 1989,
	2343, 0, 0, 0, 496, 496, 0, 0, 958, 958,
	0, 0, 0, 0, 2254, 2255, 0, 2272, 2273, 2274,
	2628, 0, 1064, 2058, 0, 0, 0, 0, 0, 0,
	0, 0, 2628, 0, 0, 0, 0, 958, 958, 0,
	0, 0, 0, 0, 958, 0, 1989, 0, 1436, 1436,
	1436, 0, 0, 0, 0, 2458, 2458, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 2269, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1915, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 139, 66, 0, 67, 0, 0, 0,
	0, 0, 762, 74, 0, 0, 0, 0, 1126, 1126,
	1126, 967, 0, 0, 171, 0, 0, 0, 0, 0,
	1915, 0, 2489, 0, 0, 578, 0, 0, 110, 0,
	0, 959, 959, 0, 1989, 0, 2343, 0, 0, 2902,
	2884, 0, 2260, 0, 0, 0, 0, 496, 0, 0,
	173, 2628, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 959, 958, 74, 0, 1181, 2276, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2908, 0, 0,
	0, 1459, 0, 0, 0, 2628, 0, 2628, 0, 0,
	2275, 172, 2628, 0, 496, 0, 496, 0, 0, 0,
	165, 0, 0, 0, 1064, 0, 1911, 0, 166, 2254,
	2255, 0, 2272, 2273, 2274, 1915, 0, 0, 2270, 0,
	0, 0, 0, 0, 0, 0, 0, 2724, 0, 138,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 1911, 0, 2537, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 2902,
	0, 0, 0, 0, 0, 0, 0, 2269, 0, 0,
	0, 0, 2972, 0, 0, 0, 919, 74, 576, 0,
	0, 0, 0, 0, 0, 959, 0, 1989, 2343, 40,
	0, 0, 1459, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 2271, 0, 0, 0, 0,
	2343, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	1064, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 0, 0, 0, 2260, 1911, 0,
	0, 3033, 0, 0, 1064, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 740, 0,
	577, 0, 0, 0, 2628, 0, 0, 0, 0, 59,
	579, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 2537, 0, 2275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 63, 2266,
	2267, 2268, 2628, 2270, 0, 1989, 2265, 2263, 2264, 2256,
	2257, 2258, 2259, 2261, 2262, 0, 0, 0, 0, 0,
	1737, 2902, 1742, 0, 0, 0, 0, 0, 1749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 0, 1805, 0, 1807, 1808, 1809, 1810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	2271, 0, 0, 0, 0, 1833, 0, 0, 0, 0,
	0, 0, 64, 1369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 139, 66, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 1907, 0, 1918,
	0, 0, 171, 972, 1924, 1929, 0, 0, 0, 0,
	2159, 0, 0, 578, 0, 0, 110, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	74, 208, 74, 0, 74, 0, 0, 0, 173, 0,
	0, 0, 1374, 0, 2266, 2267, 2268, 0, 0, 0,
	0, 2265, 2263, 2264, 2256, 2257, 2258, 2259, 2261, 2262,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 44, 0, 0, 165, 730,
	0, 0, 958, 0, 0, 0, 166, 0, 0, 1533,
	0, 0, 0, 0, 0, 0, 0, 2047, 0, 2049,
	0, 958, 0, 575, 0, 0, 208, 138, 0, 959,
	0, 0, 0, 0, 958, 0, 973, 208, 0, 0,
	1562, 0, 1562, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 577, 0, 74, 973, 0, 0, 0, 0,
	0, 59, 579, 0, 0, 0, 60, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1657, 0,
	0, 0, 0, 1303, 1304, 959, 1336, 1337, 1338, 1346,
	1347, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 959, 0, 0, 0, 1306, 0,
	0, 1352, 0, 972, 0, 0, 0, 959, 0, 0,
	0, 0, 1703, 0, 0, 0, 0, 0, 1709, 0,
	1710, 0, 1711, 1305, 1712, 0, 1713, 0, 0, 0,
	0, 1325, 0, 0, 0, 717, 0, 0, 1322, 0,
	0, 0, 973, 0, 0, 0, 1722, 1106, 0, 0,
	0, 959, 959, 0, 64, 0, 0, 1365, 0, 1368,
	0, 0, 0, 0, 0, 0, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 139, 66, 0, 67, 0, 0, 0,
	0, 1328, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 110, 0,
	0, 0, 0, 0, 1343, 1353, 973, 0, 1333, 1334,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 2181, 2182, 0, 0, 0, 0, 2187, 0, 1349,
	1350, 0, 972, 0, 0, 0, 0, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 2200, 0, 972, 0,
	1341, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	2206, 172, 0, 0, 0, 0, 2213, 0, 0, 0,
	165, 2218, 0, 0, 0, 1351, 0, 0, 166, 0,
	0, 973, 0, 958, 1303, 1304, 0, 0, 2232, 1340,
	1346, 1347, 1348, 0, 0, 972, 0, 0, 0, 138,
	74, 0, 0, 1457, 576, 1460, 0, 0, 0, 1306,
	0, 0, 1352, 0, 0, 40, 0, 0, 0, 2254,
	2255, 1973, 2272, 2273, 2274, 0, 0, 1332, 0, 44,
	0, 0, 0, 0, 1305, 0, 0, 2723, 0, 0,
	0, 0, 1325, 0, 1327, 0, 1929, 1929, 1929, 0,
	0, 0, 0, 0, 0, 973, 0, 575, 1436, 958,
	958, 958, 0, 0, 958, 0, 2308, 1344, 0, 0,
	967, 973, 0, 0, 0, 0, 0, 2269, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 579, 0, 0, 0,
	60, 0, 1328, 1329, 1330, 1331, 959, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 973, 0,
	0, 2365, 2099, 0, 0, 1126, 0, 1126, 0, 1126,
	0, 967, 967, 0, 63, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 1342, 0, 2260, 1317, 1318,
	1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308,
	1309, 1310, 1312, 1313, 0, 0, 0, 0, 2747, 0,
	0, 972, 2746, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 959, 959, 959, 0, 0, 959, 1326, 0,
	0, 0, 0, 0, 0, 2275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 740, 740, 0, 0, 0, 0, 139, 66, 0,
	67, 0, 0, 0, 740, 1327, 0, 0, 0, 0,
	0, 0, 2164, 967, 2166, 0, 0, 0, 171, 0,
	0, 2493, 0, 0, 973, 1749, 0, 0, 1344, 578,
	0, 2497, 110, 0, 2498, 2179, 0, 0, 0, 0,
	2271, 0, 0, 0, 0, 0, 2503, 0, 0, 0,
	0, 0, 0, 2509, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 2516, 0, 0, 0, 2308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2543, 2544, 0, 2545,
	2546, 2547, 0, 0, 0, 172, 2549, 0, 0, 0,
	0, 0, 0, 2551, 165, 717, 1342, 0, 717, 717,
	0, 0, 166, 0, 1345, 2120, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 0, 40, 0, 0, 0,
	0, 0, 0, 138, 2579, 2580, 0, 0, 0, 0,
	44, 0, 0, 0, 2266, 2267, 2268, 972, 0, 0,
	0, 2265, 2263, 2264, 2256, 2257, 2258, 2259, 2261, 2262,
	0, 0, 0, 0, 2596, 0, 1823, 0, 2121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 730,
	0, 0, 0, 2254, 2255, 1368, 2272, 2273, 2274, 0,
	0, 0, 0, 0, 0, 0, 0, 2122, 0, 0,
	0, 2506, 2622, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 2269, 0, 0, 972, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 919, 0,
	0, 972, 2340, 0, 0, 0, 0, 0, 2254, 2255,
	973, 2272, 2273, 2274, 0, 1460, 0, 0, 0, 958,
	0, 958, 958, 958, 0, 1436, 2505, 0, 0, 0,
	0, 1106, 0, 0, 0, 0, 2695, 74, 0, 0,
	0, 973, 0, 0, 2254, 2255, 0, 2272, 2273, 2274,
	0, 2260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 2394, 958, 2269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 74, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 2725, 2412, 0, 0, 2728, 2729, 959, 2275,
	0, 2420, 2269, 2422, 0, 0, 0, 973, 2731, 0,
	0, 0, 2734, 0, 74, 0, 74, 973, 139, 66,
	0, 67, 0, 0, 973, 0, 0, 2270, 0, 2741,
	0, 0, 0, 0, 0, 0, 2260, 0, 74, 171,
	0, 0, 959, 0, 959, 959, 959, 74, 0, 0,
	578, 0, 972, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2260, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 2275, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2270, 0, 2271, 0, 172, 0, 2799, 0,
	2275, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2270, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 74, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2873, 2874, 0, 0, 2266, 2267,
	2268, 0, 0, 0, 0, 2265, 2263, 2264, 2256, 2257,
	2258, 2259, 2261, 2262, 0, 2271, 2882, 2883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2890, 0, 0, 0, 0, 0, 1823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 972, 0, 0, 958, 0, 0, 1368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2925, 0, 0,
	0, 0, 0, 2266, 2267, 2268, 0, 0, 0, 973,
	2265, 2263, 2264, 2256, 2257, 2258, 2259, 2261, 2262, 0,
	0, 0, 0, 0, 972, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2669, 0, 2266,
	2267, 2268, 0, 0, 972, 0, 2265, 2263, 2264, 2256,
	2257, 2258, 2259, 2261, 2262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 973, 0, 973, 0, 0, 959, 2983, 919,
	919, 2986, 2715, 919, 967, 0, 0, 0, 0, 0,
	0, 0, 2718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	973, 0, 0, 972, 0, 972, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 972, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 3071, 3071, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 958, 74,
	0, 3088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 0, 958,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 3071,
	0, 0, 0, 0, 0, 74, 2813, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 973, 0, 973, 0,
	972, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 1306, 0, 0, 1352,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	3071, 959, 972, 0, 0, 973, 0, 0, 0, 959,
	972, 1305, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 972, 1322, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 1328,
	1329, 1330, 1331, 973, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 2909, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 74,
	0, 0, 0, 973, 0, 0, 0, 1349, 1350, 0,
	0, 0, 2946, 0, 2948, 1320, 1321, 919, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 1351, 0, 0, 958, 958, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 3001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	3021, 0, 1339, 0, 0, 1344, 0, 919, 0, 1306,
	0, 0, 1352, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 3038, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 1305, 0, 0, 0, 0, 959,
	959, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1317, 1318, 1324, 1323,
	1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309, 1310,
	1312, 1313, 1328, 1329, 1330, 1331, 2237, 0, 0, 0,
	2238, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 0, 0, 74, 0, 0,
	0, 0, 970, 2745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1823, 258, 259,
	260, 261, 975, 262, 976, 977, 978, 979, 214, 980,
	981, 982, 983, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 984, 269, 270, 271, 272, 273, 274,
	985, 986, 219, 220, 221, 987, 275, 222, 988, 960,
	989, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 990, 285, 0, 286, 287, 991, 866, 288, 289,
	290, 992, 993, 995, 994, 996, 997, 998, 291, 292,
	500, 293, 294, 295, 223, 224, 999, 296, 1000, 297,
	1001, 298, 1002, 1003, 299, 300, 1004, 301, 302, 1005,
	0, 1006, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 1007, 867, 1008, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 1009, 319,
	1010, 1011, 868, 320, 1012, 321, 229, 1013, 230, 1014,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 870,
	1015, 237, 329, 0, 0, 0, 1016, 328, 330, 337,
	1017, 869, 331, 234, 333, 332, 334, 335, 336, 235,
	1018, 236, 1019, 338, 871, 872, 339, 340, 341, 873,
	342, 343, 0, 0, 344, 345, 346, 1020, 348, 347,
	1021, 238, 874, 349, 350, 875, 1022, 351, 352, 1023,
	1024, 353, 0, 354, 935, 934, 355, 356, 357, 358,
	360, 361, 359, 876, 362, 363, 365, 364, 1025, 1026,
	877, 1027, 239, 366, 240, 367, 368, 1028, 369, 370,
	1029, 1030, 371, 372, 1031, 1032, 373, 241, 878, 374,
	879, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	1033, 383, 243, 384, 244, 385, 1034, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 1035, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	1036, 406, 880, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 1037, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 1038, 431, 412,
	413, 432, 881, 433, 247, 434, 435, 1039, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	1040, 446, 447, 1041, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 1042, 249, 250, 251, 456, 1043,
	1044, 457, 458, 252, 253, 1045, 459, 460, 0, 461,
	462, 1046, 1047, 463, 464, 465, 467, 1048, 468, 1049,
	466, 469, 470, 471, 254, 255, 1050, 1051, 472, 256,
	1052, 1053, 1054, 1055, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	1960, 0, 0, 0, 0, 0, 0, 0, 0, 1961,
	258, 259, 260, 261, 975, 262, 976, 977, 978, 979,
	214, 980, 981, 982, 983, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 984, 269, 270, 271, 272,
	273, 274, 985, 986, 219, 220, 221, 987, 275, 222,
	988, 960, 989, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 990, 285, 0, 286, 287, 991, 866,
	288, 289, 290, 992, 993, 995, 994, 996, 997, 998,
	291, 292, 500, 293, 294, 295, 223, 224, 999, 296,
	1000, 297, 1001, 298, 1002, 1003, 299, 300, 1004, 301,
	302, 1005, 0, 1006, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1007, 867, 1008, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1009, 319, 1010, 1011, 868, 320, 1012, 321, 229, 1013,
	230, 1014, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 870, 1015, 237, 329, 0, 0, 0, 1016, 328,
	330, 337, 1017, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 1018, 236, 1019, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 1020,
	348, 347, 1021, 238, 874, 349, 350, 875, 1022, 351,
	352, 1023, 1024, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	1025, 1026, 877, 1027, 239, 366, 240, 367, 368, 1028,
	369, 370, 1029, 1030, 371, 372, 1031, 1032, 373, 241,
	878, 374, 879, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 1033, 383, 243, 384, 244, 385, 1034, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 1035, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 1036, 406, 880, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 1037,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 1038,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 1039,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 1040, 446, 447, 1041, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 1042, 249, 250, 251,
	456, 1043, 1044, 457, 458, 252, 253, 1045, 459, 460,
	0, 461, 462, 1046, 1047, 463, 464, 465, 467, 1048,
	468, 1049, 466, 469, 470, 471, 254, 255, 1050, 1051,
	472, 256, 1052, 1053, 1054, 1055, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2770, 258, 259, 260, 261, 975, 262, 976,
	977, 978, 979, 214, 980, 981, 982, 983, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 984, 269,
	270, 271, 272, 273, 274, 985, 986, 219, 220, 221,
	987, 275, 222, 988, 960, 989, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 990, 285, 0, 286,
	287, 991, 866, 288, 289, 290, 992, 993, 995, 994,
	996, 997, 998, 291, 292, 500, 293, 294, 295, 223,
	224, 999, 296, 1000, 297, 1001, 298, 1002, 1003, 299,
	300, 1004, 301, 302, 1005, 0, 1006, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1007, 867,
	1008, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 1009, 319, 1010, 1011, 868, 320, 1012,
	321, 229, 1013, 230, 1014, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 870, 1015, 237, 329, 0, 0,
	0, 1016, 328, 330, 337, 1017, 869, 331, 234, 333,
	332, 334, 335, 336, 235, 1018, 236, 1019, 338, 871,
	872, 339, 340, 341, 873, 342, 343, 0, 0, 344,
	345, 346, 1020, 348, 347, 1021, 238, 874, 349, 350,
	875, 1022, 351, 352, 1023, 1024, 353, 0, 354, 935,
	934, 355, 356, 357, 358, 360, 361, 359, 876, 362,
	363, 365, 364, 1025, 1026, 877, 1027, 239, 366, 240,
	367, 368, 1028, 369, 370, 1029, 1030, 371, 372, 1031,
	1032, 373, 241, 878, 374, 879, 242, 375, 376, 377,
	378, 379, 380, 381, 382, 1033, 383, 243, 384, 244,
	385, 1034, 386, 387, 388, 389, 390, 391, 245, 392,
	393, 1035, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 1036, 406, 880, 407, 408,
	409, 410, 246, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 1037, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 1038, 431, 412, 413, 432, 881, 433, 247,
	434, 435, 1039, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 248, 1040, 446, 447, 1041, 448,
	449, 450, 451, 452, 308, 453, 309, 454, 455, 1042,
	249, 250, 251, 456, 1043, 1044, 457, 458, 252, 253,
	1045, 459, 460, 0, 461, 462, 1046, 1047, 463, 464,
	465, 467, 1048, 468, 1049, 466, 469, 470, 471, 254,
	255, 1050, 1051, 472, 256, 1052, 1053, 1054, 1055, 473,
	474, 257, 475, 476, 477, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2877, 258, 259, 260, 261, 975, 262, 976, 977, 978,
	979, 214, 980, 981, 982, 983, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 984, 269, 270, 271,
	272, 273, 274, 985, 986, 219, 220, 221, 987, 275,
	222, 988, 960, 989, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 990, 285, 0, 286, 287, 991,
	866, 288, 289, 290, 992, 993, 995, 994, 996, 997,
	998, 291, 292, 500, 293, 294, 295, 223, 224, 999,
	296, 1000, 297, 1001, 298, 1002, 1003, 299, 300, 1004,
	301, 302, 1005, 0, 1006, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1007, 867, 1008, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 1009, 319, 1010, 1011, 868, 320, 1012, 321, 229,
	1013, 230, 1014, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 870, 1015, 237, 329, 0, 0, 0, 1016,
	328, 330, 337, 1017, 869, 331, 234, 333, 332, 334,
	335, 336, 235, 1018, 236, 1019, 338, 871, 872, 339,
	340, 341, 873, 342, 343, 0, 0, 344, 345, 346,
	1020, 348, 347, 1021, 238, 874, 349, 350, 875, 1022,
	351, 352, 1023, 1024, 353, 0, 354, 935, 934, 355,
	356, 357, 358, 360, 361, 359, 876, 362, 363, 365,
	364, 1025, 1026, 877, 1027, 239, 366, 240, 367, 368,
	1028, 369, 370, 1029, 1030, 371, 372, 1031, 1032, 373,
	241, 878, 374, 879, 242, 375, 376, 377, 378, 379,
	380, 381, 382, 1033, 383, 243, 384, 244, 385, 1034,
	386, 387, 388, 389, 390, 391, 245, 392, 393, 1035,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1036, 406, 880, 407, 408, 409, 410,
	246, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1037, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1038, 431, 412, 413, 432, 881, 433, 247, 434, 435,
	1039, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 248, 1040, 446, 447, 1041, 448, 449, 450,
	451, 452, 308, 453, 309, 454, 455, 1042, 249, 250,
	251, 456, 1043, 1044, 457, 458, 252, 253, 1045, 459,
	460, 0, 461, 462, 1046, 1047, 463, 464, 465, 467,
	1048, 468, 1049, 466, 469, 470, 471, 254, 255, 1050,
	1051, 472, 256, 1052, 1053, 1054, 1055, 473, 474, 257,
	475, 476, 477, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2519, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 985, 986, 219, 220, 221, 987, 275, 222, 988,
	960, 989, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 990, 285, 0, 286, 287, 991, 866, 288,
	289, 290, 992, 993, 995, 994, 996, 997, 998, 291,
	292, 500, 293, 294, 295, 223, 224, 999, 296, 1000,
	297, 1001, 298, 1002, 1003, 299, 300, 1004, 301, 302,
	1005, 0, 1006, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 1009,
	319, 1010, 1011, 868, 320, 1012, 321, 229, 1013, 230,
	1014, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	870, 1015, 237, 329, 0, 0, 0, 1016, 328, 330,
	337, 1017, 869, 331, 234, 333, 332, 334, 335, 336,
	235, 1018, 236, 1019, 338, 871, 872, 339, 340, 341,
	873, 342, 343, 0, 0, 344, 345, 346, 1020, 348,
	347, 1021, 238, 874, 349, 350, 875, 1022, 351, 352,
	1023, 1024, 353, 0, 354, 935, 934, 355, 356, 357,
	358, 360, 361, 359, 876, 362, 363, 365, 364, 1025,
	1026, 877, 1027, 239, 366, 240, 367, 368, 1028, 369,
	370, 1029, 1030, 371, 372, 1031, 1032, 373, 241, 878,
	374, 879, 242, 375, 376, 377, 378, 379, 380, 381,
	382, 1033, 383, 243, 384, 244, 385, 1034, 386, 387,
	388, 389, 390, 391, 245, 392, 393, 1035, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 1036, 406, 880, 407, 408, 409, 410, 246, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 1037, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 1038, 431,
	412, 413, 432, 881, 433, 247, 434, 435, 1039, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	248, 1040, 446, 447, 1041, 448, 449, 450, 451, 452,
	308, 453, 309, 454, 455, 1042, 249, 250, 251, 456,
	1043, 1044, 457, 458, 252, 253, 1045, 459, 460, 0,
	461, 462, 1046, 1047, 463, 464, 465, 467, 1048, 468,
	1049, 466, 469, 470, 471, 254, 255, 1050, 1051, 472,
	256, 1052, 1053, 1054, 1055, 473, 474, 257, 475, 476,
	477, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2510, 258, 259, 260,
	261, 975, 262, 976, 977, 978, 979, 214, 980, 981,
	982, 983, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 984, 269, 270, 271, 272, 273, 274, 985,
	986, 219, 220, 221, 987, 275, 222, 988, 960, 989,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	990, 285, 0, 286, 287, 991, 866, 288, 289, 290,
	992, 993, 995, 994, 996, 997, 998, 291, 292, 500,
	293, 294, 295, 223, 224, 999, 296, 1000, 297, 1001,
	298, 1002, 1003, 299, 300, 1004, 301, 302, 1005, 0,
	1006, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1007, 867, 1008, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 1009, 319, 1010,
	1011, 868, 320, 1012, 321, 229, 1013, 230, 1014, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 870, 1015,
	237, 329, 0, 0, 0, 1016, 328, 330, 337, 1017,
	869, 331, 234, 333, 332, 334, 335, 336, 235, 1018,
	236, 1019, 338, 871, 872, 339, 340, 341, 873, 342,
	343, 0, 0, 344, 345, 346, 1020, 348, 347, 1021,
	238, 874, 349, 350, 875, 1022, 351, 352, 1023, 1024,
	353, 0, 354, 935, 934, 355, 356, 357, 358, 360,
	361, 359, 876, 362, 363, 365, 364, 1025, 1026, 877,
	1027, 239, 366, 240, 367, 368, 1028, 369, 370, 1029,
	1030, 371, 372, 1031, 1032, 373, 241, 878, 374, 879,
	242, 375, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 243, 384, 244, 385, 1034, 386, 387, 388, 389,
	390, 391, 245, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 880, 407, 408, 409, 410, 246, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 881, 433, 247, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 248, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 308, 453,
	309, 454, 455, 1042, 249, 250, 251, 456, 1043, 1044,
	457, 458, 252, 253, 1045, 459, 460, 0, 461, 462,
	1046, 1047, 463, 464, 465, 467, 1048, 468, 1049, 466,
	469, 470, 471, 254, 255, 1050, 1051, 472, 256, 1052,
	1053, 1054, 1055, 473, 474, 257, 475, 476, 477, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2398, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 985, 986, 219,
	220, 221, 987, 275, 222, 988, 960, 989, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 990, 285,
	0, 286, 287, 991, 866, 288, 289, 290, 992, 993,
	995, 994, 996, 997, 998, 291, 292, 500, 293, 294,
	295, 223, 224, 999, 296, 1000, 297, 1001, 298, 1002,
	1003, 299, 300, 1004, 301, 302, 1005, 0, 1006, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1009, 319, 1010, 1011, 868,
	320, 1012, 321, 229, 1013, 230, 1014, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 870, 1015, 237, 329,
	0, 0, 0, 1016, 328, 330, 337, 1017, 869, 331,
	234, 333, 332, 334, 335, 336, 235, 1018, 236, 1019,
	338, 871, 872, 339, 340, 341, 873, 342, 343, 0,
	0, 344, 345, 346, 1020, 348, 347, 1021, 238, 874,
	349, 350, 875, 1022, 351, 352, 1023, 1024, 353, 0,
	354, 935, 934, 355, 356, 357, 358, 360, 361, 359,
	876, 362, 363, 365, 364, 1025, 1026, 877, 1027, 239,
	366, 240, 367, 368, 1028, 369, 370, 1029, 1030, 371,
	372, 1031, 1032, 373, 241, 878, 374, 879, 242, 375,
	376, 377, 378, 379, 380, 381, 382, 1033, 383, 243,
	384, 244, 385, 1034, 386, 387, 388, 389, 390, 391,
	245, 392, 393, 1035, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 1036, 406, 880,
	407, 408, 409, 410, 246, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 1037, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 1038, 431, 412, 413, 432, 881,
	433, 247, 434, 435, 1039, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 248, 1040, 446, 447,
	1041, 448, 449, 450, 451, 452, 308, 453, 309, 454,
	455, 1042, 249, 250, 251, 456, 1043, 1044, 457, 458,
	252, 253, 1045, 459, 460, 0, 461, 462, 1046, 1047,
	463, 464, 465, 467, 1048, 468, 1049, 466, 469, 470,
	471, 254, 255, 1050, 1051, 472, 256, 1052, 1053, 1054,
	1055, 473, 474, 257, 475, 476, 477, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1847, 258, 259, 260, 261, 975, 262, 976,
	977, 978, 979, 214, 980, 981, 982, 983, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 984, 269,
	270, 271, 272, 273, 274, 985, 986, 219, 220, 221,
	987, 275, 222, 988, 960, 989, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 990, 285, 0, 286,
	287, 991, 866, 288, 289, 290, 992, 993, 995, 994,
	996, 997, 998, 291, 292, 500, 293, 294, 295, 223,
	224, 999, 296, 1000, 297, 1001, 298, 1002, 1003, 299,
	300, 1004, 301, 302, 1005, 0, 1006, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1007, 867,
	1008, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 1009, 319, 1010, 1011, 868, 320, 1012,
	321, 229, 1013, 230, 1014, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 870, 1015, 237, 329, 0, 0,
	0, 1016, 328, 330, 337, 1017, 869, 331, 234, 333,
	332, 334, 335, 336, 235, 1018, 236, 1019, 338, 871,
	872, 339, 340, 341, 873, 342, 343, 0, 0, 344,
	345, 346, 1020, 348, 347, 1021, 238, 874, 349, 350,
	875, 1022, 351, 352, 1023, 1024, 353, 0, 354, 935,
	934, 355, 356, 357, 358, 360, 361, 359, 876, 362,
	363, 365, 364, 1025, 1026, 877, 1027, 239, 366, 240,
	367, 368, 1028, 369, 370, 1029, 1030, 371, 372, 1031,
	1032, 373, 241, 878, 374, 879, 242, 375, 376, 377,
	378, 379, 380, 381, 382, 1033, 383, 243, 384, 244,
	385, 1034, 386, 387, 388, 389, 390, 391, 245, 392,
	393, 1035, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 1036, 406, 880, 407, 408,
	409, 410, 246, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 1037, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 1038, 431, 412, 413, 432, 881, 433, 247,
	434, 435, 1039, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 248, 1040, 446, 447, 1041, 448,
	449, 450, 451, 452, 308, 453, 309, 454, 455, 1042,
	249, 250, 251, 456, 1043, 1044, 457, 458, 252, 253,
	1045, 459, 460, 0, 461, 462, 1046, 1047, 463, 464,
	465, 467, 1048, 468, 1049, 466, 469, 470, 471, 254,
	255, 1050, 1051, 472, 256, 1052, 1053, 1054, 1055, 473,
	474, 257, 475, 476, 477, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1525, 258, 259, 260, 261, 975, 262, 976, 977, 978,
	979, 214, 980, 981, 982, 983, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 984, 269, 270, 271,
	272, 273, 274, 985, 986, 219, 220, 221, 987, 275,
	222, 988, 960, 989, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 990, 285, 0, 286, 287, 991,
	866, 288, 289, 290, 992, 993, 995, 994, 996, 997,
	998, 291, 292, 500, 293, 294, 295, 223, 224, 999,
	296, 1000, 297, 1001, 298, 1002, 1003, 299, 300, 1004,
	301, 302, 1005, 0, 1006, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1007, 867, 1008, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 1009, 319, 1010, 1011, 868, 320, 1012, 321, 229,
	1013, 230, 1014, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 870, 1015, 237, 329, 0, 0, 0, 1016,
	328, 330, 337, 1017, 869, 331, 234, 333, 332, 334,
	335, 336, 235, 1018, 236, 1019, 338, 871, 872, 339,
	340, 341, 873, 342, 343, 0, 0, 344, 345, 346,
	1020, 348, 347, 1021, 238, 874, 349, 350, 875, 1022,
	351, 352, 1023, 1024, 353, 0, 354, 935, 934, 355,
	356, 357, 358, 360, 361, 359, 876, 362, 363, 365,
	364, 1025, 1026, 877, 1027, 239, 366, 240, 367, 368,
	1028, 369, 370, 1029, 1030, 371, 372, 1031, 1032, 373,
	241, 878, 374, 879, 242, 375, 376, 377, 378, 379,
	380, 381, 382, 1033, 383, 243, 384, 244, 385, 1034,
	386, 387, 388, 389, 390, 391, 245, 392, 393, 1035,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1036, 406, 880, 407, 408, 409, 410,
	246, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1037, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1038, 431, 412, 413, 432, 881, 433, 247, 434, 435,
	1039, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 248, 1040, 446, 447, 1041, 448, 449, 450,
	451, 452, 308, 453, 309, 454, 455, 1042, 249, 250,
	251, 456, 1043, 1044, 457, 458, 252, 253, 1045, 459,
	460, 0, 461, 462, 1046, 1047, 463, 464, 465, 467,
	1048, 468, 1049, 466, 469, 470, 471, 254, 255, 1050,
	1051, 472, 256, 1052, 1053, 1054, 1055, 473, 474, 257,
	475, 476, 477, 1854, 0, 781, 769, 770, 767, 768,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1851, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 791, 790,
	272, 273, 274, 764, 816, 841, 842, 221, 0, 275,
	823, 0, 806, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	866, 288, 289, 290, 809, 807, 808, 813, 811, 810,
	812, 291, 292, 500, 293, 826, 295, 843, 844, 749,
	296, 0, 297, 0, 298, 1852, 0, 827, 300, 0,
	301, 302, 0, 0, 0, 754, 306, 303, 304, 307,
	310, 305, 311, 312, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 313, 314, 315, 847, 828, 829, 0,
	318, 0, 319, 0, 0, 868, 320, 0, 321, 848,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	328, 330, 337, 0, 869, 331, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 338, 871, 872, 339,
	340, 341, 873, 834, 835, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 851, 874, 349, 350, 875, 0,
	351, 352, 0, 0, 353, 0, 354, 751, 750, 355,
	356, 357, 358, 360, 793, 359, 876, 362, 363, 365,
	364, 746, 0, 877, 777, 821, 366, 852, 367, 368,
	0, 802, 803, 0, 0, 371, 372, 0, 0, 373,
	241, 878, 374, 879, 853, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 854, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 855, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 880, 407, 408, 409, 410,
	755, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 794, 795, 796, 797, 423, 429, 430,
	814, 431, 412, 413, 432, 881, 433, 856, 798, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 836, 440,
	441, 442, 857, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 792, 455, 0, 858, 859,
	860, 837, 0, 0, 457, 458, 861, 862, 775, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	815, 468, 0, 799, 469, 470, 471, 254, 863, 1850,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 1853, 0,
	0, 0, 0, 0, 0, 756, 1848, 0, 0, 0,
	731, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 791, 790, 272, 273, 274,
	764, 816, 841, 842, 221, 0, 275, 823, 0, 806,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 866, 288, 289,
	290, 809, 807, 808, 813, 811, 810, 812, 291, 292,
	500, 293, 826, 295, 843, 844, 749, 296, 0, 297,
	0, 298, 0, 0, 827, 300, 0, 301, 302, 0,
	0, 0, 754, 306, 303, 304, 307, 310, 305, 311,
	312, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	313, 314, 315, 847, 828, 829, 0, 318, 0, 319,
	0, 0, 868, 320, 0, 321, 848, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 818, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 328, 330, 337,
	0, 869, 331, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 338, 871, 872, 339, 340, 341, 873,
	834, 835, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 851, 874, 349, 350, 875, 0, 351, 352, 0,
	0, 353, 0, 354, 751, 750, 355, 356, 357, 358,
	360, 793, 359, 876, 362, 363, 365, 364, 746, 0,
	877, 777, 821, 366, 852, 367, 368, 0, 802, 803,
	0, 0, 371, 372, 0, 0, 373, 241, 878, 374,
	879, 853, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 854, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 855, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 880, 407, 408, 409, 410, 755, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 171, 427, 428,
	794, 795, 796, 797, 423, 429, 430, 814, 431, 412,
	413, 432, 881, 433, 856, 798, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 836, 440, 441, 442, 857,
	0, 446, 447, 173, 448, 449, 450, 451, 452, 308,
	453, 309, 792, 455, 0, 858, 859, 860, 837, 0,
	0, 457, 458, 861, 862, 775, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 815, 468, 0,
	799, 469, 470, 471, 1153, 863, 0, 0, 472, 256,
	0, 0, 0, 165, 473, 474, 257, 475, 476, 477,
	747, 166, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 1372, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 791, 790,
	272, 273, 274, 764, 816, 841, 842, 221, 0, 275,
	823, 0, 806, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	866, 288, 289, 290, 809, 807, 808, 813, 811, 810,
	812, 291, 292, 500, 293, 826, 295, 843, 844, 749,
	296, 0, 297, 0, 298, 0, 0, 827, 300, 0,
	301, 302, 0, 0, 0, 754, 306, 303, 304, 307,
	310, 305, 311, 312, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 313, 314, 315, 847, 828, 829, 0,
	318, 0, 319, 0, 0, 868, 320, 0, 321, 848,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	328, 330, 337, 0, 869, 331, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 338, 871, 872, 339,
	340, 341, 873, 834, 835, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 851, 874, 349, 350, 875, 0,
	351, 352, 0, 0, 353, 0, 354, 751, 750, 355,
	356, 357, 358, 360, 793, 359, 876, 362, 363, 365,
	364, 746, 0, 877, 777, 821, 366, 852, 367, 368,
	0, 802, 803, 0, 0, 371, 372, 0, 0, 373,
	241, 878, 374, 879, 853, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 854, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 855, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 880, 407, 408, 409, 410,
	755, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	171, 427, 428, 794, 795, 796, 797, 423, 429, 430,
	814, 431, 412, 413, 432, 881, 433, 856, 798, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 836, 440,
	441, 442, 857, 0, 446, 447, 173, 448, 449, 450,
	451, 452, 308, 453, 309, 792, 455, 0, 858, 859,
	860, 837, 0, 0, 457, 458, 861, 862, 775, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	815, 468, 0, 799, 469, 470, 471, 1153, 863, 0,
	0, 472, 256, 0, 0, 0, 165, 473, 474, 257,
	475, 476, 477, 747, 166, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 781, 769,
	770, 767, 768, 760, 0, 1372, 0, 0, 0, 0,
	0, 759, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 1925,
	269, 791, 790, 272, 273, 274, 764, 816, 841, 842,
	221, 0, 275, 823, 0, 806, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 809, 807, 808,
	813, 811, 810, 812, 291, 292, 500, 293, 826, 295,
	843, 844, 749, 296, 0, 297, 0, 298, 0, 0,
	827, 300, 0, 301, 302, 0, 0, 0, 754, 306,
	303, 304, 307, 310, 305, 311, 312, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 847,
	828, 829, 0, 318, 0, 319, 0, 1930, 868, 320,
	0, 321, 848, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 818, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 338,
	871, 872, 339, 340, 341, 873, 834, 835, 0, 0,
	344, 345, 346, 0, 348, 347, 1926, 851, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	751, 750, 355, 356, 357, 358, 360, 793, 359, 876,
	362, 363, 365, 364, 746, 0, 877, 777, 821, 366,
	852, 367, 368, 0, 802, 803, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 853, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 854, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 855,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 755, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 794, 795, 796, 797,
	423, 429, 430, 814, 431, 412, 413, 432, 881, 433,
	856, 798, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 836, 440, 441, 442, 857, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 792, 455,
	0, 858, 859, 860, 837, 0, 1927, 457, 458, 861,
	862, 775, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 815, 468, 0, 799, 469, 470, 471,
	254, 863, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 747, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 743,
	744, 781, 769, 770, 767, 768, 760, 0, 756, 0,
	0, 0, 0, 0, 759, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 791, 790, 272, 273, 274, 764,
	816, 841, 842, 221, 0, 275, 823, 0, 806, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 866, 288, 289, 290,
	809, 807, 808, 813, 811, 810, 812, 291, 292, 500,
	293, 826, 295, 843, 844, 749, 296, 0, 297, 0,
	298, 0, 0, 827, 300, 0, 301, 302, 0, 0,
	0, 754, 306, 303, 304, 307, 310, 305, 311, 312,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 313,
	314, 315, 847, 828, 829, 0, 318, 0, 319, 0,
	0, 868, 320, 0, 321, 848, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 818, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 0, 328, 330, 337, 0,
	869, 331, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 338, 871, 872, 339, 340, 341, 873, 834,
	835, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	851, 874, 349, 350, 875, 0, 351, 352, 0, 0,
	353, 0, 354, 751, 750, 355, 356, 357, 358, 360,
	793, 359, 876, 362, 363, 365, 364, 746, 2687, 877,
	777, 821, 366, 852, 367, 368, 0, 802, 803, 0,
	0, 371, 372, 0, 0, 373, 241, 878, 374, 879,
	853, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 854, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 855, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 880, 407, 408, 409, 410, 755, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 794,
	795, 796, 797, 423, 429, 430, 814, 431, 412, 413,
	432, 881, 433, 856, 798, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 836, 440, 441, 442, 857, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 792, 455, 0, 858, 859, 860, 837, 0, 0,
	457, 458, 861, 862, 775, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 815, 468, 0, 799,
	469, 470, 471, 254, 863, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 1437, 781, 769, 770, 767, 768,
	760, 756, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 791, 790,
	272, 273, 274, 764, 816, 841, 842, 221, 0, 275,
	823, 0, 806, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	866, 288, 289, 290, 809, 807, 808, 813, 811, 810,
	812, 291, 292, 500, 293, 826, 295, 843, 844, 749,
	296, 0, 297, 0, 298, 0, 0, 827, 300, 0,
	301, 302, 0, 0, 0, 754, 306, 303, 304, 307,
	310, 305, 311, 312, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 313, 314, 315, 847, 828, 829, 0,
	318, 0, 319, 0, 0, 868, 320, 0, 321, 848,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 1751,
	328, 330, 337, 0, 869, 331, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 338, 871, 872, 339,
	340, 341, 873, 834, 835, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 851, 874, 349, 350, 875, 0,
	351, 352, 0, 0, 353, 0, 354, 751, 750, 355,
	356, 357, 358, 360, 793, 359, 876, 362, 363, 365,
	364, 746, 0, 877, 777, 821, 366, 852, 367, 368,
	0, 802, 803, 0, 0, 371, 372, 0, 0, 373,
	241, 878, 374, 879, 853, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 854, 384, 244, 385, 1750,
	386, 387, 388, 389, 390, 391, 855, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 880, 407, 408, 409, 410,
	755, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 794, 795, 796, 797, 423, 429, 430,
	814, 431, 412, 413, 432, 881, 433, 856, 798, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 836, 440,
	441, 442, 857, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 792, 455, 0, 858, 859,
	860, 837, 0, 0, 457, 458, 861, 862, 775, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	815, 468, 0, 799, 469, 470, 471, 254, 863, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	739, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 791, 790, 272, 273, 274,
	764, 816, 841, 842, 221, 0, 275, 823, 0, 806,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 866, 288, 289,
	290, 809, 807, 808, 813, 811, 810, 812, 291, 292,
	500, 293, 826, 295, 843, 844, 749, 296, 0, 297,
	0, 298, 0, 0, 827, 300, 0, 301, 302, 0,
	0, 0, 754, 306, 303, 304, 307, 310, 305, 311,
	312, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	313, 314, 315, 847, 828, 829, 0, 318, 0, 319,
	0, 0, 868, 320, 0, 321, 848, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 818, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 328, 330, 337,
	0, 869, 331, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 338, 871, 872, 339, 340, 341, 873,
	834, 835, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 851, 874, 349, 350, 875, 0, 351, 352, 0,
	0, 353, 0, 354, 751, 750, 355, 356, 357, 358,
	360, 793, 359, 876, 362, 363, 365, 364, 746, 0,
	877, 777, 821, 366, 852, 367, 368, 0, 802, 803,
	741, 0, 371, 372, 0, 0, 373, 241, 878, 374,
	879, 853, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 854, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 855, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 880, 407, 408, 409, 410, 755, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	794, 795, 796, 797, 423, 429, 430, 814, 431, 412,
	413, 432, 881, 433, 856, 798, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 836, 440, 441, 442, 857,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 792, 455, 0, 858, 859, 860, 837, 0,
	0, 457, 458, 861, 862, 775, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 815, 468, 0,
	799, 469, 470, 471, 254, 863, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 791, 790,
	272, 273, 274, 764, 816, 841, 842, 221, 0, 275,
	823, 0, 806, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	866, 288, 289, 290, 809, 807, 808, 813, 811, 810,
	812, 291, 292, 500, 293, 826, 295, 843, 844, 749,
	296, 0, 297, 0, 298, 0, 0, 827, 300, 0,
	301, 302, 0, 0, 0, 754, 306, 303, 304, 307,
	310, 305, 311, 312, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 313, 314, 315, 847, 828, 829, 0,
	318, 0, 319, 0, 0, 868, 320, 0, 321, 848,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	328, 330, 337, 0, 869, 331, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 338, 871, 872, 339,
	340, 341, 873, 834, 835, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 851, 874, 349, 350, 875, 0,
	351, 352, 0, 0, 353, 0, 354, 751, 750, 355,
	356, 357, 358, 360, 793, 359, 876, 362, 363, 365,
	364, 746, 0, 877, 777, 821, 366, 852, 367, 368,
	0, 802, 803, 0, 0, 371, 372, 0, 0, 373,
	241, 878, 374, 879, 853, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 854, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 855, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 880, 407, 408, 409, 410,
	755, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 794, 795, 796, 797, 423, 429, 430,
	814, 431, 412, 413, 432, 881, 433, 856, 798, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 836, 440,
	441, 442, 857, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 792, 455, 0, 858, 859,
	860, 837, 0, 0, 457, 458, 861, 862, 775, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	815, 468, 0, 799, 469, 470, 471, 254, 863, 2521,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 781, 769,
	770, 767, 768, 760, 0, 756, 0, 0, 0, 0,
	0, 759, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 791, 790, 272, 273, 274, 764, 816, 841, 842,
	221, 0, 275, 823, 0, 806, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 809, 807, 808,
	813, 811, 810, 812, 291, 292, 500, 293, 826, 295,
	843, 844, 749, 296, 0, 297, 0, 298, 0, 0,
	827, 300, 0, 301, 302, 0, 0, 0, 754, 306,
	303, 304, 307, 310, 305, 311, 312, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 847,
	828, 829, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 848, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 818, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 338,
	871, 872, 339, 340, 341, 873, 834, 835, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 851, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	751, 750, 355, 356, 357, 358, 360, 793, 359, 876,
	362, 363, 365, 364, 746, 0, 877, 777, 821, 366,
	852, 367, 368, 0, 802, 803, 741, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 853, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 854, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 855,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 755, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 794, 795, 796, 797,
	423, 429, 430, 814, 431, 412, 413, 432, 881, 433,
	856, 798, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 836, 440, 441, 442, 857, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 792, 455,
	0, 858, 859, 860, 837, 0, 0, 457, 458, 861,
	862, 775, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 815, 468, 0, 799, 469, 470, 471,
	254, 863, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 747, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 743,
	744, 781, 769, 770, 767, 768, 760, 0, 756, 0,
	0, 0, 0, 0, 759, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 791, 790, 272, 273, 274, 764,
	816, 841, 842, 221, 0, 275, 823, 0, 806, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 866, 288, 289, 290,
	809, 807, 808, 813, 811, 810, 812, 291, 292, 500,
	293, 826, 295, 843, 844, 749, 296, 0, 297, 0,
	298, 0, 0, 827, 300, 0, 301, 302, 0, 0,
	0, 754, 306, 303, 304, 307, 310, 305, 311, 312,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 313,
	314, 315, 847, 828, 829, 0, 318, 0, 319, 0,
	0, 868, 320, 0, 321, 848, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 818, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 0, 328, 330, 337, 0,
	869, 331, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 338, 871, 872, 339, 340, 341, 873, 834,
	835, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	851, 874, 349, 350, 875, 0, 351, 352, 0, 0,
	353, 0, 354, 751, 750, 355, 356, 357, 358, 360,
	793, 359, 876, 362, 363, 365, 364, 746, 0, 877,
	777, 821, 366, 852, 367, 368, 0, 802, 803, 0,
	0, 371, 372, 0, 0, 373, 241, 878, 374, 879,
	853, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 854, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 855, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 880, 407, 408, 409, 410, 755, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 794,
	795, 796, 797, 423, 429, 430, 814, 431, 412, 413,
	432, 881, 433, 856, 798, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 836, 440, 441, 442, 857, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 792, 455, 0, 858, 859, 860, 837, 0, 0,
	457, 458, 861, 862, 775, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 815, 468, 0, 799,
	469, 470, 471, 254, 863, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 1437, 781, 769, 770, 767, 768,
	760, 756, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 791, 790,
	272, 273, 274, 764, 816, 841, 842, 221, 0, 275,
	823, 0, 806, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	866, 288, 289, 290, 809, 807, 808, 813, 811, 810,
	812, 291, 292, 500, 293, 826, 295, 843, 844, 749,
	296, 0, 297, 0, 298, 0, 0, 827, 300, 0,
	301, 302, 0, 0, 0, 754, 306, 303, 304, 307,
	310, 305, 311, 312, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 313, 314, 315, 847, 828, 829, 0,
	318, 0, 319, 0, 1930, 868, 320, 0, 321, 848,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	328, 330, 337, 0, 869, 331, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 338, 871, 872, 339,
	340, 341, 873, 834, 835, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 851, 874, 349, 350, 875, 0,
	351, 352, 0, 0, 353, 0, 354, 751, 750, 355,
	356, 357, 358, 360, 793, 359, 876, 362, 363, 365,
	364, 746, 0, 877, 777, 821, 366, 852, 367, 368,
	0, 802, 803, 0, 0, 371, 372, 0, 0, 373,
	241, 878, 374, 879, 853, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 854, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 855, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 880, 407, 408, 409, 410,
	755, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 794, 795, 796, 797, 423, 429, 430,
	814, 431, 412, 413, 432, 881, 433, 856, 798, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 836, 440,
	441, 442, 857, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 792, 455, 0, 858, 859,
	860, 837, 0, 0, 457, 458, 861, 862, 775, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	815, 468, 0, 799, 469, 470, 471, 254, 863, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	1917, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 791, 790, 272, 273, 274,
	764, 816, 841, 842, 221, 0, 275, 823, 0, 806,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 866, 288, 289,
	290, 809, 807, 808, 813, 811, 810, 812, 291, 292,
	500, 293, 826, 295, 843, 844, 749, 296, 0, 297,
	0, 298, 0, 0, 827, 300, 0, 301, 302, 0,
	0, 0, 754, 306, 303, 304, 307, 310, 305, 311,
	312, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	313, 314, 315, 847, 828, 829, 0, 318, 0, 319,
	0, 0, 868, 320, 0, 321, 848, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 818, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 328, 330, 337,
	0, 869, 331, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 338, 871, 872, 339, 340, 341, 873,
	834, 835, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 851, 874, 349, 350, 875, 0, 351, 352, 0,
	0, 353, 0, 354, 751, 750, 355, 356, 357, 358,
	360, 793, 359, 876, 362, 363, 365, 364, 746, 0,
	877, 777, 821, 366, 852, 367, 368, 0, 802, 803,
	0, 0, 371, 372, 0, 0, 373, 241, 878, 374,
	879, 853, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 854, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 855, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 880, 407, 408, 409, 410, 755, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	794, 795, 796, 797, 423, 429, 430, 814, 431, 412,
	413, 432, 881, 433, 856, 798, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 836, 440, 441, 442, 857,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 792, 455, 0, 858, 859, 860, 837, 0,
	0, 457, 458, 861, 862, 775, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 815, 468, 0,
	799, 469, 470, 471, 254, 863, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 756, 0, 0, 0, 0, 1906, 759, 781,
	769, 770, 767, 768, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 817, 763, 0, 0, 0,
	263, 264, 265, 215, 838, 801, 839, 789, 825, 840,
	0, 269, 791, 790, 272, 273, 274, 764, 816, 841,
	842, 221, 0, 275, 823, 0, 806, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 866, 288, 289, 290, 809, 807,
	808, 813, 811, 810, 812, 291, 292, 500, 293, 826,
	295, 843, 844, 749, 296, 0, 297, 0, 298, 0,
	0, 827, 300, 0, 301, 302, 0, 0, 0, 754,
	306, 303, 304, 307, 310, 305, 311, 312, 845, 846,
	776, 867, 0, 0, 0, 0, 0, 313, 314, 315,
	847, 828, 829, 0, 318, 0, 319, 0, 0, 868,
	320, 0, 321, 848, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 818, 819, 822, 870, 0, 820, 800,
	0, 0, 0, 0, 328, 330, 337, 0, 869, 331,
	849, 804, 830, 831, 832, 833, 850, 0, 805, 0,
	338, 871, 872, 339, 340, 341, 873, 834, 835, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 851, 874,
	349, 350, 875, 0, 351, 352, 0, 0, 353, 0,
	354, 751, 750, 355, 356, 357, 358, 360, 793, 359,
	876, 362, 363, 365, 364, 746, 0, 877, 777, 821,
	366, 852, 367, 368, 0, 802, 803, 0, 0, 371,
	372, 0, 0, 373, 241, 878, 374, 879, 853, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 854,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	855, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 880,
	407, 408, 409, 410, 755, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 794, 795, 796,
	797, 423, 429, 430, 814, 431, 412, 413, 432, 881,
	433, 856, 798, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 836, 440, 441, 442, 857, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 792,
	455, 0, 858, 859, 860, 837, 0, 0, 457, 458,
	861, 862, 775, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 815, 468, 0, 799, 469, 470,
	471, 254, 863, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 747, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 0, 1904, 759, 781, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 791,
	790, 272, 273, 274, 764, 816, 841, 842, 221, 0,
	275, 823, 0, 806, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 866, 288, 289, 290, 809, 807, 808, 813, 811,
	810, 812, 291, 292, 500, 293, 826, 295, 843, 844,
	749, 296, 0, 297, 0, 298, 0, 0, 827, 300,
	0, 301, 302, 0, 0, 0, 754, 306, 303, 304,
	307, 310, 305, 311, 312, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 313, 314, 315, 847, 828, 829,
	0, 318, 0, 319, 0, 0, 868, 320, 0, 321,
	848, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 328, 330, 337, 0, 869, 331, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 338, 871, 872,
	339, 340, 341, 873, 834, 835, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 851, 874, 349, 350, 875,
	0, 351, 352, 0, 0, 353, 0, 354, 751, 750,
	355, 356, 357, 358, 360, 793, 359, 876, 362, 363,
	365, 364, 746, 0, 877, 777, 821, 366, 852, 367,
	368, 0, 802, 803, 0, 0, 371, 372, 0, 0,
	373, 241, 878, 374, 879, 853, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 854, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 855, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 880, 407, 408, 409,
	410, 755, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 794, 795, 796, 797, 423, 429,
	430, 814, 431, 412, 413, 432, 881, 433, 856, 798,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 836,
	440, 441, 442, 857, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 792, 455, 0, 858,
	859, 860, 837, 0, 0, 457, 458, 861, 862, 775,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 815, 468, 0, 799, 469, 470, 471, 254, 863,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 747, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 0, 743, 744, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 1902, 759, 781, 769, 770, 767, 768, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 817,
	763, 0, 0, 0, 263, 264, 265, 215, 838, 801,
	839, 789, 825, 840, 0, 269, 791, 790, 272, 273,
	274, 764, 816, 841, 842, 221, 0, 275, 823, 0,
	806, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 866, 288,
	289, 290, 809, 807, 808, 813, 811, 810, 812, 291,
	292, 500, 293, 826, 295, 843, 844, 749, 296, 0,
	297, 0, 298, 0, 0, 827, 300, 0, 301, 302,
	0, 0, 0, 754, 306, 303, 304, 307, 310, 305,
	311, 312, 845, 846, 776, 867, 0, 0, 0, 0,
	0, 313, 314, 315, 847, 828, 829, 0, 318, 0,
	319, 0, 0, 868, 320, 0, 321, 848, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 818, 819, 822,
	870, 0, 820, 800, 0, 0, 0, 0, 328, 330,
	337, 0, 869, 331, 849, 804, 830, 831, 832, 833,
	850, 0, 805, 0, 338, 871, 872, 339, 340, 341,
	873, 834, 835, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 851, 874, 349, 350, 875, 0, 351, 352,
	0, 0, 353, 0, 354, 751, 750, 355, 356, 357,
	358, 360, 793, 359, 876, 362, 363, 365, 364, 746,
	0, 877, 777, 821, 366, 852, 367, 368, 0, 802,
	803, 0, 0, 371, 372, 0, 0, 373, 241, 878,
	374, 879, 853, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 854, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 855, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 880, 407, 408, 409, 410, 755, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 794, 795, 796, 797, 423, 429, 430, 814, 431,
	412, 413, 432, 881, 433, 856, 798, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 836, 440, 441, 442,
	857, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 792, 455, 0, 858, 859, 860, 837,
	0, 0, 457, 458, 861, 862, 775, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 815, 468,
	0, 799, 469, 470, 471, 254, 863, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 1899, 759,
	1891, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 791, 790, 272, 273, 274, 764, 816,
	841, 842, 221, 0, 275, 823, 0, 806, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 866, 288, 289, 290, 809,
	807, 808, 813, 811, 810, 812, 291, 292, 500, 293,
	826, 1894, 843, 844, 749, 296, 0, 297, 0, 298,
	0, 0, 827, 300, 0, 301, 302, 0, 0, 0,
	754, 306, 303, 304, 307, 310, 305, 311, 312, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 313, 314,
	315, 847, 828, 829, 0, 318, 0, 319, 0, 0,
	868, 320, 0, 321, 848, 0, 230, 0, 322, 323,
	1895, 325, 326, 327, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 328, 330, 337, 0, 869,
	331, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 338, 871, 872, 339, 340, 341, 873, 834, 835,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 851,
	874, 349, 350, 875, 0, 351, 352, 0, 0, 353,
	0, 354, 751, 750, 1896, 1893, 357, 358, 360, 793,
	359, 876, 362, 363, 365, 364, 746, 0, 877, 777,
	821, 366, 852, 367, 368, 0, 802, 803, 0, 0,
	371, 372, 0, 0, 373, 241, 878, 374, 879, 853,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	854, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 855, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	880, 407, 408, 409, 410, 755, 411, 0, 415, 416,
	417, 418, 419, 420, 1897, 0, 427, 428, 794, 795,
	796, 797, 423, 429, 430, 814, 431, 412, 413, 432,
	881, 433, 856, 798, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 836, 440, 441, 442, 857, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	792, 455, 0, 858, 859, 860, 837, 0, 0, 457,
	458, 861, 862, 775, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 815, 468, 0, 799, 469,
	470, 471, 254, 863, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 1892, 477, 747, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 743, 744, 0, 0, 0, 0, 0, 0, 0,
	756, 0, 0, 0, 0, 1888, 759, 1891, 769, 770,
	767, 768, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 817, 763, 0, 0, 0, 263, 264,
	265, 215, 838, 801, 839, 789, 825, 840, 0, 269,
	791, 790, 272, 273, 274, 764, 816, 841, 842, 221,
	0, 275, 823, 0, 806, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 866, 288, 289, 290, 809, 807, 808, 813,
	811, 810, 812, 291, 292, 500, 293, 826, 1894, 843,
	844, 749, 296, 0, 297, 0, 298, 0, 0, 827,
	300, 0, 301, 302, 0, 0, 0, 754, 306, 303,
	304, 307, 310, 305, 311, 312, 845, 846, 776, 867,
	0, 0, 0, 0, 0, 313, 314, 315, 847, 828,
	829, 0, 318, 0, 319, 0, 0, 868, 320, 0,
	321, 848, 0, 230, 0, 322, 323, 1895, 325, 326,
	327, 818, 819, 822, 870, 0, 820, 800, 0, 0,
	0, 0, 328, 330, 337, 0, 869, 331, 849, 804,
	830, 831, 832, 833, 850, 0, 805, 0, 338, 871,
	872, 339, 340, 341, 873, 834, 835, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 851, 874, 349, 350,
	875, 0, 351, 352, 0, 0, 353, 0, 354, 751,
	750, 1896, 1893, 357, 358, 360, 793, 359, 876, 362,
	363, 365, 364, 746, 0, 877, 777, 821, 366, 852,
	367, 368, 0, 802, 803, 0, 0, 371, 372, 0,
	0, 373, 241, 878, 374, 879, 853, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 854, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 855, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 880, 407, 408,
	409, 410, 755, 411, 0, 415, 416, 417, 418, 419,
	420, 1897, 0, 427, 428, 794, 795, 796, 797, 423,
	429, 430, 814, 431, 412, 413, 432, 881, 433, 856,
	798, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	836, 440, 441, 442, 857, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 792, 455, 0,
	858, 859, 860, 837, 0, 0, 457, 458, 861, 862,
	775, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 815, 468, 0, 799, 469, 470, 471, 254,
	863, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 1892, 477, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 791, 790, 272, 273, 274, 764, 816,
	841, 842, 221, 0, 275, 823, 0, 806, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 866, 288, 289, 290, 809,
	807, 808, 813, 811, 810, 812, 291, 292, 500, 293,
	826, 295, 843, 844, 749, 296, 0, 297, 0, 298,
	0, 0, 827, 300, 0, 301, 302, 0, 0, 0,
	754, 306, 303, 304, 307, 310, 305, 311, 312, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 313, 314,
	315, 847, 828, 829, 0, 318, 0, 319, 0, 0,
	868, 320, 0, 321, 848, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 328, 330, 337, 0, 869,
	331, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 338, 871, 872, 339, 340, 341, 873, 834, 835,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 851,
	874, 349, 350, 875, 0, 351, 352, 0, 0, 353,
	0, 354, 751, 750, 355, 356, 357, 358, 360, 793,
	359, 876, 362, 363, 365, 364, 746, 0, 877, 777,
	821, 366, 852, 367, 368, 0, 802, 803, 0, 0,
	371, 372, 0, 0, 373, 241, 878, 374, 879, 853,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	854, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 855, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	880, 407, 408, 409, 410, 755, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 794, 795,
	796, 797, 423, 429, 430, 814, 431, 412, 413, 432,
	881, 433, 856, 798, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 836, 440, 441, 442, 857, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	792, 455, 0, 858, 859, 860, 837, 0, 0, 457,
	458, 861, 862, 775, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 815, 468, 0, 799, 469,
	470, 471, 254, 863, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 747, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 743, 744, 0, 0, 0, 0, 0, 1377, 0,
	756, 0, 0, 0, 0, 0, 759, 781, 769, 770,
	767, 768, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1738, 262, 0,
	0, 0, 0, 817, 763, 0, 0, 0, 263, 264,
	265, 215, 838, 801, 839, 789, 825, 840, 0, 269,
	791, 790, 272, 273, 274, 764, 816, 841, 842, 221,
	0, 275, 823, 0, 806, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 866, 288, 289, 290, 809, 807, 808, 813,
	811, 810, 812, 291, 292, 500, 293, 826, 295, 843,
	844, 749, 296, 0, 297, 0, 298, 0, 0, 827,
	300, 0, 301, 302, 0, 0, 0, 754, 306, 303,
	304, 307, 310, 305, 311, 312, 845, 846, 776, 867,
	0, 0, 0, 0, 0, 313, 314, 315, 847, 828,
	829, 0, 318, 0, 319, 0, 0, 868, 320, 0,
	321, 848, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 818, 819, 822, 870, 0, 820, 800, 0, 0,
	0, 0, 328, 330, 337, 0, 869, 331, 849, 804,
	830, 831, 832, 833, 850, 0, 805, 0, 338, 871,
	872, 339, 340, 341, 873, 834, 835, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 851, 874, 349, 350,
	875, 0, 351, 352, 0, 0, 353, 0, 354, 751,
	750, 355, 356, 357, 358, 360, 793, 359, 876, 362,
	363, 365, 364, 746, 0, 877, 777, 821, 366, 852,
	367, 368, 0, 802, 803, 0, 0, 371, 372, 0,
	0, 373, 241, 878, 374, 879, 853, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 854, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 855, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 880, 407, 408,
	409, 410, 755, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 794, 795, 796, 797, 423,
	429, 430, 814, 431, 412, 413, 432, 881, 433, 856,
	798, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	836, 440, 441, 442, 857, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 792, 455, 0,
	858, 859, 860, 837, 0, 0, 457, 458, 861, 862,
	775, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 815, 468, 0, 799, 469, 470, 471, 254,
	863, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 1078, 759, 781, 769, 770, 767, 768, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 791, 790, 272,
	273, 274, 764, 816, 841, 842, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 826, 295, 843, 844, 749, 296,
	0, 297, 0, 298, 0, 0, 827, 300, 0, 301,
	302, 0, 0, 0, 754, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 847, 828, 829, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1077, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 338, 871, 872, 339, 340,
	341, 873, 834, 835, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 751, 750, 355, 356,
	357, 358, 360, 793, 359, 876, 362, 363, 365, 364,
	746, 0, 877, 777, 821, 366, 852, 367, 368, 0,
	802, 803, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 855, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 755,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 794, 795, 796, 797, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 856, 798, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 836, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 792, 455, 0, 858, 859, 860,
	837, 0, 0, 457, 458, 861, 862, 775, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 799, 469, 470, 471, 254, 863, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 747, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 743, 744, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 0, 0, 1072,
	759, 781, 769, 770, 767, 768, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 791, 790, 272, 273, 274, 764,
	816, 841, 842, 221, 0, 275, 823, 0, 806, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 866, 288, 289, 290,
	809, 807, 808, 813, 811, 810, 812, 291, 292, 500,
	293, 826, 295, 843, 844, 749, 296, 0, 297, 0,
	298, 0, 0, 827, 300, 0, 301, 302, 0, 0,
	0, 754, 306, 303, 304, 307, 310, 305, 311, 312,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 313,
	314, 315, 847, 828, 829, 0, 318, 0, 319, 0,
	0, 868, 320, 0, 321, 848, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 1071, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 0, 328, 330, 337, 0,
	869, 331, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 338, 871, 872, 339, 340, 341, 873, 834,
	835, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	851, 874, 349, 350, 875, 0, 351, 352, 0, 0,
	353, 0, 354, 751, 750, 355, 356, 357, 358, 360,
	793, 359, 876, 362, 363, 365, 364, 746, 0, 877,
	777, 821, 366, 852, 367, 368, 0, 802, 803, 0,
	0, 371, 372, 0, 0, 373, 241, 878, 374, 879,
	853, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 854, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 855, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 880, 407, 408, 409, 410, 755, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 794,
	795, 796, 797, 423, 429, 430, 814, 431, 412, 413,
	432, 881, 433, 856, 798, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 836, 440, 441, 442, 857, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 792, 455, 0, 858, 859, 860, 837, 0, 0,
	457, 458, 861, 862, 775, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 815, 468, 0, 799,
	469, 470, 471, 254, 863, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1067, 759, 781, 769,
	770, 767, 768, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 791, 790, 272, 273, 274, 764, 816, 841, 842,
	221, 0, 275, 823, 0, 806, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 809, 807, 808,
	813, 811, 810, 812, 291, 292, 500, 293, 826, 295,
	843, 844, 749, 296, 0, 297, 0, 298, 0, 0,
	827, 300, 0, 301, 302, 0, 0, 0, 754, 306,
	303, 304, 307, 310, 305, 311, 312, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 847,
	828, 829, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 848, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 818, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 338,
	871, 872, 339, 340, 341, 873, 834, 835, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 851, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	751, 750, 355, 356, 357, 358, 360, 793, 359, 876,
	362, 363, 365, 364, 746, 0, 877, 777, 821, 366,
	852, 367, 368, 0, 802, 803, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 853, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 854, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 855,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 755, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 794, 795, 796, 797,
	423, 429, 430, 814, 431, 412, 413, 432, 881, 433,
	856, 798, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 836, 440, 441, 442, 857, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 792, 455,
	0, 858, 859, 860, 837, 0, 0, 457, 458, 861,
	862, 775, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 815, 468, 0, 799, 469, 470, 471,
	254, 863, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 747, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 743,
	744, 781, 769, 770, 767, 768, 760, 0, 756, 0,
	0, 0, 0, 0, 759, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 791, 790, 272, 273, 274, 764,
	816, 841, 842, 221, 0, 275, 823, 0, 806, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 866, 288, 289, 290,
	809, 807, 808, 813, 811, 810, 812, 291, 292, 500,
	293, 826, 295, 843, 844, 749, 296, 0, 297, 0,
	298, 0, 0, 827, 300, 0, 301, 302, 0, 0,
	0, 754, 306, 303, 304, 307, 310, 305, 311, 312,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 313,
	314, 315, 847, 828, 829, 0, 318, 0, 319, 0,
	0, 868, 320, 0, 321, 848, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 818, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 0, 328, 330, 337, 0,
	869, 331, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 338, 871, 872, 339, 340, 341, 873, 834,
	835, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	851, 874, 349, 350, 875, 0, 351, 352, 0, 0,
	353, 0, 354, 751, 750, 355, 356, 357, 358, 360,
	793, 359, 876, 362, 363, 365, 364, 746, 0, 877,
	777, 821, 366, 852, 367, 368, 0, 802, 803, 0,
	0, 371, 372, 0, 0, 373, 241, 878, 374, 879,
	853, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 854, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 855, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 880, 407, 408, 409, 410, 755, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 794,
	795, 796, 797, 423, 429, 430, 814, 431, 412, 413,
	432, 881, 433, 856, 798, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 836, 440, 441, 442, 857, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 792, 455, 0, 858, 859, 860, 837, 0, 0,
	457, 458, 861, 862, 775, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 815, 468, 0, 799,
	469, 470, 471, 254, 863, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 781, 769, 770, 767, 768, 760,
	0, 756, 0, 0, 0, 0, 0, 759, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 791, 790, 272,
	273, 274, 764, 816, 841, 842, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 3070, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 826, 295, 843, 844, 749, 296,
	0, 297, 0, 298, 0, 0, 827, 300, 0, 301,
	302, 0, 0, 0, 754, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 847, 828, 829, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 338, 871, 872, 339, 340,
	341, 873, 834, 835, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 751, 750, 355, 356,
	357, 358, 360, 793, 359, 876, 362, 363, 365, 364,
	746, 0, 877, 777, 821, 366, 852, 367, 368, 0,
	802, 803, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 855, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 755,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 794, 795, 796, 797, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 856, 798, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 836, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 792, 455, 0, 858, 859, 860,
	837, 0, 0, 457, 458, 861, 862, 775, 459, 460,
	0, 3069, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 799, 469, 470, 471, 254, 863, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 747, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 743, 744, 781, 769, 770,
	767, 768, 760, 0, 756, 0, 0, 0, 0, 0,
	759, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 817, 763, 0, 0, 0, 263, 264,
	265, 3068, 838, 801, 839, 789, 825, 840, 0, 269,
	791, 790, 272, 273, 274, 764, 816, 841, 842, 221,
	0, 275, 823, 0, 806, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 866, 288, 289, 3070, 809, 807, 808, 813,
	811, 810, 812, 291, 292, 500, 293, 826, 295, 843,
	844, 749, 296, 0, 297, 0, 298, 0, 0, 827,
	300, 0, 301, 302, 0, 0, 0, 754, 306, 303,
	304, 307, 310, 305, 311, 312, 845, 846, 776, 867,
	0, 0, 0, 0, 0, 313, 314, 315, 847, 828,
	829, 0, 318, 0, 319, 0, 0, 868, 320, 0,
	321, 848, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 818, 819, 822, 870, 0, 820, 800, 0, 0,
	0, 0, 328, 330, 337, 0, 869, 331, 849, 804,
	830, 831, 832, 833, 850, 0, 805, 0, 338, 871,
	872, 339, 340, 341, 873, 834, 835, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 851, 874, 349, 350,
	875, 0, 351, 352, 0, 0, 353, 0, 354, 751,
	750, 355, 356, 357, 358, 360, 793, 359, 876, 362,
	363, 365, 364, 746, 0, 877, 777, 821, 366, 852,
	367, 368, 0, 802, 803, 0, 0, 371, 372, 0,
	0, 373, 241, 878, 374, 879, 853, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 854, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 855, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 880, 407, 408,
	409, 410, 755, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 794, 795, 796, 797, 423,
	429, 430, 814, 431, 412, 413, 432, 881, 433, 856,
	798, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	836, 440, 441, 442, 857, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 792, 455, 0,
	858, 859, 860, 837, 0, 0, 457, 458, 861, 862,
	775, 459, 460, 0, 3069, 462, 0, 0, 463, 464,
	465, 467, 815, 468, 0, 799, 469, 470, 471, 254,
	863, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 791, 790, 272, 273, 274, 764, 816,
	841, 842, 221, 0, 275, 823, 0, 806, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 866, 288, 289, 290, 809,
	807, 808, 813, 811, 810, 812, 291, 292, 500, 293,
	826, 295, 843, 844, 0, 296, 0, 297, 0, 298,
	0, 0, 827, 300, 0, 301, 302, 0, 0, 0,
	754, 306, 303, 304, 307, 310, 305, 311, 312, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 313, 314,
	315, 847, 828, 829, 0, 318, 0, 319, 0, 0,
	868, 320, 0, 321, 848, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 328, 330, 337, 0, 869,
	331, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 338, 871, 872, 339, 340, 341, 873, 834, 835,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 851,
	874, 349, 350, 875, 0, 351, 352, 0, 0, 353,
	0, 354, 935, 934, 355, 356, 357, 358, 360, 793,
	359, 876, 362, 363, 365, 364, 0, 0, 877, 777,
	821, 366, 852, 367, 368, 0, 802, 803, 0, 0,
	371, 372, 0, 0, 373, 241, 878, 374, 879, 853,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	854, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 855, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	880, 407, 408, 409, 410, 755, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 794, 795,
	796, 797, 423, 429, 430, 814, 431, 412, 413, 432,
	881, 433, 856, 798, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 836, 440, 441, 442, 857, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	792, 455, 0, 858, 859, 860, 837, 0, 0, 457,
	458, 861, 862, 775, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 815, 468, 0, 799, 469,
	470, 471, 254, 863, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 781, 769,
	770, 767, 768, 760, 0, 0, 1914, 0, 0, 0,
	0, 1912, 1913, 0, 258, 259, 260, 261, 0, 262,
	756, 0, 0, 0, 817, 763, 759, 0, 0, 263,
	264, 265, 0, 838, 801, 839, 789, 825, 840, 0,
	269, 791, 790, 272, 273, 274, 764, 816, 841, 842,
	221, 0, 275, 823, 0, 806, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 3070, 809, 807, 808,
	813, 811, 810, 812, 291, 292, 500, 293, 826, 295,
	843, 844, 749, 296, 0, 297, 0, 298, 0, 0,
	827, 300, 0, 301, 302, 0, 0, 0, 754, 306,
	303, 304, 307, 310, 305, 311, 312, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 847,
	828, 829, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 848, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 818, 819, 822, 0, 0, 820, 800, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 338,
	0, 0, 339, 340, 341, 873, 834, 835, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 851, 874, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	751, 750, 355, 356, 357, 358, 360, 793, 359, 876,
	362, 363, 365, 364, 746, 0, 0, 777, 821, 366,
	852, 367, 368, 0, 802, 803, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 853, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 854, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 855,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 755, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 794, 795, 796, 797,
	423, 429, 430, 814, 431, 412, 413, 432, 0, 433,
	856, 798, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 836, 440, 441, 442, 857, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 792, 455,
	0, 858, 859, 860, 837, 0, 0, 457, 458, 861,
	862, 775, 459, 460, 0, 3069, 462, 0, 0, 463,
	464, 465, 467, 815, 468, 0, 799, 469, 470, 471,
	254, 863, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 731, 0, 933, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	258, 259, 260, 261, 759, 262, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 920,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 171,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 173, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 1153, 255, 0, 0,
	472, 256, 0, 0, 933, 165, 473, 474, 257, 475,
	476, 477, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 917, 0, 1462, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 920,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 171,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 173, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 1153, 255, 0, 0,
	472, 256, 2301, 0, 933, 165, 473, 474, 257, 475,
	476, 477, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 917, 0, 1462, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 920,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 916, 0, 933, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 917, 0, 922, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 920,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 0, 0, 933, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 917, 0, 922, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 920,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 0, 0, 933, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 917, 0, 922, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 0, 0, 933, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 0, 0, 2627, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1150, 0, 956, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 1366, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 960, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 870, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 171,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 173, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 1153, 255, 0, 0,
	472, 256, 0, 0, 933, 165, 473, 474, 257, 475,
	476, 477, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 0, 0, 0, 138, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 816, 219, 220, 221, 0, 275, 823,
	0, 806, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 809, 807, 808, 813, 811, 810, 812,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 848, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 818, 819,
	822, 870, 0, 820, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 871, 872, 339, 340,
	341, 873, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 851, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 361, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 0, 821, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 853, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 854, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 814,
	431, 412, 413, 432, 881, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 857, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 861, 862, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 815,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 731, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 171,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 173, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 1153, 255, 0, 0,
	472, 256, 0, 0, 0, 165, 473, 474, 257, 475,
	476, 477, 0, 166, 781, 769, 770, 767, 768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 138, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 791, 790, 272,
	273, 274, 0, 0, 841, 842, 221, 0, 275, 222,
	0, 960, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 866,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 826, 295, 843, 844, 0, 296,
	0, 297, 0, 298, 0, 0, 827, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 776, 867, 0, 0, 0,
	0, 0, 313, 314, 315, 847, 828, 829, 0, 318,
	0, 319, 0, 0, 868, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 870, 0, 237, 800, 0, 0, 0, 0, 328,
	330, 337, 0, 869, 331, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 338, 871, 872, 339, 340,
	341, 873, 834, 835, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 874, 349, 350, 875, 0, 351,
	352, 0, 0, 353, 0, 354, 935, 934, 355, 356,
	357, 358, 360, 793, 359, 876, 362, 363, 365, 364,
	0, 0, 877, 777, 239, 366, 852, 367, 368, 0,
	802, 803, 0, 0, 371, 372, 0, 0, 373, 241,
	878, 374, 879, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 855, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 880, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 794, 795, 796, 797, 423, 429, 430, 0,
	431, 412, 413, 432, 881, 433, 856, 798, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 836, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 792, 455, 0, 858, 859, 860,
	837, 0, 0, 457, 458, 252, 253, 775, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 799, 469, 470, 471, 254, 863, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2097, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2536, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 1232, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 1467, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 1231, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 1230, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 1146, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1145, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 1142, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1141, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 1103, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1102, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 1100, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1099, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 949, 0, 956, 955,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 960, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 866, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	867, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 868, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 951, 232, 233, 870, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 869, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	871, 872, 339, 340, 341, 873, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 874, 349,
	350, 875, 0, 351, 352, 0, 0, 353, 0, 354,
	935, 934, 355, 356, 357, 358, 360, 361, 359, 876,
	362, 363, 365, 364, 0, 0, 877, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 878, 374, 879, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 880, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 881, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 956, 955, 472, 256, 0, 953, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 960,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 866, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	500, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 867, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 868, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 870,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 869, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 871, 872, 339, 340, 341, 873,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 874, 349, 350, 875, 0, 351, 352, 0,
	0, 353, 0, 354, 935, 934, 355, 356, 357, 358,
	360, 361, 359, 876, 362, 363, 365, 364, 0, 0,
	877, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 878, 374,
	879, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 880, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 881, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 956, 955, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 960, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 866, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 500, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 867, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 868, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 870, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 869, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 871, 872,
	339, 340, 341, 873, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 874, 349, 350, 875,
	0, 351, 352, 0, 0, 353, 0, 354, 935, 934,
	355, 356, 357, 358, 360, 361, 359, 876, 362, 363,
	365, 364, 0, 0, 877, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 878, 374, 879, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 880, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 881, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	956, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 960, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 866, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 867, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	868, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 870, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 869,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 871, 872, 339, 340, 341, 873, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	874, 349, 350, 875, 0, 351, 352, 0, 0, 353,
	0, 354, 935, 934, 355, 356, 357, 358, 360, 361,
	359, 876, 362, 363, 365, 364, 0, 0, 877, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 878, 374, 879, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	880, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	881, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 599, 0,
	207, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 213, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 212, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 206, 0,
	207, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 480, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 213, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 212, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 207, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 480, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 213, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 1707, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 212, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 207, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 480, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 213, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 212,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 480, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	500, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 480, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 1990,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 1987, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 500, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 2067, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 1993, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	2065, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 2064, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	1992, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 2066, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 1990, 275, 222, 0, 0, 1984, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 1987,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 1993, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1983, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 1992, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	1991, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 606, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 605,
	585, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 588, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 589, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 590, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 584, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	585, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 588, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 589, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 590, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 588, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 589, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 590,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1121, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 944, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 946, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 941, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 943, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 937, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 939, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 925, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 520, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 519, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 518, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 1965, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 2459, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	500, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 2459, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 500, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 2456, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 925,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1727, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1725, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1723, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 1700, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1658, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1656, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 632, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 1203, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 633, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 629, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 628, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1553, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1552, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 632, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 1203, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 633, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 629, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 628, 250, 251,
	456, 0, 0, 457, 1204, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 632, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 622, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 633, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 629, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 1172, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 628, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1139, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1138, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1135, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1134, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1132, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1131, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1129, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1128, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 1125, 0, 497, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1124, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 1113, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1111, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1110, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1105, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1096, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1095, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1091, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 1087, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1089, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 964, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 966, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 961, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 632, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 622, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 621, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 633, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 623, 411, 0, 415, 416, 629, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 624, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 628, 250, 251, 456, 0, 0, 457, 626, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 612, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 613, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 608, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 597, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 0, 0, 472, 256, 542, 0, 497, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	500, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 500, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	2359, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 2357, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 2346, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 500, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 613, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	1566, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	500, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 0, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 500, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1557, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 500, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 899, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 500, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 0, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 0, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	0, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 1306, 0, 0,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 1306,
	0, 0, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 1329, 1330, 1331, 1305, 0, 0, 0, 0, 0,
	1311, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 0, 1341,
	0, 0, 1311, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 1332, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1344, 0,
	0, 0, 1306, 0, 1342, 1352, 0, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 0, 0, 0, 0, 1305, 0, 0,
	0, 2240, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1303,
	1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 1306, 0, 1342, 1352, 0, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 1305,
	0, 0, 0, 2239, 0, 1311, 0, 1325, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 1328, 1329, 1330,
	1331, 0, 0, 0, 1341, 0, 0, 1311, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1350, 0, 0, 0,
	0, 0, 0, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1332, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1344, 0, 0, 0, 1306, 0, 1342,
	1352, 0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 1305, 0, 0, 0, 2236, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 1306,
	0, 1342, 1352, 0, 1317, 1318, 1324, 1323, 1319, 1345,
	0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313,
	1328, 1329, 1330, 1331, 1305, 0, 0, 0, 2235, 0,
	1311, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 0, 1341,
	0, 0, 1311, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 1332, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1344, 0,
	0, 0, 1306, 0, 1342, 1352, 0, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 0, 0, 0, 0, 1305, 0, 0,
	0, 2234, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	1303, 1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 1306, 1342, 0, 1352, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 3034,
	1305, 0, 0, 0, 0, 1311, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 0, 1328, 1329,
	1330, 1331, 0, 0, 1341, 0, 0, 0, 1311, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 1350, 0, 0,
	0, 0, 0, 0, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 1332, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346,
	1347, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1344, 0, 0, 0, 1306, 1342,
	0, 1352, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 3030, 1305, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 1303, 1304, 0, 1336,
	1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 1306, 1342, 0, 1352, 1317, 1318, 1324, 1323, 1319,
	1345, 0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312,
	1313, 1328, 1329, 1330, 1331, 2971, 1305, 0, 0, 0,
	0, 1311, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 1353, 0, 0, 1333, 1334,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	1350, 0, 0, 0, 0, 0, 0, 1320, 1321, 0,
	0, 0, 0, 0, 1328, 1329, 1330, 1331, 0, 0,
	1341, 0, 0, 0, 1311, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1351, 0, 1343, 1353, 0,
	0, 1333, 1334, 1335, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 1350, 0, 0, 0, 0, 0, 0,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 1332, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 1303,
	1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	1344, 0, 0, 0, 1306, 1342, 0, 1352, 1317, 1318,
	1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308,
	1309, 1310, 1312, 1313, 0, 0, 0, 0, 2970, 1305,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 1306, 1342, 0,
	1352, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316, 1314,
	1315, 1307, 1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330,
	1331, 2920, 1305, 0, 0, 0, 0, 1311, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1350, 0, 0, 0,
	0, 0, 0, 1320, 1321, 0, 0, 0, 0, 0,
	1328, 1329, 1330, 1331, 0, 0, 1341, 0, 0, 0,
	1311, 0, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 1332, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 1303, 1304, 0, 1336, 1337,
	1338, 1346, 1347, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 1344, 0, 0, 0,
	1306, 1342, 0, 1352, 1317, 1318, 1324, 1323, 1319, 1345,
	0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313,
	0, 0, 0, 0, 2881, 1305, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 1303, 1304,
	0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 1306, 1342, 0, 1352, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 1328, 1329, 1330, 1331, 2793, 1305, 0,
	0, 0, 0, 1311, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 1353, 0, 0,
	1333, 1334, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 1350, 0, 0, 0, 0, 0, 0, 1320,
	1321, 0, 0, 0, 0, 0, 1328, 1329, 1330, 1331,
	0, 0, 1341, 0, 0, 0, 1311, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 0, 1343,
	1353, 0, 0, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 1350, 0, 0, 0, 0,
	0, 0, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 1332,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 1344, 0, 0, 0, 1306, 1342, 0, 1352,
	1317, 1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315,
	1307, 1308, 1309, 1310, 1312, 1313, 0, 0, 0, 0,
	2750, 1305, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 1306,
	1342, 0, 1352, 1317, 1318, 1324, 1323, 1319, 1345, 0,
	1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 1328,
	1329, 1330, 1331, 2749, 1305, 0, 0, 0, 0, 1311,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 1350, 0,
	0, 0, 0, 0, 0, 1320, 1321, 0, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 1341, 0,
	0, 0, 1311, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1351, 0, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 1332, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1344, 0,
	0, 0, 1306, 1342, 0, 1352, 1317, 1318, 1324, 1323,
	1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309, 1310,
	1312, 1313, 0, 0, 0, 0, 2748, 1305, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	1303, 1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 1306, 1342, 0, 1352, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 2720,
	1305, 0, 0, 0, 0, 1311, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 0, 1328, 1329,
	1330, 1331, 0, 0, 1341, 0, 0, 0, 1311, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 1350, 0, 0,
	0, 0, 0, 0, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 1332, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346,
	1347, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1344, 0, 0, 0, 1306, 1342,
	0, 1352, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 2540, 1305, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 1303, 1304, 0, 1336,
	1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 1306, 1342, 0, 1352, 1317, 1318, 1324, 1323, 1319,
	1345, 0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312,
	1313, 1328, 1329, 1330, 1331, 2513, 1305, 0, 0, 0,
	0, 1311, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 1353, 0, 0, 1333, 1334,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	1350, 0, 0, 0, 0, 0, 0, 1320, 1321, 0,
	0, 0, 0, 0, 1328, 1329, 1330, 1331, 0, 0,
	1341, 0, 0, 0, 1311, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1351, 0, 1343, 1353, 0,
	0, 1333, 1334, 1335, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 1350, 0, 0, 0, 0, 0, 0,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 1332, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 1342, 0, 0, 1317, 1318,
	1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308,
	1309, 1310, 1312, 1313, 0, 0, 0, 0, 1837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 1306, 0, 0, 1352, 0, 0, 1342, 0,
	0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316, 1314,
	1315, 1307, 1308, 1309, 1310, 1312, 1313, 1305, 0, 2201,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1303,
	1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 1306, 0, 0, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 1329, 1330, 1331, 1305,
	0, 0, 0, 0, 0, 1311, 3111, 1325, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 1328, 1329, 1330,
	1331, 0, 0, 0, 1341, 0, 0, 1311, 0, 2284,
	0, 1326, 2283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1350, 0, 0, 0,
	0, 0, 3110, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1332, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1344, 0, 2176, 0, 1306, 0, 1342,
	1352, 0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 1940, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 2177, 0, 1939, 0, 0, 1306,
	0, 1342, 1352, 0, 1317, 1318, 1324, 1323, 1319, 1345,
	0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313,
	1328, 1329, 1330, 1331, 1305, 0, 0, 0, 0, 0,
	1311, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 0, 1341,
	0, 0, 1311, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 1332, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1344, 0,
	0, 0, 1306, 0, 1342, 1352, 0, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1303,
	1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 1306, 0, 1342, 1352, 0, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 1305,
	0, 0, 0, 0, 0, 1311, 0, 1325, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 1328, 1329, 1330,
	1331, 0, 0, 0, 1341, 0, 0, 1311, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1340, 728, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1350, 0, 0, 0,
	0, 0, 0, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1332, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1344, 0, 0, 0, 1306, 0, 1342,
	1352, 0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 1305, 0, 0, 2517, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 2289, 0, 0, 1306,
	0, 1342, 1352, 0, 1317, 1318, 1324, 1323, 1319, 1345,
	0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313,
	1328, 1329, 1330, 1331, 1305, 0, 0, 0, 0, 0,
	1311, 0, 1325, 0, 0, 2294, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 0, 1341,
	0, 0, 1311, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 1332, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1344, 0,
	0, 0, 1306, 0, 1342, 1352, 0, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1303,
	1304, 0, 1336, 1337, 1338, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 2233, 0, 0, 1306, 0, 1342, 1352, 0, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 1305,
	0, 0, 0, 0, 0, 1311, 0, 1325, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 1328, 1329, 1330,
	1331, 0, 0, 0, 1341, 0, 0, 1311, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1343, 1353, 0, 0, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1350, 0, 0, 2252,
	0, 0, 0, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1332, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 1303, 1304, 0, 1336, 1337, 1338, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1344, 0, 0, 0, 1306, 0, 1342,
	1352, 0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1303, 1304, 0, 1336, 1337, 1338,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 1306,
	0, 1342, 1352, 0, 1317, 1318, 1324, 1323, 1319, 1345,
	0, 1316, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313,
	1328, 1329, 1330, 1331, 1305, 0, 0, 0, 0, 0,
	1311, 0, 1325, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 1353, 0, 0, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 1320, 1321, 0, 0,
	0, 0, 1328, 1329, 1330, 1331, 0, 0, 0, 1341,
	0, 0, 1311, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1343, 1353, 0, 0, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 0, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 1332, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 1303, 1304, 0,
	1336, 1337, 1338, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 1306, 0, 1342, 1352, 0, 1317, 1318, 1324,
	1323, 1319, 1345, 0, 1316, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 1313, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 1317,
	1318, 1324, 1323, 1319, 1345, 0, 1316, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 1313, 1328, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1353,
	0, 0, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1350, 0, 0, 0, 0, 0,
	0, 1320, 1321, 0, 0, 0, 0, 0, 0, 1618,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 1629, 1614, 1619, 1602, 1639, 1638,
	0, 0, 1604, 1603, 0, 0, 0, 0, 0, 1648,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 1640,
	0, 1636, 1635, 0, 0, 0, 0, 0, 1327, 0,
	0, 1634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	1633, 1631, 1632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1622, 1617, 1623, 1624, 1625, 1626, 1627, 0, 1621, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 1646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 1317, 1318, 1324, 1323, 1319, 1345, 0, 1316,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 1313, 1606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1637, 0, 0, 0, 1615, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1630, 0, 0, 0, 1758, 1756, 1757, 1760, 1759, 0,
	0, 0, 0, 1629, 1614, 1619, 1602, 1639, 1638, 0,
	0, 1604, 1603, 0, 0, 0, 0, 0, 1648, 1647,
	0, 0, 0, 0, 0, 0, 0, 1607, 1608, 1609,
	1610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 1611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 0, 0, 0, 0, 0, 1640, 0,
	1636, 1635, 659, 0, 690, 0, 0, 0, 0, 1605,
	1634, 0, 1641, 1642, 1643, 1644, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 1612, 0, 1633,
	1631, 1632, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 667, 0, 0, 0, 695, 1613, 0,
	0, 0, 0, 673, 674, 0, 0, 0, 685, 1622,
	1617, 1623, 1624, 1625, 1626, 1627, 0, 1621, 0, 0,
	0, 0, 691, 668, 0, 0, 1645, 1646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 679,
	0, 0, 0, 0, 0, 0, 0, 1606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1637, 0, 0, 0, 1615, 1616, 0, 669, 0, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 0, 1607, 1608, 1609, 1610,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	1628, 1611, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1605, 0,
	0, 1641, 1642, 1643, 1644, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1612, 0, 0, 0,
	0, 1649, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 680, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 681, 0, 0, 0,
	696, 697, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	686,
}
var sqlPact = [...]int{

	614, -1000, -33, -1000, -1000, -1000, 196, -1000, -1000, -1000,
	-1000, 195, 194, 193, -1000, 190, 189, 188, 184, 180,
	175, 174, 173, 171, 170, 169, 168, -1000, -1000, 167,
	-1000, -1000, -1000, -1000, 166, 164, 163, -1000, 155, 2971,
	31526, 150, 148, 146, 2030, 49388, 1444, 144, 138, -1000,
	134, 1418, 36560, 1049, 1613, -1000, 133, 124, 1557, 49004,
	354, 1981, 34226, 1335, 2001, 48614, 31136, 1923, 33836, 48224,
	-1000, -1000, 1052, -1000, -1000, 47834, 123, 121, 119, 118,
	117, -1000, 107, 47444, 102, 101, 100, 99, 97, 90,
	87, 79, -1000, 78, 75, 74, 69, 68, 67, 66,
	65, 64, 63, 62, 61, 60, 59, 58, 57, -1000,
	59310, 56, 53, 52, -1000, 1328, 47, 46, 45, 42,
	39, -1000, -1000, 38, 37, 36, 35, 31, 29, -1000,
	91, 28, 24, 23, 22, 20, -1000, 1147, 480, 1820,
	13328, 1191, 1176, 1175, 1164, 1173, 756, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52076, 49388, 19, -58, 18,
	-1000, 2347, 774, 23290, 614, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36170, 35780, 35390,
	29594, 47054, 46664, 10421, 10421, 905, -1000, -1000, -1000, -1000,
	-1000, -35, 32678, 49388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 249,
	-1000, -1000, -1000, -1000, -1000, -1000, 19664, 446, 19237, 323,
	18810, 258, 389, -1000, -1000, -1000, 246, -1000, -1000, -1000,
	-1000, 1256, -1000, -1000, -1000, -1000, 46274, 45884, 2236, 45494,
	29194, 28794, 45104, 1750, 1748, 44714, -1000, -1000, 44324, -1000,
	-1000, 2208, 1952, 1908, 35000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43940, 43550, 43160, 42770, 42380, 28394,
	27994, 571, -1000, -1000, -1000, -1000, 24850, 570, -1000, -1000,
	-1000, -1000, -1000, 17, -1000, 16, 15, -1000, 14, 13,
	12, 11, 1, -2, -3, -7, -1000, -10, -14, -1000,
	-15, -16, -1000, -28, -29, 1564, 1515, 1576, 41990, 1044,
	1545, -1000, 1432, -32, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49388, -1000, 20077, 73, -1000, 569, -1000, 1922, -1000,
	20077, 73, -1000, 1420, 156, 1300, -1000, -1000, -1000, 1319,
	1050, -1000, -1000, 49388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2548, 1395, 567, 41600, -1000, 1657, -1000, 717, 14154,
	-1000, 908, -1000, 14154, 240, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1668, 1150, 2486, 27594, 1510, 2344, 2195, 2544, 1561,
	2167, 2160, 2103, 2097, 2083, 2540, 1132, 2538, 969, 808,
	2534, 2075, 2016, 2518, 1344, 827, 2532, 2531, 1984, 1920,
	-1000, -1000, -1000, -1000, 1071, -1000, -1000, -1000, -1000, -1000,
	-1000, 38096, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1147, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1611, 2335, 2335, 2335, 2374, 362,
	349, -1000, 91, -1000, 1665, -1000, 1386, -1000, -1000, -1000,
	58402, -1000, -1000, 20077, 20077, 20077, 20077, 20077, 1263, -1000,
	-1000, -1000, 601, -1000, 566, 490, 11661, -1000, -1000, 2455,
	-1000, -1000, -1000, 368, 20077, -1000, 236, -1000, -1000, -1000,
	-1000, 565, 2524, -1000, 772, -1000, -1000, -1000, 694, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1969, 556, 552, -1000,
	551, 550, 534, -1000, -1000, -1000, 533, 532, 529, 528,
	527, 526, 524, 521, -1000, -1000, -1000, 1212, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 749,
	-1000, 749, 749, 495, 495, 520, 519, 496, 518, -1000,
	-1000, 517, 495, 516, 515, -1000, -1000, 514, 674, -1000,
	664, 512, 511, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1443, -1000, -1000, 1443, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 903, 50924, -1000, -1000, -1000, -37, 49388,
	-1000, 389, -37, -1000, -1000, 509, -1000, 14567, 14567, 14567,
	-1000, -1000, 1419, 20077, -1000, 2008, -1000, 4875, -215, 629,
	24460, -1000, 22510, 629, 608, 27194, -1000, 1919, -1000, -1000,
	508, 229, -1000, -1000, -1000, -1000, -1000, -1000, 2089, 2226,
	959, -1000, 1182, 2220, -1000, 3024, 2212, 1177, -1000, -1000,
	736, 2210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1359, -1000, -1000, 1570, 2205, -147, 2041, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1516, -1000, 29978, 32678,
	-38, -1000, -1000, -77, -1000, 10023, 58402, -1000, -1000, -1000,
	58402, 700, -1000, -1000, 2194, -1000, 58402, 689, -1000, -1000,
	2184, -1000, 1914, 49388, 10421, 49388, 49388, -1000, 507, 1593,
	1416, -1000, -1000, 32294, 3024, 1578, -1000, -1000, 730, 1566,
	-1000, -1000, 1563, -1000, 389, -1000, -1000, 41210, 51692, 730,
	1560, -1000, -1000, -1000, 38096, -1000, 49388, -1000, 49388, -1000,
	1065, -1000, 51308, 141, 2181, -1000, -1000, 141, 2179, -1000,
	141, 2170, -1000, 139, 2165, -1000, -1000, 1394, 2164, -1000,
	-98, 2147, -1000, -1000, -98, 2134, -1000, -1000, 20077, -51,
	-1000, -1000, -1000, 774, 30746, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40820, 29978, -1000, -1000, -1000, -1000, 32294, 49388,
	34610, 697, 58402, -1000, 2416, 59214, 29978, 58402, -1000, 32294,
	49388, 1948, -1000, 40430, 40040, 2322, 713, -1000, -1000, 49388,
	-1000, 20077, -1000, 2414, 1632, -46, -1000, -1000, -1000, -1000,
	-1000, 1656, 1728, 883, 1032, -1000, 14154, 14154, 2286, -1000,
	226, 10421, -1000, -1000, 993, 1673, -1000, -1000, -1000, -1000,
	29978, 29978, -1000, 39650, -1000, -1000, -1000, 1368, 49388, -1000,
	-1000, 1943, -1000, 31910, 49388, -1000, 49388, -1000, 49388, -1000,
	49388, -1000, 49388, -1000, -1000, -1000, -1000, -1000, 2187, 1167,
	1939, -1000, 49388, -1000, 49388, -1000, -1000, -1000, 1640, -1000,
	-1000, -1000, 39266, 38876, 38486, -1000, -1000, 1159, -1000, 981,
	-1000, -1000, 143, -1000, -1000, 1611, -1000, 1479, 1731, 18383,
	1719, 20077, 91, -1000, -1000, 91, 91, 12901, -1000, -1000,
	-1000, 49388, -1000, 58965, 59214, 10421, 950, 20077, 20077, 20077,
	20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077,
	20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077,
	20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077, 20077,
	20077, 20077, 1721, 20077, 898, 20077, 20077, 20077, 20077, 1265,
	-1000, -1000, 1318, 415, 1342, -1000, 2454, 2454, 2454, 58767,
	58767, 406, 601, -1000, 20077, -1000, 73, 20077, 349, 56143,
	1503, -36, 11248, -1000, -1000, -1000, -1000, 17956, 743, 58402,
	9625, 10821, -1000, 2511, 1066, 1989, 1818, 506, 671, 656,
	654, 647, 644, 20077, 20077, 20077, 20077, 20077, 20077, 20077,
	20077, -1000, -1000, -1000, -1000, -1000, -1000, 2455, -1000, 17543,
	17116, -1000, 2508, 16689, 16262, -1000, 15835, 21316, 15408, 948,
	947, 934, 914, 20077, 12074, -1000, -46, -1000, 50924, -1000,
	49388, -37, 2413, 20077, 137, -1000, 57014, -1000, 137, 137,
	505, -57, 58402, 1707, 1704, 23680, 1891, 1266, 1266, 1266,
	-1000, 504, 593, 629, 7218, 36944, 1271, 629, 629, 92,
	245, 348, 22120, 2008, 36944, -1000, -1000, 49388, 503, 10821,
	10421, -43, 1195, -1000, 33446, 2313, 2308, 2299, 1053, -1000,
	1021, 2372, 38096, 2388, 73, 2319, 1912, -1000, -1000, 895,
	38096, 3024, -1000, 59214, -1000, 1761, 2369, 1027, 1024, 1027,
	1027, 1017, 38096, 891, 1231, 29978, 2318, 882, -44, 2386,
	73, 2317, 1906, 879, -1000, -1000, 49388, 10421, 2316, 980,
	626, -38, 32678, 49388, 215, -1000, 20077, 73, 20077, 73,
	1012, -59, 214, 1722, 1713, 92, -1000, 33062, 2409, 2122,
	49388, 876, -1000, 3024, 2121, -1000, 1226, -1000, 2118, 2117,
	2406, 1415, 1559, -1000, -1000, -1000, 1410, 1558, 961, 2111,
	740, 324, 2405, 324, 26414, -1000, 49388, -1000, 49388, -1000,
	-1000, 49388, -1000, 49388, -1000, 49388, -1000, 49388, 49388, -1000,
	49388, 29978, 29978, 29978, -65, 5279, 30746, -66, 727, 872,
	-151, -1000, 768, 33062, 5660, -67, -1000, 785, -1000, -1000,
	-1000, 280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 749,
	501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 496, 1212, 495, 495, 495, -1000, -1000,
	-1000, 674, -1000, 664, -1000, -1000, -1000, 749, 749, -1000,
	-1000, -207, 1897, -77, 34610, 626, -1000, 626, -1000, 1931,
	-1000, 2309, 686, -76, 801, -46, -1000, 1443, -1000, 1314,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2523, -1000, 2495, -1000, -1000, 2505, -40,
	-1000, -40, -1000, 10421, -1000, 49388, 1927, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49388, -1000, 49388, -1000, -1000,
	-1000, -1000, -1000, -1000, 4533, -1000, 1894, -1000, 5279, 212,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49388, 49388,
	49388, -1000, 38096, -1000, -1000, -1000, -1000, 58402, -1000, 412,
	-1000, -1000, 58402, 1107, 1708, -1000, 1708, -41, -1000, 56942,
	1692, 49388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 711, 594, 594, 973, 973, 973,
	973, 2484, 685, 861, 366, 5274, 5274, 5274, 5274, 5274,
	5274, 5274, 5274, 443, 944, 944, 443, 443, 443, 443,
	443, 944, 944, 944, 5274, 5274, 5274, 58767, 58474, 3323,
	20077, 20077, 869, 1311, 415, 3323, 20077, 3323, 3323, 3323,
	3323, -1000, 1642, -1000, -1000, -1000, -1000, 1893, 493, 21316,
	21316, -1000, -1000, -1000, 11661, 20077, -1000, -1000, -1000, -1000,
	490, 20077, -1000, 56216, -250, 347, -244, 211, 49388, 20077,
	587, -75, -1000, 1030, -1000, 20077, 202, -1000, -1000, 8,
	20077, 20077, 20077, 346, -1000, 345, -1000, 858, -1000, 857,
	852, 850, -1000, 489, 1254, 488, 484, 20077, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58109, 53582,
	53289, 53217, 6501, 52924, 52852, -78, -79, 343, -1000, 1890,
	-244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 341, -1000,
	340, -85, -1000, -86, -1000, 339, -1000, 58037, -244, 337,
	4284, -1000, 21316, 21316, 21316, -1000, 333, -1000, 56649, -1000,
	709, 706, 691, 690, 57744, 14981, 14981, 14981, 331, 57672,
	20077, -244, -1000, -1000, 482, -87, 740, 14567, 22900, 10421,
	-1000, 740, 740, 20077, -1000, 20077, 23680, 23680, 2191, 1702,
	23680, -1000, -1000, -1000, -1000, 36944, 623, 629, 36944, -1000,
	2455, 1699, -1000, -1000, -1000, 49388, 389, -1000, 36944, 36944,
	10421, 629, -1000, 327, 25240, 8, 201, 1233, 49388, 49388,
	49388, -1000, -1000, 1549, 50540, 1548, 59214, 49388, -1000, -1000,
	474, 473, 1691, 1681, 49388, 49388, 50156, 49772, 49388, 1248,
	20077, 1371, 1936, 73, -1000, 687, 469, 49388, 1152, -1000,
	-1000, -1000, -1000, -1000, 49388, -1000, -1000, 2502, -1000, 1027,
	-1000, -1000, -1000, 1027, 3024, 1143, 49388, 29978, 734, 679,
	49388, 1235, 73, -1000, 657, 466, 10421, 1179, -1000, 655,
	49388, 1777, -1000, 1485, -1000, -1000, 9227, 58402, -1000, 58402,
	-1000, -1000, -1000, 10421, 1735, 1735, 325, -42, -1000, -1000,
	-1000, -1000, -1000, -1000, 1739, 49388, 578, 49388, 73, 49388,
	120, 29978, 49388, 29978, 29978, 29978, 73, 49388, 2102, 49388,
	2099, 2199, 642, 49388, 1274, 20077, 1171, -1000, 25630, 760,
	49388, 1125, 114, -1000, -1000, -1000, -11, 49388, -1000, -1000,
	141, 141, 141, -1000, 139, 1394, -1000, -98, -98, -1000,
	-1000, -1000, 5279, 1883, 37712, 49388, 2432, 29978, -88, -1000,
	777, 862, 856, -1000, 59214, -1000, 596, 860, -1000, 2501,
	464, 2455, -1000, 727, 49388, 113, -1000, 733, 1216, -1000,
	14154, 14154, -1000, 1443, -1000, -1000, 1098, -1000, 1186, -1000,
	-1000, -1000, -1000, 14154, -1000, -1000, 977, -77, -77, -1000,
	-1000, 4085, -1000, 49388, -1000, -1000, -1000, -1000, 1107, -1000,
	20077, -1000, -1000, -1000, 12901, -1000, -1000, -1000, 49388, -213,
	20077, 3323, 3323, 20077, 21316, 21316, -1000, 3323, -1000, -1000,
	-1000, -1000, -1000, 1881, 463, 20077, 59214, 5828, 5743, -93,
	443, -1000, 20077, -1000, 8829, -99, 55850, -1000, -1000, 579,
	2100, -1000, 20077, 57379, 8431, 317, 13741, -1000, 57307, -56,
	-56, -1000, 2522, 1572, 1546, 1169, 1084, 2497, -1000, 26804,
	741, 1274, 55777, 58965, 59214, 20077, 20077, -1000, 20077, 20077,
	20077, -1000, -1000, 2455, -1000, 20077, -1000, -1000, -1000, -1000,
	-1000, 1880, 20077, -1000, 58965, 59214, 21316, 21316, 21316, 21316,
	21316, 21316, 21316, 21316, 21316, 21316, 21316, 21316, 21316, 21316,
	21316, 21316, 21316, 21316, 21316, 1633, 21316, 2449, 2449, 2449,
	-1000, 1852, 1880, 20077, 20077, -1000, -1000, -1000, -1000, 59214,
	313, 312, 309, -1000, 20077, -244, 5660, -1000, 1798, -1000,
	-186, -1000, 2008, -1000, -1000, 1798, 1798, -101, 58402, -1000,
	2191, -1000, 462, 20077, 23680, -1000, 584, -1000, -102, -1000,
	36944, -1000, 583, -245, -1000, 648, -1000, 389, -1000, -1000,
	-1000, 200, 36944, -1000, -107, -1000, 2402, 308, 10421, -1000,
	-1000, 848, 842, -1000, 2093, -1000, 1547, -1000, 759, -1000,
	1259, 20077, 24070, 461, 460, 1309, -1000, 2086, 1394, 2078,
	1394, -1000, -1000, 684, -1000, 58402, 458, 456, -1000, -43,
	1148, -1000, 26030, 20077, -1000, 840, -1000, -1000, -1000, 3024,
	836, -1000, -1000, 1223, 26030, -1000, -1000, -1000, 26030, 20077,
	-1000, -44, 828, 26030, 2033, 727, 1877, 999, -1000, -1000,
	-1000, -1000, -1000, -1000, 1734, 33062, 49388, 455, 49388, 454,
	-1000, -1000, 453, 49388, 626, 3024, -1000, 730, -1000, -1000,
	767, 10421, 452, 10421, 1575, 642, 30362, -1000, 730, 1731,
	-1000, 58402, -1000, 1125, 12487, 2301, -108, -1000, 198, -1000,
	-1000, -1000, 740, 26414, 23680, 20077, 2530, -110, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, -45, 450, -1000, 646, 645,
	-77, 1299, 1545, 1545, -1000, 2479, -1000, 582, 304, 2455,
	303, -1000, -77, 49388, -1000, 1281, 10421, 49388, 49388, 10421,
	49388, -1000, -1000, -46, -1000, -1000, -1000, -1000, 49388, -1000,
	-1000, -1000, 1317, 55484, -1000, 2334, 10421, 2447, 3323, 5309,
	4479, 20077, 59214, 392, -113, 20077, 20077, -1000, 575, 58402,
	-1000, -1000, -1000, -1000, -1000, -1000, 58402, 20077, 157, -1000,
	2521, 20077, 299, 298, 297, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 290, -1000, -1000, 52460, -1000, 20077, 289,
	-1000, 287, 286, 6794, 5043, 55411, 55118, 55045, 278, 58402,
	1852, 58402, -1000, -1000, 625, 625, 1010, 1010, 1010, 1010,
	2449, 553, 545, 1134, 881, 881, 881, 1398, 809, 809,
	881, 881, 881, 1876, 1644, 444, 5864, -1000, -1000, 58402,
	58402, 276, -1000, -1000, -1000, -244, 275, 1791, 2366, -1000,
	23680, 1791, 1791, -1000, -1000, 49388, 58402, -1000, -215, -1000,
	2455, -1000, -1000, 1699, -1000, 7630, -1000, 10421, -1000, -1000,
	25240, -1000, 441, -1000, 9, 49388, 49388, 49388, 2073, -1000,
	3042, -1000, 54752, -115, -1000, 2339, 2339, 20077, 92, 24070,
	49388, -1000, 1312, 1683, 794, 49388, -1000, 49388, -1000, -1000,
	49388, 49388, 49388, 49388, 49388, -1000, 440, -116, 49388, 49388,
	29978, -1000, -1000, -118, 10421, -1000, 2305, -1000, 29978, 913,
	1235, 1768, -1000, 423, 24070, 421, 49388, 33062, 2396, -1000,
	727, -1000, -1000, 420, 1827, 1399, 24070, 1382, 1669, 642,
	30362, -1000, 961, 1125, -1000, -1000, -49, -1000, 429, 73,
	49388, 2529, 1274, -1000, -68, 58402, -1000, 643, -1000, 37328,
	37328, 29978, 29978, -1000, 2272, 2271, 574, -1000, -1000, 273,
	-1000, -77, 1636, -1000, -1000, 1237, 1484, -1000, -1000, -1000,
	-1000, -1000, 2334, 20077, 20077, 392, -121, -1000, 3323, 3323,
	-1000, 58402, 8033, -1000, 57307, -1000, -1000, -1000, -1000, 1250,
	-1000, 54679, -1000, -1000, -1000, 20077, 20077, -1000, -1000, -1000,
	-1000, -1000, -1000, 21316, 1847, 419, 59214, -1000, -1000, 738,
	20077, 20077, 2008, 738, 738, -123, 629, -1000, -1000, -1000,
	2455, 9, -1000, 2489, 10421, -1000, -1000, -1000, 49388, -1000,
	49388, -1000, 10421, 49388, 1849, 1529, -1000, -1000, 1676, 416,
	21316, 49388, 498, -1000, 1288, 24070, 2334, 10421, 2334, 54386,
	-124, -129, 1528, -1000, -1000, 1521, 20077, -1000, 59214, 1394,
	1394, -131, -132, -1000, 825, 824, 20077, 823, -1000, -1000,
	-1000, 822, -1000, 653, -98, 26030, -1000, -1000, 1253, 24070,
	-134, 24070, -139, 269, 73, -1000, 24070, -1000, 49388, -140,
	49388, -1000, 642, 30362, -1000, 2199, -1000, 2250, 49388, 2296,
	-1000, -1000, -1000, 1731, 415, -1000, -150, -1000, -1000, 414,
	411, -1000, -1000, -141, -1000, 682, 673, -1000, -1000, -1000,
	10421, 968, -1000, 3323, 3323, -1000, -1000, -1000, 264, 1274,
	2365, -1000, 54313, 54020, 3557, 21316, 59214, -152, -1000, 49388,
	58402, -244, -1000, -1000, -1000, 36944, 573, -1000, -1000, 1743,
	-1000, -1000, -1000, 49388, 1543, -1000, -1000, 20077, 5864, 410,
	20077, -1000, 1734, 409, -1000, -1000, -1000, -1000, -1000, -1000,
	2339, -1000, 1183, -1000, -1000, 58402, 2337, -1000, -1000, 407,
	405, 49388, 49388, -56, 402, 400, 26030, -1000, 49388, -153,
	1288, -155, -1000, 1734, -1000, -160, 767, -1000, 398, 30362,
	-1000, 1575, 927, -161, 49388, 1125, -1000, -1000, 29978, 29978,
	1636, -1000, 49388, -1000, 49388, -1000, 49388, -1000, 1127, 20077,
	-1000, -1000, 3557, -163, -1000, -206, -1000, 2394, -1000, -1000,
	-1000, -1000, 2052, 53947, 1579, 49388, 53654, 1235, 49388, 2334,
	49388, 766, 10421, 1237, 1237, -1000, -1000, 262, 20077, 20077,
	-1000, 394, -1000, 1734, 1288, 1235, 1288, 393, 24070, -1000,
	1669, 1048, -1000, 740, -1000, -1000, -171, -176, -1000, -183,
	-184, -1000, 261, 20903, 20903, -244, -1000, 49388, 391, 1999,
	-1000, 1322, 1302, 260, 797, -1000, -189, -1000, 389, -1000,
	20077, -1000, -191, -1000, 757, -192, -1000, 755, 2521, -194,
	-197, 49388, 1235, 1734, -1000, 1734, 24070, -199, -1000, 26414,
	-1000, 727, 727, -1000, -1000, -1000, -1000, -1000, 21714, 1374,
	1096, 56577, -1000, -1000, -1000, 49388, -1000, 1364, 1331, 1058,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1579, 58402, -1000,
	1237, 1749, -1000, 1237, 1839, -1000, -1000, -200, -1000, 1235,
	1235, -205, -1000, -177, -1000, -1000, 2424, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2259, -1000, 784, 1594, 1594, 1322,
	-1000, 372, -1000, 371, 1373, -1000, -1000, 1288, -1000, 20490,
	-1000, 2435, -1000, -1000, 1658, -1000, -1000, 20077, 20077, -1000,
	-1000, -1000, 1734, -1000, -1000, -1000, -1000, -217, -218, 1235,
	1235, 815, -1000, -1000, 369, 20077, -219, 1235, -1000,
}
var sqlPgo = [...]int{

	0, 2999, 2998, 1919, 2995, 2342, 2992, 2990, 2988, 2987,
	2983, 2317, 2978, 2977, 2972, 2970, 2969, 2966, 2964, 2961,
	2957, 2956, 2954, 2953, 2952, 2949, 2948, 2947, 2946, 2943,
	2942, 2941, 2315, 2940, 2312, 2938, 2934, 2931, 2930, 2926,
	2923, 2920, 2919, 23, 2906, 2905, 2889, 2887, 2296, 2881,
	2875, 2274, 2873, 2872, 2268, 2867, 2866, 2865, 2265, 2256,
	2864, 2862, 2244, 2857, 2855, 2242, 2854, 2238, 2853, 2852,
	2228, 2848, 96, 111, 2847, 2202, 2846, 2845, 2183, 2130,
	2102, 2842, 2096, 2837, 2836, 2059, 2029, 2834, 86, 2832,
	2831, 2828, 2827, 2005, 1993, 2820, 2819, 2817, 163, 2811,
	1963, 2807, 2806, 2802, 2801, 2800, 2794, 2793, 2791, 2790,
	2789, 2788, 2786, 2785, 2782, 2778, 2777, 2774, 2773, 2771,
	2770, 2768, 2767, 2765, 2764, 2763, 2762, 180, 119, 2761,
	2760, 1951, 1932, 2759, 2756, 57, 44, 33, 75, 112,
	161, 4382, 156, 2751, 2749, 2746, 2742, 2740, 25, 122,
	121, 117, 108, 186, 2739, 2738, 52, 49, 27, 18,
	88, 2737, 2734, 2732, 1635, 93, 2730, 2726, 170, 162,
	2725, 848, 2720, 30, 73, 92, 90, 267, 50, 2718,
	98, 13, 2717, 115, 284, 2716, 71, 45, 20, 3853,
	74, 61, 59, 154, 152, 144, 142, 118, 647, 2715,
	169, 68, 136, 2714, 2712, 2706, 55, 141, 1, 6,
	150, 11, 2705, 17, 2699, 10, 2697, 2694, 2693, 2690,
	22, 110, 35, 38, 2689, 31, 209, 127, 2688, 159,
	2687, 77, 2685, 176, 171, 4, 147, 2684, 78, 15,
	80, 2682, 2679, 94, 158, 2678, 29, 116, 89, 103,
	182, 143, 99, 149, 146, 2677, 2676, 2675, 124, 2674,
	134, 105, 2671, 2660, 113, 28, 2658, 39, 153, 43,
	2654, 2653, 107, 2652, 139, 2648, 2647, 2646, 179, 114,
	131, 3, 54, 95, 7, 151, 101, 64, 62, 2640,
	3420, 1666, 1732, 81, 2639, 100, 79, 37, 72, 104,
	164, 40, 2637, 2635, 1609, 2634, 2633, 2632, 130, 2625,
	2623, 2621, 97, 32, 42, 2620, 106, 47, 65, 177,
	58, 145, 135, 172, 123, 2613, 133, 83, 140, 168,
	51, 2612, 1310, 2611, 132, 2610, 2609, 2607, 2605, 1261,
	2604, 2603, 2602, 1286, 2599, 102, 2597, 138, 126, 120,
	85, 109, 165, 157, 414, 2593, 137, 26, 2592, 552,
	21, 0, 3900, 3777, 2588, 148, 91, 2587, 2585, 2584,
	2583, 36, 9, 5, 8, 12, 14, 457, 247, 2582,
	2581, 248, 82, 128, 2579, 178, 155, 2578, 2577, 2576,
	48, 2575, 19, 2574, 16, 2573, 2571, 24, 2, 2570,
	2569, 160, 2568, 2567, 2564, 2398, 2563, 174, 2560, 2559,
	2557, 2554, 2178, 2553, 2552, 56, 34, 125,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 407, 407, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	406, 406, 152, 152, 151, 147, 147, 409, 409, 153,
	153, 153, 155, 155, 32, 32, 86, 86, 86, 138,
	138, 138, 138, 79, 79, 79, 74, 74, 359, 359,
	360, 360, 134, 134, 135, 135, 135, 135, 136, 136,
	137, 137, 137, 46, 34, 34, 34, 34, 34, 34,
	34, 35, 35, 35, 35, 36, 36, 36, 36, 36,
	36, 37, 37, 37, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 234, 234, 70, 70, 70, 70, 70, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 73, 73, 73, 73, 73, 73,
	73, 73, 329, 329, 71, 71, 302, 302, 75, 75,
	259, 259, 76, 76, 76, 76, 76, 77, 77, 77,
	77, 87, 87, 87, 87, 405, 405, 227, 227, 168,
	168, 168, 168, 82, 82, 82, 82, 83, 83, 83,
	84, 84, 133, 133, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 38, 38, 38, 39, 39, 40,
	40, 41, 41, 42, 42, 43, 43, 43, 43, 43,
	94, 94, 94, 96, 93, 93, 93, 95, 95, 95,
	95, 97, 97, 98, 98, 98, 98, 98, 98, 99,
	99, 353, 353, 237, 237, 351, 351, 352, 352, 204,
	204, 204, 204, 204, 205, 205, 205, 358, 358, 358,
	358, 358, 358, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 118, 118, 118, 127, 127, 127,
	127, 127, 127, 127, 120, 120, 120, 111, 111, 101,
	101, 101, 101, 107, 107, 107, 107, 107, 102, 102,
	108, 108, 110, 110, 112, 112, 112, 112, 112, 112,
	103, 103, 103, 103, 114, 114, 114, 114, 113, 113,
	123, 123, 123, 123, 123, 123, 123, 315, 315, 119,
	119, 119, 119, 122, 122, 122, 122, 117, 117, 117,
	121, 121, 124, 124, 124, 124, 104, 104, 105, 105,
	106, 106, 125, 125, 116, 116, 126, 126, 126, 126,
	126, 126, 126, 115, 115, 115, 408, 408, 109, 403,
	403, 401, 401, 401, 401, 401, 401, 401, 402, 402,
	404, 404, 80, 80, 80, 52, 52, 53, 53, 206,
	206, 207, 207, 283, 283, 283, 283, 208, 208, 154,
	154, 154, 211, 212, 212, 209, 209, 210, 210, 210,
	214, 214, 213, 216, 216, 215, 282, 369, 369, 370,
	370, 370, 370, 370, 370, 370, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 367, 367, 367, 368,
	365, 365, 366, 366, 366, 366, 410, 410, 281, 281,
	220, 220, 372, 372, 372, 372, 373, 373, 373, 373,
	373, 376, 375, 374, 374, 374, 374, 374, 311, 311,
	311, 57, 57, 57, 248, 248, 247, 247, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 130, 130, 54, 54, 54, 160, 160, 51, 51,
	51, 55, 55, 50, 50, 50, 50, 50, 265, 265,
	263, 263, 225, 225, 317, 317, 317, 172, 172, 173,
	173, 148, 148, 148, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 264,
	264, 266, 266, 81, 81, 85, 85, 85, 91, 91,
	129, 129, 129, 129, 129, 129, 129, 33, 33, 33,
	33, 45, 45, 45, 45, 89, 413, 413, 413, 90,
	90, 412, 412, 167, 167, 167, 167, 169, 169, 278,
	278, 279, 279, 414, 414, 280, 280, 280, 162, 161,
	163, 163, 49, 49, 49, 156, 156, 157, 157, 158,
	158, 159, 159, 415, 415, 78, 78, 78, 132, 132,
	200, 200, 274, 274, 274, 221, 221, 178, 178, 277,
	277, 275, 275, 275, 246, 246, 246, 131, 131, 230,
	230, 239, 239, 240, 240, 325, 325, 241, 88, 88,
	141, 141, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 142, 142, 142, 142, 142, 142, 142, 145, 145,
	145, 145, 146, 146, 146, 144, 144, 383, 383, 383,
	385, 385, 386, 382, 382, 384, 384, 411, 411, 250,
	250, 250, 218, 219, 217, 217, 416, 416, 223, 223,
	222, 224, 224, 316, 316, 316, 244, 244, 244, 244,
	269, 269, 267, 267, 268, 268, 270, 270, 271, 271,
	271, 272, 272, 273, 273, 243, 243, 298, 298, 143,
	143, 143, 229, 229, 229, 231, 231, 288, 288, 288,
	289, 289, 287, 287, 287, 287, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 319, 319, 232, 232, 320,
	276, 276, 399, 399, 399, 400, 400, 314, 314, 321,
	321, 321, 321, 321, 321, 312, 312, 313, 313, 326,
	327, 327, 253, 253, 253, 253, 251, 251, 252, 252,
	322, 322, 322, 322, 245, 245, 323, 323, 323, 284,
	284, 330, 330, 330, 345, 345, 228, 228, 228, 340,
	340, 331, 331, 331, 331, 331, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 334, 334,
	334, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 344,
	344, 344, 344, 344, 335, 335, 341, 342, 336, 337,
	343, 343, 343, 343, 347, 347, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 339, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	261, 261, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 292, 292, 292, 292, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 377,
	377, 377, 377, 377, 377, 377, 377, 380, 380, 381,
	381, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	387, 387, 388, 388, 390, 390, 391, 391, 392, 393,
	393, 393, 394, 395, 395, 389, 389, 396, 396, 396,
	397, 397, 398, 398, 398, 398, 398, 304, 304, 310,
	310, 310, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 170, 170,
	170, 170, 170, 236, 236, 235, 235, 301, 301, 299,
	299, 303, 303, 254, 254, 346, 346, 346, 346, 346,
	346, 346, 255, 255, 255, 262, 256, 256, 257, 257,
	257, 257, 257, 295, 296, 258, 258, 258, 297, 297,
	305, 309, 309, 308, 307, 307, 306, 306, 285, 285,
	286, 286, 242, 242, 417, 417, 238, 238, 324, 324,
	324, 324, 202, 202, 233, 233, 201, 201, 195, 195,
	196, 196, 196, 196, 226, 226, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 348, 348, 348,
	349, 350, 300, 188, 187, 175, 176, 186, 185, 184,
	174, 177, 181, 182, 183, 179, 180, 191, 190, 189,
	328, 197, 197, 198, 198, 198, 199, 199, 199, 199,
	171, 171, 192, 192, 193, 194, 194, 164, 164, 164,
	165, 165, 166, 166, 357, 357, 355, 355, 355, 356,
	356, 356, 356, 354, 354, 354, 354, 354, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	1, 1, 1, 12, 12, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 6, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 3, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	5, 4, 6, 4, 5, 6, 5, 1, 0, 2,
	3, 3, 3, 6, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 2, 3, 2, 3, 7, 7, 8, 10,
	7, 4, 5, 5, 5, 3, 1, 1, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 0,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 0, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 2, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 2, 2, 1, 5, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -384, 103, -62, -65, -67, 107, 116,
	121, 122, 146, 155, 259, 267, 289, 291, 293, 302,
	-40, -39, 117, -139, -141, 287, -83, -84, -93, -94,
	-95, -96, -133, 320, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	323, -33, -45, -90, -89, 368, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-383, -63, -64, -66, -68, -69, -142, -140, 424, 288,
	378, 37, 332, 65, 111, 297, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 395, 403, -145, -143, -144,
	-146, 309, 386, 345, 428, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 2, 345, 389, 310,
	379, 92, 168, 272, 257, -401, 2, 4, -363, -361,
	-196, -195, 345, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 234,
	236, 249, 253, 264, 266, 275, 299, 326, 341, 357,
	358, 359, 365, 366, 386, 387, 391, 398, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 351, 353,
	119, 121, 122, 132, 133, 134, 136, 137, 139, 141,
	145, 147, 152, 153, 154, 155, 156, 157, 169, 164,
	170, 174, 177, 176, 178, 179, 180, 171, 185, 188,
	189, 190, 192, 193, 196, 197, 198, 201, 200, 205,
	206, 209, 210, 213, 215, 218, 219, 220, 221, 224,
	222, 223, 226, 227, 229, 228, 235, 237, 238, 240,
	241, 244, 245, 248, 251, 254, 255, 256, 257, 258,
	259, 260, 261, 263, 265, 267, 269, 270, 271, 272,
	273, 274, 276, 277, 279, 280, 281, 282, 283, 287,
	285, 286, 288, 289, 290, 291, 293, 295, 296, 297,
	298, 300, 321, 322, 334, 302, 303, 304, 305, 306,
	307, 308, 312, 316, 313, 314, 315, 310, 311, 317,
	318, 320, 323, 325, 327, 328, 331, 332, 333, 335,
	338, 339, 340, 336, 337, 330, 343, 344, 346, 347,
	348, 349, 350, 352, 354, 355, 360, 363, 364, 368,
	369, 371, 372, 375, 376, 377, 382, 378, 380, 383,
	384, 385, 390, 396, 397, 399, 400, 401, -194, -164,
	417, -193, 427, 427, 427, 2, 189, 190, 271, 270,
	317, 318, -189, -192, -193, -194, -164, 4, -361, -363,
	92, 242, 427, 427, 427, 2, 345, 333, 115, 310,
	379, 295, 389, -263, 185, 92, 374, -164, 267, 24,
	2, 101, 174, 377, 376, 24, 263, 311, 347, 349,
	2, 427, 427, 2, 389, 310, 345, 168, 92, 379,
	295, -183, 2, -164, -73, 2, 424, 27, -72, -5,
	-48, -58, -62, -75, -70, -11, -32, -34, -54, -51,
	-59, -65, -67, -79, -78, -80, -82, -86, -85, -88,
	-93, -94, -100, -131, -132, 78, 25, 107, 320, 117,
	184, 2, -405, -227, 2, 24, -168, -164, 78, 146,
	309, 345, 2, 189, 190, 2, -183, 2, -401, 2,
	189, 190, 2, -405, -227, 23, 2, -164, 2, 306,
	323, -169, 2, 302, -164, 427, 427, 427, 427, 427,
	427, 210, 58, 299, 317, -98, 364, -97, 357, 304,
	-99, -353, 2, 224, -164, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 2,
	-127, 317, 333, 153, 36, 58, 24, 63, 93, 147,
	168, 169, 197, 73, 74, 270, 210, 190, -315, 119,
	318, 346, 305, 343, 364, 78, 380, 296, -408, 118,
	4, 92, 224, 319, 357, 67, 350, 351, 427, 427,
	427, -411, 2, 345, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, -140, -142, -141, 427, 427,
	427, 427, 427, -222, -223, 373, 182, 113, 247, -139,
	-141, 2, -383, -127, 317, 2, 58, 24, -351, 2,
	-290, 242, -292, 415, 416, 410, 230, 402, -304, 98,
	217, 216, -294, -305, 114, 299, 424, -199, -293, 430,
	9, -380, -141, 31, 52, -197, -164, 7, 8, 5,
	6, -171, -332, -300, -339, 367, 125, 233, -377, -378,
	-198, 4, -361, -355, -333, -342, -337, -338, -340, 42,
	48, 47, 354, 223, 312, 313, 314, 315, 327, 382,
	164, 40, 240, 241, 176, 183, 61, 84, 85, 83,
	88, 87, 89, 86, 319, 379, 53, 30, 158, 159,
	163, 234, 160, 59, -379, 43, 94, 106, 136, 137,
	177, 178, 179, 180, 192, 193, 337, 360, 39, 41,
	44, 54, 55, 96, 97, 123, 124, 135, 148, 175,
	181, 203, 236, 253, 264, 275, 326, 341, 357, 358,
	359, 365, 366, 387, -362, -343, 79, 126, 144, 173,
	161, 186, 187, 191, 204, 207, 225, 232, 250, 252,
	294, 324, -412, 2, 364, 364, 2, -412, 2, -412,
	2, -167, 2, 364, 361, -413, 364, 398, -385, 276,
	-386, -183, -385, 427, 427, 429, 427, -217, -218, -219,
	2, 24, 104, 424, 2, -318, 2, 422, -322, -141,
	199, -321, 424, -319, -189, 243, -381, 300, -377, -378,
	-171, -164, -198, 4, 217, 216, -3, 2, -322, 158,
	-189, 2, -322, 158, 2, -190, 158, -322, -192, 2,
	-359, 158, -357, 9, -356, 5, 4, -361, -363, -362,
	61, 2, -174, -164, 2, -201, 158, -189, -186, -354,
	4, -361, -363, -362, -364, 24, 26, 27, 28, 29,
	31, 32, 33, 34, 45, 52, 53, 57, 60, 62,
	73, 78, 83, 84, 86, 85, 87, 88, 89, 98,
	100, 102, 104, 105, 108, 111, 113, 125, 127, 140,
	142, 143, 146, 149, 151, 162, 168, 172, 182, 184,
	199, 202, 208, 211, 212, 230, 231, 233, 239, 242,
	243, 246, 247, 262, 268, 278, 292, 309, 319, 329,
	342, 345, 356, 361, 362, 367, 373, 374, 379, 381,
	388, 389, 392, 393, 394, 395, -187, -354, 361, 429,
	-233, -195, -196, -226, -164, 426, -290, 2, -88, 2,
	-290, 158, 2, -88, 158, 2, -290, 158, 2, -88,
	158, 2, -220, 424, 426, 345, 62, 2, -189, 158,
	-179, 2, -164, 109, -190, 158, 2, -192, -359, 158,
	2, -359, 158, 2, -191, 2, -189, 168, 168, -174,
	158, 2, -164, 24, 143, 2, 184, 2, 184, 2,
	-323, 2, -322, -234, 158, 2, -189, -234, 158, 2,
	-234, 158, 2, -202, 158, 2, -201, -174, 158, 2,
	-360, 158, 2, -359, -360, 158, 2, -259, 424, -329,
	2, -328, -356, 386, 424, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 317, -138, 80, 221, 220, 261, 242, 361,
	429, -189, -290, -88, -302, 424, 143, -290, -88, 242,
	143, 244, 2, 92, 345, 401, 24, -164, 2, 321,
	2, 424, -98, 56, 364, -279, 2, -280, -161, -162,
	-163, 188, 269, 274, 401, -351, 361, 407, 143, -351,
	-237, 426, -127, 2, 140, 381, 2, 7, 2, -359,
	273, 132, 2, 321, 2, 270, 318, 58, 143, 2,
	2, -403, 2, 242, 143, 2, 143, 2, 143, 2,
	143, 2, 143, 2, 2, 270, 318, 2, 363, 198,
	363, 2, 143, 2, 143, 2, 5, 2, 188, 269,
	334, 2, 345, 389, 310, 2, 2, 143, 2, 143,
	401, 2, -245, -322, -222, -223, -244, -267, -268, 208,
	127, 239, -250, 24, 104, -250, -250, 46, 425, 425,
	-127, 321, 2, 10, 11, 60, 35, 415, 416, 417,
	418, 138, 419, 420, 413, 414, 412, 405, 406, 409,
	194, 195, 75, 408, 407, 68, 214, 301, 128, 129,
	130, 131, 284, 165, 166, 167, 13, 14, 15, 28,
	246, 207, 402, 161, 324, 410, 16, 17, 18, 186,
	187, 232, 38, 162, -170, -203, -290, -290, -290, -290,
	-290, 252, -242, -285, 422, -141, 424, 424, -141, -290,
	-304, -235, 424, -350, 7, -141, -299, 422, -306, -290,
	426, 424, 5, 424, 5, -387, 396, 140, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 266, -347, 390, -347, -347, -334, 424, -334, 424,
	424, -335, 424, 424, 424, -334, 424, 424, 424, 397,
	403, 397, 403, 424, 424, -278, -279, -278, 361, -169,
	429, -385, -220, 424, -238, -324, -290, 417, -238, -238,
	242, -235, -290, 79, -253, 191, 225, 144, 204, 294,
	173, -350, -73, -287, 430, -314, 403, -141, -319, -164,
	-141, -321, 424, -318, -314, 417, -189, 424, 143, 424,
	426, -150, 285, -149, 22, 25, 107, 384, 120, -210,
	170, 257, 114, 330, -407, 117, 303, 352, 353, 285,
	114, -247, -249, 32, 90, 227, 254, 49, 156, 216,
	217, 332, 114, 285, 395, 114, 117, 285, -152, 330,
	-407, 117, 303, 285, -151, -210, 114, 430, 117, 237,
	-359, -233, 429, 429, -354, 417, 114, 114, 114, 114,
	143, -226, -354, -189, -197, -164, -198, 424, -220, 230,
	242, -401, -248, -247, 230, -160, -382, 395, 230, 230,
	-220, -176, 158, 2, -165, -164, -176, 158, -382, 230,
	-323, -200, -189, -200, 320, -183, 32, -153, 429, 51,
	290, 114, -153, 114, -153, 114, -153, 429, 114, -153,
	114, 429, 114, 114, -235, 425, 429, -329, -359, -401,
	-226, -168, 78, 424, 32, -301, -330, -331, -332, -341,
	-336, -339, 42, 48, 47, 354, 223, 312, 313, 314,
	315, 327, 382, 164, 40, 240, 241, 176, 4, 41,
	-343, 183, 175, 177, 178, 179, 180, 181, 326, 39,
	275, 136, 137, 135, 106, 97, 96, 236, 44, 43,
	94, 357, 358, 359, 360, 192, 193, 55, 54, 387,
	337, -360, -401, -226, 140, -174, 2, -189, 2, 69,
	70, 401, -353, -235, 32, -279, 2, -414, 429, 206,
	-205, 213, 229, 152, 243, 399, -358, 5, 4, -300,
	-311, 98, 210, -339, 8, 416, -348, 7, 415, -352,
	-351, -352, 82, 426, -354, 345, 192, -359, -359, -353,
	24, 322, 2, -189, -404, 140, -402, 295, -401, -189,
	-189, -189, -189, -189, 140, 2, 363, 2, 140, -164,
	-164, 206, -189, 2, -191, 2, -190, 2, 345, 168,
	345, -153, 429, -244, -268, -267, -270, -290, 24, -273,
	134, 226, -290, -292, -140, -140, -140, -224, -316, -290,
	268, 168, -353, -345, -330, -344, 280, 281, 279, 283,
	282, -330, -188, -354, 357, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	207, 161, 324, 38, 162, -290, 361, -290, -290, -290,
	-290, 222, 230, 233, 367, 125, 375, 104, 237, -417,
	342, 34, -297, -141, 424, -310, 29, 329, 24, -304,
	299, 424, -285, -290, -286, -236, -235, 425, 32, 429,
	-236, -303, -299, -309, -308, 392, -354, 417, 425, -235,
	388, 24, 104, 417, 2, 7, -260, 400, 219, 95,
	154, 218, -261, 308, -388, 133, 149, 424, 425, 2,
	425, 2, 425, 2, 425, 2, 425, 2, -290, -290,
	-290, -290, -290, -290, -290, -235, -350, -254, 2, -346,
	-235, 4, 400, 219, 95, 154, 218, 308, -254, 2,
	7, -235, 2, -235, 2, -255, 2, -290, -235, -256,
	-291, -292, 415, 416, 410, -304, -257, 2, -290, -236,
	357, 357, 357, 357, -290, 45, 202, 362, -258, -290,
	143, -235, -169, -386, 32, -235, -229, 429, 143, 32,
	4, -229, -229, 424, 425, 429, 191, 191, -318, -253,
	191, -251, 250, -251, -251, -399, 424, 423, -314, -175,
	422, 431, -354, -313, -312, 32, -183, 248, -314, -314,
	426, 425, -313, -189, 424, -235, -354, 429, 361, -264,
	73, 62, -282, 158, 62, -365, -177, 73, -366, -164,
	57, 374, 268, 142, -264, 73, -264, 73, 73, 320,
	333, 46, -322, 35, -88, 71, 143, 361, -322, -249,
	-330, 90, 216, 217, 46, -349, -348, 416, -349, 46,
	-349, -349, -349, 395, -190, -322, 361, 258, -359, 71,
	361, 429, 35, -88, 71, 143, 361, -201, -175, 71,
	345, -327, -326, 404, -195, -164, 426, -290, -88, -290,
	-88, 335, 425, 426, 186, 186, -206, -207, -164, -283,
	-282, -367, -368, -365, 185, 168, 374, 126, 32, 114,
	-226, 361, 114, 258, 114, 114, 32, 242, 230, 242,
	230, -156, 348, 114, -284, 393, -274, -88, 424, 98,
	32, -274, -239, -240, -325, -241, -177, 424, -183, -189,
	-234, -234, -234, -201, -202, -174, -359, -360, -360, 425,
	-73, -328, 425, -137, 395, 361, 395, 381, -207, -72,
	25, 78, 107, 425, 429, -228, 31, 422, -260, 424,
	-347, 424, -137, -326, 143, -227, -327, -327, 140, 70,
	407, 361, 425, 364, -280, -204, 274, 328, 286, 316,
	8, 7, 7, 429, -354, -189, 140, -226, -226, 317,
	-73, 140, -73, 426, -189, -201, -189, -322, -271, -348,
	424, -272, 299, 300, 429, -148, 33, 102, 196, -189,
	401, -290, -290, 361, -417, 342, -297, -290, 222, 233,
	367, 125, 375, 104, 237, 143, 424, -291, -291, -235,
	-290, 423, 433, 425, 426, -226, -290, 423, 423, 429,
	-307, -308, 108, -290, 426, -416, 429, -222, -290, -235,
	-235, 425, 425, 361, 361, 361, 361, 424, -393, 251,
	424, 424, -290, 32, 429, 429, 429, 425, 429, 429,
	429, 425, 425, 429, 425, 143, 425, 425, 425, 425,
	425, -262, 262, 425, 10, 11, 415, 416, 417, 418,
	138, 419, 420, 413, 414, 412, 405, 406, 407, 68,
	214, 301, 13, 14, 15, 186, 162, -291, -291, -291,
	425, -295, -296, 143, 140, 401, 401, 401, 401, 32,
	-258, -258, -258, 425, 143, -235, 424, 425, -284, -324,
	-231, 2, -318, -185, -354, -284, -284, -235, -290, -318,
	-318, -252, 381, 242, 191, -318, -312, 425, -400, -350,
	-314, -313, -350, -289, -288, 141, 228, -183, -220, -313,
	-313, -354, -314, 425, -232, -320, -381, -416, 426, -149,
	-189, -177, -184, -164, 230, -282, 158, -155, 230, -330,
	-184, 424, 424, 196, 196, -177, -184, 158, -177, 158,
	-184, -184, -406, 274, 238, -290, 209, 272, 231, -150,
	285, -88, 401, 424, -191, 285, -197, -349, -349, -247,
	285, -190, -359, 395, 401, -174, -151, -88, 401, 424,
	-175, -152, 285, 401, -189, -134, 157, 237, 417, -354,
	-128, 5, 233, -128, 425, 429, 168, -176, 168, -182,
	-165, -88, -189, 143, -359, -190, -359, -359, -359, -88,
	-189, 114, -189, 114, -157, 110, -415, 407, -174, -223,
	-222, -290, -246, -277, 292, 242, -221, -178, -177, 386,
	-183, -246, -230, 429, 143, 407, 426, -221, -153, -153,
	-153, -153, -153, -73, 143, -136, 245, -135, -164, 5,
	-226, 23, -359, 425, -330, 422, 423, 7, 7, 424,
	-350, -137, -226, 143, -41, 395, 272, 92, 345, 257,
	168, -351, -351, -279, 372, 66, 274, -351, 345, 317,
	-73, -164, -272, -290, -316, -189, 430, -290, -290, -291,
	-291, 143, 424, -290, -301, 28, 28, 425, -286, -290,
	417, -354, 425, 425, -299, 111, -290, 356, -354, 417,
	425, 388, -416, -416, -416, 5, 219, 154, 218, -261,
	218, -261, -261, 7, -394, -180, 424, -164, 393, -222,
	425, -345, -330, -290, -290, -290, -290, -290, -350, -290,
	-295, -290, -345, -330, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, 104, 230, 237, -291, -296, -295, -290,
	-290, -330, 425, 425, 425, -235, -72, -243, 149, -327,
	429, -243, -243, 425, -252, 424, -290, -318, 423, 425,
	429, -313, 423, 429, 432, 407, -220, 426, -312, 425,
	429, -276, 32, 425, -354, 361, 361, 114, 230, 383,
	-369, -366, -290, -225, -317, -177, -381, 424, -164, 424,
	424, -147, 107, 320, -266, 114, -153, 114, -153, 399,
	424, 424, 361, -264, 73, -293, -171, -235, 361, 361,
	258, -293, -293, -235, 361, -293, 117, -137, 143, 344,
	-208, 171, -283, -165, 424, -176, 424, 424, -220, -189,
	-327, -248, -160, -265, 381, -175, 424, -175, -158, 201,
	-415, -357, -382, -269, -267, -246, -238, 231, 72, 425,
	429, 426, -284, -240, -231, -290, 2, 425, -88, 429,
	424, 407, 407, 244, -138, -138, 7, 423, 425, -350,
	425, -226, 245, -186, -174, -189, -187, -201, -189, 243,
	425, -148, -175, 28, 28, -290, -301, 425, -290, -290,
	423, -290, 426, 5, -290, 425, 425, 425, 425, -395,
	-164, -290, 425, 425, 425, 429, 429, 425, 425, 425,
	425, 425, -296, 143, 104, 237, 424, 425, 425, -298,
	151, 46, -318, -298, -298, -226, -287, -350, -288, -175,
	422, -354, -320, 424, 426, -177, -184, -282, 114, -370,
	73, -371, 60, 126, 78, 230, 233, 374, 268, 57,
	98, 278, 32, 425, 425, 429, -173, 60, -173, -290,
	-225, -226, 230, 339, 98, 230, 98, 91, 369, -177,
	-184, -226, -226, -189, -177, -184, 424, 425, -191, -190,
	-359, 425, -175, 71, -360, 357, -209, -210, 162, 424,
	-225, 424, -226, -206, 32, -137, 424, 145, 242, -225,
	242, -159, 200, -415, -357, -156, -246, -275, 424, 242,
	-88, -178, 2, -223, 407, -135, -136, -359, -359, 91,
	91, 423, 425, -42, -43, 168, 73, 260, -212, -211,
	257, 237, -148, -290, -290, 425, -354, 417, -416, -389,
	257, 425, -290, -290, -291, 143, 424, -301, -390, 394,
	-290, -235, -390, -390, 425, -314, -350, 2, -282, -184,
	-188, -181, -164, 126, 158, 233, 196, 424, -291, -189,
	424, 2, -281, -410, 77, 340, -317, -148, -188, -148,
	425, 425, 425, 233, 233, -290, -330, -153, -153, 425,
	425, 361, 361, -235, 361, 361, 401, -293, 255, -225,
	425, -225, 425, 425, -88, -225, -189, 425, -189, -415,
	-357, -157, 105, -226, 73, -269, -297, 425, 424, 424,
	429, 24, 424, 24, 424, -187, 345, 425, -223, 46,
	425, 425, -291, -301, 425, -391, -392, -180, -313, 423,
	-371, -181, 230, -290, -166, 424, -290, -208, 424, -173,
	278, -172, 60, 424, 424, -177, -184, -416, 424, 424,
	-293, -189, 425, -281, 425, -208, 425, -265, 424, -357,
	-158, 376, 231, 425, -184, -246, -360, -360, -43, -226,
	-226, -189, -396, 272, 300, -235, 425, 429, 32, 114,
	425, -372, 215, -164, 425, -209, -226, -148, -189, -409,
	381, -188, -214, -213, -211, -216, -215, -211, 425, -235,
	-235, 424, -208, -281, -209, -281, 424, -225, -159, 320,
	-284, 425, 425, 425, 425, 425, -397, -398, 38, 371,
	82, -290, -397, -392, -394, 126, -373, -376, -375, 242,
	144, 256, 325, 425, 339, 391, 425, -220, -290, 425,
	429, 386, 425, 429, 386, 425, 425, -226, -209, -208,
	-208, -225, 425, -239, -137, -137, -398, 265, 139, 299,
	265, 139, -181, -375, 242, -376, 242, 376, 101, -372,
	-213, 162, -215, 143, 425, -209, -209, 425, -284, 28,
	-374, 227, 290, 51, 320, -374, -373, 424, 424, -154,
	51, 290, -281, -398, 21, 233, 98, -235, -235, -208,
	425, 425, -209, -209, 361, 424, -235, 425, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 184, 186, 188, 0, 0, 0, 211, 213, 215,
	216, -2, 0, 0, 0, 244, 245, 247, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 385, 0, 858, -2, 0, 363, 365, 374, 376,
	378, 380, 381, 0, 443, 445, 447, 449, 451, 453,
	455, 457, 459, 460, 462, 464, 466, 468, 470, 472,
	474, 476, 478, 480, 482, 484, 486, 488, 490, 492,
	-2, 770, 772, 774, 776, -2, 62, 64, 66, 68,
	70, 72, 87, 219, 221, 223, 225, 228, 230, 232,
	895, 250, 252, 254, 256, 258, -2, 909, 0, 0,
	0, -2, 0, -2, -2, -2, 788, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 871, 873, 875,
	877, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1533, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1420, 1474,
	1423, 1418, 185, 187, 189, 190, 0, 0, 0, 0,
	0, 0, 671, 1459, 1472, 1473, 1474, 1477, 1478, 1479,
	1533, 0, 212, 214, 217, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 342, 1626, 344,
	346, 0, 0, 0, 0, 238, 239, 240, 241, 242,
	243, 246, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 341, 339, 1454, 283, 284, 0, 0, 324, 325,
	326, 327, 328, 329, 331, 288, 290, 292, 293, 295,
	297, 299, 301, 303, 305, 307, 309, 310, 312, 314,
	315, 317, 319, 320, 322, 731, 0, 0, 0, 0,
	0, 167, 0, 356, 350, 355, 357, 359, 360, 361,
	362, 0, 165, 0, 0, 604, 337, 335, 0, 158,
	0, 0, 767, 0, 356, 1501, 354, 768, 769, 0,
	0, 763, 764, 1656, 798, 364, 366, 375, 377, 379,
	382, -2, -2, 1751, -2, 405, -2, 413, 1754, 1658,
	416, 0, 418, -2, 421, 444, 446, 448, 450, 452,
	454, 456, 458, 461, 463, 465, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	494, 0, 0, 0, 0, 0, 498, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	497, 499, 500, 501, 0, 547, 586, 587, 771, 773,
	775, 0, 712, 897, 63, 65, 67, 69, 71, 220,
	222, 224, 226, 229, 231, -2, 869, 870, 251, 253,
	255, 257, 259, -2, 0, 901, 901, 901, 0, 0,
	870, 868, 0, 367, 0, 369, 0, 498, 372, 373,
	425, 426, 1112, 0, 0, 0, 0, 0, 1237, 1190,
	-2, -2, 1222, 1224, 1730, 1751, 0, 1226, 1227, 0,
	1229, 1233, 1234, 0, 1397, 1466, 1461, 1426, 1427, 1428,
	1429, 0, 0, 1432, 0, 1434, 1435, 1436, 1301, 1248,
	-2, -2, -2, 1470, 1026, 1027, 1028, 1029, 1030, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1763, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 0, 1719, 1736, 1737,
	1742, 1744, 1738, 1727, 1271, -2, -2, 1540, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1731, 1732, -2, 1734, -2,
	-2, 1743, -2, 1747, 1748, -2, -2, 1753, -2, -2,
	-2, 1757, 1758, -2, 1488, 1079, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1776, 1777, 1778, 1779,
	1780, 1781, 800, 778, 791, 800, 780, 781, 782, 783,
	784, 789, 790, 793, 0, 785, 786, 787, 887, 1633,
	890, 671, 888, 872, 874, 0, 876, 0, 0, 0,
	881, 904, 902, 0, 940, 885, 886, 896, 955, 978,
	0, 960, 0, 978, 1000, 0, 965, 1652, 1249, 1250,
	0, 1474, 1471, -2, 1774, 1775, 2, 79, 0, 1736,
	1000, 81, 0, 1736, 84, 0, 1736, 0, -2, 88,
	0, 1736, 168, 169, 1484, 1485, 1489, 1490, 1491, 1492,
	1763, 91, 0, 1450, 99, 0, 1736, 1417, 0, 1447,
	1493, 1494, 1495, 1496, 1497, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 0, 1444, 0, 0,
	596, 1414, 1419, 597, 1424, 0, 191, 192, 193, 194,
	195, 1736, 197, 198, 0, 200, 201, 1736, 203, 204,
	0, 206, 0, 0, 0, 0, 0, 227, 671, 1736,
	0, 234, 1455, 0, 695, 1736, 693, 1458, -2, 1736,
	715, 718, 1736, 720, 671, 722, 1457, -2, 1481, 894,
	1736, 814, 343, 345, 0, 237, 0, 827, 0, 829,
	0, 848, 1006, 151, 1736, 262, 281, 151, 1736, 265,
	151, 1736, 268, 151, 1736, 271, 1412, 151, 1736, 274,
	275, 1736, 277, 170, 278, 1736, 280, 338, 0, 0,
	-2, 332, 1460, -2, 0, 330, 289, 291, 294, 296,
	298, 300, 302, 304, 306, 308, 311, 313, 316, 318,
	321, 323, -2, 0, 159, 160, 161, 162, 0, 0,
	0, 0, 602, 603, 0, 0, 0, 765, 766, 0,
	0, 0, 386, 0, 0, 0, 0, 797, 383, 0,
	402, 0, 404, 1726, -2, -2, 408, 801, 805, 806,
	807, 0, 0, 0, 0, 415, 0, 0, 0, 419,
	422, 0, 495, 496, 0, 0, 506, 507, 508, 509,
	1631, 1554, 512, 0, 515, 536, 551, 0, 0, 519,
	521, 601, 523, 0, 0, 525, 0, 527, 0, 529,
	0, 531, 0, 533, 535, 537, 552, 539, 0, 0,
	0, 550, 0, 556, 0, 559, 560, 561, 0, 563,
	564, 565, 0, 0, 0, 573, 575, 0, 585, 0,
	502, 503, 151, 1004, -2, 0, 864, 918, 919, 0,
	0, 0, 0, 899, 900, 0, 0, 0, 860, 861,
	368, 0, 371, 0, 0, 0, 0, 1332, 1333, 1334,
	1335, 1336, 1337, 1340, 1341, 1338, 1339, 1342, 1343, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 1347, 0,
	0, 1349, 0, 1351, 0, 0, 0, 0, 0, 0,
	1169, 1171, 1405, 0, 0, 1348, 1117, 1118, 1119, 1154,
	1155, 0, 1223, 1402, 1401, 1225, 0, 1354, -2, 1355,
	1237, 0, 0, 1228, 1441, 1235, 1236, 1354, 0, 1396,
	0, 0, 1431, 0, 1109, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1077, 1084, 1081, 1080, 1065, 0, 1064, 0,
	0, 1062, 0, 0, 0, 1066, 0, 1377, -2, 0,
	0, 0, 0, 0, 0, 777, -2, 779, 0, 795,
	0, 889, 0, 0, 944, 1406, 1410, 1411, 944, 944,
	0, 0, 1355, 0, 0, 0, 0, 997, 997, 997,
	995, 972, 0, 978, 0, 988, 0, 978, 978, 0,
	-2, 960, 0, 0, 988, 1001, 1002, 0, 0, 0,
	0, 100, 760, 119, 0, 760, 760, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 115, 107, 108, 0,
	0, 85, 696, 0, 699, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 117, 0, 142, 144, 0, 0, 0, 0,
	991, 595, 0, 0, 1475, 1422, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 1461, 1462, 610, 0, 0,
	0, 0, 691, 694, 0, 713, 0, 893, 0, 0,
	0, 0, 1736, 727, 1446, 1480, 0, 1736, 816, 0,
	1010, 0, 830, 0, 0, 1007, 0, 260, 0, 149,
	150, 0, 263, 0, 266, 0, 269, 0, 0, 272,
	0, 0, 0, 0, 0, 896, 0, 0, 182, 0,
	348, 358, 0, 0, 896, 0, 1357, 1018, 1021, 1022,
	1023, 1109, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1085,
	1079, 1095, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1075, 0, 1050, 1050, 1050, 1067, 1068,
	1086, 1087, 1089, 1091, 1093, 1019, 1020, 1085, 1085, 1082,
	1083, 182, 0, 352, 0, 991, 388, 991, 390, 0,
	581, 0, 0, 0, 0, -2, 410, 0, 803, 0,
	808, 434, 435, 436, 810, 811, 414, 437, 438, 439,
	440, 441, 442, 0, 688, 0, 690, 1437, 0, 411,
	427, 412, 417, 0, 423, 0, 0, 510, 511, 513,
	514, 516, 517, 518, 522, 0, 589, 1648, 599, 524,
	526, 528, 530, 532, 896, 541, 0, 543, 896, 554,
	557, 562, 566, 567, 568, 569, 570, 571, 0, 0,
	0, 711, 0, 867, 916, 917, 922, 926, 927, 930,
	933, 934, 924, 1112, 882, 883, 884, 910, 911, 743,
	0, 0, 370, 1113, 1014, 1015, 1069, 1070, 1071, 1072,
	1073, 1114, 1115, 1443, 0, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, -2, -2, -2, -2, -2,
	-2, -2, -2, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, -2, -2, -2, 1152, 1153, -2,
	1350, 1352, 0, 1405, 0, -2, 0, -2, -2, -2,
	-2, 1166, 0, 1168, 1173, 1175, 1177, 0, 0, 0,
	0, 1404, 1187, 1388, 0, 0, 1329, 1330, 1331, 1172,
	0, 0, 1403, 1400, 0, 0, 1353, 1232, 0, 0,
	0, 0, 1361, 1395, 1391, 0, 1463, 1469, 1239, 907,
	0, 0, 0, 0, 1246, 0, 1442, 1096, 1097, 1098,
	1099, 1100, 1101, 1110, 1311, 0, 0, 0, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 0,
	1364, -2, -2, -2, -2, -2, -2, -2, 0, 1285,
	0, 0, 1297, 0, 1299, 0, 1287, 1355, 1374, 0,
	0, 1193, 0, 0, 0, 1237, 0, 1290, 1355, 1382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	0, 1387, 794, 891, 0, 0, 1010, 0, 0, 0,
	1409, 1010, 1010, 0, 939, 0, 0, 0, 0, 0,
	0, 992, 996, 993, 994, 0, 0, 978, 988, 952,
	0, 0, 1445, 958, 987, 0, 671, 977, 988, 988,
	0, -2, 962, 0, 0, 907, -2, 0, 0, 0,
	0, 759, 121, 1736, 0, 153, 0, 0, 661, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 697,
	698, 700, 706, 708, 0, 702, 1440, 0, 703, 0,
	705, 707, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 1416, 0,
	0, 173, 990, 0, 1415, 1425, 0, 196, 199, 202,
	205, 183, 670, 0, 0, 0, 0, 609, -2, 611,
	613, 614, 615, 616, 1579, 1481, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 824, 0, 909, 0, 846, 832, 0, 0,
	0, 846, 850, 851, 853, 854, 0, 0, 1008, 282,
	151, 151, 151, 1413, 151, 151, 171, 276, 279, 340,
	285, 333, 896, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 336, 0, 1011, 1013, 0, 1024, 0,
	1077, 0, 156, 182, 0, 0, 387, 392, 0, 582,
	0, 0, 403, 0, 802, 809, 0, 431, 0, 433,
	689, 1439, 1438, 0, 424, 504, 0, 600, 598, 540,
	544, 896, 546, 0, 583, 584, 588, 1005, 0, 928,
	0, 925, 931, 932, 0, 913, 741, 742, 0, 0,
	0, -2, -2, 0, 0, 0, 1188, -2, 1167, 1170,
	1174, 1176, 1178, 0, 0, 0, 0, 0, 0, 0,
	1189, 1398, 1401, 1327, 0, 0, 1356, 1359, 1360, 0,
	0, 1392, 0, 0, 0, 0, 0, 906, 907, 907,
	907, 1245, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	0, 1270, 1048, 0, 1282, 0, 1284, 1074, 1296, 1298,
	1286, 0, 0, 1288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1196, 1197, 1198,
	1289, 1380, 1381, 0, 0, 1088, 1090, 1092, 1094, 0,
	0, 0, 0, 1295, 0, 1386, 896, 941, 936, 1407,
	991, 943, 945, 1408, 1448, 936, 936, 0, 1356, 980,
	0, 982, 0, 0, 0, 984, 0, 973, 0, 975,
	988, 957, 0, 0, 950, 0, 949, 671, 986, 959,
	963, 1463, 0, 1003, 0, 967, 970, 0, 0, 120,
	747, 0, 0, 1449, 0, 123, 1736, 132, 0, 638,
	0, 0, 0, 0, 0, 762, 133, 1736, 151, 1736,
	151, 134, 137, 0, 141, 139, 0, 0, 629, 101,
	760, 104, 0, 0, 753, 0, 701, 704, 710, 86,
	0, 755, 745, 0, 0, 744, 143, 105, 0, 0,
	757, 103, 0, 0, 0, 182, 0, 0, 1421, 1476,
	207, 209, 210, 208, 618, 0, 1481, 0, 1481, 0,
	1453, 607, 671, 0, 991, 695, 716, -2, 719, 721,
	729, 0, 0, 0, 820, 824, 0, 823, 894, 921,
	908, 1009, 825, 846, 0, 0, 0, 835, 837, 834,
	831, 828, 1010, 0, 0, 0, 0, 0, 261, 264,
	267, 270, 273, 286, 0, 180, 1613, 178, 175, 177,
	347, 0, 0, 0, 1358, 0, 1016, 0, 0, 0,
	0, 157, 351, 0, 389, 0, 0, 0, 0, 0,
	0, 400, 401, -2, 429, 430, 432, 428, 0, 542,
	545, 553, 0, 0, 912, 743, 0, 1116, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1389, 0, 1400,
	1230, 1231, 1238, 1328, 1362, 1390, 1394, 0, 1464, 1468,
	1240, 0, 0, 0, 0, 1433, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 0, 1309, 1310, 1314, 1456, 0, 0,
	1251, 0, 0, 0, 0, 0, 0, 0, 0, 1363,
	1373, 1375, 1194, 1195, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, -2, -2, -2, 1212, 1213, 1214,
	-2, -2, -2, 0, 0, 0, 1376, 1378, 1379, 1383,
	1384, 0, 1292, 1293, 1294, 1385, 0, 938, 0, 942,
	0, 938, 938, 903, 981, 0, 999, 983, 955, 974,
	0, 964, 953, 0, 954, 0, 985, 0, 961, 966,
	0, 969, 0, 1240, -2, 0, 0, 0, 0, 152,
	636, 660, 0, 0, 732, 740, 740, 0, 1451, 0,
	0, 125, 0, 0, 0, 0, 130, 0, 136, 140,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 111, 114, 0, 0, 110, 0, 154, 0, 0,
	626, 0, 612, 0, 0, 0, 0, 610, 0, 233,
	182, 692, 714, 0, 0, 0, 0, 0, 822, 824,
	0, 815, 816, 846, 920, 826, 844, 845, 843, 0,
	0, 0, 909, 852, 849, 855, 856, 0, 166, 0,
	0, 0, 0, 349, 0, 0, 0, 1017, 1025, 0,
	1078, 353, 0, 576, 577, 624, 0, 580, 505, 923,
	929, 914, 743, 0, 0, -2, 0, 1181, -2, -2,
	1399, 1393, 0, 1430, 907, 1241, 1243, 1244, 1111, 1316,
	1313, 0, 1300, 1261, 1262, 0, 0, 1265, 1267, 1268,
	1269, 1049, 1372, 0, 0, 0, 0, 1291, 892, 1305,
	0, 0, 946, 1305, 1305, 0, 978, 976, 951, 947,
	0, 1464, 968, 0, 0, 749, 751, 122, 0, 637,
	0, 640, 0, 0, 0, 0, 647, 648, 0, 0,
	0, 0, 0, 662, 669, 0, 743, 0, 743, 0,
	0, 0, 0, 127, 146, 0, 0, 761, 0, 151,
	151, 0, 0, 748, 0, 0, 0, 0, 754, 756,
	746, 0, 758, 0, 172, 0, 605, 625, 0, 0,
	0, 0, 0, 0, 0, 235, 0, 728, 0, 0,
	0, 812, 824, 0, 817, 818, 236, 0, 0, 0,
	833, 836, 838, 921, 0, 179, 0, 174, 176, 0,
	0, 1012, 1076, 391, 393, 0, 0, 399, 578, 623,
	0, 0, 915, -2, -2, 1182, 1465, 1467, 0, 909,
	0, 1302, 0, 0, -2, 0, 0, 0, 878, 0,
	937, 935, 879, 880, 998, 988, 0, 971, 124, 0,
	641, 642, 1452, 644, 0, 646, 649, 0, 651, 1483,
	0, 655, 618, 0, 666, 667, 733, 734, 739, 735,
	740, 664, 0, 126, 128, 145, 738, 129, 135, 0,
	0, 0, 0, 907, 0, 0, 0, 989, 0, 0,
	669, 0, 659, 618, 608, 0, 729, 725, 0, 0,
	819, 820, 0, 0, 0, 846, 857, 181, 0, 0,
	0, 395, 0, 397, 0, 622, 0, 1242, 1319, 0,
	1263, 1264, -2, 0, 1220, 1304, 1306, 0, 956, 948,
	639, 643, 0, 0, 675, 0, 0, 626, 0, 743,
	0, 148, 0, 0, 0, 750, 752, 0, 0, 0,
	113, 0, 658, 618, 669, 626, 669, 0, 0, 821,
	822, 0, 840, 1010, 842, 847, 0, 0, 394, 0,
	0, 579, 0, 0, 0, 1315, 1221, 0, 0, 0,
	650, 680, 0, 0, 0, 663, 0, 736, 671, 131,
	0, 737, 0, 630, 0, 0, 633, 0, 0, 0,
	0, 0, 626, 618, 606, 618, 0, 0, 813, 0,
	841, 182, 182, 396, 398, 1312, 1317, 1320, -2, 1702,
	1530, 0, 1318, 1307, 1308, 0, 652, 676, 677, 0,
	672, 673, 674, 1482, 653, 654, 668, 675, 147, 627,
	0, 0, 628, 0, 0, 116, 118, 0, 656, 626,
	626, 0, 726, 1010, 163, 164, 0, 1322, 1323, 1324,
	1325, 1326, 645, 678, 0, 679, 0, 0, 0, 680,
	631, 0, 634, 0, 621, 657, 723, 669, 839, 0,
	681, 0, 684, 685, 0, 682, 665, 0, 0, 617,
	619, 620, 618, 1321, 683, 686, 687, 0, 0, 626,
	626, 0, 724, 632, 0, 0, 0, 626, 635,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1016
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1022
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1028
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1037
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1039
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1062
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1156
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1164
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1175
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1220
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1236
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1248
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1259
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1276
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1286
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1335
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1377
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1386
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1399
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1431
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1471
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1478
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1510
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1511
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1516
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1524
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1563
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.str = "CSV"
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1601
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1605
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1609
		{
			sqlVAL.str = "PGCOPY"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1640
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1647
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1664
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1667
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1671
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1681
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1695
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1736
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1752
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1753
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1754
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1755
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1765
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1773
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1775
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1778
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1788
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1797
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1805
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1814
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1833
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1841
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1843
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1854
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1859
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1865
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.str = ""
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1875
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CREATE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1883
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1900
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1911
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1933
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1943
		{
			return helpWith(sqllex, "DELETE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1953
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DROP")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1983
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1987
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2013
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2028
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2036
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2043
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2059
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2066
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2074
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2078
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2081
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2089
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2096
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2100
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2128
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2141
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "DELETE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2152
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "INSERT")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2159
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2175
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2179
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2193
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2200
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2204
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2208
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2230
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2234
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2244
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2248
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2252
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2256
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2259
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2283
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2287
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2290
		{
			return helpWith(sqllex, "GRANT")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2318
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2321
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2330
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2341
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2359
		{
			return helpWith(sqllex, "RESET")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2360
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2375
		{
			return helpWith(sqllex, "RESET")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2386
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2397
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2400
		{
			return helpWith(sqllex, "USE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2404
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2407
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "USE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2409
		{
			return unimplemented(sqllex, "set local")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2443
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2461
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2469
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2483
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2493
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2501
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2527
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2575
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2578
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2583
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2587
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2597
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2613
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2620
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2626
		{
			return unimplemented(sqllex, "set from current")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2627
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2635
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2640
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2651
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2657
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2674
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2678
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2684
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2688
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2700
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2706
		{
			sqlVAL.union.val = tree.Low
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2710
		{
			sqlVAL.union.val = tree.Normal
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2714
		{
			sqlVAL.union.val = tree.High
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2738
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2742
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2788
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2800
		{
			sqlVAL.str = "client_encoding"
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			sqlVAL.str = "timezone"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2818
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2836
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2844
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2882
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2886
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2889
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2894
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2902
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2991
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3014
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3028
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3032
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3038
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3039
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3084
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3087
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3108
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3120
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3125
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3130
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3142
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3153
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3185
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3202
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3209
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3217
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3224
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3241
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3245
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3256
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3263
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3268
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3388
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3392
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3396
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3435
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3439
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3444
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3448
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3457
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3464
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3468
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3492
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3540
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3585
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3622
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3627
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3632
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3638
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3678
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3688
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3698
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3719
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3734
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3752
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3756
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3760
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3764
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3790
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3794
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3806
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3818
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3822
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3861
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3873
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3890
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3901
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3935
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3945
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3954
		{
			return unimplemented(sqllex, "match full")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3955
		{
			return unimplemented(sqllex, "match partial")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3956
		{
			return unimplemented(sqllex, "match simple")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3957
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3964
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4004
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4008
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4012
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4016
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4022
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4048
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4056
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4064
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4068
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4071
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4075
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4076
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4079
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4080
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4083
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4085
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4087
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4090
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4093
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4095
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4104
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4115
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4122
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4126
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4130
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4147
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4155
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4162
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4216
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4225
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4230
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4240
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4244
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4250
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4266
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4267
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4271
		{
			sqlVAL.str = ""
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4274
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4275
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4279
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4283
		{
			sqlVAL.union.val = tree.Descending
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4287
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4293
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4300
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4314
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4326
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4328
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4371
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4380
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4383
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4413
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4416
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4421
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4422
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4456
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4459
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4461
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4464
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4473
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4474
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4475
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4483
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4493
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4494
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4498
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4502
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4516
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4520
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4540
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4553
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4555
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4563
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4567
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4573
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4609
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4619
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4647
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4653
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4657
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4662
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4663
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4689
		{
			return helpWith(sqllex, "INSERT")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4707
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4711
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4733
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4763
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4767
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4771
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4777
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4781
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4789
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 847:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4815
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4826
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4830
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4831
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4835
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4852
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4855
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4859
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4908
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4931
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4939
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4954
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4989
		{
			return helpWith(sqllex, "SELECT")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4990
		{
			return helpWith(sqllex, "VALUES")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4991
		{
			return helpWith(sqllex, "TABLE")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5013
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5040
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5052
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5056
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5089
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5096
		{
			return helpWith(sqllex, "TABLE")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5108
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5111
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5112
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5116
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5134
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5135
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5139
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5142
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5145
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5146
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5150
		{
			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5154
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = true
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5175
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5176
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5179
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5180
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5184
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5188
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5210
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5218
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5227
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5236
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5247
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5251
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5260
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5266
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5273
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5280
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5303
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5304
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5307
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5308
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5329
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5339
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5358
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5361
		{
			return helpWith(sqllex, "VALUES")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5363
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5375
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5378
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5380
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5400
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5406
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5417
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5440
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5444
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5448
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5452
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5479
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5500
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5510
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5515
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5537
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5553
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5559
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5561
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5564
		{
			sqlVAL.union.val = nil
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = true
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = false
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5608
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5612
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5630
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5634
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5654
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5660
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5678
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5699
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5702
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5723
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5737
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5741
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5753
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5767
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5776
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5787
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5791
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5800
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5809
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5813
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5817
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5826
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5844
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5848
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5856
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5868
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5932
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5936
		{
			sqlVAL.union.val = nil
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5943
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5947
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5987
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5997
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6001
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6019
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6028
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6032
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6039
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6043
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6051
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6071
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6124
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6145
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6172
		{
			sqlVAL.union.val = tree.Year
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6176
		{
			sqlVAL.union.val = tree.Month
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = tree.Day
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = tree.Month
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = nil
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = tree.Second
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6235
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6270
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6498
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6564
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6726
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6734
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6775
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6784
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6793
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6797
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6802
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6814
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6819
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6841
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6842
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6855
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6866
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6887
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6990
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6995
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7000
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7010
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7019
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7020
		{
			return unimplemented(sqllex, "treat")
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7030
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7041
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7046
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7051
		{
			return unimplemented(sqllex, "within group")
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7052
		{
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7056
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7060
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7087
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.str = ""
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7149
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7150
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7151
		{
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7161
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7162
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7163
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7164
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7165
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = tree.Any
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = tree.Some
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = tree.All
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = tree.Div
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.LT
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = tree.GT
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = tree.LE
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.GE
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = tree.NE
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = tree.Like
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7221
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7279
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7283
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7305
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7309
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7313
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7347
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7433
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7437
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7454
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7476
		{
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7477
		{
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7500
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7504
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7508
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7543
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7600
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7604
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7608
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7611
		{
			return unimplemented(sqllex, "func const")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7620
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7626
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7630
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7637
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7650
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7661
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7671
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7782
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7817
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7863
		{
			sqlVAL.str = ""
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7869
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7873
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
