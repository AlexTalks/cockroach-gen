// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9267

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 998,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 837,
	194, 837,
	209, 232,
	285, 232,
	293, 693,
	320, 232,
	329, 693,
	366, 693,
	391, 232,
	414, 693,
	-2, 0,
	-1, 75,
	209, 236,
	-2, 0,
	-1, 76,
	106, 998,
	183, 998,
	400, 998,
	401, 998,
	-2, 0,
	-1, 87,
	119, 972,
	133, 972,
	191, 972,
	220, 972,
	251, 972,
	261, 972,
	396, 972,
	-2, 959,
	-1, 116,
	124, 613,
	200, 605,
	208, 613,
	287, 599,
	338, 599,
	384, 613,
	-2, 0,
	-1, 117,
	4, 1000,
	21, 1000,
	22, 1000,
	23, 1000,
	24, 1000,
	25, 1000,
	27, 1000,
	32, 1000,
	37, 1000,
	38, 1000,
	39, 1000,
	40, 1000,
	41, 1000,
	42, 1000,
	43, 1000,
	44, 1000,
	45, 1000,
	46, 1000,
	47, 1000,
	49, 1000,
	50, 1000,
	51, 1000,
	52, 1000,
	53, 1000,
	54, 1000,
	57, 1000,
	58, 1000,
	59, 1000,
	60, 1000,
	62, 1000,
	63, 1000,
	67, 1000,
	68, 1000,
	69, 1000,
	70, 1000,
	71, 1000,
	73, 1000,
	74, 1000,
	75, 1000,
	76, 1000,
	78, 1000,
	80, 1000,
	81, 1000,
	82, 1000,
	85, 1000,
	86, 1000,
	94, 1000,
	95, 1000,
	96, 1000,
	97, 1000,
	98, 1000,
	99, 1000,
	100, 1000,
	101, 1000,
	103, 1000,
	105, 1000,
	106, 1000,
	108, 1000,
	111, 1000,
	112, 1000,
	113, 1000,
	115, 1000,
	117, 1000,
	118, 1000,
	120, 1000,
	121, 1000,
	122, 1000,
	123, 1000,
	124, 1000,
	125, 1000,
	126, 1000,
	127, 1000,
	128, 1000,
	129, 1000,
	130, 1000,
	132, 1000,
	138, 1000,
	139, 1000,
	140, 1000,
	141, 1000,
	142, 1000,
	143, 1000,
	145, 1000,
	147, 1000,
	151, 1000,
	152, 1000,
	154, 1000,
	155, 1000,
	157, 1000,
	158, 1000,
	160, 1000,
	161, 1000,
	162, 1000,
	163, 1000,
	164, 1000,
	165, 1000,
	166, 1000,
	168, 1000,
	169, 1000,
	171, 1000,
	172, 1000,
	173, 1000,
	177, 1000,
	178, 1000,
	179, 1000,
	180, 1000,
	183, 1000,
	184, 1000,
	185, 1000,
	186, 1000,
	187, 1000,
	188, 1000,
	189, 1000,
	190, 1000,
	192, 1000,
	194, 1000,
	196, 1000,
	198, 1000,
	199, 1000,
	200, 1000,
	202, 1000,
	203, 1000,
	206, 1000,
	207, 1000,
	208, 1000,
	209, 1000,
	211, 1000,
	212, 1000,
	214, 1000,
	215, 1000,
	217, 1000,
	218, 1000,
	221, 1000,
	222, 1000,
	225, 1000,
	226, 1000,
	228, 1000,
	229, 1000,
	230, 1000,
	231, 1000,
	232, 1000,
	233, 1000,
	234, 1000,
	235, 1000,
	236, 1000,
	237, 1000,
	239, 1000,
	240, 1000,
	241, 1000,
	242, 1000,
	244, 1000,
	247, 1000,
	248, 1000,
	249, 1000,
	250, 1000,
	252, 1000,
	253, 1000,
	254, 1000,
	256, 1000,
	257, 1000,
	258, 1000,
	259, 1000,
	262, 1000,
	263, 1000,
	265, 1000,
	267, 1000,
	268, 1000,
	269, 1000,
	270, 1000,
	271, 1000,
	272, 1000,
	273, 1000,
	274, 1000,
	275, 1000,
	277, 1000,
	278, 1000,
	279, 1000,
	280, 1000,
	281, 1000,
	282, 1000,
	284, 1000,
	286, 1000,
	287, 1000,
	288, 1000,
	289, 1000,
	290, 1000,
	291, 1000,
	292, 1000,
	293, 1000,
	294, 1000,
	296, 1000,
	297, 1000,
	298, 1000,
	299, 1000,
	300, 1000,
	302, 1000,
	303, 1000,
	304, 1000,
	305, 1000,
	306, 1000,
	307, 1000,
	308, 1000,
	309, 1000,
	311, 1000,
	313, 1000,
	314, 1000,
	315, 1000,
	316, 1000,
	317, 1000,
	318, 1000,
	320, 1000,
	321, 1000,
	322, 1000,
	323, 1000,
	324, 1000,
	325, 1000,
	326, 1000,
	327, 1000,
	329, 1000,
	330, 1000,
	331, 1000,
	332, 1000,
	333, 1000,
	334, 1000,
	335, 1000,
	336, 1000,
	337, 1000,
	338, 1000,
	340, 1000,
	341, 1000,
	342, 1000,
	343, 1000,
	345, 1000,
	346, 1000,
	347, 1000,
	348, 1000,
	350, 1000,
	351, 1000,
	352, 1000,
	353, 1000,
	354, 1000,
	355, 1000,
	356, 1000,
	357, 1000,
	358, 1000,
	359, 1000,
	360, 1000,
	361, 1000,
	363, 1000,
	364, 1000,
	365, 1000,
	367, 1000,
	368, 1000,
	369, 1000,
	370, 1000,
	371, 1000,
	372, 1000,
	373, 1000,
	374, 1000,
	375, 1000,
	377, 1000,
	378, 1000,
	379, 1000,
	380, 1000,
	382, 1000,
	384, 1000,
	385, 1000,
	386, 1000,
	387, 1000,
	388, 1000,
	390, 1000,
	391, 1000,
	392, 1000,
	394, 1000,
	395, 1000,
	398, 1000,
	399, 1000,
	400, 1000,
	401, 1000,
	402, 1000,
	404, 1000,
	406, 1000,
	407, 1000,
	408, 1000,
	409, 1000,
	410, 1000,
	411, 1000,
	412, 1000,
	414, 1000,
	415, 1000,
	416, 1000,
	421, 1000,
	422, 1000,
	423, 1000,
	424, 1000,
	425, 1000,
	426, 1000,
	-2, 0,
	-1, 118,
	1, 890,
	198, 890,
	284, 890,
	291, 890,
	429, 890,
	452, 890,
	-2, 0,
	-1, 120,
	1, 890,
	452, 890,
	-2, 0,
	-1, 121,
	1, 890,
	452, 890,
	-2, 0,
	-1, 122,
	1, 894,
	452, 894,
	-2, 0,
	-1, 146,
	119, 971,
	133, 971,
	191, 971,
	220, 971,
	251, 971,
	261, 971,
	396, 971,
	-2, 968,
	-1, 176,
	4, 1007,
	5, 1007,
	6, 1007,
	7, 1007,
	8, 1007,
	9, 1007,
	10, 1007,
	21, 1007,
	22, 1007,
	23, 1007,
	24, 1007,
	25, 1007,
	27, 1007,
	32, 1007,
	33, 1007,
	37, 1007,
	38, 1007,
	39, 1007,
	40, 1007,
	41, 1007,
	42, 1007,
	43, 1007,
	44, 1007,
	45, 1007,
	46, 1007,
	47, 1007,
	49, 1007,
	50, 1007,
	51, 1007,
	52, 1007,
	53, 1007,
	54, 1007,
	55, 1007,
	56, 1007,
	57, 1007,
	58, 1007,
	59, 1007,
	60, 1007,
	62, 1007,
	63, 1007,
	65, 1007,
	67, 1007,
	68, 1007,
	69, 1007,
	70, 1007,
	71, 1007,
	73, 1007,
	74, 1007,
	75, 1007,
	76, 1007,
	78, 1007,
	80, 1007,
	81, 1007,
	82, 1007,
	84, 1007,
	85, 1007,
	86, 1007,
	87, 1007,
	88, 1007,
	89, 1007,
	90, 1007,
	91, 1007,
	92, 1007,
	93, 1007,
	94, 1007,
	95, 1007,
	96, 1007,
	97, 1007,
	98, 1007,
	99, 1007,
	100, 1007,
	101, 1007,
	102, 1007,
	103, 1007,
	105, 1007,
	106, 1007,
	108, 1007,
	111, 1007,
	112, 1007,
	113, 1007,
	115, 1007,
	117, 1007,
	118, 1007,
	120, 1007,
	121, 1007,
	122, 1007,
	123, 1007,
	124, 1007,
	125, 1007,
	126, 1007,
	127, 1007,
	128, 1007,
	129, 1007,
	130, 1007,
	131, 1007,
	132, 1007,
	138, 1007,
	139, 1007,
	140, 1007,
	141, 1007,
	142, 1007,
	143, 1007,
	145, 1007,
	147, 1007,
	150, 1007,
	151, 1007,
	152, 1007,
	154, 1007,
	155, 1007,
	157, 1007,
	158, 1007,
	160, 1007,
	161, 1007,
	162, 1007,
	163, 1007,
	164, 1007,
	165, 1007,
	166, 1007,
	167, 1007,
	168, 1007,
	169, 1007,
	171, 1007,
	172, 1007,
	173, 1007,
	177, 1007,
	178, 1007,
	179, 1007,
	180, 1007,
	182, 1007,
	183, 1007,
	184, 1007,
	185, 1007,
	186, 1007,
	187, 1007,
	188, 1007,
	189, 1007,
	190, 1007,
	192, 1007,
	194, 1007,
	195, 1007,
	196, 1007,
	197, 1007,
	198, 1007,
	199, 1007,
	200, 1007,
	201, 1007,
	202, 1007,
	203, 1007,
	206, 1007,
	207, 1007,
	208, 1007,
	209, 1007,
	211, 1007,
	212, 1007,
	214, 1007,
	215, 1007,
	216, 1007,
	217, 1007,
	218, 1007,
	219, 1007,
	221, 1007,
	222, 1007,
	225, 1007,
	226, 1007,
	228, 1007,
	229, 1007,
	230, 1007,
	231, 1007,
	232, 1007,
	233, 1007,
	234, 1007,
	235, 1007,
	236, 1007,
	237, 1007,
	238, 1007,
	239, 1007,
	240, 1007,
	241, 1007,
	242, 1007,
	243, 1007,
	244, 1007,
	245, 1007,
	246, 1007,
	247, 1007,
	248, 1007,
	249, 1007,
	250, 1007,
	252, 1007,
	253, 1007,
	254, 1007,
	257, 1007,
	258, 1007,
	259, 1007,
	262, 1007,
	263, 1007,
	264, 1007,
	265, 1007,
	266, 1007,
	267, 1007,
	268, 1007,
	269, 1007,
	270, 1007,
	271, 1007,
	272, 1007,
	273, 1007,
	274, 1007,
	275, 1007,
	277, 1007,
	278, 1007,
	279, 1007,
	280, 1007,
	281, 1007,
	282, 1007,
	284, 1007,
	286, 1007,
	287, 1007,
	288, 1007,
	289, 1007,
	290, 1007,
	291, 1007,
	292, 1007,
	293, 1007,
	294, 1007,
	296, 1007,
	297, 1007,
	298, 1007,
	299, 1007,
	300, 1007,
	302, 1007,
	303, 1007,
	304, 1007,
	305, 1007,
	306, 1007,
	307, 1007,
	308, 1007,
	309, 1007,
	311, 1007,
	312, 1007,
	313, 1007,
	314, 1007,
	315, 1007,
	316, 1007,
	317, 1007,
	318, 1007,
	320, 1007,
	321, 1007,
	322, 1007,
	323, 1007,
	324, 1007,
	325, 1007,
	326, 1007,
	327, 1007,
	329, 1007,
	330, 1007,
	331, 1007,
	332, 1007,
	333, 1007,
	334, 1007,
	335, 1007,
	336, 1007,
	337, 1007,
	338, 1007,
	339, 1007,
	340, 1007,
	341, 1007,
	342, 1007,
	343, 1007,
	344, 1007,
	345, 1007,
	346, 1007,
	347, 1007,
	348, 1007,
	350, 1007,
	351, 1007,
	352, 1007,
	353, 1007,
	354, 1007,
	355, 1007,
	356, 1007,
	357, 1007,
	358, 1007,
	359, 1007,
	360, 1007,
	361, 1007,
	363, 1007,
	364, 1007,
	365, 1007,
	367, 1007,
	368, 1007,
	369, 1007,
	370, 1007,
	371, 1007,
	372, 1007,
	373, 1007,
	374, 1007,
	375, 1007,
	377, 1007,
	378, 1007,
	379, 1007,
	380, 1007,
	382, 1007,
	384, 1007,
	385, 1007,
	386, 1007,
	387, 1007,
	388, 1007,
	389, 1007,
	390, 1007,
	391, 1007,
	392, 1007,
	394, 1007,
	395, 1007,
	397, 1007,
	398, 1007,
	399, 1007,
	400, 1007,
	401, 1007,
	402, 1007,
	403, 1007,
	404, 1007,
	406, 1007,
	407, 1007,
	408, 1007,
	409, 1007,
	410, 1007,
	411, 1007,
	412, 1007,
	414, 1007,
	415, 1007,
	416, 1007,
	421, 1007,
	422, 1007,
	423, 1007,
	424, 1007,
	425, 1007,
	426, 1007,
	427, 1007,
	435, 1007,
	440, 1007,
	441, 1007,
	442, 1007,
	449, 1007,
	454, 1007,
	-2, 0,
	-1, 543,
	149, 1675,
	381, 1675,
	432, 1675,
	451, 1675,
	-2, 0,
	-1, 544,
	149, 1752,
	381, 1752,
	432, 1752,
	451, 1752,
	-2, 0,
	-1, 545,
	149, 1665,
	381, 1665,
	432, 1665,
	451, 1665,
	-2, 0,
	-1, 547,
	149, 1838,
	381, 1838,
	432, 1838,
	451, 1838,
	-2, 0,
	-1, 549,
	149, 1866,
	381, 1866,
	432, 1866,
	451, 1866,
	-2, 0,
	-1, 556,
	149, 1762,
	381, 1762,
	432, 1762,
	451, 1762,
	-2, 481,
	-1, 573,
	451, 1624,
	453, 1624,
	-2, 662,
	-1, 574,
	451, 1626,
	453, 1626,
	-2, 663,
	-1, 575,
	451, 1625,
	453, 1625,
	-2, 664,
	-1, 576,
	453, 1571,
	-2, 665,
	-1, 719,
	287, 600,
	338, 600,
	-2, 0,
	-1, 720,
	287, 599,
	338, 599,
	-2, 559,
	-1, 722,
	1, 581,
	448, 581,
	450, 581,
	452, 581,
	-2, 0,
	-1, 723,
	1, 661,
	146, 661,
	448, 661,
	450, 661,
	452, 661,
	-2, 0,
	-1, 732,
	1, 623,
	448, 623,
	450, 623,
	452, 623,
	-2, 0,
	-1, 733,
	1, 625,
	448, 625,
	450, 625,
	452, 625,
	-2, 0,
	-1, 734,
	1, 628,
	448, 628,
	450, 628,
	452, 628,
	-2, 0,
	-1, 738,
	1, 642,
	448, 642,
	450, 642,
	452, 642,
	-2, 0,
	-1, 739,
	1, 644,
	448, 644,
	450, 644,
	452, 644,
	-2, 0,
	-1, 784,
	133, 1011,
	220, 1011,
	251, 1011,
	-2, 968,
	-1, 799,
	133, 1010,
	220, 1010,
	251, 1010,
	-2, 968,
	-1, 823,
	451, 1623,
	-2, 489,
	-1, 852,
	449, 1615,
	-2, 1606,
	-1, 858,
	5, 1145,
	-2, 1656,
	-1, 859,
	5, 1146,
	-2, 1660,
	-1, 860,
	5, 1147,
	-2, 1659,
	-1, 861,
	5, 1148,
	-2, 1864,
	-1, 862,
	5, 1149,
	-2, 1764,
	-1, 863,
	5, 1150,
	-2, 1830,
	-1, 864,
	5, 1151,
	-2, 1832,
	-1, 865,
	5, 1152,
	-2, 1843,
	-1, 866,
	5, 1153,
	-2, 1833,
	-1, 867,
	5, 1154,
	-2, 1834,
	-1, 868,
	5, 1155,
	-2, 1655,
	-1, 869,
	5, 1156,
	-2, 1878,
	-1, 870,
	5, 1157,
	-2, 1727,
	-1, 871,
	5, 1158,
	-2, 1771,
	-1, 872,
	5, 1159,
	-2, 1773,
	-1, 873,
	5, 1160,
	-2, 1731,
	-1, 874,
	5, 1161,
	449, 1633,
	-2, 1624,
	-1, 875,
	5, 1217,
	449, 1217,
	-2, 1913,
	-1, 880,
	449, 1634,
	-2, 1625,
	-1, 882,
	5, 1165,
	-2, 1911,
	-1, 883,
	5, 1166,
	-2, 1912,
	-1, 884,
	5, 1167,
	-2, 1730,
	-1, 885,
	5, 1168,
	-2, 1924,
	-1, 886,
	5, 1169,
	-2, 1732,
	-1, 887,
	5, 1170,
	-2, 1733,
	-1, 888,
	5, 1171,
	-2, 1734,
	-1, 889,
	5, 1172,
	-2, 1893,
	-1, 890,
	5, 1173,
	-2, 1922,
	-1, 891,
	5, 1174,
	-2, 1710,
	-1, 892,
	5, 1175,
	-2, 1711,
	-1, 893,
	5, 1189,
	-2, 1905,
	-1, 895,
	5, 1164,
	-2, 1901,
	-1, 896,
	5, 1164,
	-2, 1900,
	-1, 897,
	5, 1164,
	-2, 1917,
	-1, 898,
	5, 1181,
	-2, 1895,
	-1, 899,
	5, 1182,
	-2, 1657,
	-1, 900,
	5, 1192,
	-2, 1894,
	-1, 901,
	5, 1194,
	-2, 1933,
	-1, 903,
	5, 1205,
	-2, 1685,
	-1, 904,
	5, 1216,
	-2, 1926,
	-1, 905,
	5, 1208,
	-2, 1927,
	-1, 906,
	5, 1216,
	-2, 1928,
	-1, 907,
	5, 1212,
	-2, 1929,
	-1, 908,
	5, 1132,
	-2, 1740,
	-1, 909,
	5, 1133,
	-2, 1741,
	-1, 910,
	451, 1621,
	-2, 1605,
	-1, 911,
	449, 1953,
	-2, 1622,
	-1, 931,
	5, 1200,
	-2, 1853,
	-1, 948,
	5, 1199,
	-2, 1934,
	-1, 958,
	5, 1201,
	415, 1201,
	-2, 1896,
	-1, 959,
	5, 1202,
	415, 1202,
	-2, 1897,
	-1, 995,
	449, 1633,
	-2, 1624,
	-1, 1024,
	149, 1866,
	381, 1866,
	432, 1866,
	451, 1866,
	-2, 0,
	-1, 1025,
	1, 469,
	452, 469,
	-2, 902,
	-1, 1145,
	302, 1602,
	442, 1602,
	-2, 1601,
	-1, 1168,
	454, 1602,
	-2, 1603,
	-1, 1203,
	293, 693,
	414, 693,
	-2, 231,
	-1, 1223,
	273, 996,
	-2, 810,
	-1, 1232,
	255, 1628,
	-2, 0,
	-1, 1296,
	1, 346,
	448, 346,
	450, 346,
	452, 346,
	-2, 970,
	-1, 1299,
	4, 1932,
	11, 1932,
	12, 1932,
	14, 1932,
	15, 1932,
	16, 1932,
	17, 1932,
	18, 1932,
	19, 1932,
	21, 1932,
	22, 1932,
	23, 1932,
	24, 1932,
	25, 1932,
	27, 1932,
	30, 1932,
	32, 1932,
	34, 1932,
	37, 1932,
	38, 1932,
	39, 1932,
	40, 1932,
	41, 1932,
	42, 1932,
	43, 1932,
	44, 1932,
	45, 1932,
	46, 1932,
	47, 1932,
	49, 1932,
	50, 1932,
	51, 1932,
	52, 1932,
	53, 1932,
	54, 1932,
	57, 1932,
	58, 1932,
	59, 1932,
	60, 1932,
	62, 1932,
	63, 1932,
	64, 1932,
	67, 1932,
	68, 1932,
	69, 1932,
	70, 1932,
	71, 1932,
	72, 1932,
	73, 1932,
	74, 1932,
	75, 1932,
	76, 1932,
	78, 1932,
	79, 1932,
	80, 1932,
	81, 1932,
	82, 1932,
	84, 1932,
	85, 1932,
	86, 1932,
	94, 1932,
	95, 1932,
	96, 1932,
	97, 1932,
	98, 1932,
	99, 1932,
	100, 1932,
	101, 1932,
	103, 1932,
	105, 1932,
	106, 1932,
	108, 1932,
	111, 1932,
	112, 1932,
	113, 1932,
	115, 1932,
	117, 1932,
	118, 1932,
	120, 1932,
	121, 1932,
	122, 1932,
	123, 1932,
	124, 1932,
	125, 1932,
	126, 1932,
	127, 1932,
	128, 1932,
	129, 1932,
	130, 1932,
	134, 1932,
	135, 1932,
	136, 1932,
	137, 1932,
	138, 1932,
	139, 1932,
	140, 1932,
	141, 1932,
	142, 1932,
	143, 1932,
	144, 1932,
	145, 1932,
	147, 1932,
	150, 1932,
	151, 1932,
	152, 1932,
	154, 1932,
	155, 1932,
	157, 1932,
	158, 1932,
	160, 1932,
	161, 1932,
	162, 1932,
	163, 1932,
	164, 1932,
	165, 1932,
	166, 1932,
	167, 1932,
	168, 1932,
	169, 1932,
	170, 1932,
	171, 1932,
	172, 1932,
	173, 1932,
	174, 1932,
	175, 1932,
	176, 1932,
	178, 1932,
	179, 1932,
	180, 1932,
	182, 1932,
	183, 1932,
	184, 1932,
	185, 1932,
	186, 1932,
	187, 1932,
	188, 1932,
	189, 1932,
	190, 1932,
	192, 1932,
	194, 1932,
	195, 1932,
	196, 1932,
	197, 1932,
	198, 1932,
	199, 1932,
	200, 1932,
	201, 1932,
	202, 1932,
	203, 1932,
	204, 1932,
	205, 1932,
	206, 1932,
	207, 1932,
	208, 1932,
	209, 1932,
	211, 1932,
	212, 1932,
	214, 1932,
	215, 1932,
	216, 1932,
	217, 1932,
	218, 1932,
	219, 1932,
	221, 1932,
	222, 1932,
	225, 1932,
	226, 1932,
	227, 1932,
	228, 1932,
	229, 1932,
	230, 1932,
	231, 1932,
	232, 1932,
	233, 1932,
	234, 1932,
	235, 1932,
	236, 1932,
	237, 1932,
	238, 1932,
	239, 1932,
	240, 1932,
	241, 1932,
	242, 1932,
	245, 1932,
	247, 1932,
	248, 1932,
	249, 1932,
	250, 1932,
	252, 1932,
	253, 1932,
	254, 1932,
	257, 1932,
	258, 1932,
	259, 1932,
	260, 1932,
	262, 1932,
	263, 1932,
	265, 1932,
	267, 1932,
	268, 1932,
	269, 1932,
	270, 1932,
	271, 1932,
	272, 1932,
	273, 1932,
	274, 1932,
	275, 1932,
	277, 1932,
	278, 1932,
	279, 1932,
	280, 1932,
	281, 1932,
	282, 1932,
	284, 1932,
	286, 1932,
	287, 1932,
	288, 1932,
	289, 1932,
	290, 1932,
	291, 1932,
	292, 1932,
	293, 1932,
	294, 1932,
	296, 1932,
	297, 1932,
	298, 1932,
	299, 1932,
	300, 1932,
	301, 1932,
	302, 1932,
	303, 1932,
	304, 1932,
	305, 1932,
	306, 1932,
	307, 1932,
	308, 1932,
	309, 1932,
	311, 1932,
	312, 1932,
	313, 1932,
	314, 1932,
	315, 1932,
	316, 1932,
	317, 1932,
	318, 1932,
	319, 1932,
	320, 1932,
	321, 1932,
	322, 1932,
	323, 1932,
	324, 1932,
	325, 1932,
	326, 1932,
	327, 1932,
	329, 1932,
	330, 1932,
	331, 1932,
	332, 1932,
	333, 1932,
	334, 1932,
	335, 1932,
	336, 1932,
	337, 1932,
	338, 1932,
	340, 1932,
	341, 1932,
	342, 1932,
	343, 1932,
	344, 1932,
	345, 1932,
	346, 1932,
	347, 1932,
	348, 1932,
	350, 1932,
	351, 1932,
	352, 1932,
	353, 1932,
	354, 1932,
	355, 1932,
	356, 1932,
	357, 1932,
	358, 1932,
	359, 1932,
	360, 1932,
	361, 1932,
	363, 1932,
	364, 1932,
	365, 1932,
	367, 1932,
	368, 1932,
	369, 1932,
	370, 1932,
	371, 1932,
	372, 1932,
	373, 1932,
	374, 1932,
	375, 1932,
	377, 1932,
	378, 1932,
	379, 1932,
	380, 1932,
	382, 1932,
	384, 1932,
	385, 1932,
	386, 1932,
	387, 1932,
	388, 1932,
	390, 1932,
	391, 1932,
	392, 1932,
	394, 1932,
	395, 1932,
	398, 1932,
	399, 1932,
	400, 1932,
	401, 1932,
	402, 1932,
	404, 1932,
	406, 1932,
	407, 1932,
	408, 1932,
	409, 1932,
	410, 1932,
	411, 1932,
	412, 1932,
	414, 1932,
	415, 1932,
	416, 1932,
	421, 1932,
	422, 1932,
	423, 1932,
	424, 1932,
	425, 1932,
	426, 1932,
	427, 1932,
	428, 1932,
	430, 1932,
	431, 1932,
	432, 1932,
	433, 1932,
	434, 1932,
	435, 1932,
	437, 1932,
	438, 1932,
	439, 1932,
	440, 1932,
	441, 1932,
	442, 1932,
	443, 1932,
	444, 1932,
	445, 1932,
	447, 1932,
	450, 1932,
	451, 1932,
	453, 1932,
	454, 1932,
	-2, 0,
	-1, 1302,
	149, 1838,
	381, 1838,
	432, 1838,
	451, 1838,
	-2, 0,
	-1, 1328,
	287, 600,
	338, 600,
	-2, 0,
	-1, 1347,
	1, 595,
	448, 595,
	450, 595,
	452, 595,
	-2, 0,
	-1, 1348,
	1, 614,
	448, 614,
	450, 614,
	452, 614,
	-2, 0,
	-1, 1349,
	1, 602,
	448, 602,
	450, 602,
	452, 602,
	-2, 0,
	-1, 1371,
	1, 1885,
	448, 1885,
	450, 1885,
	451, 1885,
	452, 1885,
	-2, 640,
	-1, 1372,
	1, 1836,
	448, 1836,
	450, 1836,
	451, 1836,
	452, 1836,
	-2, 641,
	-1, 1385,
	1, 897,
	452, 897,
	-2, 902,
	-1, 1390,
	133, 1010,
	220, 1010,
	251, 1010,
	-2, 968,
	-1, 1483,
	119, 972,
	133, 972,
	191, 972,
	220, 972,
	251, 972,
	261, 972,
	396, 972,
	-2, 1373,
	-1, 1536,
	450, 1506,
	-2, 0,
	-1, 1578,
	119, 972,
	133, 972,
	191, 972,
	220, 972,
	251, 972,
	261, 972,
	396, 972,
	-2, 1082,
	-1, 1633,
	449, 1204,
	-2, 1192,
	-1, 1672,
	1, 471,
	452, 471,
	-2, 902,
	-1, 1857,
	1, 597,
	448, 597,
	450, 597,
	452, 597,
	-2, 0,
	-1, 1858,
	1, 616,
	448, 616,
	450, 616,
	452, 616,
	-2, 0,
	-1, 1931,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1253,
	-1, 1932,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1254,
	-1, 1933,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1255,
	-1, 1934,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1256,
	-1, 1935,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1257,
	-1, 1936,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1258,
	-1, 1937,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1259,
	-1, 1938,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1260,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1272,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1273,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1274,
	-1, 1955,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1279,
	-1, 1961,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1283,
	-1, 1963,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1291,
	-1, 1964,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1292,
	-1, 1965,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1293,
	-1, 1966,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1294,
	-1, 2060,
	5, 1161,
	149, 1517,
	449, 1633,
	-2, 1624,
	-1, 2061,
	149, 1518,
	-2, 1889,
	-1, 2062,
	149, 1519,
	-2, 1761,
	-1, 2063,
	149, 1520,
	-2, 1686,
	-1, 2064,
	149, 1521,
	-2, 1721,
	-1, 2065,
	149, 1522,
	-2, 1759,
	-1, 2066,
	149, 1523,
	-2, 1829,
	-1, 2142,
	1, 1083,
	84, 1083,
	119, 1083,
	133, 1083,
	146, 1083,
	150, 1083,
	156, 1083,
	159, 1083,
	182, 1083,
	191, 1083,
	201, 1083,
	216, 1083,
	220, 1083,
	238, 1083,
	251, 1083,
	255, 1083,
	261, 1083,
	310, 1083,
	312, 1083,
	396, 1083,
	405, 1083,
	418, 1083,
	419, 1083,
	420, 1083,
	429, 1083,
	448, 1083,
	450, 1083,
	452, 1083,
	453, 1083,
	-2, 1082,
	-1, 2147,
	449, 1607,
	-2, 1619,
	-1, 2169,
	449, 1203,
	-2, 1193,
	-1, 2385,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1281,
	-1, 2386,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1285,
	-1, 2392,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1287,
	-1, 2572,
	198, 902,
	284, 902,
	291, 902,
	429, 902,
	-2, 468,
	-1, 2645,
	450, 1576,
	453, 1576,
	-2, 1593,
	-1, 2659,
	273, 996,
	-2, 810,
	-1, 2736,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1289,
	-1, 2743,
	195, 0,
	197, 0,
	245, 0,
	-2, 1308,
	-1, 2806,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1337,
	-1, 2807,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1338,
	-1, 2808,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1339,
	-1, 2812,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1343,
	-1, 2813,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1344,
	-1, 2814,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1345,
	-1, 2857,
	449, 1608,
	-2, 1620,
	-1, 2940,
	451, 2035,
	-2, 945,
	-1, 2983,
	195, 0,
	197, 0,
	245, 0,
	-2, 1309,
	-1, 2986,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1312,
	-1, 2987,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1314,
	-1, 3132,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1313,
	-1, 3133,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1315,
	-1, 3143,
	195, 0,
	-2, 1346,
	-1, 3238,
	195, 0,
	-2, 1347,
	-1, 3348,
	41, 0,
	167, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1892,
}

const sqlPrivate = 57344

const sqlLast = 69963

var sqlAct = [...]int{

	880, 3085, 3173, 3357, 3347, 3420, 3196, 3430, 2295, 2969,
	3176, 3321, 3358, 2091, 3305, 3318, 3359, 3162, 2646, 3199,
	2878, 2304, 1838, 2774, 3346, 3242, 2296, 3100, 1918, 3123,
	2931, 809, 996, 2926, 3204, 3046, 1288, 2134, 2589, 208,
	1149, 208, 208, 2676, 1603, 208, 208, 208, 208, 208,
	2413, 1398, 208, 2936, 1590, 800, 2668, 1978, 2643, 554,
	575, 1604, 1031, 2879, 3147, 2681, 2670, 1481, 1284, 2292,
	2378, 2547, 1573, 2269, 1050, 2272, 2534, 1571, 208, 2411,
	2521, 3018, 575, 2968, 2336, 1354, 2130, 988, 2494, 2327,
	671, 2335, 2510, 1796, 2329, 2198, 1799, 2305, 1788, 1789,
	2200, 2829, 1725, 1545, 2253, 1716, 2029, 808, 139, 1509,
	2135, 1491, 2493, 2009, 3243, 1991, 1142, 2374, 1161, 1915,
	1911, 2680, 1749, 86, 1743, 1702, 876, 1546, 1704, 1385,
	4, 1291, 2270, 3197, 1038, 2021, 2109, 1975, 2552, 32,
	797, 2231, 2644, 1151, 1297, 200, 1281, 1158, 852, 2088,
	1785, 2298, 2190, 1217, 837, 2339, 522, 983, 2003, 2117,
	2137, 2099, 1027, 1555, 1271, 962, 1992, 1472, 146, 1399,
	980, 208, 208, 147, 2056, 538, 576, 577, 202, 1397,
	201, 571, 1784, 1295, 139, 1805, 1247, 647, 2230, 616,
	1171, 1715, 1504, 548, 836, 525, 985, 960, 799, 714,
	1403, 506, 37, 533, 36, 1384, 530, 666, 34, 729,
	1229, 2846, 2409, 1839, 2847, 2248, 26, 24, 1819, 22,
	1819, 2297, 1035, 3458, 1411, 1412, 2108, 1035, 2301, 2133,
	1454, 1455, 1456, 1572, 3449, 2731, 2006, 2108, 580, 804,
	583, 3448, 2217, 1819, 2108, 3429, 1831, 1817, 1756, 3416,
	1414, 2832, 3060, 2108, 1460, 2688, 2687, 1411, 1412, 2570,
	580, 3414, 583, 680, 3060, 3379, 3377, 3374, 2108, 2108,
	3375, 3371, 805, 879, 3372, 3368, 3344, 1413, 1756, 1756,
	3301, 3343, 176, 1414, 1756, 1433, 3340, 3339, 3300, 1831,
	1831, 2162, 3291, 3290, 3284, 3060, 3060, 1756, 3278, 3276,
	2007, 3060, 3060, 3240, 3225, 2101, 2162, 1756, 785, 3222,
	1413, 3190, 3060, 784, 1756, 3189, 3182, 804, 1756, 1756,
	178, 3181, 3153, 3134, 3060, 1756, 2162, 994, 1752, 176,
	3114, 963, 963, 2700, 3082, 3076, 3059, 2108, 2108, 3060,
	2985, 2950, 3226, 2162, 2943, 792, 2158, 1436, 1437, 1438,
	1439, 2942, 2852, 2428, 2943, 2853, 176, 1419, 2429, 2842,
	2835, 902, 2843, 2108, 177, 2767, 1831, 178, 1756, 964,
	2008, 2005, 2707, 2507, 170, 2708, 2108, 1014, 2505, 1756,
	1451, 2108, 171, 1461, 2832, 1482, 1009, 1441, 1442, 1443,
	1419, 2100, 2504, 3077, 178, 2108, 1192, 2458, 2441, 1756,
	2108, 2442, 835, 148, 2708, 2430, 2325, 2175, 2108, 1835,
	2108, 177, 2161, 2155, 2149, 2162, 2108, 1756, 2245, 1186,
	667, 170, 2107, 1834, 2189, 2108, 1835, 1411, 1412, 171,
	1675, 2108, 1449, 966, 967, 2700, 2279, 2377, 177, 1755,
	1434, 2466, 2467, 2187, 1541, 58, 1170, 669, 170, 2128,
	148, 2689, 991, 1414, 176, 1356, 171, 59, 1010, 2127,
	2126, 2125, 2466, 2467, 2010, 2484, 2485, 2486, 1411, 1412,
	2690, 63, 1820, 2124, 1820, 968, 965, 148, 2466, 2467,
	1413, 2981, 791, 790, 789, 1695, 2359, 3035, 1433, 788,
	787, 1581, 178, 783, 1414, 176, 782, 1820, 781, 780,
	779, 69, 778, 76, 777, 2466, 2467, 776, 2997, 2412,
	775, 208, 774, 773, 1440, 772, 712, 711, 710, 709,
	208, 1413, 708, 2481, 707, 706, 705, 704, 703, 702,
	701, 75, 1435, 178, 2979, 700, 177, 699, 698, 2481,
	85, 208, 697, 696, 76, 695, 170, 694, 208, 693,
	1436, 1437, 1438, 1439, 171, 692, 691, 1452, 1191, 2687,
	1419, 690, 2004, 1010, 208, 1053, 208, 208, 1154, 208,
	1053, 208, 689, 688, 2472, 2300, 687, 177, 2944, 208,
	208, 1185, 679, 678, 1037, 638, 2167, 77, 1042, 2850,
	1441, 1442, 1443, 637, 596, 2472, 595, 594, 586, 585,
	584, 1419, 561, 560, 208, 559, 558, 542, 2550, 2100,
	1007, 2472, 198, 197, 196, 195, 148, 1827, 208, 1818,
	1154, 1154, 208, 208, 194, 208, 193, 192, 206, 191,
	1180, 1441, 1442, 1443, 1174, 190, 189, 208, 2472, 1164,
	1450, 807, 1891, 1434, 188, 208, 2487, 187, 1453, 186,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 208,
	208, 208, 208, 208, 1154, 1154, 185, 184, 183, 1154,
	977, 208, 1154, 208, 182, 181, 180, 179, 2482, 1025,
	2435, 1010, 2466, 2467, 1434, 1482, 1415, 1416, 1417, 1418,
	1420, 1421, 78, 2424, 2482, 2257, 2285, 2047, 2150, 1147,
	2141, 1292, 1700, 1512, 2045, 176, 1574, 2043, 2041, 1511,
	2039, 1588, 1145, 1498, 1841, 1176, 1168, 1440, 1044, 1154,
	116, 2482, 176, 998, 145, 81, 1512, 82, 1410, 1179,
	1515, 1184, 1511, 1190, 1046, 1435, 1139, 1144, 208, 3364,
	3345, 1022, 3272, 178, 3233, 176, 176, 3115, 1493, 3229,
	3227, 1223, 1226, 1510, 208, 1173, 1172, 580, 670, 583,
	178, 116, 3172, 3108, 3039, 3017, 3016, 1230, 1230, 208,
	2483, 3004, 1234, 3003, 3002, 3001, 1435, 139, 823, 2995,
	1840, 2994, 2993, 178, 178, 2992, 2483, 177, 2913, 2867,
	2866, 2864, 805, 2856, 1051, 2826, 2825, 170, 2824, 1162,
	1300, 2751, 2747, 1304, 177, 171, 2711, 1168, 117, 2545,
	1285, 2501, 1298, 2483, 170, 2472, 1307, 2492, 2465, 2462,
	149, 2461, 171, 1310, 1275, 1278, 148, 177, 177, 2459,
	2448, 2447, 2446, 1231, 2443, 1390, 2440, 170, 170, 2418,
	1391, 2417, 2410, 148, 1493, 171, 171, 2326, 2142, 2014,
	1322, 1410, 976, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1793, 1409, 1480, 2564, 148, 668, 2286, 3456,
	2468, 2469, 2470, 2471, 2473, 2474, 3428, 3427, 1494, 1761,
	1492, 2478, 2479, 2480, 1759, 3380, 997, 2776, 2477, 2475,
	2476, 2468, 2469, 2470, 2471, 2473, 2474, 1415, 1416, 1417,
	1418, 1420, 1421, 3335, 2477, 2475, 2476, 2468, 2469, 2470,
	2471, 2473, 2474, 3333, 3267, 1315, 3245, 1696, 2232, 3264,
	3263, 3262, 3258, 3252, 1383, 1389, 2373, 3221, 3220, 1981,
	1329, 2477, 2475, 2476, 2468, 2469, 2470, 2471, 2473, 2474,
	1396, 3168, 3145, 3094, 1388, 3120, 3119, 3098, 3095, 3089,
	3034, 3015, 2964, 2961, 2894, 2893, 176, 3107, 2882, 2881,
	2838, 2742, 208, 2701, 2662, 1386, 2633, 176, 805, 1411,
	1412, 2613, 2592, 2591, 2566, 2506, 1987, 785, 2439, 2438,
	2423, 2401, 784, 2266, 1516, 1513, 1411, 1412, 208, 1552,
	1505, 1502, 2171, 1392, 178, 1414, 1543, 2170, 208, 1053,
	208, 208, 208, 1406, 1407, 178, 2145, 2122, 1154, 575,
	208, 208, 1414, 2106, 575, 208, 1514, 2037, 1597, 1476,
	208, 1587, 1413, 1544, 1540, 1539, 1538, 1537, 2284, 1536,
	1535, 1534, 1533, 2466, 2467, 1670, 1532, 1530, 177, 1413,
	1529, 1528, 1527, 1526, 1525, 1053, 1524, 1562, 170, 177,
	1686, 1685, 1523, 1522, 1695, 1692, 171, 1521, 1582, 170,
	1520, 1519, 1518, 1495, 1600, 1477, 1475, 171, 1470, 1667,
	1698, 1021, 1411, 1412, 1549, 1550, 1012, 148, 2592, 1669,
	1842, 1004, 3036, 2989, 2863, 2845, 2841, 139, 148, 1506,
	1507, 2427, 2123, 2164, 3157, 3038, 2466, 2467, 1414, 878,
	2862, 1494, 1419, 2562, 1473, 1583, 1041, 1695, 805, 819,
	2616, 3265, 2671, 2470, 2471, 2473, 2474, 834, 3113, 1567,
	3078, 1039, 963, 1695, 2848, 1413, 2703, 2527, 1594, 2702,
	1035, 994, 1695, 994, 1673, 2921, 1032, 1574, 2445, 1598,
	1512, 1500, 1579, 2444, 1035, 2046, 1511, 1592, 1689, 1681,
	1595, 2006, 2044, 3205, 1672, 2042, 2040, 1040, 2038, 1542,
	1328, 1720, 2383, 1381, 2234, 2219, 2472, 1610, 1026, 1036,
	1154, 208, 3230, 3228, 2892, 1355, 770, 1053, 1694, 1576,
	1710, 823, 1570, 1839, 1569, 823, 3200, 580, 1568, 583,
	1599, 1691, 580, 1137, 583, 1666, 1566, 1565, 1137, 1564,
	1035, 2648, 1356, 2647, 1790, 1419, 1601, 2717, 1525, 3171,
	2628, 3431, 1738, 1525, 771, 2007, 208, 208, 3148, 2297,
	2778, 2022, 1033, 208, 2466, 2467, 3365, 2169, 1591, 1034,
	1531, 1687, 2433, 208, 1508, 1441, 1442, 1443, 1636, 2641,
	1781, 1207, 208, 3376, 208, 3373, 208, 2683, 2874, 2482,
	208, 3315, 2927, 2333, 1411, 1412, 991, 3404, 991, 2574,
	3403, 1319, 208, 3070, 1740, 1769, 628, 1742, 1690, 1195,
	1746, 3283, 1205, 2176, 1701, 1724, 764, 1794, 990, 3453,
	1414, 1879, 3195, 3366, 3191, 2008, 2005, 762, 1434, 766,
	2202, 760, 1352, 1877, 757, 2907, 992, 2904, 1750, 975,
	2193, 1753, 1154, 208, 1154, 2563, 2903, 1413, 1479, 1154,
	2871, 2191, 208, 2870, 208, 208, 2422, 1682, 2193, 1259,
	748, 2421, 1353, 2420, 1154, 1154, 803, 208, 1811, 2191,
	1032, 2419, 208, 1777, 1802, 2387, 627, 575, 208, 2576,
	208, 2483, 208, 1206, 208, 1843, 208, 1173, 1172, 580,
	2250, 583, 2244, 1041, 208, 2241, 1745, 2472, 208, 2222,
	208, 1754, 1780, 2157, 1032, 1962, 1387, 1035, 1169, 208,
	2033, 633, 2032, 1920, 1635, 2293, 1351, 2205, 754, 2010,
	1435, 1312, 1240, 1041, 1239, 1002, 1853, 1419, 208, 1238,
	2074, 1237, 1771, 1770, 208, 2718, 1218, 1889, 802, 803,
	1417, 1418, 1420, 1421, 1040, 1317, 1757, 2615, 1717, 3129,
	1809, 1849, 1726, 2221, 1053, 1607, 1033, 1441, 1442, 1443,
	1421, 2183, 1201, 1034, 2148, 805, 798, 3282, 1804, 1977,
	1730, 1807, 1216, 2212, 1040, 1837, 1714, 3178, 1985, 1888,
	2482, 1977, 3337, 1983, 1366, 1298, 2466, 2467, 634, 1001,
	1033, 1898, 1856, 1895, 2720, 1851, 1852, 1034, 2719, 1718,
	1719, 1845, 2468, 2469, 2470, 2471, 2473, 2474, 804, 1215,
	1434, 802, 1727, 1916, 1917, 1313, 3362, 2004, 2211, 999,
	1808, 2356, 626, 2010, 625, 1836, 1696, 1693, 2761, 2154,
	1993, 1994, 1857, 3423, 1844, 2884, 1022, 3395, 685, 1053,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 2165, 1993, 2019,
	1394, 2678, 2204, 629, 1203, 580, 2625, 583, 1865, 2238,
	2375, 2376, 3443, 1822, 1330, 1327, 1824, 1347, 1583, 1826,
	2474, 1893, 2483, 1829, 1020, 2022, 813, 2679, 1896, 1696,
	2232, 804, 208, 1858, 2055, 3259, 2059, 2059, 2072, 1731,
	1993, 3403, 1350, 2092, 2094, 1696, 2232, 1218, 2098, 2758,
	2620, 1035, 1435, 1892, 1696, 2232, 1610, 1610, 1897, 1819,
	1737, 1894, 785, 1053, 208, 785, 785, 1907, 1348, 2472,
	1908, 1909, 2010, 208, 2573, 1722, 208, 1380, 2179, 1053,
	1258, 3066, 2678, 1356, 1712, 1035, 2604, 3363, 3128, 805,
	2181, 2146, 2220, 801, 2575, 665, 2018, 1705, 1720, 1732,
	1733, 1706, 805, 2362, 1503, 2895, 805, 2031, 1728, 2560,
	2143, 2156, 2035, 2036, 2636, 1973, 2203, 1137, 1887, 2759,
	1890, 2905, 2182, 2192, 2281, 2242, 1712, 2603, 2398, 1989,
	1363, 2970, 562, 1919, 2129, 2180, 1729, 1971, 2139, 2140,
	3394, 2475, 2476, 2468, 2469, 2470, 2471, 2473, 2474, 758,
	2396, 2016, 2482, 1878, 1318, 636, 635, 823, 768, 208,
	758, 3361, 767, 1137, 759, 1876, 801, 758, 743, 3421,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 3139,
	2606, 1705, 2113, 1200, 2365, 1706, 3410, 1707, 3326, 3269,
	796, 1053, 963, 2083, 805, 994, 208, 2096, 2067, 1709,
	139, 2104, 2105, 2608, 208, 3179, 2437, 2013, 1469, 2119,
	2120, 2115, 2885, 2010, 208, 2118, 1364, 3298, 2023, 994,
	1734, 804, 3064, 2159, 2138, 3093, 568, 208, 1579, 2965,
	1154, 2859, 755, 1015, 3057, 1314, 3125, 3422, 1316, 1000,
	743, 1967, 208, 1053, 2483, 2389, 208, 208, 2607, 1968,
	2973, 1984, 1969, 1711, 2393, 1974, 686, 1976, 1514, 2166,
	744, 3054, 796, 1635, 1635, 2394, 3444, 3360, 2399, 3424,
	3402, 1707, 208, 3400, 208, 3393, 1335, 208, 2225, 2364,
	2194, 3210, 1855, 1709, 1735, 3097, 1365, 794, 2666, 743,
	1720, 2288, 208, 1783, 2174, 1137, 2361, 1551, 2267, 208,
	587, 208, 3055, 208, 1607, 1607, 2254, 570, 2147, 208,
	2251, 796, 208, 1820, 208, 2173, 208, 2224, 208, 208,
	991, 208, 1154, 1154, 1154, 1741, 1154, 2177, 2276, 2252,
	208, 208, 744, 208, 1506, 1507, 3124, 1711, 3065, 1393,
	208, 1013, 1008, 2239, 991, 2216, 1712, 795, 3296, 2206,
	2208, 2197, 505, 208, 1326, 208, 2345, 2347, 2915, 2321,
	2322, 2243, 1959, 1019, 2476, 2468, 2469, 2470, 2471, 2473,
	2474, 1610, 1145, 2363, 2214, 2247, 2610, 3297, 208, 208,
	208, 744, 208, 1402, 2223, 2290, 2317, 1168, 1554, 2971,
	2259, 3013, 2261, 1721, 2308, 1970, 2346, 2240, 2254, 1683,
	2254, 745, 564, 1401, 1972, 208, 1558, 2354, 2395, 2355,
	2233, 2235, 2236, 2237, 2264, 2815, 3184, 2397, 3438, 569,
	2188, 2332, 1173, 2255, 580, 1705, 583, 2280, 1554, 1706,
	1712, 2553, 139, 3183, 3126, 2299, 3166, 2299, 1561, 1469,
	2348, 3249, 2349, 3050, 1485, 2873, 3051, 2367, 1490, 2303,
	2667, 2587, 2583, 2320, 1558, 2323, 2360, 2116, 2536, 566,
	2579, 2310, 2289, 1168, 1168, 2318, 2271, 3069, 2319, 1298,
	2324, 2268, 1559, 745, 3068, 2334, 2314, 1803, 2315, 2757,
	2316, 1792, 1708, 3053, 1791, 1765, 1561, 1712, 1957, 3270,
	1400, 1960, 1680, 3306, 1558, 3056, 563, 588, 589, 2110,
	2226, 2415, 2416, 746, 208, 1556, 1903, 1884, 2390, 1676,
	1850, 2932, 3101, 1401, 2265, 1707, 2425, 1748, 1261, 3167,
	1559, 1402, 745, 518, 1168, 2370, 1561, 1709, 2594, 1336,
	2537, 3014, 1137, 567, 2372, 2593, 2381, 1747, 2114, 2840,
	1956, 747, 1557, 2520, 565, 1556, 684, 513, 677, 2816,
	2519, 1349, 2369, 3057, 2153, 2817, 2152, 1678, 2426, 2151,
	1559, 1246, 3437, 1244, 2112, 1744, 1708, 1232, 1560, 2111,
	2535, 2278, 990, 1679, 990, 746, 802, 3174, 1635, 3254,
	3054, 1711, 1557, 3047, 1233, 591, 590, 2388, 1718, 1719,
	992, 3086, 992, 1053, 2503, 805, 3045, 3052, 2508, 2523,
	1400, 2712, 3049, 2515, 2516, 1904, 520, 1801, 2638, 3407,
	2517, 3198, 208, 747, 3309, 3067, 1560, 1137, 3164, 1607,
	208, 3055, 793, 3019, 746, 3255, 2830, 208, 2027, 3409,
	208, 208, 1053, 3378, 3271, 592, 593, 2227, 2228, 1378,
	3266, 1053, 1360, 3144, 3012, 2909, 2432, 2495, 208, 2741,
	3165, 3048, 2557, 2460, 3175, 2400, 1560, 2531, 1358, 1346,
	2540, 2275, 747, 208, 2538, 1958, 2249, 2541, 2542, 1344,
	1342, 1340, 2554, 1338, 1712, 2218, 2172, 3310, 1332, 1242,
	2529, 208, 208, 208, 1589, 1586, 2530, 208, 3256, 2532,
	208, 1137, 1379, 2496, 1308, 798, 2571, 208, 208, 208,
	208, 208, 2558, 2358, 1703, 2544, 2357, 1137, 2351, 2577,
	1886, 208, 208, 208, 2561, 1862, 2549, 2569, 2509, 1668,
	208, 1517, 2526, 2548, 1311, 2498, 2499, 2500, 1222, 1875,
	2026, 3356, 208, 1154, 3303, 208, 2596, 3043, 2600, 2601,
	994, 1053, 2524, 682, 683, 675, 676, 2930, 1053, 2522,
	2588, 2890, 1245, 208, 1243, 994, 208, 208, 2888, 2872,
	2669, 2665, 3050, 756, 2650, 3051, 208, 2567, 2568, 1154,
	208, 2584, 1154, 1154, 1154, 2649, 2580, 2581, 2294, 208,
	2618, 2555, 2556, 2283, 994, 208, 1377, 2539, 2619, 1359,
	2655, 208, 2595, 208, 2598, 2651, 2572, 519, 2282, 514,
	208, 2262, 3053, 1833, 1832, 1357, 1345, 1610, 2578, 1830,
	1708, 1828, 1825, 1710, 3056, 1823, 1343, 1341, 1339, 1137,
	1337, 1821, 2514, 1154, 1154, 1331, 1241, 2634, 1812, 1762,
	2609, 208, 208, 1760, 1751, 208, 2674, 2685, 1710, 2699,
	1739, 2673, 1736, 1610, 2614, 2611, 2621, 2612, 2626, 1723,
	208, 515, 1053, 208, 208, 1053, 208, 1168, 2630, 2715,
	1713, 2543, 2624, 2224, 2627, 991, 2635, 2769, 1595, 1750,
	2551, 1137, 208, 1874, 972, 1750, 2631, 1780, 2632, 3214,
	991, 1404, 2629, 1596, 761, 763, 2682, 2379, 3404, 516,
	3329, 517, 3117, 3116, 1699, 2682, 910, 1197, 973, 2193,
	2656, 2193, 3216, 2658, 2659, 2660, 2210, 2193, 2941, 991,
	2191, 1720, 2209, 2622, 805, 1053, 3052, 2623, 2207, 1375,
	1376, 2691, 1859, 139, 2726, 2710, 1053, 1881, 208, 2725,
	3261, 2714, 2672, 3235, 3020, 204, 2744, 508, 509, 1411,
	1412, 526, 508, 526, 536, 541, 2698, 2229, 557, 2213,
	1408, 1411, 1412, 2684, 2705, 2706, 204, 2246, 521, 2380,
	2215, 3302, 3275, 3273, 1405, 1414, 2919, 2914, 2855, 2302,
	2722, 2097, 1671, 1602, 674, 3419, 2559, 2551, 204, 2727,
	2779, 974, 3436, 1482, 2753, 2754, 2755, 2030, 2729, 2466,
	2467, 1321, 1413, 1411, 1412, 2185, 2184, 1320, 2861, 2764,
	2723, 1168, 1916, 2785, 1413, 532, 2827, 2185, 2565, 2186,
	2034, 2028, 2001, 1362, 1635, 2749, 1361, 2990, 1916, 2795,
	2860, 208, 2756, 1480, 2760, 2762, 2763, 1478, 3445, 3246,
	3158, 2768, 3156, 3111, 3088, 208, 3037, 2960, 2949, 2780,
	2925, 1053, 2775, 2781, 2912, 2911, 1610, 2782, 2910, 2823,
	1635, 2887, 2693, 2694, 2695, 1607, 2696, 2697, 2844, 2692,
	2784, 208, 2849, 2254, 2663, 2661, 2792, 508, 508, 1986,
	2353, 2352, 2819, 2312, 2287, 204, 2794, 2263, 1988, 1873,
	1872, 1162, 1871, 2512, 1051, 1815, 1814, 1813, 1485, 1795,
	1773, 1607, 1772, 1768, 1767, 1610, 1610, 2820, 2525, 1766,
	1764, 1763, 1395, 1374, 139, 2831, 208, 2833, 2834, 1373,
	1333, 1610, 1610, 1270, 1269, 2868, 1268, 2896, 1267, 1266,
	1265, 1264, 1263, 1262, 1260, 1255, 1254, 2828, 1253, 1252,
	1251, 1214, 1213, 1212, 1211, 2079, 1210, 2906, 1209, 208,
	208, 208, 1610, 1208, 2766, 2851, 990, 1202, 1196, 1194,
	2908, 1193, 1018, 1017, 947, 2772, 1053, 208, 994, 994,
	857, 1154, 1674, 2865, 992, 2900, 769, 620, 753, 3177,
	990, 1368, 74, 1204, 607, 68, 2886, 3314, 208, 741,
	2876, 2602, 1861, 1334, 1863, 2945, 2528, 2858, 992, 2121,
	3295, 208, 208, 1154, 1154, 1154, 2998, 208, 208, 208,
	2436, 2934, 208, 208, 3241, 2922, 3138, 2025, 1499, 208,
	70, 2938, 2923, 2901, 2902, 2937, 845, 2224, 2956, 930,
	3044, 1137, 1053, 2875, 2338, 2337, 2933, 812, 1056, 1684,
	851, 1697, 2168, 2058, 1606, 854, 1608, 856, 855, 1609,
	1501, 853, 2928, 1605, 2277, 2306, 1249, 730, 2924, 731,
	1688, 1982, 2988, 1635, 2020, 2431, 1496, 2918, 825, 847,
	1137, 2017, 2935, 1011, 824, 2533, 2677, 208, 2854, 1137,
	2857, 2947, 2939, 2308, 3106, 2946, 1902, 2984, 2371, 1899,
	623, 2952, 2463, 991, 991, 2951, 1780, 2957, 2958, 2002,
	2959, 2975, 1003, 823, 1607, 2962, 2080, 2967, 2073, 2963,
	2972, 2069, 1635, 1635, 1382, 1471, 823, 2307, 2976, 1043,
	828, 1980, 1487, 2405, 2546, 2686, 2163, 1910, 1635, 1635,
	1782, 971, 970, 969, 2953, 2954, 2955, 994, 3320, 208,
	3317, 1677, 2178, 1463, 2652, 841, 2889, 1167, 2891, 1053,
	2513, 1053, 2713, 1607, 1607, 1219, 3260, 1462, 765, 1635,
	3251, 1030, 1029, 1028, 2586, 3442, 2883, 175, 172, 1607,
	1607, 208, 208, 208, 174, 173, 2898, 2637, 90, 1137,
	35, 3011, 17, 208, 115, 114, 1137, 113, 112, 208,
	111, 208, 110, 3025, 208, 208, 208, 1610, 109, 108,
	1607, 107, 3062, 106, 208, 208, 1154, 105, 1053, 104,
	1154, 3028, 103, 102, 101, 3022, 3023, 1005, 3024, 3027,
	100, 99, 98, 3029, 97, 3033, 674, 96, 208, 3072,
	95, 1053, 94, 93, 1154, 3030, 92, 3063, 91, 1906,
	553, 2548, 550, 50, 208, 49, 3084, 1016, 3073, 3074,
	3090, 3061, 1553, 89, 557, 88, 16, 3042, 33, 14,
	54, 55, 991, 13, 29, 208, 3040, 3041, 30, 80,
	204, 1053, 204, 204, 3103, 1159, 79, 204, 28, 3079,
	3105, 994, 3118, 15, 3071, 204, 1175, 27, 25, 994,
	1137, 11, 3091, 1137, 3083, 8, 2674, 7, 1053, 3102,
	10, 3112, 994, 1563, 12, 3104, 144, 143, 73, 3110,
	1199, 2836, 2837, 142, 72, 141, 140, 3099, 71, 3121,
	23, 3080, 9, 136, 1221, 3203, 2920, 67, 204, 204,
	138, 1159, 137, 64, 3150, 135, 1053, 3081, 134, 2682,
	65, 133, 132, 204, 208, 3127, 208, 3130, 1053, 208,
	1780, 1257, 66, 1137, 3087, 131, 21, 208, 5, 3092,
	3146, 53, 6, 3122, 1137, 204, 204, 204, 204, 1159,
	2716, 3135, 2075, 83, 84, 31, 3161, 557, 208, 204,
	3032, 62, 3109, 61, 3160, 2079, 2079, 3151, 3152, 60,
	208, 20, 52, 19, 166, 165, 164, 163, 208, 3155,
	3154, 159, 811, 1154, 1635, 158, 991, 162, 208, 3202,
	3194, 160, 161, 157, 991, 130, 3207, 168, 167, 3209,
	155, 152, 151, 154, 3180, 156, 153, 991, 3159, 208,
	208, 150, 3186, 169, 129, 57, 128, 3192, 3219, 127,
	3223, 3224, 126, 3212, 204, 1607, 125, 124, 3201, 208,
	56, 18, 2, 1, 0, 208, 3206, 0, 0, 0,
	204, 3213, 3215, 0, 2937, 208, 3217, 0, 3211, 0,
	1610, 3218, 0, 0, 0, 541, 0, 0, 3257, 1137,
	2512, 0, 3248, 0, 0, 0, 2079, 2079, 2079, 2674,
	3239, 0, 3244, 0, 3234, 0, 3247, 0, 3232, 0,
	1051, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 1154, 0, 0, 3268, 990, 208, 0, 992,
	0, 1154, 1154, 0, 0, 1610, 0, 3136, 0, 208,
	0, 208, 0, 3289, 992, 0, 0, 0, 3274, 0,
	0, 0, 3277, 0, 3281, 990, 0, 0, 0, 3299,
	0, 0, 3280, 208, 0, 3285, 3292, 3287, 3288, 208,
	208, 3286, 1053, 992, 3311, 3136, 3206, 0, 0, 0,
	208, 0, 3319, 3322, 3330, 1168, 0, 1919, 3323, 0,
	0, 3327, 0, 3293, 0, 3294, 0, 3332, 0, 3334,
	3316, 3341, 0, 0, 1137, 0, 0, 3324, 0, 0,
	1610, 3342, 208, 0, 0, 0, 0, 0, 0, 3336,
	0, 3338, 0, 3312, 3367, 0, 0, 0, 0, 3187,
	3188, 0, 3352, 3353, 3021, 0, 3355, 3354, 0, 0,
	0, 0, 3026, 0, 3383, 0, 3385, 3381, 208, 0,
	0, 0, 0, 0, 3391, 0, 3369, 0, 3390, 0,
	0, 3382, 0, 3392, 3384, 0, 3386, 208, 0, 3387,
	1137, 0, 3388, 3389, 0, 0, 2402, 2403, 508, 0,
	0, 0, 3401, 0, 3398, 3399, 0, 1635, 0, 0,
	0, 208, 3319, 0, 3405, 3322, 0, 3408, 3406, 204,
	3413, 204, 3415, 0, 204, 0, 3417, 0, 3418, 0,
	3412, 0, 0, 0, 1175, 0, 1159, 204, 0, 3426,
	3425, 1411, 1412, 3331, 0, 204, 1175, 526, 1607, 0,
	204, 1175, 0, 3433, 3435, 3432, 557, 3434, 0, 3439,
	0, 0, 1635, 2308, 3446, 3411, 3447, 1414, 0, 0,
	0, 3440, 3441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3450, 3451, 3452, 0, 0, 3454, 3455,
	0, 0, 0, 0, 1413, 3459, 0, 2489, 2490, 2491,
	3457, 0, 0, 1607, 0, 0, 0, 1137, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1919, 0, 0, 0, 0, 0, 0, 2079, 2079,
	0, 0, 0, 0, 0, 811, 0, 1635, 0, 811,
	0, 0, 2075, 2075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1137, 0, 0, 0,
	0, 1177, 0, 1181, 1419, 1187, 0, 0, 1607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 1443, 204, 2079, 2079,
	2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
	2079, 2079, 2079, 2079, 2079, 2079, 2079, 0, 2079, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2075, 2075, 2075, 0, 0, 0, 990,
	990, 0, 204, 204, 0, 0, 1137, 1434, 1306, 204,
	0, 0, 0, 0, 0, 1309, 0, 992, 992, 1800,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	204, 0, 204, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 1816, 0,
	0, 0, 0, 0, 0, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 1435,
	1159, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 204, 204, 0, 204, 0, 204, 0,
	204, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	1880, 0, 0, 0, 1882, 0, 1883, 1464, 1465, 1466,
	1467, 1468, 0, 0, 0, 204, 0, 0, 0, 2737,
	2738, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 541, 0, 0, 1484, 0, 0,
	557, 0, 0, 1497, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 0, 0, 0, 0, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1414, 0, 2796,
	2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
	2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 0, 2818,
	0, 0, 0, 0, 1413, 0, 0, 0, 0, 0,
	1137, 0, 1433, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 1547, 1547, 1547, 2075, 2075, 1447, 0, 0,
	0, 0, 990, 0, 1414, 0, 0, 0, 1460, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	992, 0, 0, 990, 1436, 1437, 1438, 1439, 992, 0,
	0, 1413, 0, 204, 1419, 0, 0, 0, 0, 1433,
	0, 992, 0, 0, 0, 0, 1430, 0, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 204, 0, 508,
	0, 811, 204, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 2075, 2075, 2075, 2075, 2075,
	2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
	2075, 2075, 2075, 2075, 0, 2075, 0, 0, 0, 0,
	0, 1436, 1437, 1438, 1439, 2466, 2467, 0, 2484, 2485,
	2486, 1419, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 2481, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2201, 0, 0, 0, 1449, 0, 0, 0,
	204, 1440, 2079, 0, 1434, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 1459, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 204, 0,
	0, 0, 204, 2256, 0, 2079, 0, 0, 2472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	1175, 0, 0, 204, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1800, 0,
	0, 0, 0, 0, 0, 2201, 1435, 508, 0, 2311,
	0, 0, 0, 0, 0, 204, 0, 0, 204, 0,
	204, 0, 204, 0, 204, 204, 0, 1159, 0, 0,
	0, 1452, 0, 0, 0, 0, 2330, 674, 0, 2201,
	0, 2482, 0, 0, 2079, 0, 204, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 1175,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 204, 204, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 2483, 0, 0, 0, 3007, 0, 0,
	3006, 0, 0, 1900, 0, 1905, 0, 0, 0, 0,
	0, 1912, 0, 0, 0, 0, 0, 0, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 3143, 1961, 0, 1963, 1964, 1965, 1966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 1990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 2015, 3169, 0, 0, 0,
	0, 0, 0, 0, 2478, 2479, 2480, 0, 0, 0,
	0, 2477, 2475, 2476, 2468, 2469, 2470, 2471, 2473, 2474,
	0, 0, 0, 0, 0, 0, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 0, 0, 0, 0, 2071, 0, 2082,
	2084, 2089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 2466, 2467, 508, 2484,
	2485, 2486, 0, 0, 0, 3238, 508, 0, 0, 0,
	0, 0, 0, 508, 0, 2980, 508, 508, 0, 2075,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1175, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 1175,
	0, 0, 0, 0, 0, 0, 0, 2481, 0, 0,
	0, 1414, 2075, 0, 0, 1460, 0, 2201, 2201, 204,
	0, 0, 0, 2201, 0, 0, 2590, 0, 0, 0,
	0, 0, 0, 2201, 2590, 2201, 2590, 2590, 1413, 0,
	0, 0, 0, 0, 0, 0, 1433, 204, 204, 204,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1159, 0, 0, 0, 0, 0, 0, 0, 2472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2640,
	0, 0, 2642, 2645, 0, 0, 0, 0, 0, 0,
	0, 2075, 204, 0, 0, 0, 204, 0, 1436, 1437,
	1438, 1439, 0, 0, 0, 204, 0, 0, 1419, 0,
	0, 1159, 0, 0, 0, 0, 0, 2201, 0, 508,
	2487, 0, 2258, 0, 2260, 0, 2201, 0, 0, 0,
	0, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2482, 0, 0, 0, 0, 204, 1800, 0,
	0, 1800, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 2721, 0, 0, 1159,
	204, 0, 204, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 204, 0,
	123, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 846,
	87, 0, 0, 0, 2483, 0, 0, 39, 120, 0,
	0, 0, 0, 0, 2777, 0, 0, 0, 0, 0,
	38, 0, 69, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 1435, 0, 0, 0, 42, 0, 0,
	0, 0, 75, 0, 0, 121, 0, 0, 0, 0,
	40, 85, 0, 0, 0, 76, 43, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 2385,
	2386, 0, 0, 0, 0, 2392, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 204, 204, 0, 0,
	0, 0, 0, 0, 2406, 2407, 0, 508, 77, 0,
	2015, 877, 0, 0, 0, 2478, 2479, 2480, 0, 2414,
	0, 508, 2477, 2475, 2476, 2468, 2469, 2470, 2471, 2473,
	2474, 0, 0, 0, 0, 0, 0, 0, 0, 786,
	0, 0, 0, 0, 0, 2434, 0, 1175, 806, 0,
	203, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	2449, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 581, 0, 0, 0, 0, 58, 0, 981, 0,
	2466, 2467, 0, 2484, 2485, 2486, 0, 0, 59, 0,
	0, 0, 557, 581, 0, 0, 0, 0, 0, 2746,
	0, 0, 63, 0, 0, 0, 0, 0, 2089, 2089,
	2089, 2466, 2467, 78, 2484, 2485, 2486, 0, 0, 0,
	0, 45, 0, 1547, 0, 2916, 204, 204, 0, 0,
	2745, 2518, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 2481, 0, 204, 48, 145, 81, 0, 82, 0,
	46, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	47, 0, 75, 0, 2201, 204, 0, 176, 0, 0,
	0, 85, 2481, 0, 0, 76, 0, 2330, 2330, 51,
	0, 0, 116, 674, 674, 2201, 0, 0, 1800, 1800,
	993, 119, 0, 0, 0, 204, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	811, 0, 0, 2472, 0, 0, 911, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 2605, 0, 0, 0, 0,
	0, 149, 0, 0, 2472, 0, 0, 0, 0, 177,
	0, 0, 0, 2999, 0, 205, 0, 0, 0, 170,
	0, 0, 0, 0, 2487, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 3, 0, 0, 0, 2487, 2482, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 2160, 0, 0, 204,
	0, 0, 0, 0, 0, 1175, 0, 204, 0, 0,
	2675, 0, 0, 78, 0, 0, 0, 2482, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2201, 2201, 2201,
	0, 0, 0, 0, 0, 145, 81, 0, 82, 1175,
	0, 0, 0, 0, 0, 2201, 0, 2590, 0, 0,
	1175, 1175, 204, 0, 0, 0, 0, 176, 0, 0,
	204, 204, 0, 0, 0, 0, 0, 0, 2483, 670,
	0, 0, 116, 0, 0, 0, 2728, 0, 0, 0,
	1912, 0, 0, 0, 3096, 0, 2732, 2733, 0, 0,
	2736, 0, 0, 0, 2739, 178, 0, 0, 0, 2483,
	2201, 0, 0, 2743, 0, 0, 0, 0, 0, 0,
	0, 0, 2750, 0, 0, 2518, 0, 0, 0, 117,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 2770, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 2786, 2787, 171, 2788, 2789,
	2790, 0, 0, 2791, 0, 0, 0, 2793, 0, 87,
	0, 87, 0, 87, 0, 0, 0, 0, 148, 2478,
	2479, 2480, 0, 0, 0, 0, 2477, 2475, 2476, 2468,
	2469, 2470, 2471, 2473, 2474, 0, 0, 0, 2821, 2822,
	2201, 0, 2590, 0, 0, 3163, 0, 0, 0, 0,
	2478, 2479, 2480, 204, 0, 1411, 1412, 2477, 2475, 2476,
	2468, 2469, 2470, 2471, 2473, 2474, 2839, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 2645, 0, 806, 87,
	0, 0, 0, 0, 204, 203, 87, 203, 203, 0,
	0, 0, 203, 87, 1175, 0, 0, 0, 1413, 0,
	581, 0, 0, 0, 0, 0, 1433, 0, 0, 2869,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 0, 0, 2877, 2880, 0, 0, 58, 0,
	209, 0, 0, 0, 0, 2777, 0, 0, 0, 0,
	59, 508, 0, 203, 203, 0, 0, 2897, 0, 0,
	0, 3163, 2740, 0, 63, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 1419, 0,
	203, 203, 203, 203, 69, 0, 0, 0, 0, 0,
	574, 0, 0, 0, 203, 0, 0, 204, 0, 0,
	0, 0, 0, 2590, 0, 0, 0, 0, 1441, 1442,
	1443, 1547, 574, 0, 75, 1175, 0, 1175, 786, 0,
	0, 0, 2948, 85, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 3307,
	0, 0, 0, 0, 0, 1175, 204, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 204, 0, 1489, 203,
	0, 1434, 0, 0, 0, 0, 0, 2977, 2978, 0,
	77, 0, 0, 2982, 2983, 203, 0, 0, 2986, 2987,
	0, 0, 0, 0, 0, 2991, 0, 0, 2777, 0,
	205, 1058, 205, 205, 1058, 0, 1058, 205, 0, 0,
	0, 0, 0, 0, 2996, 205, 0, 0, 0, 0,
	0, 3000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 3163, 0, 0, 1058, 1058, 205, 205,
	0, 0, 0, 1435, 0, 0, 0, 2466, 2467, 0,
	2484, 2485, 2486, 205, 0, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 205, 205, 87,
	1058, 1058, 1575, 0, 1578, 1058, 0, 0, 1058, 205,
	0, 0, 0, 0, 0, 0, 0, 145, 81, 0,
	82, 0, 0, 0, 2880, 0, 0, 0, 2481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 116, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 178, 0, 0,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2472, 117, 1411, 1412, 2880, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 1577, 0, 993, 0, 0, 203,
	0, 177, 3131, 3132, 3133, 0, 2488, 0, 1414, 0,
	0, 170, 203, 1577, 0, 0, 0, 0, 0, 171,
	581, 0, 0, 0, 0, 581, 0, 0, 3141, 3142,
	0, 2487, 0, 0, 0, 1413, 0, 0, 0, 0,
	148, 0, 3149, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2880, 58, 0, 0, 0, 0, 2735,
	0, 3185, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 811, 0, 0, 0, 1436, 1437, 1438, 1439, 0,
	63, 0, 0, 0, 0, 1419, 0, 0, 2880, 0,
	0, 2880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 2880, 2880, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 2483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 581, 76, 0, 1054, 0, 0, 1155, 0,
	1054, 3250, 0, 0, 3253, 0, 0, 0, 1434, 0,
	0, 806, 0, 0, 205, 0, 0, 0, 0, 1411,
	1412, 0, 0, 0, 0, 1058, 0, 205, 205, 0,
	0, 0, 0, 0, 1058, 205, 77, 203, 203, 0,
	205, 0, 0, 0, 203, 1414, 0, 0, 0, 0,
	1155, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 203, 0, 203, 0, 0,
	0, 1058, 1413, 0, 0, 0, 2478, 2479, 2480, 0,
	1433, 0, 1440, 2477, 2475, 2476, 2468, 2469, 2470, 2471,
	2473, 2474, 0, 0, 1155, 1155, 0, 0, 811, 1155,
	1435, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 786, 0, 0, 786, 786, 0, 0,
	0, 0, 0, 0, 0, 0, 2734, 0, 0, 3351,
	3351, 3351, 0, 203, 0, 0, 203, 0, 0, 0,
	0, 78, 1436, 1437, 1438, 1439, 0, 0, 3370, 1155,
	0, 0, 1419, 203, 0, 0, 0, 0, 581, 203,
	0, 203, 0, 203, 0, 203, 2880, 203, 2880, 0,
	0, 1979, 0, 145, 81, 0, 82, 0, 0, 0,
	0, 3351, 1441, 1442, 1443, 806, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 176, 1058, 205, 1483, 0,
	0, 0, 1483, 1058, 0, 0, 0, 670, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 178, 0, 1434, 0, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 0, 0, 0, 205,
	0, 0, 3351, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 205, 149,
	205, 986, 205, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	1578, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	199, 0, 87, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 1058, 0,
	1058, 0, 0, 0, 0, 1058, 0, 0, 205, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 1058, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 205, 205, 0, 205, 0, 205, 0,
	205, 0, 205, 1411, 1412, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 1414,
	0, 0, 993, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 1413, 0, 0, 1054,
	0, 0, 0, 0, 1433, 0, 0, 0, 1155, 574,
	1058, 1411, 1412, 0, 574, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 87, 0, 0, 0, 0,
	2466, 2467, 0, 2484, 2485, 2486, 0, 1414, 0, 0,
	87, 0, 87, 0, 0, 1054, 0, 0, 0, 0,
	2391, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 1413, 0, 1436, 1437, 1438, 1439,
	0, 0, 1433, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 2481, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 87, 203, 0, 0, 2384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 1436, 1437, 1438, 1439, 0, 0,
	0, 0, 0, 203, 1419, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 2472, 0, 0, 0, 0, 0, 1058,
	1155, 0, 0, 203, 1441, 1442, 1443, 1054, 203, 0,
	0, 0, 205, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 203, 2487, 203, 0, 203, 0, 203,
	203, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	1979, 203, 0, 0, 0, 0, 2482, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	203, 203, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 1440, 1155, 0, 1155, 0, 203, 0, 0, 1155,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	205, 0, 0, 0, 1155, 1155, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 1058, 574, 2483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 1058,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 205, 0,
	0, 981, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 1166, 0, 1054, 205, 0, 0, 205, 0,
	205, 0, 205, 0, 205, 205, 0, 0, 1058, 1058,
	1058, 0, 1058, 0, 0, 0, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 205, 0, 0, 2478,
	2479, 2480, 0, 0, 0, 0, 2477, 2475, 2476, 2468,
	2469, 2470, 2471, 2473, 2474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 205, 205, 205, 0, 205, 0,
	0, 0, 0, 993, 0, 87, 0, 87, 0, 1054,
	1274, 1274, 1274, 1166, 0, 0, 0, 0, 993, 0,
	0, 205, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 1577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 0, 0, 0, 0, 0, 1367,
	806, 657, 0, 0, 203, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 639, 87, 0, 0, 0, 0,
	0, 0, 203, 203, 203, 0, 0, 0, 0, 0,
	0, 1577, 1055, 0, 0, 1156, 0, 1055, 0, 0,
	0, 0, 0, 203, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 203, 0, 0, 0, 662, 0, 1156, 1156, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1054, 0, 0, 0, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1156, 1156, 0, 0, 0, 1156, 645, 0, 1156,
	646, 0, 203, 0, 0, 0, 0, 0, 1058, 0,
	1155, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1054, 0, 203, 661, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 205,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 1584,
	0, 0, 1155, 1155, 1155, 0, 1155, 87, 205, 1058,
	0, 0, 1593, 0, 0, 0, 0, 1058, 648, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 649, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 1058, 205, 0, 1058, 1058,
	1058, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 650,
	0, 0, 651, 0, 0, 0, 0, 0, 659, 0,
	0, 993, 993, 0, 0, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	1058, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 653, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 1058, 0,
	205, 1058, 205, 0, 0, 0, 656, 0, 981, 0,
	0, 655, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 1775, 203, 0,
	0, 0, 0, 0, 1787, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 1250, 0, 1806, 0, 1806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 1054, 0, 0, 0, 0, 0, 0,
	203, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 0, 0, 0, 0, 1058, 0, 0,
	0, 1054, 0, 1787, 0, 0, 1847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1860, 0, 0, 0, 0, 0, 1866,
	0, 1867, 0, 1868, 0, 1869, 0, 1870, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 993, 0, 0, 1156, 0, 0,
	0, 0, 993, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 1155, 0, 1577, 205, 205, 0, 0,
	0, 1054, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 1058, 205, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1155,
	0, 0, 1155, 1155, 1155, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 203, 203, 0, 0, 1058,
	1058, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 1155, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 1156,
	0, 1156, 1054, 0, 0, 1054, 1156, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 1460,
	0, 1156, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1979, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 1054, 0, 2144, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1058, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	205, 205, 1058, 0, 1058, 1451, 1058, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	203, 203, 0, 0, 0, 0, 0, 1058, 0, 0,
	1058, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 1054, 0, 87, 0, 0, 1055, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1166, 1058, 0, 0, 0, 1448, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2274, 0, 0, 0, 0, 1787, 0,
	1055, 0, 1058, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 1058, 0, 1055, 0, 0, 0,
	0, 203, 0, 205, 0, 0, 0, 1435, 0, 0,
	2313, 203, 0, 1274, 0, 1274, 1054, 1274, 0, 1166,
	1166, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 2350, 0, 0, 205, 0, 0, 0, 0, 1058,
	0, 0, 0, 1155, 1155, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 0, 0, 2366,
	1166, 2368, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2382, 0, 1055, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 0, 0, 2454, 0,
	0, 2455, 0, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 1058, 0,
	1055, 0, 0, 0, 0, 0, 0, 1058, 1058, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 1054,
	1414, 1054, 0, 0, 1460, 0, 205, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 1156,
	1156, 1156, 1430, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1155, 0, 1054, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 2582, 0, 1054, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 713,
	0, 743, 2617, 1166, 2274, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 718, 0, 0, 0,
	0, 0, 0, 1155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 2653, 0, 719,
	0, 2657, 0, 0, 721, 0, 0, 0, 750, 0,
	2664, 0, 1435, 0, 727, 728, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 722, 0, 0, 1452, 0, 0,
	1055, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 2709, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 1460, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 2724, 0, 1166, 1055, 0,
	0, 723, 1155, 0, 0, 0, 0, 1413, 0, 717,
	0, 1155, 1155, 2730, 0, 1433, 0, 0, 0, 0,
	0, 0, 1430, 0, 724, 725, 0, 0, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 1054, 2011, 726, 0, 2012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 745, 0, 0, 1419, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1156, 0, 0, 1156,
	1156, 1156, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 733, 0, 0, 0, 597, 0, 734, 0, 0,
	1156, 1156, 0, 0, 715, 0, 746, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	716, 0, 0, 1448, 0, 0, 0, 0, 0, 1055,
	735, 0, 1055, 0, 732, 0, 0, 0, 751, 752,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 599,
	618, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	600, 738, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 1055, 740, 0, 602, 0, 0, 0, 0,
	0, 2917, 0, 1055, 622, 1411, 1412, 1452, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 2929, 0,
	0, 603, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 604, 0, 0, 605, 628, 0, 0, 0, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	2966, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 0, 0, 0, 627, 3005, 0, 1055, 0,
	0, 0, 608, 0, 0, 0, 0, 0, 1436, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 0, 0,
	0, 1451, 609, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 630, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 611, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 1055, 0, 0, 0, 0, 1156, 1459,
	0, 0, 0, 0, 0, 0, 617, 3075, 0, 0,
	0, 0, 0, 0, 1448, 2274, 0, 0, 613, 0,
	0, 626, 0, 625, 0, 0, 0, 0, 614, 0,
	1156, 1156, 1156, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 621, 0, 0, 0, 0,
	632, 0, 629, 0, 0, 1440, 619, 0, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3170, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 1055, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 0, 1436, 1437, 1438, 1439, 2748, 0, 3208,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1156, 0, 1055, 1451, 1156, 0, 1461,
	3231, 1166, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 1156, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 3279, 0, 0, 1055, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	1440, 3313, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 3328, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0, 0,
	0, 0, 2457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 1156, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	213, 214, 215, 216, 217, 1059, 218, 1060, 1061, 1062,
	1063, 459, 1064, 1065, 1066, 1067, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 1068, 226, 227,
	228, 229, 230, 231, 1069, 1070, 232, 464, 465, 466,
	1071, 233, 467, 1072, 1057, 1073, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1074, 243, 0, 244,
	245, 246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078,
	1080, 1081, 1082, 249, 250, 251, 252, 253, 254, 468,
	469, 1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087,
	259, 260, 261, 1088, 262, 1089, 263, 264, 1090, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	1091, 210, 1092, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 1093, 281, 1094, 1095, 933,
	282, 283, 1096, 284, 474, 1097, 475, 285, 1098, 286,
	287, 288, 289, 476, 477, 478, 935, 290, 291, 1099,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	1100, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	1101, 481, 1102, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 1103,
	315, 314, 1104, 316, 483, 939, 317, 318, 940, 1105,
	319, 320, 1106, 1107, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 1108, 212, 942, 1109, 484, 485, 337, 338,
	1110, 339, 340, 341, 1111, 1112, 343, 344, 345, 1113,
	1114, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 1115, 355, 356, 488, 357,
	489, 358, 1116, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 1117, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 1118,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 1119, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 1120, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 1121, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 1122, 424, 425, 423, 1123, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 1124, 494, 495, 496, 497,
	1125, 439, 1126, 433, 434, 498, 435, 499, 1127, 436,
	437, 438, 0, 440, 441, 1128, 1129, 442, 443, 444,
	445, 447, 1130, 448, 1131, 446, 449, 450, 451, 500,
	501, 502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 2131, 0, 0, 0,
	0, 0, 0, 0, 2132, 213, 214, 215, 216, 217,
	1059, 218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066,
	1067, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 1068, 226, 227, 228, 229, 230, 231, 1069,
	1070, 232, 464, 465, 466, 1071, 233, 467, 1072, 1057,
	1073, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1074, 243, 0, 244, 245, 246, 1075, 932, 247,
	248, 1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250,
	251, 252, 253, 254, 468, 469, 1083, 255, 1084, 257,
	256, 1085, 258, 1086, 1087, 259, 260, 261, 1088, 262,
	1089, 263, 264, 1090, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 1091, 210, 1092, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	1093, 281, 1094, 1095, 933, 282, 283, 1096, 284, 474,
	1097, 475, 285, 1098, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 1099, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 1100, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 1101, 481, 1102, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 1103, 315, 314, 1104, 316, 483,
	939, 317, 318, 940, 1105, 319, 320, 1106, 1107, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 1108, 212, 942,
	1109, 484, 485, 337, 338, 1110, 339, 340, 341, 1111,
	1112, 343, 344, 345, 1113, 1114, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	1115, 355, 356, 488, 357, 489, 358, 1116, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 1117,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 1118, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 1119, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 1120, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 1121, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 1122, 424, 425, 423,
	1123, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	1124, 494, 495, 496, 497, 1125, 439, 1126, 433, 434,
	498, 435, 499, 1127, 436, 437, 438, 0, 440, 441,
	1128, 1129, 442, 443, 444, 445, 447, 1130, 448, 1131,
	446, 449, 450, 451, 500, 501, 502, 1132, 453, 452,
	503, 1133, 1134, 1135, 1136, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3031, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3137, 0, 213, 214, 215, 216, 217,
	1059, 218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066,
	1067, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 1068, 226, 227, 228, 229, 230, 231, 1069,
	1070, 232, 464, 465, 466, 1071, 233, 467, 1072, 1057,
	1073, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1074, 243, 0, 244, 245, 246, 1075, 932, 247,
	248, 1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250,
	251, 252, 253, 254, 468, 469, 1083, 255, 1084, 257,
	256, 1085, 258, 1086, 1087, 259, 260, 261, 1088, 262,
	1089, 263, 264, 1090, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 1091, 210, 1092, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	1093, 281, 1094, 1095, 933, 282, 283, 1096, 284, 474,
	1097, 475, 285, 1098, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 1099, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 1100, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 1101, 481, 1102, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 1103, 315, 314, 1104, 316, 483,
	939, 317, 318, 940, 1105, 319, 320, 1106, 1107, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 1108, 212, 942,
	1109, 484, 485, 337, 338, 1110, 339, 340, 341, 1111,
	1112, 343, 344, 345, 1113, 1114, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	1115, 355, 356, 488, 357, 489, 358, 1116, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 1117,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 1118, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 1119, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 1120, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 1121, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 1122, 424, 425, 423,
	1123, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	1124, 494, 495, 496, 497, 1125, 439, 1126, 433, 434,
	498, 435, 499, 1127, 436, 437, 438, 0, 440, 441,
	1128, 1129, 442, 443, 444, 445, 447, 1130, 448, 1131,
	446, 449, 450, 451, 500, 501, 502, 1132, 453, 452,
	503, 1133, 1134, 1135, 1136, 454, 455, 504, 456, 457,
	458, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2773, 0, 213, 214,
	215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459,
	1064, 1065, 1066, 1067, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 1068, 226, 227, 228, 229,
	230, 231, 1069, 1070, 232, 464, 465, 466, 1071, 233,
	467, 1072, 1057, 1073, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1074, 243, 0, 244, 245, 246,
	1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081,
	1082, 249, 250, 251, 252, 253, 254, 468, 469, 1083,
	255, 1084, 257, 256, 1085, 258, 1086, 1087, 259, 260,
	261, 1088, 262, 1089, 263, 264, 1090, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 1091, 210,
	1092, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 1093, 281, 1094, 1095, 933, 282, 283,
	1096, 284, 474, 1097, 475, 285, 1098, 286, 287, 288,
	289, 476, 477, 478, 935, 290, 291, 1099, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 1100, 934,
	297, 479, 299, 298, 300, 301, 302, 480, 1101, 481,
	1102, 304, 936, 482, 937, 305, 306, 307, 938, 308,
	309, 0, 0, 310, 311, 312, 313, 1103, 315, 314,
	1104, 316, 483, 939, 317, 318, 940, 1105, 319, 320,
	1106, 1107, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 941, 333, 334, 336, 335,
	1108, 212, 942, 1109, 484, 485, 337, 338, 1110, 339,
	340, 341, 1111, 1112, 343, 344, 345, 1113, 1114, 346,
	486, 943, 347, 944, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 1115, 355, 356, 488, 357, 489, 358,
	1116, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 1117, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 1118, 381, 945,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 1119, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 1120, 408, 388, 389,
	409, 946, 410, 492, 411, 412, 1121, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 1122,
	424, 425, 423, 1123, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 1124, 494, 495, 496, 497, 1125, 439,
	1126, 433, 434, 498, 435, 499, 1127, 436, 437, 438,
	0, 440, 441, 1128, 1129, 442, 443, 444, 445, 447,
	1130, 448, 1131, 446, 449, 450, 451, 500, 501, 502,
	1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454, 455,
	504, 456, 457, 458, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2765,
	0, 213, 214, 215, 216, 217, 1059, 218, 1060, 1061,
	1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 1068, 226,
	227, 228, 229, 230, 231, 1069, 1070, 232, 464, 465,
	466, 1071, 233, 467, 1072, 1057, 1073, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1074, 243, 0,
	244, 245, 246, 1075, 932, 247, 248, 1076, 1077, 1079,
	1078, 1080, 1081, 1082, 249, 250, 251, 252, 253, 254,
	468, 469, 1083, 255, 1084, 257, 256, 1085, 258, 1086,
	1087, 259, 260, 261, 1088, 262, 1089, 263, 264, 1090,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 1091, 210, 1092, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 1093, 281, 1094, 1095,
	933, 282, 283, 1096, 284, 474, 1097, 475, 285, 1098,
	286, 287, 288, 289, 476, 477, 478, 935, 290, 291,
	1099, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 1100, 934, 297, 479, 299, 298, 300, 301, 302,
	480, 1101, 481, 1102, 304, 936, 482, 937, 305, 306,
	307, 938, 308, 309, 0, 0, 310, 311, 312, 313,
	1103, 315, 314, 1104, 316, 483, 939, 317, 318, 940,
	1105, 319, 320, 1106, 1107, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 941, 333,
	334, 336, 335, 1108, 212, 942, 1109, 484, 485, 337,
	338, 1110, 339, 340, 341, 1111, 1112, 343, 344, 345,
	1113, 1114, 346, 486, 943, 347, 944, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 1115, 355, 356, 488,
	357, 489, 358, 1116, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 1117, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	1118, 381, 945, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 1119, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 1120,
	408, 388, 389, 409, 946, 410, 492, 411, 412, 1121,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 1122, 424, 425, 423, 1123, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 1124, 494, 495, 496,
	497, 1125, 439, 1126, 433, 434, 498, 435, 499, 1127,
	436, 437, 438, 0, 440, 441, 1128, 1129, 442, 443,
	444, 445, 447, 1130, 448, 1131, 446, 449, 450, 451,
	500, 501, 502, 1132, 453, 452, 503, 1133, 1134, 1135,
	1136, 454, 455, 504, 456, 457, 458, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2639, 0, 213, 214, 215, 216, 217, 1059,
	218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 1068, 226, 227, 228, 229, 230, 231, 1069, 1070,
	232, 464, 465, 466, 1071, 233, 467, 1072, 1057, 1073,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1074, 243, 0, 244, 245, 246, 1075, 932, 247, 248,
	1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251,
	252, 253, 254, 468, 469, 1083, 255, 1084, 257, 256,
	1085, 258, 1086, 1087, 259, 260, 261, 1088, 262, 1089,
	263, 264, 1090, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 1091, 210, 1092, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 1093,
	281, 1094, 1095, 933, 282, 283, 1096, 284, 474, 1097,
	475, 285, 1098, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 1099, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1100, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 1101, 481, 1102, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 1103, 315, 314, 1104, 316, 483, 939,
	317, 318, 940, 1105, 319, 320, 1106, 1107, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 1108, 212, 942, 1109,
	484, 485, 337, 338, 1110, 339, 340, 341, 1111, 1112,
	343, 344, 345, 1113, 1114, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 1115,
	355, 356, 488, 357, 489, 358, 1116, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 1117, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 1118, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 1119, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 1120, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 1121, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 1122, 424, 425, 423, 1123,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 1124,
	494, 495, 496, 497, 1125, 439, 1126, 433, 434, 498,
	435, 499, 1127, 436, 437, 438, 0, 440, 441, 1128,
	1129, 442, 443, 444, 445, 447, 1130, 448, 1131, 446,
	449, 450, 451, 500, 501, 502, 1132, 453, 452, 503,
	1133, 1134, 1135, 1136, 454, 455, 504, 456, 457, 458,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2024, 0, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 1160, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1758, 0,
	0, 0, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 1049, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 1059, 218, 1060, 1061, 1062,
	1063, 459, 1064, 1065, 1066, 1067, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 1068, 226, 227,
	228, 229, 230, 231, 1069, 1070, 232, 464, 465, 466,
	1071, 233, 467, 1072, 1057, 1073, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1074, 243, 0, 244,
	245, 246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078,
	1080, 1081, 1082, 249, 250, 251, 252, 253, 254, 468,
	469, 1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087,
	259, 260, 261, 1088, 262, 1089, 263, 264, 1090, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	1091, 210, 1092, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 1093, 281, 1094, 1095, 933,
	282, 283, 1096, 284, 474, 1097, 475, 285, 1098, 286,
	287, 288, 289, 476, 477, 478, 935, 290, 291, 1099,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	1100, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	1101, 481, 1102, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 1103,
	315, 314, 1104, 316, 483, 939, 317, 318, 940, 1105,
	319, 320, 1106, 1107, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 1108, 212, 942, 1109, 484, 485, 337, 338,
	1110, 339, 340, 341, 1111, 1112, 343, 344, 345, 1113,
	1114, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 1115, 355, 356, 488, 357,
	489, 358, 1116, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 1117, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 1118,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 1119, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 1120, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 1121, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 1122, 424, 425, 423, 1123, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 1124, 494, 495, 496, 497,
	1125, 439, 1126, 433, 434, 498, 435, 499, 1127, 436,
	437, 438, 0, 440, 441, 1128, 1129, 442, 443, 444,
	445, 447, 1130, 448, 1131, 446, 449, 450, 451, 500,
	501, 502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136,
	454, 455, 504, 456, 457, 458, 2000, 0, 874, 831,
	832, 833, 829, 830, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	1997, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 1998, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 1996, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 1999, 0, 0, 0,
	0, 0, 0, 844, 1995, 0, 0, 807, 842, 874,
	831, 832, 833, 829, 830, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 176, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 178, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 1299, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 170, 454, 455, 504, 456,
	457, 458, 818, 171, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 874, 831, 832,
	833, 829, 830, 843, 1488, 1486, 0, 0, 0, 842,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 176, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 178,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 1299, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 170, 454, 455, 504, 456, 457, 458,
	818, 171, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 1488, 2404, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 176,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 178, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 1299, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 170, 454, 455, 504, 456, 457, 458, 818, 171,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 874, 831, 832, 833, 829, 830, 843,
	1488, 1486, 0, 0, 0, 842, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 2085, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 2090, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 2086, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 2087, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 440, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 810, 842, 874, 831, 832, 833, 829, 830,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 822, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 844,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 3325,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 822, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	874, 831, 832, 833, 829, 830, 843, 844, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 3193, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 822, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 874, 831,
	832, 833, 829, 830, 843, 844, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 2940, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 1548, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 842, 874,
	831, 832, 833, 829, 830, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 2752, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 874, 831, 832,
	833, 829, 830, 843, 844, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	1914, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 1913, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 844, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 822, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 874, 831, 832, 833, 829, 830, 843,
	844, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 0, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 0, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 440, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 1548, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 842, 874, 831, 832, 833, 829, 830,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 2090,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 844,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	0, 0, 0, 0, 0, 0, 0, 844, 1486, 0,
	0, 2095, 842, 874, 831, 832, 833, 829, 830, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 0, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 0, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 440, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 2093, 842, 874, 831, 832, 833, 829, 830,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 2081, 842, 874, 831, 832, 833, 829,
	830, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 2070, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 0, 0, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 2068, 842, 2060, 831, 832,
	833, 829, 830, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 2063, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 2064, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 2065, 2062, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	2066, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 2061, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 2057, 842, 2060, 831,
	832, 833, 829, 830, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 2063, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 2064, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 2065, 2062, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 2066, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 2061,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 874, 831, 832, 833,
	829, 830, 843, 844, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 0, 0, 0, 0, 0, 1494,
	0, 844, 0, 0, 0, 0, 842, 874, 831, 832,
	833, 829, 830, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 1901,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 1189, 842, 874, 831,
	832, 833, 829, 830, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 1188, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 1183, 842, 874,
	831, 832, 833, 829, 830, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 1182,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 1178, 842,
	874, 831, 832, 833, 829, 830, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 874, 831,
	832, 833, 829, 830, 843, 844, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 874, 831, 832, 833,
	829, 830, 843, 844, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 3350, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 3349, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 844, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 3348, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 3350, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 3349, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 844,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 0, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 874, 831, 832, 833, 829,
	830, 843, 0, 2078, 0, 0, 0, 0, 2076, 2077,
	0, 0, 213, 214, 215, 216, 217, 844, 218, 0,
	0, 0, 842, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 0, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 3350, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 0, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 0, 926, 0, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 0, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 0, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 3349, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 995,
	0, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 842, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 922, 232, 464, 465, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 475, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 982, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 0, 212,
	942, 0, 927, 485, 337, 338, 0, 339, 340, 341,
	0, 987, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 491, 989, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 176, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 953, 0, 424, 425,
	423, 178, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 954, 435, 955, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 921, 448,
	0, 446, 449, 450, 451, 1299, 501, 502, 0, 453,
	452, 503, 995, 0, 0, 170, 454, 455, 504, 456,
	457, 458, 0, 171, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 0, 979, 0, 1580, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 922, 232, 464, 465, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 475, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 982, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 0, 212, 942, 0, 927, 485, 337, 338, 0,
	339, 340, 341, 0, 987, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 491, 989, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 176, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 953,
	0, 424, 425, 423, 178, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 954, 435, 955, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 921, 448, 0, 446, 449, 450, 451, 1299, 501,
	502, 0, 453, 452, 503, 0, 0, 0, 170, 454,
	455, 504, 456, 457, 458, 0, 171, 0, 0, 2511,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 1580, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 922, 232, 464, 465, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 475, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 308,
	309, 0, 0, 310, 311, 312, 313, 982, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 941, 333, 334, 336, 335,
	0, 212, 942, 0, 927, 485, 337, 338, 0, 339,
	340, 341, 0, 987, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 491, 989, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 954, 435, 955, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	921, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 0, 978, 0, 995, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 979, 923, 984, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 922,
	232, 464, 465, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	475, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 982, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 0, 212, 942, 0,
	927, 485, 337, 338, 0, 339, 340, 341, 0, 987,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	491, 989, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 954,
	435, 955, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 921, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	995, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 0,
	979, 0, 984, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 922, 232, 464, 465, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 475, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 982, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	212, 942, 0, 927, 485, 337, 338, 0, 339, 340,
	341, 0, 987, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 989, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 954, 435, 955, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 921,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 995, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 0, 979, 0, 984, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 922, 232, 464, 465, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 475, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 212, 942, 0, 927, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 989, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 954, 435, 955, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 921, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 807, 0, 1153, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 1475, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 176, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	178, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 1299, 501, 502, 0, 453, 452,
	503, 1296, 0, 1153, 170, 454, 455, 504, 456, 457,
	458, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 148, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 1057, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 0, 942, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 176, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 178, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 1299,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 170,
	454, 455, 504, 456, 457, 458, 0, 171, 0, 0,
	0, 0, 1153, 1152, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 1057, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 0, 0, 942, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 2704, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 995, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 0, 0, 0,
	1303, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	922, 232, 464, 465, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 475, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 212, 942,
	0, 927, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	954, 435, 955, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 921, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 807, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 176, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 178, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 1299,
	501, 502, 0, 453, 452, 503, 207, 0, 0, 170,
	454, 455, 504, 456, 457, 458, 0, 171, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 148, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 207,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 1585, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 207, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 2654, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 207, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 2309, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 681, 0,
	573, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	2776, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 579, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	212, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 578, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 572, 0, 573, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 582, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 579, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 578, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 573, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 582, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 579, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 1864, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 578, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 573, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 582, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 579, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 578, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 582, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 1325, 0, 1153, 1152,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 582, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 1324, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 1323, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 1294, 0, 1153, 1152, 0, 0, 0, 0, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 1057, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1293, 477, 478, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 0, 942, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 1290, 0, 1153, 1152,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1289, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 1228, 0, 1153, 1152, 0, 0, 0, 0, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 1057, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1227, 477, 478, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 0, 942, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 1225, 0, 1153, 1152,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1224, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 1146, 0, 1153, 1152, 0, 0, 0, 0, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 1057, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1148, 477, 478, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 0, 942, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 1153, 1152, 0, 0,
	0, 0, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 1057, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 935,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 934, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 936, 482, 937,
	305, 306, 307, 938, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	941, 333, 334, 336, 335, 0, 0, 942, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 946, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1153,
	1152, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	1057, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 935, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	936, 482, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 0, 0,
	942, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 1153, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 2202, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	2199, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 2344, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 2205, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	2341, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 2343, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 2340, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 2204, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	2342, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 2202, 233, 467, 0, 0, 2196, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 2199,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	2205, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 2195, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 2204, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 2203,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1369,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 1372, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 1370, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 1371, 452, 503, 1141, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1143, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 987, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1138,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1140, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 987, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1045, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1047, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 987, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 535,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 534, 217, 524, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	527, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	528, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 529, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 523, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 524, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 527, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 528, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	529, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 987, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 2273, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	212, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 1848, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 1786, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 1779, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 1778,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 1774, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 1776, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 1283, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 1282,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 1280, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 1279, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 1277, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 1276,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 1273, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 1272, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 1248, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 1163, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 1165, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 212, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 527, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 528, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 529, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 673, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 672,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	512, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 511, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	510, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 2136, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 207, 2331, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 2899, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 207, 2331, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 2328, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 1854, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 1846, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 555, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 1023, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 556, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 552, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 551, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 1798, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1797, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 555, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 545, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 556, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 552, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 1302, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 551, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 1287, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1286, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 1236, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1235, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 1220, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 1157, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 555, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 1023, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 556, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 552,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 551, 495, 496, 497, 0, 439, 0,
	433, 1024, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 1006, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 555, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 545, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 543, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 544, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 556, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 546, 386, 0,
	387, 391, 392, 552, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 547, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 551, 495, 496,
	497, 0, 439, 0, 433, 549, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 539, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 540, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 537, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 531, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 507, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 2599, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 2597, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	2585, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 2291,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 207, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 540, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 1810, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 0, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1256, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1198, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 961, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 0, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 0, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 0, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 0, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 1436,
	1437, 1438, 1439, 1433, 0, 0, 0, 0, 0, 1419,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428,
	1429, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1457, 0, 1458, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	1435, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1413, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1430, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 0, 2456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1419, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 1451,
	0, 0, 1461, 0, 2453, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 1435, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1413, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 1436, 1437, 1438,
	1439, 1433, 0, 0, 0, 0, 0, 1419, 1430, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	1451, 0, 0, 1461, 0, 2452, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 1435, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1413, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 1430,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 0, 0, 0, 0, 2451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1419, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 1451, 0, 0,
	1461, 0, 2012, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 1435,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 1452, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 1411, 1412, 1430, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 0, 1436, 1437, 1438, 1439, 1433, 0, 0,
	0, 0, 0, 1419, 1430, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461,
	3308, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 1436,
	1437, 1438, 1439, 1428, 1429, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1457, 0, 1458, 0, 0, 0, 0, 0, 0, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 1435, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1452,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0, 3304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 1451, 0, 0, 1461, 3237, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 1435, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1452, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 1436, 1437, 1438,
	1439, 1433, 0, 0, 0, 0, 0, 1419, 1430, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	1451, 0, 0, 1461, 3236, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 0, 3140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 3058,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0, 0,
	0, 1419, 1430, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 3010, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 1436, 1437, 1438,
	1439, 1428, 1429, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 3009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 3008, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 1435, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 1452, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 1411, 1412,
	1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439, 1433,
	0, 0, 0, 0, 0, 1419, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451, 0,
	0, 1461, 2974, 0, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1458, 0,
	0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 1435, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1452, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 2783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1419, 3397, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 1451, 0, 2408, 1461, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	2379, 0, 1414, 0, 0, 1435, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	1452, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2380, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 0, 0, 0, 0, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 1435, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1452,
	0, 0, 0, 0, 2103, 0, 1433, 0, 0, 0,
	0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 2102, 0, 0, 1414, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 1436, 1437,
	1438, 1439, 1433, 0, 0, 0, 0, 0, 1419, 1430,
	2496, 0, 1450, 2495, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 1451, 0, 0,
	1461, 0, 0, 0, 1441, 1442, 1443, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 1435,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 1452, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0,
	0, 0, 1419, 1430, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 1436, 1437,
	1438, 1439, 1428, 1429, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 2502, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 1447, 2771, 0, 0, 2497, 0, 0,
	1414, 0, 0, 1435, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1452, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1411,
	1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 2450, 0, 0, 1414, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439,
	1433, 0, 0, 0, 0, 0, 1419, 1430, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 2464, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1437, 1438, 1439, 0, 0, 0, 0, 1414,
	0, 1419, 0, 1460, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 1413, 1461, 0, 0,
	0, 1441, 1442, 1443, 1433, 0, 0, 0, 0, 1411,
	1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 0, 1447, 0,
	0, 1428, 1429, 0, 0, 1414, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439,
	1433, 0, 1459, 0, 0, 0, 1419, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1440, 1458,
	0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0,
	0, 0, 1419, 0, 0, 0, 1435, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 1451, 0, 0, 1461, 0,
	0, 1452, 1441, 1442, 1443, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 1632, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 1644, 1626, 1633, 1616, 1654, 1653, 0, 0,
	1618, 1617, 0, 0, 0, 0, 0, 0, 1664, 1665,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1655, 0,
	1651, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1648, 1646, 1647, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1637, 1631, 1639, 1641, 1642, 1643,
	1638, 0, 1636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1660, 1661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 0,
	0, 0, 1629, 0, 1630, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1645, 0, 0, 0, 1613, 1611, 1612, 1615,
	1614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1621, 1622, 1624, 1625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1640, 1623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1619, 0, 1656, 1657, 1658,
	1659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1627, 0, 0, 0,
	0, 1634, 1662,
}
var sqlPact = [...]int{

	4769, -1000, -1000, -1000, -1000, -1000, -1000, 225, 224, 223,
	222, 216, 215, 214, 197, 195, -1000, -1000, -1000, 192,
	-1000, -1000, 184, -1000, 183, 177, 175, 174, -1000, 172,
	163, -1000, -1000, -1000, -1000, 162, 161, 160, 49049, 1607,
	58560, 50288, 2031, 2114, 43672, 58145, 43257, 57730, 57315, 155,
	-1000, 56900, 154, 153, 151, -1000, -1000, 150, 1640, 35342,
	148, 147, 146, 1808, 145, 144, -1000, 142, -1000, 8933,
	1265, -1000, 141, 133, -1000, 7129, 418, 49873, 2056, 131,
	130, 34926, 2054, -1000, -1000, 1441, -1000, -1000, 124, 121,
	120, 109, 104, 103, 97, 95, 93, -1000, 91, 90,
	86, 85, 83, 78, 77, 76, 75, 74, 73, 72,
	70, 67, 66, 65, 64, -1000, 8607, 1376, 1292, 1289,
	1285, 1274, 1287, 791, 63, 61, 60, 58, 55, 52,
	-1000, -1000, 50, 48, 47, 46, -1000, 44, 41, 167,
	38, 37, 32, 31, 30, 1795, 2059, 1207, 639, 16740,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62650, 58969, 24, -19, 23, -1000, 2382, 850, 29523, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 437,
	-1000, -1000, -1000, 272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1383, 632, -1000, -1000, -1000,
	56485, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58969,
	-1000, 1597, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	627, -1000, 1596, 228, 1485, -1000, -1000, -1000, -1000, -1000,
	58969, -1000, -1000, 2661, 2660, 1532, 622, 56076, -1000, 1166,
	-1000, 743, 19381, -1000, 972, -1000, 19381, 267, -1000, -1000,
	-1000, -1000, -1000, 42842, 13676, 42427, 42012, 39119, 55661, 13251,
	48640, 987, -1000, -1000, -1000, -1000, -1000, -7, 36569, 58969,
	-1000, 264, -1000, -1000, -1000, -1000, -1000, -1000, 25656, 628,
	25205, 417, 24754, 394, -1000, -1000, -1000, -1000, 2659, 2657,
	882, 2656, 2327, 62241, 1327, 2655, 1210, 952, 827, 2651,
	2646, 2644, 2642, 2641, 2640, 2639, 1103, 55246, 2092, 38694,
	38269, 49049, 49049, 1900, 54831, -1000, -1000, 1021, 1014, -1000,
	-1000, -1000, -1000, 2187, 2071, 2069, 48225, -1000, -1000, 2638,
	2637, 2636, 2634, 2633, 61832, 1224, 2632, 1819, 2631, 2630,
	2629, 2628, 2627, 2626, 2624, 2622, 2621, -1000, 47810, 47395,
	46980, 46565, 54416, 37844, 37419, -1000, -1000, -1000, 31179, 5987,
	54001, 32031, 49049, -1000, -1000, 26094, -46, -1000, -1000, -1000,
	2055, -1000, 26094, -46, -1000, 2088, 1379, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1746, 1259, 2499, 36994, 1523,
	1098, 2186, 2618, 1784, 2181, 2179, 2178, 2177, 2167, 1240,
	1861, 1168, 1173, 2166, 2150, 2521, 1442, 41597, 2617, 2611,
	2356, 2147, 2053, -1000, -1000, -1000, -1000, 1161, -1000, -1000,
	-1000, -1000, -1000, 44081, -1000, -1000, 938, -1000, -1000, 938,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 985, 61014, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1280, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1674, -1000, 1508, -1000, -1000, 2610, 2059,
	1780, 2365, 2365, 2365, 2411, 413, 401, -1000, 167, -1000,
	-1000, 69097, -1000, -1000, 26094, 26094, 26094, 26094, 26094, 1452,
	-1000, 619, -1000, -1000, 657, -1000, 617, 570, -1000, -1000,
	-1000, -1000, -1000, -1000, 616, 2532, -1000, 859, -1000, -1000,
	-1000, -1000, 2485, -1000, 15851, -1000, -1000, -1000, 431, 614,
	26094, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 262, 720, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 542, 1333, 541, 541, 541, -1000, -1000,
	819, -1000, -1000, -1000, 304, 536, 281, 535, -1000, -1000,
	-1000, -1000, 2085, 613, 612, -1000, 611, 608, 604, -1000,
	-1000, -1000, 603, 597, 595, 594, 593, 592, 591, 588,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 815, -1000, 587,
	583, 582, 581, 580, 578, 577, 576, 575, -1000, -1000,
	-9, 58969, -1000, 437, -9, -1000, -1000, 574, -1000, 19819,
	19819, 19819, -1000, -1000, 1552, 26094, -1000, 1814, -1000, 377,
	-221, 709, 30349, -1000, 28678, 709, 663, 33272, -1000, 2046,
	-1000, -1000, 572, 260, -1000, -1000, 2045, 58969, 14099, 58969,
	49049, 49049, -1000, 2285, 26094, -1000, -1000, 39542, 36160, 58969,
	49458, 2449, 69550, 36160, 58969, 2083, -1000, -1000, -1000, 58969,
	-1000, 26094, -1000, 2448, 1132, -23, -1000, -1000, -1000, -1000,
	-1000, -1000, 1801, 1841, 893, 1660, 1046, -1000, 19381, 2318,
	-1000, -1000, -1000, 251, 14099, -1000, 1912, 2250, 1086, -1000,
	1654, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1283,
	2239, -1000, 1378, 2232, 1268, -1000, -1000, 792, 2230, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1533, -1000,
	-1000, 2346, -1000, -1000, 1725, 2224, -126, -1000, -1000, 39542,
	36569, -14, -1000, -1000, -54, -1000, 12826, 69097, -1000, -1000,
	-1000, 69097, 764, -1000, -1000, 2223, -1000, 69097, 759, -1000,
	-1000, 2219, -1000, -1000, -1000, 2609, -1000, 2608, 1752, 2607,
	2602, 2601, -1000, 1114, 1320, 2600, -1000, 2598, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46150, 45735, 826, -1000, 1548,
	-1000, -1000, 45320, 784, 1751, -1000, -1000, 1748, -1000, 828,
	-1000, 2597, 53586, 1940, 784, 1744, -1000, -1000, -1000, -1000,
	-1000, 49049, -1000, 49049, -1000, 49049, -1000, 1140, -1000, 61423,
	-221, -1000, -1000, -1000, -1000, -1000, 2218, 2595, 2594, 2593,
	-1000, 58969, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 166, 2211, -1000, -1000, 166, 2205, -1000, 166, 2202,
	-1000, 164, 2201, -1000, -1000, 1515, 2199, -1000, -87, 2194,
	-1000, -1000, -87, 2193, -1000, -27, -1000, -1000, -1000, 850,
	-1000, 30764, 53171, 39542, 763, 631, 69097, -1000, 39542, 69097,
	-1000, 45320, -1000, 52756, 44911, -1000, -1000, 1045, 1818, -1000,
	-1000, -1000, -1000, 39542, 39542, -1000, 52341, -1000, 1450, 1205,
	2358, 49049, -1000, -1000, 2079, -1000, 35751, 49049, -1000, 49049,
	-1000, 49049, -1000, 49049, -1000, 49049, -1000, 2590, 2588, 2587,
	2237, 1291, 1279, 58969, -1000, -1000, 2369, 58969, -1000, 58969,
	-1000, -1000, -1000, 1799, -1000, -1000, -1000, -1000, 49049, -1000,
	-1000, -1000, -1000, -1000, -1000, 2074, -1000, 1262, -1000, 1031,
	-1000, -1000, 189, -1000, -1000, -23, -1000, 61014, -1000, -1000,
	2059, 1780, -1000, 58969, -1000, -1000, -1000, 2059, 1642, 1890,
	24303, 1876, 26094, 167, -1000, -1000, 167, 167, 18943, -1000,
	-1000, 69550, 69550, 14099, 996, 26094, 26094, 26094, 26094, 26094,
	26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094,
	26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094,
	26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094, 26094,
	1831, 26094, 984, 26094, 26094, 26094, 26094, 1516, -1000, -1000,
	1405, 480, 1412, -1000, 2492, 2492, 2492, 69202, 69202, 527,
	2586, 657, -1000, 26094, -1000, -46, 26094, 14524, -1000, 2514,
	1052, -1000, -1000, 401, 8363, 1683, -1000, 399, 14975, -1000,
	-1000, -1000, 15851, 570, 23852, 26094, 804, 69097, 12403, 2101,
	1982, -1000, 2513, -1000, -1000, 2489, -1000, -1000, -1000, -1000,
	2489, 995, 993, 2512, -1000, 2489, 2489, 568, 708, 706,
	705, 702, 695, 26094, 26094, 26094, 26094, 26094, 26094, 26094,
	26094, -1000, 23414, 22963, 22512, 27408, 22061, 26094, 16289, 21610,
	21159, 58969, -9, 2447, 26094, 156, -1000, 67570, -1000, 156,
	156, 564, -28, 69097, 1849, 1849, 29936, 1766, 1461, 1461,
	1461, -1000, 558, 644, 21, 9, 8, -1000, -1000, 7,
	-3, 709, 9849, 50697, 1472, 709, 709, 249, 278, 398,
	28265, 1814, 50697, -1000, -1000, 49049, 557, 14524, 14099, 1069,
	-36, 247, 1874, 1871, 1869, -1000, 1171, -37, 763, 982,
	-74, -1000, 4979, -38, -1000, 1060, -1000, -1000, -1000, -1000,
	137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 812, 548, 543, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 542, 1333,
	541, 541, 541, -1000, -1000, -1000, 304, 536, 281, 535,
	-1000, -1000, -1000, -1000, -1000, -1000, 2037, -54, 49458, 725,
	-43, 888, -23, -1000, 938, -1000, 1297, -1000, -1000, -1000,
	-1000, -1000, -1000, 1057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2528, -1000, 2497, -1000, -1000, 2511, -10, -1000, -1000,
	14099, -1000, -29, 1252, -1000, 41182, 2351, 2345, 2339, 1138,
	-1000, 1080, 2410, 44081, 2433, 28, -1000, 2036, -1000, -1000,
	739, 1236, 978, 44081, 1378, -1000, 69550, -1000, 1916, 2408,
	1124, 1115, 1124, 1124, 1099, -1000, 44081, 974, 1362, 39542,
	-1000, 971, -1000, -35, 2430, 1, -1000, 2027, 969, -1000,
	-1000, 49049, 14099, 701, -14, 36569, 58969, 244, -1000, 26094,
	-46, 26094, -46, -1000, -1000, 2191, -1000, -1000, -1000, 2585,
	1264, 1815, -1000, -1000, -1000, 534, 1738, 1378, 1733, -1000,
	-1000, 44496, 2022, 58969, 1888, -17, 49049, -1000, -1000, 1361,
	-1000, 2188, 2173, 579, 2582, -1000, 1546, 1729, -1000, -1000,
	-1000, 60605, 1006, 2168, 801, 126, 2445, 126, 34098, -1000,
	58969, -1000, 58969, -1000, -1000, -1000, 2581, -1000, 49049, -1000,
	-1000, 49049, -1000, 49049, -1000, 49049, -1000, 49049, 49049, -1000,
	58969, 39542, 39542, 39542, 5521, 40364, -44, 397, -1000, 51932,
	58969, 848, 40773, -207, 763, 701, -1000, 701, -1000, 49049,
	2072, -1000, -1000, -1000, -1000, -1000, -1000, 2579, 2578, -1000,
	-1000, -1000, 58969, -1000, 58969, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1144, -1000, 2070, -1000, 2067, -1000,
	35, -1000, -1000, -1000, -1000, -1000, 1517, 49049, 49049, 49049,
	-1000, 44081, -1000, -1000, 2059, -1000, -1000, -1000, -1000, -1000,
	69097, -1000, 477, -1000, -1000, 69097, 1203, 1895, -1000, 1895,
	-16, -1000, 67225, 1840, 49049, -1000, -1000, -1000, -1000, -1000,
	736, 958, 958, 975, 975, 975, 975, 2438, 1061, 457,
	3400, 213, 213, 213, 213, 213, 213, 213, 213, 1243,
	246, 246, 1243, 1243, 1243, 1243, 1243, 246, 246, 246,
	213, 213, 213, 69202, 69268, 6550, 26094, 26094, 954, 1393,
	480, 6482, 26094, 3820, 3820, 3820, 3820, -1000, 1529, -1000,
	-1000, -1000, -1000, 2016, 532, 27408, 27408, -1000, -1000, -1000,
	-1000, 15413, 26094, -1000, -1000, -1000, -1000, 20708, -1000, -1000,
	66667, -245, 392, -200, 56, -1000, 26094, 26094, 26094, 391,
	-1000, 389, -1000, -1000, 950, -1000, 942, 940, 935, -1000,
	531, 242, 26094, 58969, -1000, 64169, 643, -95, -1000, -45,
	1118, -1000, 26094, 229, -1000, 1451, 530, 529, 386, -52,
	-1000, 384, 717, 712, 382, 381, 380, 26094, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 68818, 64103,
	63822, 63541, 7888, 63475, 9349, -53, 379, -1000, 2014, -200,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 371, -1000, 369,
	-1000, 68752, -200, 368, 5766, -1000, 27408, 27408, 27408, -1000,
	367, -1000, 67504, -1000, 68473, 20270, 20270, 20270, 361, 68194,
	26094, -200, -58, -1000, -72, -1000, -1000, 526, -77, 801,
	19819, 29107, 14099, -1000, 801, 801, 26094, -1000, 26094, 1859,
	-1000, -1000, -1000, 1852, 1854, 1849, 29936, -1000, -1000, -1000,
	-1000, 50697, 677, 709, -1000, -1000, -1000, -1000, -1000, 50697,
	-1000, 2485, 1933, -1000, -1000, -1000, 58969, 437, -1000, 50697,
	50697, 14099, 709, -1000, 359, 32444, 56, 157, -1000, -1000,
	14099, 1936, 1936, 1936, -1000, -1000, 2013, 58969, 2462, -1000,
	1342, -1000, 69550, -1000, 656, 857, -1000, 2510, 525, -1000,
	2489, 2489, 58969, 110, 19381, -1000, 938, -1000, -1000, 1189,
	-1000, 1313, -1000, 962, -1000, -1000, -1000, 19381, -1000, 1668,
	58969, 58969, 49049, -1000, -1000, 1719, 60196, 1718, 69550, 58969,
	-1000, -1000, 524, 523, 1839, 1832, 58969, 58969, 59787, 59378,
	58969, 1346, 26094, 1469, 1584, -46, -1000, -46, 522, 1002,
	49049, 49049, 49049, 1258, -1000, -1000, -1000, -1000, -1000, 49049,
	-1000, -1000, 2509, -1000, 1124, -1000, -1000, -1000, 1124, 1378,
	1214, 49049, 39542, 790, 58969, 1364, -46, -1000, -46, 517,
	14099, 1322, -1000, 1946, -1000, -1000, -1000, 11980, 69097, -1000,
	69097, -1000, 58969, -1000, 825, 58969, 40773, 781, 2165, -1000,
	1378, 2154, 437, -1000, -1000, 33685, -54, 763, 39542, 49049,
	-17, 39542, 39542, 39542, 2573, 515, 2572, -1000, 49049, 2151,
	1543, 1717, 2155, 680, 58969, 1470, -1000, 26094, 1282, -1000,
	32859, 837, 58969, 1201, 106, -1000, -1000, -1000, 19, 58969,
	-1000, 2567, -1000, -1000, 166, 166, 166, -1000, 164, 1515,
	-1000, -87, -87, -1000, -1000, 5521, 763, -18, 514, -1000,
	697, 694, 31608, 39542, -78, -1000, -1000, -1000, -1000, -1000,
	49049, 58969, 629, 1934, 58969, -1000, 763, -1000, -1000, 787,
	-1000, 1029, -1000, -1000, -54, -54, -1000, 1121, 1117, 58969,
	-1000, 14099, 58969, 49049, 14099, 49049, -1000, -1000, -1000, -1000,
	-1000, 1203, -1000, 26094, -1000, -1000, -1000, 18943, -1000, -1000,
	-1000, 49049, -219, 26094, 26094, 6128, 5901, 26094, 27408, 27408,
	-1000, 26094, 5454, -1000, -1000, -1000, -1000, -1000, 2010, 512,
	26094, 69550, 5030, 4999, -1000, 352, 9034, 1243, -1000, 26094,
	-1000, 351, 18505, -1000, 67849, -22, -22, -1000, 2527, 1755,
	1396, 1255, 1156, 2501, 11557, -200, -85, -1000, -1000, 654,
	-1000, 2261, -1000, 26094, 68128, 11134, -1000, 34511, 802, 1470,
	-1000, -1000, 2489, 718, -1000, -1000, -1000, 718, -1000, 66601,
	69550, 69550, 26094, 26094, -1000, 26094, 26094, 26094, -1000, -1000,
	26094, -1000, -1000, 2008, 26094, -1000, 69550, 69550, 27408, 27408,
	27408, 27408, 27408, 27408, 27408, 27408, 27408, 27408, 27408, 27408,
	27408, 27408, 27408, 27408, 27408, 27408, 27408, 1816, 27408, 2488,
	2488, 2488, -1000, 2057, 2008, 26094, 26094, 69550, 348, 346,
	345, -1000, 26094, -200, -1000, -1000, 5521, -1000, 1980, -1000,
	-202, -1000, 1814, -1000, -1000, 1980, 1980, -90, 69097, 29936,
	29936, -1000, 511, 26094, 1848, -1000, 638, -1000, -91, -1000,
	50697, -1000, 637, -242, -1000, 692, -1000, -1000, -1000, 437,
	-1000, -1000, -1000, 138, 50697, -1000, -98, -1000, 2444, 343,
	14099, -1000, -1000, -1000, -1000, -1000, -1000, -46, -54, 1483,
	2525, -1000, 2500, 653, 636, 341, 2489, 340, 339, -54,
	58969, -1000, -23, -1000, -1000, -1000, 26094, -1000, -1000, 2343,
	932, 929, -1000, 2149, -1000, 1712, -1000, 841, -1000, 1229,
	-1000, 26094, 26094, 510, 509, 1382, 2559, 2148, 1515, 2141,
	1515, -1000, -1000, 750, -1000, 69097, 506, 505, -1000, -29,
	1234, -1000, -1000, 26094, 26094, 51519, -1000, 2346, 2346, -1000,
	925, -1000, -1000, -1000, 1378, 916, -1000, -1000, 1358, -1000,
	-1000, -1000, -1000, 26094, -1000, -35, 914, 763, 2006, -1000,
	2556, 2553, 2552, 338, -49, -1000, 2443, 1615, 58969, 49049,
	49049, 2442, 715, -1000, 2485, -1000, -1000, -1000, -1000, 784,
	-1000, -1000, 2548, -1000, 847, 14099, 49049, 2137, 1809, 680,
	39955, -1000, 784, 1890, -1000, 69097, -1000, 1201, 18054, 2342,
	-99, -1000, 127, -1000, -1000, -1000, 801, 34098, 29936, 26094,
	2546, -109, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	51110, 51110, 39542, 39542, 39542, 763, 58969, 58969, 40773, 2545,
	504, 58969, 58969, 503, -1000, -1000, -1000, 1480, 49049, -1000,
	-1000, 782, -1000, -1000, 1369, 1650, 1369, 1504, 66322, -1000,
	2362, 14099, 2450, 3820, 26094, 26094, 416, 4515, 451, 3820,
	26094, 26094, 69550, 4554, -110, 26094, 26094, -1000, 26094, 635,
	69097, 2522, 26094, 335, 332, 331, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 329, -1000, -1000, -1000, -1000, -1000,
	69097, 26094, 57, -1000, -1000, -1000, 63059, -1000, 26094, 325,
	324, -1000, -1000, -1000, 323, 321, 8703, 3897, 66043, 65977,
	65698, 69097, 2057, 69097, -1000, -1000, 671, 671, 1085, 1085,
	1085, 1085, 2488, 1435, 1022, 1213, 467, 467, 467, 494,
	430, 430, 467, 467, 467, 2005, 1792, 502, 6569, -1000,
	-1000, 69097, 69097, 316, -1000, -1000, -1000, -200, 315, 1974,
	2395, -1000, 29936, 1974, 1974, -1000, -1000, 1854, 58969, 69097,
	29936, -221, -1000, 2485, -1000, -1000, 1933, -1000, 10284, -1000,
	14099, -1000, -1000, 32444, -1000, 501, -1000, 36, -1000, -1000,
	-1000, 634, 2544, 648, -1000, 314, -1000, -1000, -54, 69097,
	58969, 58969, 58969, 2127, -1000, 2029, -1000, 65419, -114, -1000,
	67225, 26094, 58969, -1000, 1489, 1882, 871, -1000, 58969, -1000,
	58969, -1000, -1000, 58969, 58969, 49049, -115, 69097, -60, -1000,
	688, -1000, -1000, 49049, 49049, 39542, -116, 14099, -1000, 39542,
	-1000, -1000, -1000, 1921, -46, -1000, 2542, 500, 1378, -46,
	-1000, 1476, -1000, 495, -1000, -1000, 499, 58969, 1540, 498,
	14099, 1811, 680, 39955, -1000, 1006, 1201, -1000, -1000, -62,
	-1000, 508, -46, 58969, 2541, 1470, -1000, -69, 69097, -1000,
	686, -1000, -120, -1000, -1000, 297, -1000, 2308, 2307, -1000,
	-1000, 26094, 497, 496, 58969, 1669, -1000, -1000, -1000, -1000,
	14099, 1232, -1000, -1000, -1000, -1000, 2362, 3820, 3820, 26094,
	26094, 26094, 3820, 4554, -127, -1000, 3820, 3820, -200, -1000,
	-1000, 67849, -1000, -1000, -1000, -1000, 69097, 10711, 1417, -1000,
	65353, -1000, -1000, -1000, -1000, 26094, 26094, -1000, -1000, -1000,
	-1000, -1000, 27408, 2004, 493, 69550, -1000, -1000, 799, 26094,
	26094, 1814, 799, 799, -1000, -128, -1000, 709, -1000, -1000,
	-1000, 2485, 36, -1000, 2540, 14099, 647, -1000, 2538, -1000,
	-1000, -1000, -1000, 58969, -1000, 58969, -1000, 14099, 58969, 1996,
	1700, -1000, -1000, 1823, 492, 27408, 49049, 760, 1983, 1355,
	26094, -1000, -129, -134, 1697, -1000, -1000, 1680, 26094, -1000,
	69550, 1515, 1515, -135, -139, -1000, 903, 58969, 17616, -1000,
	-1000, -1000, 901, -1000, -87, 1364, 1951, 766, -1000, 40773,
	781, -1000, -1000, 771, -1000, 26094, -1000, 49049, 26094, 1536,
	-1000, 680, 39955, -1000, 2155, -1000, 2279, 58969, 2335, -1000,
	-1000, -1000, 1890, 480, -1000, 763, 479, 478, -141, 26094,
	26094, -146, -111, -1000, 724, 723, -1000, -1000, 49049, 49049,
	-1000, 3820, 3820, 3820, -1000, 294, -1000, -1000, 1470, 2394,
	-1000, 65074, 64795, 4024, 27408, 69550, -147, -1000, 58969, 69097,
	-200, -1000, -1000, -1000, 50697, 468, -1000, 2537, -1000, -1000,
	1710, -1000, -1000, -1000, 58969, 1708, -1000, -1000, 26094, 6569,
	474, 26094, -1000, -1000, 1908, 2030, 1921, 473, -1000, -1000,
	-1000, -1000, 1250, -1000, -1000, 69097, 2376, -1000, -1000, 472,
	471, 470, 679, 2001, -1000, 465, 781, -1000, 1429, -1000,
	1904, 292, 2439, 771, -1000, 2463, -1000, -151, 847, -152,
	49049, 39955, -1000, 1809, 1027, -156, 58969, 1201, -1000, -1000,
	39542, 39542, 1355, -157, -158, -1000, 1669, -1000, 58969, -1000,
	58969, -1000, -1000, -1000, 1569, 26094, -1000, -1000, 4024, -162,
	-1000, -173, -1000, 2437, -1000, -1000, -1000, -1000, -1000, 2124,
	64729, 1775, 58969, 64450, 2019, -1000, -1000, 1364, 58969, 49049,
	846, 14099, 1369, 1369, 26094, 17178, 1428, 26094, -1000, 49049,
	-1000, 2305, 1921, -46, -1000, -1000, 1355, 464, 1355, 454,
	-1000, 1811, 1102, -1000, 801, -1000, -1000, -163, -164, 1921,
	1355, -1000, -1000, -169, -174, 290, 26970, 26970, 26970, -200,
	-1000, 58969, 438, 2109, -1000, 1522, 1326, 289, 867, -1000,
	-1000, 1983, -175, 437, -1000, 26094, -1000, -179, -1000, 835,
	-183, -1000, 833, -184, -1000, 1994, -1000, -185, 436, -1000,
	1364, 766, 1921, 26094, 1921, 26094, -1000, 34098, -1000, 763,
	763, 1364, 1921, -1000, -1000, -1000, -1000, -1000, 27831, 1505,
	1180, 66946, -1000, -1000, -1000, -1000, 58969, -1000, 1528, 1525,
	1151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1775,
	69097, -1000, 1369, 1949, -1000, 1369, 1990, -1000, 1426, -1000,
	58969, 781, -1000, 1364, -189, 1364, -201, -197, -1000, -1000,
	-1000, 1364, 2455, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2292, -1000, 860, 1439, 1439, 1522, -1000, 428, -1000, 427,
	-1000, -205, -1000, 793, 1355, 793, 1355, -1000, -1000, 26532,
	-1000, 2470, -1000, -1000, 1826, -1000, 1983, 26094, 26094, 1468,
	-1000, 2536, 1921, -1000, 1921, -1000, -1000, -1000, -1000, -1000,
	-209, -216, -1000, -1000, -1000, -1000, 1364, 1364, 1364, 898,
	793, 793, -1000, 420, -1000, -1000, 26094, -227, 1364, -1000,
}
var sqlPgo = [...]int{

	0, 3153, 3152, 3151, 3150, 3147, 3146, 3142, 3139, 3136,
	3135, 3134, 3133, 3131, 3126, 3125, 3123, 3122, 3121, 3120,
	3118, 3117, 3115, 3113, 3112, 3111, 3107, 3105, 3101, 3097,
	3096, 3095, 3094, 3093, 3092, 3091, 3089, 3083, 3081, 3075,
	3074, 3073, 3070, 3063, 29, 3062, 3061, 3058, 3056, 3055,
	3052, 3042, 3041, 3040, 3038, 3035, 3033, 3032, 3030, 3027,
	3026, 3025, 34, 3023, 219, 3022, 3020, 3018, 3016, 3015,
	3014, 3013, 3008, 3007, 3006, 217, 3004, 130, 3003, 3000,
	2997, 2995, 2991, 216, 2988, 2987, 2983, 2978, 2976, 2969,
	2968, 2964, 2963, 139, 2961, 2960, 2959, 2958, 2956, 2955,
	2953, 2945, 2943, 2942, 193, 2940, 208, 2938, 2936, 2933,
	2932, 2930, 2927, 2924, 2922, 2921, 2920, 2914, 2913, 2912,
	2909, 2907, 2903, 2901, 2899, 2898, 2892, 2890, 2888, 2887,
	2885, 2884, 199, 138, 2882, 2880, 204, 202, 2878, 2877,
	94, 89, 22, 2876, 90, 123, 173, 4829, 168, 2875,
	2874, 2868, 2867, 2866, 70, 128, 125, 122, 124, 247,
	2865, 2864, 69, 56, 30, 27, 98, 2863, 2862, 2861,
	2406, 96, 2860, 2858, 195, 175, 2857, 1117, 2856, 147,
	86, 93, 95, 65, 2855, 114, 17, 2852, 160, 38,
	2850, 118, 74, 28, 4941, 6391, 2847, 116, 210, 75,
	145, 180, 178, 177, 176, 126, 148, 2845, 185, 2844,
	68, 146, 2843, 2842, 2841, 58, 142, 1, 6, 133,
	9, 83, 15, 2840, 11, 2838, 2833, 2832, 2831, 32,
	121, 2830, 50, 55, 2827, 20, 54, 156, 2826, 161,
	2825, 92, 2824, 190, 150, 164, 13, 166, 2823, 2822,
	2821, 2820, 2819, 103, 21, 97, 2817, 2815, 101, 179,
	2814, 43, 132, 73, 102, 200, 85, 159, 80, 163,
	136, 174, 2811, 2808, 2806, 149, 2802, 2799, 113, 158,
	2792, 2790, 209, 33, 51, 169, 53, 2789, 2788, 117,
	2786, 151, 2784, 2778, 2776, 205, 129, 162, 10, 84,
	91, 26, 8, 167, 115, 77, 76, 2775, 2952, 1390,
	1536, 2774, 112, 88, 57, 81, 111, 194, 44, 2773,
	2771, 1109, 2769, 2768, 2766, 2765, 135, 2764, 2761, 2760,
	110, 37, 72, 2759, 2757, 120, 63, 491, 196, 71,
	157, 170, 186, 2756, 127, 2755, 62, 104, 2754, 144,
	183, 61, 2753, 402, 109, 2751, 192, 2750, 2749, 2748,
	2747, 154, 2746, 2745, 361, 2744, 119, 2743, 2742, 141,
	106, 188, 67, 31, 2741, 59, 229, 2740, 143, 40,
	2739, 131, 36, 0, 6607, 5146, 5550, 2738, 628, 2737,
	155, 100, 2735, 2734, 2733, 2730, 35, 14, 3, 5,
	16, 12, 1099, 273, 2729, 2726, 87, 99, 107, 2720,
	197, 165, 2718, 2717, 2716, 64, 2714, 25, 2710, 23,
	2706, 2700, 24, 4, 2699, 2696, 181, 2694, 182, 2693,
	2692, 2468, 2691, 191, 2689, 105, 2687, 134, 152, 2686,
	2685, 2684, 2683, 187, 2682, 189, 2681, 18, 19, 2,
	2679, 2678, 2677, 153, 7, 2273, 2676, 2672, 66, 140,
	79, 2670, 2664, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	433, 433, 17, 27, 18, 28, 12, 435, 435, 435,
	435, 21, 19, 19, 29, 29, 143, 143, 143, 143,
	16, 16, 24, 24, 156, 156, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 432, 432, 158,
	158, 157, 153, 153, 436, 436, 159, 159, 159, 161,
	161, 33, 33, 91, 91, 91, 144, 84, 84, 84,
	84, 84, 84, 84, 79, 79, 381, 381, 382, 382,
	139, 139, 140, 140, 140, 140, 141, 141, 142, 142,
	142, 47, 35, 35, 35, 35, 35, 35, 35, 36,
	36, 36, 36, 37, 37, 37, 37, 37, 37, 38,
	38, 38, 38, 38, 38, 45, 45, 45, 45, 133,
	133, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 441, 441, 442, 442, 443, 443, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 59, 59, 231, 231, 209, 209, 60, 60,
	60, 61, 61, 62, 62, 49, 49, 428, 428, 244,
	244, 348, 348, 64, 64, 65, 65, 65, 65, 65,
	65, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 73, 73,
	73, 74, 74, 74, 71, 71, 71, 69, 69, 69,
	68, 68, 68, 72, 72, 72, 70, 70, 70, 245,
	245, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	350, 350, 76, 76, 76, 319, 319, 80, 80, 80,
	276, 276, 81, 81, 81, 81, 81, 82, 82, 82,
	82, 92, 92, 92, 92, 431, 431, 237, 237, 174,
	174, 174, 174, 87, 87, 87, 87, 88, 88, 88,
	89, 89, 138, 138, 98, 98, 98, 98, 98, 97,
	97, 97, 97, 97, 97, 39, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 44, 44, 44, 44,
	44, 100, 100, 437, 437, 102, 99, 99, 99, 101,
	101, 101, 101, 103, 104, 104, 104, 104, 104, 104,
	105, 105, 375, 375, 252, 252, 373, 373, 389, 389,
	374, 374, 213, 213, 213, 213, 213, 214, 214, 214,
	380, 380, 380, 380, 380, 380, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 123, 123, 123, 132, 132,
	132, 132, 132, 132, 132, 125, 125, 125, 115, 115,
	107, 107, 107, 107, 111, 111, 111, 111, 111, 108,
	108, 112, 112, 114, 114, 116, 116, 116, 116, 116,
	116, 109, 109, 109, 109, 118, 118, 118, 118, 282,
	282, 282, 117, 117, 334, 334, 128, 128, 128, 128,
	128, 128, 333, 333, 124, 124, 124, 124, 127, 127,
	127, 127, 266, 266, 121, 121, 121, 122, 122, 122,
	126, 126, 129, 129, 129, 129, 110, 110, 110, 446,
	446, 446, 130, 130, 120, 120, 131, 131, 131, 131,
	131, 131, 131, 131, 119, 119, 119, 434, 434, 113,
	429, 429, 426, 426, 426, 426, 426, 426, 426, 427,
	427, 430, 430, 85, 85, 85, 54, 54, 447, 447,
	447, 55, 55, 448, 448, 448, 445, 445, 445, 445,
	445, 445, 445, 445, 215, 215, 216, 216, 300, 300,
	300, 300, 300, 217, 217, 160, 160, 160, 220, 221,
	221, 218, 218, 219, 219, 219, 223, 223, 222, 225,
	225, 224, 299, 394, 394, 395, 395, 395, 395, 395,
	395, 395, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 392, 392, 392, 393, 390, 390, 391, 391,
	391, 391, 449, 449, 449, 449, 449, 449, 450, 450,
	298, 298, 229, 229, 397, 397, 397, 397, 398, 398,
	398, 398, 398, 401, 400, 399, 399, 399, 399, 399,
	329, 329, 329, 58, 58, 58, 263, 263, 262, 262,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 135, 135, 56, 56, 56, 166,
	166, 53, 53, 53, 452, 452, 57, 57, 57, 453,
	453, 63, 63, 63, 63, 63, 63, 52, 52, 52,
	52, 52, 454, 454, 283, 283, 281, 281, 235, 235,
	336, 178, 178, 154, 154, 154, 20, 22, 22, 15,
	15, 30, 30, 31, 31, 26, 26, 438, 438, 439,
	439, 86, 86, 90, 90, 90, 96, 96, 134, 134,
	134, 134, 134, 134, 134, 34, 34, 34, 34, 46,
	46, 46, 46, 94, 456, 456, 456, 95, 95, 455,
	455, 173, 173, 173, 173, 175, 175, 295, 295, 296,
	296, 457, 457, 297, 297, 297, 297, 168, 167, 169,
	169, 51, 51, 51, 162, 162, 163, 163, 164, 164,
	165, 165, 458, 458, 83, 83, 83, 137, 137, 208,
	208, 291, 291, 291, 230, 230, 183, 183, 294, 294,
	292, 292, 292, 292, 261, 261, 261, 136, 136, 240,
	240, 254, 254, 255, 255, 345, 345, 256, 93, 93,
	147, 147, 145, 145, 145, 145, 145, 145, 459, 459,
	146, 146, 146, 148, 148, 148, 148, 148, 148, 148,
	151, 151, 151, 151, 152, 152, 152, 150, 150, 408,
	408, 408, 410, 410, 411, 407, 407, 409, 409, 451,
	451, 265, 265, 265, 227, 228, 226, 226, 460, 460,
	233, 233, 232, 234, 234, 335, 335, 335, 259, 259,
	259, 259, 286, 286, 284, 284, 285, 285, 287, 287,
	288, 288, 288, 289, 289, 290, 290, 258, 258, 315,
	315, 149, 149, 149, 239, 239, 239, 241, 241, 306,
	306, 306, 306, 306, 307, 307, 305, 305, 305, 305,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 338,
	338, 242, 242, 339, 293, 293, 424, 424, 424, 425,
	425, 332, 332, 340, 340, 340, 340, 340, 340, 330,
	330, 331, 331, 346, 347, 347, 269, 269, 269, 269,
	267, 267, 270, 270, 270, 270, 268, 268, 341, 341,
	341, 341, 260, 260, 342, 342, 342, 343, 301, 302,
	302, 351, 351, 351, 351, 351, 366, 238, 238, 238,
	238, 238, 461, 461, 352, 352, 352, 352, 352, 352,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 356, 356, 356, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 365, 365, 365, 365, 365, 357, 357,
	362, 362, 363, 363, 363, 358, 359, 364, 364, 364,
	364, 462, 462, 368, 368, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 354, 354, 354, 361, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 277, 277, 278, 278, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	310, 310, 310, 310, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 402,
	402, 402, 402, 402, 402, 402, 402, 405, 405, 406,
	406, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	412, 412, 413, 413, 415, 415, 416, 416, 417, 418,
	418, 418, 419, 420, 420, 414, 414, 421, 421, 421,
	421, 422, 422, 423, 423, 423, 423, 423, 321, 321,
	322, 322, 328, 328, 328, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 176, 176, 176, 176, 176, 250, 250, 248, 248,
	248, 251, 251, 249, 249, 247, 247, 246, 246, 318,
	318, 316, 316, 320, 320, 271, 271, 367, 367, 367,
	367, 367, 367, 367, 272, 272, 272, 280, 273, 273,
	274, 274, 274, 274, 274, 312, 313, 275, 275, 275,
	314, 314, 323, 327, 327, 326, 325, 325, 324, 324,
	303, 303, 304, 304, 257, 257, 463, 463, 253, 253,
	344, 344, 344, 344, 211, 211, 243, 243, 210, 210,
	203, 203, 204, 204, 204, 204, 236, 236, 369, 369,
	369, 370, 371, 372, 317, 193, 192, 180, 181, 191,
	190, 189, 179, 182, 186, 187, 188, 184, 185, 199,
	198, 197, 195, 196, 349, 205, 205, 206, 206, 206,
	207, 207, 207, 207, 177, 177, 200, 200, 201, 202,
	202, 194, 194, 194, 170, 170, 170, 171, 171, 172,
	172, 379, 379, 377, 377, 377, 378, 378, 378, 378,
	376, 376, 376, 376, 376, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 385, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 388, 388,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 7, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 6, 4, 9,
	7, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 3, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	3, 2, 0, 1, 0, 1, 0, 3, 3, 3,
	3, 3, 6, 4, 4, 4, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 3, 4, 4, 5, 0,
	1, 1, 3, 4, 1, 0, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 5, 8,
	5, 11, 0, 1, 3, 3, 2, 2, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 5, 8, 4, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 1, 4, 2, 4, 7, 3, 3,
	0, 3, 6, 3, 1, 1, 8, 7, 5, 0,
	1, 6, 7, 6, 5, 3, 4, 14, 17, 14,
	17, 4, 0, 2, 2, 0, 1, 0, 1, 3,
	2, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 2, 3, 4, 3, 4, 5, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 3, 4, 1, 5, 3, 4, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 5, 6, 4, 6, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 1, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 1,
	0, 2, 5, 7, 2, 1, 1, 2, 4, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 4, 1, 2, 1, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 2, 5, 1, 4,
	2, 5, 1, 4, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	5, 4, 6, 3, 5, 4, 6, 4, 6, 5,
	7, 3, 3, 3, 3, 3, 4, 3, 2, 4,
	2, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 1, 5,
	5, 3, 1, 1, 1, 2, 2, 2, 4, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 452, -77, -47, -45, -80, -81, -65,
	-79, -82, -76, -92, -96, -86, -98, -134, -3, -33,
	-35, -48, -64, -66, -75, -84, -83, -85, -87, -91,
	-90, -39, -93, -97, -106, -135, -136, -137, 81, 68,
	121, 103, 108, 127, 153, 282, 311, 321, 305, -101,
	-102, 340, -34, -46, -95, -94, -4, -10, 27, 39,
	-36, -37, -38, 53, -56, -53, -50, -59, -440, 83,
	-409, -67, -70, -72, -444, 113, 126, 169, 274, -88,
	-89, 307, 309, -41, -40, 122, -145, -147, -99, -100,
	-138, -107, -108, -109, -110, -111, -112, -113, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -127, -128, -129, -130, -131, 343, 390, 40, 352,
	69, 116, 315, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -63, -57, -58, -408,
	-68, -69, -71, -73, -74, 306, -148, -146, 449, 402,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	420, 428, -151, -149, -150, -152, 328, 410, 366, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, -195,
	-200, -201, -202, -194, -170, -385, -388, 4, -383, -386,
	132, 177, 244, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 40, 43, 45, 46, 49, 50, 51, 52,
	53, 54, 57, 62, 67, 68, 69, 70, 71, 76,
	73, 74, 75, 78, 80, 81, 82, 85, 86, 94,
	95, 96, 97, 98, 99, 103, 106, 105, 108, 111,
	112, 113, 115, 117, 118, 121, 122, 125, 123, 372,
	374, 124, 126, 127, 128, 138, 139, 140, 142, 143,
	145, 147, 151, 152, 154, 158, 160, 161, 162, 163,
	168, 169, 171, 172, 178, 173, 179, 183, 186, 185,
	187, 188, 189, 180, 194, 198, 199, 200, 202, 203,
	206, 207, 208, 209, 212, 211, 214, 217, 218, 221,
	222, 225, 226, 228, 229, 232, 230, 233, 231, 234,
	237, 235, 236, 239, 240, 242, 241, 249, 250, 252,
	253, 254, 269, 257, 258, 259, 262, 265, 268, 270,
	271, 272, 273, 274, 275, 277, 278, 280, 282, 284,
	286, 287, 288, 289, 290, 291, 293, 294, 296, 297,
	298, 299, 300, 305, 302, 303, 304, 306, 307, 308,
	309, 311, 313, 314, 315, 316, 318, 320, 341, 342,
	354, 321, 322, 323, 324, 325, 326, 327, 331, 335,
	332, 333, 334, 336, 329, 330, 337, 338, 340, 343,
	345, 347, 348, 351, 352, 353, 355, 358, 359, 360,
	356, 357, 350, 365, 363, 364, 367, 368, 369, 370,
	371, 373, 375, 384, 385, 387, 390, 391, 392, 382,
	394, 395, 398, 399, 400, 401, 406, 402, 404, 407,
	408, 409, 415, 414, 421, 422, 424, 425, 426, 32,
	41, 42, 44, 47, 58, 59, 60, 63, 100, 101,
	120, 129, 130, 141, 155, 157, 164, 165, 166, 184,
	190, 192, 196, 215, 247, 248, 263, 267, 279, 281,
	292, 317, 346, 361, 377, 378, 379, 380, 386, 388,
	410, 411, 412, 416, 423, 255, -188, 2, -170, -170,
	282, 26, 2, 26, 278, 330, 368, 370, 2, 193,
	2, -431, -237, 2, 26, -174, -170, 83, 153, 328,
	-188, 2, -431, -237, 24, 2, -170, 2, -175, 2,
	321, -170, 452, 78, 222, 62, 317, 337, -104, 385,
	-103, 377, 323, -105, -375, 2, 237, -170, 452, 452,
	452, 452, 2, 366, 272, 414, 329, 403, 96, 289,
	177, -426, 2, 4, -386, -383, -204, -203, 366, 96,
	-202, -194, 442, -201, 452, 452, 452, 2, 199, 200,
	288, 287, 337, 338, 452, 452, 452, 2, 25, 56,
	77, 80, 102, 128, 148, 151, 260, -441, 229, 269,
	286, 323, 336, 365, 375, 387, -445, 353, 57, 403,
	-452, 392, 111, -281, 96, 370, 368, 222, 152, 399,
	313, 156, 397, 106, 183, 401, 400, 452, 452, 25,
	56, 65, 80, 111, 128, 148, 151, -443, 269, 286,
	320, 323, 336, 365, 375, 392, 387, 2, 414, 329,
	366, 177, 96, 403, 313, 285, -77, 2, 449, 29,
	340, -144, 366, 2, -170, 199, 200, 2, 452, 452,
	-426, 2, 199, 200, 2, 57, 325, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 2, -132, 337, 353, 162, 39, 62,
	26, 67, 97, 154, 177, 178, 207, 77, 78, -282,
	-334, -333, 367, 324, 330, 363, 385, 83, 404, 314,
	426, -434, 123, 4, 96, 237, 339, 377, 222, 38,
	71, 371, 372, -451, 2, 366, -455, 2, 385, 385,
	2, -455, 2, -455, 2, -173, 2, 385, 381, -456,
	385, 423, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, -146, -148, -147, 452, 452, 452,
	452, 452, -132, 337, 2, 62, 26, -459, 146, -232,
	-233, 396, 191, 119, 261, -145, -147, 2, -408, -373,
	2, -308, -389, -310, 440, 441, 435, 243, 427, -321,
	102, 397, 255, -388, -311, -323, 120, 317, -251, 8,
	9, 5, 6, 7, -177, -353, -317, -361, 389, 131,
	246, -207, 454, 10, 449, -405, -147, -322, 33, 157,
	55, -377, -206, -355, -363, -359, -360, -461, 45, 51,
	50, 375, 236, 331, 332, 347, 333, 334, 43, 406,
	173, 252, 254, 185, 4, 192, -205, -194, -402, -403,
	-383, -384, 184, 190, 186, 346, 187, 188, 189, 42,
	292, 142, 143, 141, 112, 101, 100, 248, 47, 46,
	44, 411, -364, 98, 377, 378, 379, 380, 202, 203,
	-170, -385, 65, 88, 89, 87, 92, 91, 93, 90,
	339, 403, 56, 32, 164, 165, 196, 247, 166, 63,
	-404, 357, 84, 150, 182, 167, 195, 197, 201, 216,
	219, 238, 245, 264, 266, 312, 344, -462, 412, 129,
	130, 267, 279, 361, 386, 388, 155, 215, 58, 59,
	-410, 293, -411, -188, -410, 452, 452, 453, 452, -226,
	-227, -228, 2, 26, 109, 449, 2, -337, 2, 447,
	-341, -147, 210, -340, 449, -338, -195, 256, -406, 318,
	-402, -403, -177, -194, -206, 4, -229, 449, 451, 96,
	366, 66, 2, -276, 449, -170, 26, -144, 255, 381,
	453, -319, 449, 255, 149, 258, -170, 2, 2, 341,
	2, 449, -104, 60, 385, -296, 2, -297, -167, -168,
	-169, -346, 198, 284, 291, 429, 426, -373, -437, 149,
	432, 381, -373, -252, 451, 2, -341, 164, -195, 2,
	-192, -376, 4, -383, -386, -384, -387, 65, -385, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 48, 55,
	56, 61, 64, 66, 77, 83, 87, 88, 90, 89,
	91, 92, 93, 102, 104, 107, 109, 110, 114, 116,
	119, 131, 133, 146, 148, 149, 153, 156, 159, 170,
	181, 191, 193, 210, 213, 220, 223, 224, 243, 246,
	251, 255, 256, 260, 261, 276, 283, 295, 310, 328,
	339, 349, 362, 366, 376, 381, 383, 389, 396, 397,
	403, 405, 413, 417, 418, 419, 420, -388, 2, -341,
	164, 2, -197, 164, -341, -200, 2, -381, 164, -379,
	10, -378, 5, 4, -383, -386, -384, 2, -179, -170,
	2, -191, -376, 2, -210, 164, -195, -196, -200, 381,
	453, -243, -203, -204, -236, -170, 451, -308, 2, -93,
	2, -308, 164, 2, -93, 164, 2, -308, 164, 2,
	-93, 164, 2, 2, 2, 387, 2, 80, 164, -170,
	366, 95, 2, 304, -442, 320, 391, 414, 2, 2,
	2, 2, 2, 2, 2, 366, 329, -453, 293, -184,
	2, -170, 146, -381, 164, 2, -381, 164, 2, -198,
	-200, -198, 177, 194, -179, 164, 2, 370, 368, 370,
	368, 149, 2, 193, 2, 193, 2, -342, 2, -343,
	-195, 2, 2, 2, 2, 2, 164, -170, 366, 95,
	2, 209, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -245, 164, 2, -195, -245, 164, 2, -245, 164,
	2, -211, 164, 2, -210, -179, 164, 2, -382, 164,
	2, -381, -382, 164, 2, -350, 2, -349, -378, 410,
	-77, 449, 337, 449, -381, -195, -308, -93, 149, -308,
	-93, 146, 2, 96, 366, -132, 2, 146, 405, 2,
	8, 2, -381, 290, 138, 2, 341, 2, 62, -282,
	426, 149, 2, 2, -429, 2, 255, 149, 2, 149,
	2, 149, 2, 149, 2, 149, 2, 287, 338, 200,
	384, 208, 124, 149, -266, 2, 420, 149, 2, 149,
	2, 5, 2, 198, 284, 354, 2, -195, -446, 2,
	366, 414, 329, 2, 2, 73, 74, 149, 2, 149,
	426, 2, -260, -341, -295, -296, -295, 381, -175, -459,
	-232, -233, -132, 341, 2, 2, -459, -259, -284, -285,
	220, 133, 251, -265, 26, 109, -265, -265, 49, 450,
	450, 11, 12, 64, 37, 440, 441, 442, 443, 144,
	444, 445, 438, 439, 437, 430, 431, 434, 204, 205,
	79, 433, 432, 72, 227, 319, 134, 135, 136, 137,
	301, 174, 175, 176, 14, 15, 16, 30, 260, 219,
	427, 167, 344, 435, 17, 18, 19, 195, 197, 245,
	41, 170, -176, -212, -308, -308, -308, -308, -308, 266,
	449, -257, -303, 447, -147, 449, 449, 449, 5, 449,
	5, -372, 8, -147, -308, -321, 450, -249, 449, -147,
	-321, -316, 449, 317, 447, 449, -324, -308, 451, -412,
	421, -357, 449, 281, -356, 449, -356, -356, 415, -354,
	449, 428, 422, 449, -354, 449, 449, 146, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 415, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 453, -410, -229, 449, -253, -344, -308, 442, -253,
	-253, 255, -246, -308, 84, -269, 201, 238, 150, 216,
	312, 182, -372, -78, -64, -75, -83, -93, -106, -136,
	-137, -305, 454, -332, 428, -147, -338, -194, -147, -340,
	449, -337, -332, 442, -195, 449, 149, 449, 451, 149,
	-236, -376, -179, -195, -205, -206, 108, -246, -381, -426,
	-236, -174, 34, -318, -351, -352, -365, -353, -362, -358,
	-361, 297, 298, 296, 300, 299, 45, 51, 50, 375,
	236, 331, 332, 347, 333, 334, 43, 406, 173, 252,
	254, 185, 4, 44, 411, -364, 192, 184, 190, 186,
	346, 187, 188, 189, 42, 292, 142, 143, 141, 112,
	101, 100, 248, 47, 46, 98, 377, 378, 379, 380,
	202, 203, 412, 357, 58, 59, -426, -236, 146, -375,
	-246, 34, -296, 2, -457, 453, 218, -214, 226, 242,
	161, 256, 424, 249, -380, 5, 4, -317, -329, 102,
	222, -361, 9, 441, -369, 8, 440, -374, -373, 86,
	451, -376, -156, 302, -155, 23, 27, 113, 408, 125,
	-219, 179, 272, 120, 350, -433, -435, 322, 373, 374,
	75, 249, 302, 120, -262, -264, 34, 94, 240, 268,
	52, 171, 231, 232, 352, 416, 120, 302, 420, 120,
	-435, 302, -435, -158, 350, -433, -435, 322, 302, -157,
	-219, 120, 454, -381, -243, 453, 453, -376, 442, 120,
	120, 120, 120, 2, 2, 243, 2, 2, 2, 151,
	-445, -443, 2, 2, 2, -195, 164, -197, 164, 2,
	-200, 414, -231, 255, -428, -244, 366, -195, -166, -407,
	420, 243, 243, 34, 449, 2, -181, 164, 2, -171,
	-170, 177, -407, 243, -342, -208, -195, -208, 340, -188,
	34, -305, 120, 2, 2, 2, -170, -159, 453, 54,
	308, 120, -159, 120, -159, 120, -159, 453, 120, -159,
	120, 453, 120, 120, 450, 453, -350, -381, -142, 420,
	149, 83, 449, -382, -428, -179, 2, -195, 2, 366,
	202, -381, -381, -375, 26, 342, 2, 287, 338, 74,
	-195, -430, 146, -427, 313, -426, -195, -195, -195, -195,
	-195, 2, 2, 2, 146, 2, 384, 2, 384, 2,
	-170, 68, -170, -170, 218, -195, 146, 366, 177, 366,
	-159, 453, -175, -459, -259, -375, -459, -285, -284, -287,
	-308, 26, -290, 140, 239, -308, -310, -146, -146, -146,
	-234, -335, -308, 283, 177, -366, -351, -351, -193, -376,
	377, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, 219, 167, 344, 41,
	170, -308, 381, -308, -308, -308, -308, 235, 243, 246,
	389, 131, 398, 109, 249, -463, 362, 36, -314, -147,
	-250, 449, -328, 31, 349, 26, -321, 449, 2, -303,
	-308, -304, -247, -246, -246, 450, 413, 26, 109, 442,
	2, 8, -277, -279, 425, 234, 99, 163, 233, -278,
	327, 450, 453, 34, 450, -308, -247, -320, -316, -246,
	-327, -326, 417, -376, 442, -413, 139, 156, 8, -370,
	8, -370, 377, 377, 8, -370, -370, 449, 450, 2,
	450, 2, 450, 2, 450, 2, 450, 2, -308, -308,
	-308, -308, -308, -308, -308, -246, -271, 2, -367, -246,
	4, 425, 234, 99, 163, 233, 327, -271, 2, -272,
	2, -308, -246, -273, -309, -310, 440, 441, 435, -321,
	-274, 2, -308, -247, -308, 48, 213, 383, -275, -308,
	149, -246, -246, 2, -246, 2, -411, 34, -246, -239,
	453, 149, 34, 4, -239, -239, 449, 450, 453, -270,
	160, 230, 225, -270, -337, -269, 201, -267, 264, -267,
	-267, -424, 449, 448, 452, 452, 452, 452, 452, -332,
	-180, 447, 455, -376, -331, -330, 34, -188, 262, -332,
	-332, 451, 450, -331, -195, 449, -246, -376, 355, 450,
	451, 195, 195, 195, 318, 450, -142, 381, 420, -77,
	257, 450, 453, -238, 33, 447, -279, 449, -368, 415,
	449, 449, 149, -237, -437, 450, 385, -297, -213, 291,
	348, 303, 335, 364, 9, 8, 8, 453, -376, 453,
	-438, 77, 381, 66, -299, 164, 66, -390, -182, 77,
	-391, -170, 61, 397, 283, 148, -438, 77, -438, 77,
	77, 340, 353, 49, -341, 37, -93, 214, 149, 426,
	366, 177, 381, -341, -264, -351, 94, 231, 232, 49,
	-371, -369, 441, -371, 49, -371, -371, -371, 420, -197,
	-341, 381, 273, -381, 381, 453, 37, -93, 214, 149,
	381, -210, -180, -347, -346, -203, -170, 451, -308, -93,
	-308, -93, 120, 2, -453, 209, 449, -229, 243, -263,
	-262, 243, -199, 2, -195, 149, -236, -348, 193, 453,
	-244, 273, 120, 120, 449, 117, 289, 2, 255, 243,
	-181, 164, -162, 369, 120, -302, -301, 418, -291, -93,
	449, 102, 34, -291, -254, -255, -345, -256, -182, 449,
	-188, -170, 2, -195, -245, -245, -245, -210, -211, -179,
	-381, -382, -382, -77, -349, 450, 450, -141, 259, -140,
	-170, 5, -144, 405, -216, -300, -299, -392, -393, -390,
	219, 177, 397, 194, 132, -142, -346, -142, -347, -347,
	-195, 146, 2, 2, -236, -236, 337, 146, 146, 451,
	-266, 289, 96, 366, 272, 177, -195, -210, -195, -341,
	-459, -288, -369, 449, -289, 317, 318, 453, -154, 35,
	107, 206, -195, 426, 118, -308, -308, 381, -463, 362,
	-314, 118, -308, 235, 246, 389, 131, 398, 109, 249,
	149, 449, -309, -309, 450, -248, -308, -308, 448, 457,
	450, -460, 453, -232, -308, -246, -246, 450, 450, 381,
	381, 381, 381, 449, 451, -246, -236, 448, 448, 453,
	450, -325, -326, 114, -308, 451, -418, 265, 449, 449,
	450, 450, 453, 450, 426, 426, 450, 450, 450, -308,
	34, 453, 453, 453, 450, 453, 453, 453, 450, 450,
	149, 450, 450, -280, 276, 450, 11, 12, 440, 441,
	442, 443, 144, 444, 445, 438, 439, 437, 430, 431,
	432, 72, 227, 319, 14, 15, 16, 195, 170, -309,
	-309, -309, 450, -312, -313, 149, 146, 34, -275, -275,
	-275, 450, 149, -246, 450, 450, 449, 450, -302, -344,
	-241, 2, -337, -190, -376, -302, -302, -246, -308, 201,
	201, -268, 405, 255, -270, -337, -330, 450, -425, -372,
	-332, -331, -372, -307, -306, 147, 35, 107, 241, -188,
	-229, -331, -331, -376, -332, 450, -242, -339, -406, -460,
	451, -376, -133, 5, 246, -133, -133, 149, -236, 24,
	277, -351, 447, 448, 8, 8, 449, -370, -370, -236,
	149, -373, -296, 395, 70, 291, 377, -373, -155, 302,
	-182, -182, -195, 243, -299, 164, -161, 243, -351, -189,
	-170, 449, 449, 206, 206, -182, -189, 164, -182, 164,
	-189, -189, -432, 291, 250, -308, 221, 289, 244, -156,
	302, -93, -93, 449, -437, 405, 108, -195, -210, -199,
	302, -205, -371, -371, -262, 302, -197, -381, 420, -179,
	-157, -93, -93, 449, -180, -158, 302, -139, 172, 442,
	-170, 414, -170, -215, -216, -170, -447, 422, 420, 120,
	120, -229, -209, -195, 447, -142, -381, -195, -381, -381,
	-381, 2, 449, 2, -195, 120, 255, 243, -163, 115,
	-458, 432, -179, -233, -232, -308, -261, -294, 310, 255,
	-230, -183, -182, 410, -188, -261, -240, 453, 149, 432,
	451, -230, 2, -159, -159, -159, -159, -159, -77, -142,
	453, 449, 432, 432, 449, -381, -381, 450, 453, -195,
	-181, 177, 177, -187, -171, -142, -42, 420, 366, 337,
	337, -170, -191, -179, -195, -192, -210, -289, -308, -335,
	-195, 454, -308, -308, 118, 118, -308, -309, -309, -308,
	118, 149, 449, -308, -318, 30, 30, 450, 453, -304,
	-308, 450, 413, -460, -460, -460, 5, 234, 163, 233,
	-278, 233, -278, -278, 8, 442, -376, 450, -316, 116,
	-308, 376, -376, 442, -419, -185, 449, -170, 418, -232,
	-370, -354, -354, 450, -366, -351, -308, -308, -308, -308,
	-308, -308, -312, -308, -366, -351, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, 109, 243, 249, -309, -313,
	-312, -308, -308, -351, 450, 450, 450, -246, -77, -258,
	156, -347, 453, -258, -258, 450, -337, -337, 449, -308,
	201, 448, 450, 453, -331, 448, 453, 456, 432, -229,
	451, -330, 450, 453, -293, 34, 450, -376, -93, 258,
	5, 8, 447, 448, 450, -370, 450, 450, -236, -308,
	381, 381, 120, 243, 407, -394, -391, -308, -235, -336,
	-308, 449, 449, -153, 113, 340, -439, 2, 120, -159,
	120, -159, 424, 449, 449, 381, -246, -308, -143, 102,
	-375, -435, -435, 381, 381, 273, -246, 381, -142, 149,
	2, 2, 2, 450, 34, 253, -170, -195, -197, 34,
	-60, 420, -346, -372, -166, 2, -283, 405, -180, -195,
	120, -164, 212, -458, -379, -407, -286, -284, -261, -253,
	244, 76, 450, 453, 451, -302, -255, -241, -308, 2,
	450, -140, -141, -381, -381, -381, -142, -144, -144, -300,
	2, 449, -181, -171, 449, 259, -195, -266, -221, -220,
	272, 249, -221, 256, 450, -154, -180, -308, -308, 118,
	30, 30, -308, -308, -318, 450, -308, -308, -246, 448,
	5, -308, 450, 450, 450, 450, -308, 451, -420, -170,
	-308, 450, 450, 450, 450, 453, 453, 450, 450, 450,
	450, -313, 149, 109, 249, 449, 450, 450, -315, 159,
	49, -337, -315, -315, -268, -236, -337, -305, -372, -306,
	-180, 447, -376, -339, 449, 451, 448, 2, 447, 450,
	-182, -182, -299, 120, -395, 77, -396, 64, 132, 83,
	243, 246, 397, 283, 61, 102, 295, 34, 450, 450,
	453, -154, -235, -236, 243, 359, 102, 243, 102, 95,
	392, -182, -189, -236, -236, -195, 450, 453, 432, -199,
	-197, -381, 450, -180, -382, -217, 180, -93, 2, 449,
	-229, -263, -93, 259, 448, 449, -170, 255, 449, -180,
	-165, 211, -458, -379, -162, -261, -292, 449, 255, -93,
	-183, 2, -233, 432, 450, 450, 95, 95, -235, 449,
	449, -236, -43, -44, 177, 77, 275, -192, 366, 177,
	-154, -308, -308, -308, 450, -460, -376, 442, -414, 272,
	450, -308, -308, -309, 149, 449, -318, -415, 419, -308,
	-246, -415, -415, 450, -332, -372, 2, 447, 2, -299,
	-189, -193, -186, -170, 132, 164, 246, 206, 449, -309,
	-195, 449, 2, -449, 104, 181, -298, -450, 82, 360,
	-336, 450, 450, 246, 246, -308, -351, -159, -159, 450,
	450, 381, -375, 81, -373, 381, -218, -219, 170, -448,
	420, -215, -447, -61, -62, 382, -346, -235, -195, -235,
	255, -458, -379, -163, 110, -236, 77, -286, -314, -142,
	449, 449, 450, -235, -235, 450, 453, 26, 449, 26,
	449, -195, -210, 450, -233, 49, 450, 450, -309, -318,
	450, -416, -417, -185, -331, 448, 2, -396, -186, 243,
	-308, -172, 449, -308, 181, 105, 168, -217, 449, 295,
	-178, 64, 449, 449, 449, 432, 149, 449, -447, 270,
	95, 240, 450, 34, -62, 9, 450, -283, 450, -195,
	-379, -164, 400, 244, 450, -189, -261, -382, -382, -298,
	450, 450, -44, -236, -236, -421, 289, 318, 158, -246,
	450, 453, 34, 120, 450, -397, 228, -170, 450, 105,
	168, -218, -236, -195, -436, 405, -193, -223, -222, -220,
	-225, -224, -220, -246, -373, 81, 270, -246, -195, 95,
	-217, -93, -298, 449, -298, 449, -165, 340, -301, 450,
	450, -217, -298, 450, 450, 450, -422, -423, 41, 394,
	86, -308, -422, -422, -417, -419, 132, -398, -401, -400,
	255, 345, 150, 271, 450, 359, 416, -449, 450, -229,
	-308, 450, 453, 410, 450, 453, 410, 450, 149, 450,
	449, -218, -448, -217, -235, -217, -235, -254, -142, -142,
	-218, -217, -423, 280, 145, 317, 280, 145, -186, -400,
	255, -401, 255, 400, 106, -397, -222, 170, -224, 149,
	270, -236, -447, -218, 450, -218, 450, -302, -218, 30,
	-399, 240, 308, 54, 340, -399, -398, 449, 449, 450,
	-454, 418, -298, -454, -298, -423, 22, 246, 102, -449,
	-246, -246, -160, 54, 308, 2, -217, -217, 450, 450,
	-218, -218, -218, 381, -454, -454, 449, -246, 450, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 347, 348,
	350, 351, 352, 354, 355, 357, 359, 361, 363, 364,
	366, 368, 369, 370, 371, 372, 374, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 434,
	436, 0, 868, 870, 872, 874, 27, 28, 0, 0,
	172, 174, 176, 0, 201, 203, 205, 206, 208, -2,
	0, 301, 302, 304, 306, -2, -2, 0, 0, 423,
	425, 0, 0, 445, 446, 0, 958, -2, 439, 441,
	443, 506, 508, 510, 512, 514, 516, 518, 519, 521,
	523, 525, 527, 529, 531, 533, 535, 537, 539, 541,
	543, 545, 547, 549, 551, 553, -2, -2, -2, 0,
	-2, -2, -2, 886, 31, 33, 35, 37, 39, 41,
	59, 257, 258, 260, 262, 264, 267, 268, 270, 997,
	308, 310, 312, 314, 316, 0, -2, 1011, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 973, 975, 977, 979, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 349, 353,
	356, 358, 360, 362, 365, 367, 373, 375, 377, 763,
	1602, 1616, 1617, 1618, 1621, 1622, 1623, 1624, 1625, 1626,
	1954, 2034, 2035, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 0, 401, 399, 1596, 402,
	1790, 404, 406, 295, 296, 297, 298, 299, 300, 0,
	155, 0, 416, 410, 415, 417, 419, 420, 421, 422,
	396, 394, 0, 416, 1648, 414, 866, 867, 861, 862,
	1823, 896, 435, -2, -2, -2, 1923, -2, 467, -2,
	474, 1926, 1825, 477, 0, 479, -2, 482, 869, 871,
	873, 29, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, -2, -2, -2, -2, 0, 0, 1683,
	1572, 1618, 1575, 1570, 173, 175, 177, 178, 0, 0,
	0, 0, 0, 0, 202, 204, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 687, 0, 0, 692,
	814, 815, 836, 0, 0, 0, 0, 303, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 235, 341, 342, 0, 998,
	0, 0, 0, 153, 146, 0, 0, 675, 424, 426,
	0, 145, 0, 0, 865, 0, 0, 440, 442, 444,
	507, 509, 511, 513, 515, 517, 520, 522, 524, 526,
	528, 530, 532, 534, 536, 538, 540, 542, 544, 546,
	548, 550, 552, 554, 555, 0, 0, 0, 0, -2,
	-2, 0, -2, -2, 0, 0, 0, 0, 0, 0,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 558, 560, 561, 562, 0, 601, 604,
	612, 657, 658, 0, 805, 999, 898, 876, 889, 898,
	878, 879, 880, 881, 882, 887, 888, 891, 0, 883,
	884, 885, 32, 34, 36, 38, 40, 42, 259, 261,
	263, 265, 269, 271, -2, 971, 972, 309, 311, 313,
	315, 317, 427, 0, 429, 0, 559, 962, 0, -2,
	0, 1003, 1003, 1003, 0, 0, 972, 970, 0, 432,
	433, 486, 487, 1235, 0, 0, 0, 0, 0, 1470,
	1319, 0, 488, -2, 1350, 1352, 1902, 1923, 1469, 1354,
	1355, 1356, 1357, 1358, 0, 0, 1361, 0, 1363, 1364,
	1365, 1366, 0, 1368, 0, 1372, 1373, 1374, 0, 1907,
	1549, 1614, -2, 1140, 1141, 1142, 1143, 1144, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1610, 0, 1441, 1388,
	-2, 1635, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1692, -2, -2, -2, -2, -2,
	-2, -2, 1196, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1937, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 0, 1891, 1908, 1909, 1914, 1916, 1910, 1899,
	1411, -2, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1197, -2, 1903,
	1904, 1919, 1920, 1925, 1930, 1931, 1906, 1915, -2, -2,
	989, 1798, 992, 763, 990, 974, 976, 0, 978, 0,
	0, 0, 983, 1006, 1004, 0, 1042, 987, 988, 998,
	1059, 1082, 0, 1064, 0, 1082, 1108, 0, 1069, 1818,
	1389, 1390, 0, 1618, 1615, -2, 0, 0, 0, 0,
	0, 0, 198, 397, 0, 403, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 437, 438, 0,
	462, 0, 466, 1898, -2, -2, 470, 899, 903, 904,
	905, 906, 0, 0, 0, 0, 0, 476, 0, 0,
	463, 464, 480, 483, 0, 50, 0, 1908, 1108, 51,
	0, 1586, 1640, 1641, 1642, 1643, 1644, 1937, 1953, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 53, 0,
	1908, 56, 0, 1908, 0, -2, 60, 0, 1908, 156,
	157, 1631, 1632, 1636, 1637, 1638, 1639, 63, 0, 1592,
	65, 0, 1589, 73, 0, 1908, 0, 1569, -2, 0,
	0, 667, 1566, 1571, 668, 1576, 0, 179, 180, 181,
	182, 183, 1908, 185, 186, 0, 188, 189, 1908, 191,
	192, 0, 194, 210, 211, 0, 213, 0, 1908, 0,
	0, 0, 219, -2, 236, 0, 233, 0, 223, 224,
	226, 227, 228, 229, 230, 0, 0, 0, 820, 275,
	273, 1597, 0, -2, 1908, 808, 811, 1908, 813, 825,
	1600, 0, -2, 0, 996, 1908, 913, 688, 689, 690,
	691, 0, 294, 0, 926, 0, 928, 0, 948, 1114,
	1059, 237, 238, 239, 240, 241, 1908, 0, 0, 0,
	246, 0, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 138, 1908, 320, 339, 138, 1908, 323, 138, 1908,
	326, 138, 1908, 329, 1564, 138, 1908, 332, 333, 1908,
	335, 158, 336, 1908, 338, 0, -2, 390, 1604, -2,
	344, 0, -2, 0, 170, 0, 673, 674, 0, 863,
	864, 0, 447, 0, 0, 556, 557, 0, 0, 567,
	568, 569, 570, 1796, 1707, 573, 0, 576, -2, 0,
	0, 0, 580, 582, 672, 584, 0, 0, 586, 0,
	588, 0, 590, 0, 592, 0, 594, -2, -2, -2,
	0, 0, 0, 0, 620, 621, 0, 0, 626, 0,
	629, 630, 631, 0, 633, 634, 635, 636, 0, 638,
	639, -2, -2, 643, 645, 0, 652, 0, 656, 0,
	563, 564, 138, 1112, 875, -2, 877, 0, 893, 965,
	-2, 0, 428, 0, 431, 969, 963, 968, 1020, 1021,
	0, 0, 0, 0, 1001, 1002, 0, 0, 0, 960,
	961, 0, 0, 0, 0, 1475, 1476, 1477, 1478, 1479,
	1480, 1483, 1484, 1481, 1482, 1485, 1486, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 1489, 1490, 0, 0, 1492,
	0, 1494, 0, 0, 0, 0, 0, 0, 1298, 1300,
	1557, 0, 0, 1491, 1240, 1241, 1242, 1277, 1278, 0,
	0, 1351, 1554, 1553, 1353, 0, 1506, 0, 1360, 0,
	1232, 1367, 1583, -2, 0, 1470, 1501, 0, 0, 1375,
	1376, 1377, 0, 0, 1506, 0, 0, 1548, 0, 1443,
	0, 1176, 0, 1177, 1178, 0, 1179, 1180, 1193, 1206,
	0, 0, 0, 0, 1210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1198, 0, 0, 0, 1529, -2, 0, 0, 0,
	0, 0, 991, 0, 0, 1046, 1558, 1562, 1563, 1046,
	1046, 0, 0, 1507, 1105, 1105, 0, 0, 1101, 1101,
	1101, 1099, 1076, 0, 378, 380, 382, 384, 385, 386,
	388, 1082, 0, 1092, 0, 1082, 1082, 0, -2, 1064,
	0, 0, 1092, 1109, 1110, 0, 0, 0, 0, 0,
	0, 1619, 0, 0, 0, 1606, 0, 0, 170, 0,
	408, 418, 998, 0, 1509, 1131, 1125, 1134, 1135, 1136,
	1137, 1183, 1184, 1185, 1186, 1187, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, -2, 1194, 1196, 1217, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1189, 0,
	1164, 1164, 1164, 1181, 1182, 1205, 1216, 1208, 1216, 1212,
	1132, 1133, 1199, 1200, 1201, 1202, 0, 412, 0, 0,
	0, 0, -2, 472, 0, 901, 0, 907, 497, 498,
	499, 909, 910, 0, 475, 500, 501, 502, 503, 504,
	505, 0, 780, 0, 782, 1578, 0, 473, 490, 478,
	0, 484, 74, 858, 104, 0, 858, 858, 0, 0,
	125, 0, 0, 0, 0, 0, 92, 100, 80, 81,
	0, 0, 0, 0, 57, 788, 0, 791, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	91, 0, 86, 76, 0, 0, 94, 102, 0, 129,
	131, 0, 0, 1095, 666, 0, 0, 1619, 1574, 0,
	0, 0, 0, 212, 214, 0, 216, 217, 218, 0,
	819, 0, 225, 222, 266, 763, 1908, 787, 1908, 785,
	1601, 0, 0, 0, 292, 287, 0, 289, 806, 0,
	995, 0, 0, 0, 0, 826, 0, 1908, 831, 1588,
	1627, 1628, 915, 0, 1120, 0, 929, 0, 0, 1115,
	0, 1117, 0, 243, 244, 245, 0, 318, 0, 136,
	137, 0, 321, 0, 324, 0, 327, 0, 0, 330,
	0, 0, 0, 0, 998, 0, 0, 0, 148, 0,
	0, 0, 0, 170, 170, 1095, 449, 1095, 451, 0,
	0, 571, 572, 574, 575, 577, 578, -2, -2, 653,
	579, 583, 0, 660, 1814, 670, 585, 587, 589, 591,
	593, 596, 615, 603, 0, 607, 0, 609, 0, 611,
	623, 622, 624, 627, 632, 637, 0, 0, 0, 0,
	804, 0, 892, 966, 968, 430, 964, 1018, 1019, 1024,
	1028, 1029, 1032, 1035, 1036, 1026, 1235, 984, 985, 986,
	1012, 1013, 845, 0, 2034, 1236, 1126, 1237, 1238, 1585,
	0, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, -2, -2, -2, -2, -2, -2, -2, -2, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	-2, -2, -2, 1275, 1276, -2, 1493, 1495, 0, 1557,
	0, -2, 0, -2, -2, -2, -2, 1295, 0, 1297,
	1302, 1304, 1306, 0, 0, 0, 0, 1556, 1316, 1540,
	1541, 0, 0, 1472, 1473, 1474, 1301, 0, 1320, 1555,
	1552, 0, 0, 1505, 1009, 1379, 0, 0, 0, 0,
	1386, 0, 1584, 1231, 1218, 1219, 1220, 1221, 1222, 1223,
	1233, 1371, 1503, 0, 1502, 0, 0, 0, 1513, 0,
	1547, 1543, 0, 1607, 1613, 1451, 0, 0, 0, 0,
	1581, 0, 0, 0, 0, 0, 0, 0, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 0, 1516,
	-2, -2, -2, -2, -2, -2, -2, 0, 1425, 0,
	1427, 1507, 1526, 0, 0, 1321, 0, 0, 0, 1470,
	0, 1430, 1507, 1534, 0, 0, 0, 0, 0, 1507,
	0, 1539, 0, 1437, 0, 1439, 993, 0, 0, 1120,
	0, 0, 0, 1561, 1120, 1120, 0, 1041, 0, 0,
	1102, 1103, 1104, 0, 0, 1105, 0, 1096, 1100, 1097,
	1098, 0, 0, 1082, 379, 381, 383, 387, 389, 1092,
	1056, 0, 0, 1587, 1062, 1091, 0, 763, 1081, 1092,
	1092, 0, -2, 1066, 0, 0, 1009, -2, 171, 762,
	0, 0, 0, 0, 398, 400, 0, 0, 0, 392,
	0, 395, 0, 1121, 1124, 0, 1138, 0, 0, -2,
	0, 0, 0, 0, 0, 465, 0, 900, 908, 0,
	494, 0, 496, 0, 781, 1580, 1579, 0, 485, 0,
	0, 0, 0, 857, 108, 1908, 0, 140, 0, 0,
	747, 1593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 789, 790, 792, 798, 800, 0,
	794, 1582, 0, 795, 0, 797, 799, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 1568, 161, 1094, 1567, 1577, 0, 184, 187,
	190, 193, 0, 220, 0, 0, 695, 678, 0, 783,
	786, 0, 763, 818, 1599, 0, 274, 170, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 1908, 917, 923, 0, 1011, 1119, 0, 946, 931,
	0, 0, 0, 946, 950, 951, 953, 954, 0, 0,
	1116, 0, 247, 340, 138, 138, 138, 1565, 138, 138,
	159, 334, 337, 343, 391, 998, 170, 168, 1777, 166,
	163, 165, 0, 0, 0, 696, 698, 699, 700, 701,
	0, 1628, 0, 1736, 1628, 143, 170, 286, 448, 453,
	565, 0, 598, 617, 671, 669, 606, 0, 0, 0,
	619, 0, 0, 0, 0, 0, 654, 655, 659, 1113,
	967, 0, 1030, 0, 1027, 1033, 1034, 0, 1015, 843,
	844, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1317, 0, -2, 1296, 1299, 1303, 1305, 1307, 0, 0,
	0, 0, 0, 0, 1496, 0, 1498, 1318, 1550, 1553,
	1468, 0, 0, 1008, 1009, 1009, 1009, 1385, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 1511, 1512, 0,
	1378, 0, 1544, 0, 0, 0, 1387, 0, 0, 0,
	1188, 1162, 0, 1216, 1214, 1215, 1209, 1216, 1213, 0,
	0, 0, 0, 0, 1406, 0, 0, 0, 1410, 1422,
	0, 1424, 1426, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 1326, 1429, 1532, 1533, 0, 0, 0, 0, 0,
	0, 1435, 0, 1538, 1436, 1438, 998, 1043, 1038, 1559,
	1095, 1045, 1047, 1560, 1590, 1038, 1038, 0, 1508, 0,
	0, 1086, 0, 0, 0, 1088, 0, 1077, 0, 1079,
	1092, 1061, 0, 0, 1054, 0, 1051, 1052, 1053, 763,
	1090, 1063, 1067, 1607, 0, 1111, 0, 1071, 1074, 0,
	0, 1620, 195, 199, 200, 196, 197, 0, 407, 0,
	0, 1510, 0, 1127, 0, 0, 0, 0, 0, 411,
	0, 461, -2, 492, 493, 495, 0, 491, 105, 858,
	0, 0, 849, 0, 110, 1908, 119, 0, 724, 0,
	1591, 0, 0, 0, 0, 860, 0, 1908, 138, 1908,
	138, 121, 124, 0, 128, 126, 0, 0, 715, 75,
	858, 78, 84, 0, 0, 0, 90, 0, 0, 851,
	0, 793, 796, 802, 58, 0, 853, 847, 0, 846,
	130, 79, 85, 0, 855, 77, 0, 170, 0, 1573,
	0, 0, 0, 0, 694, -2, 0, 0, 0, 0,
	0, 0, 280, 276, 0, 285, 291, 290, 809, -2,
	812, 821, 0, 823, 835, 0, 0, 0, 919, 923,
	0, 922, 996, 1023, 1010, 1118, 924, 946, 0, 0,
	0, 934, 936, 933, 930, 927, 1120, 0, 0, 0,
	0, 0, 242, 319, 322, 325, 328, 331, 345, 147,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 1628, 1628, 0, 1595, 144, 450, 0, 0, 608,
	610, 623, 646, 647, 710, 0, 710, 0, 0, 1014,
	845, 0, 1239, 1280, 0, 0, -2, 0, 0, 1284,
	0, 0, 0, -2, 0, 0, 0, 1497, 1499, 0,
	1552, 1380, 0, 0, 0, 0, 1362, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 0, 1369, 1370, 1471, 1514, 1542,
	1546, 0, 1608, 1612, 1449, 1450, 1454, 1598, 0, 0,
	0, 1207, 1211, 1391, 0, 0, 0, 0, 0, 0,
	0, 1515, 1525, 1527, 1322, 1323, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, -2, -2, -2, 1340,
	1341, 1342, -2, -2, -2, 0, 0, 0, 1528, 1530,
	1531, 1535, 1536, 0, 1432, 1433, 1434, 1537, 0, 1040,
	0, 1044, 0, 1040, 1040, 1005, 1084, 0, 0, 1107,
	0, 1059, 1078, 0, 1068, 1057, 0, 1058, 0, 1089,
	0, 1065, 1070, 0, 1073, 0, 1380, -2, 154, 409,
	393, 0, 0, 1129, 1139, 0, 1191, 1195, 413, 1093,
	0, 0, 0, 0, 139, 722, 746, 0, 0, 838,
	845, 0, 0, 112, 0, 0, 0, 120, 0, 117,
	0, 123, 127, 0, 0, 0, 0, 87, 88, 89,
	0, 93, 95, 0, 0, 0, 0, 0, 141, 0,
	215, 817, 221, 704, 0, 679, 0, 763, 787, 0,
	272, 0, 279, 0, 807, 822, 0, 0, 0, 0,
	0, 921, 923, 0, 914, 915, 946, 1022, 925, 944,
	-2, 943, 0, 0, 0, 1011, 952, 949, 955, 956,
	0, 167, 0, 162, 164, 0, 150, 0, 0, 697,
	702, 0, 0, 0, 0, 0, 566, 618, 648, 709,
	0, 0, 650, 1025, 1031, 1016, 845, 1282, 1286, 0,
	0, 0, 1288, -2, 0, 1310, -2, -2, 1500, 1551,
	1359, 1009, 1381, 1383, 1384, 1234, 1545, 0, 1456, 1453,
	0, 1440, 1163, 1401, 1402, 0, 0, 1405, 1407, 1408,
	1409, 1524, 0, 0, 0, 0, 1431, 994, 1445, 0,
	0, 1048, 1445, 1445, 1085, 0, 1087, 1082, 1080, 1055,
	1049, 0, 1608, 1072, 0, 0, 1122, 1128, 0, 1190,
	106, 107, 109, 0, 723, 0, 726, 0, 0, 0,
	0, 733, 734, 0, 0, 0, 0, 0, 752, 761,
	0, 840, 0, 0, 0, 114, 133, 0, 0, 859,
	0, 138, 138, 0, 0, 850, 0, 0, 0, 852,
	854, 848, 0, 856, 160, 712, 0, 683, 680, 695,
	678, 784, 816, 0, 277, 0, 834, 0, 0, 0,
	911, 923, 0, 916, 917, 293, 0, 0, 0, 932,
	935, 937, 1023, 0, 169, 170, 0, 0, 0, 0,
	0, 0, 452, 454, 0, 0, 460, 708, 0, 0,
	1017, 1290, -2, -2, 1311, 0, 1609, 1611, 1011, 0,
	1442, 0, 0, -2, 0, 0, 0, 980, 0, 1039,
	1037, 981, 982, 1106, 1092, 0, 1075, 0, 1130, 111,
	0, 727, 728, 1594, 730, 0, 732, 735, 0, 737,
	1630, 0, 741, 748, 753, 0, 704, 0, 758, 759,
	839, 750, 0, 113, 115, 132, 842, 116, 122, 0,
	0, 0, 0, 1677, 97, 0, 678, 711, 0, 681,
	0, 0, 0, 278, 281, 0, 284, 0, 835, 0,
	0, 0, 918, 919, 0, 0, 0, 946, 957, 149,
	0, 0, 761, 0, 0, 745, 0, 456, 0, 458,
	0, 649, 651, 1382, 1460, 0, 1403, 1404, -2, 0,
	1348, 1444, 1446, 0, 1060, 1050, 1123, 725, 729, 0,
	0, 767, 0, 0, 0, 756, 757, 712, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	684, 0, 704, 0, 282, 283, 761, 0, 761, 0,
	920, 921, 0, 939, 940, 942, 947, 0, 0, 704,
	761, 744, 455, 0, 0, 0, 0, 0, 0, 1455,
	1349, 0, 0, 0, 736, 772, 0, 0, 0, 754,
	755, 752, 0, 763, 118, 0, 841, 0, 716, 0,
	0, 719, 0, 0, 98, 1677, 96, 0, 0, 685,
	712, 683, 704, 0, 704, 0, 912, 0, 941, 170,
	170, 712, 704, 457, 459, 1452, 1457, 1461, -2, 1872,
	1680, 0, 1458, 1459, 1447, 1448, 0, 738, 768, 769,
	0, 764, 765, 766, 1629, 739, 740, 749, 760, 767,
	134, 713, 0, 0, 714, 0, 0, 101, 0, 103,
	0, 678, 682, 712, 0, 712, 0, 1120, 151, 152,
	742, 712, 0, 1463, 1464, 1465, 1466, 1467, 731, 770,
	0, 771, 0, 0, 0, 772, 717, 0, 720, 0,
	99, 0, 677, 832, 761, 832, 761, 938, 743, 0,
	773, 0, 776, 777, 0, 774, 752, 0, 0, 707,
	827, 0, 704, 829, 704, 1462, 775, 778, 779, 751,
	0, 0, 703, 705, 706, 833, 712, 712, 712, 0,
	832, 832, 718, 0, 828, 830, 0, 0, 712, 721,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 438, 3, 444, 439, 3,
	449, 450, 442, 440, 453, 441, 451, 443, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 457, 3,
	430, 432, 431, 434, 454, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 447, 3, 448, 445, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 455, 437, 456, 435,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 433, 57773, 436, 57774, 446,
	57775, 452, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1051
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1056
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1072
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1168
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1172
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1177
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1220
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1250
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1254
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1259
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1276
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1283
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1293
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1301
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1316
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1331
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1340
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1345
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1359
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1368
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1380
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1388
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1399
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1403
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1417
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1422
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1429
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1433
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1494
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1535
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1575
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1584
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = nil
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = nil
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1645
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1674
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1745
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1754
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1760
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1765
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1770
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1793
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1801
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1857
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1861
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1865
		{
			sqlVAL.union.val = nil
		}
	case 171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1871
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1907
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1937
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1943
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1946
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1965
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1973
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1975
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1979
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1982
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1990
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1995
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2016
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2034
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2036
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2037
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CREATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "create cast")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create operator")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create publication")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "create rule")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create server")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2065
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2068
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2069
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2072
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2073
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop server")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2102
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2105
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2129
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2133
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2139
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2160
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2166
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2176
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2187
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2207
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2215
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2225
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2250
		{

			sqlVAL.union.val = nil
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return helpWith(sqllex, "DELETE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2297
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2298
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2299
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2300
		{
			return helpWith(sqllex, "DROP")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2306
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2319
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2322
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2352
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2360
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2375
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2398
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2413
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2421
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2425
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2428
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2432
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2437
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2465
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2480
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DELETE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return helpWith(sqllex, "INSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			return helpWith(sqllex, "DELETE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "INSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2514
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2545
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2571
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2578
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2586
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2590
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2594
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "GRANT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2686
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2690
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "RESET")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2731
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2734
		{
			return helpWith(sqllex, "RESET")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2742
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2745
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2759
		{
			return helpWith(sqllex, "USE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2764
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2765
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2766
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "USE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2824
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2833
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2841
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2861
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2887
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2897
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2951
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2970
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2992
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2997
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3008
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3046
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = tree.Low
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = tree.Normal
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = tree.High
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3097
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3101
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3105
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3138
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3141
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3142
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3143
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3149
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3152
		{
			return helpWith(sqllex, "SHOW")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.str = "client_encoding"
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.str = "timezone"
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3190
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3195
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3211
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3227
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3234
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3242
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3263
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3266
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3268
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3271
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3279
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3307
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3323
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3329
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3335
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3347
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3353
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3365
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = true
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = true
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = false
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3389
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3395
		{
			sqlVAL.union.val = true
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = false
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3410
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3413
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3415
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3422
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3434
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3436
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3470
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = true
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = false
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3509
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3521
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3531
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3543
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3548
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3592
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3600
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3608
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3637
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3653
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3661
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3666
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3790
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3794
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3833
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3837
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3887
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3890
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3926
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3939
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3953
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3954
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3955
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3959
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3971
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3984
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3985
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3986
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4000
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4001
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4002
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4003
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4004
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4005
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4006
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4007
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4028
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4034
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4037
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4041
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4050
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4057
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4062
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4067
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.str = ""
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4087
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4100
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4107
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4113
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4133
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4143
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4157
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4178
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4194
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4198
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4202
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4220
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4224
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4232
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4236
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4244
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4258
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4262
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4269
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4279
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4301
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4351
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4363
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4364
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4365
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4367
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4368
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4423
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4427
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4456
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4502
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4527
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4532
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4536
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4547
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4552
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4555
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4557
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4559
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4562
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4567
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4580
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4595
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4603
		{
			sqlVAL.union.val = nil
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4620
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4625
		{
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4626
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4634
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4642
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4643
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4646
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4647
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4653
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4655
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4657
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4659
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4661
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4663
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4679
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4693
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4708
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4722
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4736
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4739
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4740
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = false
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = true
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = false
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4788
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.str = ""
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.Descending
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4812
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4835
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4841
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4849
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4855
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4863
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4869
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4887
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4890
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4891
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4902
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4924
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4940
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4941
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4978
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4980
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4992
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4993
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4994
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5002
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5009
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5012
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5013
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.str = ""
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.str = ""
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5039
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5049
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5059
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5072
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5078
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5083
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5087
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5091
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5109
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.str = ""
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5157
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5161
		{
			sqlVAL.str = ""
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.str = ""
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.str = ""
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5186
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5187
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5213
		{
			return helpWith(sqllex, "INSERT")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5224
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5231
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5244
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5289
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5306
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5307
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5315
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 947:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5352
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5356
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5357
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5361
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5378
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5381
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5465
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5478
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5479
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			return helpWith(sqllex, "SELECT")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5520
		{
			return helpWith(sqllex, "VALUES")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5521
		{
			return helpWith(sqllex, "TABLE")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5570
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5582
		{
			return helpWith(sqllex, "SELECT")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5626
		{
			return helpWith(sqllex, "TABLE")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5642
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5646
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5650
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5669
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = nil
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5682
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5683
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = true
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = false
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = false
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5701
		{
			sqlVAL.union.val = true
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5712
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5713
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5716
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5717
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5751
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5756
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5771
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5791
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5795
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5804
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5824
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5837
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5848
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5851
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5852
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5905
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5907
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5919
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5922
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5930
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5944
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5949
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5954
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5960
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5971
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5982
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5990
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6028
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6042
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6077
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6088
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6140
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6142
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = nil
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = true
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = false
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6215
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.str = tree.AstFull
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.str = tree.AstRight
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.str = tree.AstInner
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6259
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6260
		{
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.str = tree.AstHash
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.str = ""
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6316
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6317
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6322
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6327
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6345
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6351
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6388
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6401
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6409
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6410
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6431
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6432
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6434
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6442
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6454
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6455
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = types.String
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = types.Name
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6505
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6517
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = types.INet
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = types.Oid
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6576
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6584
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = nil
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.union.val = types.Int2
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = types.Int2
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = types.Int4
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = types.Int
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = types.Int
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = types.Int
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = types.Float4
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = types.Float4
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = types.Float
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = types.Float
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6651
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6659
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6667
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = types.Bool
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = types.Bool
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = types.RegType
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6708
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = types.Float
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6727
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6733
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6755
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6773
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6777
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = types.String
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = true
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = false
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = types.Date
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6804
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6809
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6816
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6817
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6827
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6843
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = true
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = false
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = false
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = types.Interval
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = tree.Year
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = tree.Month
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = tree.Day
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = tree.Month
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = nil
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = tree.Second
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6930
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6965
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6974
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6979
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7218
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7284
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7306
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7505
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7514
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7532
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7541
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7580
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7591
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7592
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7605
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7616
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7623
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7637
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7725
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7737
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7760
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7770
		{
			return unimplemented(sqllex, "treat")
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7791
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7801
		{
			return unimplemented(sqllex, "within group")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7802
		{
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.str = ""
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7928
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7941
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8015
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = tree.Any
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = tree.Some
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.All
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.Div
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.LT
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.GT
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.LE
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.GE
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.NE
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.Like
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8375
		{
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8376
		{
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8425
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8448
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8522
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8542
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8551
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8724
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8736
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8742
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8766
		{
			sqlVAL.str = ""
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
