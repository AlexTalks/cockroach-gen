// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}
func (u *sqlSymUnion) typeReference() tree.ResolvableTypeReference {
	return u.val.(tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) typeReferences() []tree.ResolvableTypeReference {
	return u.val.([]tree.ResolvableTypeReference)
}

//line sql-gen.y:650
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10508

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1143,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	196, 967,
	208, 967,
	223, 250,
	316, 250,
	325, 764,
	353, 250,
	362, 764,
	399, 764,
	423, 250,
	448, 764,
	-2, 0,
	-1, 78,
	223, 254,
	-2, 0,
	-1, 79,
	115, 1143,
	202, 1143,
	433, 1143,
	434, 1143,
	-2, 0,
	-1, 91,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1085,
	-1, 123,
	135, 673,
	222, 673,
	319, 653,
	367, 653,
	416, 673,
	-2, 0,
	-1, 124,
	4, 1145,
	21, 1145,
	22, 1145,
	23, 1145,
	24, 1145,
	25, 1145,
	27, 1145,
	28, 1145,
	34, 1145,
	39, 1145,
	40, 1145,
	41, 1145,
	42, 1145,
	43, 1145,
	44, 1145,
	45, 1145,
	47, 1145,
	48, 1145,
	49, 1145,
	51, 1145,
	52, 1145,
	53, 1145,
	54, 1145,
	55, 1145,
	59, 1145,
	60, 1145,
	61, 1145,
	62, 1145,
	64, 1145,
	65, 1145,
	66, 1145,
	70, 1145,
	71, 1145,
	72, 1145,
	73, 1145,
	74, 1145,
	75, 1145,
	76, 1145,
	79, 1145,
	80, 1145,
	81, 1145,
	82, 1145,
	84, 1145,
	86, 1145,
	87, 1145,
	88, 1145,
	90, 1145,
	92, 1145,
	93, 1145,
	101, 1145,
	102, 1145,
	103, 1145,
	104, 1145,
	106, 1145,
	107, 1145,
	108, 1145,
	110, 1145,
	111, 1145,
	112, 1145,
	114, 1145,
	115, 1145,
	117, 1145,
	120, 1145,
	121, 1145,
	122, 1145,
	124, 1145,
	126, 1145,
	127, 1145,
	129, 1145,
	130, 1145,
	131, 1145,
	132, 1145,
	133, 1145,
	134, 1145,
	135, 1145,
	136, 1145,
	137, 1145,
	138, 1145,
	139, 1145,
	140, 1145,
	141, 1145,
	142, 1145,
	144, 1145,
	150, 1145,
	151, 1145,
	152, 1145,
	153, 1145,
	157, 1145,
	159, 1145,
	163, 1145,
	164, 1145,
	165, 1145,
	166, 1145,
	167, 1145,
	168, 1145,
	170, 1145,
	171, 1145,
	173, 1145,
	174, 1145,
	176, 1145,
	177, 1145,
	178, 1145,
	179, 1145,
	180, 1145,
	181, 1145,
	182, 1145,
	183, 1145,
	184, 1145,
	186, 1145,
	187, 1145,
	189, 1145,
	190, 1145,
	191, 1145,
	192, 1145,
	196, 1145,
	197, 1145,
	198, 1145,
	199, 1145,
	202, 1145,
	203, 1145,
	204, 1145,
	206, 1145,
	208, 1145,
	210, 1145,
	212, 1145,
	213, 1145,
	214, 1145,
	216, 1145,
	220, 1145,
	221, 1145,
	222, 1145,
	223, 1145,
	224, 1145,
	226, 1145,
	227, 1145,
	229, 1145,
	230, 1145,
	232, 1145,
	233, 1145,
	236, 1145,
	237, 1145,
	238, 1145,
	241, 1145,
	242, 1145,
	243, 1145,
	244, 1145,
	246, 1145,
	247, 1145,
	248, 1145,
	249, 1145,
	250, 1145,
	251, 1145,
	252, 1145,
	253, 1145,
	254, 1145,
	255, 1145,
	256, 1145,
	258, 1145,
	260, 1145,
	261, 1145,
	262, 1145,
	263, 1145,
	264, 1145,
	266, 1145,
	268, 1145,
	270, 1145,
	272, 1145,
	273, 1145,
	274, 1145,
	275, 1145,
	276, 1145,
	279, 1145,
	282, 1145,
	283, 1145,
	284, 1145,
	285, 1145,
	288, 1145,
	289, 1145,
	290, 1145,
	292, 1145,
	294, 1145,
	295, 1145,
	296, 1145,
	297, 1145,
	298, 1145,
	299, 1145,
	300, 1145,
	301, 1145,
	302, 1145,
	303, 1145,
	305, 1145,
	306, 1145,
	307, 1145,
	308, 1145,
	309, 1145,
	310, 1145,
	311, 1145,
	312, 1145,
	313, 1145,
	315, 1145,
	317, 1145,
	318, 1145,
	319, 1145,
	320, 1145,
	321, 1145,
	322, 1145,
	323, 1145,
	324, 1145,
	325, 1145,
	326, 1145,
	333, 1145,
	335, 1145,
	336, 1145,
	337, 1145,
	338, 1145,
	339, 1145,
	340, 1145,
	341, 1145,
	342, 1145,
	344, 1145,
	346, 1145,
	347, 1145,
	348, 1145,
	349, 1145,
	350, 1145,
	351, 1145,
	353, 1145,
	354, 1145,
	355, 1145,
	356, 1145,
	357, 1145,
	358, 1145,
	359, 1145,
	360, 1145,
	362, 1145,
	363, 1145,
	364, 1145,
	365, 1145,
	366, 1145,
	367, 1145,
	369, 1145,
	370, 1145,
	371, 1145,
	372, 1145,
	373, 1145,
	375, 1145,
	376, 1145,
	377, 1145,
	379, 1145,
	381, 1145,
	382, 1145,
	383, 1145,
	384, 1145,
	385, 1145,
	386, 1145,
	387, 1145,
	388, 1145,
	389, 1145,
	390, 1145,
	391, 1145,
	392, 1145,
	393, 1145,
	395, 1145,
	396, 1145,
	398, 1145,
	400, 1145,
	401, 1145,
	402, 1145,
	403, 1145,
	404, 1145,
	405, 1145,
	406, 1145,
	408, 1145,
	409, 1145,
	410, 1145,
	411, 1145,
	412, 1145,
	414, 1145,
	416, 1145,
	417, 1145,
	418, 1145,
	419, 1145,
	420, 1145,
	422, 1145,
	423, 1145,
	424, 1145,
	426, 1145,
	427, 1145,
	430, 1145,
	431, 1145,
	432, 1145,
	433, 1145,
	434, 1145,
	435, 1145,
	436, 1145,
	438, 1145,
	441, 1145,
	442, 1145,
	443, 1145,
	444, 1145,
	445, 1145,
	446, 1145,
	448, 1145,
	449, 1145,
	450, 1145,
	455, 1145,
	456, 1145,
	457, 1145,
	458, 1145,
	459, 1145,
	460, 1145,
	-2, 0,
	-1, 125,
	1, 1019,
	212, 1019,
	315, 1019,
	323, 1019,
	463, 1019,
	486, 1019,
	-2, 0,
	-1, 127,
	1, 1019,
	486, 1019,
	-2, 0,
	-1, 128,
	1, 1019,
	486, 1019,
	-2, 0,
	-1, 129,
	1, 1019,
	413, 1019,
	486, 1019,
	-2, 0,
	-1, 155,
	128, 1113,
	145, 1113,
	158, 1113,
	205, 1113,
	235, 1113,
	277, 1113,
	287, 1113,
	428, 1113,
	-2, 1088,
	-1, 188,
	4, 1152,
	5, 1152,
	6, 1152,
	7, 1152,
	8, 1152,
	9, 1152,
	10, 1152,
	21, 1152,
	22, 1152,
	23, 1152,
	24, 1152,
	25, 1152,
	27, 1152,
	28, 1152,
	34, 1152,
	35, 1152,
	39, 1152,
	40, 1152,
	41, 1152,
	42, 1152,
	43, 1152,
	44, 1152,
	45, 1152,
	47, 1152,
	48, 1152,
	49, 1152,
	51, 1152,
	52, 1152,
	53, 1152,
	54, 1152,
	55, 1152,
	56, 1152,
	57, 1152,
	58, 1152,
	59, 1152,
	60, 1152,
	61, 1152,
	62, 1152,
	64, 1152,
	65, 1152,
	66, 1152,
	68, 1152,
	70, 1152,
	71, 1152,
	72, 1152,
	73, 1152,
	74, 1152,
	75, 1152,
	76, 1152,
	79, 1152,
	80, 1152,
	81, 1152,
	82, 1152,
	84, 1152,
	86, 1152,
	87, 1152,
	88, 1152,
	90, 1152,
	91, 1152,
	92, 1152,
	93, 1152,
	94, 1152,
	95, 1152,
	96, 1152,
	97, 1152,
	98, 1152,
	99, 1152,
	100, 1152,
	101, 1152,
	102, 1152,
	103, 1152,
	104, 1152,
	105, 1152,
	106, 1152,
	107, 1152,
	108, 1152,
	109, 1152,
	110, 1152,
	111, 1152,
	112, 1152,
	114, 1152,
	115, 1152,
	117, 1152,
	120, 1152,
	121, 1152,
	122, 1152,
	124, 1152,
	126, 1152,
	127, 1152,
	129, 1152,
	130, 1152,
	131, 1152,
	132, 1152,
	133, 1152,
	134, 1152,
	135, 1152,
	136, 1152,
	137, 1152,
	138, 1152,
	139, 1152,
	140, 1152,
	141, 1152,
	142, 1152,
	143, 1152,
	144, 1152,
	150, 1152,
	151, 1152,
	152, 1152,
	153, 1152,
	157, 1152,
	159, 1152,
	162, 1152,
	163, 1152,
	164, 1152,
	165, 1152,
	166, 1152,
	167, 1152,
	168, 1152,
	170, 1152,
	171, 1152,
	173, 1152,
	174, 1152,
	176, 1152,
	177, 1152,
	178, 1152,
	179, 1152,
	180, 1152,
	181, 1152,
	182, 1152,
	183, 1152,
	184, 1152,
	185, 1152,
	186, 1152,
	187, 1152,
	189, 1152,
	190, 1152,
	191, 1152,
	192, 1152,
	196, 1152,
	197, 1152,
	198, 1152,
	199, 1152,
	201, 1152,
	202, 1152,
	203, 1152,
	204, 1152,
	206, 1152,
	208, 1152,
	209, 1152,
	210, 1152,
	211, 1152,
	212, 1152,
	213, 1152,
	214, 1152,
	215, 1152,
	216, 1152,
	220, 1152,
	221, 1152,
	222, 1152,
	223, 1152,
	224, 1152,
	226, 1152,
	227, 1152,
	229, 1152,
	230, 1152,
	231, 1152,
	232, 1152,
	233, 1152,
	234, 1152,
	236, 1152,
	237, 1152,
	238, 1152,
	239, 1152,
	240, 1152,
	241, 1152,
	242, 1152,
	243, 1152,
	244, 1152,
	246, 1152,
	247, 1152,
	248, 1152,
	249, 1152,
	250, 1152,
	251, 1152,
	252, 1152,
	253, 1152,
	254, 1152,
	255, 1152,
	256, 1152,
	258, 1152,
	259, 1152,
	260, 1152,
	261, 1152,
	262, 1152,
	263, 1152,
	264, 1152,
	265, 1152,
	266, 1152,
	267, 1152,
	268, 1152,
	269, 1152,
	270, 1152,
	271, 1152,
	272, 1152,
	273, 1152,
	274, 1152,
	275, 1152,
	276, 1152,
	279, 1152,
	283, 1152,
	284, 1152,
	285, 1152,
	288, 1152,
	289, 1152,
	290, 1152,
	291, 1152,
	292, 1152,
	293, 1152,
	294, 1152,
	295, 1152,
	296, 1152,
	297, 1152,
	298, 1152,
	299, 1152,
	300, 1152,
	301, 1152,
	302, 1152,
	303, 1152,
	305, 1152,
	306, 1152,
	307, 1152,
	308, 1152,
	309, 1152,
	310, 1152,
	311, 1152,
	312, 1152,
	313, 1152,
	315, 1152,
	317, 1152,
	318, 1152,
	319, 1152,
	320, 1152,
	321, 1152,
	322, 1152,
	323, 1152,
	324, 1152,
	325, 1152,
	326, 1152,
	333, 1152,
	335, 1152,
	336, 1152,
	337, 1152,
	338, 1152,
	339, 1152,
	340, 1152,
	341, 1152,
	342, 1152,
	344, 1152,
	345, 1152,
	346, 1152,
	347, 1152,
	348, 1152,
	349, 1152,
	350, 1152,
	351, 1152,
	353, 1152,
	354, 1152,
	355, 1152,
	356, 1152,
	357, 1152,
	358, 1152,
	359, 1152,
	360, 1152,
	362, 1152,
	363, 1152,
	364, 1152,
	365, 1152,
	366, 1152,
	367, 1152,
	368, 1152,
	369, 1152,
	370, 1152,
	371, 1152,
	372, 1152,
	373, 1152,
	374, 1152,
	375, 1152,
	376, 1152,
	377, 1152,
	379, 1152,
	381, 1152,
	382, 1152,
	383, 1152,
	384, 1152,
	385, 1152,
	386, 1152,
	387, 1152,
	388, 1152,
	389, 1152,
	390, 1152,
	391, 1152,
	392, 1152,
	393, 1152,
	395, 1152,
	396, 1152,
	397, 1152,
	398, 1152,
	400, 1152,
	401, 1152,
	402, 1152,
	403, 1152,
	404, 1152,
	405, 1152,
	406, 1152,
	408, 1152,
	409, 1152,
	410, 1152,
	411, 1152,
	412, 1152,
	414, 1152,
	416, 1152,
	417, 1152,
	418, 1152,
	419, 1152,
	420, 1152,
	421, 1152,
	422, 1152,
	423, 1152,
	424, 1152,
	426, 1152,
	427, 1152,
	429, 1152,
	430, 1152,
	431, 1152,
	432, 1152,
	433, 1152,
	434, 1152,
	435, 1152,
	436, 1152,
	437, 1152,
	438, 1152,
	441, 1152,
	442, 1152,
	443, 1152,
	444, 1152,
	445, 1152,
	446, 1152,
	448, 1152,
	449, 1152,
	450, 1152,
	455, 1152,
	456, 1152,
	457, 1152,
	458, 1152,
	459, 1152,
	460, 1152,
	461, 1152,
	467, 1152,
	474, 1152,
	475, 1152,
	476, 1152,
	483, 1152,
	487, 1152,
	-2, 0,
	-1, 567,
	161, 1852,
	413, 1852,
	466, 1852,
	485, 1852,
	-2, 0,
	-1, 568,
	161, 1931,
	413, 1931,
	466, 1931,
	485, 1931,
	-2, 0,
	-1, 569,
	161, 1840,
	413, 1840,
	466, 1840,
	485, 1840,
	-2, 0,
	-1, 571,
	161, 2020,
	413, 2020,
	466, 2020,
	485, 2020,
	-2, 0,
	-1, 573,
	161, 2049,
	413, 2049,
	466, 2049,
	485, 2049,
	-2, 0,
	-1, 580,
	161, 1946,
	413, 1946,
	466, 1946,
	485, 1946,
	-2, 511,
	-1, 608,
	485, 1796,
	488, 1796,
	-2, 726,
	-1, 609,
	485, 1798,
	488, 1798,
	-2, 727,
	-1, 610,
	485, 1797,
	488, 1797,
	-2, 728,
	-1, 611,
	488, 1731,
	-2, 729,
	-1, 653,
	448, 942,
	-2, 765,
	-1, 691,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	59, 965,
	60, 965,
	61, 965,
	62, 965,
	64, 965,
	65, 965,
	66, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	76, 965,
	79, 965,
	80, 965,
	81, 965,
	82, 965,
	84, 965,
	86, 965,
	87, 965,
	88, 965,
	90, 965,
	92, 965,
	93, 965,
	101, 965,
	102, 965,
	103, 965,
	104, 965,
	106, 965,
	107, 965,
	108, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	115, 965,
	117, 965,
	120, 965,
	121, 965,
	122, 965,
	124, 965,
	126, 965,
	127, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	144, 965,
	150, 965,
	151, 965,
	152, 965,
	153, 965,
	157, 965,
	159, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	170, 965,
	171, 965,
	173, 965,
	174, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	186, 965,
	187, 965,
	189, 965,
	190, 965,
	191, 965,
	192, 965,
	196, 965,
	197, 965,
	198, 965,
	199, 965,
	202, 965,
	203, 965,
	204, 965,
	206, 965,
	208, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	216, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	224, 965,
	226, 965,
	227, 965,
	229, 965,
	230, 965,
	232, 965,
	233, 965,
	236, 965,
	237, 965,
	238, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	256, 965,
	258, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	266, 965,
	268, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	279, 965,
	283, 965,
	284, 965,
	285, 965,
	288, 965,
	289, 965,
	290, 965,
	292, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	313, 965,
	315, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	333, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	360, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	373, 965,
	375, 965,
	376, 965,
	377, 965,
	379, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	395, 965,
	396, 965,
	398, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	406, 965,
	408, 965,
	409, 965,
	410, 965,
	411, 965,
	412, 965,
	414, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	422, 965,
	423, 965,
	424, 965,
	426, 965,
	427, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	435, 965,
	436, 965,
	438, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	445, 965,
	446, 965,
	448, 965,
	449, 965,
	450, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	459, 965,
	460, 965,
	-2, 0,
	-1, 756,
	319, 654,
	367, 654,
	-2, 0,
	-1, 757,
	319, 653,
	367, 653,
	-2, 601,
	-1, 761,
	1, 683,
	482, 683,
	484, 683,
	486, 683,
	-2, 0,
	-1, 762,
	1, 725,
	158, 725,
	482, 725,
	484, 725,
	486, 725,
	-2, 0,
	-1, 770,
	1, 657,
	482, 657,
	484, 657,
	486, 657,
	-2, 0,
	-1, 773,
	1, 683,
	482, 683,
	484, 683,
	486, 683,
	-2, 0,
	-1, 774,
	1, 685,
	482, 685,
	484, 685,
	486, 685,
	-2, 0,
	-1, 775,
	1, 688,
	482, 688,
	484, 688,
	486, 688,
	-2, 0,
	-1, 780,
	1, 704,
	482, 704,
	484, 704,
	486, 704,
	-2, 0,
	-1, 781,
	1, 706,
	482, 706,
	484, 706,
	486, 706,
	-2, 0,
	-1, 825,
	145, 1154,
	158, 1154,
	235, 1154,
	277, 1154,
	-2, 1092,
	-1, 839,
	145, 1153,
	158, 1153,
	235, 1153,
	277, 1153,
	-2, 1089,
	-1, 865,
	485, 1795,
	-2, 519,
	-1, 893,
	5, 1787,
	483, 1785,
	-2, 1776,
	-1, 901,
	5, 1808,
	483, 1805,
	-2, 1796,
	-1, 902,
	5, 1809,
	483, 1806,
	-2, 1797,
	-1, 910,
	485, 1793,
	-2, 1775,
	-1, 911,
	483, 2127,
	-2, 1794,
	-1, 934,
	483, 2126,
	-2, 1810,
	-1, 935,
	5, 1315,
	-2, 2097,
	-1, 936,
	5, 1316,
	-2, 2098,
	-1, 937,
	5, 1317,
	-2, 2112,
	-1, 938,
	5, 1318,
	-2, 2077,
	-1, 939,
	5, 1319,
	-2, 2110,
	-1, 940,
	5, 1327,
	-2, 2089,
	-1, 941,
	5, 1314,
	-2, 2085,
	-1, 942,
	5, 1314,
	-2, 2084,
	-1, 943,
	5, 1314,
	-2, 2103,
	-1, 944,
	5, 1325,
	-2, 2079,
	-1, 945,
	5, 1330,
	-2, 2078,
	-1, 946,
	5, 1332,
	-2, 2122,
	-1, 949,
	5, 1354,
	-2, 2115,
	-1, 950,
	5, 1346,
	-2, 2116,
	-1, 951,
	5, 1354,
	-2, 2117,
	-1, 952,
	5, 1350,
	-2, 2118,
	-1, 953,
	5, 1301,
	-2, 2090,
	-1, 954,
	5, 1302,
	-2, 2091,
	-1, 981,
	5, 1337,
	-2, 2123,
	-1, 982,
	5, 1338,
	-2, 2113,
	-1, 983,
	5, 1339,
	449, 1339,
	-2, 2080,
	-1, 984,
	5, 1340,
	449, 1340,
	-2, 2081,
	-1, 1021,
	483, 1805,
	-2, 1796,
	-1, 1022,
	483, 1806,
	-2, 1797,
	-1, 1051,
	161, 2049,
	413, 2049,
	466, 2049,
	485, 2049,
	-2, 0,
	-1, 1054,
	1, 497,
	486, 497,
	-2, 1027,
	-1, 1179,
	335, 1771,
	476, 1771,
	-2, 1769,
	-1, 1191,
	487, 1771,
	-2, 1772,
	-1, 1192,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1141,
	-1, 1240,
	325, 764,
	448, 764,
	-2, 249,
	-1, 1263,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1141,
	-1, 1270,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	59, 965,
	60, 965,
	61, 965,
	62, 965,
	64, 965,
	65, 965,
	66, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	76, 965,
	79, 965,
	80, 965,
	81, 965,
	82, 965,
	84, 965,
	86, 965,
	87, 965,
	88, 965,
	90, 965,
	92, 965,
	93, 965,
	101, 965,
	102, 965,
	103, 965,
	104, 965,
	106, 965,
	107, 965,
	108, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	115, 965,
	117, 965,
	120, 965,
	121, 965,
	122, 965,
	124, 965,
	126, 965,
	127, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	150, 965,
	151, 965,
	152, 965,
	153, 965,
	157, 965,
	159, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	170, 965,
	171, 965,
	173, 965,
	174, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	186, 965,
	187, 965,
	189, 965,
	190, 965,
	191, 965,
	192, 965,
	197, 965,
	198, 965,
	199, 965,
	202, 965,
	203, 965,
	204, 965,
	206, 965,
	208, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	216, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	224, 965,
	226, 965,
	227, 965,
	229, 965,
	230, 965,
	232, 965,
	233, 965,
	236, 965,
	237, 965,
	238, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	256, 965,
	258, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	266, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	279, 965,
	281, 965,
	283, 965,
	284, 965,
	285, 965,
	288, 965,
	289, 965,
	290, 965,
	292, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	313, 965,
	315, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	333, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	360, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	373, 965,
	375, 965,
	376, 965,
	377, 965,
	379, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	395, 965,
	396, 965,
	398, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	406, 965,
	408, 965,
	409, 965,
	410, 965,
	411, 965,
	412, 965,
	414, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	422, 965,
	423, 965,
	424, 965,
	426, 965,
	427, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	435, 965,
	436, 965,
	438, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	445, 965,
	446, 965,
	448, 965,
	449, 965,
	450, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	459, 965,
	460, 965,
	-2, 0,
	-1, 1335,
	1, 372,
	482, 372,
	484, 372,
	486, 372,
	-2, 1112,
	-1, 1338,
	4, 2121,
	11, 2121,
	12, 2121,
	14, 2121,
	15, 2121,
	16, 2121,
	17, 2121,
	18, 2121,
	19, 2121,
	21, 2121,
	22, 2121,
	23, 2121,
	24, 2121,
	25, 2121,
	27, 2121,
	28, 2121,
	31, 2121,
	32, 2121,
	34, 2121,
	36, 2121,
	39, 2121,
	40, 2121,
	41, 2121,
	42, 2121,
	43, 2121,
	44, 2121,
	45, 2121,
	47, 2121,
	48, 2121,
	49, 2121,
	51, 2121,
	52, 2121,
	53, 2121,
	54, 2121,
	55, 2121,
	59, 2121,
	60, 2121,
	61, 2121,
	62, 2121,
	64, 2121,
	65, 2121,
	66, 2121,
	67, 2121,
	70, 2121,
	71, 2121,
	72, 2121,
	73, 2121,
	74, 2121,
	75, 2121,
	76, 2121,
	77, 2121,
	79, 2121,
	80, 2121,
	81, 2121,
	82, 2121,
	84, 2121,
	85, 2121,
	86, 2121,
	87, 2121,
	88, 2121,
	90, 2121,
	91, 2121,
	92, 2121,
	93, 2121,
	101, 2121,
	102, 2121,
	103, 2121,
	104, 2121,
	106, 2121,
	107, 2121,
	108, 2121,
	110, 2121,
	111, 2121,
	112, 2121,
	114, 2121,
	115, 2121,
	117, 2121,
	120, 2121,
	121, 2121,
	122, 2121,
	124, 2121,
	126, 2121,
	127, 2121,
	129, 2121,
	130, 2121,
	131, 2121,
	132, 2121,
	133, 2121,
	134, 2121,
	135, 2121,
	136, 2121,
	137, 2121,
	138, 2121,
	139, 2121,
	140, 2121,
	141, 2121,
	142, 2121,
	146, 2121,
	147, 2121,
	148, 2121,
	149, 2121,
	150, 2121,
	151, 2121,
	152, 2121,
	153, 2121,
	156, 2121,
	157, 2121,
	159, 2121,
	162, 2121,
	163, 2121,
	164, 2121,
	165, 2121,
	166, 2121,
	167, 2121,
	168, 2121,
	170, 2121,
	171, 2121,
	173, 2121,
	174, 2121,
	176, 2121,
	177, 2121,
	178, 2121,
	179, 2121,
	180, 2121,
	181, 2121,
	182, 2121,
	183, 2121,
	184, 2121,
	185, 2121,
	186, 2121,
	187, 2121,
	188, 2121,
	189, 2121,
	190, 2121,
	191, 2121,
	192, 2121,
	194, 2121,
	195, 2121,
	197, 2121,
	198, 2121,
	199, 2121,
	201, 2121,
	202, 2121,
	203, 2121,
	204, 2121,
	206, 2121,
	208, 2121,
	209, 2121,
	210, 2121,
	211, 2121,
	212, 2121,
	213, 2121,
	214, 2121,
	215, 2121,
	216, 2121,
	218, 2121,
	219, 2121,
	220, 2121,
	221, 2121,
	222, 2121,
	223, 2121,
	224, 2121,
	226, 2121,
	227, 2121,
	229, 2121,
	230, 2121,
	231, 2121,
	232, 2121,
	233, 2121,
	234, 2121,
	236, 2121,
	237, 2121,
	238, 2121,
	241, 2121,
	242, 2121,
	243, 2121,
	244, 2121,
	245, 2121,
	246, 2121,
	247, 2121,
	248, 2121,
	249, 2121,
	250, 2121,
	251, 2121,
	252, 2121,
	253, 2121,
	254, 2121,
	255, 2121,
	256, 2121,
	258, 2121,
	259, 2121,
	260, 2121,
	261, 2121,
	262, 2121,
	263, 2121,
	264, 2121,
	266, 2121,
	269, 2121,
	270, 2121,
	272, 2121,
	273, 2121,
	274, 2121,
	275, 2121,
	276, 2121,
	279, 2121,
	283, 2121,
	284, 2121,
	285, 2121,
	286, 2121,
	288, 2121,
	289, 2121,
	290, 2121,
	292, 2121,
	294, 2121,
	295, 2121,
	296, 2121,
	297, 2121,
	298, 2121,
	299, 2121,
	300, 2121,
	301, 2121,
	302, 2121,
	303, 2121,
	305, 2121,
	306, 2121,
	307, 2121,
	308, 2121,
	309, 2121,
	310, 2121,
	311, 2121,
	312, 2121,
	313, 2121,
	315, 2121,
	317, 2121,
	318, 2121,
	319, 2121,
	320, 2121,
	321, 2121,
	322, 2121,
	323, 2121,
	324, 2121,
	325, 2121,
	326, 2121,
	333, 2121,
	334, 2121,
	335, 2121,
	336, 2121,
	337, 2121,
	338, 2121,
	339, 2121,
	340, 2121,
	341, 2121,
	342, 2121,
	344, 2121,
	345, 2121,
	346, 2121,
	347, 2121,
	348, 2121,
	349, 2121,
	350, 2121,
	351, 2121,
	352, 2121,
	353, 2121,
	354, 2121,
	355, 2121,
	356, 2121,
	357, 2121,
	358, 2121,
	359, 2121,
	360, 2121,
	362, 2121,
	363, 2121,
	364, 2121,
	365, 2121,
	366, 2121,
	367, 2121,
	369, 2121,
	370, 2121,
	371, 2121,
	372, 2121,
	373, 2121,
	374, 2121,
	375, 2121,
	376, 2121,
	377, 2121,
	379, 2121,
	381, 2121,
	382, 2121,
	383, 2121,
	384, 2121,
	385, 2121,
	386, 2121,
	387, 2121,
	388, 2121,
	389, 2121,
	390, 2121,
	391, 2121,
	392, 2121,
	393, 2121,
	395, 2121,
	396, 2121,
	398, 2121,
	400, 2121,
	401, 2121,
	402, 2121,
	403, 2121,
	404, 2121,
	405, 2121,
	406, 2121,
	408, 2121,
	409, 2121,
	410, 2121,
	411, 2121,
	412, 2121,
	414, 2121,
	416, 2121,
	417, 2121,
	418, 2121,
	419, 2121,
	420, 2121,
	422, 2121,
	423, 2121,
	424, 2121,
	426, 2121,
	427, 2121,
	430, 2121,
	431, 2121,
	432, 2121,
	433, 2121,
	434, 2121,
	435, 2121,
	436, 2121,
	438, 2121,
	441, 2121,
	442, 2121,
	443, 2121,
	444, 2121,
	445, 2121,
	446, 2121,
	448, 2121,
	449, 2121,
	450, 2121,
	455, 2121,
	456, 2121,
	457, 2121,
	458, 2121,
	459, 2121,
	460, 2121,
	461, 2121,
	462, 2121,
	464, 2121,
	465, 2121,
	466, 2121,
	467, 2121,
	468, 2121,
	469, 2121,
	471, 2121,
	472, 2121,
	473, 2121,
	474, 2121,
	475, 2121,
	476, 2121,
	477, 2121,
	478, 2121,
	479, 2121,
	481, 2121,
	484, 2121,
	485, 2121,
	487, 2121,
	488, 2121,
	-2, 0,
	-1, 1343,
	161, 2020,
	413, 2020,
	466, 2020,
	485, 2020,
	-2, 0,
	-1, 1375,
	319, 654,
	367, 654,
	-2, 0,
	-1, 1399,
	1, 649,
	482, 649,
	484, 649,
	486, 649,
	-2, 0,
	-1, 1400,
	1, 674,
	482, 674,
	484, 674,
	486, 674,
	-2, 0,
	-1, 1401,
	1, 656,
	482, 656,
	484, 656,
	486, 656,
	-2, 0,
	-1, 1403,
	1, 660,
	482, 660,
	484, 660,
	486, 660,
	-2, 0,
	-1, 1430,
	1, 2069,
	482, 2069,
	484, 2069,
	485, 2069,
	486, 2069,
	-2, 702,
	-1, 1431,
	1, 2017,
	482, 2017,
	484, 2017,
	485, 2017,
	486, 2017,
	-2, 703,
	-1, 1446,
	1, 1022,
	486, 1022,
	-2, 1027,
	-1, 1449,
	145, 1153,
	158, 1153,
	235, 1153,
	277, 1153,
	-2, 1093,
	-1, 1544,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1515,
	-1, 1604,
	484, 1665,
	-2, 0,
	-1, 1639,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1232,
	-1, 1685,
	483, 1342,
	-2, 1330,
	-1, 1718,
	1, 499,
	486, 499,
	-2, 1027,
	-1, 1923,
	1, 651,
	482, 651,
	484, 651,
	486, 651,
	-2, 0,
	-1, 1924,
	1, 676,
	482, 676,
	484, 676,
	486, 676,
	-2, 0,
	-1, 1996,
	350, 1178,
	351, 1178,
	-2, 1375,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1395,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1396,
	-1, 2029,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1397,
	-1, 2030,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1398,
	-1, 2031,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1399,
	-1, 2032,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1400,
	-1, 2033,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1401,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1402,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1414,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1415,
	-1, 2048,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1416,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1421,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1425,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1433,
	-1, 2060,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1434,
	-1, 2061,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1435,
	-1, 2062,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1436,
	-1, 2174,
	5, 1808,
	161, 1676,
	483, 1805,
	-2, 1796,
	-1, 2175,
	161, 1677,
	-2, 2073,
	-1, 2176,
	161, 1678,
	-2, 1945,
	-1, 2177,
	161, 1679,
	-2, 1863,
	-1, 2178,
	161, 1680,
	-2, 1902,
	-1, 2179,
	161, 1681,
	-2, 1940,
	-1, 2180,
	161, 1682,
	-2, 2015,
	-1, 2181,
	161, 1683,
	-2, 1498,
	-1, 2250,
	1, 1233,
	2, 1233,
	91, 1233,
	128, 1233,
	145, 1233,
	158, 1233,
	162, 1233,
	172, 1233,
	175, 1233,
	201, 1233,
	205, 1233,
	215, 1233,
	231, 1233,
	235, 1233,
	259, 1233,
	277, 1233,
	281, 1233,
	287, 1233,
	343, 1233,
	345, 1233,
	428, 1233,
	439, 1233,
	452, 1233,
	453, 1233,
	454, 1233,
	463, 1233,
	482, 1233,
	484, 1233,
	486, 1233,
	488, 1233,
	-2, 1232,
	-1, 2263,
	483, 1777,
	-2, 1791,
	-1, 2286,
	483, 1341,
	-2, 1331,
	-1, 2388,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1141,
	-1, 2544,
	282, 1181,
	-2, 2111,
	-1, 2545,
	282, 1182,
	-2, 2004,
	-1, 2549,
	350, 1742,
	351, 1742,
	-2, 1496,
	-1, 2550,
	350, 1746,
	351, 1746,
	-2, 1497,
	-1, 2551,
	350, 1743,
	351, 1743,
	-2, 1496,
	-1, 2552,
	350, 1747,
	351, 1747,
	-2, 1497,
	-1, 2565,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1423,
	-1, 2566,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1427,
	-1, 2572,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1429,
	-1, 2769,
	212, 1027,
	315, 1027,
	323, 1027,
	463, 1027,
	-2, 496,
	-1, 2868,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1141,
	-1, 2959,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1431,
	-1, 2966,
	209, 0,
	211, 0,
	269, 0,
	-2, 1450,
	-1, 3032,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1479,
	-1, 3033,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1480,
	-1, 3034,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1481,
	-1, 3038,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1485,
	-1, 3039,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1486,
	-1, 3040,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1487,
	-1, 3086,
	483, 1778,
	-2, 1792,
	-1, 3182,
	485, 2227,
	-2, 1071,
	-1, 3233,
	209, 0,
	211, 0,
	269, 0,
	-2, 1451,
	-1, 3236,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1454,
	-1, 3237,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1456,
	-1, 3412,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1455,
	-1, 3413,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1457,
	-1, 3423,
	209, 0,
	-2, 1488,
	-1, 3553,
	209, 0,
	-2, 1489,
	-1, 3688,
	44, 0,
	185, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 2076,
}

const sqlPrivate = 57344

const sqlLast = 89155

var sqlAct = [...]int{

	220, 3590, 3456, 3484, 3821, 3574, 3698, 3453, 3654, 3787,
	3664, 3108, 3687, 2699, 3651, 3699, 3635, 3344, 2854, 3700,
	2442, 3741, 3491, 3442, 3216, 1024, 2998, 1897, 3557, 1211,
	3370, 2700, 3375, 3686, 3174, 849, 1330, 2014, 3401, 866,
	1810, 3500, 35, 2883, 3522, 2786, 3299, 840, 2074, 2876,
	3357, 3153, 1195, 3380, 1673, 1884, 1769, 2850, 2878, 3109,
	1458, 1083, 2477, 3428, 2951, 610, 2479, 2558, 2431, 578,
	1674, 3271, 2417, 1645, 2742, 2414, 702, 2405, 2377, 2682,
	1014, 2722, 2714, 1176, 2487, 610, 3215, 2476, 2426, 2428,
	2470, 2468, 2318, 2443, 2703, 2320, 1383, 1809, 1614, 1806,
	2681, 2243, 3057, 2011, 2593, 2206, 2118, 1552, 2087, 1805,
	848, 147, 3558, 893, 1184, 1882, 2242, 1778, 2007, 3485,
	2705, 1590, 2245, 904, 2389, 1256, 1794, 90, 2116, 4,
	2354, 2379, 897, 1067, 1754, 2486, 2542, 1756, 1446, 2748,
	2224, 1615, 2107, 1995, 1978, 1801, 1976, 1744, 1310, 2852,
	2415, 2071, 1351, 1336, 1634, 1326, 2436, 1320, 1056, 902,
	2203, 1329, 2310, 546, 1839, 1005, 532, 1261, 611, 214,
	554, 612, 1197, 1008, 2110, 2480, 1624, 2232, 2214, 213,
	2088, 2160, 987, 1585, 1536, 2170, 155, 1460, 1977, 1459,
	147, 1022, 562, 572, 947, 606, 1838, 1285, 1979, 678,
	1208, 2000, 653, 1768, 2355, 895, 1350, 878, 1334, 696,
	549, 40, 557, 39, 37, 28, 156, 26, 24, 1465,
	1010, 985, 1445, 751, 768, 3071, 2589, 3072, 1873, 1875,
	1875, 2701, 3839, 1875, 615, 1875, 2223, 1631, 3825, 3824,
	1859, 1004, 2223, 2223, 618, 844, 1229, 3803, 3801, 130,
	1543, 3314, 3314, 3797, 615, 63, 3724, 1815, 3722, 3720,
	3725, 839, 2223, 2223, 618, 3717, 2893, 2892, 2223, 3718,
	64, 125, 1473, 1474, 844, 63, 2274, 3714, 212, 3709,
	713, 3715, 68, 1815, 3684, 845, 3630, 3683, 1815, 3539,
	64, 1815, 58, 1504, 3682, 2767, 1064, 3061, 1890, 42,
	1476, 127, 68, 3679, 1020, 988, 988, 1890, 3678, 1036,
	1815, 1002, 1890, 2654, 2655, 41, 3673, 73, 3671, 3649,
	3314, 3061, 3314, 3314, 2654, 2655, 3629, 3623, 1475, 3622,
	2278, 2223, 1181, 2223, 826, 2602, 2215, 73, 1495, 44,
	59, 2603, 3369, 3617, 3616, 45, 1492, 3314, 3314, 1064,
	78, 3610, 3555, 128, 3536, 1815, 2278, 1890, 1815, 3533,
	43, 89, 2216, 3314, 825, 3493, 79, 86, 3473, 3494,
	78, 3472, 1815, 3464, 1905, 1815, 3333, 1815, 834, 2669,
	79, 89, 1041, 991, 1037, 992, 79, 86, 3229, 900,
	3463, 3434, 3414, 1815, 3314, 1815, 2278, 46, 3399, 3388,
	3341, 2916, 1890, 2908, 2223, 989, 2368, 1498, 1499, 1500,
	1501, 2309, 3332, 1773, 3313, 80, 2223, 1481, 3314, 3235,
	3190, 1724, 3184, 2278, 2924, 1228, 2924, 3151, 3081, 3079,
	3064, 3152, 3082, 3080, 2223, 80, 2982, 2978, 2923, 2915,
	1815, 2223, 2924, 2916, 2698, 2693, 2223, 1402, 2223, 2223,
	2692, 1874, 2908, 2645, 2223, 1503, 1505, 2646, 2660, 2654,
	2655, 2643, 2672, 2673, 2674, 2644, 2635, 2633, 2604, 2660,
	2636, 2223, 2223, 2466, 2465, 2592, 2411, 1893, 1893, 1490,
	1491, 2391, 2294, 2557, 1814, 1890, 2223, 2654, 2655, 2113,
	2672, 2673, 2674, 2277, 2272, 2265, 2222, 2278, 2223, 1815,
	2223, 1892, 2307, 1610, 1223, 1893, 1496, 3231, 1207, 3137,
	2954, 2932, 1632, 1804, 2894, 1876, 1876, 1385, 2259, 1876,
	2258, 1876, 2257, 2256, 2255, 2669, 993, 188, 990, 833,
	81, 2276, 832, 2895, 1561, 831, 830, 188, 829, 828,
	47, 824, 2439, 823, 822, 821, 820, 2670, 2522, 3287,
	81, 819, 818, 2669, 817, 816, 815, 814, 2670, 813,
	812, 60, 2114, 811, 810, 190, 50, 154, 84, 749,
	85, 748, 48, 747, 746, 190, 129, 902, 745, 744,
	1017, 902, 49, 743, 742, 741, 1217, 154, 84, 188,
	85, 3705, 740, 2892, 739, 1502, 1086, 53, 738, 737,
	1086, 123, 1200, 188, 2660, 188, 1200, 736, 735, 188,
	189, 126, 1066, 1497, 1060, 123, 1071, 701, 847, 734,
	189, 123, 1037, 733, 902, 732, 902, 190, 902, 731,
	182, 730, 2660, 729, 2115, 2112, 2676, 728, 183, 727,
	726, 190, 725, 190, 724, 723, 722, 190, 711, 157,
	124, 710, 1543, 669, 2671, 1200, 1187, 2675, 630, 157,
	2143, 3685, 2456, 1888, 158, 2671, 1874, 1216, 1971, 1221,
	124, 1227, 189, 629, 621, 2373, 620, 619, 592, 584,
	583, 582, 182, 1222, 158, 2675, 189, 3247, 189, 2215,
	183, 566, 189, 2670, 210, 1200, 182, 209, 182, 1200,
	2240, 208, 182, 1200, 183, 207, 183, 3092, 902, 1037,
	183, 157, 1054, 1200, 3, 206, 902, 205, 204, 203,
	202, 2670, 201, 200, 199, 157, 198, 157, 3075, 1493,
	1489, 157, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 197, 196, 2117, 195, 194, 193, 2925, 2341, 192,
	191, 1349, 2745, 2615, 2598, 2395, 1200, 2282, 1203, 1354,
	1079, 2266, 1173, 1178, 2696, 1049, 2249, 2129, 2127, 1752,
	1658, 1563, 902, 2665, 2663, 2664, 2656, 2657, 2658, 2659,
	2661, 2662, 1210, 615, 2697, 1209, 2664, 2656, 2657, 2658,
	2659, 2661, 2662, 618, 188, 1355, 1213, 1900, 2654, 2655,
	2671, 2672, 2673, 2674, 2422, 1635, 188, 188, 1593, 1073,
	147, 147, 1026, 1403, 1592, 2654, 2655, 1266, 1269, 3135,
	3597, 3548, 3427, 2654, 2655, 1593, 845, 1472, 2671, 1339,
	1341, 1592, 190, 3389, 3368, 1596, 1554, 1060, 1314, 1317,
	1060, 3542, 2111, 3452, 190, 190, 3540, 1473, 1474, 3384,
	3292, 3269, 1591, 2654, 2655, 902, 902, 902, 902, 902,
	902, 902, 3268, 188, 2669, 3262, 2290, 899, 1504, 1899,
	1412, 1337, 3261, 1450, 3260, 1476, 1179, 189, 3253, 1191,
	188, 3252, 3251, 3246, 3243, 3242, 902, 182, 3150, 189,
	189, 3096, 902, 3157, 3095, 183, 1404, 3094, 3085, 182,
	182, 190, 3052, 1475, 3051, 3050, 2974, 183, 183, 2970,
	1288, 2919, 2666, 2667, 2668, 2740, 2438, 1554, 190, 2665,
	2663, 2664, 2656, 2657, 2658, 2659, 2661, 2662, 157, 157,
	1449, 2689, 1001, 2680, 1268, 1268, 2653, 1473, 1474, 2650,
	2666, 2667, 2668, 2660, 2649, 188, 189, 2665, 2663, 2664,
	2656, 2657, 2658, 2659, 2661, 2662, 182, 1542, 2647, 1444,
	2660, 2642, 2641, 189, 183, 1476, 2640, 1555, 2660, 1553,
	1850, 2637, 1268, 182, 2634, 2614, 1360, 188, 2597, 2590,
	2467, 183, 1376, 190, 2250, 157, 1820, 2100, 1473, 1474,
	1472, 1272, 1481, 1475, 1818, 902, 902, 902, 2660, 2424,
	2694, 902, 157, 3559, 1471, 3834, 3796, 3795, 1022, 1504,
	1022, 3734, 1562, 845, 1612, 190, 1476, 3732, 3723, 1025,
	3000, 3589, 1447, 3585, 3582, 1323, 3581, 1086, 189, 1455,
	1503, 1505, 2670, 902, 3580, 826, 610, 3573, 182, 1454,
	1690, 610, 3567, 3537, 1475, 3521, 183, 3520, 2077, 902,
	2083, 3383, 3508, 1200, 1649, 1660, 3505, 3469, 1016, 1451,
	189, 3448, 1468, 1469, 3425, 825, 1670, 157, 902, 3409,
	182, 1713, 3408, 1595, 1086, 3396, 3395, 3361, 183, 3286,
	3267, 1496, 1481, 3205, 3202, 3126, 1666, 2670, 3125, 3112,
	3111, 3067, 1060, 3055, 1618, 1619, 876, 3156, 2965, 157,
	1540, 2926, 2909, 1750, 2869, 1721, 1621, 2834, 2813, 988,
	2789, 2788, 2762, 2619, 2618, 2613, 1715, 2581, 2404, 2760,
	1599, 1020, 147, 1020, 2654, 2655, 1587, 1588, 2737, 1598,
	1642, 1597, 1594, 1481, 1586, 1584, 2288, 845, 1668, 2671,
	2287, 3364, 2142, 1665, 2261, 1473, 1474, 2254, 2221, 2125,
	1657, 1613, 1608, 1607, 1716, 1606, 1473, 1474, 1605, 1604,
	1603, 2423, 1664, 1684, 1602, 1643, 1601, 1600, 1581, 1580,
	1579, 1503, 1505, 1476, 1578, 1577, 1576, 1575, 1574, 1573,
	1572, 1571, 1570, 1640, 1476, 1569, 1568, 1567, 1497, 1556,
	1718, 1901, 1541, 1539, 2671, 1534, 1048, 1039, 2789, 1762,
	1032, 1475, 3288, 3239, 3091, 615, 1200, 1200, 1611, 3078,
	615, 3070, 1475, 2601, 1086, 618, 2252, 3437, 2280, 3290,
	618, 3090, 1496, 1652, 1555, 1651, 1650, 1648, 1637, 1647,
	1646, 1669, 2654, 2655, 1687, 2758, 1712, 1537, 1791, 1653,
	1070, 1793, 1811, 1633, 1798, 1678, 3793, 3786, 1671, 2128,
	2126, 2666, 2667, 2668, 3335, 3583, 2879, 3496, 2665, 2663,
	2664, 2656, 2657, 2658, 2659, 2661, 2662, 1746, 1743, 2660,
	1741, 3495, 3387, 1736, 3334, 1743, 3073, 2911, 2656, 2657,
	2658, 2659, 2661, 2662, 1743, 2910, 3160, 1018, 2658, 2659,
	2661, 2662, 1064, 1069, 1375, 1064, 1084, 1635, 3543, 3501,
	1185, 1481, 1593, 3541, 2639, 2638, 3124, 1802, 1592, 1191,
	1477, 1478, 1479, 1480, 1482, 1483, 2656, 2657, 2658, 2659,
	2661, 2662, 1068, 808, 3451, 2563, 2343, 1777, 2359, 1497,
	1065, 1442, 2856, 1898, 2855, 2816, 1565, 3492, 1576, 3822,
	3710, 1200, 1384, 1200, 1843, 1200, 1576, 3697, 1064, 1385,
	861, 1807, 1719, 1200, 3140, 1730, 1200, 1055, 2670, 1812,
	1662, 1735, 1734, 809, 3128, 1743, 1745, 2930, 3429, 1200,
	1200, 1200, 1856, 1848, 2701, 1413, 1210, 615, 3706, 1209,
	3002, 2607, 2108, 3719, 2286, 1609, 1589, 618, 2848, 610,
	1847, 1797, 1244, 3716, 2888, 1915, 3103, 1017, 3575, 1017,
	1477, 1478, 1479, 1480, 1482, 1483, 3371, 3647, 1813, 1364,
	1864, 3564, 2792, 1000, 3119, 2474, 2841, 1851, 2435, 3757,
	3758, 2946, 3324, 2771, 1903, 1061, 1232, 806, 1853, 804,
	2295, 3609, 3831, 3482, 3475, 3142, 802, 3707, 1957, 3139,
	800, 1830, 1919, 1829, 1955, 797, 3138, 3100, 1904, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 3099, 843, 1242,
	665, 2612, 902, 2611, 902, 2671, 1738, 791, 845, 2610,
	845, 902, 2609, 1410, 1690, 1690, 1086, 1858, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 1337, 902, 1337, 902, 902, 902, 902,
	1988, 1288, 1975, 1861, 1862, 1861, 1866, 1867, 1062, 1243,
	1773, 1731, 2567, 2375, 1411, 842, 1063, 1049, 902, 1846,
	2367, 902, 902, 1878, 2012, 2013, 1880, 666, 2366, 1894,
	902, 1895, 1885, 1908, 902, 1887, 902, 902, 615, 1906,
	1409, 2346, 1061, 1740, 1086, 1362, 2273, 1061, 618, 2313,
	902, 902, 902, 902, 1070, 902, 902, 902, 902, 902,
	902, 902, 902, 2311, 1937, 2663, 2664, 2656, 2657, 2658,
	2659, 2661, 2662, 2759, 2058, 1739, 3608, 1684, 1684, 1191,
	1448, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	1206, 1999, 2773, 1483, 902, 2313, 2156, 844, 2155, 2016,
	2302, 1479, 1480, 1482, 1483, 1986, 1022, 1069, 1828, 2311,
	2432, 1070, 1278, 1086, 1277, 1276, 2931, 1275, 2525, 1974,
	3407, 1972, 1022, 1969, 1980, 794, 2089, 2090, 1987, 1973,
	1299, 1357, 826, 1913, 2345, 826, 826, 2815, 902, 1086,
	1238, 2089, 2105, 2104, 2281, 1062, 1984, 845, 1687, 1687,
	1062, 1965, 1970, 1063, 1251, 2264, 1064, 845, 1063, 1678,
	1678, 845, 2003, 2113, 1069, 2004, 2005, 2151, 2073, 1377,
	1029, 1909, 1421, 2153, 2334, 2081, 2073, 2540, 2154, 1453,
	2662, 2157, 2079, 2158, 2159, 3676, 2173, 2173, 2187, 2108,
	2089, 2237, 1927, 2207, 2209, 1047, 1473, 1474, 2555, 2213,
	2085, 2363, 1373, 1200, 1027, 3115, 1757, 1661, 3336, 3320,
	1758, 2528, 2333, 988, 2356, 2357, 2102, 1504, 3757, 1020,
	3703, 2356, 2357, 1922, 1476, 1863, 2229, 1923, 2937, 2936,
	2356, 2357, 1358, 1086, 1408, 1020, 2114, 2380, 841, 2519,
	2251, 2117, 1642, 2262, 1060, 2228, 3770, 1986, 3769, 845,
	3458, 720, 1475, 2271, 1753, 1721, 2770, 1985, 668, 667,
	1690, 2169, 2322, 147, 2189, 2198, 2236, 2182, 2241, 1441,
	3805, 2247, 2248, 2211, 1385, 1924, 590, 2219, 2220, 1262,
	3746, 3781, 2275, 2230, 1770, 1086, 2234, 2235, 1984, 1200,
	3221, 2340, 3220, 1064, 1968, 1640, 2885, 1030, 1064, 902,
	2314, 902, 2069, 1773, 2554, 1759, 1595, 1385, 2115, 2112,
	1766, 1747, 1748, 1240, 2527, 3627, 1260, 1399, 1983, 1761,
	2372, 1757, 798, 3406, 798, 1758, 1363, 2067, 3106, 2293,
	2349, 798, 1956, 1771, 1772, 799, 2524, 2344, 1954, 2376,
	798, 1481, 2397, 2289, 2399, 1930, 663, 2408, 662, 544,
	1982, 3460, 2827, 2364, 1964, 1016, 3704, 1016, 2292, 2325,
	3782, 1767, 2296, 1587, 1588, 1400, 3817, 3318, 836, 589,
	786, 1200, 1200, 539, 1200, 2348, 1773, 2991, 2821, 1503,
	1505, 1763, 2437, 1684, 1875, 2437, 1200, 1967, 1425, 2382,
	2392, 2886, 838, 3127, 1816, 2358, 2360, 2361, 2362, 1985,
	1790, 2327, 2330, 2578, 853, 1653, 2547, 2548, 2462, 2381,
	2383, 2336, 2490, 2317, 2526, 2493, 2494, 2117, 3576, 1361,
	1759, 786, 2347, 3790, 2499, 2500, 2501, 1298, 2576, 1775,
	1496, 837, 902, 3702, 1761, 2365, 2446, 1237, 1931, 2312,
	2063, 1262, 2772, 838, 2509, 1764, 2510, 695, 2386, 3784,
	3353, 2064, 3116, 2885, 1687, 2065, 2473, 2803, 2756, 2070,
	1983, 1582, 3625, 1210, 615, 1678, 2393, 2507, 2448, 787,
	2988, 1764, 902, 2517, 618, 2488, 2313, 2402, 902, 902,
	1779, 2837, 1764, 147, 2492, 2412, 2117, 2495, 3403, 2496,
	2328, 3319, 3626, 2430, 1757, 1017, 1763, 1783, 1758, 2441,
	1028, 2530, 2463, 2532, 2802, 2504, 2452, 3217, 2453, 3419,
	2454, 1017, 3745, 2324, 786, 2511, 2111, 2513, 2809, 2515,
	787, 1764, 795, 3766, 2569, 2460, 3659, 2464, 1359, 2080,
	2459, 2475, 2072, 902, 902, 2523, 838, 1497, 2491, 902,
	3588, 2573, 2989, 2099, 1533, 1780, 1337, 1452, 1179, 2617,
	721, 2233, 902, 902, 3459, 1420, 2574, 1800, 902, 902,
	2579, 1926, 1191, 1046, 902, 3806, 2246, 1623, 844, 591,
	1372, 1374, 588, 902, 902, 902, 3087, 1799, 3363, 902,
	1042, 2298, 3211, 3222, 1018, 2570, 1018, 2948, 2387, 902,
	1966, 2455, 1921, 1759, 2300, 2538, 3783, 1764, 1422, 2537,
	2536, 3402, 3591, 1795, 3727, 2066, 902, 1761, 2805, 2600,
	3155, 3728, 2546, 787, 2068, 2541, 1387, 2535, 2591, 1999,
	3354, 3701, 2301, 3756, 788, 1760, 1771, 1772, 2323, 3788,
	1792, 2556, 3754, 2776, 3605, 1784, 3811, 2299, 1627, 2807,
	3507, 1929, 3172, 2872, 1837, 1620, 1040, 1268, 1268, 1463,
	1035, 2117, 3818, 540, 1796, 531, 2015, 3265, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 3744, 3218, 2002, 1774, 1763,
	1876, 1462, 902, 902, 902, 788, 1732, 1630, 2749, 2595,
	2596, 902, 902, 902, 2599, 845, 902, 2568, 2952, 3466,
	1191, 1625, 2806, 1785, 1786, 3465, 902, 1022, 1086, 2458,
	3446, 1423, 902, 3563, 902, 1781, 2575, 1628, 3404, 3789,
	541, 3592, 1022, 2708, 2709, 2577, 1546, 3173, 3102, 2873,
	1551, 2329, 3041, 2867, 1191, 1627, 1191, 2784, 1729, 2606,
	1086, 2780, 835, 2416, 789, 1626, 2406, 3791, 2987, 1782,
	1760, 1857, 1022, 2506, 2120, 1849, 3323, 1086, 542, 1842,
	543, 2730, 2512, 3322, 2514, 1824, 2516, 2716, 2350, 1690,
	3056, 1461, 3636, 1086, 1630, 1992, 2949, 1961, 788, 1725,
	1764, 1424, 2746, 1462, 902, 790, 3175, 3223, 2231, 3376,
	2403, 2533, 1462, 2754, 1301, 789, 1457, 3490, 902, 3488,
	2744, 2691, 2720, 3311, 1628, 1727, 3447, 2795, 3810, 1690,
	1533, 2766, 3726, 1463, 2791, 2790, 1755, 2710, 2739, 2768,
	1020, 2561, 2539, 1914, 3266, 902, 1060, 1728, 3069, 1401,
	3307, 1629, 2743, 2774, 3300, 1020, 790, 1787, 717, 2757,
	709, 2713, 2718, 2719, 2712, 2736, 2270, 2702, 2728, 2263,
	3298, 2686, 2687, 2688, 2731, 2732, 3302, 2729, 2269, 3224,
	2268, 2717, 2267, 2225, 2794, 1020, 1086, 2799, 2800, 2781,
	2810, 2811, 1284, 1461, 2812, 2410, 3308, 1200, 2055, 2785,
	3593, 3042, 1461, 1993, 2763, 2764, 1086, 2765, 789, 3043,
	1282, 2818, 1684, 2777, 2778, 2734, 1270, 2735, 2751, 2752,
	2753, 1200, 2831, 2832, 1788, 1388, 2833, 2843, 1271, 2820,
	2793, 3301, 1200, 2797, 842, 1463, 2351, 2352, 1629, 1762,
	719, 3321, 3569, 1760, 2769, 2715, 1022, 2861, 3345, 790,
	2227, 2920, 1684, 2866, 1855, 2226, 2390, 2775, 2881, 3454,
	2828, 3763, 3486, 2308, 2835, 3639, 1762, 910, 3393, 3644,
	3633, 3272, 3058, 3570, 2750, 2124, 1439, 1665, 3765, 3721,
	3584, 2808, 2724, 1687, 1200, 1200, 3424, 2814, 1437, 1417,
	3264, 2683, 2964, 2928, 1678, 2890, 2823, 1415, 1802, 3444,
	2824, 1398, 2844, 1016, 2825, 2907, 1802, 2853, 2842, 216,
	2648, 534, 535, 2836, 550, 534, 550, 560, 565, 1016,
	2838, 581, 2901, 1687, 2830, 2826, 587, 2845, 3392, 2874,
	2927, 1396, 216, 2580, 1678, 1086, 3445, 3640, 1086, 2053,
	2882, 2488, 2056, 2348, 2407, 3571, 3455, 2374, 706, 2864,
	2488, 2684, 216, 2342, 3303, 1394, 2291, 1659, 3304, 1020,
	1392, 2725, 1656, 1390, 1440, 1352, 1382, 1380, 902, 715,
	716, 707, 708, 2889, 902, 902, 845, 1953, 902, 902,
	902, 2918, 902, 2902, 2887, 2922, 147, 147, 2052, 2945,
	2944, 902, 1690, 2896, 2943, 1280, 3632, 1283, 1457, 2942,
	902, 3306, 622, 902, 2723, 2905, 2906, 2521, 2520, 1086,
	2498, 1981, 1963, 1934, 3309, 1281, 1017, 1714, 902, 2933,
	1566, 2934, 1356, 2935, 1255, 3696, 1086, 2123, 3340, 2727,
	3331, 1017, 3374, 3296, 1191, 1438, 1690, 1690, 902, 902,
	3171, 902, 902, 902, 3165, 718, 2967, 1436, 1416, 2939,
	534, 534, 2976, 2977, 3122, 1846, 1414, 3120, 216, 902,
	1397, 1017, 3101, 902, 2865, 1690, 1690, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 2950, 902, 2947, 3742,
	1395, 2898, 2899, 2900, 902, 902, 1690, 2903, 2857, 2904,
	2457, 902, 2433, 593, 2421, 2413, 2012, 3006, 2972, 2726,
	2829, 2400, 902, 1891, 1393, 1684, 3305, 1889, 1886, 1391,
	796, 2983, 1389, 1022, 1022, 1381, 1379, 902, 2054, 1881,
	2994, 1466, 1018, 1952, 3003, 2012, 3021, 1879, 1877, 3005,
	2999, 1868, 1821, 1819, 1808, 1191, 1191, 1803, 1018, 2990,
	2992, 2993, 1789, 3012, 1279, 1776, 1086, 1765, 2984, 1684,
	1684, 3015, 3018, 3016, 2877, 3074, 3049, 3514, 3020, 3013,
	997, 3045, 2559, 3014, 1667, 3758, 2880, 3667, 3398, 3391,
	3390, 2489, 1751, 1234, 902, 3516, 1687, 2313, 1684, 1684,
	1623, 2313, 2332, 3046, 998, 3183, 1773, 1678, 601, 902,
	902, 2311, 1434, 1435, 598, 2331, 3053, 3097, 1925, 1322,
	1951, 3060, 1854, 623, 624, 147, 1950, 1191, 3666, 1684,
	1932, 3062, 3063, 1467, 902, 902, 3311, 1321, 3325, 3578,
	1687, 1687, 1378, 3550, 3054, 1017, 1020, 1020, 3273, 2353,
	2335, 1678, 1678, 3065, 3066, 902, 3076, 1470, 801, 803,
	805, 2560, 1200, 3307, 3759, 1200, 1473, 1474, 545, 1687,
	1687, 1627, 3077, 3752, 1690, 2371, 1722, 2369, 2940, 2339,
	1678, 1678, 654, 603, 2337, 3785, 3631, 694, 2370, 3093,
	1473, 1474, 2338, 3146, 3134, 3136, 999, 3601, 1322, 1200,
	1687, 3145, 3105, 3598, 2082, 3133, 902, 600, 3483, 3308,
	1630, 1678, 3164, 1322, 1022, 902, 3154, 556, 1476, 3161,
	1546, 3084, 1475, 2440, 1625, 3185, 2212, 1717, 1672, 626,
	625, 1200, 1200, 1200, 2755, 3809, 2654, 2655, 2707, 3129,
	1628, 3148, 1473, 1474, 2785, 3600, 1475, 1200, 3180, 3179,
	1543, 3177, 3244, 1086, 3162, 2119, 3176, 2305, 2306, 1366,
	3141, 3197, 2303, 2304, 2348, 1365, 3089, 3531, 1626, 3163,
	2733, 2305, 2303, 2152, 2194, 1086, 627, 628, 902, 902,
	3504, 3240, 3169, 3209, 902, 902, 1690, 2747, 3088, 902,
	902, 3210, 902, 2995, 1560, 1559, 902, 1684, 3166, 1419,
	3178, 3828, 1418, 2761, 3181, 2446, 3186, 902, 3187, 3798,
	595, 3198, 3199, 3523, 1033, 3771, 3560, 3479, 3438, 3192,
	3206, 3193, 3436, 902, 3200, 3524, 3360, 1020, 3203, 3207,
	3204, 3289, 599, 3208, 3189, 3149, 3147, 2488, 3118, 3113,
	3234, 3225, 1043, 2897, 980, 2871, 3121, 2870, 3123, 581,
	3219, 3525, 2503, 3226, 1629, 3214, 2502, 602, 2450, 2425,
	2401, 2284, 2283, 2084, 1949, 1948, 1947, 3303, 1687, 1946,
	1871, 3304, 216, 597, 216, 216, 1182, 1870, 216, 1678,
	1869, 1852, 1022, 1832, 1831, 1827, 1826, 1825, 1823, 1822,
	1022, 216, 1212, 1433, 1086, 1432, 1086, 3238, 1309, 1308,
	1307, 1306, 1305, 1022, 1016, 3527, 1304, 1303, 1302, 1684,
	594, 1300, 1295, 1086, 3306, 1236, 2747, 3278, 3263, 1016,
	1294, 3526, 1017, 1017, 1293, 1292, 1291, 3309, 1254, 1250,
	1259, 1249, 902, 216, 216, 1248, 1182, 1247, 3528, 1246,
	1245, 1239, 1233, 3316, 1231, 1230, 216, 1077, 604, 1016,
	1076, 3191, 1075, 1297, 3275, 3276, 1074, 1045, 1086, 596,
	1044, 1723, 3317, 1086, 1846, 807, 216, 216, 216, 3277,
	1182, 216, 3281, 3280, 3284, 3328, 3329, 3285, 793, 581,
	1687, 216, 216, 2743, 3295, 3457, 147, 3310, 3327, 1427,
	77, 1678, 1086, 1241, 3343, 1020, 706, 1200, 3315, 641,
	72, 3117, 3274, 1020, 649, 3270, 3646, 2801, 2168, 2164,
	3279, 2378, 3293, 3294, 1933, 1386, 1020, 3355, 1935, 2738,
	2253, 3624, 3248, 902, 2616, 3556, 3418, 3366, 2122, 3305,
	1564, 3338, 2695, 3326, 3394, 74, 886, 932, 1086, 3347,
	3352, 3342, 3351, 3339, 3297, 1185, 3104, 3385, 1084, 3378,
	902, 902, 902, 3386, 3377, 3397, 3362, 216, 3367, 3365,
	3381, 2478, 3349, 3348, 1676, 3346, 1677, 3379, 1086, 852,
	3372, 216, 1089, 1012, 1733, 902, 902, 892, 2162, 1749,
	1742, 2285, 2172, 909, 906, 902, 1679, 1681, 1690, 908,
	907, 1680, 1583, 902, 902, 2166, 2167, 2165, 905, 3405,
	1675, 3168, 3167, 1017, 2409, 2444, 1287, 772, 1086, 3415,
	1737, 2078, 2106, 2605, 3410, 211, 1557, 867, 888, 2980,
	2103, 1086, 1038, 1016, 877, 3529, 2721, 2884, 3083, 902,
	3530, 3382, 1991, 1018, 657, 902, 2996, 2651, 2109, 1031,
	2195, 2188, 3426, 902, 2184, 1690, 2434, 1443, 1018, 2161,
	2163, 1535, 902, 2445, 1072, 902, 870, 2076, 3441, 3432,
	3433, 902, 2194, 1548, 3440, 2585, 2001, 2891, 2741, 2279,
	3663, 2006, 1836, 996, 995, 994, 3435, 3653, 1018, 3439,
	3650, 3201, 2851, 1726, 2297, 1525, 2858, 882, 1190, 2706,
	3478, 2921, 1252, 586, 3461, 1086, 3577, 3489, 1200, 3431,
	3462, 3498, 894, 1524, 2385, 2384, 3566, 1059, 1996, 1058,
	1057, 1684, 2783, 3503, 3480, 3468, 902, 902, 3487, 3816,
	3114, 187, 2553, 3476, 3502, 1464, 1456, 3534, 3535, 902,
	902, 184, 186, 3515, 185, 3356, 3131, 3519, 1846, 3497,
	19, 18, 2194, 2194, 3513, 902, 1690, 3538, 17, 3512,
	3511, 94, 2654, 2655, 38, 3510, 3518, 16, 3532, 122,
	3517, 121, 120, 119, 534, 118, 3086, 3381, 1684, 902,
	117, 1017, 902, 3509, 2853, 116, 111, 115, 114, 1017,
	113, 112, 1687, 3545, 110, 216, 3549, 216, 3562, 109,
	902, 216, 1017, 1678, 3572, 108, 107, 106, 105, 218,
	3554, 3579, 104, 1212, 1333, 1182, 216, 3561, 216, 103,
	102, 101, 100, 216, 1212, 550, 902, 902, 216, 1212,
	99, 98, 97, 3587, 581, 96, 902, 95, 577, 902,
	574, 1200, 52, 51, 3546, 3547, 93, 3602, 92, 1687,
	3604, 1200, 1200, 15, 36, 13, 3586, 56, 2190, 57,
	1678, 12, 1018, 31, 32, 3595, 3596, 83, 1200, 3615,
	3502, 3599, 2194, 2194, 2194, 3594, 82, 3607, 30, 1684,
	14, 902, 29, 27, 10, 3470, 3471, 3613, 3614, 8,
	7, 3612, 3611, 3606, 33, 1644, 11, 152, 151, 153,
	150, 3620, 76, 3621, 3618, 149, 3641, 2660, 3619, 1086,
	1016, 1016, 148, 902, 902, 75, 902, 25, 9, 3661,
	144, 3499, 3643, 3159, 71, 146, 145, 143, 142, 141,
	69, 140, 139, 3642, 70, 3652, 3655, 138, 23, 5,
	55, 6, 3400, 2929, 87, 3668, 3648, 88, 3680, 3657,
	1687, 34, 3681, 67, 66, 65, 902, 902, 902, 22,
	54, 1678, 21, 177, 3672, 176, 175, 174, 865, 169,
	3675, 3669, 3677, 168, 3670, 173, 171, 170, 902, 3708,
	172, 167, 179, 178, 181, 3713, 3628, 165, 3695, 3694,
	3692, 3693, 161, 160, 164, 216, 2670, 166, 163, 162,
	159, 3711, 3729, 180, 62, 137, 3733, 3731, 136, 135,
	134, 133, 3665, 132, 3739, 131, 1191, 61, 3656, 902,
	20, 3660, 3730, 2, 1, 0, 0, 3735, 3738, 0,
	0, 3743, 0, 0, 0, 0, 3736, 3737, 0, 216,
	3740, 0, 0, 216, 3749, 3750, 3755, 0, 216, 3753,
	3751, 0, 0, 0, 0, 0, 0, 3764, 3760, 0,
	3762, 3761, 3773, 902, 3774, 902, 3768, 216, 0, 216,
	3652, 216, 3779, 3655, 3775, 534, 3777, 0, 3772, 3778,
	0, 3776, 0, 3767, 0, 0, 0, 3780, 0, 1872,
	0, 1016, 0, 0, 0, 0, 0, 3794, 3792, 2446,
	0, 0, 0, 2671, 3799, 0, 3283, 0, 216, 0,
	3802, 0, 0, 0, 3804, 0, 902, 902, 0, 0,
	0, 0, 3800, 3291, 902, 0, 902, 902, 3807, 0,
	0, 581, 3813, 0, 3819, 706, 3823, 3820, 0, 1018,
	1018, 0, 0, 0, 216, 0, 1182, 216, 3665, 0,
	0, 0, 0, 3827, 3826, 0, 0, 0, 3830, 0,
	581, 0, 0, 3833, 0, 902, 3835, 216, 3836, 0,
	3838, 3829, 0, 3840, 0, 3832, 216, 216, 1081, 216,
	0, 216, 0, 216, 1189, 216, 2582, 2583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1958,
	0, 0, 1959, 0, 1960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661,
	2662, 3814, 3815, 0, 0, 0, 565, 0, 0, 0,
	581, 0, 0, 0, 0, 0, 2543, 0, 1084, 2194,
	2194, 0, 1289, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 1622, 1016, 0, 0,
	3837, 0, 1313, 1313, 1313, 0, 0, 0, 3416, 0,
	1016, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2677, 2678, 2679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3416, 0,
	1018, 0, 0, 0, 0, 0, 2190, 2190, 0, 0,
	0, 2015, 0, 0, 0, 0, 0, 2194, 2194, 2194,
	2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194,
	2194, 2194, 2194, 2194, 2194, 2194, 0, 2194, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 534, 697,
	0, 0, 0, 0, 0, 1170, 0, 0, 0, 1170,
	0, 0, 0, 216, 0, 0, 1192, 0, 0, 0,
	1204, 0, 534, 0, 63, 851, 700, 699, 0, 216,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 216, 0, 0, 2190, 2190, 2190, 687,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1263,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 550, 0, 671, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 672, 0, 1345, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 1204, 0, 0,
	89, 0, 0, 673, 0, 79, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 2321, 0, 0, 0, 0,
	692, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 674, 0, 0,
	1367, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 675, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 1654, 0, 0,
	0, 0, 216, 2394, 0, 0, 0, 676, 0, 2015,
	677, 0, 1663, 0, 1189, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 1212, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 2429, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 2321, 0, 534, 0, 0, 2449, 0, 0, 0,
	0, 0, 216, 0, 0, 216, 0, 216, 0, 216,
	0, 0, 0, 0, 1182, 0, 216, 216, 0, 0,
	0, 0, 0, 2960, 2961, 0, 2471, 706, 0, 2321,
	2321, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 1182, 216,
	0, 0, 1212, 0, 1212, 0, 0, 1182, 0, 1182,
	0, 1182, 0, 0, 0, 0, 154, 84, 0, 85,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 216, 216, 216, 1182, 216, 188, 216,
	0, 0, 0, 695, 0, 680, 701, 0, 0, 0,
	123, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030,
	3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040,
	216, 3044, 0, 602, 0, 0, 190, 0, 216, 0,
	681, 0, 0, 682, 0, 0, 0, 0, 0, 689,
	0, 0, 683, 0, 0, 0, 1473, 1474, 0, 124,
	0, 0, 0, 2190, 2190, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 0, 1834, 1170, 1504, 0, 1841,
	0, 189, 0, 851, 1476, 684, 690, 851, 0, 0,
	0, 182, 0, 685, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 1289, 0, 1860, 686, 1860, 0, 0,
	0, 693, 1475, 0, 0, 0, 0, 865, 0, 0,
	698, 0, 1495, 1170, 604, 0, 0, 1212, 0, 0,
	1214, 0, 1218, 0, 1224, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 1189, 0, 0, 0, 0, 0,
	0, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
	2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
	0, 2190, 0, 0, 0, 0, 0, 0, 0, 0,
	1841, 0, 0, 1911, 0, 2194, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 1928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1938, 1348, 1940, 0, 1942, 0, 1944,
	0, 1945, 1353, 63, 0, 0, 0, 0, 0, 2194,
	63, 0, 0, 0, 0, 0, 0, 0, 64, 1503,
	1505, 0, 0, 0, 216, 64, 0, 0, 0, 0,
	68, 1962, 0, 0, 0, 0, 0, 68, 0, 216,
	0, 1204, 0, 1170, 534, 0, 0, 0, 0, 534,
	0, 0, 534, 0, 0, 534, 534, 0, 1405, 0,
	0, 534, 0, 0, 0, 73, 0, 0, 0, 216,
	1496, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 1212,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 89,
	0, 0, 0, 0, 79, 86, 89, 0, 2321, 2321,
	216, 79, 86, 0, 2321, 2194, 0, 2787, 0, 0,
	0, 0, 0, 0, 0, 2321, 2787, 0, 2321, 2787,
	2787, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 0, 0,
	0, 0, 216, 216, 216, 0, 0, 0, 0, 1502,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	80, 0, 1545, 0, 216, 1182, 0, 1497, 1558, 1896,
	0, 0, 0, 0, 0, 0, 0, 1204, 0, 0,
	1907, 0, 0, 0, 0, 0, 2194, 2194, 0, 0,
	0, 0, 0, 1916, 1917, 1918, 0, 0, 2847, 0,
	0, 2849, 2321, 0, 0, 216, 0, 0, 0, 216,
	0, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2429, 0,
	0, 1182, 0, 216, 0, 0, 2321, 0, 534, 0,
	0, 0, 0, 0, 0, 2321, 0, 0, 0, 2260,
	0, 0, 0, 0, 216, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 63,
	0, 1616, 1616, 1616, 0, 81, 0, 0, 0, 216,
	2429, 0, 0, 2429, 64, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 1170, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 84, 0, 85, 0,
	0, 0, 154, 84, 0, 85, 0, 0, 0, 0,
	2938, 0, 0, 1182, 216, 0, 216, 188, 0, 0,
	0, 73, 0, 0, 188, 701, 0, 0, 0, 123,
	0, 0, 701, 0, 851, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2654, 2655, 216,
	2672, 2673, 2674, 0, 78, 190, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 89, 0, 3230, 0, 0,
	79, 86, 0, 1170, 0, 0, 0, 0, 124, 3423,
	0, 0, 0, 0, 0, 124, 0, 1189, 0, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 158,
	189, 0, 0, 0, 0, 3001, 0, 189, 0, 0,
	182, 0, 0, 2669, 0, 0, 0, 182, 183, 80,
	0, 0, 0, 3449, 1841, 183, 0, 0, 0, 0,
	0, 2420, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 1170, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2451, 0,
	0, 1313, 0, 1313, 0, 1313, 0, 0, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2660, 0, 0, 0, 0, 2497, 0, 0,
	216, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2505, 0, 2508, 0, 0, 0, 2190,
	0, 0, 534, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 3553,
	0, 0, 0, 0, 0, 2675, 0, 0, 2529, 1189,
	2531, 1189, 0, 2534, 0, 1212, 0, 0, 0, 0,
	0, 0, 1170, 2190, 0, 0, 0, 0, 0, 0,
	0, 154, 84, 0, 85, 0, 0, 0, 0, 0,
	0, 2670, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 188, 2562, 0, 0, 0, 0, 0,
	0, 701, 0, 581, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 1170, 0, 0, 0, 0, 0,
	0, 0, 0, 2388, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 216, 124, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 2190,
	2321, 216, 0, 0, 0, 0, 182, 0, 2671, 0,
	0, 0, 0, 0, 183, 0, 2471, 2471, 0, 0,
	0, 0, 706, 706, 2321, 2461, 0, 2429, 2429, 0,
	0, 706, 2321, 0, 0, 1340, 0, 0, 0, 216,
	1204, 0, 0, 0, 0, 0, 0, 0, 1990, 0,
	1994, 0, 0, 0, 0, 0, 0, 2008, 0, 0,
	0, 0, 0, 0, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 0,
	2057, 0, 2059, 2060, 2061, 2062, 0, 0, 3249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2666, 2667, 2668, 0, 2086, 0, 0, 2665, 2663, 2664,
	2656, 2657, 2658, 2659, 2661, 2662, 1545, 0, 0, 0,
	2101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2131, 2134, 2137, 2140,
	0, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 0, 216,
	0, 0, 0, 0, 0, 1212, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2186,
	216, 2197, 2199, 2204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2321, 2321, 2321,
	0, 0, 0, 0, 0, 0, 2779, 0, 0, 0,
	1212, 0, 0, 0, 0, 0, 0, 0, 2321, 0,
	2787, 0, 0, 1212, 1212, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 216, 2817, 2819,
	2420, 0, 0, 0, 0, 911, 1473, 1474, 0, 0,
	2321, 0, 0, 0, 3358, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 1504, 0, 0,
	216, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 2654, 2655, 0, 2672, 2673, 2674, 0, 0,
	0, 2859, 1475, 1212, 0, 2863, 0, 0, 0, 0,
	217, 0, 2969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1189, 1189, 0, 0, 0, 0, 0, 0, 2669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1170,
	0, 0, 0, 0, 0, 2917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 0, 0, 0,
	0, 1481, 0, 0, 2321, 2396, 2787, 2398, 0, 3443,
	0, 0, 1170, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	2941, 0, 1189, 0, 0, 0, 0, 865, 0, 1503,
	1505, 581, 0, 0, 0, 0, 0, 2660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3443, 0, 0, 0, 2953, 0, 0, 0, 2321,
	0, 0, 0, 0, 0, 1473, 1474, 0, 0, 3506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 1212, 0, 0, 0, 0, 1504, 0, 0, 0,
	2675, 0, 0, 1476, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 0, 0, 0, 0,
	0, 2839, 0, 0, 0, 1170, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 2670, 3001, 2518, 0,
	0, 1495, 0, 0, 0, 2862, 0, 0, 0, 1492,
	0, 0, 3443, 0, 0, 0, 2868, 887, 91, 0,
	0, 0, 2654, 2655, 0, 2672, 2673, 2674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2968, 0, 1526, 1527, 0, 0, 0, 0,
	0, 2963, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 3358, 0, 0, 0, 0, 0, 2913, 2914,
	1498, 1499, 1500, 1501, 0, 216, 0, 0, 0, 0,
	1481, 0, 0, 0, 2787, 0, 2654, 2655, 2669, 2672,
	2673, 2674, 0, 0, 0, 0, 0, 91, 0, 2565,
	2566, 0, 0, 2671, 0, 2572, 0, 0, 0, 1212,
	0, 1212, 0, 0, 1170, 0, 0, 1170, 1503, 1505,
	0, 0, 0, 0, 2586, 2587, 0, 0, 0, 0,
	2101, 0, 0, 0, 0, 3637, 0, 0, 0, 2594,
	0, 1212, 1490, 1491, 216, 0, 0, 0, 0, 0,
	0, 0, 2669, 0, 0, 2608, 216, 2321, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 2660, 0, 1496,
	0, 0, 2620, 216, 0, 846, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 0, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3001, 0,
	0, 0, 0, 0, 0, 1170, 0, 0, 1006, 0,
	0, 0, 2420, 0, 0, 2666, 2667, 2668, 0, 0,
	2675, 3158, 2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661,
	2662, 2660, 0, 0, 0, 0, 3170, 0, 0, 0,
	1473, 1474, 0, 0, 2321, 0, 0, 2204, 2204, 2204,
	0, 0, 0, 0, 0, 0, 2670, 0, 1502, 0,
	0, 1504, 1616, 0, 3443, 0, 0, 0, 1476, 0,
	2711, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 2675, 0, 0, 0, 0, 0,
	0, 1212, 0, 2321, 0, 3212, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	217, 1090, 217, 217, 1492, 1090, 217, 1090, 0, 0,
	2670, 1090, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 1170, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 2958, 0, 0, 0,
	0, 0, 0, 2671, 0, 0, 0, 0, 0, 0,
	1090, 217, 217, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 2804, 0, 0, 217, 1481, 0, 0, 0, 0,
	0, 0, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 217, 217, 217, 0, 0, 217,
	1090, 0, 0, 0, 1090, 0, 0, 0, 1090, 217,
	217, 0, 0, 1503, 1505, 0, 0, 2671, 1090, 0,
	0, 0, 0, 0, 0, 0, 3143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1496, 2666, 2667, 2668, 0, 0,
	0, 0, 2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661,
	2662, 3330, 898, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 2420, 0, 0, 3194, 3195, 3196, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1170, 0, 0, 0, 0, 0, 0, 2420,
	0, 0, 0, 0, 215, 0, 3373, 0, 0, 2666,
	2667, 2668, 0, 0, 1170, 0, 2665, 2663, 2664, 2656,
	2657, 2658, 2659, 2661, 2662, 0, 0, 616, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2008, 0, 0, 0, 0, 0,
	2955, 2956, 0, 0, 2959, 0, 0, 0, 2962, 0,
	0, 0, 0, 0, 0, 0, 0, 2966, 0, 0,
	0, 0, 0, 0, 0, 0, 2973, 0, 0, 2711,
	0, 0, 91, 0, 91, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 2985, 0, 0, 0, 0, 0,
	0, 0, 0, 1170, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 3450, 3007, 3008, 0, 3009, 3010, 3011,
	0, 0, 1170, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3017, 0, 1493, 1489, 3019,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 846, 91, 91, 0,
	0, 0, 0, 0, 0, 0, 91, 1170, 0, 217,
	3047, 3048, 1170, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 217, 217, 217, 0, 3059, 0,
	0, 217, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 1170, 0, 3068, 0, 0, 0, 0, 1090, 0,
	3544, 1189, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 0, 0, 91, 1090,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3098, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 3107, 3110, 1170, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3130, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 3603, 0, 0, 0, 0, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 0, 0, 0,
	1170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1544, 0, 0, 0, 1550, 1498, 1499,
	1500, 1501, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 1090, 1090, 217, 865, 0, 0, 0, 0, 1090,
	0, 0, 1616, 0, 0, 0, 0, 0, 0, 0,
	3645, 3188, 0, 0, 0, 0, 0, 1513, 0, 0,
	1523, 0, 3662, 0, 0, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 1170, 0, 0, 217, 0, 3674,
	0, 217, 0, 0, 0, 0, 217, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 1511, 217, 0, 217,
	0, 0, 0, 0, 3227, 3228, 0, 1496, 0, 0,
	3232, 3233, 0, 0, 0, 3236, 3237, 0, 0, 631,
	0, 0, 3241, 0, 0, 1636, 0, 1639, 0, 91,
	0, 0, 0, 3245, 0, 0, 217, 0, 0, 0,
	0, 0, 632, 0, 0, 0, 0, 0, 0, 3250,
	0, 0, 0, 0, 0, 0, 1090, 0, 1090, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 1090, 217, 0, 633, 217, 651, 0, 0, 0,
	0, 0, 0, 0, 1090, 1090, 1090, 215, 0, 215,
	215, 0, 0, 215, 0, 217, 1502, 0, 0, 0,
	634, 0, 0, 635, 217, 217, 616, 217, 0, 217,
	0, 217, 0, 217, 1497, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 656, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 215, 215,
	0, 0, 0, 0, 0, 0, 0, 637, 3110, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 1170, 0,
	0, 0, 0, 865, 0, 0, 0, 638, 0, 0,
	639, 215, 215, 215, 0, 660, 215, 0, 0, 603,
	0, 1090, 0, 0, 0, 0, 215, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 0, 0, 0, 0, 0, 3110,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	934, 0, 0, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 3411, 3412, 3413, 1090,
	0, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3421, 3422, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 3430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	846, 3110, 0, 602, 0, 0, 0, 0, 0, 3467,
	0, 217, 0, 652, 1090, 0, 0, 0, 3474, 0,
	0, 851, 645, 0, 0, 0, 0, 3481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 663, 0,
	662, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 0, 1090, 0,
	0, 655, 3110, 3110, 0, 0, 664, 0, 661, 0,
	0, 1023, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 827, 0, 0, 827, 827, 0, 0,
	0, 0, 217, 0, 0, 3565, 0, 0, 3568, 0,
	1638, 0, 1019, 0, 0, 217, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3110, 0, 0, 217,
	1090, 215, 1638, 215, 1090, 0, 0, 0, 616, 0,
	217, 0, 0, 616, 0, 0, 0, 0, 0, 0,
	0, 2075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3110, 0, 0, 3110, 217, 846, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 1544, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 217, 0, 217, 0, 217, 0, 0,
	0, 0, 0, 0, 217, 217, 1090, 1090, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 217,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 217, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3691, 3691, 3691, 0, 0, 0, 0, 0,
	217, 217, 217, 217, 0, 217, 0, 217, 0, 0,
	91, 0, 0, 0, 3712, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 3691, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 215, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 215, 0, 215, 0, 215, 0, 0, 3110,
	0, 3110, 1509, 1504, 0, 0, 91, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 91, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 3691, 3808, 0, 0, 1492, 91, 0, 91,
	3812, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 215, 0, 0, 0, 1023, 0, 0, 0,
	1023, 0, 1023, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 91, 0, 0,
	91, 616, 215, 0, 215, 0, 215, 0, 215, 0,
	215, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	91, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 0, 0, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 1023,
	1519, 0, 1520, 1023, 0, 1090, 0, 0, 91, 1490,
	1491, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 217, 217, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 2075, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1502, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 1544, 0, 0, 0, 0,
	0, 0, 1090, 1497, 0, 0, 0, 0, 0, 609,
	0, 1090, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 217, 0, 1514, 1090, 217, 0, 609,
	0, 0, 0, 0, 1019, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	1090, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 1006, 3256, 0, 0, 0, 3255,
	1090, 0, 217, 1090, 217, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 215,
	1023, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	1691, 0, 1473, 1474, 0, 0, 0, 616, 1516, 1517,
	1518, 0, 0, 1023, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	1476, 1090, 0, 215, 1023, 1522, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 91, 0, 1475, 91,
	0, 0, 0, 0, 0, 0, 0, 215, 1495, 0,
	215, 0, 215, 0, 215, 0, 1492, 0, 0, 0,
	0, 215, 215, 0, 0, 0, 0, 91, 91, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 1006, 0, 0, 846, 215, 215, 215,
	215, 1090, 215, 0, 215, 0, 1023, 1023, 0, 0,
	0, 0, 0, 0, 1023, 0, 1513, 0, 0, 1523,
	0, 0, 0, 91, 91, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1090, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1023, 0, 1023, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1090, 1090, 1090, 1023,
	1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 1090, 1497, 1087, 0, 1201, 217, 1090, 0,
	1201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1201,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 1019,
	1476, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1019, 0, 0, 0, 0, 0,
	1006, 1006, 0, 0, 1691, 1691, 1023, 0, 1475, 1201,
	0, 0, 0, 1201, 0, 0, 0, 1201, 1495, 0,
	0, 0, 1512, 0, 1638, 0, 1492, 1201, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 1090, 0, 0, 0, 0, 0, 0, 2957, 0,
	1201, 0, 0, 0, 0, 215, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 1023, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 215, 215,
	0, 0, 0, 217, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 1090, 217, 217, 0, 0, 1090, 215,
	0, 0, 0, 0, 0, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 1023, 1090, 217, 1490,
	1491, 0, 1090, 1023, 0, 0, 0, 0, 0, 0,
	215, 0, 1023, 0, 215, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 1496, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 215,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 1473,
	1474, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1090, 1088, 1502, 0, 1476, 1088, 0,
	1202, 0, 0, 1023, 1202, 0, 1090, 0, 0, 215,
	0, 215, 0, 1497, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	1691, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 0, 1023, 0, 0, 0, 1023,
	0, 1087, 0, 91, 0, 0, 0, 0, 0, 1006,
	609, 0, 0, 0, 0, 609, 0, 1006, 0, 0,
	1090, 0, 0, 1090, 0, 2571, 0, 1201, 0, 0,
	0, 0, 0, 1202, 0, 0, 0, 1202, 0, 0,
	0, 1202, 0, 0, 1498, 1499, 1500, 1501, 1087, 0,
	0, 1202, 217, 217, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1023, 1023, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 1503, 1505, 1202, 0, 1023, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 1019, 1019, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1201, 1201, 0, 1090, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 1473, 1474, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1201, 1019, 1201, 0, 1201,
	0, 0, 0, 0, 0, 0, 0, 1201, 0, 0,
	1201, 0, 0, 0, 0, 2075, 0, 0, 1475, 0,
	0, 0, 0, 1201, 1201, 1201, 0, 0, 1495, 0,
	0, 0, 0, 0, 215, 0, 1492, 0, 0, 0,
	0, 0, 0, 609, 0, 1088, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 0, 0, 0, 0, 2564, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 1023, 0,
	0, 0, 1088, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 1023, 0, 0, 0, 0, 1481, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 1023, 0, 0, 1473, 1474, 1023, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 1503, 1505, 0, 0, 1691,
	0, 0, 0, 1023, 0, 1509, 1504, 0, 0, 0,
	0, 0, 0, 1476, 1019, 0, 0, 0, 1522, 1490,
	1491, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 0, 1691,
	0, 1475, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 1202, 1202, 91, 0, 0, 91,
	215, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 215, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 215, 0,
	1498, 1499, 1500, 1501, 0, 215, 0, 0, 0, 0,
	1481, 1023, 0, 0, 0, 1502, 0, 1087, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1023, 0, 0, 1513,
	0, 0, 1523, 1087, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 1023, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 1202,
	0, 1202, 0, 1202, 0, 0, 0, 0, 0, 1496,
	0, 1202, 0, 0, 1202, 0, 0, 1201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1202, 1202, 1202,
	0, 0, 0, 1521, 0, 1023, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	1510, 0, 215, 0, 0, 0, 0, 0, 0, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1691, 0, 0, 0, 0, 0, 1502, 1087,
	0, 0, 0, 1201, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 1691, 1691, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1691, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1201, 1201, 0, 1201, 0,
	0, 0, 0, 0, 0, 0, 1691, 0, 0, 0,
	1201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 1023, 1023, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 2629, 0,
	215, 0, 2630, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 1023, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 1088, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 1023, 1023, 1023, 0, 1522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 1088, 0, 1023, 1492, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 1087, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 1475, 0, 0, 1087, 0, 0, 0, 0, 1202,
	1202, 1495, 1202, 0, 0, 0, 0, 0, 0, 1492,
	0, 1087, 0, 0, 1202, 0, 1513, 0, 0, 1523,
	0, 0, 1023, 0, 0, 1503, 1505, 1087, 0, 0,
	1023, 0, 0, 0, 1023, 0, 1023, 0, 0, 0,
	1519, 0, 1520, 1023, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 1496, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	1521, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 1503, 1505,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1201, 1023, 0, 0, 0, 0, 1023, 0, 0,
	1087, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1201, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1201, 1201,
	0, 0, 0, 0, 0, 0, 0, 0, 1691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 1087, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 1691, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 0, 2097, 0, 0, 0, 2098,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 1023, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1691, 0, 0, 0,
	0, 1088, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 1023, 1023, 0, 1088, 1492, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 1202, 0, 0, 1023, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 1202, 0, 1513, 1201, 0, 1523, 1201,
	0, 0, 0, 0, 1503, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 1201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 1511, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1201, 1201, 1201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 1201, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	1087, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 1087, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 1087, 0, 0, 0, 0, 1087, 3254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 0, 0, 1503, 1505,
	1202, 0, 0, 1202, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1202, 1511, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1202,
	1202, 1202, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 0, 0, 1202, 0, 0, 0, 0,
	1510, 1088, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 1088, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 1502, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 1087,
	0, 0, 1201, 0, 0, 0, 0, 1495, 1514, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 1088, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 1513, 0, 0, 1523, 0,
	0, 0, 2971, 0, 1503, 1505, 1088, 0, 0, 0,
	0, 1088, 0, 0, 0, 1201, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 1201, 1201, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 1201, 0, 1511, 1202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 1087, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 2632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1202,
	1202, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1202, 0, 0, 0,
	225, 226, 227, 228, 229, 1091, 230, 231, 1092, 1093,
	1094, 0, 1095, 480, 1096, 1097, 1098, 1099, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 1100,
	238, 239, 240, 241, 242, 1101, 1102, 1088, 243, 485,
	486, 487, 1103, 244, 245, 488, 1104, 1171, 1105, 246,
	247, 248, 249, 250, 251, 252, 0, 1106, 254, 255,
	256, 253, 1107, 257, 0, 258, 259, 260, 1108, 261,
	964, 262, 263, 1109, 1110, 1112, 1111, 1113, 1114, 1115,
	264, 265, 266, 267, 0, 268, 489, 490, 1116, 272,
	269, 270, 1117, 273, 271, 1118, 274, 1119, 1120, 275,
	276, 277, 1121, 278, 1122, 279, 280, 1123, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 1124, 222, 1125, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 1126, 297, 1127,
	1128, 965, 298, 299, 495, 496, 300, 301, 1129, 302,
	497, 1130, 498, 303, 1131, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 967, 309, 310, 1132, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 1133,
	966, 317, 502, 503, 1134, 504, 1135, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 1136, 330, 329, 1137, 331, 506,
	971, 332, 333, 972, 1138, 334, 335, 336, 1139, 1140,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 1141, 224, 975, 359,
	1142, 507, 360, 508, 362, 363, 1143, 0, 364, 0,
	1144, 1145, 366, 367, 368, 1146, 1147, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 1148, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 1149, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 1150, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 1151, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	1152, 422, 423, 421, 424, 425, 426, 1153, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 1154,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 1155, 444, 445, 0, 443, 1156, 446,
	447, 448, 449, 450, 287, 451, 1157, 452, 520, 521,
	522, 523, 1158, 459, 1159, 453, 454, 524, 455, 525,
	1160, 456, 457, 458, 0, 460, 461, 1161, 1162, 462,
	463, 464, 466, 467, 465, 468, 1163, 469, 1164, 0,
	470, 471, 472, 526, 527, 528, 1165, 474, 473, 529,
	1166, 1167, 1168, 1169, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	2238, 0, 0, 0, 0, 0, 0, 0, 2239, 225,
	226, 227, 228, 229, 1091, 230, 231, 1092, 1093, 1094,
	0, 1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 1100, 238,
	239, 240, 241, 242, 1101, 1102, 0, 243, 485, 486,
	487, 1103, 244, 245, 488, 1104, 1171, 1105, 246, 247,
	248, 249, 250, 251, 252, 0, 1106, 254, 255, 256,
	253, 1107, 257, 0, 258, 259, 260, 1108, 261, 964,
	262, 263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264,
	265, 266, 267, 0, 268, 489, 490, 1116, 272, 269,
	270, 1117, 273, 271, 1118, 274, 1119, 1120, 275, 276,
	277, 1121, 278, 1122, 279, 280, 1123, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 1124, 222, 1125, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 1126, 297, 1127, 1128,
	965, 298, 299, 495, 496, 300, 301, 1129, 302, 497,
	1130, 498, 303, 1131, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 967, 309, 310, 1132, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 1133, 966,
	317, 502, 503, 1134, 504, 1135, 319, 968, 505, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1136, 330, 329, 1137, 331, 506, 971,
	332, 333, 972, 1138, 334, 335, 336, 1139, 1140, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 1141, 224, 975, 359, 1142,
	507, 360, 508, 362, 363, 1143, 0, 364, 0, 1144,
	1145, 366, 367, 368, 1146, 1147, 369, 370, 509, 976,
	371, 977, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 1148, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 1149, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 1150, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 1151, 404, 978, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 1152,
	422, 423, 421, 424, 425, 426, 1153, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 1154, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 1155, 444, 445, 0, 443, 1156, 446, 447,
	448, 449, 450, 287, 451, 1157, 452, 520, 521, 522,
	523, 1158, 459, 1159, 453, 454, 524, 455, 525, 1160,
	456, 457, 458, 0, 460, 461, 1161, 1162, 462, 463,
	464, 466, 467, 465, 468, 1163, 469, 1164, 0, 470,
	471, 472, 526, 527, 528, 1165, 474, 473, 529, 1166,
	1167, 1168, 1169, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 2979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2981, 225, 226, 227, 228,
	229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095, 480,
	1096, 1097, 1098, 1099, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 1100, 238, 239, 240, 241,
	242, 1101, 1102, 0, 243, 485, 486, 487, 1103, 244,
	245, 488, 1104, 1171, 1105, 246, 247, 248, 249, 250,
	251, 252, 0, 1106, 254, 255, 256, 253, 1107, 257,
	0, 258, 259, 260, 1108, 261, 964, 262, 263, 1109,
	1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266, 267,
	0, 268, 489, 490, 1116, 272, 269, 270, 1117, 273,
	271, 1118, 274, 1119, 1120, 275, 276, 277, 1121, 278,
	1122, 279, 280, 1123, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 1124, 222,
	1125, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 1126, 297, 1127, 1128, 965, 298, 299,
	495, 496, 300, 301, 1129, 302, 497, 1130, 498, 303,
	1131, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 1132, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 1133, 966, 317, 502, 503,
	1134, 504, 1135, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	1136, 330, 329, 1137, 331, 506, 971, 332, 333, 972,
	1138, 334, 335, 336, 1139, 1140, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 1141, 224, 975, 359, 1142, 507, 360, 508,
	362, 363, 1143, 0, 364, 0, 1144, 1145, 366, 367,
	368, 1146, 1147, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 1148,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 1149,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 1150, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 1151, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 1152, 422, 423, 421,
	424, 425, 426, 1153, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 1154, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 1155,
	444, 445, 0, 443, 1156, 446, 447, 448, 449, 450,
	287, 451, 1157, 452, 520, 521, 522, 523, 1158, 459,
	1159, 453, 454, 524, 455, 525, 1160, 456, 457, 458,
	0, 460, 461, 1161, 1162, 462, 463, 464, 466, 467,
	465, 468, 1163, 469, 1164, 0, 470, 471, 472, 526,
	527, 528, 1165, 474, 473, 529, 1166, 1167, 1168, 1169,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3282, 225, 226, 227,
	228, 229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095,
	480, 1096, 1097, 1098, 1099, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 1100, 238, 239, 240,
	241, 242, 1101, 1102, 0, 243, 485, 486, 487, 1103,
	244, 245, 488, 1104, 1171, 1105, 246, 247, 248, 249,
	250, 251, 252, 0, 1106, 254, 255, 256, 253, 1107,
	257, 0, 258, 259, 260, 1108, 261, 964, 262, 263,
	1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266,
	267, 0, 268, 489, 490, 1116, 272, 269, 270, 1117,
	273, 271, 1118, 274, 1119, 1120, 275, 276, 277, 1121,
	278, 1122, 279, 280, 1123, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1124,
	222, 1125, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1126, 297, 1127, 1128, 965, 298,
	299, 495, 496, 300, 301, 1129, 302, 497, 1130, 498,
	303, 1131, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 1132, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1133, 966, 317, 502,
	503, 1134, 504, 1135, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1136, 330, 329, 1137, 331, 506, 971, 332, 333,
	972, 1138, 334, 335, 336, 1139, 1140, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 1141, 224, 975, 359, 1142, 507, 360,
	508, 362, 363, 1143, 0, 364, 0, 1144, 1145, 366,
	367, 368, 1146, 1147, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1148, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1149, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1150, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1151,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1152, 422, 423,
	421, 424, 425, 426, 1153, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 1154, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1155, 444, 445, 0, 443, 1156, 446, 447, 448, 449,
	450, 287, 451, 1157, 452, 520, 521, 522, 523, 1158,
	459, 1159, 453, 454, 524, 455, 525, 1160, 456, 457,
	458, 0, 460, 461, 1161, 1162, 462, 463, 464, 466,
	467, 465, 468, 1163, 469, 1164, 0, 470, 471, 472,
	526, 527, 528, 1165, 474, 473, 529, 1166, 1167, 1168,
	1169, 475, 476, 530, 477, 478, 479, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3417, 0, 225, 226, 227, 228, 229, 1091,
	230, 231, 1092, 1093, 1094, 0, 1095, 480, 1096, 1097,
	1098, 1099, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 1100, 238, 239, 240, 241, 242, 1101,
	1102, 0, 243, 485, 486, 487, 1103, 244, 245, 488,
	1104, 1171, 1105, 246, 247, 248, 249, 250, 251, 252,
	0, 1106, 254, 255, 256, 253, 1107, 257, 0, 258,
	259, 260, 1108, 261, 964, 262, 263, 1109, 1110, 1112,
	1111, 1113, 1114, 1115, 264, 265, 266, 267, 0, 268,
	489, 490, 1116, 272, 269, 270, 1117, 273, 271, 1118,
	274, 1119, 1120, 275, 276, 277, 1121, 278, 1122, 279,
	280, 1123, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 1124, 222, 1125, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 1126, 297, 1127, 1128, 965, 298, 299, 495, 496,
	300, 301, 1129, 302, 497, 1130, 498, 303, 1131, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 967, 309,
	310, 1132, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 1133, 966, 317, 502, 503, 1134, 504,
	1135, 319, 968, 505, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 1136, 330,
	329, 1137, 331, 506, 971, 332, 333, 972, 1138, 334,
	335, 336, 1139, 1140, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	1141, 224, 975, 359, 1142, 507, 360, 508, 362, 363,
	1143, 0, 364, 0, 1144, 1145, 366, 367, 368, 1146,
	1147, 369, 370, 509, 976, 371, 977, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 1148, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 1149, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	1150, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 1151, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 1152, 422, 423, 421, 424, 425,
	426, 1153, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 1154, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 1155, 444, 445,
	0, 443, 1156, 446, 447, 448, 449, 450, 287, 451,
	1157, 452, 520, 521, 522, 523, 1158, 459, 1159, 453,
	454, 524, 455, 525, 1160, 456, 457, 458, 0, 460,
	461, 1161, 1162, 462, 463, 464, 466, 467, 465, 468,
	1163, 469, 1164, 0, 470, 471, 472, 526, 527, 528,
	1165, 474, 473, 529, 1166, 1167, 1168, 1169, 475, 476,
	530, 477, 478, 479, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3337,
	0, 225, 226, 227, 228, 229, 1091, 230, 231, 1092,
	1093, 1094, 0, 1095, 480, 1096, 1097, 1098, 1099, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	1100, 238, 239, 240, 241, 242, 1101, 1102, 0, 243,
	485, 486, 487, 1103, 244, 245, 488, 1104, 1171, 1105,
	246, 247, 248, 249, 250, 251, 252, 0, 1106, 254,
	255, 256, 253, 1107, 257, 0, 258, 259, 260, 1108,
	261, 964, 262, 263, 1109, 1110, 1112, 1111, 1113, 1114,
	1115, 264, 265, 266, 267, 0, 268, 489, 490, 1116,
	272, 269, 270, 1117, 273, 271, 1118, 274, 1119, 1120,
	275, 276, 277, 1121, 278, 1122, 279, 280, 1123, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 1124, 222, 1125, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 1126, 297,
	1127, 1128, 965, 298, 299, 495, 496, 300, 301, 1129,
	302, 497, 1130, 498, 303, 1131, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 967, 309, 310, 1132, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	1133, 966, 317, 502, 503, 1134, 504, 1135, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1136, 330, 329, 1137, 331,
	506, 971, 332, 333, 972, 1138, 334, 335, 336, 1139,
	1140, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 1141, 224, 975,
	359, 1142, 507, 360, 508, 362, 363, 1143, 0, 364,
	0, 1144, 1145, 366, 367, 368, 1146, 1147, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 1148, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 1149, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 1150, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 1151, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 1152, 422, 423, 421, 424, 425, 426, 1153, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	1154, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 1155, 444, 445, 0, 443, 1156,
	446, 447, 448, 449, 450, 287, 451, 1157, 452, 520,
	521, 522, 523, 1158, 459, 1159, 453, 454, 524, 455,
	525, 1160, 456, 457, 458, 0, 460, 461, 1161, 1162,
	462, 463, 464, 466, 467, 465, 468, 1163, 469, 1164,
	0, 470, 471, 472, 526, 527, 528, 1165, 474, 473,
	529, 1166, 1167, 1168, 1169, 475, 476, 530, 477, 478,
	479, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3213, 0, 225, 226,
	227, 228, 229, 1091, 230, 231, 1092, 1093, 1094, 0,
	1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1100, 238, 239,
	240, 241, 242, 1101, 1102, 0, 243, 485, 486, 487,
	1103, 244, 245, 488, 1104, 1171, 1105, 246, 247, 248,
	249, 250, 251, 252, 0, 1106, 254, 255, 256, 253,
	1107, 257, 0, 258, 259, 260, 1108, 261, 964, 262,
	263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265,
	266, 267, 0, 268, 489, 490, 1116, 272, 269, 270,
	1117, 273, 271, 1118, 274, 1119, 1120, 275, 276, 277,
	1121, 278, 1122, 279, 280, 1123, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	1124, 222, 1125, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 1126, 297, 1127, 1128, 965,
	298, 299, 495, 496, 300, 301, 1129, 302, 497, 1130,
	498, 303, 1131, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 1132, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 1133, 966, 317,
	502, 503, 1134, 504, 1135, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1136, 330, 329, 1137, 331, 506, 971, 332,
	333, 972, 1138, 334, 335, 336, 1139, 1140, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 1141, 224, 975, 359, 1142, 507,
	360, 508, 362, 363, 1143, 0, 364, 0, 1144, 1145,
	366, 367, 368, 1146, 1147, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 1148, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 1149, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 1150, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	1151, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 1152, 422,
	423, 421, 424, 425, 426, 1153, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 1154, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 1155, 444, 445, 0, 443, 1156, 446, 447, 448,
	449, 450, 287, 451, 1157, 452, 520, 521, 522, 523,
	1158, 459, 1159, 453, 454, 524, 455, 525, 1160, 456,
	457, 458, 0, 460, 461, 1161, 1162, 462, 463, 464,
	466, 467, 465, 468, 1163, 469, 1164, 0, 470, 471,
	472, 526, 527, 528, 1165, 474, 473, 529, 1166, 1167,
	1168, 1169, 475, 476, 530, 477, 478, 479, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2997, 0, 225, 226, 227, 228, 229,
	1091, 230, 231, 1092, 1093, 1094, 0, 1095, 480, 1096,
	1097, 1098, 1099, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 1100, 238, 239, 240, 241, 242,
	1101, 1102, 0, 243, 485, 486, 487, 1103, 244, 245,
	488, 1104, 1171, 1105, 246, 247, 248, 249, 250, 251,
	252, 0, 1106, 254, 255, 256, 253, 1107, 257, 0,
	258, 259, 260, 1108, 261, 964, 262, 263, 1109, 1110,
	1112, 1111, 1113, 1114, 1115, 264, 265, 266, 267, 0,
	268, 489, 490, 1116, 272, 269, 270, 1117, 273, 271,
	1118, 274, 1119, 1120, 275, 276, 277, 1121, 278, 1122,
	279, 280, 1123, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 1124, 222, 1125,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 1126, 297, 1127, 1128, 965, 298, 299, 495,
	496, 300, 301, 1129, 302, 497, 1130, 498, 303, 1131,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 967,
	309, 310, 1132, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 1133, 966, 317, 502, 503, 1134,
	504, 1135, 319, 968, 505, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 1136,
	330, 329, 1137, 331, 506, 971, 332, 333, 972, 1138,
	334, 335, 336, 1139, 1140, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 1141, 224, 975, 359, 1142, 507, 360, 508, 362,
	363, 1143, 0, 364, 0, 1144, 1145, 366, 367, 368,
	1146, 1147, 369, 370, 509, 976, 371, 977, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 1148, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 1149, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 1150, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 1151, 404, 978,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 1152, 422, 423, 421, 424,
	425, 426, 1153, 427, 411, 412, 428, 429, 979, 430,
	431, 517, 0, 432, 1154, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 1155, 444,
	445, 0, 443, 1156, 446, 447, 448, 449, 450, 287,
	451, 1157, 452, 520, 521, 522, 523, 1158, 459, 1159,
	453, 454, 524, 455, 525, 1160, 456, 457, 458, 0,
	460, 461, 1161, 1162, 462, 463, 464, 466, 467, 465,
	468, 1163, 469, 1164, 0, 470, 471, 472, 526, 527,
	528, 1165, 474, 473, 529, 1166, 1167, 1168, 1169, 475,
	476, 530, 477, 478, 479, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2846, 0, 225, 226, 227, 228, 229, 1091, 230, 231,
	1092, 1093, 1094, 0, 1095, 480, 1096, 1097, 1098, 1099,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 1100, 238, 239, 240, 241, 242, 1101, 1102, 0,
	243, 485, 486, 487, 1103, 244, 245, 488, 1104, 1171,
	1105, 246, 247, 248, 249, 250, 251, 252, 0, 1106,
	254, 255, 256, 253, 1107, 257, 0, 258, 259, 260,
	1108, 261, 964, 262, 263, 1109, 1110, 1112, 1111, 1113,
	1114, 1115, 264, 265, 266, 267, 0, 268, 489, 490,
	1116, 272, 269, 270, 1117, 273, 271, 1118, 274, 1119,
	1120, 275, 276, 277, 1121, 278, 1122, 279, 280, 1123,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 1124, 222, 1125, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 1126,
	297, 1127, 1128, 965, 298, 299, 495, 496, 300, 301,
	1129, 302, 497, 1130, 498, 303, 1131, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 967, 309, 310, 1132,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 1133, 966, 317, 502, 503, 1134, 504, 1135, 319,
	968, 505, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1136, 330, 329, 1137,
	331, 506, 971, 332, 333, 972, 1138, 334, 335, 336,
	1139, 1140, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 1141, 224,
	975, 359, 1142, 507, 360, 508, 362, 363, 1143, 0,
	364, 0, 1144, 1145, 366, 367, 368, 1146, 1147, 369,
	370, 509, 976, 371, 977, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 1148, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 1149, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 1150, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 1151, 404, 978, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 1152, 422, 423, 421, 424, 425, 426, 1153,
	427, 411, 412, 428, 429, 979, 430, 431, 517, 0,
	432, 1154, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 1155, 444, 445, 0, 443,
	1156, 446, 447, 448, 449, 450, 287, 451, 1157, 452,
	520, 521, 522, 523, 1158, 459, 1159, 453, 454, 524,
	455, 525, 1160, 456, 457, 458, 0, 460, 461, 1161,
	1162, 462, 463, 464, 466, 467, 465, 468, 1163, 469,
	1164, 0, 470, 471, 472, 526, 527, 528, 1165, 474,
	473, 529, 1166, 1167, 1168, 1169, 475, 476, 530, 477,
	478, 479, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2121, 0, 225,
	226, 227, 228, 229, 1091, 230, 231, 1092, 1093, 1094,
	0, 1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 1100, 238,
	239, 240, 241, 242, 1101, 1102, 0, 243, 485, 486,
	487, 1103, 244, 245, 488, 1104, 1171, 1105, 246, 247,
	248, 249, 250, 251, 252, 0, 1106, 254, 255, 256,
	253, 1107, 257, 0, 258, 259, 260, 1108, 261, 964,
	262, 263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264,
	265, 266, 267, 0, 268, 489, 490, 1116, 272, 269,
	270, 1117, 273, 271, 1118, 274, 1119, 1120, 275, 276,
	277, 1121, 278, 1122, 279, 280, 1123, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 1124, 222, 1125, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 1126, 297, 1127, 1128,
	965, 298, 299, 495, 496, 300, 301, 1129, 302, 497,
	1130, 498, 303, 1131, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 967, 309, 310, 1132, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 1133, 966,
	317, 502, 503, 1134, 504, 1135, 319, 968, 505, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1136, 330, 329, 1137, 331, 506, 971,
	332, 333, 972, 1138, 334, 335, 336, 1139, 1140, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 1141, 224, 975, 359, 1142,
	507, 360, 508, 362, 363, 1143, 0, 364, 0, 1144,
	1145, 366, 367, 368, 1146, 1147, 369, 370, 509, 976,
	371, 977, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 1148, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 1149, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 1150, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 1151, 404, 978, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 1152,
	422, 423, 421, 424, 425, 426, 1153, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 1154, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 1155, 444, 445, 0, 443, 1156, 446, 447,
	448, 449, 450, 287, 451, 1157, 452, 520, 521, 522,
	523, 1158, 459, 1159, 453, 454, 524, 455, 525, 1160,
	456, 457, 458, 0, 460, 461, 1161, 1162, 462, 463,
	464, 466, 467, 465, 468, 1163, 469, 1164, 0, 470,
	471, 472, 526, 527, 528, 1165, 474, 473, 529, 1166,
	1167, 1168, 1169, 475, 476, 530, 477, 478, 479, 1183,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1817, 0, 0, 0, 225, 226,
	227, 228, 229, 1091, 230, 231, 1092, 1093, 1094, 0,
	1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1100, 238, 239,
	240, 241, 242, 1101, 1102, 0, 243, 485, 486, 487,
	1103, 244, 245, 488, 1104, 1171, 1105, 246, 247, 248,
	249, 250, 251, 252, 0, 1106, 254, 255, 256, 253,
	1107, 257, 0, 258, 259, 260, 1108, 261, 964, 262,
	263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265,
	266, 267, 0, 268, 489, 490, 1116, 272, 269, 270,
	1117, 273, 271, 1118, 274, 1119, 1120, 275, 276, 277,
	1121, 278, 1122, 279, 280, 1123, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	1124, 222, 1125, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 1126, 297, 1127, 1128, 965,
	298, 299, 495, 496, 300, 301, 1129, 302, 497, 1130,
	498, 303, 1131, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 1132, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 1133, 966, 317,
	502, 503, 1134, 504, 1135, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1136, 330, 329, 1137, 331, 506, 971, 332,
	333, 972, 1138, 334, 335, 336, 1139, 1140, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 1141, 224, 975, 359, 1142, 507,
	360, 508, 362, 363, 1143, 0, 364, 0, 1144, 1145,
	366, 367, 368, 1146, 1147, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 1148, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 1149, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 1150, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	1151, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 1152, 422,
	423, 421, 424, 425, 426, 1153, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 1154, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 1155, 444, 445, 0, 443, 1156, 446, 447, 448,
	449, 450, 287, 451, 1157, 452, 520, 521, 522, 523,
	1158, 459, 1159, 453, 454, 524, 455, 525, 1160, 456,
	457, 458, 0, 460, 461, 1161, 1162, 462, 463, 464,
	466, 467, 465, 468, 1163, 469, 1164, 0, 470, 471,
	472, 526, 527, 528, 1165, 474, 473, 529, 1166, 1167,
	1168, 1169, 475, 476, 530, 477, 478, 479, 1082, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095,
	480, 1096, 1097, 1098, 1099, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 1100, 238, 239, 240,
	241, 242, 1101, 1102, 0, 243, 485, 486, 487, 1103,
	244, 245, 488, 1104, 1171, 1105, 246, 247, 248, 249,
	250, 251, 252, 0, 1106, 254, 255, 256, 253, 1107,
	257, 0, 258, 259, 260, 1108, 261, 964, 262, 263,
	1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266,
	267, 0, 268, 489, 490, 1116, 272, 269, 270, 1117,
	273, 271, 1118, 274, 1119, 1120, 275, 276, 277, 1121,
	278, 1122, 279, 280, 1123, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1124,
	222, 1125, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1126, 297, 1127, 1128, 965, 298,
	299, 495, 496, 300, 301, 1129, 302, 497, 1130, 498,
	303, 1131, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 1132, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1133, 966, 317, 502,
	503, 1134, 504, 1135, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1136, 330, 329, 1137, 331, 506, 971, 332, 333,
	972, 1138, 334, 335, 336, 1139, 1140, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 1141, 224, 975, 359, 1142, 507, 360,
	508, 362, 363, 1143, 0, 364, 0, 1144, 1145, 366,
	367, 368, 1146, 1147, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1148, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1149, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1150, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1151,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1152, 422, 423,
	421, 424, 425, 426, 1153, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 1154, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1155, 444, 445, 0, 443, 1156, 446, 447, 448, 449,
	450, 287, 451, 1157, 452, 520, 521, 522, 523, 1158,
	459, 1159, 453, 454, 524, 455, 525, 1160, 456, 457,
	458, 0, 460, 461, 1161, 1162, 462, 463, 464, 466,
	467, 465, 468, 1163, 469, 1164, 0, 470, 471, 472,
	526, 527, 528, 1165, 474, 473, 529, 1166, 1167, 1168,
	1169, 475, 476, 530, 477, 478, 479, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 1091,
	230, 231, 1092, 1093, 1094, 0, 1095, 480, 1096, 1097,
	1098, 1099, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 1100, 238, 239, 240, 241, 242, 1101,
	1102, 0, 243, 485, 486, 487, 1103, 244, 245, 488,
	1104, 1171, 1105, 246, 247, 248, 249, 250, 251, 252,
	0, 1106, 254, 255, 256, 253, 1107, 257, 0, 258,
	259, 260, 1108, 261, 964, 262, 263, 1109, 1110, 1112,
	1111, 1113, 1114, 1115, 264, 265, 266, 267, 0, 268,
	489, 490, 1116, 272, 269, 270, 1117, 273, 271, 1118,
	274, 1119, 1120, 275, 276, 277, 1121, 278, 1122, 279,
	280, 1123, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 1124, 222, 1125, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 1126, 297, 1127, 1128, 965, 298, 299, 495, 496,
	300, 301, 1129, 302, 497, 1130, 498, 303, 1131, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 967, 309,
	310, 1132, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 1133, 966, 317, 502, 503, 1134, 504,
	1135, 319, 968, 505, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 1136, 330,
	329, 1137, 331, 506, 971, 332, 333, 972, 1138, 334,
	335, 336, 1139, 1140, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	1141, 224, 975, 359, 1142, 507, 360, 508, 362, 363,
	1143, 0, 364, 0, 1144, 1145, 366, 367, 368, 1146,
	1147, 369, 370, 509, 976, 371, 977, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 1148, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 1149, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	1150, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 1151, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 1152, 422, 423, 421, 424, 425,
	426, 1153, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 1154, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 1155, 444, 445,
	0, 443, 1156, 446, 447, 448, 449, 450, 287, 451,
	1157, 452, 520, 521, 522, 523, 1158, 459, 1159, 453,
	454, 524, 455, 525, 1160, 456, 457, 458, 0, 460,
	461, 1161, 1162, 462, 463, 464, 466, 467, 465, 468,
	1163, 469, 1164, 0, 470, 471, 472, 526, 527, 528,
	1165, 474, 473, 529, 1166, 1167, 1168, 1169, 475, 476,
	530, 477, 478, 479, 2096, 0, 901, 873, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 2093, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	2094, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 2092,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 2095, 0,
	0, 0, 0, 0, 0, 885, 2091, 0, 847, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 188, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 190, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	1338, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	182, 475, 476, 530, 477, 478, 479, 860, 183, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 901, 873, 874, 875, 871, 872, 884, 1549,
	1547, 0, 0, 883, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 188,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 1338, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 860,
	183, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 901, 873, 874, 875, 871, 872,
	884, 1549, 2584, 0, 0, 883, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 188, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 190,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 1338, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 182, 475, 476, 530, 477, 478,
	479, 860, 183, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 901, 873, 874, 875,
	871, 872, 884, 1549, 1547, 0, 0, 883, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 2200, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 2205, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	2201, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 2202, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 2141, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 885,
	2139, 0, 2138, 883, 901, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 885, 2136, 0, 2135, 883, 901, 873,
	874, 875, 871, 872, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 889,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 938,
	0, 945, 237, 944, 0, 238, 239, 240, 241, 242,
	891, 924, 858, 243, 983, 984, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 948,
	268, 942, 941, 862, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 868, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 880, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 940, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 953,
	954, 300, 301, 0, 302, 962, 0, 890, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 935, 936, 0,
	896, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 859, 224, 975, 359, 881, 929, 360, 943, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 939, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 869, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 937, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 982, 438, 439, 440, 441, 959, 0, 444,
	445, 857, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 949, 950, 951, 952, 0, 459, 0,
	453, 454, 960, 455, 961, 879, 456, 457, 458, 0,
	460, 461, 0, 863, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 946,
	981, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 860, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 885, 2133, 0,
	2132, 883, 901, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 885, 2130, 0, 1407, 883, 901, 873, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 1406, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 850, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 864, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 901, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 3658, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 864,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 901, 873, 874, 875, 871, 872,
	884, 885, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 3477, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 864, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 901, 873, 874, 875,
	871, 872, 884, 885, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	3182, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 1617, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 2975, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 901, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 2010, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 2009, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 901, 873, 874, 875, 871, 872,
	884, 885, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 864, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 901, 873, 874, 875,
	871, 872, 884, 885, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 1617, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 2205, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 901, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 885, 1547, 0, 2210, 883, 901, 873, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 2208, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 2196, 883, 901, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 2185, 883, 901, 873,
	874, 875, 871, 872, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 889,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 938,
	0, 945, 237, 944, 0, 238, 239, 240, 241, 242,
	891, 924, 858, 243, 983, 984, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 948,
	268, 942, 941, 862, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 868, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 880, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 940, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 953,
	954, 300, 301, 0, 302, 962, 0, 890, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 935, 936, 0,
	896, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 859, 224, 975, 359, 881, 929, 360, 943, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 939, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 869, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 937, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 982, 438, 439, 440, 441, 959, 0, 444,
	445, 857, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 949, 950, 951, 952, 0, 459, 0,
	453, 454, 960, 455, 961, 879, 456, 457, 458, 0,
	460, 461, 0, 863, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 946,
	981, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 860, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	2183, 883, 2174, 2181, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 2177, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 2178, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 2179,
	2176, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 2180, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 2175, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 2171, 883, 2174, 2181, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 2177, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 2178, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 2179, 2176, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 2180, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 2175, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 901, 873,
	874, 875, 871, 872, 884, 885, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 889,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 938,
	0, 945, 237, 944, 0, 238, 239, 240, 241, 242,
	891, 924, 858, 243, 983, 984, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 948,
	268, 942, 941, 862, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 868, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 880, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 940, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 953,
	954, 300, 301, 0, 302, 962, 0, 890, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 935, 936, 0,
	896, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 859, 224, 975, 359, 881, 929, 360, 943, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 939, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 869, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 937, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 982, 438, 439, 440, 441, 959, 0, 444,
	445, 857, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 949, 950, 951, 952, 0, 459, 0,
	453, 454, 960, 455, 961, 879, 456, 457, 458, 0,
	460, 461, 0, 863, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 946,
	981, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 860, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 1555, 0, 885, 0, 0,
	0, 883, 901, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 1989, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 1226, 883, 901, 873, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 1225, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 1220, 883,
	901, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 1219, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 1215, 883, 901, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 901, 873, 874, 875,
	871, 872, 884, 885, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 901, 873,
	874, 875, 871, 872, 884, 885, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 889,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 938,
	0, 945, 237, 944, 0, 238, 239, 240, 241, 242,
	891, 924, 858, 243, 983, 984, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 3690, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 948,
	268, 942, 941, 862, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 868, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 880, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 940, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 953,
	954, 300, 301, 0, 302, 962, 0, 890, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 935, 936, 0,
	896, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 859, 224, 975, 359, 881, 929, 360, 943, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 939, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 869, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 937, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 982, 438, 439, 440, 441, 959, 0, 444,
	445, 857, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 949, 950, 951, 952, 0, 459, 0,
	453, 454, 960, 455, 961, 879, 456, 457, 458, 0,
	3689, 461, 0, 863, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 946,
	981, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 860, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	901, 873, 874, 875, 871, 872, 884, 885, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	3688, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 858, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 3690,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 862, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 859, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 869, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 857, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 3689, 461, 0, 863, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 860, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 901, 873, 874, 875, 2551, 2552, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 925, 889, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 938, 0, 945, 237, 944, 0, 238,
	239, 240, 241, 242, 891, 924, 858, 243, 983, 984,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 948, 268, 942, 941, 862, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 933,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 868,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 880, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 940, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 953, 954, 300, 301, 0, 302, 962,
	0, 890, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 935, 936, 0, 896, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 859, 224, 975, 359, 881,
	929, 360, 943, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 939, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 869, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 937, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 982, 438, 439, 440,
	441, 959, 0, 444, 445, 857, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 949, 950, 951,
	952, 0, 459, 0, 453, 454, 960, 455, 961, 879,
	456, 457, 458, 0, 460, 461, 0, 863, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 946, 981, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 860,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 901, 873, 874, 875, 2549, 2550,
	884, 885, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 891, 924, 858, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 862,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 868, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 859, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 857, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 863,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 860, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 901, 873, 874, 875,
	871, 872, 884, 885, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 968, 928, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 972, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 975, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 979, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 460, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 860, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 1997, 1998, 901, 873,
	874, 875, 871, 872, 884, 885, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 889,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 938,
	0, 945, 237, 944, 0, 238, 239, 240, 241, 242,
	891, 924, 0, 243, 983, 984, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 948,
	268, 942, 941, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 868, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 880, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 940, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 953,
	954, 300, 301, 0, 302, 962, 0, 890, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 935, 936, 0,
	896, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 0, 224, 975, 359, 881, 929, 360, 943, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 939, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 869, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 937, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 982, 438, 439, 440, 441, 959, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 949, 950, 951, 952, 0, 459, 0,
	453, 454, 960, 455, 961, 879, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 946,
	981, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 2193, 0, 0, 0, 0, 0, 0, 2191, 2192,
	901, 873, 874, 875, 871, 872, 884, 885, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	925, 889, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 938, 0, 945, 237, 944, 0, 238, 239, 240,
	241, 242, 891, 924, 0, 243, 983, 984, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 948, 268, 942, 941, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 933, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 868, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 880,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 940,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 953, 954, 300, 301, 0, 302, 962, 0, 890,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 935,
	936, 0, 896, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 224, 975, 359, 881, 929, 360,
	943, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	939, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 2544, 2545, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 937, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 982, 438, 439, 440, 441, 959,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 949, 950, 951, 952, 0,
	459, 0, 453, 454, 960, 455, 961, 879, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 946, 981, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 901, 873, 874,
	875, 871, 872, 884, 0, 0, 0, 0, 0, 0,
	1747, 1748, 0, 0, 225, 226, 227, 228, 229, 885,
	230, 231, 0, 883, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 0, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 858, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 3690, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 862, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 0, 928, 0, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 0, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	859, 224, 0, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 0, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	857, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 3689,
	461, 0, 863, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 901, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 854, 855, 0,
	0, 225, 226, 227, 228, 229, 885, 230, 231, 0,
	883, 0, 0, 0, 925, 889, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 938, 0, 945, 237, 944,
	0, 238, 239, 240, 241, 242, 0, 924, 0, 243,
	983, 984, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 948, 268, 942, 941, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 933, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 880, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 940, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 953, 954, 300, 301, 0,
	302, 962, 0, 890, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 935, 936, 0, 896, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 224, 975,
	359, 881, 929, 360, 943, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 939, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	869, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 937, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 982, 438,
	439, 440, 441, 959, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 949,
	950, 951, 952, 0, 459, 0, 453, 454, 960, 455,
	961, 879, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 946, 981, 0, 474, 473,
	529, 0, 847, 0, 1021, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 885, 925, 0, 0, 883, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 924, 0, 243,
	485, 486, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 962, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1007, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 224, 975,
	359, 0, 929, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 1013, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 1015, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 188, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 959, 0, 444, 445, 0, 443, 190,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 960, 455,
	961, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 1338, 527, 528, 0, 474, 473,
	529, 0, 1021, 0, 182, 475, 476, 530, 477, 478,
	479, 0, 183, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 1011, 925, 1641, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 924, 0, 243, 485, 486,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 495, 496, 300, 301, 0, 302, 962,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 502, 503, 0, 504, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1007, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 0, 224, 975, 359, 0,
	929, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	1013, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 516, 1015,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 188,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 959, 0, 444, 445, 0, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 960, 455, 961, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 1338, 527, 528, 0, 474, 473, 529, 0,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 0,
	183, 0, 0, 2704, 0, 1021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1011,
	0, 1641, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 924, 0,
	243, 485, 486, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 495, 496, 300, 301,
	0, 302, 962, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 502, 503, 0, 504, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1007, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 0, 224,
	975, 359, 0, 929, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 1013, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 516, 1015, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 959, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 960,
	455, 961, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 0, 1003, 0, 1021, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 1011, 0, 1009, 925, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 924, 0,
	243, 485, 486, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 495, 496, 300, 301,
	0, 302, 962, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 502, 503, 0, 504, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1007, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 0, 224,
	975, 359, 0, 929, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 1013, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 516, 1015, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 959, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 960,
	455, 961, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 0, 1021, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 1011, 925, 1009, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 924, 0, 243, 485,
	486, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	962, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 1007, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 224, 975, 359,
	0, 929, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 1013, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	1015, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 959, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 960, 455, 961,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 1021, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	1011, 925, 1009, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 924, 0, 243, 485, 486, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 495, 496, 300, 301, 0, 302, 962, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	502, 503, 0, 504, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 0, 224, 975, 359, 0, 929,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 516, 1015, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	959, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 960, 455, 961, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 0, 847,
	0, 1199, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	1539, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1171, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 966, 317,
	502, 503, 0, 504, 0, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 971, 332,
	333, 972, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 0, 0, 975, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 188, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 190, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 1338, 527, 528, 0, 474, 473, 529, 0, 0,
	0, 182, 475, 476, 530, 477, 478, 479, 0, 183,
	0, 0, 1335, 0, 1199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1171, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 971, 332, 333, 972, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 0, 975,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 188, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 190,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 1338, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 182, 475, 476, 530, 477, 478,
	479, 0, 183, 0, 0, 0, 0, 1199, 1198, 0,
	0, 0, 0, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 1171, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 966, 317, 502, 503, 0, 504,
	0, 319, 968, 505, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 971, 332, 333, 972, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	0, 0, 975, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 1199, 1198, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 2912, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1171, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 971, 332, 333, 972, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 0, 975,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1199, 1198, 0, 0, 0, 0, 1196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 1205, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1171, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 966, 317,
	502, 503, 0, 504, 0, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 971, 332,
	333, 972, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 0, 0, 975, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1021, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 925, 0,
	1344, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 924, 0, 243, 485, 486, 487, 0, 244, 245,
	931, 0, 912, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 915, 913,
	914, 921, 917, 916, 920, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 955, 956, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 495,
	496, 300, 301, 0, 302, 962, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 926, 927, 930, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 966, 317, 502, 503, 0,
	504, 0, 319, 968, 928, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 963, 971, 332, 333, 972, 0,
	334, 335, 336, 919, 918, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 0, 224, 975, 359, 0, 929, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 976, 371, 977, 957, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 958, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 922, 427, 411, 412, 428, 429, 979, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 959, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 960, 455, 961, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 923, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 847, 0, 219, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 188, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 190, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 1338, 527, 528,
	0, 474, 473, 529, 219, 0, 0, 182, 475, 476,
	530, 477, 478, 479, 0, 183, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 157, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 1286, 0, 219, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 1655, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 1290, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 2860, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 1290, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	219, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 2447, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 219, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 3000,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 714, 0, 608, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 1902, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 614, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 712, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 613, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 607, 0, 608, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 617,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 614, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 613, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 605, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 1199, 1198, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1171, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 971, 332, 333, 972, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 0, 975,
	359, 3144, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1199, 1198, 0, 0, 0, 0, 1196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1171, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 966, 317,
	502, 503, 0, 504, 0, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 971, 332,
	333, 972, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 0, 0, 975, 359, 2840, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 608, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 614, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 1936, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 613,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 608, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 617, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 614, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 613, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 1371, 0, 1199, 1198, 0, 0,
	0, 0, 1196, 0, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	1171, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 1370, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 966, 317, 502, 503, 0, 504, 0,
	319, 968, 505, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 971, 332, 333, 972, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 0,
	0, 975, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 1369, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 1368,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 979, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 1332, 0, 1199, 1198, 0, 0, 0,
	0, 1196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 1171,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1331, 500, 501, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 966, 317, 502, 503, 0, 504, 0, 319,
	968, 505, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 971, 332, 333, 972, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 0, 0,
	975, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 979, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 1265, 0, 1199, 1198, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1171, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1264, 500, 501, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 971, 332, 333, 972, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 0, 975,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1194, 0, 1199, 1198, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 1171, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1193, 500, 501, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	971, 332, 333, 972, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 0, 975, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	1199, 1198, 0, 0, 0, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1199, 1198, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 617, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 1720, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1199, 1198, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 1171, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 966, 317, 502, 503, 0, 504,
	0, 319, 968, 505, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 971, 332, 333, 972, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	0, 0, 975, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	1199, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 2322, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 2319, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 2326, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 2485, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 2325,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 2482, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 2484, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 2481, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 2324, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 2483, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 2322, 244, 245, 488, 0,
	0, 2316, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 2319, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 2326, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 2325, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 2315, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 2324, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 2323, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 1428, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 1431, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	1429, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 1430,
	473, 529, 1175, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1177, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 1013, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1172, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1174, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 1013, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1078, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1080,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	1013, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 559,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 558, 229, 548, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 551, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 552, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 553, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 547, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 548, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 551, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 552, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 553, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 2822, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 1013, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 2419, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 2418, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1912, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 1840, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 1845, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 1844, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 1833, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1835, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1328, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1327, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1319, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1318, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1316, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1315,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1312,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1311, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1267, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1186, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 1188, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 224, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	551, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	552, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 553, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 1943, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	1941, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 1939, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 1883, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 705, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 704,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 703, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 2485,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 3350,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 538, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	537, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 536, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 219, 3359, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 219, 2472, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	3132, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	2244, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 219, 2472, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 2469, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	1920, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 1910, 0, 219, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 579, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 1052, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 1050, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	580, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 576, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 1053, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 575, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 579, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 569, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 580,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 576, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 1343, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	575, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1325, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1324, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1274, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1273, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1258, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1257,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1253,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1180, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 579, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 1052, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 1050, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 580, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 576, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 1053, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 575, 521, 522, 523, 0, 459,
	0, 453, 1051, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 1034, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 585, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 579, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 569, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 567, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 568, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 580, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	570, 409, 0, 410, 414, 415, 576, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 571, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 575,
	521, 522, 523, 0, 459, 0, 453, 573, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 563, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 564, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	561, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 555,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 533, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 2875, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 2798, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 2796,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 2782, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 2427, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 564, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 1865, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 0,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 1296, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 1235, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 986, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 0, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 0, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 0, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 0, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 1689,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 0,
	1695, 0, 1685, 237, 1701, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 1710, 1711, 0, 0, 244,
	245, 0, 0, 1171, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	948, 268, 1699, 1698, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 0, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 1697, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	1706, 1707, 300, 301, 0, 302, 0, 0, 0, 303,
	0, 304, 305, 306, 307, 308, 0, 0, 0, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 966, 317, 1692, 1693,
	0, 1688, 0, 319, 968, 0, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 0, 971, 332, 333, 972,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 0, 0, 975, 359, 0, 0, 360, 1700,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 0, 976, 371, 977, 0,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 1682, 1683, 0, 382, 0, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 1696,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 0, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 979,
	430, 431, 1694, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 1709, 438, 439, 440, 441, 0, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 1702, 1703, 1704, 1705, 0, 459,
	0, 453, 454, 0, 455, 0, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 0,
	1686, 1708, 0, 474, 473, 0, 0, 0, 0, 0,
	475, 476, 0, 477, 478, 479, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 1504, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 1495, 0, 0, 0, 0, 1476, 0, 0,
	1492, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 1498, 1499, 1500, 1501, 0, 1503,
	1505, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 1523, 0, 0, 1511,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	1509, 1504, 1502, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 2631, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	0, 0, 0, 0, 1513, 0, 2628, 1523, 0, 0,
	0, 0, 0, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 1496, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	1509, 1504, 0, 0, 1503, 1505, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 1496, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521,
	0, 0, 0, 0, 0, 0, 0, 2627, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 1509, 1504, 0,
	0, 0, 0, 0, 1513, 1476, 0, 1523, 0, 0,
	1522, 0, 1497, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 1475, 1514, 0, 0, 1490, 1491, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 2626, 0,
	0, 1513, 0, 1502, 1523, 0, 0, 0, 0, 0,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	1502, 0, 0, 0, 0, 0, 0, 2098, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 1497, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 1504, 0, 0,
	1514, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0,
	3638, 1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0,
	0, 1481, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 0, 1521, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 1510, 1520, 0, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 0, 0, 1502, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0, 3634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 1513, 3552, 0, 1523, 0, 0,
	0, 0, 0, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 1496, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	1509, 1504, 0, 0, 1503, 1505, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 1496, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521,
	0, 0, 0, 3551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 1509, 1504, 0,
	0, 0, 0, 0, 1513, 1476, 0, 1523, 0, 0,
	1522, 0, 1497, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 1475, 1514, 0, 0, 1490, 1491, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 3420, 0, 0, 0, 0, 0,
	0, 1513, 0, 1502, 1523, 0, 0, 0, 0, 0,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	1502, 0, 0, 3312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 1497, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 1504, 0, 0,
	1514, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0,
	3259, 1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0,
	0, 1481, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 0, 1521, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 1510, 1520, 0, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 0, 0, 1502, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0, 3258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 1513, 3257, 0, 1523, 0, 0,
	0, 0, 0, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 1496, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	1509, 1504, 0, 0, 1503, 1505, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 1496, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521,
	0, 0, 0, 3004, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 1509, 1504, 0,
	0, 0, 0, 0, 1513, 1476, 0, 1523, 0, 0,
	1522, 0, 1497, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 1475, 1514, 0, 0, 1490, 1491, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 2624, 0, 0, 0, 0, 0,
	0, 1513, 0, 1502, 1523, 0, 0, 0, 0, 0,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	1502, 0, 0, 2623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 1497, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 1504, 0, 0,
	1514, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0,
	2622, 1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0,
	0, 1481, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 0, 1521, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 1510, 1520, 0, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 1504,
	0, 0, 0, 0, 0, 1502, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 1497, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 1495, 1514, 0, 2559, 0, 1476,
	0, 0, 1492, 0, 1522, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0, 2621,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 3748, 0, 2560, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 1513, 2588, 0, 1523, 1498, 1499, 1500, 1501,
	0, 1503, 1505, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 1511, 0, 0, 1503, 1505, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3747, 0, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 1474, 1497,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 1504, 0,
	0, 1514, 0, 0, 1502, 1476, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1514, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 0, 1481, 0, 2684, 0, 0, 2683, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 1513, 0, 0, 1523, 0, 0, 0, 0, 0,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 2218, 0, 0, 1490, 1491, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 1509, 1504,
	0, 1496, 0, 2217, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 1509, 1504, 0,
	0, 1503, 1505, 0, 0, 1476, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 1496, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 0, 1481, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 1509, 1504, 0, 0, 0, 0,
	0, 1513, 1476, 0, 1523, 0, 0, 1522, 0, 1497,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	1475, 1514, 0, 0, 1490, 1491, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 844, 0, 0, 0, 0, 0, 1498,
	1499, 1500, 1501, 0, 0, 0, 0, 0, 1512, 1481,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	1502, 1523, 0, 0, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 1519, 0, 1520, 0, 0, 0, 0, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 1497, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 1504, 0, 0, 1514, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	2986, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 0, 0, 0, 0, 0, 1498, 1499,
	1500, 1501, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 1473, 1474, 2690, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 2685, 1513, 0, 1476,
	1523, 0, 0, 0, 1522, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 1475, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1492, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 0, 0, 0, 1513, 1502, 1476, 1523, 0,
	0, 0, 1522, 0, 1503, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 1475, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 1495, 1514, 0, 0, 0,
	0, 0, 0, 1492, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 1513, 1502, 0, 1523, 0, 0, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2652, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	1497, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 1504,
	0, 0, 1514, 2625, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	1475, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	1495, 0, 0, 1481, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 1498,
	1499, 1500, 1501, 0, 0, 0, 0, 0, 0, 1481,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 1523, 0, 0, 0, 0, 1521, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 1510, 1520, 0, 0, 0, 0, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 0, 0, 0, 0, 1502, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 1497, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 1495, 1514, 0, 0,
	0, 1476, 0, 0, 1492, 0, 1522, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 0, 1513, 0, 0, 1523, 1498, 1499,
	1500, 1501, 0, 1503, 1505, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 0,
	1523, 0, 0, 1511, 0, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 750, 0, 786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 1502, 0, 0, 0,
	757, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 769, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 756,
	0, 0, 0, 0, 759, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 0, 779, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 787, 761, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 764, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 771, 770, 0,
	0, 0, 0, 0, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 783, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 777, 0,
	0, 774, 0, 0, 0, 0, 0, 775, 0, 0,
	752, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 776,
	0, 0, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 790, 0, 0, 0, 0, 0, 0,
	0, 778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 780, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 782,
}
var sqlPact = [...]int{

	228, -1000, -1000, -1000, -1000, -1000, -1000, 264, 263, 260,
	259, 258, 256, 255, 240, -1000, -1000, -1000, -1000, -1000,
	-1000, 238, -1000, -1000, 237, -1000, 236, 234, 233, 232,
	-1000, 231, 229, 219, -1000, -1000, -1000, -1000, 215, 211,
	208, 62498, 1894, 75896, 66054, 1867, 56236, 75447, 55787, 74998,
	74549, 205, -1000, 74100, 195, 194, 193, -1000, 73651, -1000,
	1693, -1000, 192, 2691, 46783, 191, 190, 188, 2590, 187,
	-1000, 172, -1000, 6907, 1345, -1000, 167, -1000, 4117, 4067,
	65162, 2348, 165, 162, 46333, 2346, 2428, -1000, -1000, 1712,
	-1000, -1000, 160, 159, 158, 156, 154, 153, 151, 147,
	145, -1000, 143, 139, 137, 133, 122, 121, 113, -1000,
	112, 108, 106, 99, 98, 97, 93, 92, 88, 87,
	85, 83, -1000, 88694, 1643, 1443, 1438, 1434, 1427, 1425,
	906, 78, 77, 74, 73, 71, 70, 69, -1000, 68,
	66, 65, 60, 59, 58, 57, 55, 166, 53, 52,
	50, 49, 46, 43, 1886, -1000, 1330, 616, 22596, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 80769, 76339, 42, -103, 40, -1000, 2758, 930,
	38681, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 536, -1000, -1000, -1000, 327, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1621, 717, -1000, -1000, -1000, 73208, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1889, -104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 714, -1000, 1885, 221, 1816, -1000,
	-1000, -1000, -1000, -1000, 76339, -1000, -1000, 3138, 3135, 1713,
	713, 72765, -1000, 1355, -1000, 870, 25440, -1000, 1161, -1000,
	25440, 324, -1000, -1000, -1000, -1000, -1000, -1000, 3134, 3130,
	3128, 3125, -1000, -1000, 55338, 16876, 54889, 54440, 72316, 16417,
	62055, 50419, -1000, -1000, -1000, 41410, 1197, -1000, -1000, -1000,
	-1000, -1000, 20, 51319, 76339, -1000, 311, -1000, -1000, -1000,
	-1000, -1000, -1000, 32180, 584, 31696, 502, 31212, 244, -1000,
	-1000, -1000, 3123, 3122, 1007, 3120, 2687, 80326, 1558, 3119,
	1496, 1106, 944, 3118, 3117, 3115, 3113, 3109, 3107, 1275,
	71867, 2456, 71418, 1474, 49960, 61606, 62498, 2210, 70969, 1234,
	1231, -1000, -1000, -1000, -1000, 2583, 2398, 2380, 43660, -1000,
	3104, 3103, 3102, 3098, 3090, 79883, 1548, 3089, 2081, 3086,
	3085, 3084, 3080, 3079, 3078, 3077, 3076, -1000, 61157, 60708,
	60259, 2815, 70520, 59810, 49501, -1000, -1000, -1000, 40490, 4902,
	4633, 70071, 41867, 62498, 62498, -1000, -1000, 32652, 176, -1000,
	-1000, -1000, 41410, 2394, -1000, 32652, 176, -1000, 76339, -1000,
	2454, 1649, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1937, 1407, 2937, 49042, 1720, 1229, 2757, 2555,
	2554, 1340, 2134, 2551, 2548, 2543, 2519, 2489, 1518, 2125,
	445, 22112, 1338, 1373, 2485, 2477, 2977, 1690, 1906, 53991,
	3073, 3071, 2713, 2476, 2464, 2393, -1000, -1000, -1000, -1000,
	1329, -1000, -1000, 57122, -1000, -1000, 1213, -1000, -1000, 1213,
	-1000, -1000, -1000, -1000, -1000, 1187, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1330, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2030, -1000, 1697, -1000, -1000,
	2148, 2695, 2695, 2695, 2785, 520, 506, -1000, 166, -1000,
	-1000, 88043, -1000, -1000, 32652, 32652, 32652, 32652, 32652, 32652,
	32652, 1771, -1000, 712, -1000, -1000, 756, -1000, 710, 617,
	-1000, -1000, -1000, -1000, -1000, -1000, 709, -1000, -1000, -1000,
	-1000, -1000, -1000, 2922, -1000, 19220, -1000, -1000, -1000, 486,
	706, 32652, -1000, -1000, 2970, 2969, 529, -1000, 286, 881,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2452, 704, 703, -1000, 702, 699, 698, 697,
	696, -1000, -1000, -1000, 695, 694, 693, 692, 691, 687,
	686, 685, -1000, 1670, -1000, -1000, -1000, -1000, -1000, -1000,
	652, 651, 651, 651, -1000, 937, -1000, -1000, -1000, 369,
	649, 352, 648, 646, 637, 684, 683, 681, 677, 676,
	675, 672, 670, 669, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	936, -1000, -1000, -1000, -1000, 15, 76339, -1000, 536, 15,
	-1000, -1000, 668, -1000, 25912, 25912, 25912, -1000, -1000, 1884,
	32652, -1000, 2689, -1000, 25, 25, 835, 39577, -1000, 37768,
	835, 242, 763, 43210, -1000, 2391, -1000, -1000, 667, 285,
	-1000, -1000, -1000, -1000, 2386, 76339, 17333, 76339, 62498, 62498,
	62498, 2647, 32652, -1000, -1000, 48583, 76339, 62941, 2872, 81655,
	48583, 76339, 2449, -1000, -1000, -1000, 76339, -1000, 32652, -1000,
	2871, 1350, 51766, 2816, -67, -1000, -1000, -1000, -1000, -1000,
	-1000, 2056, 2071, 1073, 1921, 1357, -1000, 25440, 2679, -1000,
	-1000, -1000, 284, 17333, -1000, -1000, -1000, -1000, -1000, 1991,
	2616, 1449, -1000, 1913, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1614, 2614, -1000, 1964, 2611, 1585, -1000,
	-1000, 1815, -1000, -1000, 2705, -1000, -1000, 1742, 2606, 26,
	-1000, -1000, 897, 2603, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 829, -1000, 50876, 41410, 51319, -4, -1000,
	-1000, -95, -1000, 15958, 88043, -1000, -1000, -1000, 88043, 863,
	-1000, -1000, 2602, -1000, 88043, 855, -1000, -1000, 2601, -1000,
	-1000, -1000, 3067, -1000, 3066, 2008, 3065, 3064, 3063, -1000,
	1465, 1651, 3062, -1000, 3061, -1000, -1000, -1000, -1000, -1000,
	-1000, 59361, 1883, -1000, -1000, 58463, -1000, 2002, -1000, -1000,
	58912, 942, -1000, 897, 1998, -1000, 934, -1000, -1000, 3059,
	2800, 2248, 897, 1994, -1000, -1000, -1000, -1000, -1000, 44546,
	-1000, 44546, -1000, 44546, -1000, 1376, -1000, 79440, 25, 25,
	2922, -1000, -1000, -1000, -1000, -1000, 2600, 3058, 3055, 3048,
	-1000, 76339, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	178, 2597, -1000, -1000, 178, 2596, -1000, 178, 2588, -1000,
	64713, -1000, -1000, 1849, 2577, -1000, 175, 2576, -1000, -1000,
	-131, 2572, -1000, -1000, 17, -1000, -1000, -1000, 930, -1000,
	40027, -1000, 40027, 69622, 50876, 879, 708, 45883, 88043, -1000,
	-114, -1000, 41410, 88043, -1000, 50876, 58463, -1000, 69173, 58020,
	-1000, -1000, 1254, 2117, -1000, -1000, -1000, 879, 50876, 50876,
	50876, -1000, 68724, -1000, -1000, 1741, 1428, 2718, 1710, 62498,
	-1000, 1762, -1000, -1000, -1000, 2739, 2445, -1000, 48140, 64270,
	-1000, 63827, -1000, 63384, -1000, 62498, -1000, 62498, -1000, 3047,
	3044, 3043, -1000, 3042, 2730, 88043, 2724, -1000, 2565, 1442,
	1436, 76339, -1000, -1000, 76339, -1000, 76339, -1000, -1000, -1000,
	-1000, -1000, 2054, -1000, -1000, -1000, -1000, 62498, -1000, -1000,
	-1000, -1000, -1000, -1000, 2444, -1000, 1475, -1000, 1711, -1000,
	1244, -1000, -1000, 180, -1000, -1000, -67, -1000, 78997, -1000,
	2148, -1000, 76339, -1000, 2046, 2430, 2443, 1547, 1892, 2157,
	-1000, 30728, 2133, 35012, 1912, 166, -1000, -1000, 166, 166,
	24968, -1000, -1000, 81655, 81655, 17333, 1210, 32652, 32652, 32652,
	32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652,
	32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652,
	32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652, 32652,
	32652, 32652, 2344, 32652, 1181, 32652, 32652, 32652, 32652, 1704,
	-1000, -1000, 1658, 565, 1669, -1000, 2911, 2911, 2911, 926,
	926, 88382, 88382, 567, 3041, 756, -1000, 32652, -1000, 176,
	32652, 17792, -1000, -1000, 506, 10021, 2027, -1000, 503, 18276,
	-1000, -1000, -1000, 19220, 617, 30244, 32652, 931, 88043, -1000,
	-1000, 1577, 2927, 15501, 2466, 2293, 666, 766, 765, 21628,
	21144, 20660, 20176, 658, 32652, 32652, 32652, 32652, 32652, 32652,
	32652, 32652, -1000, -1000, 2945, -1000, 2927, -1000, -1000, -1000,
	-1000, 2927, 1209, 1207, 2927, -1000, 2927, 2927, 3022, 3022,
	29772, 29288, 28804, 35484, 28320, 32652, 19692, 27836, 27352, -1000,
	76339, 15, 2870, 32652, 201, -1000, 86687, -1000, 201, 201,
	665, 12, 88043, 2197, 2197, 39129, 2083, 1780, 1780, 1780,
	-1000, 835, 11819, 835, 67834, 1798, 835, 835, 281, 343,
	500, 37320, 2689, 67834, 734, 664, 38, 37, 36, -1000,
	-1000, 34, 32, -1000, -1000, 62498, 661, 17792, 17333, 1289,
	11, 276, 2163, 2161, 2159, -1000, 2147, 1422, 10, 1153,
	-178, -1000, 248, 9, -1000, 1183, 272, -1000, -1000, -1000,
	-1000, -1000, 3040, 3039, -1000, 935, 657, 653, 383, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 652, 651, 651,
	651, -1000, 369, 649, 352, 648, 646, 637, -1000, -1000,
	-1000, -1000, 2385, -95, 62941, 827, -2, 1013, -67, -1000,
	-1000, -1000, 51766, 1213, -1000, 1778, -1000, -1000, -1000, -1000,
	-1000, -1000, 1224, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	529, -1000, -1000, -1000, -1000, -1000, -1000, 2934, 2929, 14,
	-1000, -1000, 17333, -1000, -77, 1546, -1000, 53542, 1927, 2712,
	2699, 1363, -1000, 1310, 2778, 57122, 2825, 2833, 519, -1000,
	2382, -1000, -1000, 866, 1458, 1148, 57122, 1964, -1000, 81655,
	-1000, 2177, 2777, 1260, 1276, 1260, 1260, 1267, -1000, 57122,
	1135, -1000, 1127, -1000, -82, 2818, 2829, 446, -1000, 2376,
	1120, -1000, -1000, 62498, 17333, -1000, 1667, -1000, 50876, 2254,
	-1000, -3, 829, -4, 51319, 76339, 270, -1000, 32652, 176,
	32652, 176, -1000, -1000, 2570, -1000, -1000, -1000, 3038, 1636,
	2077, -1000, -1000, -1000, 635, 1989, 2373, 76339, 2178, -12,
	62498, -1000, 2564, 1964, 1986, -1000, -1000, 57571, -1000, 2563,
	678, 3037, -1000, 78554, -1000, 2721, 1228, 2561, 979, 433,
	2867, -1000, 433, 44989, -1000, 76339, -1000, -1000, 76339, -1000,
	-1000, -1000, 3036, -1000, 62498, -1000, -1000, 62498, -1000, 62498,
	-1000, 62498, 174, 2559, -1000, -1000, 76339, -1000, 62498, 62498,
	50876, 50876, 4626, 52656, -10, -11, 496, -1000, 68281, 76339,
	976, 53099, 76339, 2669, 879, 41410, -114, 879, 879, 829,
	-1000, 829, -1000, 62498, 2442, -1000, 879, 879, 879, -1000,
	-1000, -1000, -1000, 3034, 3030, -1000, -1000, -1000, 895, 62498,
	76339, 62498, -1000, -1000, 76339, -1000, 76339, -1000, 895, 76339,
	895, 76339, 895, 76339, -1000, -1000, -1000, -1000, -1000, -1000,
	176, 32652, 1393, -1000, 2440, -1000, 2439, -1000, 63, -1000,
	-1000, -1000, -1000, 1535, 62498, 62498, 62498, 62498, 76339, 62498,
	-1000, 57122, -1000, 2046, 2430, -1000, -1000, -1000, -1000, -1000,
	-1000, 1405, 1833, -1000, 2112, -1000, 1325, -1000, -1000, -1000,
	88043, 35956, -1000, -1000, 88043, 1576, -1000, 34540, 34068, -1000,
	-1000, 1448, 62498, 2219, -1000, 2219, -5, -1000, 86180, 2111,
	62498, -1000, -1000, -1000, -1000, -1000, 865, 1145, 1145, 1134,
	1134, 1134, 1134, 2859, 1705, 836, 977, 8181, 8181, 4475,
	4475, 4475, 4475, 4475, 8181, 5595, 926, 926, 5595, 5595,
	5595, 5595, 5595, 926, 926, 926, 8181, 8181, 8181, 88382,
	88339, 9231, 32652, 32652, 1119, 1650, 565, 8858, 32652, 10114,
	10114, 10114, 10114, -1000, 1805, -1000, -1000, -1000, -1000, 2362,
	634, 35484, 35484, -1000, -1000, -1000, -1000, 18748, 32652, -1000,
	-1000, -1000, -1000, 26868, -1000, -1000, 85841, -265, 495, -220,
	-13, -1000, 32652, 32652, 32652, 494, -1000, 269, 32652, 76339,
	-1000, 82819, 731, -147, -1000, -16, 1258, -1000, 32652, -1000,
	-1000, 1059, -1000, 1056, 1050, 1048, -1000, 632, 491, -1000,
	268, -1000, 1777, 631, 630, 32652, -1000, -1000, -1000, -1000,
	-1000, 85765, -1000, -1000, 85426, -1000, -1000, 85279, -1000, -1000,
	85120, -1000, -1000, -1000, 87967, 82660, 82449, 82148, 9404, 82105,
	11240, -17, 490, -18, 487, 845, 844, 482, 478, 477,
	-23, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -31,
	474, -1000, 2339, -220, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 460, -1000, 455, -1000, 87628, -220, 452, 448,
	-1000, 35484, 35484, 35484, -1000, 449, -1000, 86476, -1000, 87480,
	26396, 26396, 26396, 447, 87332, 32652, -220, -34, -1000, -39,
	-1000, -1000, 517, -40, 922, 25912, 38231, 17333, -1000, 922,
	922, 32652, -1000, 32652, 2139, -1000, -1000, -1000, 2136, 1996,
	2197, 39129, -1000, -1000, -1000, -1000, 67834, -1000, 2922, 2435,
	-1000, 67834, -1000, -1000, 76339, 536, -1000, 67834, 67834, 17333,
	835, -1000, 835, 67834, 644, -1000, -1000, -1000, -1000, -1000,
	431, 42314, -13, 267, 879, -1000, 17333, 2193, 2193, 2193,
	2193, -1000, -1000, 76339, 2890, -1000, 1673, -1000, 81655, -1000,
	754, 1111, 17333, -1000, -1000, 629, -1000, 2927, 2927, -1000,
	2927, 76339, 134, 25440, -1000, 1213, -1000, -1000, 1349, -1000,
	1639, -1000, 1203, -1000, -1000, -1000, -1000, 25440, -1000, 1818,
	76339, 76339, 62498, -1000, -1000, 1984, 78111, 1980, 81655, 76339,
	-1000, -1000, 628, 627, 2105, 2104, 973, 76339, 76339, 2097,
	77668, 77225, 76339, 1701, 32652, 1891, 1703, 176, 176, -1000,
	-1000, 176, 625, 1218, 62498, 62498, 62498, 1563, -1000, -1000,
	-1000, -1000, -1000, 56679, -1000, -1000, 2944, 2943, -1000, 1260,
	-1000, -1000, -1000, 1260, 1964, 1537, 62498, 76339, 1692, 176,
	176, -1000, -1000, 176, 624, 17333, 1666, -1000, 1667, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47697, 981, 897, 879,
	2331, -1000, 2254, -1000, -1000, 15044, 88043, -1000, 88043, -1000,
	76339, -1000, 940, 76339, 53099, 878, 2557, 44103, -95, 879,
	50876, 62498, -12, 76339, -1000, 1964, 2523, 536, 1976, -1000,
	-1000, 50876, 621, 3025, 3023, -1000, 1882, 1972, -1000, -1000,
	76782, 2630, 790, 76339, 922, 39129, 1630, -1000, 42763, 950,
	76339, 1473, 105, -1000, -1000, -1000, 48, 76339, -1000, 3021,
	-1000, -1000, 178, 178, 178, -1000, 62498, 62498, 1849, -1000,
	175, -1000, -131, -1000, -1000, 4626, 4626, 879, -36, 619,
	-1000, 819, 811, 40953, 50876, -45, -1000, -1000, -1000, -1000,
	-1000, 62498, 76339, 715, 2245, 76339, -46, -1000, 262, 618,
	-1000, -1000, 879, 2322, -1000, -1000, 913, -1000, 1237, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24, -95,
	-95, -1000, 895, -1000, 895, -1000, 895, -1000, 88043, -1000,
	1383, 1382, 76339, -1000, 17333, 76339, 62498, 17333, 62498, 2422,
	2421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 988,
	-1000, 1576, 1825, -1000, 617, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2045, -1000, -37, 24968, 1935, -1000,
	-1000, 62498, 23, 32652, 32652, 8561, 6119, 32652, 35484, 35484,
	-1000, 32652, 5814, -1000, -1000, -1000, -1000, -1000, 2321, 615,
	32652, 81655, 5901, 5641, -1000, 425, 10944, 5595, -1000, 32652,
	-1000, 422, 24496, -1000, 86846, -42, -47, -1000, 12288, -220,
	-48, -1000, -1000, 743, -1000, 2623, -1000, 32652, 86993, 2006,
	1811, 1646, 1401, 2927, 2968, 14587, -1000, 45436, 928, 1801,
	84909, -1000, -1000, -1000, -1000, 81655, 81655, 32652, 32652, -1000,
	32652, 32652, 32652, -1000, -1000, -1000, 2927, 846, -1000, -1000,
	-1000, 846, -1000, -1000, 2927, -1000, 2927, -1000, 32652, -1000,
	-1000, 2320, 32652, -1000, 81655, 81655, 35484, 35484, 35484, 35484,
	35484, 35484, 35484, 35484, 35484, 35484, 35484, 35484, 35484, 35484,
	35484, 35484, 35484, 35484, 35484, 2124, 35484, 2905, 2905, 2905,
	-1000, 2383, 2320, 32652, 32652, 81655, 421, 420, 418, -1000,
	32652, -220, -1000, -1000, 4626, 610, -1000, 2033, -1000, 2290,
	-1000, 32652, -1000, -167, -1000, 2689, -1000, -1000, 2290, 2290,
	-54, 88043, 39129, 39129, -1000, 608, 32652, 2123, -1000, -1000,
	729, -263, -1000, 810, -1000, -1000, -1000, -1000, -1000, 536,
	-1000, -1000, -1000, 243, 67834, 67834, 727, -1000, -55, -1000,
	-1000, -56, -1000, 2865, 414, 17333, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -95, 1812, 2963, -1000, 2938, 740,
	722, 222, 2927, 413, 410, 407, -95, 76339, -1000, -67,
	-1000, -1000, -1000, 32652, -1000, -1000, 2708, 1044, 1034, -1000,
	2521, -1000, 1971, -1000, 955, -1000, 1719, -1000, 32652, 32652,
	607, 606, 3017, 1603, 3016, 975, 2516, 1849, 2513, 1849,
	-1000, -1000, 848, -1000, 88043, 605, 602, -1000, -77, 1500,
	910, -1000, -1000, 32652, 32652, 67391, -1000, 332, 2705, 22,
	-1000, 1033, -1000, -1000, -1000, -1000, 1964, 1026, -1000, -1000,
	-1000, 900, -1000, -1000, 32652, -1000, -82, 1022, -1000, -1000,
	-1000, 47240, -1000, -1000, 50876, 879, -1000, 3014, 62498, 3013,
	404, -57, -87, 81655, 2860, 1851, 614, 62498, 832, -1000,
	2922, -1000, -1000, -1000, -1000, 62498, 2856, 2503, 897, 2957,
	-1000, -1000, 62498, 2499, 1881, 1970, 2069, 790, 52213, -1000,
	897, 1801, -191, -1000, 1473, 24012, 2703, -62, -1000, -1000,
	-1000, 922, 44989, 39129, 32652, 3012, -64, -1000, -1000, -1000,
	-1000, -1000, 174, -1000, -1000, -1000, -1000, -1000, 66948, 66948,
	50876, 50876, 50876, 879, 76339, 76339, 53099, -1000, 601, 76339,
	76339, 600, -1000, 76339, 76339, 3011, 50876, -1000, 176, -1000,
	1817, 62498, 14130, -1000, -1000, -1000, -1000, -1000, 895, -1000,
	-1000, 1728, 1911, 1728, 1462, 1460, -1000, 1821, -1000, -1000,
	-1000, -1000, 2145, 2725, 17333, 2835, 10114, 32652, 32652, 261,
	5006, 476, 10114, 32652, 32652, 81655, 6652, -65, 32652, 32652,
	-1000, 32652, 721, 88043, 2956, 32652, 401, 400, -1000, -1000,
	-1000, 2924, -1000, -1000, -1000, 88043, 32652, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 399, -1000, 202, -1000, -1000, -1000,
	81212, -1000, 32652, 398, -1000, 397, 394, 10590, 7641, 84611,
	84535, 84196, 390, -1000, -1000, 388, 381, 88043, 2383, 88043,
	-1000, -1000, 812, 812, 1221, 1221, 1221, 1221, 2905, 313,
	842, 1113, 302, 302, 302, 3421, 804, 804, 302, 302,
	302, 2319, 2059, 597, 5965, -1000, -1000, 88043, 88043, 378,
	-1000, -1000, -1000, -220, 367, 4626, -1000, 2286, 2776, 88043,
	-1000, 39129, 2286, 2286, -1000, -1000, 1996, 76339, 88043, 39129,
	-1000, 2435, -1000, 12755, -1000, 17333, -1000, -1000, -1000, -1000,
	2922, -1000, 42314, -1000, 596, -1000, 64, -1000, -1000, 720,
	3009, 738, 17333, 366, -1000, -1000, -1000, -95, 88043, 76339,
	76339, 76339, 2492, -1000, 2277, -1000, 973, 84049, -70, -1000,
	86180, 32652, 76339, -1000, -1000, 1620, 2164, 998, -1000, 2748,
	76339, -1000, 76339, -1000, -1000, 76339, 76339, 62498, 2483, -72,
	88043, -112, -1000, 808, -1000, 1252, -1000, 13673, 62498, 62498,
	2481, -84, 17333, -1000, -1000, -131, -1000, -1000, 536, -1000,
	2239, -1000, 65605, 1826, 176, -1000, 66501, 3004, 594, -1000,
	1813, -1000, 659, 1964, 176, 62498, -1000, 350, -146, -1000,
	967, 17333, 62498, 2491, 2073, 790, 52213, -1000, 1228, 2157,
	-1000, -152, -1000, 568, 176, 1801, -1000, -191, 88043, -1000,
	806, -1000, -1000, -85, -1000, -1000, 349, -1000, 2668, 2667,
	-1000, 2328, 32652, 593, 592, 76339, 2666, -1000, -1000, -86,
	-1000, 1925, -1000, -1000, -1000, -1000, -1000, 17333, 1444, -1000,
	589, 586, -1000, -1000, -1000, -1000, 2725, 10114, 10114, 32652,
	32652, 32652, 10114, 6652, -92, -1000, 10114, 10114, -220, -1000,
	-1000, 86846, -1000, -1000, -1000, 88043, -1000, 13216, 1730, -1000,
	83890, -1000, -1000, -1000, 32652, 32652, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35484, 2315, 581, 81655, -1000, -1000,
	338, 915, 32652, 32652, 2689, 915, 915, -1000, -93, -1000,
	-1000, -1000, 2922, 64, -1000, -1000, 3000, 17333, 736, -1000,
	2996, -1000, -1000, -1000, -1000, -1000, 76339, -1000, 76339, -1000,
	17333, 76339, 2345, 1949, -1000, -1000, 2096, 578, 35484, 62498,
	841, -1000, 2336, 1682, 32652, 1935, -94, -111, 1944, -1000,
	-1000, 1938, 32652, -1000, 81655, 574, 1849, 1849, -113, -116,
	-1000, 32652, 1021, 76339, 23540, -1000, 2995, 2705, -1000, -1000,
	32652, 1020, -1000, 2852, 1692, 2264, -1000, -1000, -1000, -1000,
	2089, -1000, -1000, 76339, 2087, 883, -119, -1000, 805, 791,
	-1000, 53099, 878, 885, -1000, -1000, -1000, 536, -1000, 2955,
	573, 76339, 1879, 569, 17333, -1000, 790, 52213, -1000, 2630,
	1473, -1000, 2638, 76339, 2692, -1000, 2157, 565, -1000, 879,
	564, 562, 2921, 2921, -125, 32652, 32652, -130, 560, 879,
	-199, -1000, 820, 815, -1000, -1000, 62498, 62498, 32652, 32652,
	-1000, 10114, 10114, 10114, -1000, 337, -1000, -1000, 1801, 2771,
	-1000, 83679, 83381, 787, 35484, 81655, -132, -1000, -1000, 76339,
	88043, -220, -1000, -1000, -1000, 521, -1000, 2994, -1000, -1000,
	2780, -1000, -1000, -1000, 76339, 1956, -1000, 972, 32652, 5965,
	559, 32652, -1000, -1000, 2232, 2349, 2239, 554, -1000, -1000,
	-1000, -1000, -1000, 959, 1611, -1000, -1000, 88043, 2752, 32652,
	-1000, -1000, 551, 543, 88043, 541, 789, 2309, -1000, -1000,
	-1000, 88043, 540, 176, 878, -1000, 1763, 1826, 538, -1000,
	-1000, 1841, 2129, -1000, 66501, 36870, 36870, 336, 2847, 885,
	-1000, 2916, -1000, 2841, -1000, 32652, -1000, 62498, 32652, 1873,
	52213, -1000, 2069, -1000, 1163, -133, 76339, 1473, -1000, -1000,
	50876, 50876, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 959, -140, -141, -1000, 50876, -1000, 1925,
	-1000, 76339, -1000, 76339, -1000, -1000, -155, -157, -1000, 1661,
	32652, -1000, -1000, 787, -158, -1000, -202, -1000, 2830, -1000,
	-1000, -1000, -1000, 2455, 2284, 83305, 2036, 76339, 82966, 2341,
	-1000, -1000, 1692, 76339, 2239, 2283, 62498, 968, 17333, -165,
	1728, 1728, 32652, 23068, 1749, 32652, -1000, 1841, 62498, 76339,
	-1000, 2735, -1000, 2665, -1000, -1000, -1000, 2239, 176, -1000,
	-1000, 176, -166, 967, -168, 62498, -1000, 2073, 1336, -1000,
	922, -1000, -1000, -176, -181, 1682, 959, -1000, -190, -1000,
	-197, -200, -1000, -1000, 177, 33596, 33596, 33596, -220, -1000,
	76339, 537, 2471, 893, -1000, 1860, 1578, 107, 987, -1000,
	-1000, 2336, -205, -1000, 886, 536, -1000, 32652, -1000, 959,
	-207, -1000, 949, -219, -1000, 939, -225, -1000, 2308, -1000,
	-226, -1000, 535, -228, -1000, -1000, 2009, -1000, 1692, 883,
	-1000, 959, 534, 1682, 528, -1000, 44989, -1000, 879, 879,
	2239, 1682, 879, -1000, -1000, -1000, 2550, -1000, 36413, 1875,
	1450, 86137, 2550, 2550, -1000, -1000, 76339, 2805, -1000, 1871,
	1862, 1305, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2796, 2036, 88043, 2239, -1000, 1728, 2263, -1000, 1728, 2307,
	-1000, 1746, -1000, 76339, -1000, 76339, 1417, 1415, 2993, 878,
	1841, 1682, 32652, 2239, 32652, -221, -1000, -1000, 1692, 2239,
	-1000, -1000, 1708, 2834, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 781, -1000, 2650, -1000, 986, 1888, 1888, 780,
	1860, -1000, -1000, 524, -1000, 523, -1000, -231, -1000, -1000,
	2987, -1000, 1841, -1000, 2239, -236, 1692, -237, -1000, -1000,
	1692, 1440, -1000, -1000, 1796, 33124, 32652, -1000, 2893, -1000,
	-1000, 2047, -1000, 32652, 2336, 32652, 32652, 1831, -1000, -1000,
	1692, 959, 887, 1682, -1000, -1000, -1000, -1000, 88043, -1000,
	-1000, -1000, 88043, -1000, -245, -246, -1000, -1000, -1000, 887,
	1682, -1000, 2979, 2239, 1692, 1019, -1000, 2239, -1000, 1692,
	-1000, 522, 1692, 887, 32652, 887, -1000, -252, -1000, 1692,
	-1000,
}
var sqlPgo = [...]int{

	0, 3694, 3693, 3690, 3687, 3685, 3683, 3681, 3680, 3679,
	3678, 3675, 3674, 3673, 3670, 3669, 3668, 3667, 3664, 3663,
	3662, 3657, 3654, 3653, 3652, 3651, 3650, 3647, 3646, 3645,
	3643, 3639, 3637, 3636, 3635, 3633, 3632, 3630, 3629, 3625,
	3624, 3623, 3621, 3617, 3614, 3613, 3612, 38, 3611, 3610,
	3609, 3608, 3607, 3604, 3602, 3601, 3600, 3599, 3598, 3597,
	3596, 3595, 3594, 3593, 3591, 41, 3590, 218, 3588, 3587,
	3585, 3582, 3575, 3572, 3570, 3569, 3568, 3567, 217, 3566,
	129, 3565, 3564, 3560, 3559, 3554, 215, 3553, 3552, 3550,
	3548, 3546, 3537, 3534, 3533, 152, 206, 3531, 42, 3529,
	3527, 3525, 3524, 3523, 3518, 3516, 3513, 3512, 3510, 193,
	3508, 214, 3507, 3505, 3502, 3501, 3500, 3492, 3491, 3490,
	3489, 3482, 3478, 3477, 3476, 3475, 3469, 3464, 3461, 3460,
	3458, 3457, 3456, 3455, 3450, 3445, 3443, 3442, 3441, 3439,
	223, 139, 3437, 3434, 213, 211, 3431, 3428, 3421, 3420,
	124, 90, 91, 27, 3416, 76, 50, 3415, 18, 127,
	216, 5907, 186, 3414, 3412, 3411, 198, 144, 3406, 187,
	3405, 3402, 3401, 3400, 67, 64, 137, 134, 145, 126,
	228, 3399, 3392, 68, 49, 34, 32, 3390, 3389, 3387,
	2457, 89, 3386, 210, 192, 131, 3385, 3384, 3383, 1096,
	3382, 3376, 3373, 332, 78, 88, 92, 84, 3372, 112,
	23, 3371, 122, 45, 3369, 114, 61, 37, 6382, 3253,
	3368, 83, 161, 72, 278, 179, 169, 155, 125, 171,
	168, 132, 113, 3367, 240, 3366, 55, 115, 3365, 3364,
	3363, 57, 149, 77, 3362, 3361, 44, 1, 17, 3,
	119, 24, 86, 14, 3360, 8, 3357, 3355, 3354, 3353,
	25, 135, 3352, 104, 47, 3351, 11, 3350, 29, 163,
	3349, 178, 94, 3348, 3347, 200, 164, 148, 3346, 105,
	180, 3345, 3343, 3337, 3336, 3334, 98, 20, 93, 3333,
	3331, 102, 188, 146, 3327, 43, 3326, 150, 75, 117,
	219, 96, 177, 82, 176, 140, 185, 3324, 3321, 3320,
	160, 3319, 3318, 174, 128, 3317, 3314, 157, 224, 30,
	60, 189, 53, 143, 136, 3312, 156, 3311, 3308, 3307,
	222, 138, 158, 5, 2, 62, 87, 31, 13, 184,
	108, 237, 81, 3306, 3936, 1784, 1924, 39, 3304, 100,
	79, 48, 71, 107, 207, 54, 3302, 3300, 1350, 3298,
	3297, 3296, 3293, 142, 3292, 3291, 3290, 101, 116, 154,
	3287, 118, 59, 10, 120, 241, 220, 74, 173, 165,
	197, 3286, 141, 3285, 40, 97, 3284, 153, 208, 3282,
	3281, 70, 3280, 103, 205, 121, 3278, 183, 3272, 3271,
	3270, 3269, 3267, 3266, 3264, 194, 181, 3263, 3262, 3261,
	204, 147, 3260, 201, 106, 130, 73, 35, 3259, 69,
	700, 3257, 123, 172, 52, 3254, 3484, 36, 0, 8298,
	7150, 5605, 7934, 3252, 3479, 3249, 3246, 3244, 175, 95,
	3243, 3242, 3241, 66, 3226, 51, 3224, 3222, 46, 3220,
	16, 6, 9, 19, 15, 867, 389, 3217, 3216, 80,
	99, 110, 3215, 221, 182, 3212, 3210, 3208, 3206, 63,
	3205, 28, 3204, 26, 3202, 3201, 33, 12, 21, 3200,
	3199, 195, 3198, 196, 3195, 3194, 2848, 109, 3191, 3187,
	203, 56, 3186, 202, 3184, 2788, 133, 162, 3181, 3180,
	3179, 3173, 199, 3170, 3169, 22, 3167, 7, 3165, 3158,
	167, 4, 2710, 3145, 3141, 58, 3024, 151,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	490, 490, 19, 30, 20, 31, 13, 491, 491, 491,
	491, 24, 21, 32, 22, 22, 22, 22, 22, 154,
	154, 154, 154, 18, 18, 26, 26, 177, 177, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 489, 489, 179, 179, 178, 173, 173, 492, 492,
	180, 180, 180, 182, 182, 36, 36, 36, 94, 94,
	94, 95, 95, 96, 96, 155, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 82, 82, 426, 426, 427,
	427, 150, 150, 151, 151, 151, 151, 152, 152, 153,
	153, 153, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	141, 141, 51, 51, 51, 51, 51, 51, 51, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 500,
	500, 501, 501, 502, 502, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 262, 262, 235, 235, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 483, 483, 276,
	276, 386, 386, 67, 67, 296, 296, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	76, 76, 76, 77, 77, 77, 74, 74, 74, 72,
	72, 72, 71, 71, 71, 75, 75, 75, 227, 227,
	73, 73, 73, 277, 277, 78, 78, 78, 78, 78,
	78, 78, 78, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 388, 388,
	79, 79, 79, 356, 356, 83, 83, 83, 311, 311,
	84, 84, 84, 84, 84, 85, 85, 85, 85, 97,
	97, 97, 97, 486, 486, 269, 269, 193, 193, 193,
	193, 90, 90, 90, 90, 91, 91, 91, 92, 92,
	146, 146, 103, 103, 103, 103, 103, 102, 102, 102,
	102, 102, 102, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 47, 47, 105,
	105, 496, 496, 107, 104, 104, 104, 106, 106, 106,
	106, 108, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 419, 419, 285, 285, 417, 417, 435, 435,
	418, 418, 239, 239, 239, 239, 239, 240, 240, 240,
	425, 425, 425, 425, 425, 425, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	147, 147, 148, 149, 149, 149, 149, 130, 130, 130,
	140, 140, 140, 140, 140, 140, 140, 133, 133, 133,
	120, 120, 112, 112, 112, 112, 112, 116, 116, 116,
	116, 116, 116, 116, 116, 113, 113, 122, 122, 122,
	122, 122, 117, 117, 119, 119, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 114, 114, 114, 114, 124,
	124, 124, 124, 318, 318, 318, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 136, 136, 136, 136,
	136, 136, 370, 370, 131, 131, 131, 131, 135, 135,
	135, 135, 301, 301, 128, 128, 128, 129, 129, 129,
	134, 134, 132, 132, 137, 137, 137, 137, 115, 115,
	115, 504, 504, 504, 138, 138, 127, 127, 139, 139,
	139, 139, 139, 139, 139, 139, 126, 126, 126, 125,
	125, 125, 125, 118, 484, 484, 481, 481, 481, 481,
	481, 481, 481, 482, 482, 485, 485, 88, 88, 88,
	57, 57, 57, 58, 58, 158, 158, 158, 158, 247,
	247, 247, 247, 156, 156, 157, 157, 59, 59, 505,
	505, 505, 493, 493, 493, 494, 494, 494, 494, 494,
	494, 241, 241, 242, 242, 336, 336, 336, 336, 336,
	245, 245, 245, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 248, 248, 181, 181, 181, 251, 252, 252,
	249, 249, 250, 250, 250, 254, 254, 253, 256, 256,
	255, 335, 444, 444, 446, 446, 446, 446, 446, 446,
	446, 448, 448, 448, 448, 448, 448, 448, 448, 448,
	448, 448, 506, 442, 442, 442, 443, 438, 438, 439,
	439, 439, 439, 439, 243, 243, 244, 244, 244, 244,
	440, 441, 267, 267, 373, 445, 445, 447, 447, 449,
	507, 507, 507, 507, 507, 507, 508, 508, 508, 334,
	334, 333, 333, 260, 260, 450, 450, 450, 450, 451,
	451, 451, 451, 451, 454, 453, 452, 452, 452, 452,
	452, 61, 61, 61, 298, 298, 297, 297, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 143, 143, 196, 196, 56, 56, 56,
	12, 12, 12, 495, 495, 495, 60, 60, 60, 60,
	195, 195, 195, 195, 195, 195, 488, 488, 487, 487,
	197, 197, 510, 510, 66, 66, 66, 66, 66, 66,
	66, 389, 389, 390, 390, 55, 55, 55, 55, 55,
	511, 511, 319, 319, 317, 317, 316, 316, 266, 266,
	372, 201, 201, 174, 174, 174, 23, 17, 17, 33,
	33, 34, 34, 29, 29, 497, 497, 498, 498, 89,
	89, 93, 93, 93, 101, 101, 142, 142, 142, 142,
	142, 142, 142, 37, 37, 37, 37, 49, 49, 49,
	49, 99, 513, 513, 513, 100, 100, 100, 512, 512,
	194, 194, 330, 330, 331, 331, 514, 514, 332, 332,
	332, 332, 188, 187, 189, 189, 54, 54, 54, 183,
	183, 184, 184, 185, 185, 186, 186, 515, 515, 86,
	86, 86, 145, 145, 234, 234, 234, 326, 326, 326,
	261, 261, 207, 207, 329, 329, 327, 327, 327, 327,
	295, 295, 295, 144, 144, 274, 274, 287, 287, 288,
	288, 383, 383, 289, 98, 98, 161, 161, 159, 159,
	159, 159, 159, 159, 159, 159, 166, 166, 167, 167,
	168, 168, 169, 170, 170, 170, 170, 278, 278, 171,
	171, 171, 160, 160, 160, 162, 162, 162, 162, 162,
	162, 162, 165, 165, 165, 165, 172, 172, 172, 164,
	164, 461, 461, 461, 463, 463, 465, 465, 464, 464,
	460, 460, 462, 462, 509, 509, 300, 300, 300, 258,
	259, 257, 257, 264, 264, 263, 265, 265, 371, 371,
	371, 175, 175, 175, 292, 292, 292, 292, 293, 293,
	322, 322, 320, 320, 320, 320, 321, 321, 323, 323,
	323, 324, 324, 325, 325, 291, 291, 352, 352, 163,
	163, 163, 271, 271, 271, 272, 272, 342, 342, 342,
	342, 342, 342, 343, 343, 341, 341, 341, 341, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 375, 376,
	376, 273, 273, 377, 328, 328, 479, 479, 479, 480,
	480, 369, 369, 378, 378, 378, 378, 378, 378, 367,
	367, 368, 368, 384, 385, 385, 304, 304, 304, 304,
	302, 302, 305, 305, 305, 305, 303, 303, 379, 379,
	379, 379, 294, 294, 380, 380, 380, 380, 381, 337,
	338, 338, 391, 391, 391, 391, 393, 270, 270, 270,
	270, 270, 437, 436, 436, 392, 392, 392, 392, 392,
	392, 392, 392, 406, 406, 406, 406, 406, 406, 406,
	406, 407, 407, 407, 407, 407, 407, 394, 394, 394,
	394, 394, 397, 397, 397, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 398, 398, 403, 403,
	404, 404, 404, 399, 400, 405, 405, 405, 405, 516,
	516, 409, 409, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 395, 395, 395, 402, 402, 402, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 312, 312, 314, 314, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 346, 346, 346, 346, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 455, 455, 455, 455, 455, 455, 455, 455, 348,
	348, 458, 458, 459, 459, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 466, 466, 467, 467, 469, 469,
	470, 470, 471, 472, 472, 472, 473, 474, 474, 468,
	468, 475, 475, 475, 475, 476, 476, 477, 477, 477,
	477, 477, 478, 478, 478, 478, 478, 358, 358, 359,
	359, 365, 365, 365, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	198, 198, 198, 198, 198, 283, 283, 281, 281, 281,
	284, 284, 282, 282, 280, 280, 279, 279, 355, 355,
	353, 353, 357, 357, 306, 306, 408, 408, 408, 408,
	408, 408, 408, 408, 307, 307, 307, 315, 308, 308,
	309, 309, 309, 309, 309, 349, 350, 310, 310, 310,
	351, 351, 360, 364, 364, 363, 362, 362, 361, 361,
	339, 339, 340, 340, 290, 290, 517, 517, 286, 286,
	382, 382, 382, 382, 237, 237, 275, 275, 236, 236,
	229, 229, 230, 230, 230, 230, 268, 268, 366, 366,
	410, 410, 411, 411, 412, 412, 413, 413, 414, 415,
	416, 354, 354, 217, 216, 204, 205, 215, 214, 213,
	203, 206, 210, 211, 212, 208, 209, 223, 222, 221,
	228, 219, 220, 387, 202, 231, 231, 232, 232, 232,
	233, 233, 233, 233, 199, 199, 200, 200, 224, 224,
	225, 226, 226, 218, 218, 218, 190, 190, 190, 191,
	191, 192, 192, 424, 424, 421, 421, 421, 422, 422,
	422, 423, 423, 423, 423, 420, 420, 420, 420, 420,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 429, 429, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 431, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 434, 434,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 2, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 5,
	7, 3, 4, 6, 3, 4, 6, 3, 1, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 3,
	6, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 3, 3, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 2, 1, 3, 3, 3, 3, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 4, 5, 5, 5, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	7, 3, 3, 3, 4, 3, 5, 3, 6, 5,
	6, 3, 5, 6, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 10, 10, 3, 5,
	5, 5, 3, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	3, 6, 3, 11, 14, 0, 2, 4, 3, 0,
	4, 5, 4, 3, 3, 1, 3, 10, 13, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 8, 4, 2, 5, 5,
	5, 2, 1, 9, 10, 6, 5, 3, 1, 5,
	8, 7, 11, 3, 3, 0, 2, 4, 3, 3,
	1, 5, 1, 3, 1, 2, 0, 1, 2, 2,
	0, 1, 3, 3, 2, 2, 1, 1, 1, 4,
	0, 6, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 2, 2, 4, 7, 3,
	4, 6, 3, 1, 1, 1, 8, 10, 11, 5,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 3, 0, 1, 8, 3, 6, 6, 5, 3,
	4, 1, 0, 1, 3, 16, 19, 15, 18, 4,
	0, 2, 2, 0, 1, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 4, 2, 1, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 1, 2, 6, 7,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 3, 4,
	5, 2, 2, 0, 2, 2, 1, 1, 1, 0,
	1, 0, 2, 2, 5, 4, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 4,
	4, 3, 4, 1, 5, 3, 4, 5, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 5, 6, 4, 6, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 1, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 2, 4, 3,
	5, 0, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 6, 6, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 1, 1, 1, 1, 1, 1, 2, 1,
	5, 5, 6, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 2,
	2, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 486, -80, -50, -48, -83, -84, -68,
	-85, -79, -97, -101, -89, -103, -142, -147, -148, -149,
	-3, -36, -38, -51, -67, -69, -78, -87, -86, -88,
	-90, -94, -93, -82, -42, -98, -102, -111, -143, -144,
	-145, 87, 71, 132, 111, 117, 169, 312, 344, 354,
	338, -106, -107, 369, -37, -49, -100, -99, 64, 112,
	333, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -499, 89, -462, -70, -73, -503, 122, 138,
	187, 302, -91, -92, 340, 342, 139, -44, -43, 133,
	-159, -161, -104, -105, -146, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	-127, -132, -128, -129, -130, -131, -133, -134, -135, -136,
	-137, -138, -139, 373, 422, 43, 383, 73, 125, 348,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -461, -71, -72,
	-74, -76, -77, -75, 339, -162, -160, 483, 436, -14,
	-19, -20, -15, -16, -18, -21, -17, -25, -30, -31,
	-27, -28, -26, -29, -32, -33, -34, -35, -23, -24,
	-13, -22, 454, 462, -165, -163, -164, -172, 361, 444,
	399, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, -219, -224, -225, -226, -218, -190, -431, -434, 4,
	-428, -432, 144, 196, 268, 21, 22, 23, 24, 25,
	27, 28, 39, 41, 40, 42, 43, 48, 51, 52,
	53, 54, 55, 59, 64, 65, 70, 71, 72, 73,
	74, 75, 76, 82, 79, 80, 81, 84, 86, 87,
	88, 90, 92, 93, 101, 102, 103, 104, 106, 111,
	112, 115, 110, 114, 117, 120, 121, 122, 124, 126,
	127, 129, 130, 132, 133, 136, 134, 405, 135, 137,
	138, 139, 140, 150, 151, 152, 157, 159, 163, 164,
	167, 168, 170, 174, 176, 177, 178, 179, 180, 186,
	187, 189, 190, 191, 192, 197, 198, 202, 199, 208,
	212, 213, 214, 216, 220, 221, 222, 223, 224, 227,
	226, 229, 232, 233, 236, 237, 238, 241, 242, 243,
	244, 246, 247, 250, 248, 251, 249, 253, 254, 255,
	252, 258, 256, 260, 261, 266, 264, 262, 263, 270,
	273, 184, 275, 276, 279, 296, 283, 284, 285, 288,
	289, 292, 295, 297, 298, 299, 300, 301, 302, 303,
	305, 306, 310, 312, 313, 315, 317, 318, 319, 320,
	321, 322, 323, 325, 326, 333, 338, 335, 336, 337,
	339, 340, 341, 342, 344, 346, 347, 348, 349, 351,
	353, 370, 371, 385, 354, 355, 356, 357, 358, 359,
	360, 364, 362, 363, 365, 366, 367, 369, 372, 373,
	375, 376, 379, 381, 382, 383, 384, 386, 389, 390,
	391, 392, 387, 398, 395, 396, 400, 401, 402, 403,
	404, 406, 408, 416, 417, 419, 422, 423, 424, 414,
	426, 427, 430, 431, 432, 435, 433, 434, 436, 438,
	441, 442, 443, 449, 448, 455, 456, 458, 459, 460,
	34, 44, 45, 47, 49, 60, 61, 62, 66, 107,
	108, 131, 141, 142, 153, 165, 166, 171, 173, 181,
	182, 183, 203, 204, 206, 210, 230, 272, 274, 290,
	294, 307, 308, 309, 311, 324, 350, 377, 388, 393,
	409, 410, 411, 412, 418, 420, 444, 445, 446, 450,
	457, 281, -212, 2, -190, -190, 312, 26, 2, 26,
	306, 363, 401, 403, 2, -486, -269, 2, 26, -193,
	-190, 89, 169, 361, -212, 2, -486, -269, 24, 2,
	-190, 2, -194, 2, 354, -190, 486, 84, 238, 65,
	350, 366, -109, 417, -108, 409, 356, -110, -419, 2,
	258, -190, 486, 486, 486, 26, -202, -190, 399, 196,
	103, 396, 486, 2, 399, 299, 448, 362, 103, 321,
	196, -495, 346, 172, 437, 413, -481, 2, 4, -432,
	-428, -230, -229, 399, 103, -226, -218, 476, -225, 486,
	486, 486, 2, 213, 214, 320, 319, 366, 367, 486,
	486, 2, 25, 57, 83, 86, 109, 140, 160, 163,
	286, -500, 247, 296, 318, 365, 398, 406, 419, -494,
	384, 59, 356, -493, -495, 424, 120, -316, 103, 238,
	168, 431, 403, 401, 429, 115, 202, 434, 433, 486,
	25, 57, 68, 86, 120, 140, 160, 163, -502, 296,
	318, 353, 356, 365, 398, 406, 419, 2, 448, 362,
	399, 196, 103, 424, -495, 316, -80, 2, 483, 30,
	29, 369, -155, 399, 207, 2, -190, 213, 214, 2,
	486, 486, 161, -481, 2, 213, 214, 2, 207, 2,
	59, 358, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	2, -140, 366, 384, 178, 42, 65, 26, 317, 70,
	300, 104, 170, 196, 197, 221, 83, 84, -318, 41,
	214, 213, -370, 400, 357, 363, 395, 354, 417, 89,
	438, 347, 460, 321, 322, 134, 4, 103, 258, 368,
	409, 238, 75, -509, 2, 399, -512, 2, 417, 417,
	2, -512, 2, -512, 2, -512, 2, -513, 417, 457,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, -160, -162, -161, 486, 486,
	486, 486, 486, 486, -140, 366, 2, 65, 26, -263,
	-264, 428, 205, 128, 287, -159, -161, 2, -461, -417,
	2, -344, -435, -346, 474, 475, 467, 397, 58, 267,
	461, -358, 109, 429, 281, -434, -347, -360, 131, 350,
	-284, 8, 9, 5, 6, 7, -199, -348, -354, 421,
	143, 271, -233, 487, 10, 483, -458, -161, -359, 35,
	173, 56, -421, -232, -200, -394, 206, -231, -218, -455,
	-456, 4, -428, -429, -422, -396, -404, -400, -401, -407,
	-190, -431, 68, 95, 96, 94, 99, 98, 240, 239,
	100, 97, 368, 437, 57, 34, 181, 182, 210, 272,
	183, 66, -457, 121, -430, 203, 204, 377, 45, 324,
	153, 108, 107, 274, 49, 47, 445, -405, 105, 409,
	410, 411, 412, 165, 166, 141, 142, 294, 309, 393,
	418, 420, 171, 230, 91, 162, 201, 185, 209, 211,
	215, 231, 234, 259, 265, 269, 291, 293, 345, 374,
	-516, 446, 388, 60, 61, -463, 325, -464, -212, -463,
	486, 486, 488, 486, -257, -258, -259, 2, 26, 118,
	483, 2, -374, 2, -375, -379, -161, 225, -378, 483,
	-376, 481, -219, 282, -459, 351, -455, -456, -199, -218,
	-232, 4, -428, -430, -260, 483, 485, 103, 399, 69,
	196, -311, 483, -190, 26, 281, 413, 488, -356, 483,
	281, 161, 284, -190, 2, 2, 370, 2, 483, -109,
	62, 417, 40, 366, -331, 2, -332, -187, -188, -189,
	-384, 212, 315, 323, 463, 460, -417, -496, 161, 466,
	413, -417, -285, 485, 2, 2, 2, 2, 2, -379,
	181, -219, 2, -216, -420, 4, -428, -432, -429, -433,
	-431, 26, 29, 30, 31, 33, 35, 36, 37, 38,
	50, 56, 57, 63, 67, 69, 78, 83, 89, 94,
	95, 97, 96, 98, 99, 100, 109, 113, 116, 118,
	119, 123, 125, 128, 143, 145, 158, 160, 161, 169,
	172, 175, 188, 200, 205, 207, 225, 228, 235, 239,
	240, 267, 271, 277, 281, 282, 286, 287, 304, 314,
	327, 343, 361, 368, 380, 394, 399, 407, 413, 415,
	421, 428, 429, 437, 439, 447, 451, 452, 453, 454,
	-434, 68, 2, -379, 181, 2, -221, 181, -379, -224,
	2, -203, -190, 2, -215, -420, 2, -236, 181, -219,
	-220, -224, -426, 181, 2, -424, 10, -423, 5, 4,
	-428, -432, -429, -95, -426, 483, 413, 488, -275, -229,
	-230, -268, -190, 485, -344, 2, -98, 2, -344, 181,
	2, -98, 181, 2, -344, 181, 2, -98, 181, 2,
	2, 2, 419, 2, 86, 181, -190, 399, 102, 2,
	337, -501, 353, 423, 448, 2, 2, 2, 2, 2,
	2, 399, -208, 2, -190, 158, -228, 181, 2, -190,
	362, -510, 325, -426, 181, 2, -222, 2, -224, -222,
	196, 208, -203, 181, 2, 403, 401, 403, 401, 161,
	2, 207, 2, 207, 2, -380, 2, -381, -375, -219,
	481, 2, 2, 2, 2, 2, 181, -190, 399, 102,
	2, 223, 2, 2, 2, 2, 2, 2, 2, 2,
	-277, 181, 2, -219, -277, 181, 2, -277, 181, 2,
	-317, 2, 78, -203, 181, 2, -227, 181, 2, -222,
	-427, 181, 2, -426, -388, 2, -387, -423, 444, -80,
	483, -80, 483, 366, 483, -426, -219, -219, -344, -98,
	-96, -95, 161, -344, -98, -155, 158, 2, 103, 399,
	-140, 2, 158, 439, 2, 8, 2, -426, 357, 322,
	150, 2, 370, 2, 371, 65, -318, 460, 65, 161,
	2, 161, 2, -301, 2, 454, -484, 2, 281, 161,
	2, 161, 2, 161, 2, 161, 2, 161, 2, 319,
	367, 214, 2, -98, 451, -344, 451, 2, 416, 222,
	135, 161, -301, 2, 161, 2, 161, 2, 5, 2,
	385, 2, 212, 315, 385, 2, -219, -504, 2, 399,
	448, 362, 2, 2, 79, 80, 161, 2, 161, 2,
	161, 460, 2, -294, -379, -330, -331, -330, 413, -263,
	-264, -140, 370, 2, -166, -292, -168, 158, -320, -321,
	-169, 235, 145, 277, -170, -300, 26, 118, -300, -300,
	52, 484, 484, 11, 12, 67, 39, 474, 475, 476,
	477, 156, 478, 479, 472, 473, 471, 464, 465, 469,
	218, 219, 85, 468, 466, 77, 245, 352, 146, 147,
	148, 149, 334, 194, 32, 195, 14, 15, 16, 31,
	286, 234, 461, 185, 374, 467, 17, 18, 19, 209,
	211, 269, 44, 188, -198, -238, -344, -344, -344, -344,
	-344, -344, -344, 293, 483, -290, -339, 481, -161, 483,
	483, 483, -416, 8, -161, -344, -358, 484, -282, 483,
	-161, -358, -353, 483, 350, 481, 483, -361, -344, 5,
	5, 5, 483, 485, -466, 455, 158, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 311, -398, 483, -397, 483, -397, -397, 449,
	-395, 483, 462, 456, 483, -395, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 449,
	488, -463, -260, 483, -286, -382, -344, 476, -286, -286,
	281, -279, -344, 91, -304, 215, 259, 162, 231, 345,
	201, -341, 487, -341, -369, 462, -161, -376, -218, -161,
	-378, 483, -374, -369, -81, -416, -67, -78, -86, -98,
	-111, -144, -145, 476, -219, 483, 161, 483, 485, 161,
	-268, -420, -203, -219, -231, -232, -236, 117, -279, -481,
	-268, -193, 36, -355, -391, -392, -437, -436, -394, -403,
	-399, -402, 307, 308, -422, 47, 445, -405, 206, 4,
	-428, -430, 203, 204, 377, 45, 324, 153, 108, 107,
	274, 49, 409, 410, 411, 412, 165, 166, 446, 388,
	60, 61, -481, -268, 158, -419, -279, 36, -331, 2,
	109, -424, 40, -514, 488, 233, -240, 244, 266, 177,
	282, 458, 275, -425, 5, 4, -354, -366, 109, 238,
	206, -410, -412, 8, -411, 9, -413, 474, 475, -418,
	-417, 93, 485, -420, -177, 335, -176, 23, 27, 122,
	442, 136, -250, 198, 299, 131, 381, 432, -490, -491,
	355, 404, 405, 81, 275, 335, 131, -297, -299, 36,
	101, 261, 295, 53, 191, 249, 250, 383, 450, 131,
	335, -491, 335, -491, -179, 381, 432, -490, -491, 355,
	335, -178, -250, 131, 487, -487, -460, 454, 131, -385,
	-384, -427, -95, -275, 488, 488, -420, 476, 131, 131,
	131, 131, 2, 2, 267, 2, 2, 2, 163, -493,
	-502, 2, 2, 2, -219, 181, -262, 281, -483, -276,
	399, -219, 267, -221, 181, 2, -224, 448, -487, 267,
	36, 483, 2, -317, 2, 196, -460, 267, -380, -234,
	-219, -375, -234, 369, -212, 36, -341, -341, 131, 2,
	2, 2, -190, -180, 488, 55, 341, 131, -180, 131,
	-180, 131, -237, 181, -236, -180, 131, -180, 488, 131,
	488, 131, 484, 488, -388, -388, -426, -153, 454, 161,
	89, 483, 483, -155, -385, 488, -96, -426, -483, -203,
	2, -219, 2, 399, 216, -153, -426, -426, -426, -419,
	26, 371, 2, 319, 367, 80, 371, 2, -219, 399,
	103, 196, 71, -485, 158, -482, 346, -481, -219, 103,
	-219, 103, -219, 103, -219, -219, 2, 2, 2, 2,
	76, 76, 158, 2, 416, 2, 416, 2, -190, -190,
	-190, 233, -219, 158, 399, 196, 399, 196, 103, 399,
	-180, 488, -194, -166, -292, -419, -293, -292, -167, -166,
	-169, 158, 323, 433, 261, 372, 220, -321, -320, 26,
	-344, -325, 152, 260, -344, -323, -346, 474, 475, -411,
	-413, -278, 275, -160, -160, -160, -265, -371, -344, 314,
	196, -393, -391, -391, -217, -420, 409, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, 234, 185, 374, 44, 188, -344, 413, -344,
	-344, -344, -344, 256, 267, 271, 421, 143, 430, 118,
	275, -517, 394, 38, -351, -161, -283, 483, -365, 33,
	380, 26, -358, 483, 2, -339, -344, -340, -280, -279,
	-279, 484, 447, 26, 118, 476, 2, 484, 488, 36,
	484, -344, -280, -357, -353, -279, -364, -363, 451, -312,
	-313, 459, 252, 106, 179, 251, -314, 360, -414, 8,
	-420, 476, -467, 151, 172, 483, 484, 2, 484, 2,
	484, -344, 2, 484, -344, 2, 484, -344, 2, 484,
	-344, 2, 484, 2, -344, -344, -344, -344, -344, -344,
	-344, -279, 8, -414, -414, 409, 409, -414, -414, -414,
	-406, 307, 236, 308, 167, 255, 253, 254, 166, -406,
	-306, 2, -408, -279, 4, 459, 252, 106, 179, 251,
	360, 5, -306, 2, -307, 2, -344, -279, -308, -345,
	-346, 474, 475, 467, -358, -309, 2, -344, -280, -344,
	50, 228, 415, -310, -344, 161, -279, -279, 2, -279,
	2, -464, 36, -279, -271, 488, 161, 36, 4, -271,
	-271, 483, 484, 488, -305, 176, 248, 243, -305, -374,
	-304, 215, -302, 291, -302, -302, -369, -204, 481, 489,
	-420, -369, -368, -367, 36, -212, 288, -369, -369, 485,
	484, -368, 482, -479, 483, 486, 486, 486, 486, 486,
	-219, 483, -279, -420, 386, 484, 485, 209, 209, 209,
	209, 351, 484, 413, 454, -80, 283, 484, 488, -270,
	35, 481, 485, 2, 2, -409, 449, 483, 483, -313,
	483, 161, -269, -496, 484, 417, -332, -239, 323, 379,
	336, 364, 396, 8, 9, 8, 9, 488, -420, 488,
	-497, 83, 413, 69, -335, 181, 69, -438, -206, 83,
	-439, -190, 63, 429, 314, 160, 129, -497, 83, 314,
	-497, 83, 83, 369, 384, 52, -379, 39, 39, 26,
	-98, 229, 161, 460, 399, 196, 413, -379, -299, -391,
	101, 249, 250, 52, -415, -410, 474, 475, -415, 52,
	-415, -415, -415, 454, -221, -379, 413, 413, 488, 39,
	39, 26, -98, 229, 161, 413, -236, -204, -488, -195,
	90, 262, 242, 263, -196, -197, 301, 441, -426, -150,
	192, 484, -385, -229, -190, 485, -344, -98, -344, -98,
	131, 2, -510, 223, 483, -243, 267, 161, -268, -386,
	207, 488, -276, 131, -298, -297, 267, -223, 181, 2,
	-219, 131, 126, 483, 321, 2, -205, 181, -191, -190,
	-317, -183, 402, 131, -296, 439, -326, -98, 483, 109,
	36, -326, -287, -288, -383, -289, -206, 483, -212, -190,
	2, -219, -277, -277, -277, -180, 488, 131, -203, -222,
	-227, -426, -427, -80, -387, 484, 484, 484, -152, 285,
	-151, -190, 5, -155, 439, -242, -336, -335, -442, -443,
	-438, 234, 196, 429, 208, 144, -261, -207, -206, 102,
	-153, -95, -385, -153, -153, -385, -385, -219, 158, -153,
	-153, -153, 2, 2, -301, -219, -203, -236, -219, -268,
	-268, -301, -203, -301, -203, -301, -203, -98, -344, 366,
	158, 158, 485, -301, 321, 103, 399, 299, 196, -219,
	-236, -219, -236, -203, -219, -379, -293, -167, 282, 220,
	372, -323, -324, -346, 350, 351, -324, 350, 351, 8,
	9, 8, 9, -171, 376, 270, -277, 488, -174, 37,
	116, 220, -219, 460, 127, -344, -344, 413, -517, 394,
	-351, 127, -344, 256, 271, 421, 143, 430, 118, 275,
	161, 483, -345, -345, 484, -281, -344, -344, 482, 491,
	484, -264, 488, -263, -344, -279, -279, 484, 485, -279,
	-268, 482, 482, 488, 484, -362, -363, 123, -344, 413,
	413, 413, 413, 483, 484, 485, -472, 292, 483, 483,
	-344, 484, 484, 484, 484, 36, 488, 488, 488, 484,
	488, 488, 488, 484, 484, 484, 488, 484, 460, 460,
	484, 484, 484, 484, 488, 484, 488, 484, 161, 484,
	484, -315, 304, 484, 11, 12, 474, 475, 476, 477,
	156, 478, 479, 472, 473, 471, 464, 465, 466, 77,
	245, 352, 14, 15, 16, 209, 188, -345, -345, -345,
	484, -349, -350, 161, 158, 36, -310, -310, -310, 484,
	161, -279, 484, 484, 483, -465, 247, 267, 484, -338,
	-337, 452, -382, -272, 2, -374, -214, -420, -338, -338,
	-279, -344, 215, 215, -303, 439, 281, -305, -374, -368,
	-416, -343, -342, 159, 37, 116, 264, 184, -368, -212,
	-260, -368, -368, -420, -369, -369, -367, 484, -480, -416,
	484, -273, -377, -459, -264, 485, -153, -420, -141, 5,
	271, -141, -141, -141, -268, 24, 305, -391, 481, 482,
	8, -420, 483, -414, -414, -414, -268, 161, -417, -331,
	427, 74, 323, 409, -417, -176, 335, -206, -206, -219,
	267, -335, 181, -182, 267, -391, -213, -190, 483, 483,
	220, 220, 439, -206, -213, 220, 181, -206, 181, -213,
	-213, -489, 323, 276, -344, 237, 321, 268, -177, 335,
	-98, -98, -98, 483, -496, 439, 117, -219, -236, -219,
	-223, 335, 265, -231, -415, -415, -297, 335, -221, -203,
	-178, -98, -98, -98, 483, -204, -179, 335, -195, -426,
	271, 435, -487, -153, 161, -150, 476, -190, 448, -190,
	-241, -244, -242, -206, -158, 456, 454, 131, -235, -219,
	481, -153, -426, -219, -228, 131, -260, 267, -426, 483,
	2, 2, 281, 267, -205, 181, -184, 124, -515, 466,
	-203, -338, -272, -295, -329, 343, 281, -261, 444, -212,
	-295, -274, 488, 161, 466, 485, -261, 2, -180, -180,
	-180, -236, -237, -180, -180, -80, -80, -153, 488, 483,
	466, 466, 483, -426, -426, 484, 488, -219, -205, 196,
	196, -211, -191, 484, 488, 485, 483, -153, 161, -45,
	454, 399, 487, -301, -301, -301, 366, 366, -190, -215,
	-203, -219, -216, -236, 158, 158, 433, -324, 282, 241,
	-371, -175, 273, -219, 487, -344, -344, 127, 127, -344,
	-345, -345, -344, 127, 161, 483, -344, -355, 31, 31,
	484, 488, -340, -344, 484, 447, -264, -264, 484, 476,
	-420, 487, 484, -353, 125, -344, 407, 252, 179, 251,
	-314, 251, -314, -314, -414, 5, -420, 476, -473, -209,
	483, -190, 452, -263, 484, -393, -391, -344, -344, -344,
	-344, -344, -414, -395, -395, -414, -414, -344, -349, -344,
	-393, -391, -345, -345, -345, -345, -345, -345, -345, -345,
	-345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
	-345, 118, 267, 275, -345, -350, -349, -344, -344, -391,
	484, 484, 484, -279, -80, 483, 247, -291, 172, -344,
	-385, 488, -291, -291, 484, -374, -374, 483, -344, 215,
	482, 488, 490, 466, -260, 485, -367, -368, 482, 484,
	488, 484, 488, -328, 36, 484, -420, 284, 5, 8,
	481, 482, 485, -414, 484, 484, 484, -268, -344, 413,
	413, 131, 267, 441, -444, -439, 129, -344, -266, -372,
	-344, 483, 483, 2, -173, 122, 369, -498, 2, 439,
	131, -180, 131, -180, 458, 483, 483, 413, 454, -279,
	-344, -154, 109, -419, -491, 487, -491, 487, 413, 413,
	454, -279, 413, -426, 271, -427, -153, 2, -223, 2,
	484, 484, 488, -445, 36, 279, 483, 279, -219, -63,
	454, -384, -416, -221, 36, 131, -487, -389, -390, 5,
	-219, 131, 281, 267, -185, 227, -515, -424, -460, -264,
	-295, -286, 268, 82, 484, -338, -288, -272, -344, 2,
	484, -180, -151, -152, -426, -426, -426, -153, -155, -155,
	-336, -245, 483, -205, -191, 483, -155, -207, 2, -427,
	-98, 285, -219, 476, -301, -252, -251, 299, 275, -252,
	350, 350, 282, 152, 224, -174, -204, -344, -344, 127,
	31, 31, -344, -344, -355, 484, -344, -344, -279, 482,
	5, -344, 484, 484, 8, -344, 484, 485, -474, -190,
	-344, 484, 484, 484, 488, 488, 484, 484, 484, 484,
	484, 484, 484, -350, 161, 118, 275, 483, 484, 484,
	-80, -352, 175, 52, -374, -352, -352, -303, -268, -374,
	-342, -204, 481, -420, -416, -377, 483, 485, 482, 2,
	481, -420, 484, -206, -206, -335, 131, -446, 83, -448,
	67, 144, 89, 267, 271, 429, 314, 63, 109, 327,
	-506, 36, 484, 484, 488, -174, -266, -268, 267, 391,
	109, 267, 109, 102, 424, 70, -206, -213, -268, -268,
	-219, 137, 484, 488, 466, 2, 476, 476, -223, -221,
	137, 484, -204, -260, -248, 199, -206, -443, -440, -441,
	314, -447, -449, 144, 314, -98, -157, -156, -190, 5,
	2, 483, -243, 285, 482, -298, -98, -223, 484, 488,
	-319, 439, -204, -219, 131, -186, 226, -515, -424, -183,
	-322, -320, -327, 483, 281, -98, -264, 466, 484, 484,
	102, 102, 190, 130, -266, 483, 483, -268, 102, 484,
	-46, -47, 196, 83, 303, -216, 399, 196, 483, 483,
	-174, -344, -344, -344, 484, -264, -420, 476, -468, 299,
	484, -344, -344, -345, 161, 483, -355, 484, -469, 453,
	-344, -279, -469, -469, 484, -416, 2, 481, 2, -335,
	-213, -217, -210, -190, 144, 181, 271, 220, 483, -345,
	-219, 483, 2, -507, 113, 200, -334, -508, 88, 392,
	189, -372, -175, 484, 484, 271, 271, -344, -391, 483,
	-180, -180, 484, 484, -344, 413, -419, 87, -417, 2,
	-491, -344, 413, 36, -249, -250, 188, -445, 220, -210,
	220, -505, 454, 484, 488, 466, 466, -241, -158, -64,
	-65, 414, -384, -260, 5, 483, -190, 281, 483, -204,
	-515, -424, -184, -295, 119, -268, 83, -322, -351, -153,
	483, 483, -246, 72, 84, 110, 180, 164, 197, 384,
	389, 26, -246, 484, -266, -266, 484, 483, -153, 488,
	26, 483, 26, 483, -219, -236, -279, -279, 484, -264,
	52, 484, 484, -345, -355, 484, -470, -471, -209, 482,
	2, -448, -210, 267, 439, -344, -192, 483, -344, 200,
	114, 186, -248, 483, -333, 439, 327, -201, 67, -266,
	483, 483, 483, 466, 161, 483, -98, -158, 297, 483,
	-247, 281, 102, 261, -156, -347, -347, 484, 36, -65,
	9, 36, -266, -219, -266, 281, -424, -185, 433, 268,
	484, -213, -295, -427, -427, -333, 484, 484, -427, -47,
	-268, -268, 484, 484, -475, 321, 351, 174, -279, 484,
	488, 36, 131, 176, 484, -450, 246, -190, 484, 114,
	186, -249, -268, -248, 176, -219, -492, 439, -217, 484,
	-254, -253, -251, -256, -255, -251, -279, -417, 87, 297,
	-279, -247, -219, -267, -373, -206, 73, 102, -248, -98,
	-98, 484, -319, 484, -219, -186, 369, -337, 484, 484,
	-334, -333, 484, 484, 484, 484, -476, -477, 44, 426,
	93, -344, -476, -476, -471, -473, 144, 454, -451, -454,
	-453, 281, 375, 162, 298, 484, 391, 450, -507, 484,
	454, -260, -344, -333, 484, 488, 444, 484, 488, 444,
	484, 161, 484, 483, 484, 488, 313, 115, 122, -249,
	-505, -333, 483, -334, 483, -287, -153, -153, -248, -334,
	-153, -478, 129, -477, 310, 157, 350, 310, 157, -478,
	-478, -210, 48, -453, 281, -454, 281, 433, 115, 48,
	-450, -248, -253, 188, -255, 161, 297, -268, -373, 351,
	351, 2, -158, -247, -334, -266, -248, -266, -338, -249,
	-248, 93, 172, 408, 261, 31, 466, -452, 261, 341,
	55, 369, -452, 466, -451, 483, 483, 484, 2, -247,
	-248, 484, -249, 484, -249, 350, 289, -477, -344, 22,
	271, 109, -344, -507, -279, -279, -181, 55, 341, -249,
	-333, -511, 452, -334, 484, 484, -511, -334, 2, -248,
	-249, 413, -248, -249, 483, -249, -511, -279, -511, 484,
	-249,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	373, 374, 376, 377, 378, 380, 381, 383, 385, 387,
	389, 390, 392, 394, 396, 397, 398, 399, 400, 402,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 462, 464, 0, 996, 998, 1000, 1002, 0, 592,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 451, 453, 0, 0, 0, 473, 474, 0,
	1084, -2, 467, 469, 471, 536, 538, 540, 542, 544,
	546, 548, 549, 551, 553, 555, 557, 559, 561, 563,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	584, 586, 588, -2, -2, -2, 0, -2, -2, -2,
	1014, 32, 34, 36, 38, 40, 42, 44, 274, 275,
	277, 279, 281, 283, 286, 288, 290, 1142, 328, 330,
	332, 334, 336, 338, 0, -2, 1154, 0, 0, 46,
	47, 48, 49, 50, 51, 52, 53, 69, 70, 71,
	72, 73, 74, 75, 76, 57, 59, 60, 64, 65,
	67, 55, 0, 0, 1115, 1117, 1119, 1121, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 375,
	379, 382, 384, 386, 388, 391, 393, 395, 401, 403,
	405, 874, 1771, 1788, 1789, 1790, 1793, 1794, 1795, 1796,
	1797, 1798, 2145, 2226, 2227, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
	2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, 0, 429, 427, 1764, 430, 1978, 432, 434, 317,
	318, 319, 320, 321, 322, 0, 444, 438, 443, 445,
	447, 448, 449, 450, 424, 422, 0, 444, 1823, 442,
	994, 995, 989, 990, 2009, 1021, 463, -2, -2, -2,
	2111, -2, 495, -2, 502, 2115, 2011, 507, 0, 509,
	-2, 512, 997, 999, 1001, 590, 591, 1774, 0, 0,
	0, 0, 30, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 924, 925, 0, 0, 157, -2, -2,
	-2, -2, 0, 0, 1861, 1732, 1790, 1735, 1730, 194,
	196, 198, 199, 0, 0, 0, 0, 0, 0, 223,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 770, 762, 763, 966, 0, 0, 0, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 0, 253, 365, 366, 0, 1143,
	1143, 0, 0, 0, 0, 174, 165, 0, 0, 739,
	452, 454, 0, 0, 160, 0, 0, 993, 0, 176,
	0, 0, 468, 470, 472, 537, 539, 541, 543, 545,
	547, 550, 552, 554, 556, 558, 560, 562, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, 585, 587,
	589, 597, 0, 0, 0, 0, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 600, 602, 603, 604,
	0, 655, 672, 0, 914, 1144, 1023, 1004, 1018, 1023,
	1006, 1007, 1008, 1009, 1010, 1015, 1017, 1011, 1012, 1013,
	33, 35, 37, 39, 41, 43, 45, 276, 278, 280,
	282, 284, 287, 289, 291, -2, 1113, 1114, 329, 331,
	333, 335, 337, 339, 455, 0, 457, 0, 601, -2,
	0, 1148, 1148, 1148, 0, 0, 1114, 1112, 0, 460,
	461, 516, 517, 1375, 0, 0, 0, 0, 0, 0,
	0, 1629, 1461, 0, 518, -2, 1492, 1494, 2086, 2111,
	1628, 1496, 1497, 1498, 1499, 1500, 0, 1502, 1503, 1504,
	1505, 1506, 1507, 0, 1509, 0, 1514, 1515, 1516, 0,
	2093, 1709, 1784, -2, 0, 0, 2099, 1780, 0, 1595,
	1532, -2, -2, 1807, 1786, 1307, 1308, 1309, 1310, 1311,
	-2, -2, 2128, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 0, 2075, 2094, 2095, 2100, 2102,
	2096, 2083, 1557, 1871, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1334, 1343, -2,
	-2, -2, -2, -2, -2, 2087, 2088, 2105, 2108, 2114,
	2119, 2120, 2092, 2101, 2129, 2130, 2131, 2132, 2133, 2134,
	2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
	1335, -2, -2, -2, -2, 1131, 1988, 1134, 874, 1132,
	1116, 1118, 0, 1120, 0, 0, 0, 1125, 1151, 1149,
	0, 1190, 1129, 1130, 1208, 1208, 1232, 0, 1213, 0,
	1232, 1143, 1258, 0, 1219, 2004, 1533, 1534, 0, 1790,
	1785, -2, -2, 2126, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 431, 433, 0, 0, 0, 0, 0,
	0, 0, 0, 1020, 465, 466, 0, 490, 0, 494,
	2082, -2, 1829, 2020, -2, 498, 1024, 1028, 1029, 1030,
	1031, 0, 0, 0, 0, 0, 504, 0, 0, 491,
	492, 510, 513, 0, 593, 594, 595, 596, 54, 0,
	2094, 1258, 56, 0, 1754, 1815, 1816, 1817, 1818, 1819,
	2127, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154,
	2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
	2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174,
	2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184,
	2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194,
	2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
	2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
	2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224,
	2225, 2128, 58, 0, 2094, 61, 0, 2094, 0, -2,
	66, 0, 1760, 68, 0, 1757, 77, 0, 2094, 0,
	1729, -2, -2, 2094, 922, 177, 178, 1803, 1804, 1811,
	1812, 1813, 1814, 1245, 161, 0, 0, 0, 731, 1726,
	1731, 732, 1736, 0, 200, 201, 202, 203, 204, 2094,
	206, 207, 0, 209, 210, 2094, 212, 213, 0, 215,
	229, 230, 0, 232, 0, 2094, 0, 0, 0, 238,
	-2, 254, 0, 251, 0, 242, 243, 245, 246, 247,
	248, 0, 295, 293, 1765, 0, 740, 2094, 742, 1770,
	0, 0, 943, -2, 2094, 919, 949, 945, 1768, 0,
	-2, 0, 1141, 2094, 1038, 766, 767, 768, 769, 0,
	314, 0, 1051, 0, 1053, 0, 1074, 1264, 1208, 1208,
	0, 255, 256, 257, 258, 259, 2094, 0, 0, 0,
	264, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	152, 2094, 342, 363, 152, 2094, 345, 152, 2094, 348,
	0, 351, 964, 152, 2094, 354, 152, 2094, 357, 358,
	360, 2094, 362, 179, 0, -2, 418, 1773, -2, 368,
	0, 369, 0, -2, 0, 191, 0, 0, 737, 738,
	1245, 163, 0, 991, 992, 0, 0, 475, 0, 0,
	598, 599, 0, 0, 609, 610, 611, 191, 2012, 1986,
	1888, 616, 0, 619, 622, -2, 0, 0, 0, 0,
	626, 0, 631, 632, 633, 0, 736, 635, 0, 0,
	637, 0, 641, 0, 644, 0, 646, 0, 648, -2,
	-2, -2, 659, -2, 0, 663, 0, 665, 0, 0,
	0, 0, 680, 681, 0, 686, 0, 689, 690, 691,
	692, 693, 0, 695, 696, 697, 698, 0, 700, 701,
	-2, -2, 705, 707, 0, 714, 0, 718, 0, 722,
	0, 605, 606, 152, 1262, 1003, -2, 1005, 0, -2,
	0, 456, 0, 459, 1169, 1099, 1096, 0, 1166, 1167,
	1100, 0, 0, 0, 1107, 0, 1146, 1147, 0, 0,
	0, 1086, 1087, 0, 0, 0, 0, 1634, 1635, 1636,
	1637, 1638, 1639, 1642, 1643, 1640, 1641, 1644, 1645, 0,
	0, 0, 0, 0, 1646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1647, 1648, 1649, 0,
	0, 1651, 0, 1653, 0, 0, 0, 0, 0, 0,
	1440, 1442, 1717, 0, 0, 1650, 1380, 1381, 1382, 1383,
	1384, 1419, 1420, 0, 0, 1493, 1714, 1713, 1495, 0,
	1665, 0, 1508, 1750, -2, 0, 1629, 1660, 0, 0,
	1517, 1518, 1519, 0, 0, 1665, 0, 0, 1708, 1529,
	1530, 1372, 0, 0, 1597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1320, 0, 1322, 0, 1323, 1324, 1331,
	1344, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1689, -2, 0, 0, 0, 0, 1336,
	0, 1133, 0, 0, 1194, 1718, 1722, 1723, 1194, 1194,
	0, 0, 1666, 1255, 1255, 0, 0, 1251, 1251, 1251,
	1249, 1232, 0, 1232, 1242, 0, 1232, 1232, 0, -2,
	1213, 0, 0, 1242, 0, 1226, 406, 408, 410, 412,
	413, 414, 416, 1259, 1260, 0, 0, 0, 0, 0,
	0, 1791, 0, 0, 0, 1776, 0, 0, 0, 0,
	436, 446, 1143, 0, 1668, 1281, 1285, 1286, 1287, 1288,
	1289, 1290, 0, 0, 1282, -2, 1332, 1334, 1355, 1808,
	1809, 1810, 1315, 1316, 1317, 1318, 1319, 1327, 1314, 1314,
	1314, 1325, 1354, 1346, 1354, 1350, 1301, 1302, 1337, 1338,
	1339, 1340, 0, 440, 0, 0, 0, 0, -2, 500,
	505, 506, 0, 0, 1026, 0, 1032, 527, 528, 529,
	1034, 1035, 0, 503, 530, 531, 532, 533, 534, 535,
	0, 1738, 1739, 1740, 1741, 1744, 1745, 0, 0, 501,
	520, 508, 0, 514, 78, 986, 117, 0, 986, 986,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 102,
	113, 90, 91, 0, 0, 0, 0, 62, 896, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 101, 0, 96, 80, 0, 0, 0, 103, 115,
	0, 143, 145, 0, 0, 920, 0, 1140, 0, 182,
	1244, 0, 1245, 730, 0, 0, 1791, 1734, 0, 0,
	0, 0, 231, 233, 0, 235, 236, 237, 0, 942,
	0, 244, 241, 285, 845, 2094, 0, 0, 312, 307,
	0, 309, 0, 895, 2094, 893, 1769, 0, 917, 0,
	0, 0, 950, 1800, 959, 965, 1040, 0, 316, 0,
	1054, 1056, 0, 0, 1265, 0, 1267, 1268, 0, 261,
	262, 263, 0, 340, 0, 150, 151, 0, 343, 0,
	346, 0, 152, 2094, 1724, 352, 0, 355, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 0, 191, 0, 1245, 191, 191, 1245,
	477, 1245, 479, 0, 0, 612, 191, 191, 191, 617,
	618, 620, 621, -2, -2, 715, 623, 624, 683, 0,
	0, 0, 682, 634, 0, 724, 2000, 734, 683, 1861,
	683, 1861, 683, 1861, 645, 647, 650, 675, 658, 662,
	0, 0, 0, 667, 0, 669, 0, 671, 683, 684,
	687, 694, 699, 0, 0, 0, 0, 0, 0, 0,
	913, 0, 1016, 1169, 1099, 458, 1090, 1168, 1091, 1098,
	1101, 0, 0, 1103, 0, 1105, 0, 1164, 1165, 1172,
	1173, 0, 1183, 1184, 1176, 0, -2, 0, 0, 1179,
	1180, 1109, 0, 1126, 1127, 1128, 1155, 1156, 975, 0,
	2226, 1376, 1276, 1377, 1378, 1753, 0, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, -2, -2, -2,
	-2, -2, -2, -2, -2, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, -2, -2, -2, 1417,
	1418, -2, 1652, 1654, 0, 1717, 0, -2, 0, -2,
	-2, -2, -2, 1437, 0, 1439, 1444, 1446, 1448, 0,
	0, 0, 0, 1716, 1458, 1700, 1701, 0, 0, 1631,
	1632, 1633, 1443, 0, 1462, 1715, 1712, 0, 0, 1664,
	1154, 1521, 0, 0, 0, 0, 1528, 1513, 1662, 0,
	1661, 0, 0, 0, 1672, 0, 1707, 1703, 0, 1751,
	1371, 1358, 1359, 1360, 1361, 1362, 1363, 1373, 0, 1748,
	1777, 1783, 1605, 0, 0, 0, 1558, 1559, 1560, 1561,
	1562, 0, 1564, 1565, 0, 1567, 1568, 0, 1570, 1571,
	0, 1573, 1574, 1575, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 0,
	0, 1577, 0, 1675, -2, -2, -2, -2, -2, -2,
	-2, -2, 0, 1579, 0, 1581, 1666, 1686, 0, 0,
	1463, 0, 0, 0, 1629, 0, 1584, 1666, 1694, 0,
	0, 0, 0, 0, 1666, 0, 1699, 0, 1591, 0,
	1593, 1135, 0, 0, 1271, 0, 0, 0, 1721, 1271,
	1271, 0, 1189, 0, 0, 1252, 1253, 1254, 0, 0,
	1255, 0, 1246, 1250, 1247, 1248, 1242, 1205, 0, 0,
	1755, 1242, 1211, 1241, 0, 874, 1231, 1242, 1242, 0,
	-2, 1215, 1232, 0, 0, 407, 409, 411, 415, 417,
	0, 0, 1154, -2, 191, 873, 0, 0, 0, 0,
	0, 426, 428, 0, 0, 420, 0, 423, 0, 1272,
	1275, 0, 0, 1291, 1292, 0, -2, 0, 0, 1356,
	0, 0, 0, 0, 493, 0, 1025, 1033, 0, 524,
	0, 526, 0, 1742, 1746, 1743, 1747, 0, 515, 0,
	0, 0, 0, 985, 121, 2094, 0, 154, 0, 0,
	838, 1761, 0, 0, 0, 0, 1876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	92, 0, 0, 0, 0, 0, 0, 0, 897, 898,
	900, 907, 909, 0, 903, 1749, 0, 0, 904, 0,
	906, 908, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 93, 0, 0, 0, 0, 1728, 938, 936,
	930, 931, 932, 933, 934, 935, 0, 0, -2, 191,
	0, 162, 182, 1727, 1737, 0, 205, 208, 211, 214,
	0, 239, 0, 0, 772, 745, 0, 0, 294, 191,
	0, 0, 308, 0, 891, 894, 0, 874, 2094, 929,
	1767, 0, 0, 0, 0, 948, 0, 2094, 1756, 1799,
	1800, 1042, 1048, 0, 1271, 0, 1072, 1057, 0, 0,
	0, 1072, 1076, 1077, 1079, 1080, 0, 0, 1266, 0,
	265, 364, 152, 152, 152, 349, 0, 0, 152, 359,
	152, 180, 361, 367, 419, 1143, 1143, 191, 189, 1963,
	187, 184, 186, 0, 0, 0, 773, 775, 776, 777,
	778, 0, 1800, 0, 1914, 1800, 0, 1060, 1062, 0,
	158, 164, 191, 0, 306, 476, 481, 607, 0, 613,
	614, 615, 652, 677, 625, 627, 628, 629, 0, 735,
	733, 636, 683, 639, 683, 642, 683, 661, 664, 666,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 719, 720, 721, 723, 1263, 1094, 1095, 1097, 0,
	1106, 0, 0, 1178, -2, -2, 1177, 1181, 1182, -2,
	-2, -2, -2, 1102, 0, 1111, 1108, 0, 1163, 973,
	974, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1459, 0, -2, 1438, 1441, 1445, 1447, 1449, 0, 0,
	0, 0, 0, 0, 1655, 0, 1657, 1460, 1710, 1713,
	1627, 0, 0, 1153, 1154, 1154, 0, 1527, 0, 1663,
	0, 1670, 1671, 0, 1520, 0, 1704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 1563, 1566, 1569, 1572, 0, 0, 0, 0, 1552,
	0, 0, 0, 1556, 1326, 1312, 0, 1354, 1352, 1353,
	1347, 1354, 1351, 1304, 0, 1303, 0, 1576, 0, 1578,
	1580, 0, 0, 1582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 1467, 1468,
	1583, 1692, 1693, 0, 0, 0, 0, 0, 0, 1589,
	0, 1698, 1590, 1592, 1143, 0, 1136, 0, 1191, 1186,
	1270, 0, 1719, 1245, 1193, 1195, 1720, 1758, 1186, 1186,
	0, 1667, 0, 0, 1236, 0, 0, 0, 1238, 1209,
	0, 0, 1203, 0, 1199, 1200, 1201, 1202, 1210, 874,
	1240, 1212, 1216, 1777, 0, 1242, 0, 1227, 0, 1229,
	1261, 0, 1221, 1224, 0, 0, 192, 1792, 216, 220,
	221, 217, 218, 219, 435, 0, 0, 1669, 0, 1277,
	0, 1283, 0, 0, 0, 0, 439, 0, 489, -2,
	522, 523, 525, 0, 521, 118, 986, 0, 0, 977,
	0, 123, 2094, 132, 0, 813, 0, 1759, 0, 0,
	0, 0, 0, 988, 0, 0, 2094, 152, 2094, 152,
	135, 138, 0, 142, 140, 0, 0, 804, 79, 986,
	82, 86, 94, 0, 0, 0, 100, 0, 0, 0,
	979, 0, 901, 902, 905, 911, 63, 0, 981, 976,
	144, 84, 88, 95, 0, 983, 81, 0, 937, 915,
	916, 0, 921, 155, 0, 191, 1733, 0, 0, 0,
	0, 0, 771, 856, 0, 0, 0, 0, 300, 296,
	0, 305, 311, 310, 741, 0, 0, 0, -2, 952,
	946, 947, 0, 0, 0, 2094, 1044, 1048, 0, 1047,
	1141, 1154, 315, 1049, 1072, 0, 0, 0, 1059, 1055,
	1052, 1271, 0, 0, 0, 0, 0, 260, 341, 344,
	347, 1725, 152, 353, 356, 370, 371, 166, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 782, 0, 1800,
	1800, 0, 1763, 0, 0, 0, 0, 159, 0, 478,
	0, 0, 0, 638, 640, 643, 668, 670, 683, 708,
	709, 799, 0, 799, 0, 0, 1104, 0, 1175, 1110,
	1157, 1158, 0, 975, 0, 1379, 1422, 0, 0, -2,
	0, 0, 1426, 0, 0, 0, -2, 0, 0, 0,
	1656, 1658, 0, 1712, 1522, 0, 0, 0, 1526, 1510,
	1511, 0, 1630, 1673, 1702, 1706, 0, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 0, 1752, 1778, 1782, 1603, 1604,
	1608, 1766, 0, 0, 1535, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1349, 0, 0, 1674, 1685, 1687,
	1464, 1465, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, -2, -2, -2, 1482, 1483, 1484, -2, -2,
	-2, 0, 0, 0, 1688, 1690, 1691, 1695, 1696, 0,
	1586, 1587, 1588, 1697, 0, 1143, 1137, 1188, 0, 1269,
	1192, 0, 1188, 1188, 1150, 1234, 0, 0, 1257, 0,
	1206, 0, 1207, 0, 1239, 0, 1214, 1217, 1218, 1228,
	0, 1220, 0, 1223, 0, 1522, -2, 437, 421, 0,
	0, 1279, 0, 0, 1329, 1333, 1357, 441, 1243, 0,
	0, 0, 0, 153, 811, 837, 0, 0, 0, 968,
	975, 0, 0, 843, 125, 0, 0, 0, 133, 0,
	0, 130, 0, 137, 141, 0, 0, 0, 0, 0,
	97, 98, 99, 0, 104, 0, 105, 0, 0, 0,
	0, 0, 0, 940, 941, 181, 156, 234, 874, 240,
	793, 844, 0, 846, 0, 746, 0, 0, 845, 292,
	0, 299, 0, 895, 0, 0, 918, 0, 951, 953,
	963, 0, 0, 0, 1046, 1048, 0, 1039, 1040, 1171,
	1050, 1070, -2, 1069, 0, 1154, 1078, 1075, 1081, 1082,
	0, 350, 188, 0, 183, 185, 0, 169, 0, 0,
	774, 779, 0, 0, 0, 0, 0, 1061, 1063, 0,
	175, 0, 608, 630, 678, 710, 798, 0, 0, 712,
	0, 0, 1174, 1161, 1162, 1159, 975, 1424, 1428, 0,
	0, 0, 1430, -2, 0, 1452, -2, -2, 1659, 1711,
	1501, 1154, 1523, 1525, 1512, 1705, 1374, 0, 1610, 1607,
	0, 1594, 1547, 1548, 0, 0, 1551, 1553, 1554, 1555,
	1313, 1306, 1305, 1684, 0, 0, 0, 0, 1585, 1138,
	0, 1599, 0, 0, 1196, 1599, 1599, 1235, 0, 1237,
	1204, 1197, 0, 1778, 1230, 1222, 0, 0, 1273, 1278,
	0, 1284, 1328, 119, 120, 122, 0, 812, 0, 815,
	0, 0, 0, 0, 822, 823, 0, 0, 0, 0,
	0, 832, 860, 870, 0, 1163, 0, 0, 0, 127,
	147, 0, 0, 987, 0, 0, 152, 152, 0, 0,
	978, 0, 0, 0, 0, 107, 0, 0, 980, 982,
	0, 0, 984, 0, 801, 0, 856, 848, 849, 850,
	0, 855, 857, 0, 0, 759, 0, 755, 0, 0,
	748, 772, 745, 0, 297, 892, 926, 874, 944, 0,
	0, 0, 0, 0, 0, 1036, 1048, 0, 1041, 1042,
	1072, 1170, 0, 0, 0, 1058, 1171, 0, 190, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	480, 482, 0, 0, 488, 797, 0, 0, 0, 0,
	1160, 1432, -2, -2, 1453, 0, 1779, 1781, 1154, 0,
	1596, 0, 0, -2, 0, 0, 0, 1139, 1122, 0,
	1187, 1185, 1123, 1124, 1256, 0, 1225, 0, 1280, 124,
	0, 816, 817, 1762, 819, 0, 821, 824, 0, 827,
	1802, 0, 831, 839, 861, 0, 793, 0, 866, 867,
	868, 969, 970, 872, 0, 126, 128, 146, 972, 0,
	129, 136, 0, 0, 83, 0, 0, 1854, 110, 108,
	106, 85, 0, 0, 745, 800, 0, 847, 0, 858,
	859, 749, 0, 747, 0, 0, 0, 0, 0, 298,
	301, 0, 304, 0, 954, 0, 962, 0, 0, 0,
	0, 1043, 1044, 313, 0, 0, 0, 1072, 1083, 168,
	0, 0, 780, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 781, 872, 0, 0, 836, 0, 173, 0,
	484, 0, 486, 0, 711, 713, 0, 0, 1524, 1614,
	0, 1549, 1550, -2, 0, 1490, 1598, 1600, 0, 1198,
	1274, 814, 818, 0, 0, 0, 878, 0, 0, 0,
	864, 865, 801, 0, 793, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 749, 0, 0,
	757, 0, 760, 0, 756, 753, 754, 793, 0, 302,
	303, 0, 0, 963, 0, 0, 1045, 1046, 0, 1065,
	1066, 1068, 1073, 0, 0, 870, 872, 835, 0, 483,
	0, 0, 716, 717, 0, 0, 0, 0, 1609, 1491,
	0, 0, 0, 0, 826, 883, 0, 0, 0, 862,
	863, 860, 0, 841, 0, 874, 131, 0, 971, 872,
	0, 805, 0, 0, 808, 0, 0, 111, 1854, 109,
	0, 743, 0, 0, 852, 854, 0, 761, 801, 759,
	928, 872, 0, 870, 0, 1037, 0, 1067, 191, 191,
	793, 870, 191, 485, 487, 1606, 1626, 1615, -2, 2055,
	1858, 0, 1626, 1626, 1601, 1602, 0, 0, 828, 879,
	880, 0, 875, 876, 877, 1801, 829, 830, 840, 869,
	0, 878, 148, 793, 802, 0, 0, 803, 0, 0,
	114, 0, 116, 0, 851, 0, 0, 0, 0, 745,
	749, 870, 0, 793, 0, 1271, 170, 171, 801, 793,
	172, 1611, 0, 0, 1617, 1618, 1619, 1620, 1621, 1612,
	1613, 820, 0, 881, 0, 882, 0, 0, 0, 0,
	883, 134, 806, 0, 809, 0, 112, 0, 853, 750,
	0, 752, 749, 758, 793, 0, 801, 0, 1064, 833,
	801, 0, 1623, 1624, 0, 0, 0, 884, 0, 887,
	888, 0, 885, 0, 860, 0, 0, 796, 751, 744,
	801, 872, 960, 870, 834, 1622, 1625, 1616, 825, 886,
	889, 890, 871, 842, 0, 0, 792, 794, 795, 960,
	870, 957, 0, 793, 801, 0, 955, 793, 961, 801,
	807, 0, 801, 960, 0, 960, 958, 0, 956, 801,
	810,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 472, 3, 478, 473, 3,
	483, 484, 476, 474, 488, 475, 485, 477, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 491, 3,
	464, 466, 465, 469, 487, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 481, 3, 482, 479, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 489, 471, 490, 467,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 468, 57807, 470, 57808, 480, 57809, 486,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1159
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1168
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1169
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1170
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1171
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1175
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1182
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1195
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1197
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1198
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1199
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1281
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1292
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1307
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1311
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1315
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1329
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1348
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1380
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1384
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1388
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1404
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1413
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1428
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1442
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1466
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1477
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1484
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1496
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1511
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1516
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1520
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1531
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1539
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1550
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1560
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1570
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1579
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1590
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1596
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1622
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1627
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1664
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1689
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1699
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1718
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.typeReference(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1747
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1775
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1805
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1827
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1831
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1852
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1892
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1899
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1926
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1929
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1933
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1937
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1943
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1953
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1990
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1995
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1999
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2005
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2010
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2015
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2020
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2025
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2029
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2048
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2056
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2078
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2096
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2102
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2120
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2126
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2140
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2141
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2142
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2185
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2221
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2250
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2269
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2274
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2289
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2290
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2305
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2308
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2309
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2312
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2315
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2316
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2319
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2320
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2323
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2324
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2334
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2335
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2336
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2337
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2339
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2341
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2343
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2344
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2345
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2351
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2353
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2355
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2356
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2357
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2358
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2376
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2394
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2403
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2422
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2437
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2465
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2475
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2500
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2514
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2528
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2539
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2541
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2542
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2543
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2553
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2592
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2600
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2604
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2607
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2648
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2702
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2705
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2709
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2737
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2744
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2746
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2754
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2762
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2778
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2796
		{
			return helpWith(sqllex, "DELETE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2798
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2799
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2800
		{
			return helpWith(sqllex, "INSERT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2801
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2803
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2813
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2814
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2815
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2820
		{
			return helpWith(sqllex, "DELETE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2821
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			return helpWith(sqllex, "INSERT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2828
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2829
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2855
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2867
		{
			sqlVAL.union.val = sqlDollar[2].union.typeReferences()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2871
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2888
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2896
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2900
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2904
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2929
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2953
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2957
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			return helpWith(sqllex, "GRANT")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2991
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3000
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "RESET")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3069
		{
			return helpWith(sqllex, "USE")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3074
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3075
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3076
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3082
		{
			return helpWith(sqllex, "USE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3116
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3142
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3146
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3182
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3222
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3256
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3279
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3291
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3296
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3301
		{
			return unimplemented(sqllex, "set from current")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3310
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3315
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3382
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3386
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = tree.Low
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = tree.Normal
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = tree.High
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3432
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3445
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3448
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3453
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3455
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3456
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3462
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3464
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3466
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3467
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3468
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3469
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3470
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3471
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3478
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3479
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3482
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3486
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3491
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3501
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3524
		{
			sqlVAL.str = "client_encoding"
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3527
		{
			sqlVAL.str = "timezone"
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3528
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3546
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3550
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3585
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3594
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3603
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3611
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3633
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3639
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3669
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3684
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3700
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3708
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3716
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3719
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3721
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3732
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3734
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3738
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3741
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3752
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3754
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3757
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3768
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3773
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = true
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3779
		{
			sqlVAL.union.val = true
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = false
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3798
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3808
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3826
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3838
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3843
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3845
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3849
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3852
		{
			sqlVAL.union.val = true
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = false
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3861
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3864
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3869
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3887
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3900
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = true
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3904
		{
			sqlVAL.union.val = false
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3915
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3918
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3929
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3932
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3939
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3943
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3953
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3961
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3966
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3971
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3987
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3991
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4004
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4007
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4015
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4018
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4022
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4026
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4030
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4038
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4046
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4060
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4064
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4075
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4089
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4098
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4103
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4107
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4114
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4121
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4126
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4246
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4250
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4254
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4297
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4315
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4350
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4358
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4364
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4370
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4409
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4424
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = nil
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4445
		{

			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4451
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4456
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4466
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4471
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4476
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4503
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4516
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4530
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4531
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4532
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = false
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4556
		{
			sqlVAL.union.val = true
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = true
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4558
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = true
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4560
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4591
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4604
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4610
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4618
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4620
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4621
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4622
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4628
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4644
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4649
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4680
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4744
		{
			typ := sqlDollar[2].union.typeReference()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, tree.IsReferenceSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4819
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4823
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4838
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4852
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4863
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4869
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4880
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4903
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4915
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4955
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4966
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4993
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5008
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5032
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5062
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5073
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5074
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5075
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5076
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5078
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5096
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5100
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5112
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5154
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5175
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5179
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5191
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5234
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5243
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5251
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5262
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.typeReference().SQLString())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5267
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5277
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5280
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5284
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5287
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5290
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5292
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5323
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5327
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5330
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5345
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = true
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5355
		{

			sqlVAL.union.val = true
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5370
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5384
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5396
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5407
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5445
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5460
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5461
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5471
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5478
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5480
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5482
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5484
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5486
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5488
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = []string(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5524
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5540
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5557
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5572
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5587
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5591
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5595
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.union.val = false
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = true
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.union.val = false
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5626
		{
			sqlVAL.union.val = true
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = false
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5636
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5649
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5671
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5676
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5680
		{
			sqlVAL.union.val = tree.Descending
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5696
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5702
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5710
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5716
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5724
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5730
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5747
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5751
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5752
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5763
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5785
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5800
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5801
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5802
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5821
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5823
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5826
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5839
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5844
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5848
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5853
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5854
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5855
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5865
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5872
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5875
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5876
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5894
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5904
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5917
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5919
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5923
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5936
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5948
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5958
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5988
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.str = ""
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.str = ""
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6012
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.str = ""
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6022
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6026
		{
			sqlVAL.str = ""
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6031
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6032
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6044
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6058
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6076
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6089
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6138
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6155
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6156
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6158
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6164
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6202
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6214
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6234
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6377
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6384
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6419
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6420
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6421
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6526
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6542
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = true
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = false
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Set: false,
				},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Materialize: sqlDollar[4].union.bool(),
					Set:         true,
				},
				Stmt: sqlDollar[6].union.stmt(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6595
		{
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6596
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = nil
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6609
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6610
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = true
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = false
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = false
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = true
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6640
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6670
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6691
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6696
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6716
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6725
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6814
		{
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6818
		{
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6845
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6871
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6873
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6888
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6910
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6915
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6920
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6943
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6962
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7001
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7011
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7057
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7087
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7120
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7122
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = nil
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = true
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = false
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.str = tree.AstFull
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.str = tree.AstRight
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.str = tree.AstInner
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7239
		{
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7240
		{
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.str = tree.AstHash
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.str = ""
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7302
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7325
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7337
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7347
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7376
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.typeReference()
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7389
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7397
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7398
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7416
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7418
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7426
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7439
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7446
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7455
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {

				var ok bool
				var err error
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						aIdx := sqllex.(*lexer).NewAnnotation()
						sqlVAL.union.val, err = tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
						if err != nil {
							return setErr(sqllex, err)
						}
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7502
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7503
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = types.Geography
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7523
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7561
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = nil
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = types.Int2
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = types.Int
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = types.Float4
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = types.Float
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7604
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7612
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7620
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = types.Bool
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = types.Float
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7653
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7659
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7681
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = types.String
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = true
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = false
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = types.Date
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7730
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7738
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7752
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7761
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7769
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7786
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = true
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = false
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = false
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = types.Interval
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7810
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7909
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = nil
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7939
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7999
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8317
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8339
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8363
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8533
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8538
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8564
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8588
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8618
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8629
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8630
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8632
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8654
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {

					var typ tree.ResolvableTypeReference
					var ok bool
					var err error
					var unimp int
					typ, ok, unimp = types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							aIdx := sqllex.(*lexer).NewAnnotation()
							typ, err = name.ToUnresolvedObjectName(aIdx)
							if err != nil {
								return setErr(sqllex, err)
							}
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				aIdx := sqllex.(*lexer).NewAnnotation()
				res, err := name.ToUnresolvedObjectName(aIdx)
				if err != nil {
					return setErr(sqllex, err)
				}
				sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: res, SyntaxMode: tree.CastPrepend}
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8720
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8786
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.CastExplicit}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8810
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8822
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8830
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8840
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8845
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8847
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8854
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8863
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8865
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8872
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8874
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8881
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8886
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8891
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8896
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8901
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8903
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8910
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8911
		{
			return unimplemented(sqllex, "treat")
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8929
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8932
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8937
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8942
		{
			return unimplemented(sqllex, "within group")
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8943
		{
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8951
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8958
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8962
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8978
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8990
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9001
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9021
		{
			sqlVAL.str = ""
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9027
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9031
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9045
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9053
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9061
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9067
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9080
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9112
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9120
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9127
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9136
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9140
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9144
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9148
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9153
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9166
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9177
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9189
		{
			sqlVAL.union.val = tree.Any
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9193
		{
			sqlVAL.union.val = tree.Some
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = tree.All
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9202
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9203
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9204
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9205
		{
			sqlVAL.union.val = tree.Div
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9206
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9207
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9209
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9210
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9211
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = tree.LT
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9213
		{
			sqlVAL.union.val = tree.GT
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9214
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9215
		{
			sqlVAL.union.val = tree.LE
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = tree.GE
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9217
		{
			sqlVAL.union.val = tree.NE
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9221
		{
			sqlVAL.union.val = tree.Like
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9222
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9223
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9224
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9247
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9251
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9257
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9261
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9265
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9276
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9280
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9286
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9290
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9297
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9303
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9307
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9313
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference{sqlDollar[1].union.typeReference()}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.typeReferences(), sqlDollar[3].union.typeReference())
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9323
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9327
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9333
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9343
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9347
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9370
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9374
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9378
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9391
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9395
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9412
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9416
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9420
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9424
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9428
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9434
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9440
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9446
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9450
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9454
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9460
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9472
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9479
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9489
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9495
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9499
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9506
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9512
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9516
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9523
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9529
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9538
		{
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9539
		{
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9543
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9553
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9562
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9566
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9570
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9578
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9588
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9611
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9619
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9651
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9655
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9659
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9663
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9669
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9688
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9692
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9704
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9708
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9717
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9728
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9737
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9745
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9757
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9858
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9865
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9869
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9873
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1781:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9887
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9891
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9895
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9908
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9917
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9935
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9948
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9955
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9980
		{
			sqlVAL.str = ""
		}
	case 1801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9986
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9990
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
