// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*scanner).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9237

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 964,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 800,
	193, 800,
	207, 228,
	279, 228,
	287, 656,
	314, 228,
	323, 656,
	360, 656,
	384, 228,
	407, 656,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 964,
	182, 964,
	393, 964,
	394, 964,
	-2, 0,
	-1, 88,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 925,
	-1, 116,
	123, 580,
	206, 580,
	377, 580,
	-2, 0,
	-1, 117,
	4, 966,
	21, 966,
	22, 966,
	23, 966,
	24, 966,
	25, 966,
	27, 966,
	32, 966,
	37, 966,
	38, 966,
	39, 966,
	40, 966,
	41, 966,
	42, 966,
	43, 966,
	44, 966,
	45, 966,
	46, 966,
	48, 966,
	49, 966,
	50, 966,
	51, 966,
	52, 966,
	53, 966,
	56, 966,
	57, 966,
	58, 966,
	59, 966,
	61, 966,
	62, 966,
	66, 966,
	67, 966,
	68, 966,
	69, 966,
	70, 966,
	72, 966,
	73, 966,
	74, 966,
	75, 966,
	77, 966,
	79, 966,
	80, 966,
	81, 966,
	84, 966,
	85, 966,
	93, 966,
	94, 966,
	95, 966,
	96, 966,
	97, 966,
	98, 966,
	99, 966,
	100, 966,
	102, 966,
	104, 966,
	105, 966,
	107, 966,
	110, 966,
	111, 966,
	112, 966,
	114, 966,
	116, 966,
	117, 966,
	119, 966,
	120, 966,
	121, 966,
	122, 966,
	123, 966,
	124, 966,
	125, 966,
	126, 966,
	127, 966,
	128, 966,
	129, 966,
	131, 966,
	137, 966,
	138, 966,
	139, 966,
	140, 966,
	141, 966,
	142, 966,
	144, 966,
	146, 966,
	150, 966,
	151, 966,
	153, 966,
	154, 966,
	156, 966,
	157, 966,
	159, 966,
	160, 966,
	161, 966,
	162, 966,
	163, 966,
	164, 966,
	165, 966,
	166, 966,
	167, 966,
	168, 966,
	171, 966,
	172, 966,
	176, 966,
	177, 966,
	178, 966,
	179, 966,
	182, 966,
	183, 966,
	184, 966,
	185, 966,
	186, 966,
	187, 966,
	188, 966,
	189, 966,
	191, 966,
	193, 966,
	196, 966,
	197, 966,
	198, 966,
	200, 966,
	201, 966,
	204, 966,
	205, 966,
	206, 966,
	207, 966,
	209, 966,
	210, 966,
	212, 966,
	213, 966,
	215, 966,
	216, 966,
	219, 966,
	220, 966,
	223, 966,
	225, 966,
	226, 966,
	227, 966,
	228, 966,
	229, 966,
	230, 966,
	231, 966,
	232, 966,
	233, 966,
	235, 966,
	236, 966,
	237, 966,
	238, 966,
	240, 966,
	243, 966,
	244, 966,
	245, 966,
	246, 966,
	248, 966,
	249, 966,
	250, 966,
	252, 966,
	253, 966,
	254, 966,
	257, 966,
	258, 966,
	260, 966,
	262, 966,
	263, 966,
	264, 966,
	265, 966,
	266, 966,
	267, 966,
	268, 966,
	269, 966,
	270, 966,
	272, 966,
	273, 966,
	274, 966,
	275, 966,
	276, 966,
	278, 966,
	280, 966,
	281, 966,
	282, 966,
	283, 966,
	284, 966,
	285, 966,
	286, 966,
	287, 966,
	288, 966,
	290, 966,
	291, 966,
	292, 966,
	293, 966,
	294, 966,
	296, 966,
	297, 966,
	298, 966,
	299, 966,
	300, 966,
	301, 966,
	302, 966,
	303, 966,
	305, 966,
	307, 966,
	308, 966,
	309, 966,
	310, 966,
	311, 966,
	312, 966,
	314, 966,
	315, 966,
	316, 966,
	317, 966,
	318, 966,
	319, 966,
	320, 966,
	321, 966,
	323, 966,
	324, 966,
	325, 966,
	326, 966,
	327, 966,
	328, 966,
	329, 966,
	330, 966,
	331, 966,
	332, 966,
	334, 966,
	335, 966,
	336, 966,
	337, 966,
	339, 966,
	340, 966,
	341, 966,
	342, 966,
	344, 966,
	345, 966,
	346, 966,
	347, 966,
	348, 966,
	349, 966,
	350, 966,
	351, 966,
	352, 966,
	353, 966,
	354, 966,
	355, 966,
	357, 966,
	358, 966,
	359, 966,
	361, 966,
	362, 966,
	363, 966,
	364, 966,
	365, 966,
	366, 966,
	367, 966,
	368, 966,
	369, 966,
	371, 966,
	372, 966,
	373, 966,
	374, 966,
	377, 966,
	378, 966,
	379, 966,
	380, 966,
	381, 966,
	383, 966,
	384, 966,
	385, 966,
	387, 966,
	388, 966,
	391, 966,
	392, 966,
	393, 966,
	394, 966,
	395, 966,
	397, 966,
	399, 966,
	400, 966,
	401, 966,
	402, 966,
	403, 966,
	404, 966,
	405, 966,
	407, 966,
	408, 966,
	409, 966,
	414, 966,
	415, 966,
	416, 966,
	417, 966,
	418, 966,
	419, 966,
	-2, 0,
	-1, 118,
	1, 857,
	196, 857,
	278, 857,
	285, 857,
	445, 857,
	446, 857,
	-2, 0,
	-1, 120,
	1, 857,
	445, 857,
	446, 857,
	-2, 0,
	-1, 121,
	1, 857,
	445, 857,
	446, 857,
	-2, 0,
	-1, 122,
	1, 861,
	445, 861,
	446, 861,
	-2, 0,
	-1, 146,
	118, 937,
	132, 937,
	190, 937,
	218, 937,
	247, 937,
	256, 937,
	389, 937,
	-2, 934,
	-1, 176,
	4, 973,
	5, 973,
	6, 973,
	7, 973,
	8, 973,
	9, 973,
	10, 973,
	21, 973,
	22, 973,
	23, 973,
	24, 973,
	25, 973,
	27, 973,
	32, 973,
	33, 973,
	37, 973,
	38, 973,
	39, 973,
	40, 973,
	41, 973,
	42, 973,
	43, 973,
	44, 973,
	45, 973,
	46, 973,
	48, 973,
	49, 973,
	50, 973,
	51, 973,
	52, 973,
	53, 973,
	54, 973,
	55, 973,
	56, 973,
	57, 973,
	58, 973,
	59, 973,
	61, 973,
	62, 973,
	64, 973,
	66, 973,
	67, 973,
	68, 973,
	69, 973,
	70, 973,
	72, 973,
	73, 973,
	74, 973,
	75, 973,
	77, 973,
	79, 973,
	80, 973,
	81, 973,
	83, 973,
	84, 973,
	85, 973,
	86, 973,
	87, 973,
	88, 973,
	89, 973,
	90, 973,
	91, 973,
	92, 973,
	93, 973,
	94, 973,
	95, 973,
	96, 973,
	97, 973,
	98, 973,
	99, 973,
	100, 973,
	101, 973,
	102, 973,
	104, 973,
	105, 973,
	107, 973,
	110, 973,
	111, 973,
	112, 973,
	114, 973,
	116, 973,
	117, 973,
	119, 973,
	120, 973,
	121, 973,
	122, 973,
	123, 973,
	124, 973,
	125, 973,
	126, 973,
	127, 973,
	128, 973,
	129, 973,
	130, 973,
	131, 973,
	137, 973,
	138, 973,
	139, 973,
	140, 973,
	141, 973,
	142, 973,
	144, 973,
	146, 973,
	149, 973,
	150, 973,
	151, 973,
	153, 973,
	154, 973,
	156, 973,
	157, 973,
	159, 973,
	160, 973,
	161, 973,
	162, 973,
	163, 973,
	164, 973,
	165, 973,
	166, 973,
	167, 973,
	168, 973,
	169, 973,
	171, 973,
	172, 973,
	176, 973,
	177, 973,
	178, 973,
	179, 973,
	181, 973,
	182, 973,
	183, 973,
	184, 973,
	185, 973,
	186, 973,
	187, 973,
	188, 973,
	189, 973,
	191, 973,
	193, 973,
	194, 973,
	195, 973,
	196, 973,
	197, 973,
	198, 973,
	199, 973,
	200, 973,
	201, 973,
	204, 973,
	205, 973,
	206, 973,
	207, 973,
	209, 973,
	210, 973,
	212, 973,
	213, 973,
	214, 973,
	215, 973,
	216, 973,
	217, 973,
	219, 973,
	220, 973,
	223, 973,
	225, 973,
	226, 973,
	227, 973,
	228, 973,
	229, 973,
	230, 973,
	231, 973,
	232, 973,
	233, 973,
	234, 973,
	235, 973,
	236, 973,
	237, 973,
	238, 973,
	239, 973,
	240, 973,
	241, 973,
	242, 973,
	243, 973,
	244, 973,
	245, 973,
	246, 973,
	248, 973,
	249, 973,
	250, 973,
	253, 973,
	254, 973,
	257, 973,
	258, 973,
	259, 973,
	260, 973,
	261, 973,
	262, 973,
	263, 973,
	264, 973,
	265, 973,
	266, 973,
	267, 973,
	268, 973,
	269, 973,
	270, 973,
	272, 973,
	273, 973,
	274, 973,
	275, 973,
	276, 973,
	278, 973,
	280, 973,
	281, 973,
	282, 973,
	283, 973,
	284, 973,
	285, 973,
	286, 973,
	287, 973,
	288, 973,
	290, 973,
	291, 973,
	292, 973,
	293, 973,
	294, 973,
	296, 973,
	297, 973,
	298, 973,
	299, 973,
	300, 973,
	301, 973,
	302, 973,
	303, 973,
	305, 973,
	306, 973,
	307, 973,
	308, 973,
	309, 973,
	310, 973,
	311, 973,
	312, 973,
	314, 973,
	315, 973,
	316, 973,
	317, 973,
	318, 973,
	319, 973,
	320, 973,
	321, 973,
	323, 973,
	324, 973,
	325, 973,
	326, 973,
	327, 973,
	328, 973,
	329, 973,
	330, 973,
	331, 973,
	332, 973,
	333, 973,
	334, 973,
	335, 973,
	336, 973,
	337, 973,
	338, 973,
	339, 973,
	340, 973,
	341, 973,
	342, 973,
	344, 973,
	345, 973,
	346, 973,
	347, 973,
	348, 973,
	349, 973,
	350, 973,
	351, 973,
	352, 973,
	353, 973,
	354, 973,
	355, 973,
	357, 973,
	358, 973,
	359, 973,
	361, 973,
	362, 973,
	363, 973,
	364, 973,
	365, 973,
	366, 973,
	367, 973,
	368, 973,
	369, 973,
	371, 973,
	372, 973,
	373, 973,
	374, 973,
	377, 973,
	378, 973,
	379, 973,
	380, 973,
	381, 973,
	382, 973,
	383, 973,
	384, 973,
	385, 973,
	387, 973,
	388, 973,
	390, 973,
	391, 973,
	392, 973,
	393, 973,
	394, 973,
	395, 973,
	396, 973,
	397, 973,
	399, 973,
	400, 973,
	401, 973,
	402, 973,
	403, 973,
	404, 973,
	405, 973,
	407, 973,
	408, 973,
	409, 973,
	414, 973,
	415, 973,
	416, 973,
	417, 973,
	418, 973,
	419, 973,
	420, 973,
	428, 973,
	433, 973,
	434, 973,
	435, 973,
	442, 973,
	448, 973,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 964,
	-1, 537,
	148, 1629,
	375, 1629,
	425, 1629,
	444, 1629,
	-2, 0,
	-1, 538,
	148, 1705,
	375, 1705,
	425, 1705,
	444, 1705,
	-2, 0,
	-1, 539,
	148, 1619,
	375, 1619,
	425, 1619,
	444, 1619,
	-2, 0,
	-1, 541,
	148, 1787,
	375, 1787,
	425, 1787,
	444, 1787,
	-2, 0,
	-1, 543,
	148, 1815,
	375, 1815,
	425, 1815,
	444, 1815,
	-2, 0,
	-1, 550,
	148, 1713,
	375, 1713,
	425, 1713,
	444, 1713,
	-2, 455,
	-1, 567,
	444, 1579,
	447, 1579,
	-2, 625,
	-1, 568,
	444, 1581,
	447, 1581,
	-2, 626,
	-1, 569,
	444, 1580,
	447, 1580,
	-2, 627,
	-1, 570,
	447, 1528,
	-2, 628,
	-1, 714,
	1, 553,
	441, 553,
	443, 553,
	445, 553,
	446, 553,
	-2, 0,
	-1, 715,
	1, 624,
	145, 624,
	441, 624,
	443, 624,
	445, 624,
	446, 624,
	-2, 0,
	-1, 721,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	446, 567,
	-2, 0,
	-1, 723,
	1, 571,
	441, 571,
	443, 571,
	445, 571,
	446, 571,
	-2, 0,
	-1, 725,
	1, 581,
	441, 581,
	443, 581,
	445, 581,
	446, 581,
	-2, 0,
	-1, 726,
	1, 590,
	441, 590,
	443, 590,
	445, 590,
	446, 590,
	-2, 0,
	-1, 727,
	1, 592,
	441, 592,
	443, 592,
	445, 592,
	446, 592,
	-2, 0,
	-1, 731,
	1, 606,
	441, 606,
	443, 606,
	445, 606,
	446, 606,
	-2, 0,
	-1, 732,
	1, 608,
	441, 608,
	443, 608,
	445, 608,
	446, 608,
	-2, 0,
	-1, 775,
	132, 977,
	218, 977,
	247, 977,
	-2, 934,
	-1, 790,
	132, 976,
	218, 976,
	247, 976,
	-2, 934,
	-1, 814,
	444, 1578,
	-2, 463,
	-1, 843,
	442, 1570,
	-2, 1561,
	-1, 849,
	5, 1102,
	-2, 1610,
	-1, 850,
	5, 1103,
	-2, 1614,
	-1, 851,
	5, 1104,
	-2, 1613,
	-1, 852,
	5, 1105,
	-2, 1813,
	-1, 853,
	5, 1106,
	-2, 1715,
	-1, 854,
	5, 1107,
	-2, 1779,
	-1, 855,
	5, 1108,
	-2, 1781,
	-1, 856,
	5, 1109,
	-2, 1792,
	-1, 857,
	5, 1110,
	-2, 1782,
	-1, 858,
	5, 1111,
	-2, 1783,
	-1, 859,
	5, 1112,
	-2, 1609,
	-1, 860,
	5, 1113,
	-2, 1826,
	-1, 861,
	5, 1114,
	-2, 1680,
	-1, 862,
	5, 1115,
	-2, 1722,
	-1, 863,
	5, 1116,
	-2, 1724,
	-1, 864,
	5, 1117,
	-2, 1684,
	-1, 865,
	5, 1118,
	442, 1588,
	-2, 1579,
	-1, 866,
	5, 1174,
	442, 1174,
	-2, 1861,
	-1, 871,
	442, 1589,
	-2, 1580,
	-1, 873,
	5, 1122,
	-2, 1859,
	-1, 874,
	5, 1123,
	-2, 1860,
	-1, 875,
	5, 1124,
	-2, 1683,
	-1, 876,
	5, 1125,
	-2, 1872,
	-1, 877,
	5, 1126,
	-2, 1685,
	-1, 878,
	5, 1127,
	-2, 1686,
	-1, 879,
	5, 1128,
	-2, 1687,
	-1, 880,
	5, 1129,
	-2, 1841,
	-1, 881,
	5, 1130,
	-2, 1870,
	-1, 882,
	5, 1131,
	-2, 1664,
	-1, 883,
	5, 1132,
	-2, 1665,
	-1, 884,
	5, 1146,
	-2, 1853,
	-1, 886,
	5, 1121,
	-2, 1849,
	-1, 887,
	5, 1121,
	-2, 1848,
	-1, 888,
	5, 1121,
	-2, 1865,
	-1, 889,
	5, 1138,
	-2, 1843,
	-1, 890,
	5, 1139,
	-2, 1611,
	-1, 891,
	5, 1149,
	-2, 1842,
	-1, 892,
	5, 1151,
	-2, 1881,
	-1, 894,
	5, 1162,
	-2, 1639,
	-1, 895,
	5, 1173,
	-2, 1874,
	-1, 896,
	5, 1165,
	-2, 1875,
	-1, 897,
	5, 1173,
	-2, 1876,
	-1, 898,
	5, 1169,
	-2, 1877,
	-1, 899,
	5, 1089,
	-2, 1693,
	-1, 900,
	5, 1090,
	-2, 1694,
	-1, 901,
	444, 1576,
	-2, 1560,
	-1, 902,
	442, 1901,
	-2, 1577,
	-1, 922,
	5, 1157,
	-2, 1802,
	-1, 939,
	5, 1156,
	-2, 1882,
	-1, 949,
	5, 1158,
	408, 1158,
	-2, 1844,
	-1, 950,
	5, 1159,
	408, 1159,
	-2, 1845,
	-1, 986,
	442, 1588,
	-2, 1579,
	-1, 1015,
	148, 1815,
	375, 1815,
	425, 1815,
	444, 1815,
	-2, 0,
	-1, 1016,
	196, 869,
	278, 869,
	285, 869,
	-2, 443,
	-1, 1134,
	296, 1558,
	435, 1558,
	-2, 1557,
	-1, 1190,
	287, 656,
	407, 656,
	-2, 227,
	-1, 1210,
	268, 962,
	-2, 773,
	-1, 1219,
	251, 1583,
	-2, 0,
	-1, 1283,
	1, 334,
	441, 334,
	443, 334,
	445, 334,
	446, 334,
	-2, 936,
	-1, 1286,
	4, 1880,
	11, 1880,
	12, 1880,
	14, 1880,
	15, 1880,
	16, 1880,
	17, 1880,
	18, 1880,
	19, 1880,
	21, 1880,
	22, 1880,
	23, 1880,
	24, 1880,
	25, 1880,
	27, 1880,
	30, 1880,
	32, 1880,
	34, 1880,
	37, 1880,
	38, 1880,
	39, 1880,
	40, 1880,
	41, 1880,
	42, 1880,
	43, 1880,
	44, 1880,
	45, 1880,
	46, 1880,
	48, 1880,
	49, 1880,
	50, 1880,
	51, 1880,
	52, 1880,
	53, 1880,
	56, 1880,
	57, 1880,
	58, 1880,
	59, 1880,
	61, 1880,
	62, 1880,
	63, 1880,
	66, 1880,
	67, 1880,
	68, 1880,
	69, 1880,
	70, 1880,
	71, 1880,
	72, 1880,
	73, 1880,
	74, 1880,
	75, 1880,
	77, 1880,
	78, 1880,
	79, 1880,
	80, 1880,
	81, 1880,
	83, 1880,
	84, 1880,
	85, 1880,
	93, 1880,
	94, 1880,
	95, 1880,
	96, 1880,
	97, 1880,
	98, 1880,
	99, 1880,
	100, 1880,
	102, 1880,
	104, 1880,
	105, 1880,
	107, 1880,
	110, 1880,
	111, 1880,
	112, 1880,
	114, 1880,
	116, 1880,
	117, 1880,
	119, 1880,
	120, 1880,
	121, 1880,
	122, 1880,
	123, 1880,
	124, 1880,
	125, 1880,
	126, 1880,
	127, 1880,
	128, 1880,
	129, 1880,
	133, 1880,
	134, 1880,
	135, 1880,
	136, 1880,
	137, 1880,
	138, 1880,
	139, 1880,
	140, 1880,
	141, 1880,
	142, 1880,
	143, 1880,
	144, 1880,
	146, 1880,
	149, 1880,
	150, 1880,
	151, 1880,
	153, 1880,
	154, 1880,
	156, 1880,
	157, 1880,
	159, 1880,
	160, 1880,
	161, 1880,
	162, 1880,
	163, 1880,
	164, 1880,
	165, 1880,
	166, 1880,
	167, 1880,
	168, 1880,
	169, 1880,
	170, 1880,
	171, 1880,
	172, 1880,
	173, 1880,
	174, 1880,
	175, 1880,
	177, 1880,
	178, 1880,
	179, 1880,
	181, 1880,
	182, 1880,
	183, 1880,
	184, 1880,
	185, 1880,
	186, 1880,
	187, 1880,
	188, 1880,
	189, 1880,
	191, 1880,
	193, 1880,
	194, 1880,
	195, 1880,
	196, 1880,
	197, 1880,
	198, 1880,
	199, 1880,
	200, 1880,
	201, 1880,
	202, 1880,
	203, 1880,
	204, 1880,
	205, 1880,
	206, 1880,
	207, 1880,
	209, 1880,
	210, 1880,
	212, 1880,
	213, 1880,
	214, 1880,
	215, 1880,
	216, 1880,
	217, 1880,
	219, 1880,
	220, 1880,
	223, 1880,
	224, 1880,
	225, 1880,
	226, 1880,
	227, 1880,
	228, 1880,
	229, 1880,
	230, 1880,
	231, 1880,
	232, 1880,
	233, 1880,
	234, 1880,
	235, 1880,
	236, 1880,
	237, 1880,
	238, 1880,
	241, 1880,
	243, 1880,
	244, 1880,
	245, 1880,
	246, 1880,
	248, 1880,
	249, 1880,
	250, 1880,
	253, 1880,
	254, 1880,
	255, 1880,
	257, 1880,
	258, 1880,
	260, 1880,
	262, 1880,
	263, 1880,
	264, 1880,
	265, 1880,
	266, 1880,
	267, 1880,
	268, 1880,
	269, 1880,
	270, 1880,
	272, 1880,
	273, 1880,
	274, 1880,
	275, 1880,
	276, 1880,
	278, 1880,
	280, 1880,
	281, 1880,
	282, 1880,
	283, 1880,
	284, 1880,
	285, 1880,
	286, 1880,
	287, 1880,
	288, 1880,
	290, 1880,
	291, 1880,
	292, 1880,
	293, 1880,
	294, 1880,
	295, 1880,
	296, 1880,
	297, 1880,
	298, 1880,
	299, 1880,
	300, 1880,
	301, 1880,
	302, 1880,
	303, 1880,
	305, 1880,
	306, 1880,
	307, 1880,
	308, 1880,
	309, 1880,
	310, 1880,
	311, 1880,
	312, 1880,
	313, 1880,
	314, 1880,
	315, 1880,
	316, 1880,
	317, 1880,
	318, 1880,
	319, 1880,
	320, 1880,
	321, 1880,
	323, 1880,
	324, 1880,
	325, 1880,
	326, 1880,
	327, 1880,
	328, 1880,
	329, 1880,
	330, 1880,
	331, 1880,
	332, 1880,
	334, 1880,
	335, 1880,
	336, 1880,
	337, 1880,
	338, 1880,
	339, 1880,
	340, 1880,
	341, 1880,
	342, 1880,
	344, 1880,
	345, 1880,
	346, 1880,
	347, 1880,
	348, 1880,
	349, 1880,
	350, 1880,
	351, 1880,
	352, 1880,
	353, 1880,
	354, 1880,
	355, 1880,
	357, 1880,
	358, 1880,
	359, 1880,
	361, 1880,
	362, 1880,
	363, 1880,
	364, 1880,
	365, 1880,
	366, 1880,
	367, 1880,
	368, 1880,
	369, 1880,
	371, 1880,
	372, 1880,
	373, 1880,
	374, 1880,
	377, 1880,
	378, 1880,
	379, 1880,
	380, 1880,
	381, 1880,
	383, 1880,
	384, 1880,
	385, 1880,
	387, 1880,
	388, 1880,
	391, 1880,
	392, 1880,
	393, 1880,
	394, 1880,
	395, 1880,
	397, 1880,
	399, 1880,
	400, 1880,
	401, 1880,
	402, 1880,
	403, 1880,
	404, 1880,
	405, 1880,
	407, 1880,
	408, 1880,
	409, 1880,
	414, 1880,
	415, 1880,
	416, 1880,
	417, 1880,
	418, 1880,
	419, 1880,
	420, 1880,
	421, 1880,
	423, 1880,
	424, 1880,
	425, 1880,
	426, 1880,
	427, 1880,
	428, 1880,
	430, 1880,
	431, 1880,
	432, 1880,
	433, 1880,
	434, 1880,
	435, 1880,
	436, 1880,
	437, 1880,
	438, 1880,
	440, 1880,
	443, 1880,
	444, 1880,
	447, 1880,
	448, 1880,
	-2, 0,
	-1, 1289,
	148, 1787,
	375, 1787,
	425, 1787,
	444, 1787,
	-2, 0,
	-1, 1358,
	1, 1833,
	441, 1833,
	443, 1833,
	444, 1833,
	445, 1833,
	446, 1833,
	-2, 604,
	-1, 1359,
	1, 1785,
	441, 1785,
	443, 1785,
	444, 1785,
	445, 1785,
	446, 1785,
	-2, 605,
	-1, 1372,
	196, 869,
	278, 869,
	285, 869,
	-2, 864,
	-1, 1377,
	132, 976,
	218, 976,
	247, 976,
	-2, 934,
	-1, 1470,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 1330,
	-1, 1523,
	443, 1463,
	-2, 0,
	-1, 1558,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 1046,
	-1, 1611,
	442, 1161,
	-2, 1149,
	-1, 1650,
	196, 869,
	278, 869,
	285, 869,
	-2, 445,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1210,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1211,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1212,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1213,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1214,
	-1, 1906,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1907,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1908,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1229,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1230,
	-1, 1922,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1231,
	-1, 1925,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1931,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 1933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1248,
	-1, 1934,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1249,
	-1, 1935,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1250,
	-1, 1936,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1251,
	-1, 2029,
	5, 1118,
	148, 1474,
	442, 1588,
	-2, 1579,
	-1, 2030,
	148, 1475,
	-2, 1837,
	-1, 2031,
	148, 1476,
	-2, 1712,
	-1, 2032,
	148, 1477,
	-2, 1640,
	-1, 2033,
	148, 1478,
	-2, 1674,
	-1, 2034,
	148, 1479,
	-2, 1710,
	-1, 2035,
	148, 1480,
	-2, 1778,
	-1, 2103,
	1, 1047,
	83, 1047,
	118, 1047,
	132, 1047,
	145, 1047,
	149, 1047,
	155, 1047,
	158, 1047,
	181, 1047,
	190, 1047,
	199, 1047,
	214, 1047,
	218, 1047,
	234, 1047,
	247, 1047,
	251, 1047,
	256, 1047,
	304, 1047,
	306, 1047,
	389, 1047,
	398, 1047,
	411, 1047,
	412, 1047,
	413, 1047,
	422, 1047,
	441, 1047,
	443, 1047,
	445, 1047,
	446, 1047,
	447, 1047,
	-2, 1046,
	-1, 2108,
	442, 1562,
	-2, 1574,
	-1, 2127,
	442, 1160,
	-2, 1150,
	-1, 2339,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 2340,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 2346,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 2522,
	196, 869,
	278, 869,
	285, 869,
	-2, 442,
	-1, 2593,
	443, 1533,
	447, 1533,
	-2, 1549,
	-1, 2607,
	268, 962,
	-2, 773,
	-1, 2684,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1246,
	-1, 2691,
	194, 0,
	195, 0,
	241, 0,
	-2, 1265,
	-1, 2754,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1294,
	-1, 2755,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1295,
	-1, 2756,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2760,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1300,
	-1, 2761,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1301,
	-1, 2762,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1302,
	-1, 2804,
	442, 1563,
	-2, 1575,
	-1, 2884,
	444, 1983,
	-2, 911,
	-1, 2926,
	194, 0,
	195, 0,
	241, 0,
	-2, 1266,
	-1, 2929,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1269,
	-1, 2930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1271,
	-1, 3072,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1270,
	-1, 3073,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1272,
	-1, 3083,
	194, 0,
	-2, 1303,
	-1, 3173,
	194, 0,
	-2, 1304,
	-1, 3279,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1840,
}

const sqlPrivate = 57344

const sqlLast = 67674

var sqlAct = [...]int{

	871, 3111, 3252, 3136, 3359, 3288, 3027, 3114, 3349, 3278,
	2252, 3251, 2594, 3238, 3254, 3289, 3100, 3290, 2822, 1815,
	2060, 3139, 2722, 3277, 2261, 3177, 2253, 988, 3041, 1888,
	800, 2875, 1275, 2870, 3064, 2367, 791, 2095, 2985, 1581,
	209, 1948, 209, 209, 2616, 2880, 209, 209, 209, 209,
	209, 2530, 2591, 209, 2823, 3087, 548, 1385, 1138, 2332,
	2293, 569, 2365, 2499, 2249, 1553, 2618, 1468, 2629, 2226,
	2624, 2229, 2488, 1582, 1039, 1343, 1773, 2961, 2448, 209,
	1551, 979, 1794, 569, 2284, 665, 2286, 1776, 201, 2464,
	2292, 33, 1532, 2262, 1766, 1765, 1702, 2209, 2157, 1693,
	2091, 2475, 2777, 1478, 3178, 2096, 2447, 2155, 1885, 1496,
	1131, 1278, 1961, 1979, 799, 139, 5, 1881, 2328, 1271,
	1720, 1150, 1681, 1726, 2628, 1147, 2227, 2098, 1679, 867,
	1372, 2148, 3137, 2504, 1027, 1533, 1991, 1945, 2210, 2187,
	788, 2592, 1140, 1284, 1258, 1268, 2255, 87, 1762, 1204,
	2296, 1018, 1973, 1570, 974, 2083, 2094, 570, 2186, 571,
	516, 1491, 1542, 971, 953, 2025, 1962, 2068, 532, 500,
	1459, 209, 209, 146, 524, 2057, 203, 202, 1282, 1386,
	1384, 1782, 1234, 790, 565, 147, 542, 641, 1158, 610,
	1692, 827, 139, 519, 660, 976, 951, 1371, 1216, 706,
	1390, 2793, 2363, 1796, 2794, 1816, 1796, 3387, 527, 1796,
	2254, 2077, 828, 3378, 2211, 1552, 2211, 2077, 3377, 1398,
	1399, 3358, 2077, 3345, 3343, 1733, 3309, 2999, 2999, 3308,
	2077, 3305, 3302, 2077, 795, 3306, 3303, 574, 577, 1808,
	3299, 2780, 2636, 3275, 1733, 1401, 2635, 1733, 3274, 1179,
	3271, 3270, 1733, 3233, 1808, 1808, 2520, 2120, 3224, 574,
	577, 3223, 2999, 2077, 3217, 2999, 3211, 674, 1733, 795,
	2999, 1400, 2679, 2420, 2421, 3209, 2438, 2439, 2440, 2999,
	3175, 3161, 3158, 3128, 2120, 1733, 2999, 1733, 2070, 3127,
	1729, 3120, 2924, 1733, 139, 1733, 796, 3119, 954, 954,
	3093, 2999, 3074, 3055, 1733, 843, 2120, 2648, 3023, 1005,
	3017, 2998, 2077, 776, 2077, 2999, 2928, 2894, 2886, 2799,
	2120, 2887, 2887, 2800, 2789, 775, 2783, 2715, 2790, 2382,
	2077, 1733, 2655, 2435, 2461, 2383, 2656, 2459, 2077, 1561,
	2458, 2077, 2412, 2395, 2077, 783, 2077, 2396, 2384, 2282,
	2133, 1406, 2077, 1812, 2077, 2119, 2117, 2114, 2110, 2120,
	2076, 2077, 1733, 1811, 2077, 1000, 3234, 1812, 955, 1398,
	1399, 957, 3162, 958, 1808, 2780, 2069, 3018, 1733, 2656,
	2201, 1428, 1429, 1430, 2146, 1653, 2648, 2236, 176, 2331,
	1733, 870, 1732, 2144, 1528, 1401, 1157, 179, 2637, 1345,
	2204, 959, 956, 782, 176, 2426, 781, 2420, 2421, 780,
	779, 778, 774, 1178, 773, 772, 771, 2638, 1770, 770,
	769, 1400, 768, 2016, 767, 2077, 178, 766, 765, 764,
	2313, 2976, 1421, 763, 704, 2420, 2421, 1001, 2438, 2439,
	2440, 703, 178, 702, 701, 700, 1398, 1399, 699, 698,
	697, 696, 1797, 695, 2923, 1797, 2441, 694, 1797, 693,
	2366, 692, 691, 690, 689, 688, 687, 686, 685, 177,
	1398, 1399, 1401, 1431, 1432, 1433, 1441, 1442, 1443, 170,
	684, 683, 682, 681, 985, 177, 2436, 171, 1672, 680,
	673, 672, 632, 1398, 1399, 2435, 1401, 631, 1400, 1447,
	590, 1406, 589, 588, 580, 209, 579, 893, 148, 578,
	176, 1469, 555, 554, 209, 2420, 2421, 553, 968, 1401,
	552, 1422, 1400, 536, 148, 199, 198, 2014, 197, 196,
	1420, 1428, 1429, 1430, 195, 209, 194, 1417, 193, 2426,
	192, 2635, 209, 191, 190, 1400, 189, 188, 178, 187,
	186, 185, 184, 3295, 183, 1001, 182, 181, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 180, 2426, 2940, 176,
	982, 2888, 2797, 209, 209, 2437, 2502, 1026, 1406, 2389,
	2378, 1031, 1421, 2214, 2242, 2111, 2102, 2069, 1554, 1677,
	1568, 177, 1423, 1424, 1425, 1426, 2012, 1804, 209, 998,
	1795, 170, 1406, 1861, 2420, 2421, 1818, 178, 1001, 171,
	1397, 2010, 209, 1485, 1143, 1143, 209, 209, 2441, 209,
	2436, 2420, 2421, 2008, 1163, 1406, 1480, 1033, 1438, 1448,
	148, 209, 1428, 1429, 1430, 990, 3276, 3207, 3168, 209,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 2426, 2436, 1134,
	177, 3110, 3165, 209, 209, 209, 209, 209, 1143, 1143,
	170, 1415, 1416, 1143, 2435, 209, 1143, 209, 171, 3056,
	3163, 1422, 1817, 1136, 1016, 1166, 1436, 1171, 1173, 1177,
	2978, 2960, 2959, 1421, 1153, 2432, 2433, 2434, 2947, 148,
	3049, 1279, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427,
	2428, 2946, 1499, 2945, 1217, 1217, 2944, 2938, 1498, 2437,
	2937, 1143, 1976, 1398, 1399, 1040, 1499, 2936, 2935, 2859,
	1151, 1035, 1498, 1128, 1133, 1210, 1213, 1161, 1013, 1502,
	1160, 209, 1159, 2812, 2811, 2809, 2426, 2437, 2803, 1401,
	2774, 2773, 2772, 1497, 1221, 209, 2699, 2695, 2497, 574,
	577, 2243, 2659, 2426, 1427, 1481, 2455, 1479, 967, 2446,
	209, 2419, 1294, 2416, 2415, 1400, 2413, 2402, 2401, 1297,
	2400, 2397, 1422, 1420, 2394, 1977, 2372, 1291, 139, 2371,
	1287, 2364, 1272, 2283, 2103, 1984, 1397, 1396, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 1439, 1262, 1265,
	3180, 1398, 1399, 1738, 1467, 1285, 3385, 3357, 1736, 3356,
	796, 1377, 1378, 1480, 3310, 1218, 989, 2436, 2724, 2922,
	3266, 3264, 1308, 3202, 3200, 3197, 1771, 1401, 2430, 2422,
	2423, 2424, 2425, 2427, 2428, 1423, 1424, 1425, 1426, 3196,
	2420, 2421, 1172, 1978, 1975, 1406, 3192, 2432, 2433, 2434,
	3186, 3157, 3156, 1400, 2431, 2429, 2430, 2422, 2423, 2424,
	2425, 2427, 2428, 3035, 2015, 1951, 2514, 3106, 1402, 1403,
	1404, 1405, 1407, 1408, 3085, 1428, 1429, 1430, 3061, 1437,
	3060, 3048, 1412, 1413, 1419, 1418, 1414, 1440, 3039, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 3036, 3031,
	2975, 2122, 2958, 2908, 2905, 2838, 2437, 1301, 1370, 2837,
	2241, 2826, 2825, 1673, 2188, 2785, 1376, 1404, 1405, 1407,
	1408, 2690, 2327, 2649, 1481, 2610, 1421, 2580, 1375, 2561,
	2540, 1383, 2539, 1406, 2258, 1980, 2516, 2422, 2423, 2424,
	2425, 2427, 2428, 2460, 1957, 2211, 2481, 2393, 1373, 1167,
	2392, 2377, 2355, 209, 2223, 1503, 1500, 1492, 1489, 2129,
	1398, 1399, 2128, 1428, 1429, 1430, 1819, 826, 2013, 2106,
	2420, 2421, 2426, 776, 2088, 2075, 2006, 1463, 1567, 209,
	1531, 1527, 1530, 796, 1379, 775, 1401, 1539, 1526, 1525,
	209, 1042, 209, 209, 1393, 1394, 1524, 1427, 176, 1143,
	569, 209, 209, 1523, 1522, 569, 209, 1501, 1521, 1520,
	1519, 209, 1400, 1517, 1421, 1422, 1575, 1516, 2540, 1515,
	1514, 1513, 1512, 2431, 2429, 2430, 2422, 2423, 2424, 2425,
	2427, 2428, 1974, 1648, 1042, 2512, 178, 2011, 1549, 1511,
	1510, 1509, 1562, 1508, 1507, 2424, 2425, 2427, 2428, 1493,
	1494, 1460, 2009, 2436, 1536, 1537, 2125, 1506, 1675, 1505,
	1482, 1464, 1462, 2977, 2007, 1457, 1012, 1647, 3166, 2420,
	2421, 1003, 2438, 2439, 2440, 995, 2932, 2808, 2792, 177,
	954, 2788, 2381, 2089, 1672, 139, 3164, 1550, 2694, 170,
	1563, 3109, 2420, 2421, 2564, 1672, 2174, 171, 1030, 3201,
	2619, 1672, 2426, 1422, 3054, 3019, 2795, 2651, 2420, 2421,
	1576, 2650, 1554, 1499, 2399, 2398, 1663, 1662, 148, 1498,
	1672, 1669, 1573, 796, 2190, 2337, 1512, 2043, 2176, 2435,
	1559, 1512, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1368, 2437, 1025, 1659, 2836, 1650, 1571, 1029, 1529,
	1028, 1487, 1816, 761, 1578, 176, 1697, 1143, 209, 1645,
	2596, 3140, 2595, 1345, 1042, 1671, 1316, 1767, 1687, 1556,
	2665, 2575, 1715, 3088, 3360, 2254, 574, 577, 2726, 3296,
	2387, 574, 577, 2436, 1577, 2127, 1992, 1518, 1495, 1644,
	1678, 762, 1344, 178, 2589, 1579, 1758, 3307, 966, 1194,
	3304, 2426, 2818, 209, 209, 810, 176, 2631, 3248, 2871,
	209, 2290, 3333, 1666, 1192, 3009, 1588, 1664, 1182, 798,
	209, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 209,
	1305, 209, 2524, 209, 3334, 3297, 177, 209, 1668, 2134,
	2426, 1466, 757, 2159, 178, 3382, 170, 1717, 755, 209,
	1719, 3216, 2441, 1723, 171, 753, 751, 748, 1701, 2431,
	2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428, 1730, 176,
	1850, 1848, 2437, 3134, 1976, 2257, 3131, 2150, 3130, 985,
	3129, 985, 2436, 2150, 1193, 2852, 1727, 177, 2841, 1143,
	209, 1143, 1757, 627, 2149, 1340, 1143, 170, 1574, 2513,
	209, 209, 2849, 1614, 2848, 171, 2815, 178, 2123, 1660,
	1143, 1143, 2814, 209, 1754, 1160, 1779, 1159, 1788, 209,
	1734, 2436, 3026, 2376, 569, 209, 148, 209, 1820, 209,
	2162, 209, 1667, 209, 574, 577, 2375, 1977, 1342, 2374,
	2373, 2341, 2206, 209, 1722, 1799, 1731, 209, 1801, 2200,
	177, 1803, 2197, 2178, 2116, 1806, 209, 1682, 1932, 1374,
	170, 1683, 1030, 59, 1786, 982, 1156, 982, 171, 1829,
	628, 2437, 2002, 1303, 60, 209, 2001, 1030, 1339, 1748,
	1747, 209, 2250, 1746, 622, 2563, 1890, 1408, 64, 148,
	2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428, 1694, 1858,
	1246, 1042, 1814, 1188, 3215, 1978, 1975, 1227, 3069, 1226,
	2437, 1781, 1029, 1225, 1784, 1224, 993, 745, 70, 2666,
	869, 1827, 1828, 2177, 1859, 1821, 1691, 1029, 1825, 2855,
	2137, 1285, 2109, 1947, 1205, 1947, 796, 1865, 3116, 1541,
	3005, 2169, 2139, 1381, 1868, 3268, 1684, 2168, 76, 1695,
	1696, 794, 1860, 621, 1955, 1832, 1785, 86, 1686, 1953,
	2161, 77, 825, 1298, 2668, 2828, 1353, 1813, 2667, 2310,
	1203, 3352, 1886, 1887, 2140, 1980, 1013, 1992, 789, 992,
	2709, 2432, 2433, 2434, 1963, 1964, 1042, 2138, 2431, 2429,
	2430, 2422, 2423, 2424, 2425, 2427, 2428, 1980, 679, 78,
	574, 577, 1963, 1989, 3325, 1545, 2194, 1202, 1839, 1673,
	2188, 1613, 1688, 1011, 794, 2626, 2706, 1563, 1863, 2428,
	1673, 2188, 3333, 793, 1317, 1866, 1673, 2188, 1190, 209,
	2422, 2423, 2424, 2425, 2427, 2428, 1697, 1548, 2024, 176,
	2028, 2028, 2041, 1862, 1963, 1673, 1670, 2061, 2063, 1338,
	3292, 2523, 2067, 1042, 209, 1543, 1299, 1889, 1367, 1864,
	1999, 2329, 2330, 209, 776, 1867, 209, 776, 776, 1042,
	1546, 2572, 1980, 2160, 3372, 804, 1877, 178, 3003, 1878,
	1879, 630, 629, 1857, 2707, 1988, 793, 2839, 2107, 795,
	1544, 2627, 556, 2147, 1974, 620, 2115, 619, 1335, 981,
	2104, 1689, 3193, 1345, 2567, 79, 1714, 2477, 1699, 1313,
	796, 1588, 1588, 1943, 1796, 759, 1205, 2090, 758, 1490,
	177, 2100, 2101, 796, 749, 623, 1304, 796, 2352, 1959,
	170, 749, 750, 749, 1689, 1941, 145, 82, 171, 83,
	2552, 983, 1993, 2525, 2626, 1849, 1847, 209, 1986, 1336,
	2350, 1703, 795, 512, 3350, 659, 954, 2850, 176, 148,
	1350, 2238, 1547, 2583, 2316, 1689, 1245, 3293, 1707, 1187,
	664, 2198, 736, 116, 2914, 3079, 1980, 507, 1042, 2551,
	1456, 1651, 3204, 209, 1017, 562, 2036, 2829, 2084, 3324,
	2052, 209, 3004, 2065, 787, 139, 178, 2118, 2391, 2099,
	795, 209, 2085, 2086, 2073, 2074, 3231, 2081, 796, 1983,
	1704, 3117, 2909, 2806, 209, 1559, 1006, 1143, 2916, 117,
	3351, 1929, 792, 3291, 1697, 2108, 3332, 3330, 1322, 209,
	1042, 149, 3146, 209, 209, 1685, 1937, 3038, 3066, 177,
	3294, 2124, 1351, 2151, 1938, 2319, 1501, 1939, 2614, 170,
	1944, 2347, 3353, 2343, 2476, 1946, 2861, 171, 1718, 209,
	2245, 209, 2348, 737, 209, 2353, 564, 1760, 2996, 1538,
	1004, 1954, 1389, 999, 991, 746, 1380, 2181, 148, 209,
	2224, 1708, 2132, 1682, 2173, 792, 209, 1683, 209, 1831,
	209, 1493, 1494, 1682, 2993, 499, 209, 1683, 2180, 209,
	2915, 209, 1134, 209, 2135, 209, 209, 2131, 209, 1143,
	1143, 1143, 1352, 1143, 2203, 2163, 2165, 209, 209, 3323,
	209, 1300, 2586, 3373, 2195, 1698, 209, 2505, 2199, 2216,
	2208, 2218, 3229, 2154, 2145, 2994, 2318, 209, 3065, 209,
	2302, 3367, 2278, 2279, 1709, 1710, 1010, 3122, 2207, 985,
	1927, 1930, 2315, 1705, 2171, 2247, 2956, 558, 209, 209,
	209, 3230, 209, 1797, 2179, 3121, 985, 2189, 2191, 2192,
	2193, 1541, 1684, 563, 2256, 1022, 2256, 2196, 1022, 3104,
	1706, 3183, 1684, 2080, 1686, 209, 2817, 1940, 1314, 3205,
	1160, 2615, 2212, 2265, 1686, 1388, 1942, 2221, 1926, 2763,
	2536, 738, 2349, 2289, 2554, 2532, 1613, 1613, 2246, 574,
	577, 2351, 2237, 560, 2233, 2267, 1588, 1689, 1022, 2304,
	2277, 2305, 2228, 508, 2274, 2556, 139, 2314, 2280, 2317,
	1545, 2260, 3067, 2276, 2225, 982, 1456, 1545, 1688, 1315,
	1780, 1769, 1312, 2271, 1768, 2272, 1725, 2273, 1688, 1742,
	557, 2275, 982, 2705, 1873, 1285, 2281, 1023, 2489, 2303,
	1023, 2291, 1548, 1711, 1024, 1658, 1724, 1024, 2555, 1548,
	2182, 1585, 2344, 2989, 3239, 509, 2990, 1323, 2321, 1388,
	2082, 1387, 3366, 1854, 209, 1654, 561, 1543, 2369, 2370,
	2308, 3008, 2309, 2957, 1721, 1546, 2876, 559, 3007, 3042,
	1023, 739, 1546, 2379, 1302, 2324, 736, 1024, 2222, 1248,
	1389, 2992, 2326, 510, 785, 511, 736, 1695, 1696, 1928,
	3105, 2542, 1544, 2995, 2541, 2323, 1712, 1689, 787, 1656,
	2764, 3206, 2335, 1826, 2478, 2079, 2765, 1689, 787, 740,
	2078, 1472, 2113, 2112, 1657, 1477, 1219, 678, 1233, 2490,
	1874, 2235, 793, 671, 1231, 3112, 2558, 2660, 3188, 3028,
	1778, 514, 3337, 1220, 2506, 1387, 1680, 2342, 3138, 2585,
	2962, 3102, 1042, 786, 2778, 3, 1997, 3242, 3339, 2462,
	2457, 1365, 3189, 3084, 2469, 2470, 2955, 1547, 209, 2854,
	2449, 209, 2689, 2508, 1547, 2414, 2471, 737, 209, 796,
	2450, 209, 209, 1042, 2183, 2184, 3103, 737, 2354, 2232,
	2205, 2175, 1042, 2130, 1569, 1347, 1333, 209, 1566, 1366,
	1295, 789, 2312, 1996, 2991, 2311, 2492, 2386, 2485, 1331,
	1329, 209, 3113, 2307, 901, 3243, 3006, 2380, 2493, 2494,
	3190, 1327, 1846, 1856, 1836, 1646, 1325, 1319, 209, 209,
	209, 1229, 1504, 1209, 209, 2484, 2483, 209, 3287, 747,
	2486, 1685, 3236, 2521, 209, 209, 209, 209, 209, 2496,
	2501, 1685, 2982, 2874, 205, 2526, 502, 503, 209, 209,
	520, 502, 520, 530, 535, 2834, 209, 551, 2500, 2832,
	2816, 2613, 2598, 2480, 2511, 205, 2517, 2518, 209, 1143,
	2597, 209, 2251, 2240, 2239, 2463, 2219, 1042, 2538, 1810,
	1809, 1613, 1807, 668, 2533, 1042, 2544, 205, 2548, 2549,
	209, 581, 1805, 209, 209, 2491, 1802, 1364, 2468, 2537,
	2452, 2453, 2454, 209, 1800, 738, 1143, 209, 1232, 1143,
	1143, 1143, 676, 677, 1230, 738, 209, 2507, 669, 670,
	2566, 513, 209, 1798, 2603, 987, 2529, 2599, 209, 2495,
	209, 1346, 1332, 2717, 2559, 2522, 2560, 209, 2503, 2527,
	2509, 2543, 1789, 2546, 1739, 1330, 1328, 1737, 1728, 1687,
	752, 754, 1716, 1713, 2519, 1845, 1757, 1326, 2622, 2621,
	1143, 1143, 1324, 1318, 2578, 1700, 2579, 1228, 209, 209,
	2557, 1690, 209, 2647, 1687, 502, 502, 2581, 2573, 2617,
	2574, 2562, 3150, 205, 209, 2568, 1042, 209, 209, 1042,
	209, 1391, 2571, 2663, 2180, 2577, 2576, 2333, 2582, 3334,
	3260, 2633, 3058, 1588, 1727, 739, 209, 963, 3057, 1676,
	1727, 1184, 3152, 784, 2167, 739, 2150, 2604, 2885, 2569,
	2606, 2607, 2608, 2570, 2641, 2642, 2643, 2166, 2644, 2645,
	1697, 964, 1362, 1363, 1833, 2630, 1585, 1585, 1588, 2150,
	1852, 2503, 3195, 740, 2630, 2658, 985, 2620, 3170, 1042,
	2164, 2963, 2185, 740, 985, 985, 2170, 2632, 985, 2662,
	1042, 2639, 209, 2673, 981, 2692, 981, 139, 2334, 2646,
	1395, 2653, 2654, 1392, 515, 796, 1398, 1399, 1398, 1399,
	2466, 2202, 985, 2172, 3235, 3208, 582, 583, 2473, 2474,
	2865, 2860, 2479, 2802, 2259, 2066, 1649, 1580, 3348, 2727,
	2510, 2701, 2702, 2703, 1401, 3365, 983, 2670, 983, 2674,
	2420, 2421, 2671, 965, 2675, 1398, 1399, 2142, 2141, 2677,
	1307, 1469, 526, 2807, 2712, 2142, 1306, 2515, 1400, 2143,
	1400, 2005, 982, 2004, 2728, 2003, 2000, 1998, 1971, 2933,
	982, 982, 1151, 2704, 982, 1040, 2697, 2775, 1886, 2733,
	1349, 1467, 1465, 1348, 3374, 209, 3096, 2716, 2708, 2710,
	2711, 1574, 3052, 3030, 1886, 2743, 2723, 209, 982, 2904,
	585, 584, 2893, 1042, 2869, 2858, 2857, 2729, 2856, 2831,
	2640, 2730, 2611, 2732, 2609, 2269, 2244, 2220, 1958, 2796,
	1792, 209, 2791, 1791, 2740, 2771, 2767, 1790, 1772, 2742,
	1750, 1749, 1745, 1744, 1743, 2714, 1741, 1740, 1382, 1361,
	1360, 1341, 1337, 1334, 1320, 1257, 2720, 1256, 1255, 1254,
	586, 587, 1253, 1252, 1251, 2768, 1250, 1249, 1247, 1242,
	1241, 1240, 2779, 1239, 209, 1238, 1201, 1200, 1588, 1199,
	1198, 1197, 2781, 2782, 1196, 139, 2784, 2776, 1195, 1189,
	1183, 1181, 2842, 1180, 2810, 1009, 1008, 938, 848, 1652,
	760, 614, 744, 3115, 1355, 75, 1191, 209, 209, 209,
	2805, 2851, 2798, 601, 2853, 69, 2830, 3247, 734, 2550,
	1835, 1321, 1761, 1837, 1042, 209, 2482, 1588, 1588, 1143,
	2846, 2087, 3228, 2941, 2390, 3176, 3078, 1995, 1613, 2833,
	1486, 2835, 71, 1588, 1588, 836, 209, 2820, 921, 996,
	2983, 2819, 2295, 2294, 803, 2889, 1045, 1661, 668, 209,
	209, 1143, 1143, 1143, 842, 209, 209, 209, 1674, 2804,
	209, 209, 1956, 1613, 1588, 2847, 2126, 209, 2180, 1007,
	2867, 1585, 2027, 2900, 2813, 2913, 551, 2878, 1584, 2881,
	1042, 1472, 845, 1586, 2877, 847, 846, 1757, 1587, 1488,
	2840, 844, 205, 1583, 205, 205, 2882, 1148, 2866, 205,
	2234, 2263, 1236, 2868, 724, 1665, 1952, 205, 1162, 2864,
	1990, 2385, 1483, 816, 2872, 2879, 838, 2931, 1987, 2883,
	1002, 815, 2487, 2625, 2801, 209, 2891, 3047, 2048, 2890,
	2927, 1872, 1186, 2325, 2896, 2895, 2906, 1869, 2918, 617,
	2901, 2902, 2417, 2265, 1972, 2911, 1208, 2903, 2907, 994,
	205, 205, 2049, 1148, 2042, 2038, 1369, 1458, 2264, 1032,
	819, 1950, 2897, 2898, 2899, 205, 1474, 2359, 2498, 2634,
	2121, 1880, 1759, 1244, 962, 961, 960, 3253, 3250, 2912,
	2919, 1655, 2136, 1450, 985, 2600, 209, 205, 205, 205,
	205, 1148, 832, 2467, 2661, 1206, 1042, 3194, 1042, 551,
	1449, 205, 756, 3185, 1021, 1020, 1019, 2535, 3371, 2827,
	175, 172, 174, 173, 2844, 209, 209, 209, 2787, 2954,
	2584, 91, 38, 37, 36, 18, 115, 209, 114, 113,
	112, 111, 110, 209, 109, 209, 108, 107, 209, 209,
	209, 209, 209, 106, 3001, 105, 104, 103, 102, 209,
	209, 1143, 101, 1042, 100, 1143, 99, 98, 2969, 2965,
	2966, 97, 96, 1613, 2974, 205, 2970, 2980, 95, 2968,
	982, 94, 209, 93, 92, 1042, 35, 2981, 1143, 205,
	547, 544, 2500, 51, 3000, 50, 3011, 3025, 209, 90,
	89, 3032, 17, 3016, 535, 34, 2971, 15, 55, 56,
	14, 30, 31, 1588, 81, 80, 29, 16, 28, 209,
	26, 27, 1613, 1613, 12, 1042, 9, 8, 11, 13,
	3020, 25, 2979, 144, 3059, 2622, 3053, 143, 1613, 1613,
	74, 142, 73, 141, 3033, 140, 3044, 72, 1757, 2967,
	3010, 1042, 985, 3043, 3045, 24, 10, 23, 3015, 136,
	68, 3046, 3029, 3024, 2973, 138, 3051, 3034, 137, 1613,
	3021, 65, 3022, 135, 981, 1876, 134, 66, 133, 132,
	67, 131, 22, 6, 54, 3040, 2466, 1042, 3050, 3070,
	3002, 981, 7, 209, 3090, 209, 3063, 1042, 209, 3068,
	2664, 3012, 3013, 84, 85, 2630, 209, 3075, 3086, 32,
	63, 62, 61, 21, 53, 20, 983, 166, 165, 164,
	163, 159, 158, 162, 160, 161, 3099, 157, 130, 209,
	168, 3091, 3092, 983, 167, 155, 152, 151, 982, 154,
	156, 153, 209, 150, 3094, 169, 3098, 129, 58, 209,
	3095, 128, 127, 3097, 1143, 3142, 126, 125, 124, 209,
	3133, 57, 19, 2, 3118, 3143, 1, 0, 3145, 0,
	0, 0, 3062, 0, 0, 0, 0, 0, 1540, 0,
	209, 1040, 0, 2356, 2357, 3132, 3155, 0, 0, 3159,
	3160, 0, 0, 3124, 3141, 0, 985, 502, 1585, 209,
	3149, 0, 0, 3125, 3126, 209, 3154, 3076, 2044, 3153,
	0, 0, 3148, 209, 0, 0, 985, 0, 205, 3147,
	205, 2881, 0, 205, 2622, 3169, 0, 0, 0, 3182,
	2964, 3191, 0, 1585, 1162, 3174, 205, 0, 0, 0,
	209, 209, 3179, 3076, 205, 1162, 520, 3181, 0, 205,
	1162, 0, 0, 1889, 0, 551, 0, 209, 1143, 3203,
	0, 2048, 2048, 209, 0, 0, 0, 1143, 1143, 0,
	0, 0, 0, 0, 0, 209, 3222, 209, 0, 0,
	0, 1588, 982, 2443, 2444, 2445, 0, 0, 3210, 0,
	0, 3214, 3199, 0, 0, 0, 0, 209, 0, 3220,
	3221, 3232, 982, 209, 209, 3244, 1042, 3225, 1613, 0,
	3255, 0, 3151, 0, 3218, 209, 3213, 0, 0, 0,
	0, 0, 0, 0, 3261, 0, 0, 3263, 802, 3265,
	0, 3256, 1588, 3258, 3219, 3249, 0, 0, 0, 3272,
	0, 3273, 3257, 0, 0, 209, 0, 3198, 0, 0,
	0, 0, 0, 3267, 3269, 0, 3298, 0, 0, 0,
	0, 2048, 2048, 2048, 3283, 3284, 0, 0, 3286, 0,
	3285, 0, 0, 0, 0, 3311, 0, 0, 0, 209,
	3313, 0, 3315, 0, 3300, 0, 3320, 0, 0, 0,
	3321, 0, 0, 3314, 3312, 3316, 0, 0, 209, 3322,
	3318, 3319, 205, 3317, 0, 0, 0, 0, 1588, 0,
	3262, 0, 0, 0, 3328, 0, 3331, 3329, 0, 3255,
	0, 209, 0, 0, 3335, 3336, 0, 3342, 3226, 3344,
	3227, 3338, 0, 1585, 3341, 3347, 0, 0, 3346, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 0,
	0, 3355, 0, 3354, 205, 0, 3245, 0, 0, 3362,
	0, 3361, 1889, 3363, 1777, 0, 0, 3368, 3364, 0,
	0, 0, 0, 205, 0, 205, 0, 205, 3375, 0,
	3376, 502, 1585, 1585, 0, 0, 2265, 3369, 3370, 3379,
	3380, 3381, 661, 1793, 3383, 3384, 0, 0, 1585, 1585,
	0, 3388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3386, 59, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 1585,
	0, 0, 0, 0, 551, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 1148, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 205, 205,
	0, 205, 70, 205, 3340, 205, 1613, 205, 0, 0,
	2685, 2686, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 1853, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 981, 76, 0, 0, 0, 0, 0, 0, 981,
	981, 86, 0, 981, 0, 77, 0, 0, 0, 535,
	0, 0, 0, 0, 0, 551, 0, 1613, 0, 0,
	0, 2044, 2044, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 983, 983, 78, 0, 983, 0, 0, 2048, 2048,
	2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
	2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 983,
	2766, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 802,
	0, 2044, 2044, 2044, 0, 0, 0, 0, 2048, 2048,
	2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
	2048, 2048, 2048, 2048, 2048, 2048, 2048, 0, 2048, 79,
	0, 1164, 0, 1168, 0, 1174, 0, 0, 1585, 0,
	0, 0, 0, 502, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	145, 82, 0, 83, 0, 0, 0, 0, 502, 0,
	0, 0, 1401, 0, 0, 205, 0, 502, 0, 0,
	205, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 116, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 1293, 0,
	178, 0, 0, 0, 0, 1296, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 2688, 64, 0, 149, 0, 0, 0, 0,
	0, 520, 0, 177, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 170, 0, 0, 0, 0, 1406, 0,
	0, 171, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2158, 2996, 0,
	0, 0, 662, 0, 0, 205, 0, 0, 1428, 1429,
	1430, 0, 0, 76, 0, 205, 0, 0, 0, 0,
	0, 0, 86, 0, 2993, 0, 77, 2986, 205, 0,
	0, 0, 0, 0, 2420, 2421, 0, 2438, 2439, 2440,
	2984, 0, 0, 205, 0, 0, 2988, 205, 2213, 0,
	0, 0, 0, 2693, 1451, 1452, 1453, 1454, 1455, 1421,
	0, 0, 0, 0, 78, 2994, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 1162, 0, 0, 205, 981,
	0, 0, 2420, 2421, 1471, 2438, 2439, 2440, 0, 0,
	1484, 0, 0, 1777, 2435, 2987, 0, 0, 2044, 2044,
	2158, 0, 502, 0, 2268, 0, 1585, 0, 0, 0,
	205, 0, 0, 205, 0, 205, 0, 205, 0, 205,
	205, 983, 1148, 0, 0, 0, 0, 0, 0, 0,
	1427, 2287, 668, 0, 2158, 0, 0, 0, 0, 0,
	205, 0, 2435, 0, 0, 0, 0, 0, 1422, 0,
	0, 1162, 0, 1162, 0, 0, 0, 1585, 0, 0,
	0, 0, 0, 0, 0, 0, 2426, 0, 0, 0,
	79, 0, 205, 205, 205, 0, 205, 0, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 2044, 2044, 0, 2044, 205,
	0, 145, 82, 2989, 83, 0, 2990, 0, 0, 1534,
	1534, 1534, 0, 0, 2426, 0, 0, 2441, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1585, 0, 664, 0, 981, 116, 0,
	0, 2992, 0, 0, 0, 0, 0, 2436, 0, 0,
	0, 0, 0, 2995, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 3083, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 802, 1398, 1399, 983,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2436, 149, 0, 1162, 0,
	0, 0, 3107, 1401, 177, 0, 0, 0, 0, 0,
	0, 0, 1398, 1399, 170, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 2437, 0, 1401, 0,
	0, 2048, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	2048, 981, 0, 0, 2437, 205, 0, 0, 0, 0,
	0, 0, 3173, 205, 205, 0, 0, 205, 0, 0,
	0, 981, 502, 0, 0, 502, 0, 0, 0, 1406,
	0, 0, 502, 0, 0, 502, 502, 0, 2683, 0,
	0, 205, 0, 983, 2420, 2421, 0, 2438, 2439, 2440,
	0, 1162, 0, 0, 1423, 1424, 1425, 1426, 0, 1428,
	1429, 1430, 0, 983, 1406, 1162, 2432, 2433, 2434, 0,
	0, 0, 0, 2431, 2429, 2430, 2422, 2423, 2424, 2425,
	2427, 2428, 205, 2158, 2531, 0, 0, 0, 2158, 0,
	2048, 2531, 0, 0, 1428, 1429, 1430, 0, 2158, 2531,
	2158, 2531, 2531, 0, 2435, 0, 0, 0, 0, 0,
	1421, 0, 205, 205, 2432, 2433, 2434, 0, 0, 0,
	0, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	0, 0, 205, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 2588, 0, 0, 2590, 2593, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 205, 0, 0, 0, 0, 2426, 0, 0, 0,
	205, 0, 0, 902, 0, 0, 1148, 0, 0, 0,
	0, 0, 2158, 0, 502, 0, 0, 0, 0, 1422,
	0, 2158, 0, 2442, 0, 0, 0, 0, 2420, 2421,
	0, 2438, 2439, 2440, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 2441, 0, 0,
	0, 0, 205, 1777, 1422, 0, 1777, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 2669, 0,
	0, 1148, 205, 0, 205, 0, 1870, 2436, 1875, 0,
	0, 0, 0, 0, 1882, 0, 206, 0, 2435, 0,
	205, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 0, 1931, 0, 1933,
	1934, 1935, 1936, 0, 0, 0, 0, 0, 0, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 2725, 0, 0, 1960,
	0, 2044, 0, 0, 0, 0, 0, 0, 0, 0,
	2426, 0, 0, 0, 1471, 0, 2437, 0, 1985, 0,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2044, 0, 0, 0, 0, 0, 0, 0, 0, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 0, 0, 0, 0,
	2040, 2441, 2051, 2053, 2058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 502,
	0, 2436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 2432, 2433, 2434, 0,
	2044, 0, 0, 2431, 2429, 2430, 2422, 2423, 2424, 2425,
	2427, 2428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 551, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	2437, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2862, 205, 205, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 205,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2158, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2287, 2287, 0, 0, 0, 0, 668,
	668, 2158, 0, 0, 1777, 1777, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 2215, 0, 2217, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 1406, 0,
	2432, 2433, 2434, 0, 0, 0, 0, 2431, 2429, 2430,
	2422, 2423, 2424, 2425, 2427, 2428, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 2942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 1421,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 1446, 0, 0, 0,
	1162, 0, 0, 633, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 206, 1047, 206, 206, 1047, 0, 1047, 206, 2158,
	2531, 2158, 0, 634, 0, 0, 206, 0, 0, 0,
	0, 1162, 635, 0, 0, 0, 0, 2158, 0, 2531,
	1427, 0, 1162, 1162, 205, 2158, 2531, 636, 0, 0,
	0, 0, 0, 205, 205, 0, 0, 0, 1422, 0,
	0, 0, 0, 656, 0, 2339, 2340, 1047, 1047, 206,
	206, 2346, 0, 0, 0, 0, 3037, 0, 637, 0,
	0, 0, 0, 1439, 206, 0, 0, 0, 0, 0,
	2360, 2361, 2158, 0, 0, 638, 1985, 0, 0, 0,
	0, 0, 0, 0, 0, 2368, 206, 206, 206, 206,
	0, 1047, 1047, 1162, 0, 639, 1047, 0, 640, 1047,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 2403, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 206, 0, 0, 2158, 3241, 2531,
	0, 0, 3101, 2058, 2058, 2058, 0, 0, 206, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 2472, 0, 0, 0,
	1398, 1399, 0, 551, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 642, 0, 0, 0, 2593, 0, 0, 868,
	0, 0, 0, 205, 0, 0, 1401, 659, 643, 1447,
	0, 0, 0, 1162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 1400, 0, 205, 658, 0, 0, 0, 204,
	1420, 0, 644, 802, 0, 645, 0, 0, 0, 0,
	0, 653, 0, 2725, 0, 0, 0, 0, 646, 502,
	575, 0, 210, 0, 0, 0, 0, 3101, 2553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 647, 654, 0,
	0, 0, 0, 0, 2158, 2531, 0, 648, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 650, 0,
	0, 205, 1406, 649, 0, 0, 0, 2531, 0, 0,
	0, 0, 0, 568, 657, 0, 0, 0, 0, 1162,
	0, 1162, 0, 0, 0, 652, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 568, 0, 0, 0, 0,
	0, 3240, 0, 2623, 0, 0, 0, 1162, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 206, 1421, 0, 0, 0, 0, 0, 2725,
	0, 0, 0, 0, 1047, 206, 206, 0, 0, 0,
	0, 0, 1047, 206, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 2676, 0, 0, 0,
	1882, 0, 0, 2158, 0, 0, 2680, 2681, 0, 0,
	2684, 0, 0, 0, 2687, 0, 0, 1047, 0, 0,
	0, 0, 3101, 2691, 0, 0, 0, 0, 0, 0,
	0, 0, 2698, 0, 1427, 2472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 2718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2734, 2735, 1439, 2736, 2737,
	2738, 0, 0, 2739, 0, 0, 0, 2741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2769, 2770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1401, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 206, 0, 0, 0, 0, 2786, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1400, 0, 1437,
	0, 0, 0, 0, 0, 1420, 0, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 59,
	0, 0, 0, 0, 0, 0, 206, 206, 0, 0,
	60, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 2821, 2824,
	0, 2682, 206, 0, 206, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 2843, 0, 0, 70, 0, 0, 1406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 837, 88, 1428, 1429, 1430,
	0, 0, 1047, 86, 1047, 0, 0, 77, 0, 1047,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1047, 1534, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 2892, 206, 206, 0,
	206, 0, 206, 0, 206, 78, 206, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 204,
	204, 0, 0, 0, 204, 0, 0, 0, 0, 206,
	0, 0, 575, 88, 0, 0, 0, 0, 0, 0,
	0, 2920, 2921, 0, 0, 0, 0, 2925, 2926, 0,
	0, 0, 2929, 2930, 0, 0, 0, 0, 0, 2934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 204, 204, 0, 2939, 1427,
	0, 1043, 0, 0, 1144, 2943, 1043, 0, 0, 0,
	204, 0, 0, 0, 0, 777, 0, 1422, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 79, 204, 204, 204, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 972, 88, 1144, 1144, 0, 0,
	0, 0, 145, 82, 0, 83, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 664, 0, 0, 116,
	1144, 1144, 0, 0, 2824, 1144, 0, 0, 1144, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 204, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 117, 1047, 0, 0, 0,
	0, 0, 0, 1144, 0, 0, 0, 149, 0, 206,
	0, 0, 1047, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 171, 2824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 3071, 3072, 3073, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 814, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3081, 3082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1401,
	0, 3089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 1047, 0, 1420, 0, 0, 0, 0, 2824, 0,
	0, 0, 0, 0, 206, 0, 3123, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 3135, 0, 206, 0, 0,
	1047, 0, 0, 0, 0, 2824, 0, 0, 2824, 2345,
	0, 0, 206, 1047, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 2824,
	2824, 0, 0, 0, 0, 1406, 0, 0, 0, 0,
	0, 0, 206, 1557, 0, 984, 0, 206, 204, 0,
	0, 1398, 1399, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1557, 0, 0, 1428, 1429, 1430, 0, 575,
	0, 0, 0, 0, 575, 3184, 0, 1401, 3187, 206,
	0, 0, 206, 0, 206, 0, 206, 0, 206, 206,
	0, 0, 1047, 1047, 1047, 0, 1047, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 206,
	0, 1420, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 1144, 568, 0, 0, 0, 0, 568, 0, 0,
	0, 206, 206, 206, 0, 206, 0, 0, 0, 88,
	0, 88, 0, 88, 0, 0, 0, 2338, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 206, 0,
	802, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3282, 3282,
	3282, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 1428, 1429, 1430, 0, 3301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 797, 88,
	0, 0, 0, 2824, 0, 2824, 88, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 3282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1144,
	0, 0, 0, 0, 0, 0, 1043, 0, 204, 0,
	204, 0, 204, 814, 0, 0, 0, 814, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 3282, 0, 0,
	1126, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 0, 0, 0, 1427, 0, 1037, 0, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 777, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 1047, 0, 204, 0,
	0, 0, 0, 575, 204, 1047, 204, 0, 204, 0,
	204, 1470, 204, 0, 0, 1476, 0, 0, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 0, 1144, 0, 204, 0, 0, 1144, 0,
	0, 206, 1261, 1261, 1261, 1155, 0, 0, 0, 0,
	0, 0, 1144, 1144, 0, 0, 1292, 0, 1044, 0,
	0, 1145, 0, 1044, 0, 0, 568, 0, 0, 0,
	0, 206, 206, 0, 0, 0, 0, 0, 0, 206,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 206, 1047, 0, 0, 1398, 1399, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 1145, 1145, 0, 0, 0, 0, 0,
	1354, 1401, 0, 0, 0, 0, 206, 0, 0, 1047,
	206, 0, 1047, 1047, 1047, 0, 0, 0, 0, 206,
	0, 0, 0, 1043, 0, 0, 88, 1400, 0, 1555,
	0, 1558, 0, 0, 0, 1420, 0, 1145, 1145, 0,
	0, 0, 1145, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1047, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	1145, 206, 1047, 206, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 984, 0, 0, 0, 1406, 1043, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 705, 0,
	736, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 1421, 0,
	0, 1043, 0, 0, 710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 713, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 719, 720, 0, 0, 0, 1126, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1564, 0,
	204, 737, 714, 0, 0, 0, 0, 0, 0, 1427,
	204, 1572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 814, 0, 1047, 1422, 735, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 0, 709, 0, 204, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 717, 0, 0, 0, 0, 0, 1144,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 723, 204, 0, 0, 204, 0,
	204, 718, 204, 0, 204, 204, 0, 0, 0, 0,
	1044, 206, 206, 0, 0, 0, 722, 0, 1145, 0,
	0, 0, 0, 0, 0, 204, 0, 1047, 206, 738,
	0, 0, 1047, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 1044, 0, 0, 0, 204, 204, 204,
	0, 204, 0, 0, 1047, 1047, 1047, 0, 0, 0,
	0, 1144, 1144, 1144, 0, 1144, 0, 721, 0, 0,
	206, 0, 0, 0, 204, 0, 777, 0, 0, 777,
	777, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 1752, 0, 727, 0, 0, 0, 0, 1764,
	0, 0, 0, 0, 0, 0, 0, 707, 725, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
	1783, 0, 1783, 708, 1949, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 726, 797, 0,
	0, 742, 743, 0, 0, 0, 0, 740, 0, 0,
	0, 1470, 0, 0, 729, 1470, 1145, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	1823, 1047, 0, 0, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1834, 0,
	0, 0, 0, 0, 1840, 0, 1841, 0, 1842, 972,
	1843, 0, 1844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 1558, 0, 0, 0,
	0, 0, 206, 206, 1047, 1855, 1047, 0, 1047, 0,
	984, 0, 0, 0, 0, 0, 88, 0, 984, 984,
	0, 0, 984, 0, 0, 0, 0, 1126, 1047, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1557, 0, 1145, 0,
	1145, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 1145,
	1145, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 1126, 0, 1043, 0, 0, 204, 204, 0,
	0, 0, 0, 0, 0, 1557, 0, 0, 88, 0,
	1047, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 88, 0, 88, 204, 0, 0, 1126,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 1126, 0, 1047, 0, 0,
	0, 1144, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 2105, 0, 1043, 88, 0,
	88, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 1144, 0,
	0, 1144, 1144, 1144, 0, 1044, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 1144, 0, 0, 0, 0, 0, 0,
	206, 1047, 0, 0, 1126, 0, 0, 0, 0, 0,
	1047, 1047, 1044, 0, 0, 0, 0, 0, 1043, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 1047,
	0, 0, 0, 0, 0, 0, 1126, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 1949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1155, 0,
	0, 1043, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 2231, 0,
	0, 0, 0, 1764, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 2270, 0, 0, 1261, 0,
	1261, 1400, 1261, 0, 1155, 1155, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 2306, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 972, 2320, 1155, 2322,
	0, 0, 0, 0, 972, 972, 0, 0, 972, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 2336, 0, 0, 204, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1145, 1145,
	1145, 0, 1145, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 204, 0, 88, 0,
	88, 0, 1421, 0, 0, 0, 1043, 0, 0, 0,
	0, 1144, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 1144, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 797, 0, 0, 0, 0, 1126, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	984, 0, 0, 0, 0, 0, 1439, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
	1557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 204,
	0, 0, 0, 0, 0, 0, 0, 2528, 1043, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 2565, 2231, 0,
	0, 1044, 0, 1126, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 0, 1043, 0, 1144, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 1043, 0, 0,
	1144, 0, 2601, 0, 0, 0, 2605, 0, 0, 0,
	0, 0, 0, 0, 0, 2612, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 1126, 1043, 88, 1126, 0, 2657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1145, 0,
	0, 0, 0, 0, 0, 0, 1044, 2672, 0, 1155,
	0, 0, 0, 0, 1044, 0, 0, 0, 204, 1043,
	0, 0, 0, 0, 0, 2678, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 1145, 0, 0, 1145, 1145,
	1145, 0, 0, 0, 0, 1126, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 1434, 1145,
	1145, 0, 0, 0, 0, 1401, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 1044, 0, 0, 1044, 0,
	0, 1400, 0, 0, 0, 0, 204, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 204, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 1044,
	1144, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 1144,
	1144, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 972, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	1126, 0, 1421, 0, 0, 0, 0, 2863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1044, 0, 2873, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 2910, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 1044, 0, 1447, 0, 0, 1145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1145, 1145, 1145, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 1044,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 2950, 0, 0, 0, 2949, 0, 0, 1423, 1424,
	1425, 1426, 591, 0, 0, 0, 0, 0, 1406, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3014,
	1949, 0, 0, 0, 0, 592, 0, 0, 2231, 0,
	0, 1126, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 612, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 1126, 0, 0, 0, 0, 594, 0, 0, 595,
	0, 0, 1436, 0, 0, 1044, 0, 1044, 0, 1421,
	0, 0, 0, 0, 0, 618, 0, 1126, 0, 0,
	0, 596, 0, 0, 0, 0, 1446, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 0, 0,
	1145, 0, 1044, 1126, 1145, 0, 0, 598, 0, 0,
	599, 622, 0, 0, 0, 625, 0, 0, 0, 0,
	1427, 0, 0, 0, 1044, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 88, 3108, 814, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3144, 0,
	621, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3167,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	604, 0, 0, 0, 0, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 624, 2408, 0,
	0, 0, 2409, 0, 0, 0, 0, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 3212, 0, 0, 0,
	606, 0, 0, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 814, 607,
	0, 0, 620, 0, 619, 0, 0, 0, 0, 608,
	0, 0, 0, 3246, 0, 0, 0, 0, 0, 0,
	609, 0, 0, 0, 3259, 615, 0, 0, 0, 0,
	626, 0, 623, 0, 0, 0, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 1145, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 214, 215, 216, 217,
	218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054,
	1055, 1056, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 1057, 226, 227, 228, 229, 230, 231, 1058,
	1059, 232, 458, 459, 460, 1060, 233, 461, 1061, 1046,
	1062, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1063, 243, 0, 244, 245, 246, 1064, 923, 247,
	248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250,
	251, 252, 253, 254, 462, 463, 1072, 255, 1073, 257,
	256, 1074, 258, 1075, 1076, 259, 260, 261, 1077, 262,
	1078, 263, 264, 1079, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 1080, 211, 1081, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	1082, 281, 1083, 1084, 924, 282, 283, 1085, 284, 468,
	1086, 469, 285, 1087, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 1088, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 1089, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 1090, 475, 1091, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 1092, 314, 313, 1093, 315, 477, 930,
	316, 317, 931, 1094, 318, 319, 1095, 1096, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 1097, 213, 933, 1098, 478, 479,
	334, 335, 1099, 336, 337, 338, 1100, 1101, 340, 341,
	1102, 1103, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 1104, 351, 482, 352,
	483, 353, 1105, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1106, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1107,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1108, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1109, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 1110, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1111, 419, 420, 418, 1112, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 1113, 488, 489, 490, 491,
	1114, 1115, 428, 429, 492, 430, 493, 1116, 431, 432,
	433, 0, 434, 435, 1117, 1118, 436, 437, 438, 439,
	441, 1119, 442, 1120, 440, 443, 444, 445, 494, 495,
	496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 2092, 0, 0, 0, 0,
	0, 0, 0, 0, 2093, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2972, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3077,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2721, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053,
	1054, 1055, 1056, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 458, 459, 460, 1060, 233, 461, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 462, 463, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	468, 1086, 469, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 1088, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 1090, 475, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 477,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 478,
	479, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 482,
	352, 483, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 488, 489, 490,
	491, 1114, 1115, 428, 429, 492, 430, 493, 1116, 431,
	432, 433, 0, 434, 435, 1117, 1118, 436, 437, 438,
	439, 441, 1119, 442, 1120, 440, 443, 444, 445, 494,
	495, 496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125,
	448, 449, 498, 450, 451, 452, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2713, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2587, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1994, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 1149, 0, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1735,
	0, 0, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1038, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053,
	1054, 1055, 1056, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 458, 459, 460, 1060, 233, 461, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 462, 463, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	468, 1086, 469, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 1088, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 1090, 475, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 477,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 478,
	479, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 482,
	352, 483, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 488, 489, 490,
	491, 1114, 1115, 428, 429, 492, 430, 493, 1116, 431,
	432, 433, 0, 434, 435, 1117, 1118, 436, 437, 438,
	439, 441, 1119, 442, 1120, 440, 443, 444, 445, 494,
	495, 496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125,
	448, 449, 498, 450, 451, 452, 1970, 0, 865, 822,
	823, 824, 820, 821, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	1967, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 1968, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	1966, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 1969,
	0, 0, 0, 0, 0, 0, 835, 1965, 0, 0,
	0, 798, 833, 865, 822, 823, 824, 820, 821, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 176, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 178,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 1286, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 170, 448, 449, 498, 450, 451, 452, 809,
	171, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 1475, 1473, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 176, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	178, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 1286, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 170, 448, 449, 498, 450, 451, 452,
	809, 171, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 1475, 2358, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 176, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 178, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 1286, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 170, 448, 449, 498, 450, 451,
	452, 809, 171, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 1475, 1473, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 2054,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	2059, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 2055, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 2056, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 801,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 813, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 813,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 2884,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 1535, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 833, 865, 822,
	823, 824, 820, 821, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	2700, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 1884, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 1883, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 1535, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 2059,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 1473, 0, 0, 0, 2064,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 2062, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 2050,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 2039, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 2037,
	833, 2029, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 2032, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 2033, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 2034, 2031, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 2035, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 2030, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 2026, 833, 2029, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	2032, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 2033, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 2034, 2031, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 2035, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	2030, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 1481, 0, 835, 0, 0, 0, 0,
	0, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 1871, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 1176, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1175,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	1170, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1169, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 1165, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	3281, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 3280, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 3279, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 3281, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 3280, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 2047, 0, 0, 0, 0,
	2045, 2046, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 0, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 3281, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 0, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 0, 0, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 0,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 0, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 3280, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 798, 0, 986, 0, 0, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 214, 215, 216, 217, 218, 833, 219, 0, 0,
	0, 0, 914, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 913, 232, 458, 459, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 973, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	213, 933, 0, 918, 479, 334, 335, 0, 336, 337,
	338, 0, 978, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 980, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 176, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 944, 0, 419, 420, 418,
	178, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 945,
	430, 946, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 912, 442, 0, 440,
	443, 444, 445, 1286, 495, 496, 0, 447, 446, 497,
	986, 0, 0, 170, 448, 449, 498, 450, 451, 452,
	0, 171, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 0,
	970, 0, 1560, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 913, 232, 458, 459, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 973, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 213, 933, 0, 918,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 980, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 176, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 944, 0, 419, 420, 418, 178, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 945, 430, 946, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 912, 442, 0, 440, 443, 444, 445, 1286,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 170,
	448, 449, 498, 450, 451, 452, 0, 171, 0, 0,
	2465, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 1560, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 913, 232, 458, 459, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 973, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 213, 933,
	0, 918, 479, 334, 335, 0, 336, 337, 338, 0,
	978, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	980, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 945, 430, 946,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 912, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 969,
	0, 986, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 970, 914,
	975, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 913, 232, 458, 459, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 973, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 0,
	918, 479, 334, 335, 0, 336, 337, 338, 0, 978,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 980,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 945, 430, 946, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 912, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 986, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 0, 970, 0, 975,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 913, 232,
	458, 459, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 973, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 0, 918, 479, 334, 335,
	0, 336, 337, 338, 0, 978, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 980, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 945, 430, 946, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 912,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 986, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 0, 970, 0, 975, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 913, 232, 458, 459, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 213,
	933, 0, 918, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 980, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 945, 430,
	946, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 912, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 798,
	0, 1142, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 1462, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 176,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 178, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	1286, 495, 496, 0, 447, 446, 497, 1283, 0, 1142,
	170, 448, 449, 498, 450, 451, 452, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 148,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 1286, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 170, 448,
	449, 498, 450, 451, 452, 0, 171, 0, 0, 0,
	0, 1142, 1141, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 1142, 1141, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 2652,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 986, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 0, 0, 0, 1290, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 913, 232, 458, 459, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 213,
	933, 0, 918, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 945, 430,
	946, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 912, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 798,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 176,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 178, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	1286, 495, 496, 0, 447, 446, 497, 208, 0, 0,
	170, 448, 449, 498, 450, 451, 452, 0, 171, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 148,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 208, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 1565, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 208,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 2602,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 208, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 2266, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 675, 0, 567, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 2724, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 573, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 572,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	566, 0, 567, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 576, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 573, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 572, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 567, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 576, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 573, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 1838, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	572, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 567, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 576, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 573, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 572, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 576, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1311, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 1310,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 1309, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1281, 0, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1280, 471, 472, 926,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	1277, 0, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1276, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 1215, 0,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1214, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1212, 0, 1142, 1141,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1211, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1135, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1137, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1142, 1141,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	1142, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 2159, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 2156, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 2301,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 2162, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 2298, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 2300, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 2297, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 2161, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 2299, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	2159, 233, 461, 0, 0, 2153, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 2156, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 2162, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2152, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 2161, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	2160, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1356, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 1359, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 1357, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 1358, 446, 497, 1130, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1132, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1127, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1129, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1034, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1036, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 529, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 528, 218, 518, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 521, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 522, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 523, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	517, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 518, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	521, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	522, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	523, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 978, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	2230, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1824, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 1763, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1756, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1755, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1751, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1753, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1270, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1269, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1267, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1266, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1264, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1263, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1260, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1259, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1235, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1152, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1154, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 521, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 522, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 523, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 667, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 666, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 506, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 505, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 504, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 2097, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 208, 2288, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 2845, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 208, 2288, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 2285, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 1830, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1822, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 549, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 1014, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 550,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 546, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 545, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1775, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1774, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 539, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 1289, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1274, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1273, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1223, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1222, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1207, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1146, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 1014, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	1015, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	997, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 539, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 537,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 538, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 540, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 541, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	543, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 533, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 534, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	531, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 525, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 501, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 2547, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2545, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 2534, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	2248, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 534, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 1787, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 0, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1243, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1185, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 952, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 0, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 0, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 0,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 0, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1401, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 1400, 0, 0, 0, 0, 1406, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 1436, 1406, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	1427, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1439, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 1981, 1400,
	0, 0, 1982, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423,
	1424, 1425, 1426, 0, 1400, 0, 0, 2948, 0, 1406,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 1436, 1406, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1427, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 1439,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 0,
	1400, 0, 0, 2696, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	1423, 1424, 1425, 1426, 0, 1400, 0, 0, 2411, 0,
	1406, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 1436, 1406, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1427, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	1439, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 1400, 0, 0, 2410, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0, 2407,
	0, 1406, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 1436, 1406, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1427, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1439, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 1400, 0, 0, 2406, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0,
	2405, 0, 1406, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 1436, 1406, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1427, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 1439, 0, 0, 0, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	0, 0, 0, 1400, 0, 0, 1982, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 1423, 1424, 1425, 1426, 3237, 1400, 0,
	0, 0, 0, 1406, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 1436, 1406, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1427, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1439, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 3172, 1400, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 3171, 1400,
	0, 0, 0, 0, 1406, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 1436, 1406,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1427, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 1439, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 3080, 1400, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 2997,
	1400, 0, 0, 0, 0, 1406, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 1436,
	1406, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1427, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 1439, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 0, 0, 0, 2953, 1400, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426,
	2952, 1400, 0, 0, 0, 0, 1406, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	1436, 1406, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1427, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 1439, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 0, 0, 0, 2951, 1400, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425,
	1426, 2917, 1400, 0, 0, 0, 0, 1406, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 1436, 1406, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1427,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 0, 2731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 1437,
	0, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1400, 0,
	2362, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 2333, 0, 1401, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 1400, 0, 0, 0, 0, 1406, 3327,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 2334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 1436, 1406, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 3326,
	0, 0, 1415, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	1427, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1439, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 2072, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 2071, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423,
	1424, 1425, 1426, 0, 1400, 0, 0, 0, 0, 1406,
	0, 2450, 1420, 0, 2449, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 1436, 1406, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1427, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 1439,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	1423, 1424, 1425, 1426, 0, 1400, 0, 0, 0, 0,
	1406, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 1436, 1406, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 1435, 795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1427, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	1439, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 1400, 2719, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 2451, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0, 0,
	0, 1406, 0, 0, 1420, 0, 2456, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 1436, 1406, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1427, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1439, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 2404, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0,
	0, 0, 1406, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 1436, 1406, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	2418, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1427, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 1439, 0, 0, 0, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0,
	0, 0, 0, 1406, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 1436, 1406, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 123, 0, 0, 0, 1415, 1416, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 118, 1436, 0, 0, 1427, 0, 0, 0, 1421,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1446, 0, 0, 40,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 70, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 76, 0, 0, 121, 0, 0,
	1427, 0, 41, 86, 0, 0, 0, 77, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 78, 0, 0, 0, 0,
	1437, 0, 1610, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1622,
	1604, 1611, 1594, 1632, 1631, 0, 0, 1596, 1595, 0,
	0, 0, 0, 0, 0, 1642, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 1633, 0, 1629, 1628, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 46, 1627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 145, 82, 0, 83, 0, 47, 1626, 1624,
	1625, 122, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 116,
	1606, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 1615, 1609, 1617, 1619, 1620, 1621, 1616, 0, 1614,
	0, 0, 178, 0, 0, 0, 0, 0, 1638, 1639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	1598, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 1630, 0, 0, 170, 1607, 0, 1608, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 4, 0, 0,
	0, 0, 0, 0, 1623, 0, 0, 0, 1591, 1589,
	1590, 1593, 1592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1599, 1600, 1602, 1603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1618, 1601,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1597, 0, 1634,
	1635, 1636, 1637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1605, 0, 0,
	0, 0, 1612, 1640,
}
var sqlPact = [...]int{

	67102, -1000, -49, -1000, -1000, -1000, -1000, -1000, 121, 112,
	111, 109, 107, 106, 105, 104, 102, -1000, -1000, -1000,
	101, -1000, -1000, 99, -1000, 98, 95, 93, 91, -1000,
	89, 84, -1000, -1000, -1000, -1000, 83, 81, 80, 46884,
	1544, 56234, 48102, 1651, 2059, 41598, 55826, 41190, 55418, 55010,
	78, -1000, 54602, 75, 72, 68, -1000, -1000, 67, 1590,
	33408, 64, 61, 59, 2219, 58, 57, -1000, 55, -1000,
	8700, 1188, -1000, 52, 47, -1000, 4898, 3380, 47694, 2051,
	46, 45, 32999, 2045, -1000, -1000, 1179, -1000, -1000, 44,
	38, 37, 36, 35, 23, 22, 21, 20, -1000, 19,
	18, 17, 16, 14, 12, 8, 6, 5, 4, 3,
	0, -1, -2, -4, -11, -1000, 6766, 1415, 1255, 1254,
	1253, 1246, 1240, 775, -12, -16, -17, -18, -21, -23,
	-1000, -1000, -25, -26, -29, -30, -1000, -31, -33, 82,
	-34, -35, -36, -39, -42, 2012, 1976, 1396, 1217, 15947,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60254, 56636, -43, -74, -44, -1000, 2335, 756, 27687, 67102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	374, -1000, -1000, -1000, 191, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1414,
	633, -1000, -1000, -1000, 54194, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56636, -1000, 1522, -10, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 629, -1000, 1519, 161, 1463, -1000,
	-1000, -1000, -1000, -1000, 56636, -1000, -1000, 2584, 2583, 1511,
	624, 53792, -1000, 1682, -1000, 724, 16378, -1000, 1002, -1000,
	16378, 183, -1000, -1000, -1000, -1000, -1000, 40782, 12930, 40374,
	39966, 37122, 53384, 12512, 46482, 991, -1000, -1000, -1000, -1000,
	-1000, -51, 34614, 56636, -1000, 180, -1000, -1000, -1000, -1000,
	-1000, -1000, 23873, 947, 23428, 676, 22983, 247, -1000, -1000,
	-1000, -1000, 2581, 2579, 838, 2578, 2262, 59852, 1309, 2577,
	1230, 900, 792, 2576, 2572, 2569, 2568, 2567, 2565, 2564,
	1147, 52976, 2008, 36704, 36286, 46884, 46884, 1870, 52568, -1000,
	-1000, 1051, 1045, -1000, -1000, -1000, -1000, 2149, 2052, 2046,
	46074, -1000, -1000, 2563, 2561, 2559, 2558, 2557, 59450, 1306,
	2556, 1802, 2555, 2554, 2552, 2551, 2550, 2547, 2546, 2545,
	2543, -1000, 45666, 45258, 44850, 44442, 52160, 35868, 35450, -1000,
	-1000, -1000, 29315, 5552, 51752, 30153, 46884, -1000, -1000, 24304,
	66, -1000, -1000, -1000, 1972, -1000, 24304, 66, -1000, 1461,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2002, 1228, 2448,
	35032, 1607, 1105, 2145, 2542, 1726, 2144, 2139, 2128, 2127,
	2114, 2541, 1317, 2540, 1172, 2539, 1190, 2113, 2478, 1464,
	39558, 2538, 2537, 2290, 2079, 1971, -1000, -1000, -1000, -1000,
	1139, -1000, -1000, -1000, 42000, -1000, -1000, 1722, -1000, -1000,
	1722, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 984, 58646,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1333, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1668, -1000, 1441, -1000, -1000, 2536,
	1976, 1763, 2295, 2295, 2295, 2352, 344, 343, -1000, 82,
	-1000, -1000, 66850, -1000, -1000, 24304, 24304, 24304, 24304, 24304,
	1419, -1000, 623, -1000, -1000, 611, -1000, 620, 535, -1000,
	-1000, -1000, -1000, -1000, -1000, 619, 2477, -1000, 799, -1000,
	-1000, -1000, -1000, 2443, -1000, 15071, -1000, -1000, -1000, 315,
	618, 24304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 169, 737,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 516, 1344, 515, 515, 515, -1000,
	-1000, 780, -1000, -1000, -1000, 301, 514, 287, 513, -1000,
	-1000, -1000, -1000, 2007, 617, 615, -1000, 602, 601, 599,
	-1000, -1000, -1000, 598, 597, 580, 579, 578, 577, 575,
	571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 779, -1000,
	568, 567, 566, 562, 561, 554, 547, 546, 539, -1000,
	-1000, -53, 56636, -1000, 374, -53, -1000, -1000, 538, -1000,
	18116, 18116, 18116, -1000, -1000, 1518, 24304, -1000, 1788, -1000,
	3721, -233, 691, 28499, -1000, 26856, 691, 655, 31373, -1000,
	1970, -1000, -1000, 536, 146, -1000, -1000, -1000, 1966, 56636,
	13346, 46884, 46884, -1000, -1000, 24304, -1000, -1000, 37538, 34212,
	56636, 47286, 2393, 67268, 34212, 56636, 2000, -1000, -1000, -1000,
	56636, -1000, 24304, -1000, 2392, 1679, -62, -1000, -1000, -1000,
	-1000, -1000, 1769, 1806, 892, 1112, -1000, 16378, 2254, -1000,
	-1000, -1000, 145, 13346, -1000, 1770, 2182, 1082, -1000, 1580,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1312, 2176,
	-1000, 1617, 2164, 1310, -1000, -1000, 759, 2163, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1462, -1000, -1000,
	2286, -1000, -1000, 1650, 2159, -158, 37538, 34614, -55, -1000,
	-1000, -69, -1000, 12094, 66850, -1000, -1000, -1000, 66850, 689,
	-1000, -1000, 2158, -1000, 66850, 684, -1000, -1000, 2155, -1000,
	-1000, -1000, 2535, -1000, 2534, 1710, 2532, 2531, 2530, -1000,
	1233, 1376, 2529, -1000, 2528, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44034, 43626, 789, -1000, 1516, -1000, -1000, 43218,
	754, 1705, -1000, -1000, 1702, -1000, 384, -1000, 2526, 51344,
	1884, 754, 1701, -1000, -1000, -1000, -1000, -1000, 46884, -1000,
	46884, -1000, 46884, -1000, 1122, -1000, 59048, -233, -1000, -1000,
	-1000, -1000, -1000, 2153, 2525, 2521, 2518, -1000, 56636, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2134,
	-1000, -1000, 153, 2115, -1000, 153, 2107, -1000, 150, 2103,
	-1000, -1000, 1561, 2093, -1000, -73, 2091, -1000, -1000, -73,
	2090, -1000, -80, -1000, -1000, -1000, 756, -1000, 28907, 50936,
	37538, 739, 524, 66850, -1000, 37538, 66850, -1000, -1000, 50528,
	42816, -1000, -1000, 1068, 1833, -1000, -1000, -1000, -1000, 37538,
	37538, -1000, 50120, -1000, -1000, -1000, 1453, 2291, 46884, -1000,
	-1000, 1999, -1000, 33810, 46884, -1000, 46884, -1000, 46884, -1000,
	46884, -1000, 46884, -1000, -1000, -1000, -1000, -1000, 2140, 1269,
	1268, -1000, 56636, -1000, -1000, 2303, 56636, -1000, -1000, -1000,
	1767, -1000, -1000, -1000, -1000, 46884, -1000, -1000, -1000, -1000,
	-1000, -1000, 1998, -1000, 1223, -1000, 1064, -1000, -1000, 156,
	-1000, -1000, -62, -1000, 58646, -1000, -1000, 1976, 1763, -1000,
	56636, -1000, -1000, -1000, 1976, 1525, 1847, 22538, 1815, 24304,
	82, -1000, -1000, 82, 82, 17685, -1000, -1000, 67268, 67268,
	13346, 1015, 24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304,
	24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304,
	24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304,
	24304, 24304, 24304, 24304, 24304, 24304, 24304, 1681, 24304, 983,
	24304, 24304, 24304, 24304, 1505, -1000, -1000, 1399, 423, 1428,
	-1000, 2434, 2434, 2434, 7618, 7618, 502, 2516, 611, -1000,
	24304, -1000, 66, 24304, 13764, -1000, 2460, 1176, -1000, -1000,
	343, 61065, 1675, -1000, 342, 14209, -1000, -1000, -1000, 15071,
	535, 22093, 24304, 776, 66850, 11678, 1985, 1921, -1000, 2459,
	-1000, -1000, 2443, -1000, -1000, -1000, -1000, 2458, 1005, 1001,
	2457, -1000, 2455, 2453, 534, 621, 609, 594, 525, 421,
	24304, 24304, 24304, 24304, 24304, 24304, 24304, 24304, -1000, 21662,
	21217, 20772, 25597, 20327, 24304, 15502, 19882, 19437, 56636, -53,
	2391, 24304, 140, -1000, 65401, -1000, 140, 140, 533, -83,
	66850, 1841, 1836, 28093, 1781, 1429, 1429, 1429, -1000, 532,
	642, 691, 9165, 48504, 1442, 691, 691, 142, 167, 341,
	26450, 1788, 48504, -1000, -1000, 46884, 527, 13764, 13346, 1083,
	-85, 141, 1849, 1848, -1000, -86, 739, 979, -57, -1000,
	1336, -88, -1000, 868, -1000, -1000, -1000, -1000, 614, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 777, 520, 517, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 516, 1344, 515, 515,
	515, -1000, -1000, -1000, 301, 514, 287, 513, -1000, -1000,
	-1000, -1000, -1000, -1000, 1965, -69, 47286, 723, -93, 861,
	-62, -1000, 1722, -1000, 1145, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2476, -1000,
	2439, -1000, -1000, 2451, -54, -1000, -1000, 13346, -1000, -63,
	1218, -1000, 39150, 2304, 2281, 2268, 1113, -1000, 1094, 2338,
	42000, 2376, 884, -1000, 1963, -1000, -1000, 709, 1063, 978,
	42000, 1617, -1000, 67268, -1000, 1877, 2334, 1087, 1076, 1087,
	1087, 1093, -1000, 42000, 977, 1403, 37538, -1000, 974, -1000,
	-67, 2374, 188, -1000, 1962, 967, -1000, -1000, 46884, 13346,
	523, -55, 34614, 56636, 139, -1000, 24304, 66, 24304, 66,
	-1000, -1000, 2087, -1000, -1000, -1000, 2515, 1329, 1801, -1000,
	-1000, -1000, 512, 1695, 1617, 1683, -1000, -1000, 42408, 1961,
	56636, 1859, -60, 46884, -1000, -1000, 1393, -1000, 2085, 2084,
	468, 2514, -1000, 1509, 1669, -1000, -1000, -1000, 58244, 1019,
	2083, 764, 833, 2390, 833, 32185, -1000, 56636, -1000, 56636,
	-1000, -1000, -1000, 2513, -1000, 46884, -1000, -1000, 46884, -1000,
	46884, -1000, 46884, -1000, 46884, 46884, -1000, 56636, 37538, 37538,
	37538, 1336, 38346, -94, 340, -1000, 49718, 56636, 813, 38748,
	-208, 523, -1000, 523, -1000, 46884, 1988, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 56636, -1000, 56636, -1000,
	-1000, -1000, -1000, -1000, -1000, 1138, -1000, 1980, -1000, 1977,
	-1000, -14, -1000, -1000, -1000, -1000, 1569, 46884, 46884, 46884,
	-1000, 42000, -1000, -1000, 1976, -1000, -1000, -1000, -1000, -1000,
	66850, -1000, 480, -1000, -1000, 66850, 1250, 1862, -1000, 1862,
	-58, -1000, 65020, 1828, 46884, -1000, -1000, -1000, -1000, -1000,
	706, 482, 482, 949, 949, 949, 949, 2397, 208, 4086,
	790, 5139, 5139, 5139, 5139, 5139, 5139, 5139, 5139, 358,
	435, 435, 358, 358, 358, 358, 358, 435, 435, 435,
	5139, 5139, 5139, 7618, 66925, 6140, 24304, 24304, 966, 1397,
	423, 5992, 24304, 6574, 6574, 6574, 6574, -1000, 1520, -1000,
	-1000, -1000, -1000, 1960, 510, 25597, 25597, -1000, -1000, -1000,
	-1000, 14640, 24304, -1000, -1000, -1000, -1000, 18992, -1000, -1000,
	64569, -249, 338, -184, 13, -1000, 24304, 24304, 24304, 336,
	-1000, 333, -1000, -1000, 965, -1000, 964, 961, 948, -1000,
	509, 136, 24304, 56636, -1000, 62589, 641, -112, -1000, -95,
	1067, -1000, 24304, 135, -1000, 1438, 508, 505, 331, -100,
	328, 696, 695, 327, 325, 324, 24304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 66544, 62283, 62208,
	61902, 8565, 61827, 61521, -101, 323, -1000, 1947, -184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 321, -1000, 320, -1000,
	66469, -184, 318, 4233, -1000, 25597, 25597, 25597, -1000, 316,
	-1000, 65326, -1000, 66163, 18561, 18561, 18561, 313, 66088, 24304,
	-184, -103, -1000, -106, -1000, -1000, 501, -109, 764, 18116,
	27278, 13346, -1000, 764, 764, 24304, -1000, 24304, 28093, 28093,
	1356, 1835, 28093, -1000, -1000, -1000, -1000, 48504, 503, 691,
	48504, -1000, 2443, 1812, -1000, -1000, -1000, 56636, 374, -1000,
	48504, 48504, 13346, 691, -1000, 305, 30559, 13, 132, -1000,
	-1000, 13346, 1822, 1822, -1000, 1945, 56636, 2406, -1000, -1000,
	67268, -1000, 595, 858, -1000, 2449, 494, -1000, 2443, 2443,
	56636, 108, 16378, -1000, 1722, -1000, -1000, 1163, -1000, 1358,
	-1000, -1000, -1000, -1000, 16378, -1000, 1334, 46884, 56636, 56636,
	-1000, -1000, 1666, 57842, 1661, 67268, 56636, -1000, -1000, 490,
	488, 1820, 1817, 56636, 56636, 57440, 57038, 56636, 1394, 24304,
	1685, 1760, 66, -1000, 66, 487, 987, 46884, 46884, 1308,
	-1000, -1000, -1000, -1000, -1000, 46884, -1000, -1000, 2447, -1000,
	1087, -1000, -1000, -1000, 1087, 1617, 1275, 46884, 37538, 758,
	56636, 1398, 66, -1000, 66, 485, 13346, 1367, -1000, 1904,
	-1000, 1577, -1000, -1000, 11262, 66850, -1000, 66850, -1000, 56636,
	-1000, 787, 56636, 38748, 747, 2081, -1000, 1617, 2073, 374,
	-1000, -1000, 31779, -69, 739, 37538, 46884, -60, 37538, 37538,
	37538, 2512, 483, 2510, -1000, 46884, 2072, 1497, 1652, 2195,
	675, 56636, 1444, -1000, 24304, 1340, -1000, 30967, 804, 56636,
	1211, 94, -1000, -1000, -1000, -27, 56636, -1000, 2508, -1000,
	-1000, 153, 153, 153, -1000, 150, 1561, -1000, -73, -73,
	-1000, -1000, 1336, 739, -61, 481, -1000, 686, 682, 29737,
	37538, -111, -1000, -1000, -1000, -1000, -1000, 46884, 56636, 576,
	1881, 56636, -1000, 739, -1000, 757, -1000, 1059, -69, -69,
	-1000, 1137, 1133, 56636, -1000, 13346, 56636, 46884, 13346, 46884,
	-1000, -1000, -1000, -1000, -1000, 1250, -1000, 24304, -1000, -1000,
	-1000, 17685, -1000, -1000, -1000, 46884, -176, 24304, 24304, 5494,
	4121, 24304, 25597, 25597, -1000, 24304, 3655, -1000, -1000, -1000,
	-1000, -1000, 1944, 479, 24304, 67268, 3843, 1058, -1000, 304,
	61446, 358, -1000, 24304, -1000, 303, 17254, -1000, 65707, -22,
	-22, -1000, 2468, 1723, 1355, 1251, 1154, 2446, 10846, -184,
	-116, -1000, -1000, 484, -1000, 2148, -1000, 24304, 65782, 10430,
	-1000, 32591, 767, 1444, -1000, -1000, 2443, 698, -1000, -1000,
	-1000, 698, -1000, 64494, 67268, 67268, 24304, 24304, -1000, 24304,
	24304, 24304, -1000, -1000, 24304, -1000, -1000, 1942, 24304, -1000,
	67268, 67268, 25597, 25597, 25597, 25597, 25597, 25597, 25597, 25597,
	25597, 25597, 25597, 25597, 25597, 25597, 25597, 25597, 25597, 25597,
	25597, 1791, 25597, 2429, 2429, 2429, -1000, 1955, 1942, 24304,
	24304, 67268, 299, 298, 297, -1000, 24304, -184, -1000, -1000,
	1336, -1000, 1919, -1000, -206, -1000, 1788, -1000, -1000, 1919,
	1919, -117, 66850, -1000, 1356, -1000, 473, 24304, 28093, -1000,
	640, -1000, -119, -1000, 48504, -1000, 637, -246, -1000, 681,
	-1000, 374, -1000, -1000, -1000, 128, 48504, -1000, -124, -1000,
	2389, 295, 13346, -1000, -1000, -1000, -1000, -1000, 66, -69,
	1460, -1000, 2445, -1000, 636, 292, 2443, 291, 290, -69,
	56636, -1000, -62, -1000, -1000, -1000, -1000, -1000, -1000, 937,
	931, -1000, 2071, -1000, 1647, -1000, 802, -1000, 1183, 24304,
	24304, 470, 469, 1353, 2507, 2070, 1561, 2066, 1561, -1000,
	-1000, 728, -1000, 66850, 467, 463, -1000, -63, 1212, -1000,
	-1000, 24304, 24304, 49312, -1000, 2286, -1000, 929, -1000, -1000,
	-1000, 1617, 927, -1000, -1000, 1389, -1000, -1000, -1000, -1000,
	24304, -1000, -67, 910, 739, 1941, 1071, -1000, 2506, 2504,
	2503, 276, -68, -1000, 2387, 1507, 56636, 46884, 46884, 2386,
	523, -1000, 2443, -1000, -1000, -1000, -1000, 754, -1000, -1000,
	2502, -1000, 811, 13346, 46884, 2054, 1786, 675, 37944, -1000,
	754, 1847, -1000, 66850, -1000, 1211, 16809, 2273, -125, -1000,
	127, -1000, -1000, -1000, 764, 32185, 28093, 24304, 2500, -126,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48910, 48910,
	37538, 37538, 37538, 739, 56636, 56636, 38748, 2497, 462, 56636,
	56636, 461, -1000, -1000, -1000, 1458, 46884, -1000, -1000, 750,
	-1000, -1000, 1407, 1555, -1000, 1466, 64188, -1000, 2292, 13346,
	2395, 6574, 24304, 24304, 702, 424, 262, 6574, 24304, 24304,
	67268, 459, -127, 24304, 24304, -1000, 24304, 635, 66850, 2464,
	24304, 275, 274, 267, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 264, -1000, -1000, -1000, -1000, -1000, 66850, 24304,
	124, -1000, -1000, -1000, 60656, -1000, 24304, 263, 260, -1000,
	-1000, -1000, 258, 245, 61140, 8248, 64113, 63807, 63732, 66850,
	1955, 66850, -1000, -1000, 610, 610, 1081, 1081, 1081, 1081,
	2429, 396, 1097, 959, 593, 593, 593, 829, 504, 504,
	593, 593, 593, 1938, 1748, 460, 4397, -1000, -1000, 66850,
	66850, 239, -1000, -1000, -1000, -184, 238, 1912, 2333, -1000,
	28093, 1912, 1912, -1000, -1000, 56636, 66850, -1000, -233, -1000,
	2443, -1000, -1000, 1812, -1000, 9594, -1000, 13346, -1000, -1000,
	30559, -1000, 458, -1000, -13, -1000, -1000, 622, -1000, -1000,
	237, -1000, -1000, -69, 56636, 56636, 56636, 2053, -1000, 3784,
	-1000, 63426, -132, -1000, 65020, 24304, 56636, -1000, 1339, 1897,
	830, -1000, 56636, -1000, 56636, -1000, -1000, 56636, 56636, 46884,
	56636, 56636, -133, 66850, -70, -1000, 680, -1000, 46884, 46884,
	37538, -135, 13346, -1000, 37538, 951, -1000, -1000, -1000, 1880,
	66, -1000, 2491, 457, 1617, 66, -1000, 422, -1000, -1000,
	456, 56636, 1486, 446, 13346, 1790, 675, 37944, -1000, 1019,
	1211, -1000, -1000, -71, -1000, 439, 66, 56636, 2490, 1444,
	-1000, -72, 66850, -1000, 679, -1000, -140, -1000, -1000, 226,
	-1000, 2244, 2238, -1000, -1000, 24304, 438, 436, 56636, 1662,
	-1000, -1000, -1000, -1000, 13346, 1048, -1000, -1000, -1000, 2292,
	6574, 6574, 24304, 24304, 24304, 6574, 459, -141, -1000, 6574,
	6574, -184, -1000, -1000, 65707, -1000, -1000, -1000, -1000, 66850,
	10014, 1408, -1000, 63351, -1000, -1000, -1000, -1000, 24304, 24304,
	-1000, -1000, -1000, -1000, -1000, 25597, 1935, 432, 67268, -1000,
	-1000, 761, 24304, 24304, 1788, 761, 761, -143, 691, -1000,
	-1000, -1000, 2443, -13, -1000, 2484, 13346, -1000, -1000, -1000,
	-1000, -1000, 56636, -1000, 56636, -1000, 13346, 56636, 1940, 1637,
	-1000, -1000, 1816, 425, 25597, 46884, 649, 1952, 1357, 24304,
	-1000, -146, -152, 1623, -1000, -1000, 1605, 24304, -1000, 67268,
	1561, 1561, -154, -160, -1000, 905, 903, 901, 56636, 16378,
	-1000, -1000, -1000, 898, -1000, -73, 24304, 1398, 1898, 748,
	-1000, 38748, 747, -1000, -1000, -1000, 24304, -1000, 46884, 24304,
	1481, -1000, 675, 37944, -1000, 2195, -1000, 2203, 56636, 2266,
	-1000, -1000, -1000, 1847, 423, -1000, 739, 410, 409, -161,
	24304, 24304, -162, -75, -1000, 644, 626, -1000, -1000, 46884,
	-1000, 6574, 6574, 6574, -1000, 195, -1000, -1000, 1444, 2330,
	-1000, 63045, 62970, 3891, 25597, 67268, -163, -1000, 56636, 66850,
	-184, -1000, -1000, -1000, 48504, 359, -1000, -1000, 1734, -1000,
	-1000, -1000, 56636, 1642, -1000, -1000, 24304, 4397, 408, 24304,
	-1000, -1000, 1878, 1978, 1880, 404, -1000, -1000, -1000, -1000,
	1313, -1000, -1000, 66850, 2309, -1000, -1000, 397, 383, 56636,
	56636, 382, 674, -1000, 381, 66850, 747, -1000, 1417, -1000,
	1795, 194, 2381, -168, 811, -177, 46884, 37944, -1000, 1786,
	1011, -179, 56636, 1211, -1000, -1000, 37538, 37538, 1357, -182,
	-185, -1000, 1662, -1000, 56636, -1000, 56636, -1000, -1000, 1549,
	24304, -1000, -1000, 3891, -190, -1000, -81, -1000, 2380, -1000,
	-1000, -1000, -1000, 2043, 62664, 1749, 56636, 4675, 1973, -1000,
	-1000, 1398, 56636, 46884, 810, 13346, 1407, 1407, -1000, -1000,
	24304, 16378, 24304, -1000, 46884, -1000, 2236, 1880, 66, 1357,
	379, 1357, 378, -1000, 1790, 1111, -1000, 764, -1000, -1000,
	-192, -193, 1880, 1357, -1000, -1000, -195, -200, 193, 25166,
	25166, 25166, -184, -1000, 56636, 376, 2027, -1000, 1472, 1401,
	110, 826, -1000, -1000, 1952, -203, 374, -1000, 24304, -1000,
	-211, -1000, 797, -212, -1000, 794, -214, -1000, -217, 372,
	-1000, 1398, 748, 1880, 24304, 1880, 24304, -1000, 32185, -1000,
	739, 739, 1398, 1880, -1000, -1000, -1000, -1000, -1000, 26028,
	1545, 1193, 64945, -1000, -1000, -1000, -1000, 56636, -1000, 1476,
	1475, 1129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1749, 66850, -1000, 1407, 1892, -1000, 1407, 1930, -1000, -1000,
	56636, 747, -1000, 1398, -219, 1398, -220, -201, -1000, -1000,
	-1000, 1398, 2398, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2224, -1000, 819, 1418, 1418, 1472, -1000, 367, -1000, 365,
	-222, -1000, 763, 1357, 763, 1357, -1000, -1000, 24735, -1000,
	2413, -1000, -1000, 1740, -1000, 1952, 24304, 24304, 1521, -1000,
	2482, 1880, -1000, 1880, -1000, -1000, -1000, -1000, -1000, -225,
	-230, -1000, -1000, -1000, -1000, 1398, 1398, 1398, 870, 763,
	763, -1000, 364, -1000, -1000, 24304, -236, 1398, -1000,
}
var sqlPgo = [...]int{

	0, 3056, 3053, 2075, 3052, 3051, 3048, 3047, 3046, 3042,
	3041, 3038, 3037, 3035, 3033, 3031, 3030, 3029, 3027, 3026,
	3025, 3024, 3020, 3018, 3017, 3015, 3014, 3013, 3012, 3011,
	3010, 3009, 3008, 3007, 3005, 3004, 3003, 3002, 3001, 3000,
	2999, 2994, 2993, 2990, 2986, 34, 2982, 2974, 2973, 2972,
	2971, 2970, 2969, 2968, 2967, 2966, 2963, 2961, 2958, 2955,
	2950, 2949, 2947, 2946, 2945, 2937, 2935, 2933, 2932, 2931,
	2930, 2927, 2923, 2921, 2919, 116, 2918, 2917, 2916, 2914,
	2911, 2910, 2908, 2907, 2906, 2905, 2904, 2902, 2901, 2900,
	91, 2899, 2898, 2897, 2895, 2892, 2890, 2889, 2885, 2883,
	2881, 186, 2880, 2876, 2874, 2873, 2871, 2868, 2862, 2861,
	2857, 2856, 2854, 2852, 2848, 2847, 2846, 2845, 2843, 2837,
	2836, 2834, 2832, 2831, 2830, 2829, 2828, 2826, 199, 133,
	2825, 2824, 2823, 2822, 2821, 2820, 86, 84, 19, 2814,
	85, 147, 185, 5665, 173, 2813, 2812, 2811, 2810, 2809,
	59, 122, 128, 123, 120, 82, 2808, 2807, 64, 44,
	31, 28, 95, 2806, 2805, 2804, 2134, 87, 2803, 2802,
	193, 168, 2800, 1462, 2797, 125, 100, 76, 107, 68,
	2795, 104, 16, 2794, 127, 51, 2793, 121, 74, 29,
	5169, 5879, 110, 198, 71, 88, 177, 176, 159, 157,
	129, 305, 2792, 181, 2785, 119, 145, 2783, 2782, 2781,
	52, 141, 6, 3, 132, 2, 2779, 11, 2778, 14,
	2777, 2776, 2775, 2774, 27, 124, 2772, 35, 36, 2771,
	18, 153, 160, 2770, 167, 2769, 89, 2768, 188, 148,
	144, 20, 166, 2767, 2766, 2761, 2760, 2759, 92, 24,
	93, 2758, 2757, 102, 180, 2756, 70, 126, 69, 96,
	200, 75, 155, 101, 162, 165, 2755, 2754, 2752, 175,
	2749, 2744, 113, 152, 2742, 2739, 33, 57, 179, 45,
	2737, 2733, 118, 2731, 146, 2727, 2724, 2723, 197, 130,
	151, 7, 60, 90, 26, 10, 170, 112, 80, 72,
	2722, 3068, 1127, 1575, 2721, 106, 78, 41, 77, 103,
	191, 39, 2720, 2718, 1205, 2716, 2713, 2712, 2711, 136,
	2710, 2706, 2705, 105, 37, 65, 2704, 117, 54, 339,
	195, 63, 154, 163, 182, 2702, 135, 2701, 138, 97,
	2700, 143, 178, 73, 2693, 967, 109, 2691, 161, 2689,
	2688, 2686, 2685, 212, 2683, 2682, 507, 2678, 108, 2672,
	2666, 139, 158, 67, 30, 2658, 56, 156, 2654, 142,
	58, 2647, 111, 32, 0, 5989, 4383, 5232, 2646, 5856,
	2644, 150, 98, 2643, 2642, 2641, 2640, 38, 13, 5,
	8, 17, 15, 1420, 391, 2638, 2635, 81, 94, 114,
	2632, 196, 164, 2630, 2627, 2626, 55, 2625, 25, 2624,
	22, 2623, 2622, 23, 9, 2621, 2616, 184, 2613, 2612,
	2611, 2610, 2404, 2609, 190, 2608, 99, 2607, 134, 131,
	2606, 2605, 2603, 2596, 187, 2595, 189, 2594, 12, 21,
	1, 2593, 2592, 2591, 149, 4, 2159, 2590, 2589, 66,
	140, 62, 2588, 2587, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 424, 424, 18, 28, 19, 29, 13, 426,
	426, 426, 426, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 423, 423, 154, 154, 153, 149,
	149, 427, 427, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 372, 372, 373, 373, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 432, 432, 433,
	433, 434, 434, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	226, 226, 204, 204, 50, 419, 419, 239, 239, 340,
	340, 62, 62, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 71, 71, 71, 72,
	72, 72, 69, 69, 69, 67, 67, 67, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 240, 240, 73,
	73, 73, 73, 73, 73, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 342, 342, 74, 74,
	312, 312, 77, 77, 270, 270, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 89, 89, 89, 89, 422,
	422, 232, 232, 170, 170, 170, 170, 84, 84, 84,
	84, 85, 85, 85, 86, 86, 134, 134, 95, 95,
	95, 95, 95, 94, 94, 94, 94, 94, 94, 40,
	40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 45, 45, 97, 97, 428, 428, 99,
	96, 96, 96, 98, 98, 98, 98, 100, 101, 101,
	101, 101, 101, 101, 102, 102, 366, 366, 247, 247,
	364, 364, 380, 380, 365, 365, 208, 208, 208, 208,
	208, 209, 209, 209, 371, 371, 371, 371, 371, 371,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 119, 119, 119,
	128, 128, 128, 128, 128, 128, 128, 121, 121, 121,
	112, 112, 104, 104, 104, 104, 108, 108, 108, 108,
	108, 105, 105, 109, 109, 111, 111, 113, 113, 113,
	113, 113, 113, 106, 106, 106, 106, 115, 115, 115,
	115, 114, 114, 124, 124, 124, 124, 124, 124, 326,
	326, 120, 120, 120, 120, 123, 123, 123, 123, 261,
	261, 118, 118, 118, 122, 122, 125, 125, 125, 125,
	107, 107, 107, 437, 437, 437, 126, 126, 117, 117,
	127, 127, 127, 127, 127, 127, 127, 116, 116, 116,
	425, 425, 110, 420, 420, 417, 417, 417, 417, 417,
	417, 417, 418, 418, 421, 421, 82, 82, 82, 55,
	55, 438, 438, 438, 56, 56, 439, 439, 439, 436,
	436, 436, 436, 436, 436, 436, 436, 210, 210, 211,
	211, 293, 293, 293, 293, 293, 212, 212, 156, 156,
	156, 215, 216, 216, 213, 213, 214, 214, 214, 218,
	218, 217, 220, 220, 219, 292, 385, 385, 386, 386,
	386, 386, 386, 386, 386, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 383, 383, 383, 384, 381,
	381, 382, 382, 382, 382, 440, 440, 440, 440, 440,
	440, 441, 441, 291, 291, 224, 224, 388, 388, 388,
	388, 389, 389, 389, 389, 389, 392, 391, 390, 390,
	390, 390, 390, 322, 322, 322, 59, 59, 59, 258,
	258, 257, 257, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 131, 131, 57,
	57, 57, 162, 162, 54, 54, 54, 443, 443, 58,
	58, 58, 444, 444, 61, 61, 61, 61, 61, 61,
	53, 53, 53, 53, 53, 445, 445, 276, 276, 275,
	275, 230, 230, 328, 174, 174, 150, 150, 150, 21,
	23, 23, 16, 16, 16, 16, 16, 16, 31, 31,
	32, 32, 27, 27, 429, 429, 430, 430, 83, 83,
	87, 87, 87, 93, 93, 130, 130, 130, 130, 130,
	130, 130, 35, 35, 35, 35, 47, 47, 47, 47,
	91, 447, 447, 447, 92, 92, 446, 446, 169, 169,
	169, 169, 171, 171, 288, 288, 289, 289, 448, 448,
	290, 290, 290, 164, 163, 165, 165, 52, 52, 52,
	158, 158, 159, 159, 160, 160, 161, 161, 449, 449,
	80, 80, 80, 133, 133, 203, 203, 284, 284, 284,
	225, 225, 179, 179, 287, 287, 285, 285, 285, 285,
	256, 256, 256, 132, 132, 235, 235, 249, 249, 250,
	250, 337, 337, 251, 90, 90, 143, 143, 141, 141,
	141, 141, 141, 141, 450, 450, 142, 142, 142, 144,
	144, 144, 144, 144, 144, 144, 147, 147, 147, 147,
	148, 148, 148, 146, 146, 399, 399, 399, 401, 401,
	402, 398, 398, 400, 400, 442, 442, 260, 260, 260,
	222, 223, 221, 221, 451, 451, 228, 228, 227, 229,
	229, 327, 327, 327, 254, 254, 254, 254, 279, 279,
	277, 277, 278, 278, 280, 280, 281, 281, 281, 282,
	282, 283, 283, 253, 253, 308, 308, 145, 145, 145,
	234, 234, 234, 236, 236, 299, 299, 299, 300, 300,
	298, 298, 298, 298, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 330, 330, 237, 237, 331, 286, 286,
	415, 415, 415, 416, 416, 325, 325, 332, 332, 332,
	332, 332, 332, 323, 323, 324, 324, 338, 339, 339,
	264, 264, 264, 264, 262, 262, 263, 263, 333, 333,
	333, 333, 255, 255, 334, 334, 334, 335, 294, 295,
	295, 343, 343, 343, 343, 358, 233, 233, 233, 452,
	452, 344, 344, 344, 344, 344, 344, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 348,
	348, 348, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	357, 357, 357, 357, 357, 349, 349, 354, 354, 355,
	355, 355, 350, 351, 356, 356, 356, 356, 453, 453,
	360, 360, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 346, 346, 346, 353, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 271, 271,
	272, 272, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 303, 303, 303,
	303, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 393, 393, 393, 393,
	393, 393, 393, 393, 396, 396, 397, 397, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 403, 403, 404,
	404, 406, 406, 407, 407, 408, 409, 409, 409, 410,
	411, 411, 405, 405, 412, 412, 412, 412, 413, 413,
	414, 414, 414, 414, 414, 314, 314, 315, 315, 321,
	321, 321, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 172, 172,
	172, 172, 172, 245, 245, 243, 243, 243, 246, 246,
	244, 244, 242, 242, 241, 241, 311, 311, 309, 309,
	313, 313, 265, 265, 359, 359, 359, 359, 359, 359,
	359, 266, 266, 266, 274, 267, 267, 268, 268, 268,
	268, 268, 305, 306, 269, 269, 269, 307, 307, 316,
	320, 320, 319, 318, 318, 317, 317, 296, 296, 297,
	297, 252, 252, 454, 454, 248, 248, 336, 336, 336,
	336, 206, 206, 238, 238, 205, 205, 198, 198, 199,
	199, 199, 199, 231, 231, 361, 361, 361, 362, 363,
	310, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 194, 193, 192, 191, 341,
	200, 200, 201, 201, 201, 202, 202, 202, 202, 173,
	173, 195, 195, 196, 197, 197, 190, 190, 190, 166,
	166, 166, 167, 167, 168, 168, 370, 370, 368, 368,
	368, 369, 369, 369, 369, 367, 367, 367, 367, 367,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 376, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 379, 379,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 6, 1, 2, 1, 3, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 6, 4, 1,
	0, 2, 3, 3, 3, 7, 5, 3, 3, 2,
	0, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 6, 3, 4, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 10,
	13, 0, 2, 3, 9, 12, 0, 2, 3, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 5, 8, 5, 11, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 2, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 1,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -431,
	82, -400, -65, -68, -70, -435, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -399,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -376, -379, 4, -374,
	-377, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 374, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -422, -232, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -422, -232, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -366, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -417, 2, 4, -377, -374,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -432, 226, 264, 280, 317, 330, 359, 369, 380,
	-436, 347, 56, 396, -443, 385, 110, -275, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -434, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -417, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -326, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -425, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -442, 2, 360, -446, 2, 378,
	378, 2, -446, 2, -446, 2, -169, 2, 378, 375,
	-447, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -450, 145,
	-227, -228, 389, 190, 118, 256, -141, -143, 2, -399,
	-364, 2, -301, -380, -303, 433, 434, 428, 239, 420,
	-314, 101, 390, 251, -379, -304, -316, 119, 311, -246,
	8, 9, 5, 6, 7, -173, -345, -310, -353, 382,
	130, 242, -202, 448, 10, 442, -396, -143, -315, 33,
	156, 54, -368, -201, -347, -355, -351, -352, -452, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -393,
	-394, -374, -375, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -356, 97, 371, 372, 373, 374, 200,
	201, -166, -376, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -395, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -453, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -401, 287, -402, -184, -401, 445, 445, 447, 445,
	-221, -222, -223, 2, 26, 108, 442, 2, -329, 2,
	440, -333, -143, 208, -332, 442, -330, -191, 252, -397,
	312, -393, -394, -173, -190, -201, 4, -3, -224, 442,
	444, 360, 65, 2, -270, 442, -166, 26, -140, 251,
	375, 447, -312, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -289, 2, -290, -163,
	-164, -165, 196, 278, 285, 419, -364, -428, 148, 425,
	375, -364, -247, 444, 2, -333, 166, -191, 2, -188,
	-367, 4, -374, -377, -375, -378, 64, -376, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -379, 2, -333, 166,
	2, -192, 166, -333, -195, 2, -372, 166, -370, 10,
	-369, 5, 4, -374, -377, -375, 2, -175, -166, 2,
	-187, -367, 2, -205, 166, -191, 375, 447, -238, -198,
	-199, -231, -166, 444, -301, 2, -90, 2, -301, 166,
	2, -90, 166, 2, -301, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -433, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -444, 287, -180, 2, -166, 145,
	-372, 166, 2, -372, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -334, 2, -335, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -240, 166,
	2, -191, -240, 166, 2, -240, 166, 2, -206, 166,
	2, -205, -175, 166, 2, -373, 166, 2, -372, -373,
	166, 2, -342, 2, -341, -369, 403, -75, 442, 331,
	442, -372, -191, -301, -90, 148, -301, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -372, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -420, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, -261, 2, 413, 148, 2, 5, 2,
	196, 278, 348, 2, -191, -437, 2, 360, 407, 323,
	2, 2, 72, 73, 148, 2, 148, 419, 2, -255,
	-333, -288, -289, -288, 375, -171, -450, -227, -228, -128,
	335, 2, 2, -450, -254, -277, -278, 218, 132, 247,
	-260, 26, 108, -260, -260, 48, 443, 443, 11, 12,
	63, 37, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 427, 202, 203, 78, 426, 425,
	71, 224, 313, 133, 134, 135, 136, 295, 173, 174,
	175, 14, 15, 16, 30, 255, 217, 420, 169, 338,
	428, 17, 18, 19, 194, 195, 241, 40, 170, -172,
	-207, -301, -301, -301, -301, -301, 261, 442, -252, -296,
	440, -143, 442, 442, 442, 5, 442, 5, -363, 8,
	-143, -301, -314, 443, -244, 442, -143, -314, -309, 442,
	311, 440, 442, -317, -301, 444, -403, 414, -349, 442,
	275, -348, 442, -348, -348, 408, -346, 442, 421, 415,
	442, -346, 442, 442, 145, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 408, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 447, -401,
	-224, 442, -248, -336, -301, 435, -248, -248, 251, -241,
	-301, 83, -264, 199, 234, 149, 214, 306, 181, -363,
	-75, -298, 448, -325, 421, -143, -330, -190, -143, -332,
	442, -329, -325, 435, -191, 442, 148, 442, 444, 148,
	-231, -367, -191, -200, -201, -241, -372, -417, -231, -170,
	34, -311, -343, -344, -357, -345, -354, -350, -353, 291,
	292, 290, 294, 293, 44, 50, 49, 369, 232, 325,
	326, 341, 327, 328, 42, 399, 172, 248, 250, 184,
	4, 43, 404, -356, 191, 183, 189, 185, 340, 186,
	187, 188, 41, 286, 141, 142, 140, 111, 100, 99,
	244, 46, 45, 97, 371, 372, 373, 374, 200, 201,
	405, 351, 57, 58, -417, -231, 145, -366, -241, 34,
	-289, 2, -448, 447, 216, -209, 223, 238, 159, 252,
	417, -371, 5, 4, -310, -322, 101, 220, -353, 9,
	434, -361, 8, 433, -365, -364, 85, 444, -367, -152,
	296, -151, 23, 27, 112, 401, 124, -214, 178, 267,
	119, 344, -424, -426, 316, 367, 368, 74, 245, 296,
	119, -257, -259, 34, 93, 236, 263, 51, 164, 227,
	228, 346, 409, 119, 296, 413, 119, -426, 296, -426,
	-154, 344, -424, -426, 316, 296, -153, -214, 119, 448,
	-372, -238, 447, 447, -367, 435, 119, 119, 119, 119,
	2, 2, 239, 2, 2, 2, 150, -436, -434, 2,
	2, 2, -191, 166, -192, 166, 2, -195, 407, -226,
	251, -419, -239, 360, -191, -162, -398, 413, 239, 239,
	34, 442, 2, -177, 166, 2, -167, -166, 176, -398,
	239, -334, -203, -191, -203, 334, -184, 34, -298, 119,
	2, 2, 2, -166, -155, 447, 53, 302, 119, -155,
	119, -155, 119, -155, 447, 119, -155, 119, 447, 119,
	119, 443, 447, -342, -372, -138, 413, 148, 82, 442,
	-373, -175, 2, -191, 2, 360, 200, -372, -372, -366,
	26, 336, 2, 73, -191, -421, 145, -418, 307, -417,
	-191, -191, -191, -191, -191, 145, 2, 377, 2, 377,
	2, -166, 67, -166, 216, -191, 145, 360, 176, 360,
	-155, 447, -171, -450, -254, -366, -450, -278, -277, -280,
	-301, 26, -283, 139, 235, -301, -303, -142, -142, -142,
	-229, -327, -301, 277, 176, -358, -343, -343, -189, -367,
	371, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, 217, 169, 338, 40,
	170, -301, 375, -301, -301, -301, -301, 231, 239, 242,
	382, 130, 391, 108, 245, -454, 356, 36, -307, -143,
	-245, 442, -321, 31, 343, 26, -314, 442, 2, -296,
	-301, -297, -242, -241, -241, 443, 406, 26, 108, 435,
	2, 8, -271, -273, 418, 230, 98, 161, 229, -272,
	321, 443, 447, 34, 443, -301, -242, -313, -309, -241,
	-320, -319, 410, -367, 435, -404, 138, 155, 8, -363,
	8, 371, 371, 8, 8, 8, 442, 443, 2, 443,
	2, 443, 2, 443, 2, 443, 2, -301, -301, -301,
	-301, -301, -301, -301, -241, -265, 2, -359, -241, 4,
	418, 230, 98, 161, 229, 321, -265, 2, -266, 2,
	-301, -241, -267, -302, -303, 433, 434, 428, -314, -268,
	2, -301, -242, -301, 47, 211, 376, -269, -301, 148,
	-241, -241, 2, -241, 2, -402, 34, -241, -234, 447,
	148, 34, 4, -234, -234, 442, 443, 447, 199, 199,
	-329, -264, 199, -262, 259, -262, -262, -415, 442, 441,
	-325, -176, 440, 449, -367, -324, -323, 34, -184, 257,
	-325, -325, 444, 443, -324, -191, 442, -241, -367, 349,
	443, 444, 194, 194, 443, -138, 375, 413, -75, 443,
	447, -233, 33, 440, -273, 442, -360, 408, 442, 442,
	148, -232, -428, 443, 378, -290, -208, 285, 342, 297,
	329, 9, 8, 8, 447, -367, 447, 375, -429, 76,
	65, -292, 166, 65, -381, -178, 76, -382, -166, 60,
	390, 277, 147, -429, 76, -429, 76, 76, 334, 347,
	48, -333, 37, -90, 212, 148, 419, 360, 375, -333,
	-259, -343, 93, 227, 228, 48, -362, -361, 434, -362,
	48, -362, -362, -362, 413, -192, -333, 375, 268, -372,
	375, 447, 37, -90, 212, 148, 375, -205, -176, -339,
	-338, 422, -198, -166, 444, -301, -90, -301, -90, 119,
	2, -444, 207, 442, -224, 239, -258, -257, 239, -194,
	2, -191, 148, -231, -340, 192, 447, -239, 268, 119,
	119, 442, 116, 283, 2, 251, 239, -177, 166, -158,
	363, 119, -295, -294, 411, -284, -90, 442, 101, 34,
	-284, -249, -250, -337, -251, -178, 442, -184, -166, 2,
	-191, -240, -240, -240, -205, -206, -175, -372, -373, -373,
	-75, -341, 443, 443, -137, 254, -136, -166, 5, -140,
	398, -211, -293, -292, -383, -384, -381, 217, 176, 390,
	193, 131, -138, -338, -339, -339, -191, 145, -231, -231,
	331, 145, 145, 444, -261, 283, 95, 360, 267, 176,
	-191, -205, -191, -333, -450, -281, -361, 442, -282, 311,
	312, 447, -150, 35, 106, 204, -191, 419, 117, -301,
	-301, 375, -454, 356, -307, 117, -301, 231, 242, 382,
	130, 391, 108, 245, 148, 442, -302, -302, 443, -243,
	-301, -301, 441, 451, 443, -451, 447, -227, -301, -241,
	-241, 443, 443, 375, 375, 375, 375, 442, 444, -241,
	-231, 441, 441, 447, 443, -318, -319, 113, -301, 444,
	-409, 260, 442, 442, 443, 443, 447, 443, 419, 419,
	443, 443, 443, -301, 34, 447, 447, 447, 443, 447,
	447, 447, 443, 443, 148, 443, 443, -274, 271, 443,
	11, 12, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 425, 71, 224, 313, 14, 15,
	16, 194, 170, -302, -302, -302, 443, -305, -306, 148,
	145, 34, -269, -269, -269, 443, 148, -241, 443, 443,
	442, 443, -295, -336, -236, 2, -329, -186, -367, -295,
	-295, -241, -301, -329, -329, -263, 398, 251, 199, -329,
	-323, 443, -416, -363, -325, -324, -363, -300, -299, 146,
	237, -184, -224, -324, -324, -367, -325, 443, -237, -331,
	-397, -451, 444, -367, -129, 5, 242, -129, 148, -231,
	24, -343, 440, 441, 8, 8, 442, -363, -363, -231,
	148, -364, -289, 388, 69, 285, -364, -151, -191, -178,
	-185, -166, 239, -292, 166, -157, 239, -343, -185, 442,
	442, 204, 204, -178, -185, 166, -178, 166, -185, -185,
	-423, 285, 246, -301, 219, 283, 240, -152, 296, -90,
	-90, 442, -428, 398, 107, -191, -194, 296, -200, -362,
	-362, -257, 296, -192, -372, 413, -175, -153, -90, -90,
	442, -176, -154, 296, -135, 165, 245, 435, -166, 407,
	-166, -210, -211, -166, -438, 415, 413, 119, 119, -224,
	-204, -191, 440, -138, -372, -191, -372, -372, -372, 2,
	442, 2, -191, 119, 251, 239, -159, 114, -449, 425,
	-175, -228, -227, -301, -256, -287, 304, 251, -225, -179,
	-178, 403, -184, -256, -235, 447, 148, 425, 444, -225,
	2, -155, -155, -155, -155, -155, -75, -138, 447, 442,
	425, 425, 442, -372, -372, 443, 447, -191, -177, 176,
	176, -183, -167, -138, -43, 413, 360, 331, 331, -166,
	-187, -175, -191, -188, -205, -282, -301, -327, -191, 448,
	-301, -301, 117, 117, -301, -302, -302, -301, 117, 148,
	442, -301, -311, 30, 30, 443, 447, -297, -301, 443,
	406, -451, -451, -451, 5, 230, 161, 229, -272, 229,
	-272, -272, 8, 435, -367, 443, -309, 115, -301, 370,
	-367, 435, -410, -181, 442, -166, 411, -227, -363, -346,
	-346, 443, -358, -343, -301, -301, -301, -301, -301, -301,
	-305, -301, -358, -343, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, 108, 239, 245, -302, -306, -305, -301,
	-301, -343, 443, 443, 443, -241, -75, -253, 155, -339,
	447, -253, -253, 443, -263, 442, -301, -329, 441, 443,
	447, -324, 441, 447, 450, 425, -224, 444, -323, 443,
	447, -286, 34, 443, -367, -90, 253, 8, 441, 443,
	-363, 443, 443, -231, 375, 375, 119, 239, 400, -385,
	-382, -301, -230, -328, -301, 442, 442, -149, 112, 334,
	-430, 2, 119, -155, 119, -155, 417, 442, 442, 375,
	-429, 76, -241, -301, -139, 101, -366, -426, 375, 375,
	268, -241, 375, -138, 148, 358, 2, 2, 2, 443,
	34, 249, -166, -191, -192, 34, -339, -363, -162, 2,
	-276, 398, -176, -191, 119, -160, 210, -449, -370, -398,
	-279, -277, -256, -248, 240, 75, 443, 447, 444, -295,
	-250, -236, -301, 2, 443, -136, -137, -372, -372, -372,
	-138, -140, -140, -293, 2, 442, -177, -167, 442, 254,
	-191, -261, -216, -215, 267, 245, 252, 443, -150, -176,
	-301, -301, 117, 30, 30, -301, -301, -311, 443, -301,
	-301, -241, 441, 5, -301, 443, 443, 443, 443, -301,
	444, -411, -166, -301, 443, 443, 443, 443, 447, 447,
	443, 443, 443, 443, -306, 148, 108, 245, 442, 443,
	443, -308, 158, 48, -329, -308, -308, -231, -298, -363,
	-299, -176, 440, -367, -331, 442, 444, 441, 443, -178,
	-185, -292, 119, -386, 76, -387, 63, 131, 82, 239,
	242, 390, 277, 60, 101, 289, 34, 443, 443, 447,
	-150, -230, -231, 239, 353, 101, 239, 101, 94, 385,
	-178, -185, -231, -231, -191, -178, -185, 443, 447, 425,
	-194, -192, -372, 443, -176, -373, 371, -212, 179, -90,
	2, 442, -224, -258, -90, 441, 442, -166, 251, 442,
	-176, -161, 209, -449, -370, -158, -256, -285, 442, 251,
	-90, -179, 2, -228, 425, 443, 443, 94, 94, -230,
	442, 442, -231, -44, -45, 176, 76, 270, -188, 360,
	-150, -301, -301, -301, 443, -451, -367, 435, -405, 267,
	443, -301, -301, -302, 148, 442, -311, -406, 412, -301,
	-241, -406, -406, 443, -325, -363, 2, -292, -185, -189,
	-182, -166, 131, 166, 242, 204, 442, -302, -191, 442,
	2, -440, 103, 180, -291, -441, 81, 354, -328, 443,
	443, 242, 242, -301, -343, -155, -155, 443, 443, 375,
	375, 375, -366, -364, 375, -301, -213, -214, 170, -439,
	413, -210, -438, -230, -191, -230, 251, -449, -370, -159,
	109, -231, 76, -279, -307, -138, 442, 442, 443, -230,
	-230, 443, 447, 26, 442, 26, 442, -191, 443, -228,
	48, 443, 443, -302, -311, 443, -407, -408, -181, -324,
	441, -387, -182, 239, -301, -168, 442, -301, 180, 104,
	162, -212, 442, 289, -174, 63, 442, 442, -178, -185,
	442, 425, 442, -438, 265, 94, 236, 443, 34, 443,
	-276, 443, -191, -370, -160, 393, 240, 443, -185, -256,
	-373, -373, -291, 443, 443, -45, -231, -231, -412, 283,
	312, 157, -241, 443, 447, 34, 119, 443, -388, 225,
	-166, 443, 104, 162, -213, -231, -191, -427, 398, -189,
	-218, -217, -215, -220, -219, -215, -241, -364, -241, -191,
	94, -212, -90, -291, 442, -291, 442, -161, 334, -294,
	443, 443, -212, -291, 443, 443, 443, -413, -414, 40,
	387, 85, -301, -413, -413, -408, -410, 131, -389, -392,
	-391, 251, 149, 266, 339, 443, 353, 409, -440, 443,
	-224, -301, 443, 447, 403, 443, 447, 403, 443, 443,
	442, -213, -439, -212, -230, -212, -230, -249, -138, -138,
	-213, -212, -414, 274, 144, 311, 274, 144, -182, -391,
	251, -392, 251, 393, 105, -388, -217, 170, -219, 148,
	-231, -438, -213, 443, -213, 443, -295, -213, 30, -390,
	236, 302, 53, 334, -390, -389, 442, 442, 443, -445,
	411, -291, -445, -291, -414, 22, 242, 101, -440, -241,
	-241, -156, 53, 302, 2, -212, -212, 443, 443, -213,
	-213, -213, 375, -445, -445, 442, -241, 443, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 335,
	336, 338, 339, 340, 342, 343, 345, 347, 349, 351,
	352, 354, 356, 357, 358, 359, 360, 362, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 410, 0, 835, 837, 839, 841, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 289, 290, 292, 294, -2, -2, 0, 0,
	397, 399, 0, 0, 419, 420, 0, 924, -2, 413,
	415, 417, 480, 482, 484, 486, 488, 490, 492, 493,
	495, 497, 499, 501, 503, 505, 507, 509, 511, 513,
	515, 517, 519, 521, 523, 525, -2, -2, -2, 0,
	-2, -2, -2, 853, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 963,
	296, 298, 300, 302, 304, 0, -2, 977, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 939, 941, 943, 945, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 337,
	341, 344, 346, 348, 350, 353, 355, 361, 363, 365,
	726, 1558, 1571, 1572, 1573, 1576, 1577, 1578, 1579, 1580,
	1581, 1902, 1982, 1983, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 0,
	375, 373, 1552, 376, 1739, 378, 380, 283, 284, 285,
	286, 287, 288, 0, 152, 0, 390, 384, 389, 391,
	393, 394, 395, 396, 371, 369, 0, 390, 1603, 388,
	833, 834, 828, 829, 1772, 863, 409, -2, -2, -2,
	1871, -2, 441, -2, 448, 1874, 1774, 451, 0, 453,
	-2, 456, 836, 838, 840, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1637, 1529, 1573, 1532, 1527, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 198, 200,
	203, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	650, 0, 0, 655, 777, 778, 799, 0, 0, 0,
	0, 291, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 231,
	329, 330, 0, 964, 0, 0, 0, 150, 143, 0,
	0, 638, 398, 400, 0, 142, 0, 0, 832, 0,
	414, 416, 418, 481, 483, 485, 487, 489, 491, 494,
	496, 498, 500, 502, 504, 506, 508, 510, 512, 514,
	516, 518, 520, 522, 524, 526, 527, 0, 0, 0,
	0, 0, 531, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 530, 532, 533, 534,
	0, 579, 620, 621, 0, 768, 965, 865, 843, 856,
	865, 845, 846, 847, 848, 849, 854, 855, 858, 0,
	850, 851, 852, 34, 36, 38, 40, 42, 44, 255,
	257, 259, 261, 265, 267, -2, 937, 938, 297, 299,
	301, 303, 305, 401, 0, 403, 0, 531, 928, 0,
	-2, 0, 969, 969, 969, 0, 0, 938, 936, 0,
	406, 407, 460, 461, 1192, 0, 0, 0, 0, 0,
	1427, 1276, 0, 462, -2, 1307, 1309, 1850, 1871, 1426,
	1311, 1312, 1313, 1314, 1315, 0, 0, 1318, 0, 1320,
	1321, 1322, 1323, 0, 1325, 0, 1329, 1330, 1331, 0,
	1855, 1506, 1569, -2, 1097, 1098, 1099, 1100, 1101, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1565, 0, 1398,
	1345, -2, 1590, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1646, -2, -2, -2, -2,
	-2, -2, -2, 1153, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1885, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 0, 1839, 1856, 1857, 1862, 1864, 1858,
	1847, 1368, -2, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1154, -2,
	1851, 1852, 1867, 1868, 1873, 1878, 1879, 1854, 1863, -2,
	-2, 955, 1747, 958, 726, 956, 940, 942, 0, 944,
	0, 0, 0, 949, 972, 970, 0, 1008, 953, 954,
	964, 1023, 1046, 0, 1028, 0, 1046, 1068, 0, 1033,
	1767, 1346, 1347, 0, 1573, 1570, -2, 2, 0, 0,
	0, 0, 0, 194, 372, 0, 377, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 411, 412,
	0, 436, 0, 440, 1846, -2, -2, 444, 866, 870,
	871, 872, 0, 0, 0, 0, 450, 0, 0, 437,
	438, 454, 457, 0, 52, 0, 1856, 1068, 53, 0,
	1542, 1595, 1596, 1597, 1598, 1599, 1885, 1901, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 55, 0, 1856,
	58, 0, 1856, 0, -2, 62, 0, 1856, 153, 154,
	1586, 1587, 1591, 1592, 1593, 1594, 65, 0, 1548, 67,
	0, 1545, 75, 0, 1856, 1526, 0, 0, 630, 1523,
	1528, 631, 1533, 0, 176, 177, 178, 179, 180, 1856,
	182, 183, 0, 185, 186, 1856, 188, 189, 0, 191,
	206, 207, 0, 209, 0, 1856, 0, 0, 0, 215,
	-2, 232, 0, 229, 0, 219, 220, 222, 223, 224,
	225, 226, 0, 0, 0, 783, 271, 269, 1553, 0,
	-2, 1856, 771, 774, 1856, 776, 788, 1556, 0, -2,
	0, 962, 1856, 879, 651, 652, 653, 654, 0, 282,
	0, 892, 0, 894, 0, 914, 1074, 1023, 233, 234,
	235, 236, 237, 1856, 0, 0, 0, 242, 0, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 135, 1856,
	308, 327, 135, 1856, 311, 135, 1856, 314, 135, 1856,
	317, 1521, 135, 1856, 320, 321, 1856, 323, 155, 324,
	1856, 326, 0, -2, 366, 1559, -2, 332, 0, -2,
	0, 167, 0, 636, 637, 0, 830, 831, 421, 0,
	0, 528, 529, 0, 0, 539, 540, 541, 542, 1745,
	1661, 545, 0, 548, 569, 583, 0, 0, 0, 552,
	554, 635, 556, 0, 0, 558, 0, 560, 0, 562,
	0, 564, 0, 566, 568, 570, 584, 572, 0, 0,
	0, 582, 0, 587, 588, 0, 0, 593, 594, 595,
	0, 597, 598, 599, 600, 0, 602, 603, -2, -2,
	607, 609, 0, 615, 0, 619, 0, 535, 536, 135,
	1072, 842, -2, 844, 0, 860, 931, -2, 0, 402,
	0, 405, 935, 929, 934, 986, 987, 0, 0, 0,
	0, 967, 968, 0, 0, 0, 926, 927, 0, 0,
	0, 0, 1432, 1433, 1434, 1435, 1436, 1437, 1440, 1441,
	1438, 1439, 1442, 1443, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 1446, 1447, 0, 0, 1449, 0, 1451, 0,
	0, 0, 0, 0, 0, 1255, 1257, 1514, 0, 0,
	1448, 1197, 1198, 1199, 1234, 1235, 0, 0, 1308, 1511,
	1510, 1310, 0, 1463, 0, 1317, 0, 1189, 1324, 1539,
	-2, 0, 1427, 1458, 0, 0, 1332, 1333, 1334, 0,
	0, 1463, 0, 0, 1505, 0, 1400, 0, 1133, 0,
	1134, 1135, 0, 1136, 1137, 1150, 1163, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1155, 0,
	0, 0, 1486, -2, 0, 0, 0, 0, 0, 957,
	0, 0, 1012, 1515, 1519, 1520, 1012, 1012, 0, 0,
	1464, 0, 0, 0, 0, 1065, 1065, 1065, 1063, 1040,
	0, 1046, 0, 1056, 0, 1046, 1046, 0, -2, 1028,
	0, 0, 1056, 1069, 1070, 0, 0, 0, 0, 0,
	0, 1574, 0, 0, 1561, 0, 167, 0, 382, 392,
	964, 0, 1466, 1088, 1084, 1091, 1092, 1093, 1094, 1140,
	1141, 1142, 1143, 1144, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, -2, 1151, 1153, 1174, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1146, 0, 1121, 1121,
	1121, 1138, 1139, 1162, 1173, 1165, 1173, 1169, 1089, 1090,
	1156, 1157, 1158, 1159, 0, 386, 0, 0, 0, 0,
	-2, 446, 0, 868, 0, 873, 471, 472, 473, 875,
	876, 449, 474, 475, 476, 477, 478, 479, 0, 743,
	0, 745, 1535, 0, 447, 464, 452, 0, 458, 76,
	825, 103, 0, 825, 825, 0, 0, 122, 0, 0,
	0, 0, 0, 94, 99, 82, 83, 0, 0, 0,
	0, 59, 751, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 93, 0, 88,
	78, 0, 0, 96, 101, 0, 126, 128, 0, 0,
	1059, 629, 0, 0, 1574, 1531, 0, 0, 0, 0,
	208, 210, 0, 212, 213, 214, 0, 782, 0, 221,
	218, 262, 726, 1856, 750, 1856, 748, 1557, 0, 0,
	0, 280, 275, 0, 277, 769, 0, 961, 0, 0,
	0, 0, 789, 0, 1856, 794, 1544, 1582, 1583, 881,
	0, 1080, 0, 895, 0, 0, 1075, 0, 1077, 0,
	239, 240, 241, 0, 306, 0, 133, 134, 0, 309,
	0, 312, 0, 315, 0, 0, 318, 0, 0, 0,
	0, 964, 0, 0, 0, 145, 0, 0, 0, 0,
	167, 1059, 423, 1059, 425, 0, 0, 543, 544, 546,
	547, 549, 550, 616, 551, 555, 0, 623, 1763, 633,
	557, 559, 561, 563, 565, 0, 574, 0, 576, 0,
	578, 590, 589, 591, 596, 601, 0, 0, 0, 0,
	767, 0, 859, 932, 934, 404, 930, 984, 985, 990,
	994, 995, 998, 1001, 1002, 992, 1192, 950, 951, 952,
	978, 979, 808, 0, 1982, 1193, 1085, 1194, 1195, 1541,
	0, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, -2, -2, -2, -2, -2, -2, -2, -2, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	-2, -2, -2, 1232, 1233, -2, 1450, 1452, 0, 1514,
	0, -2, 0, -2, -2, -2, -2, 1252, 0, 1254,
	1259, 1261, 1263, 0, 0, 0, 0, 1513, 1273, 1497,
	1498, 0, 0, 1429, 1430, 1431, 1258, 0, 1277, 1512,
	1509, 0, 0, 1462, 975, 1336, 0, 0, 0, 0,
	1343, 0, 1540, 1188, 1175, 1176, 1177, 1178, 1179, 1180,
	1190, 1328, 1460, 0, 1459, 0, 0, 0, 1470, 0,
	1504, 1500, 0, 1562, 1568, 1408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1380, 0, 1473, -2,
	-2, -2, -2, -2, -2, -2, 0, 1382, 0, 1384,
	1464, 1483, 0, 0, 1278, 0, 0, 0, 1427, 0,
	1387, 1464, 1491, 0, 0, 0, 0, 0, 1464, 0,
	1496, 0, 1394, 0, 1396, 959, 0, 0, 1080, 0,
	0, 0, 1518, 1080, 1080, 0, 1007, 0, 0, 0,
	0, 0, 0, 1060, 1064, 1061, 1062, 0, 0, 1046,
	1056, 1020, 0, 0, 1543, 1026, 1055, 0, 726, 1045,
	1056, 1056, 0, -2, 1030, 0, 0, 975, -2, 168,
	725, 0, 0, 0, 374, 0, 0, 0, 368, 370,
	0, 1081, 1083, 0, 1095, 0, 0, -2, 0, 0,
	0, 0, 0, 439, 0, 867, 874, 0, 468, 0,
	470, 744, 1537, 1536, 0, 459, 0, 0, 0, 0,
	824, 105, 1856, 0, 137, 0, 0, 710, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	752, 753, 755, 761, 763, 0, 757, 1538, 0, 758,
	0, 760, 762, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 1525, 158,
	1058, 0, 1524, 1534, 0, 181, 184, 187, 190, 0,
	216, 0, 0, 658, 641, 0, 746, 749, 0, 726,
	781, 1555, 0, 270, 167, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 0, 1856, 883,
	889, 0, 977, 1079, 0, 912, 897, 0, 0, 0,
	912, 916, 917, 919, 920, 0, 0, 1076, 0, 243,
	328, 135, 135, 135, 1522, 135, 135, 156, 322, 325,
	331, 367, 964, 167, 165, 1727, 163, 160, 162, 0,
	0, 0, 659, 661, 662, 663, 664, 0, 1583, 0,
	1689, 1583, 140, 167, 422, 427, 537, 0, 634, 632,
	573, 0, 0, 0, 586, 0, 0, 0, 0, 0,
	617, 618, 622, 1073, 933, 0, 996, 0, 993, 999,
	1000, 0, 981, 806, 807, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1274, 0, -2, 1253, 1256, 1260,
	1262, 1264, 0, 0, 0, 0, 0, 0, 1453, 0,
	1455, 1275, 1507, 1510, 1425, 0, 0, 974, 975, 975,
	975, 1342, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 1468, 1469, 0, 1335, 0, 1501, 0, 0, 0,
	1344, 0, 0, 0, 1145, 1119, 0, 1173, 1171, 1172,
	1166, 1173, 1170, 0, 0, 0, 0, 0, 1363, 0,
	0, 0, 1367, 1379, 0, 1381, 1383, 0, 0, 1385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 1282, 1283, 1386, 1489, 1490, 0,
	0, 0, 0, 0, 0, 1392, 0, 1495, 1393, 1395,
	964, 1009, 1004, 1516, 1059, 1011, 1013, 1517, 1546, 1004,
	1004, 0, 1465, 1048, 0, 1050, 0, 0, 0, 1052,
	0, 1041, 0, 1043, 1056, 1025, 0, 0, 1018, 0,
	1017, 726, 1054, 1027, 1031, 1562, 0, 1071, 0, 1035,
	1038, 0, 0, 1575, 192, 195, 196, 193, 0, 381,
	0, 1467, 0, 1086, 0, 0, 0, 0, 0, 385,
	0, 435, -2, 466, 467, 469, 465, 104, 812, 0,
	0, 1547, 0, 107, 1856, 116, 0, 687, 0, 0,
	0, 0, 0, 827, 0, 1856, 135, 1856, 135, 118,
	121, 0, 125, 123, 0, 0, 678, 77, 825, 80,
	86, 0, 0, 0, 92, 0, 818, 0, 756, 759,
	765, 60, 0, 820, 810, 0, 809, 127, 81, 87,
	0, 822, 79, 0, 167, 0, 0, 1530, 0, 0,
	0, 0, 657, -2, 0, 0, 0, 0, 0, 0,
	1059, 272, 0, 274, 279, 278, 772, -2, 775, 784,
	0, 786, 798, 0, 0, 0, 885, 889, 0, 888,
	962, 989, 976, 1078, 890, 912, 0, 0, 0, 900,
	902, 899, 896, 893, 1080, 0, 0, 0, 0, 0,
	238, 307, 310, 313, 316, 319, 333, 144, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 1583,
	1583, 0, 1551, 141, 424, 0, 0, 575, 577, 590,
	610, 611, 673, 0, 614, 0, 0, 980, 808, 0,
	1196, 1237, 0, 0, -2, 0, 0, 1241, 0, 0,
	0, -2, 0, 0, 0, 1454, 1456, 0, 1509, 1337,
	0, 0, 0, 0, 1319, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 0, 1326, 1327, 1428, 1471, 1499, 1503, 0,
	1563, 1567, 1406, 1407, 1411, 1554, 0, 0, 0, 1164,
	1168, 1348, 0, 0, 0, 0, 0, 0, 0, 1472,
	1482, 1484, 1279, 1280, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, -2, -2, -2, 1297, 1298, 1299,
	-2, -2, -2, 0, 0, 0, 1485, 1487, 1488, 1492,
	1493, 0, 1389, 1390, 1391, 1494, 0, 1006, 0, 1010,
	0, 1006, 1006, 971, 1049, 0, 1067, 1051, 1023, 1042,
	0, 1032, 1021, 0, 1022, 0, 1053, 0, 1029, 1034,
	0, 1037, 0, 1337, -2, 151, 383, 0, 1087, 1096,
	0, 1148, 1152, 387, 0, 0, 0, 0, 136, 685,
	709, 0, 0, 801, 808, 0, 0, 109, 0, 0,
	0, 117, 0, 114, 0, 120, 124, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 0, 95, 0, 0,
	0, 0, 0, 138, 0, 0, 211, 780, 217, 667,
	0, 642, 0, 726, 750, 0, 268, 0, 770, 785,
	0, 0, 0, 0, 0, 887, 889, 0, 880, 881,
	912, 988, 891, 910, -2, 909, 0, 0, 0, 977,
	918, 915, 921, 922, 0, 164, 0, 159, 161, 0,
	147, 0, 0, 660, 665, 0, 0, 0, 0, 0,
	538, 585, 612, 672, 0, 0, 991, 997, 982, 808,
	1239, 1243, 0, 0, 0, 1245, -2, 0, 1267, -2,
	-2, 1457, 1508, 1316, 975, 1338, 1340, 1341, 1191, 1502,
	0, 1413, 1410, 0, 1397, 1120, 1358, 1359, 0, 0,
	1362, 1364, 1365, 1366, 1481, 0, 0, 0, 0, 1388,
	960, 1402, 0, 0, 1014, 1402, 1402, 0, 1046, 1044,
	1019, 1015, 0, 1563, 1036, 0, 0, 1082, 1147, 814,
	816, 106, 0, 686, 0, 689, 0, 0, 0, 0,
	696, 697, 0, 0, 0, 0, 0, 715, 724, 0,
	803, 0, 0, 0, 111, 130, 0, 0, 826, 0,
	135, 135, 0, 0, 813, 0, 0, 0, 0, 0,
	819, 821, 811, 0, 823, 157, 0, 675, 0, 646,
	643, 658, 641, 747, 779, 273, 0, 797, 0, 0,
	0, 877, 889, 0, 882, 883, 281, 0, 0, 0,
	898, 901, 903, 989, 0, 166, 167, 0, 0, 0,
	0, 0, 0, 426, 428, 0, 0, 434, 671, 0,
	983, 1247, -2, -2, 1268, 0, 1564, 1566, 977, 0,
	1399, 0, 0, -2, 0, 0, 0, 946, 0, 1005,
	1003, 947, 948, 1066, 1056, 0, 1039, 108, 0, 690,
	691, 1550, 693, 0, 695, 698, 0, 700, 1585, 0,
	704, 711, 716, 0, 667, 0, 721, 722, 802, 713,
	0, 110, 112, 129, 805, 113, 119, 0, 0, 0,
	0, 0, 0, 97, 0, 1057, 641, 674, 0, 644,
	0, 0, 0, 0, 798, 0, 0, 0, 884, 885,
	0, 0, 0, 912, 923, 146, 0, 0, 724, 0,
	0, 708, 0, 430, 0, 432, 0, 613, 1339, 1417,
	0, 1360, 1361, -2, 0, 1305, 1401, 1403, 0, 1024,
	1016, 688, 692, 0, 0, 730, 0, 0, 0, 719,
	720, 675, 0, 0, 132, 0, 0, 0, 815, 817,
	0, 0, 0, 639, 0, 647, 0, 667, 0, 724,
	0, 724, 0, 886, 887, 0, 905, 906, 908, 913,
	0, 0, 667, 724, 707, 429, 0, 0, 0, 0,
	0, 0, 1412, 1306, 0, 0, 0, 699, 735, 0,
	0, 0, 717, 718, 715, 0, 726, 115, 0, 804,
	0, 679, 0, 0, 682, 0, 0, 98, 0, 0,
	648, 675, 646, 667, 0, 667, 0, 878, 0, 907,
	167, 167, 675, 667, 431, 433, 1409, 1414, 1418, -2,
	1820, 1634, 0, 1415, 1416, 1404, 1405, 0, 701, 731,
	732, 0, 727, 728, 729, 1584, 702, 703, 712, 723,
	730, 131, 676, 0, 0, 677, 0, 0, 100, 102,
	0, 641, 645, 675, 0, 675, 0, 1080, 148, 149,
	705, 675, 0, 1420, 1421, 1422, 1423, 1424, 694, 733,
	0, 734, 0, 0, 0, 735, 680, 0, 683, 0,
	0, 640, 795, 724, 795, 724, 904, 706, 0, 736,
	0, 739, 740, 0, 737, 715, 0, 0, 670, 790,
	0, 667, 792, 667, 1419, 738, 741, 742, 714, 0,
	0, 666, 668, 669, 796, 675, 675, 675, 0, 795,
	795, 681, 0, 791, 793, 0, 0, 675, 684,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1031
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1037
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1046
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1170
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1179
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1195
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1225
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1252
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1276
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1293
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1303
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1322
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1334
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1341
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1349
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1369
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1377
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1390
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1406
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1426
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1435
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1501
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1582
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1711
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1752
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1761
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1771
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1780
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1789
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1797
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1892
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1954
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1964
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1968
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2000
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2011
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2034
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2049
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2050
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2051
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2077
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2078
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2081
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2082
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2085
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2086
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2118
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2119
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2120
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2142
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2146
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2152
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2170
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2180
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2205
		{

			sqlVAL.union.val = nil
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2219
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return helpWith(sqllex, "DELETE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2252
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2254
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2255
		{
			return helpWith(sqllex, "DROP")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2258
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2259
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2260
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2261
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2270
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2274
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2304
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2346
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2353
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2383
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2387
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2396
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2436
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2443
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2450
		{
			return helpWith(sqllex, "DELETE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2452
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2454
		{
			return helpWith(sqllex, "INSERT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2461
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2466
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2501
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2581
		{
			return helpWith(sqllex, "GRANT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2617
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2621
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2659
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "RESET")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "USE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2696
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2697
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2698
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "USE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2720
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2738
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2756
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2783
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2801
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2805
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2849
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2853
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2858
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2880
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2887
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2906
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2919
		{
			return unimplemented(sqllex, "set from current")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2920
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2928
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2933
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2961
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3000
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3008
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.Low
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = tree.Normal
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = tree.High
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3046
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3067
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3078
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3082
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "SHOW")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3093
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.str = "client_encoding"
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3109
		{
			sqlVAL.str = "timezone"
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3124
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3133
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3142
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3153
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3177
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3185
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3211
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3222
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3254
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3270
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3290
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3306
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3316
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3337
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3373
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = true
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = false
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3389
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3394
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = true
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3435
		{
			sqlVAL.union.val = false
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3456
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3468
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3524
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3547
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3558
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3591
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3611
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3623
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3628
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3748
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3752
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3756
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3804
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3808
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3817
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3828
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3852
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3888
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3905
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3923
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3924
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3925
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3929
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3945
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3962
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3963
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3964
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3978
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3979
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3980
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3981
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3982
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3983
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3984
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3985
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4006
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4015
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4019
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4039
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4044
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4049
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4062
		{
			sqlVAL.str = ""
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4082
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4125
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4136
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4151
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4177
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4207
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4211
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4215
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4223
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4236
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4240
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4244
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4333
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4348
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4349
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4351
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4352
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4353
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4406
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match full")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4407
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4408
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match simple")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4409
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4416
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4456
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4478
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4503
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4512
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4520
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4531
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4535
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4536
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4539
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4541
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4543
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4546
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4564
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4579
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = nil
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4597
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4604
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4609
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4618
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4630
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4631
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4634
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4635
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4641
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4643
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4645
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4647
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4649
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4651
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4667
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4685
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4704
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4722
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4740
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4743
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = false
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = true
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4792
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4812
		{
			sqlVAL.union.val = tree.Descending
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4816
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4839
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4853
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4867
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4881
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4895
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4897
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4901
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4915
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4931
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4945
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4970
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4971
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4975
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4986
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5008
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5019
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5023
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5024
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5049
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5062
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5067
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5071
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5076
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5077
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5078
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5086
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5093
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5096
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5097
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5101
		{
			sqlVAL.str = ""
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5105
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5109
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.str = ""
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5156
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5158
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5162
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5183
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5223
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5227
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5231
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.str = ""
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.str = ""
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5266
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5267
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5293
		{
			return helpWith(sqllex, "INSERT")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5311
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5315
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5328
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5377
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5381
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5394
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5395
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5403
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5412
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 913:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5440
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5444
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5445
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5466
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5469
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5516
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5566
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5567
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5572
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5607
		{
			return helpWith(sqllex, "SELECT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5608
		{
			return helpWith(sqllex, "VALUES")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5609
		{
			return helpWith(sqllex, "TABLE")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5631
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5670
		{
			return helpWith(sqllex, "SELECT")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5674
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5714
		{
			return helpWith(sqllex, "TABLE")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5730
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5734
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5757
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5761
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = nil
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5770
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5771
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = true
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5779
		{
			sqlVAL.union.val = false
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = false
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = true
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5800
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5801
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5804
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5805
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5809
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5839
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5848
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5867
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5891
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5913
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5929
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5943
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5944
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5947
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5948
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6001
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6003
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6018
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6026
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6040
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6046
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6057
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6108
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6122
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6143
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6153
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6157
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6179
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6201
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6203
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6206
		{
			sqlVAL.union.val = nil
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6212
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = true
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = false
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6246
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6258
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6320
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6321
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6357
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6379
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6385
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6393
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6407
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6426
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6440
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6449
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6458
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6471
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6473
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6493
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6494
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6579
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = nil
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6629
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6637
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6731
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6752
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6758
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6780
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6799
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = true
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = false
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6830
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6834
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6835
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6836
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6838
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6845
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6850
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = true
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = false
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = false
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = tree.Year
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = tree.Month
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.Day
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = tree.Month
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = nil
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = tree.Second
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6931
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6966
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6975
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7164
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7285
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7501
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7506
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7515
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7533
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7555
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7579
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7590
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7591
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7604
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7615
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7631
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7636
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7656
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7724
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7729
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7736
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7744
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7749
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7769
		{
			return unimplemented(sqllex, "treat")
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7790
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7795
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7800
		{
			return unimplemented(sqllex, "within group")
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7801
		{
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7836
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.str = ""
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7927
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7940
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8014
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.Any
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = tree.Some
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = tree.All
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = tree.Div
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.LT
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.GT
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.LE
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.GE
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.NE
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = tree.Like
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8375
		{
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8434
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8446
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8509
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8520
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8541
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8646
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8672
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8676
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.str = ""
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
