// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9196

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 958,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 794,
	193, 794,
	207, 228,
	279, 228,
	287, 650,
	314, 228,
	323, 650,
	360, 650,
	384, 228,
	407, 650,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 958,
	182, 958,
	393, 958,
	394, 958,
	-2, 0,
	-1, 88,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 919,
	-1, 116,
	123, 576,
	206, 576,
	377, 576,
	-2, 0,
	-1, 117,
	4, 960,
	21, 960,
	22, 960,
	23, 960,
	24, 960,
	25, 960,
	27, 960,
	32, 960,
	37, 960,
	38, 960,
	39, 960,
	40, 960,
	41, 960,
	42, 960,
	43, 960,
	44, 960,
	45, 960,
	46, 960,
	48, 960,
	49, 960,
	50, 960,
	51, 960,
	52, 960,
	53, 960,
	56, 960,
	57, 960,
	58, 960,
	59, 960,
	61, 960,
	62, 960,
	66, 960,
	67, 960,
	68, 960,
	69, 960,
	70, 960,
	72, 960,
	73, 960,
	74, 960,
	75, 960,
	77, 960,
	79, 960,
	80, 960,
	81, 960,
	84, 960,
	85, 960,
	93, 960,
	94, 960,
	95, 960,
	96, 960,
	97, 960,
	98, 960,
	99, 960,
	100, 960,
	102, 960,
	104, 960,
	105, 960,
	107, 960,
	110, 960,
	111, 960,
	112, 960,
	114, 960,
	116, 960,
	117, 960,
	119, 960,
	120, 960,
	121, 960,
	122, 960,
	123, 960,
	124, 960,
	125, 960,
	126, 960,
	127, 960,
	128, 960,
	129, 960,
	131, 960,
	137, 960,
	138, 960,
	139, 960,
	140, 960,
	141, 960,
	142, 960,
	144, 960,
	146, 960,
	150, 960,
	151, 960,
	153, 960,
	154, 960,
	156, 960,
	157, 960,
	159, 960,
	160, 960,
	161, 960,
	162, 960,
	163, 960,
	164, 960,
	165, 960,
	166, 960,
	167, 960,
	168, 960,
	171, 960,
	172, 960,
	176, 960,
	177, 960,
	178, 960,
	179, 960,
	182, 960,
	183, 960,
	184, 960,
	185, 960,
	186, 960,
	187, 960,
	188, 960,
	189, 960,
	191, 960,
	193, 960,
	196, 960,
	197, 960,
	198, 960,
	200, 960,
	201, 960,
	204, 960,
	205, 960,
	206, 960,
	207, 960,
	209, 960,
	210, 960,
	212, 960,
	213, 960,
	215, 960,
	216, 960,
	219, 960,
	220, 960,
	223, 960,
	225, 960,
	226, 960,
	227, 960,
	228, 960,
	229, 960,
	230, 960,
	231, 960,
	232, 960,
	233, 960,
	235, 960,
	236, 960,
	237, 960,
	238, 960,
	240, 960,
	243, 960,
	244, 960,
	245, 960,
	246, 960,
	248, 960,
	249, 960,
	250, 960,
	252, 960,
	253, 960,
	254, 960,
	257, 960,
	258, 960,
	260, 960,
	262, 960,
	263, 960,
	264, 960,
	265, 960,
	266, 960,
	267, 960,
	268, 960,
	269, 960,
	270, 960,
	272, 960,
	273, 960,
	274, 960,
	275, 960,
	276, 960,
	278, 960,
	280, 960,
	281, 960,
	282, 960,
	283, 960,
	284, 960,
	285, 960,
	286, 960,
	287, 960,
	288, 960,
	290, 960,
	291, 960,
	292, 960,
	293, 960,
	294, 960,
	296, 960,
	297, 960,
	298, 960,
	299, 960,
	300, 960,
	301, 960,
	302, 960,
	303, 960,
	305, 960,
	307, 960,
	308, 960,
	309, 960,
	310, 960,
	311, 960,
	312, 960,
	314, 960,
	315, 960,
	316, 960,
	317, 960,
	318, 960,
	319, 960,
	320, 960,
	321, 960,
	323, 960,
	324, 960,
	325, 960,
	326, 960,
	327, 960,
	328, 960,
	329, 960,
	330, 960,
	331, 960,
	332, 960,
	334, 960,
	335, 960,
	336, 960,
	337, 960,
	339, 960,
	340, 960,
	341, 960,
	342, 960,
	344, 960,
	345, 960,
	346, 960,
	347, 960,
	348, 960,
	349, 960,
	350, 960,
	351, 960,
	352, 960,
	353, 960,
	354, 960,
	355, 960,
	357, 960,
	358, 960,
	359, 960,
	361, 960,
	362, 960,
	363, 960,
	364, 960,
	365, 960,
	366, 960,
	367, 960,
	368, 960,
	369, 960,
	371, 960,
	372, 960,
	373, 960,
	374, 960,
	377, 960,
	378, 960,
	379, 960,
	380, 960,
	381, 960,
	383, 960,
	384, 960,
	385, 960,
	387, 960,
	388, 960,
	391, 960,
	392, 960,
	393, 960,
	394, 960,
	395, 960,
	397, 960,
	399, 960,
	400, 960,
	401, 960,
	402, 960,
	403, 960,
	404, 960,
	405, 960,
	407, 960,
	408, 960,
	409, 960,
	414, 960,
	415, 960,
	416, 960,
	417, 960,
	418, 960,
	419, 960,
	-2, 0,
	-1, 118,
	1, 851,
	196, 851,
	278, 851,
	285, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 120,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 121,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 122,
	1, 855,
	445, 855,
	446, 855,
	-2, 0,
	-1, 146,
	118, 931,
	132, 931,
	190, 931,
	218, 931,
	247, 931,
	256, 931,
	389, 931,
	-2, 928,
	-1, 176,
	4, 967,
	5, 967,
	6, 967,
	7, 967,
	8, 967,
	9, 967,
	10, 967,
	21, 967,
	22, 967,
	23, 967,
	24, 967,
	25, 967,
	27, 967,
	32, 967,
	33, 967,
	37, 967,
	38, 967,
	39, 967,
	40, 967,
	41, 967,
	42, 967,
	43, 967,
	44, 967,
	45, 967,
	46, 967,
	48, 967,
	49, 967,
	50, 967,
	51, 967,
	52, 967,
	53, 967,
	54, 967,
	55, 967,
	56, 967,
	57, 967,
	58, 967,
	59, 967,
	61, 967,
	62, 967,
	64, 967,
	66, 967,
	67, 967,
	68, 967,
	69, 967,
	70, 967,
	72, 967,
	73, 967,
	74, 967,
	75, 967,
	77, 967,
	79, 967,
	80, 967,
	81, 967,
	83, 967,
	84, 967,
	85, 967,
	86, 967,
	87, 967,
	88, 967,
	89, 967,
	90, 967,
	91, 967,
	92, 967,
	93, 967,
	94, 967,
	95, 967,
	96, 967,
	97, 967,
	98, 967,
	99, 967,
	100, 967,
	101, 967,
	102, 967,
	104, 967,
	105, 967,
	107, 967,
	110, 967,
	111, 967,
	112, 967,
	114, 967,
	116, 967,
	117, 967,
	119, 967,
	120, 967,
	121, 967,
	122, 967,
	123, 967,
	124, 967,
	125, 967,
	126, 967,
	127, 967,
	128, 967,
	129, 967,
	130, 967,
	131, 967,
	137, 967,
	138, 967,
	139, 967,
	140, 967,
	141, 967,
	142, 967,
	144, 967,
	146, 967,
	149, 967,
	150, 967,
	151, 967,
	153, 967,
	154, 967,
	156, 967,
	157, 967,
	159, 967,
	160, 967,
	161, 967,
	162, 967,
	163, 967,
	164, 967,
	165, 967,
	166, 967,
	167, 967,
	168, 967,
	169, 967,
	171, 967,
	172, 967,
	176, 967,
	177, 967,
	178, 967,
	179, 967,
	181, 967,
	182, 967,
	183, 967,
	184, 967,
	185, 967,
	186, 967,
	187, 967,
	188, 967,
	189, 967,
	191, 967,
	193, 967,
	194, 967,
	195, 967,
	196, 967,
	197, 967,
	198, 967,
	199, 967,
	200, 967,
	201, 967,
	204, 967,
	205, 967,
	206, 967,
	207, 967,
	209, 967,
	210, 967,
	212, 967,
	213, 967,
	214, 967,
	215, 967,
	216, 967,
	217, 967,
	219, 967,
	220, 967,
	223, 967,
	225, 967,
	226, 967,
	227, 967,
	228, 967,
	229, 967,
	230, 967,
	231, 967,
	232, 967,
	233, 967,
	234, 967,
	235, 967,
	236, 967,
	237, 967,
	238, 967,
	239, 967,
	240, 967,
	241, 967,
	242, 967,
	243, 967,
	244, 967,
	245, 967,
	246, 967,
	248, 967,
	249, 967,
	250, 967,
	253, 967,
	254, 967,
	257, 967,
	258, 967,
	259, 967,
	260, 967,
	261, 967,
	262, 967,
	263, 967,
	264, 967,
	265, 967,
	266, 967,
	267, 967,
	268, 967,
	269, 967,
	270, 967,
	272, 967,
	273, 967,
	274, 967,
	275, 967,
	276, 967,
	278, 967,
	280, 967,
	281, 967,
	282, 967,
	283, 967,
	284, 967,
	285, 967,
	286, 967,
	287, 967,
	288, 967,
	290, 967,
	291, 967,
	292, 967,
	293, 967,
	294, 967,
	296, 967,
	297, 967,
	298, 967,
	299, 967,
	300, 967,
	301, 967,
	302, 967,
	303, 967,
	305, 967,
	306, 967,
	307, 967,
	308, 967,
	309, 967,
	310, 967,
	311, 967,
	312, 967,
	314, 967,
	315, 967,
	316, 967,
	317, 967,
	318, 967,
	319, 967,
	320, 967,
	321, 967,
	323, 967,
	324, 967,
	325, 967,
	326, 967,
	327, 967,
	328, 967,
	329, 967,
	330, 967,
	331, 967,
	332, 967,
	333, 967,
	334, 967,
	335, 967,
	336, 967,
	337, 967,
	338, 967,
	339, 967,
	340, 967,
	341, 967,
	342, 967,
	344, 967,
	345, 967,
	346, 967,
	347, 967,
	348, 967,
	349, 967,
	350, 967,
	351, 967,
	352, 967,
	353, 967,
	354, 967,
	355, 967,
	357, 967,
	358, 967,
	359, 967,
	361, 967,
	362, 967,
	363, 967,
	364, 967,
	365, 967,
	366, 967,
	367, 967,
	368, 967,
	369, 967,
	371, 967,
	372, 967,
	373, 967,
	374, 967,
	377, 967,
	378, 967,
	379, 967,
	380, 967,
	381, 967,
	382, 967,
	383, 967,
	384, 967,
	385, 967,
	387, 967,
	388, 967,
	390, 967,
	391, 967,
	392, 967,
	393, 967,
	394, 967,
	395, 967,
	396, 967,
	397, 967,
	399, 967,
	400, 967,
	401, 967,
	402, 967,
	403, 967,
	404, 967,
	405, 967,
	407, 967,
	408, 967,
	409, 967,
	414, 967,
	415, 967,
	416, 967,
	417, 967,
	418, 967,
	419, 967,
	420, 967,
	428, 967,
	433, 967,
	434, 967,
	435, 967,
	442, 967,
	448, 967,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 958,
	-1, 537,
	148, 1623,
	375, 1623,
	425, 1623,
	444, 1623,
	-2, 0,
	-1, 538,
	148, 1699,
	375, 1699,
	425, 1699,
	444, 1699,
	-2, 0,
	-1, 539,
	148, 1613,
	375, 1613,
	425, 1613,
	444, 1613,
	-2, 0,
	-1, 541,
	148, 1781,
	375, 1781,
	425, 1781,
	444, 1781,
	-2, 0,
	-1, 543,
	148, 1809,
	375, 1809,
	425, 1809,
	444, 1809,
	-2, 0,
	-1, 550,
	148, 1707,
	375, 1707,
	425, 1707,
	444, 1707,
	-2, 451,
	-1, 567,
	444, 1573,
	447, 1573,
	-2, 619,
	-1, 568,
	444, 1575,
	447, 1575,
	-2, 620,
	-1, 569,
	444, 1574,
	447, 1574,
	-2, 621,
	-1, 570,
	447, 1522,
	-2, 622,
	-1, 714,
	1, 549,
	441, 549,
	443, 549,
	445, 549,
	446, 549,
	-2, 0,
	-1, 715,
	1, 618,
	145, 618,
	441, 618,
	443, 618,
	445, 618,
	446, 618,
	-2, 0,
	-1, 721,
	1, 563,
	441, 563,
	443, 563,
	445, 563,
	446, 563,
	-2, 0,
	-1, 723,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	446, 567,
	-2, 0,
	-1, 725,
	1, 577,
	441, 577,
	443, 577,
	445, 577,
	446, 577,
	-2, 0,
	-1, 726,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	446, 583,
	-2, 0,
	-1, 727,
	1, 586,
	441, 586,
	443, 586,
	445, 586,
	446, 586,
	-2, 0,
	-1, 731,
	1, 600,
	441, 600,
	443, 600,
	445, 600,
	446, 600,
	-2, 0,
	-1, 732,
	1, 602,
	441, 602,
	443, 602,
	445, 602,
	446, 602,
	-2, 0,
	-1, 775,
	132, 971,
	218, 971,
	247, 971,
	-2, 928,
	-1, 790,
	132, 970,
	218, 970,
	247, 970,
	-2, 928,
	-1, 814,
	444, 1572,
	-2, 459,
	-1, 843,
	442, 1564,
	-2, 1555,
	-1, 849,
	5, 1096,
	-2, 1604,
	-1, 850,
	5, 1097,
	-2, 1608,
	-1, 851,
	5, 1098,
	-2, 1607,
	-1, 852,
	5, 1099,
	-2, 1807,
	-1, 853,
	5, 1100,
	-2, 1709,
	-1, 854,
	5, 1101,
	-2, 1773,
	-1, 855,
	5, 1102,
	-2, 1775,
	-1, 856,
	5, 1103,
	-2, 1786,
	-1, 857,
	5, 1104,
	-2, 1776,
	-1, 858,
	5, 1105,
	-2, 1777,
	-1, 859,
	5, 1106,
	-2, 1603,
	-1, 860,
	5, 1107,
	-2, 1820,
	-1, 861,
	5, 1108,
	-2, 1674,
	-1, 862,
	5, 1109,
	-2, 1716,
	-1, 863,
	5, 1110,
	-2, 1718,
	-1, 864,
	5, 1111,
	-2, 1678,
	-1, 865,
	5, 1112,
	442, 1582,
	-2, 1573,
	-1, 866,
	5, 1168,
	442, 1168,
	-2, 1855,
	-1, 871,
	442, 1583,
	-2, 1574,
	-1, 873,
	5, 1116,
	-2, 1853,
	-1, 874,
	5, 1117,
	-2, 1854,
	-1, 875,
	5, 1118,
	-2, 1677,
	-1, 876,
	5, 1119,
	-2, 1866,
	-1, 877,
	5, 1120,
	-2, 1679,
	-1, 878,
	5, 1121,
	-2, 1680,
	-1, 879,
	5, 1122,
	-2, 1681,
	-1, 880,
	5, 1123,
	-2, 1835,
	-1, 881,
	5, 1124,
	-2, 1864,
	-1, 882,
	5, 1125,
	-2, 1658,
	-1, 883,
	5, 1126,
	-2, 1659,
	-1, 884,
	5, 1140,
	-2, 1847,
	-1, 886,
	5, 1115,
	-2, 1843,
	-1, 887,
	5, 1115,
	-2, 1842,
	-1, 888,
	5, 1115,
	-2, 1859,
	-1, 889,
	5, 1132,
	-2, 1837,
	-1, 890,
	5, 1133,
	-2, 1605,
	-1, 891,
	5, 1143,
	-2, 1836,
	-1, 892,
	5, 1145,
	-2, 1875,
	-1, 894,
	5, 1156,
	-2, 1633,
	-1, 895,
	5, 1167,
	-2, 1868,
	-1, 896,
	5, 1159,
	-2, 1869,
	-1, 897,
	5, 1167,
	-2, 1870,
	-1, 898,
	5, 1163,
	-2, 1871,
	-1, 899,
	5, 1083,
	-2, 1687,
	-1, 900,
	5, 1084,
	-2, 1688,
	-1, 901,
	444, 1570,
	-2, 1554,
	-1, 902,
	442, 1895,
	-2, 1571,
	-1, 922,
	5, 1151,
	-2, 1796,
	-1, 939,
	5, 1150,
	-2, 1876,
	-1, 949,
	5, 1152,
	408, 1152,
	-2, 1838,
	-1, 950,
	5, 1153,
	408, 1153,
	-2, 1839,
	-1, 986,
	442, 1582,
	-2, 1573,
	-1, 1015,
	148, 1809,
	375, 1809,
	425, 1809,
	444, 1809,
	-2, 0,
	-1, 1016,
	196, 863,
	278, 863,
	285, 863,
	-2, 439,
	-1, 1134,
	296, 1552,
	435, 1552,
	-2, 1551,
	-1, 1190,
	287, 650,
	407, 650,
	-2, 227,
	-1, 1210,
	268, 956,
	-2, 767,
	-1, 1219,
	251, 1577,
	-2, 0,
	-1, 1283,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 930,
	-1, 1286,
	4, 1874,
	11, 1874,
	12, 1874,
	14, 1874,
	15, 1874,
	16, 1874,
	17, 1874,
	18, 1874,
	19, 1874,
	21, 1874,
	22, 1874,
	23, 1874,
	24, 1874,
	25, 1874,
	27, 1874,
	30, 1874,
	32, 1874,
	34, 1874,
	37, 1874,
	38, 1874,
	39, 1874,
	40, 1874,
	41, 1874,
	42, 1874,
	43, 1874,
	44, 1874,
	45, 1874,
	46, 1874,
	48, 1874,
	49, 1874,
	50, 1874,
	51, 1874,
	52, 1874,
	53, 1874,
	56, 1874,
	57, 1874,
	58, 1874,
	59, 1874,
	61, 1874,
	62, 1874,
	63, 1874,
	66, 1874,
	67, 1874,
	68, 1874,
	69, 1874,
	70, 1874,
	71, 1874,
	72, 1874,
	73, 1874,
	74, 1874,
	75, 1874,
	77, 1874,
	78, 1874,
	79, 1874,
	80, 1874,
	81, 1874,
	83, 1874,
	84, 1874,
	85, 1874,
	93, 1874,
	94, 1874,
	95, 1874,
	96, 1874,
	97, 1874,
	98, 1874,
	99, 1874,
	100, 1874,
	102, 1874,
	104, 1874,
	105, 1874,
	107, 1874,
	110, 1874,
	111, 1874,
	112, 1874,
	114, 1874,
	116, 1874,
	117, 1874,
	119, 1874,
	120, 1874,
	121, 1874,
	122, 1874,
	123, 1874,
	124, 1874,
	125, 1874,
	126, 1874,
	127, 1874,
	128, 1874,
	129, 1874,
	133, 1874,
	134, 1874,
	135, 1874,
	136, 1874,
	137, 1874,
	138, 1874,
	139, 1874,
	140, 1874,
	141, 1874,
	142, 1874,
	143, 1874,
	144, 1874,
	146, 1874,
	149, 1874,
	150, 1874,
	151, 1874,
	153, 1874,
	154, 1874,
	156, 1874,
	157, 1874,
	159, 1874,
	160, 1874,
	161, 1874,
	162, 1874,
	163, 1874,
	164, 1874,
	165, 1874,
	166, 1874,
	167, 1874,
	168, 1874,
	169, 1874,
	170, 1874,
	171, 1874,
	172, 1874,
	173, 1874,
	174, 1874,
	175, 1874,
	177, 1874,
	178, 1874,
	179, 1874,
	181, 1874,
	182, 1874,
	183, 1874,
	184, 1874,
	185, 1874,
	186, 1874,
	187, 1874,
	188, 1874,
	189, 1874,
	191, 1874,
	193, 1874,
	194, 1874,
	195, 1874,
	196, 1874,
	197, 1874,
	198, 1874,
	199, 1874,
	200, 1874,
	201, 1874,
	202, 1874,
	203, 1874,
	204, 1874,
	205, 1874,
	206, 1874,
	207, 1874,
	209, 1874,
	210, 1874,
	212, 1874,
	213, 1874,
	214, 1874,
	215, 1874,
	216, 1874,
	217, 1874,
	219, 1874,
	220, 1874,
	223, 1874,
	224, 1874,
	225, 1874,
	226, 1874,
	227, 1874,
	228, 1874,
	229, 1874,
	230, 1874,
	231, 1874,
	232, 1874,
	233, 1874,
	234, 1874,
	235, 1874,
	236, 1874,
	237, 1874,
	238, 1874,
	241, 1874,
	243, 1874,
	244, 1874,
	245, 1874,
	246, 1874,
	248, 1874,
	249, 1874,
	250, 1874,
	253, 1874,
	254, 1874,
	255, 1874,
	257, 1874,
	258, 1874,
	260, 1874,
	262, 1874,
	263, 1874,
	264, 1874,
	265, 1874,
	266, 1874,
	267, 1874,
	268, 1874,
	269, 1874,
	270, 1874,
	272, 1874,
	273, 1874,
	274, 1874,
	275, 1874,
	276, 1874,
	278, 1874,
	280, 1874,
	281, 1874,
	282, 1874,
	283, 1874,
	284, 1874,
	285, 1874,
	286, 1874,
	287, 1874,
	288, 1874,
	290, 1874,
	291, 1874,
	292, 1874,
	293, 1874,
	294, 1874,
	295, 1874,
	296, 1874,
	297, 1874,
	298, 1874,
	299, 1874,
	300, 1874,
	301, 1874,
	302, 1874,
	303, 1874,
	305, 1874,
	306, 1874,
	307, 1874,
	308, 1874,
	309, 1874,
	310, 1874,
	311, 1874,
	312, 1874,
	313, 1874,
	314, 1874,
	315, 1874,
	316, 1874,
	317, 1874,
	318, 1874,
	319, 1874,
	320, 1874,
	321, 1874,
	323, 1874,
	324, 1874,
	325, 1874,
	326, 1874,
	327, 1874,
	328, 1874,
	329, 1874,
	330, 1874,
	331, 1874,
	332, 1874,
	334, 1874,
	335, 1874,
	336, 1874,
	337, 1874,
	338, 1874,
	339, 1874,
	340, 1874,
	341, 1874,
	342, 1874,
	344, 1874,
	345, 1874,
	346, 1874,
	347, 1874,
	348, 1874,
	349, 1874,
	350, 1874,
	351, 1874,
	352, 1874,
	353, 1874,
	354, 1874,
	355, 1874,
	357, 1874,
	358, 1874,
	359, 1874,
	361, 1874,
	362, 1874,
	363, 1874,
	364, 1874,
	365, 1874,
	366, 1874,
	367, 1874,
	368, 1874,
	369, 1874,
	371, 1874,
	372, 1874,
	373, 1874,
	374, 1874,
	377, 1874,
	378, 1874,
	379, 1874,
	380, 1874,
	381, 1874,
	383, 1874,
	384, 1874,
	385, 1874,
	387, 1874,
	388, 1874,
	391, 1874,
	392, 1874,
	393, 1874,
	394, 1874,
	395, 1874,
	397, 1874,
	399, 1874,
	400, 1874,
	401, 1874,
	402, 1874,
	403, 1874,
	404, 1874,
	405, 1874,
	407, 1874,
	408, 1874,
	409, 1874,
	414, 1874,
	415, 1874,
	416, 1874,
	417, 1874,
	418, 1874,
	419, 1874,
	420, 1874,
	421, 1874,
	423, 1874,
	424, 1874,
	425, 1874,
	426, 1874,
	427, 1874,
	428, 1874,
	430, 1874,
	431, 1874,
	432, 1874,
	433, 1874,
	434, 1874,
	435, 1874,
	436, 1874,
	437, 1874,
	438, 1874,
	440, 1874,
	443, 1874,
	444, 1874,
	447, 1874,
	448, 1874,
	-2, 0,
	-1, 1289,
	148, 1781,
	375, 1781,
	425, 1781,
	444, 1781,
	-2, 0,
	-1, 1356,
	1, 1827,
	441, 1827,
	443, 1827,
	444, 1827,
	445, 1827,
	446, 1827,
	-2, 598,
	-1, 1357,
	1, 1779,
	441, 1779,
	443, 1779,
	444, 1779,
	445, 1779,
	446, 1779,
	-2, 599,
	-1, 1370,
	196, 863,
	278, 863,
	285, 863,
	-2, 858,
	-1, 1375,
	132, 970,
	218, 970,
	247, 970,
	-2, 928,
	-1, 1468,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 1324,
	-1, 1521,
	443, 1457,
	-2, 0,
	-1, 1556,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 1040,
	-1, 1609,
	442, 1155,
	-2, 1143,
	-1, 1648,
	196, 863,
	278, 863,
	285, 863,
	-2, 441,
	-1, 1897,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1204,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1205,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1206,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1207,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1208,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1209,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1210,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1211,
	-1, 1916,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1223,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1224,
	-1, 1918,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1225,
	-1, 1921,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1230,
	-1, 1927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 1929,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 1930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1243,
	-1, 1931,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1245,
	-1, 2025,
	5, 1112,
	148, 1468,
	442, 1582,
	-2, 1573,
	-1, 2026,
	148, 1469,
	-2, 1831,
	-1, 2027,
	148, 1470,
	-2, 1706,
	-1, 2028,
	148, 1471,
	-2, 1634,
	-1, 2029,
	148, 1472,
	-2, 1668,
	-1, 2030,
	148, 1473,
	-2, 1704,
	-1, 2031,
	148, 1474,
	-2, 1772,
	-1, 2099,
	1, 1041,
	83, 1041,
	118, 1041,
	132, 1041,
	145, 1041,
	149, 1041,
	155, 1041,
	158, 1041,
	181, 1041,
	190, 1041,
	199, 1041,
	214, 1041,
	218, 1041,
	234, 1041,
	247, 1041,
	251, 1041,
	256, 1041,
	304, 1041,
	306, 1041,
	389, 1041,
	398, 1041,
	411, 1041,
	412, 1041,
	413, 1041,
	422, 1041,
	441, 1041,
	443, 1041,
	445, 1041,
	446, 1041,
	447, 1041,
	-2, 1040,
	-1, 2104,
	442, 1556,
	-2, 1568,
	-1, 2123,
	442, 1154,
	-2, 1144,
	-1, 2333,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 2334,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 2340,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 2516,
	196, 863,
	278, 863,
	285, 863,
	-2, 438,
	-1, 2587,
	443, 1527,
	447, 1527,
	-2, 1543,
	-1, 2599,
	268, 956,
	-2, 767,
	-1, 2676,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 2683,
	194, 0,
	195, 0,
	241, 0,
	-2, 1259,
	-1, 2746,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1288,
	-1, 2747,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1289,
	-1, 2748,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2752,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1294,
	-1, 2753,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1295,
	-1, 2754,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2796,
	442, 1557,
	-2, 1569,
	-1, 2875,
	444, 1977,
	-2, 905,
	-1, 2916,
	194, 0,
	195, 0,
	241, 0,
	-2, 1260,
	-1, 2919,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1263,
	-1, 2920,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1265,
	-1, 3061,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1264,
	-1, 3062,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1266,
	-1, 3072,
	194, 0,
	-2, 1297,
	-1, 3162,
	194, 0,
	-2, 1298,
	-1, 3268,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1834,
}

const sqlPrivate = 57344

const sqlLast = 67863

var sqlAct = [...]int{

	871, 3100, 3348, 3125, 3103, 3267, 3277, 3243, 2247, 3338,
	3089, 3241, 3240, 3278, 2056, 3279, 3128, 2588, 2256, 3227,
	988, 2714, 2248, 3166, 3266, 1884, 3017, 3030, 2524, 800,
	2861, 2091, 2866, 2975, 1275, 3053, 1944, 2608, 2871, 2585,
	209, 1579, 209, 209, 1383, 2610, 209, 209, 209, 209,
	209, 548, 2616, 209, 1580, 2361, 2814, 1039, 791, 1812,
	1138, 569, 2815, 2288, 3076, 1551, 2621, 665, 2359, 2326,
	2244, 2087, 2442, 2225, 979, 2222, 2951, 2493, 2482, 209,
	870, 2287, 2281, 569, 2279, 1773, 1763, 1568, 2257, 1770,
	1549, 2458, 1762, 1791, 1700, 2092, 1691, 2151, 2153, 1466,
	2469, 1131, 2769, 1530, 2441, 1476, 2205, 3167, 201, 799,
	139, 1494, 1881, 1957, 1877, 1975, 2322, 1150, 1718, 1724,
	1271, 1679, 1677, 1559, 2223, 1987, 5, 1147, 2620, 2144,
	33, 1027, 1370, 867, 2094, 87, 1941, 788, 1531, 3126,
	2498, 2183, 2206, 1759, 2586, 1284, 1140, 1268, 1258, 2250,
	1204, 2291, 516, 2182, 1969, 974, 2053, 570, 1018, 571,
	1489, 2079, 2064, 953, 1958, 2021, 1540, 1457, 542, 1384,
	146, 209, 209, 1382, 203, 971, 500, 147, 202, 1282,
	1779, 524, 532, 1234, 565, 641, 1158, 139, 1690, 610,
	827, 519, 976, 951, 1388, 706, 1369, 1216, 2785, 2357,
	527, 2786, 2249, 790, 660, 1793, 1793, 1813, 1793, 1550,
	1396, 1397, 795, 1278, 3376, 3367, 2207, 2207, 2073, 2073,
	1396, 1397, 3366, 3347, 2090, 3334, 2073, 1731, 3332, 2989,
	3298, 2671, 2989, 3297, 2073, 574, 1399, 2073, 2627, 577,
	3294, 1805, 2772, 3291, 3295, 3288, 1399, 3292, 3264, 1731,
	3263, 828, 1731, 2628, 1731, 2594, 3260, 574, 2514, 982,
	1805, 577, 1398, 1727, 3259, 3222, 3213, 674, 1805, 2116,
	2989, 3212, 1398, 3206, 3200, 2989, 3198, 1731, 2989, 3164,
	2989, 3150, 3147, 2116, 796, 1731, 2989, 3117, 3116, 139,
	3109, 1731, 1731, 3108, 1731, 3082, 3063, 2989, 795, 1731,
	2116, 2073, 968, 3044, 3013, 954, 954, 2640, 2073, 3007,
	776, 2988, 2918, 2073, 2885, 2989, 2116, 775, 2878, 2877,
	2791, 2781, 2775, 2878, 2792, 2782, 2073, 2707, 2647, 2455,
	2453, 1731, 2648, 2073, 2073, 2452, 804, 1000, 3223, 2073,
	2406, 783, 1404, 2389, 2073, 2378, 2277, 2390, 2376, 2073,
	1809, 2129, 1404, 2115, 2377, 2073, 2113, 2116, 2110, 2106,
	3151, 1805, 2073, 1731, 1972, 955, 957, 2772, 958, 2065,
	1396, 1397, 1426, 1427, 1428, 2072, 2066, 1808, 1005, 2073,
	3008, 1809, 1426, 1427, 1428, 1731, 2648, 2197, 2142, 1651,
	1731, 2640, 2231, 2325, 1730, 2140, 1399, 1526, 1157, 179,
	176, 2629, 959, 2073, 956, 782, 781, 1670, 780, 1001,
	779, 176, 778, 2414, 2415, 774, 773, 772, 1396, 1397,
	2630, 2966, 1398, 1419, 771, 123, 770, 1973, 769, 768,
	767, 59, 766, 1419, 765, 764, 763, 704, 178, 703,
	702, 701, 60, 118, 1399, 700, 699, 2414, 2415, 178,
	2432, 2433, 2434, 698, 1794, 1794, 64, 1794, 697, 696,
	695, 1396, 1397, 694, 693, 692, 2914, 691, 690, 869,
	1398, 40, 120, 689, 688, 2414, 2415, 687, 686, 685,
	684, 177, 683, 682, 39, 681, 70, 1399, 680, 2360,
	673, 170, 177, 672, 632, 1974, 1971, 631, 590, 171,
	589, 588, 1404, 580, 1179, 209, 42, 2429, 579, 578,
	893, 43, 1420, 1398, 209, 555, 76, 554, 553, 121,
	148, 552, 1420, 2930, 41, 86, 536, 199, 198, 77,
	44, 148, 1426, 1427, 1428, 209, 197, 196, 195, 194,
	193, 192, 209, 191, 190, 2420, 189, 188, 187, 186,
	1404, 185, 2627, 184, 1731, 2879, 45, 1001, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 183, 78, 182, 181,
	180, 2789, 2496, 209, 209, 2383, 1026, 2372, 2308, 2420,
	1031, 998, 2210, 1419, 1467, 2107, 2237, 1976, 1552, 2098,
	1675, 2414, 2415, 1404, 2012, 1497, 2010, 2008, 209, 1801,
	1792, 1496, 1857, 1566, 2006, 2253, 1483, 2420, 1478, 1163,
	1395, 2004, 209, 1815, 1143, 1143, 209, 209, 1033, 209,
	990, 3284, 1500, 1426, 1427, 1428, 2430, 3265, 3196, 3157,
	2435, 209, 1400, 1401, 1402, 1403, 1405, 1406, 3099, 209,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 981, 1173,
	3045, 2968, 2651, 209, 209, 209, 209, 209, 1143, 1143,
	2430, 1161, 661, 1143, 1497, 209, 1143, 209, 1178, 1134,
	1496, 1767, 1420, 79, 1419, 2065, 1016, 1001, 3154, 1814,
	46, 2950, 3152, 2949, 1970, 1153, 3038, 59, 2430, 663,
	2937, 1495, 967, 1279, 2936, 2935, 2934, 2928, 60, 2927,
	2926, 2925, 2851, 49, 145, 82, 2804, 83, 2121, 47,
	1013, 1143, 64, 122, 1166, 2431, 1171, 2803, 1177, 48,
	2801, 2795, 2766, 2420, 1217, 1217, 176, 2765, 2764, 2691,
	1160, 209, 1159, 1035, 2687, 1128, 1133, 1479, 52, 1477,
	1465, 116, 70, 2491, 2449, 209, 1221, 574, 2440, 2431,
	119, 577, 1167, 2238, 2413, 2410, 2409, 2407, 2396, 2395,
	209, 2394, 2391, 1420, 178, 2388, 2366, 2365, 2358, 2278,
	2099, 1980, 76, 139, 1395, 1136, 1394, 2431, 1478, 798,
	1736, 86, 1734, 1040, 1272, 77, 3374, 117, 1151, 3346,
	1287, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 796, 149,
	3345, 1294, 1262, 1265, 2430, 3299, 989, 177, 1297, 1285,
	2716, 3255, 3253, 1172, 1218, 3191, 3189, 170, 3186, 3185,
	3181, 3175, 3146, 78, 176, 171, 176, 1210, 1213, 3145,
	1947, 1375, 1671, 2184, 1376, 2416, 2417, 2418, 2419, 2421,
	2422, 2321, 1402, 1403, 1405, 1406, 148, 3095, 3074, 4,
	3050, 3049, 3028, 3025, 3021, 2414, 2415, 2965, 2948, 2426,
	2427, 2428, 178, 2899, 178, 2896, 2425, 2423, 2424, 2416,
	2417, 2418, 2419, 2421, 2422, 2830, 2200, 3037, 3169, 1291,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 2829,
	2818, 2817, 2967, 2431, 2425, 2423, 2424, 2416, 2417, 2418,
	2419, 2421, 2422, 1301, 2777, 177, 2508, 177, 2682, 1953,
	2641, 2602, 2236, 1374, 2574, 170, 2555, 170, 2534, 2534,
	1368, 2170, 2533, 171, 1308, 171, 2414, 2415, 1381, 79,
	2510, 2454, 2387, 2386, 2371, 2349, 2219, 1501, 1498, 1490,
	1487, 2125, 1373, 2124, 148, 2102, 2252, 1371, 2084, 2071,
	843, 2002, 1461, 209, 1661, 1660, 1565, 1529, 1670, 1667,
	145, 82, 1525, 83, 1524, 1523, 1522, 1521, 1520, 176,
	776, 796, 1519, 1816, 1518, 1528, 1517, 775, 1515, 209,
	1377, 1537, 176, 1514, 2414, 2415, 176, 2420, 1391, 1392,
	209, 1042, 209, 209, 664, 1396, 1397, 116, 1513, 1143,
	569, 209, 209, 1512, 1511, 569, 209, 178, 1510, 1499,
	1573, 209, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 2475,
	178, 1399, 1479, 1509, 178, 1508, 1507, 1646, 1506, 1505,
	1504, 176, 1503, 1480, 1042, 2011, 2506, 2009, 2007, 1462,
	2414, 2415, 1560, 117, 2429, 2005, 1460, 1398, 1491, 1492,
	177, 1664, 2003, 1455, 982, 149, 982, 1673, 2420, 1012,
	170, 1003, 1645, 177, 995, 1534, 1535, 177, 171, 178,
	1547, 2922, 176, 170, 2800, 2784, 2780, 170, 3098, 1768,
	139, 171, 1396, 1397, 2375, 171, 2118, 954, 1576, 148,
	2085, 2414, 2415, 1643, 3155, 1458, 1670, 1548, 3153, 176,
	1670, 1561, 662, 1510, 1030, 1510, 148, 2558, 1399, 3190,
	178, 796, 177, 1028, 2611, 2039, 2420, 1670, 3043, 3009,
	2787, 1695, 170, 2643, 2642, 2207, 1571, 1404, 1552, 985,
	171, 1557, 966, 1316, 1398, 2393, 1497, 178, 2392, 2430,
	2186, 1612, 1496, 1366, 2331, 2172, 1527, 1025, 1648, 1657,
	2828, 148, 1485, 177, 1029, 1813, 761, 1143, 209, 2590,
	3129, 2589, 1764, 170, 1042, 2657, 1554, 1669, 2569, 1713,
	1665, 171, 2420, 3077, 574, 1685, 3349, 1464, 577, 574,
	177, 2249, 2718, 577, 1575, 3285, 2381, 2123, 1516, 1642,
	170, 1988, 148, 1577, 762, 1493, 2583, 2430, 171, 1756,
	1194, 3296, 3293, 209, 209, 2623, 2810, 3237, 2862, 2285,
	209, 627, 1574, 3322, 1305, 1569, 1662, 3323, 2999, 148,
	209, 3205, 1192, 1182, 757, 755, 2130, 2518, 2431, 209,
	753, 209, 751, 209, 1680, 3371, 1972, 209, 1681, 1847,
	748, 3286, 2986, 1845, 1715, 3123, 3120, 1717, 794, 209,
	1721, 3119, 3118, 2844, 2155, 1586, 1699, 2841, 1676, 2840,
	2807, 2146, 2806, 2146, 2370, 2369, 2368, 826, 2983, 2367,
	2335, 2202, 2833, 3016, 2145, 789, 2196, 1666, 825, 2418,
	2419, 2421, 2422, 745, 2193, 2174, 2431, 2112, 628, 1143,
	209, 1143, 1193, 1725, 1928, 1372, 1143, 1156, 1998, 1973,
	209, 209, 1997, 1886, 794, 1752, 2245, 3058, 1776, 2984,
	1143, 1143, 1755, 209, 1658, 1160, 2658, 1159, 1340, 209,
	793, 2173, 1854, 1682, 569, 209, 1855, 209, 1785, 209,
	1817, 209, 574, 209, 1822, 1684, 577, 993, 1298, 2507,
	1030, 2158, 1720, 209, 1729, 209, 2423, 2424, 2416, 2417,
	2418, 2419, 2421, 2422, 209, 1246, 1796, 1303, 1227, 1798,
	1226, 1205, 1800, 1692, 1826, 1695, 1803, 1974, 1971, 2847,
	1728, 1783, 2165, 209, 3204, 1030, 793, 1746, 3105, 209,
	1745, 2105, 1943, 1671, 1668, 1225, 795, 1224, 1732, 1686,
	1029, 1689, 1379, 1943, 1188, 2820, 1313, 1203, 2557, 1042,
	992, 1339, 1829, 2425, 2423, 2424, 2416, 2417, 2418, 2419,
	2421, 2422, 1778, 1781, 1693, 1694, 2133, 1400, 1401, 1402,
	1403, 1405, 1406, 3257, 796, 1029, 2660, 1818, 2135, 1864,
	1861, 1299, 1951, 1011, 1202, 1285, 2164, 1949, 1782, 2659,
	1976, 1335, 795, 981, 2305, 981, 1351, 2979, 679, 1190,
	2980, 1882, 1883, 1701, 3341, 2701, 3314, 983, 1013, 1976,
	2136, 1856, 2416, 2417, 2418, 2419, 2421, 2422, 1810, 2618,
	1705, 2157, 3281, 2134, 3361, 1925, 1959, 1960, 1687, 1744,
	622, 1793, 1561, 1988, 1042, 2982, 2566, 2995, 2323, 2324,
	3182, 1317, 1336, 2119, 1959, 1985, 2561, 2985, 574, 630,
	629, 2190, 577, 1712, 1811, 3322, 1853, 2552, 1836, 1406,
	1697, 1205, 1702, 1859, 1611, 2619, 1695, 3220, 2422, 792,
	1862, 1671, 2184, 1824, 1825, 1671, 2184, 209, 2519, 659,
	2020, 1488, 2024, 2024, 2037, 2546, 1959, 1680, 2842, 2057,
	2059, 1681, 1671, 2184, 2063, 810, 2517, 1976, 3313, 621,
	1860, 1042, 209, 1863, 2233, 1858, 1970, 1687, 1687, 776,
	1365, 209, 776, 776, 209, 1687, 1873, 1042, 2618, 1874,
	1875, 2831, 1338, 2143, 2545, 792, 2194, 2904, 556, 512,
	2103, 3068, 3193, 1706, 2156, 1984, 2577, 1723, 1022, 3282,
	1995, 1979, 2100, 1454, 2385, 2095, 796, 759, 2981, 2080,
	758, 749, 1539, 507, 1923, 1926, 749, 1722, 750, 796,
	1304, 1939, 1683, 796, 1846, 2086, 749, 2821, 1844, 2096,
	2097, 1245, 982, 1885, 1955, 2993, 1682, 2414, 2415, 795,
	2432, 2433, 2434, 1937, 2111, 1719, 2900, 3339, 1684, 982,
	1348, 746, 2798, 3218, 1982, 209, 1707, 1708, 1586, 1586,
	3055, 3106, 1922, 1539, 2906, 1703, 1006, 1322, 1693, 1694,
	1187, 954, 3283, 736, 3280, 2076, 3321, 3319, 1543, 2698,
	1023, 562, 3219, 3135, 3027, 1314, 1042, 1024, 3312, 2853,
	2606, 209, 1704, 2548, 2032, 787, 2048, 2429, 139, 209,
	2061, 620, 1686, 619, 796, 991, 1300, 2069, 2070, 209,
	1546, 2310, 2337, 3340, 2550, 2114, 2081, 2082, 1989, 2077,
	2240, 1757, 209, 1942, 1557, 1143, 1536, 1004, 1541, 1543,
	999, 623, 1349, 3362, 1872, 1378, 1315, 209, 1042, 1312,
	1794, 209, 209, 1544, 1933, 3342, 1828, 2699, 1716, 2994,
	499, 2120, 1934, 1387, 2147, 1935, 1499, 2549, 1940, 1950,
	3054, 1546, 564, 1542, 737, 2905, 2177, 209, 209, 2420,
	1386, 209, 2580, 1696, 3111, 1709, 1010, 2499, 3110, 1541,
	2471, 2220, 3356, 1924, 2946, 3093, 209, 2128, 3172, 2809,
	1649, 1687, 2313, 209, 1544, 209, 2607, 209, 1491, 1492,
	2530, 2104, 1350, 209, 2176, 581, 209, 2127, 209, 2204,
	209, 2526, 209, 209, 1542, 209, 1143, 1143, 1143, 2131,
	1143, 2159, 2161, 2191, 209, 209, 2697, 209, 1454, 1017,
	1134, 2169, 2241, 209, 2224, 1545, 2998, 2755, 1710, 1976,
	2221, 2346, 2150, 2997, 209, 1777, 209, 1766, 1765, 1740,
	2430, 2273, 2274, 558, 3056, 2228, 1385, 2203, 1680, 508,
	2178, 2199, 1681, 2344, 209, 209, 209, 2040, 209, 563,
	2185, 2187, 2188, 2189, 2167, 2242, 2212, 3228, 2214, 1850,
	1652, 1386, 2867, 2312, 2175, 1387, 1545, 2297, 3031, 2483,
	2260, 209, 2284, 1656, 3194, 1936, 1869, 2192, 1160, 2309,
	2208, 2218, 738, 1248, 1938, 3094, 2217, 2536, 2535, 560,
	2141, 509, 1543, 2329, 2232, 574, 1323, 1611, 1611, 577,
	2251, 2947, 2251, 3355, 1823, 1683, 2472, 2470, 139, 2262,
	2075, 2303, 2269, 2304, 985, 2299, 985, 2300, 2195, 2431,
	2074, 2255, 2271, 1233, 1546, 2275, 557, 1682, 678, 510,
	671, 511, 2109, 1572, 2266, 2108, 2267, 1654, 2268, 1684,
	2270, 1231, 2078, 1586, 2341, 2276, 1285, 1385, 2756, 901,
	2298, 2286, 1655, 2338, 2757, 2342, 2311, 1544, 2347, 2230,
	2484, 2996, 561, 793, 1022, 2315, 514, 1219, 2363, 2364,
	209, 3101, 1870, 559, 2179, 2180, 3177, 3, 3018, 2652,
	582, 583, 739, 2373, 1220, 1775, 3326, 3127, 2318, 205,
	3091, 502, 503, 1686, 2500, 520, 502, 520, 530, 535,
	2320, 981, 551, 1022, 2579, 2952, 2770, 1993, 3231, 2272,
	205, 3328, 3178, 1363, 3073, 2945, 3195, 1345, 981, 2846,
	740, 2443, 1343, 2317, 1333, 3092, 2681, 2502, 668, 2426,
	2427, 2428, 205, 2408, 2348, 2201, 2425, 2423, 2424, 2416,
	2417, 2418, 2419, 2421, 2422, 1331, 1023, 2171, 3102, 1545,
	2126, 1567, 2336, 1024, 1329, 1564, 2444, 2374, 1042, 1327,
	2451, 1325, 1319, 2456, 585, 584, 3232, 1229, 2463, 2464,
	3179, 1364, 1295, 796, 209, 789, 2465, 209, 2307, 2306,
	1843, 2302, 1687, 1852, 209, 1023, 1833, 209, 209, 1042,
	1644, 1502, 1024, 1209, 1992, 2343, 3276, 3225, 1042, 2972,
	2865, 2826, 2380, 209, 2345, 2486, 747, 2824, 2479, 2808,
	2605, 1678, 2592, 1232, 586, 587, 2591, 209, 2487, 2488,
	502, 502, 2246, 676, 677, 669, 670, 2235, 205, 2234,
	2609, 1230, 2215, 1807, 209, 209, 209, 982, 1806, 2709,
	209, 2478, 1804, 209, 1802, 982, 982, 1799, 2515, 982,
	209, 209, 209, 209, 209, 2490, 513, 987, 1797, 1362,
	2520, 2505, 2495, 1344, 209, 209, 1795, 2494, 1342, 2474,
	1332, 2532, 209, 982, 2477, 1786, 1389, 1737, 2480, 2538,
	2460, 2542, 2543, 1735, 209, 1143, 1726, 209, 2467, 2468,
	2503, 1330, 2473, 1042, 2457, 1714, 2531, 2446, 2447, 2448,
	1328, 1042, 1611, 2527, 2513, 1326, 209, 1324, 1318, 209,
	209, 1711, 1698, 1228, 2511, 2512, 1683, 1688, 2485, 3139,
	3323, 1143, 209, 1842, 1143, 1143, 1143, 752, 754, 3249,
	3047, 209, 2523, 963, 3046, 1184, 2593, 209, 2560, 1302,
	2501, 736, 983, 209, 983, 209, 2327, 2537, 1674, 2540,
	3141, 2146, 209, 2516, 2521, 2146, 2163, 964, 1390, 2876,
	1830, 1583, 2162, 787, 2575, 1695, 2160, 3184, 2040, 2040,
	1360, 1361, 1685, 1396, 1397, 1143, 1143, 3159, 2953, 2595,
	2551, 2181, 2462, 209, 209, 2567, 2166, 209, 1393, 2553,
	515, 2554, 1755, 2614, 2556, 2198, 2613, 1685, 2625, 209,
	1042, 209, 209, 1042, 209, 2562, 2565, 2571, 2176, 1396,
	1397, 2168, 2576, 2489, 2570, 3224, 3197, 2328, 2857, 2572,
	209, 2573, 2497, 2852, 2794, 1398, 2254, 1725, 2639, 2062,
	2563, 1647, 737, 1725, 2564, 1399, 1578, 3337, 526, 965,
	2622, 2504, 3354, 2414, 2415, 1396, 1397, 1307, 2655, 2622,
	2633, 2634, 2635, 1306, 2636, 2637, 2138, 2137, 1586, 1467,
	2665, 1398, 2799, 1042, 2612, 2704, 2138, 2509, 2040, 2040,
	2040, 1470, 2654, 2650, 1042, 1475, 209, 139, 796, 2624,
	2631, 2684, 2139, 2001, 2000, 1999, 1996, 1994, 1967, 1347,
	2923, 2696, 1346, 1586, 2638, 1465, 1463, 3363, 2568, 3085,
	3041, 3020, 2895, 2884, 2860, 785, 2850, 736, 2849, 2848,
	2823, 2632, 2603, 2601, 2264, 2239, 2216, 2662, 1954, 1789,
	1788, 2693, 2694, 2695, 2666, 2497, 2667, 1787, 2663, 787,
	2669, 1769, 1748, 2719, 2596, 1747, 1743, 2598, 2599, 2600,
	1742, 1741, 1739, 1882, 2725, 1738, 1380, 1359, 1358, 1341,
	1337, 1334, 1320, 1257, 996, 2767, 1256, 1255, 1254, 1882,
	2735, 2689, 1253, 668, 786, 1252, 1251, 1250, 1249, 209,
	738, 1247, 1242, 2708, 2700, 2702, 2703, 1241, 1240, 1239,
	2720, 209, 985, 2715, 1007, 1238, 1201, 1042, 2645, 2646,
	2763, 551, 1200, 2721, 1199, 1198, 2788, 2722, 737, 985,
	2783, 2724, 1197, 1196, 2759, 209, 2732, 205, 1195, 205,
	205, 1189, 1148, 1183, 205, 1181, 1180, 2734, 1009, 1008,
	938, 848, 205, 1162, 1151, 1650, 981, 1040, 760, 614,
	744, 3104, 1353, 75, 981, 981, 1191, 2760, 981, 601,
	69, 2822, 3236, 982, 734, 2544, 1832, 1186, 209, 1321,
	1758, 1834, 2476, 2083, 139, 2771, 2773, 2774, 3217, 2776,
	2834, 1208, 981, 2931, 2384, 205, 205, 3165, 1148, 3067,
	739, 2768, 1991, 1484, 71, 836, 2790, 921, 2973, 2843,
	205, 209, 209, 209, 2811, 209, 2779, 2706, 1244, 2290,
	2289, 1586, 2805, 803, 1045, 1659, 1042, 209, 2712, 2838,
	2802, 1143, 205, 205, 205, 205, 1148, 842, 740, 1672,
	2122, 2023, 1582, 845, 551, 1584, 205, 1611, 209, 847,
	846, 2812, 1585, 2797, 2825, 2880, 2827, 1486, 2845, 844,
	1581, 209, 209, 1143, 1143, 1143, 738, 209, 209, 209,
	1586, 1586, 209, 209, 2229, 2868, 2839, 2258, 2872, 209,
	2176, 1236, 1611, 724, 1583, 1583, 1586, 1586, 1663, 1948,
	2873, 2869, 1042, 2040, 2040, 1986, 2903, 2863, 2379, 1481,
	816, 838, 2832, 1983, 1002, 815, 2481, 2617, 2793, 3036,
	205, 1868, 2859, 2319, 2856, 1865, 617, 1586, 2411, 2870,
	1968, 1755, 994, 2921, 205, 2891, 2045, 2038, 2034, 982,
	1367, 1456, 2259, 1032, 2892, 2893, 2881, 209, 819, 535,
	2882, 2796, 2874, 2886, 2917, 2260, 2887, 1946, 1472, 2353,
	2894, 2492, 2626, 2117, 1876, 962, 961, 960, 2898, 3242,
	2908, 2897, 3239, 2909, 784, 2902, 739, 1653, 2132, 1448,
	832, 2461, 2460, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
	2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
	2040, 2040, 2653, 2040, 1206, 3183, 1447, 756, 209, 3174,
	1021, 1020, 1019, 2529, 740, 3360, 2819, 175, 1042, 172,
	1042, 174, 173, 2836, 2578, 91, 38, 37, 36, 18,
	115, 114, 113, 112, 111, 2944, 110, 209, 209, 209,
	109, 108, 107, 106, 105, 104, 103, 102, 101, 209,
	983, 100, 99, 98, 97, 209, 96, 209, 95, 94,
	209, 209, 209, 209, 209, 93, 2970, 983, 92, 35,
	547, 209, 209, 1143, 544, 1042, 51, 1143, 50, 90,
	2955, 2956, 89, 982, 17, 3001, 2888, 2889, 2890, 2961,
	1611, 34, 3006, 209, 2960, 2957, 1042, 2494, 15, 1143,
	2964, 2958, 2971, 982, 2991, 55, 3022, 56, 14, 209,
	30, 3015, 2959, 31, 81, 80, 2990, 29, 16, 28,
	26, 27, 12, 9, 8, 11, 2954, 1538, 13, 25,
	209, 144, 143, 74, 2969, 1042, 2992, 142, 73, 1611,
	1611, 141, 502, 3032, 3010, 140, 3014, 3002, 3003, 72,
	24, 10, 3000, 23, 3035, 1611, 1611, 136, 68, 3033,
	3005, 1042, 3023, 205, 1586, 205, 2614, 3029, 205, 3042,
	138, 3034, 981, 3011, 137, 3040, 65, 135, 134, 1162,
	1755, 205, 66, 3048, 133, 132, 1611, 67, 131, 205,
	1162, 520, 3057, 22, 205, 1162, 6, 1042, 3079, 1583,
	551, 54, 7, 209, 3052, 209, 2622, 1042, 209, 3059,
	2656, 84, 85, 3019, 32, 63, 209, 3051, 3024, 62,
	3075, 61, 21, 3064, 53, 20, 166, 165, 164, 163,
	1952, 159, 3088, 3087, 158, 162, 160, 161, 3039, 209,
	157, 130, 168, 167, 2963, 155, 152, 985, 151, 1470,
	3080, 3081, 209, 154, 3083, 985, 985, 156, 209, 985,
	153, 150, 169, 1143, 129, 58, 3086, 128, 209, 3122,
	3131, 127, 126, 125, 124, 57, 19, 802, 2, 1,
	0, 0, 3107, 985, 3113, 0, 3012, 2350, 2351, 209,
	3121, 3130, 3084, 0, 0, 0, 2044, 0, 0, 0,
	0, 0, 3138, 0, 0, 0, 0, 3136, 209, 0,
	3143, 3142, 3132, 0, 209, 3134, 0, 2872, 0, 0,
	0, 0, 209, 3137, 3114, 3115, 0, 0, 981, 0,
	0, 0, 3171, 0, 0, 3144, 3148, 3149, 0, 0,
	0, 0, 0, 0, 0, 3168, 3163, 205, 0, 209,
	209, 3170, 0, 2614, 0, 3140, 3158, 0, 0, 1040,
	3180, 0, 1572, 0, 0, 0, 209, 1143, 0, 0,
	0, 0, 209, 3192, 0, 0, 1143, 1143, 3188, 0,
	0, 0, 3211, 0, 209, 3065, 209, 2437, 2438, 2439,
	0, 0, 205, 205, 3199, 0, 0, 0, 0, 205,
	3207, 3203, 0, 0, 3221, 0, 209, 0, 0, 1774,
	3209, 3210, 209, 209, 3233, 1042, 0, 3214, 205, 0,
	205, 3065, 205, 1611, 209, 3208, 502, 3202, 3244, 0,
	1586, 1885, 0, 3252, 3245, 3254, 3247, 0, 1790, 0,
	3238, 0, 0, 0, 0, 0, 3187, 3262, 0, 0,
	3246, 0, 0, 3250, 209, 0, 0, 0, 0, 3258,
	0, 3256, 0, 0, 0, 3287, 0, 0, 3261, 0,
	0, 3215, 981, 3216, 3272, 3273, 3275, 3274, 0, 551,
	0, 1586, 0, 0, 3300, 0, 3289, 0, 209, 1148,
	205, 0, 981, 0, 0, 3309, 0, 0, 3301, 3234,
	0, 0, 551, 0, 3311, 0, 3306, 209, 205, 3302,
	0, 3304, 2040, 205, 205, 0, 205, 3317, 205, 3310,
	205, 0, 205, 3320, 3318, 0, 0, 0, 0, 0,
	209, 0, 1848, 3327, 1849, 3325, 3331, 3244, 3333, 3324,
	3303, 0, 3305, 205, 3336, 3335, 0, 0, 3330, 3307,
	3308, 2040, 0, 0, 0, 0, 1586, 0, 3251, 0,
	0, 3344, 535, 3343, 0, 0, 3351, 3350, 551, 3352,
	0, 0, 0, 3353, 0, 983, 3357, 0, 0, 0,
	0, 0, 0, 983, 983, 2260, 0, 983, 0, 0,
	3358, 3359, 0, 0, 0, 0, 0, 0, 3368, 3369,
	3370, 3372, 3373, 0, 0, 0, 0, 3364, 2986, 3365,
	3377, 983, 0, 0, 1583, 0, 0, 3329, 0, 3375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2983, 0, 0, 2976, 0, 1885,
	2040, 0, 0, 0, 0, 0, 0, 0, 0, 1583,
	2974, 0, 0, 985, 0, 0, 2978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 802, 2984, 1396, 1397, 802, 0,
	0, 0, 2677, 2678, 0, 0, 0, 0, 0, 1611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 1399, 0, 0, 2977, 0, 0, 0, 0,
	1164, 0, 1168, 0, 1174, 0, 502, 2044, 2044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 0,
	0, 205, 0, 0, 0, 0, 1418, 0, 0, 0,
	1611, 502, 0, 0, 0, 0, 0, 0, 205, 0,
	502, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743,
	2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
	2754, 0, 2758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1293, 1421, 1422,
	1423, 1424, 0, 0, 1296, 0, 0, 0, 1404, 985,
	0, 0, 0, 2979, 0, 1611, 2980, 2044, 2044, 2044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 520, 0, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 1583, 0, 814,
	0, 2982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2985, 0, 0, 0, 0, 0, 0,
	2154, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 1419,
	0, 0, 0, 0, 0, 0, 1583, 1583, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1583, 1583, 0, 0, 205, 0, 0, 0,
	205, 2209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 1450, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 1583, 0, 0, 205, 1162, 0, 0,
	205, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 1469, 2981, 1774, 0, 0, 0, 1482,
	0, 0, 2154, 985, 502, 0, 2263, 0, 1420, 0,
	0, 983, 205, 0, 0, 205, 0, 205, 0, 205,
	0, 205, 205, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 2282, 668, 0, 2154, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 1162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 205, 205, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 1532, 1532,
	1532, 0, 60, 0, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 64, 0, 0, 0,
	0, 0, 2044, 2044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 983, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 1162,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 77,
	1583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 0, 2044, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 205, 0, 1126, 0,
	0, 0, 0, 1126, 205, 205, 0, 0, 205, 0,
	0, 0, 0, 502, 0, 0, 502, 0, 0, 0,
	0, 983, 0, 502, 0, 0, 502, 502, 0, 0,
	0, 3072, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	3096, 0, 0, 205, 2154, 2525, 0, 0, 0, 2154,
	0, 0, 2525, 0, 0, 0, 0, 0, 0, 2154,
	2525, 2154, 2525, 2525, 145, 82, 0, 83, 0, 0,
	0, 0, 0, 205, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 1148, 0, 664, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2582, 0, 0, 2584, 2587,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 3162,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 1148, 117, 0, 0,
	0, 0, 2154, 0, 502, 0, 1583, 0, 0, 149,
	0, 2154, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 170, 0, 0,
	0, 1439, 1440, 1441, 0, 171, 0, 0, 0, 0,
	0, 0, 205, 1774, 0, 0, 1774, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 148, 1583, 2661, 0,
	1148, 205, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1866, 0, 1871, 0, 1398, 0, 205,
	0, 1878, 0, 0, 0, 1418, 0, 0, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 0, 1927, 0, 1929, 1930, 1931, 1932,
	0, 0, 1583, 0, 0, 2717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1956, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 1469, 0, 0, 0, 1981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 0, 0, 0, 0, 2036, 0, 2047,
	2049, 2054, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 502, 0,
	0, 1434, 0, 0, 902, 0, 0, 0, 1419, 0,
	502, 0, 1396, 1397, 0, 59, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 1399, 0,
	64, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 2044, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 0, 1126, 1398, 206, 0, 0, 0, 0,
	70, 0, 1418, 0, 0, 0, 0, 551, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	2044, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	2854, 205, 205, 77, 205, 0, 0, 0, 2912, 0,
	0, 0, 1437, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 0, 1404, 0, 0, 2154, 205, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	2282, 2282, 0, 0, 0, 0, 668, 668, 2154, 0,
	0, 1774, 1774, 0, 1426, 1427, 1428, 0, 205, 2044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2211, 1126, 2213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2932, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 82,
	0, 83, 205, 70, 0, 0, 1425, 1162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 205, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 664, 76, 0, 116, 2154, 2525, 2154, 0,
	0, 0, 86, 0, 0, 0, 77, 0, 1162, 0,
	0, 0, 0, 0, 2154, 0, 2525, 0, 178, 1162,
	1162, 205, 2154, 2525, 0, 0, 0, 0, 0, 0,
	205, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 78, 0, 0, 0, 0, 0,
	2333, 2334, 3026, 149, 0, 0, 2340, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 2154, 0,
	0, 170, 0, 0, 0, 2354, 2355, 0, 0, 171,
	0, 1981, 0, 0, 0, 0, 0, 0, 0, 1162,
	2362, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
	148, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 0, 0, 2382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2397, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2154, 1399, 2525, 0, 0, 3090, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 2054, 2054,
	2054, 145, 82, 1126, 83, 0, 0, 0, 0, 1398,
	0, 0, 0, 1532, 0, 0, 0, 1418, 551, 0,
	0, 2466, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 2587, 0, 0, 0, 664, 0, 205, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 0, 0,
	0, 0, 206, 1047, 206, 206, 1047, 0, 1047, 206,
	0, 178, 0, 2680, 0, 0, 0, 206, 205, 0,
	1126, 0, 0, 0, 0, 0, 802, 0, 0, 1421,
	1422, 1423, 1424, 0, 117, 0, 1126, 2717, 802, 1404,
	0, 0, 0, 502, 0, 0, 149, 0, 0, 0,
	0, 3090, 0, 0, 177, 0, 0, 0, 1047, 1047,
	206, 206, 0, 2547, 170, 0, 0, 0, 0, 1426,
	1427, 1428, 171, 0, 0, 206, 0, 0, 2154, 2525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 0, 205, 0, 206, 206, 206,
	206, 2525, 1047, 1047, 0, 0, 0, 1047, 0, 0,
	1047, 206, 0, 1162, 0, 1162, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 1396, 1397, 0, 0, 0,
	0, 0, 0, 0, 0, 3229, 0, 0, 0, 0,
	0, 1162, 205, 0, 0, 1126, 0, 2615, 0, 0,
	0, 1399, 0, 205, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 1398, 0, 0,
	0, 0, 210, 2717, 0, 1418, 0, 0, 0, 206,
	0, 1425, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2414, 2415, 1420,
	2432, 2433, 2434, 0, 0, 0, 0, 2154, 0, 2668,
	0, 0, 0, 1878, 0, 0, 2913, 0, 0, 2672,
	2673, 2675, 0, 2676, 0, 0, 3090, 2679, 0, 0,
	0, 0, 0, 568, 0, 0, 2683, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 2690, 0, 1404, 2466, 1162,
	0, 0, 0, 0, 0, 568, 0, 2429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2710,
	0, 0, 0, 1396, 1397, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 2726, 2727,
	0, 2728, 2729, 2730, 868, 0, 2731, 0, 0, 1399,
	2733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1398, 0, 0, 1419, 2420,
	0, 2761, 2762, 1418, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 0, 2778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 2674,
	2435, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 1425,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	2430, 0, 0, 206, 1399, 0, 0, 1420, 0, 0,
	0, 2813, 2816, 0, 0, 1047, 206, 206, 0, 0,
	0, 0, 0, 1047, 206, 1426, 1427, 1428, 0, 206,
	1398, 0, 0, 0, 2835, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 2339, 0, 0, 0, 0, 2431,
	0, 0, 0, 0, 0, 0, 1532, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 2883, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 0, 0,
	1426, 1427, 1428, 0, 0, 1396, 1397, 1425, 1126, 0,
	0, 0, 2910, 2911, 0, 0, 0, 1126, 2915, 2916,
	0, 0, 0, 2919, 2920, 1420, 0, 0, 0, 0,
	2924, 1399, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 1047, 206, 0, 0, 0, 0, 0, 1047, 2929,
	814, 1419, 0, 0, 0, 0, 2933, 1398, 0, 2426,
	2427, 2428, 0, 0, 0, 1418, 2425, 2423, 2424, 2416,
	2417, 2418, 2419, 2421, 2422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2332, 1126, 206, 0, 206, 0, 206, 0, 0,
	1126, 0, 1425, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	1420, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 2816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 1047, 0, 1047, 0, 0, 0, 0,
	1047, 1043, 0, 0, 1144, 206, 1043, 0, 0, 0,
	0, 0, 0, 0, 1047, 1047, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 206, 206,
	0, 206, 0, 206, 0, 206, 0, 206, 1419, 1126,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2816, 0, 1144, 1144, 206, 2414,
	2415, 0, 2432, 2433, 2434, 0, 0, 0, 0, 0,
	3060, 3061, 3062, 0, 0, 0, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3070, 3071, 0, 0,
	1144, 1144, 1126, 1047, 0, 1144, 0, 0, 1144, 1425,
	3078, 0, 0, 1126, 0, 0, 0, 0, 0, 2429,
	0, 0, 204, 0, 204, 204, 0, 1420, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2816, 0, 0,
	0, 0, 0, 1144, 0, 3112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 802, 0, 0,
	0, 0, 0, 0, 3124, 0, 0, 0, 0, 0,
	204, 204, 0, 2816, 0, 0, 2816, 0, 1047, 0,
	0, 2420, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2816, 2816, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 204, 204,
	204, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2435, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 3173, 0, 1047, 3176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 1047, 2430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2414, 2415, 0, 2432, 2433, 2434, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 2686, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2431, 0, 0, 2414, 2415, 0, 2432, 2433, 2434,
	0, 0, 0, 0, 0, 0, 3271, 3271, 3271, 0,
	1047, 0, 2429, 2685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 3290, 0, 0, 0, 0,
	0, 1126, 0, 206, 0, 0, 0, 0, 872, 0,
	0, 2816, 0, 2816, 0, 0, 206, 0, 0, 1047,
	0, 0, 0, 0, 2429, 0, 3271, 0, 0, 0,
	0, 206, 1047, 1043, 0, 206, 0, 0, 0, 0,
	0, 1144, 568, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 2420, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 206, 0, 837, 88, 0,
	0, 2426, 2427, 2428, 0, 0, 1043, 0, 2425, 2423,
	2424, 2416, 2417, 2418, 2419, 2421, 2422, 0, 0, 0,
	0, 0, 0, 0, 0, 3271, 2420, 206, 0, 0,
	206, 0, 206, 0, 206, 2435, 206, 206, 0, 0,
	1047, 1047, 1047, 0, 1047, 0, 0, 1126, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 2430, 0, 0, 1555, 0,
	984, 0, 0, 204, 0, 88, 0, 2435, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 1555, 206, 206,
	206, 0, 206, 0, 575, 0, 0, 0, 0, 575,
	0, 0, 0, 0, 1126, 0, 0, 2430, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 1144,
	0, 0, 0, 0, 0, 0, 1043, 777, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 0, 0, 0,
	0, 0, 0, 0, 2431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 2431, 0, 0, 0,
	0, 0, 2414, 2415, 0, 2432, 2433, 2434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 2429, 1144, 2426, 2427, 2428, 0, 1144, 814,
	0, 2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422,
	0, 0, 1144, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 204, 204, 0,
	977, 0, 1047, 0, 204, 0, 2426, 2427, 2428, 0,
	0, 0, 0, 2425, 2423, 2424, 2416, 2417, 2418, 2419,
	2421, 2422, 0, 204, 0, 204, 0, 204, 0, 0,
	0, 0, 0, 1047, 2420, 0, 0, 0, 0, 0,
	200, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2436, 0, 0, 0, 0, 0, 0, 0, 651,
	0, 1043, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 2435, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 206,
	0, 0, 0, 204, 0, 2430, 206, 0, 575, 204,
	0, 204, 634, 204, 0, 204, 0, 204, 206, 1047,
	0, 635, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 1126, 1047, 636, 0, 204, 0,
	814, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 656, 0, 0, 1047, 206, 0, 1047, 1047,
	1047, 0, 0, 0, 0, 206, 0, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 1044, 0, 0,
	1145, 0, 1044, 0, 2431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 639, 0, 0, 640, 0, 1047,
	1047, 0, 0, 1043, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 655, 1047, 0, 206, 1047, 206, 0,
	0, 0, 1145, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 88, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1145, 1145, 0, 0,
	0, 1145, 0, 0, 1145, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 2426, 2427, 2428, 0, 1047, 0,
	0, 2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422,
	0, 642, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 659, 643, 1043, 1145,
	0, 0, 0, 984, 0, 0, 0, 0, 204, 0,
	797, 88, 0, 0, 0, 592, 0, 0, 88, 0,
	0, 0, 0, 0, 658, 88, 0, 0, 0, 0,
	0, 644, 0, 0, 645, 0, 0, 1144, 0, 0,
	653, 0, 0, 0, 0, 593, 612, 646, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 647, 654, 0, 0,
	0, 1047, 0, 0, 0, 618, 648, 0, 0, 0,
	0, 596, 0, 0, 0, 0, 0, 650, 0, 0,
	616, 0, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 652, 0, 0, 0, 1144, 1144,
	1144, 0, 1144, 204, 0, 0, 0, 598, 0, 0,
	599, 622, 0, 204, 0, 625, 0, 777, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 575, 206, 206, 0, 206,
	0, 0, 0, 1468, 0, 0, 0, 1474, 0, 0,
	1047, 206, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 204, 0, 0, 1037, 0,
	621, 0, 0, 0, 0, 1155, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 1047, 1047,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	204, 0, 204, 206, 204, 600, 204, 204, 0, 0,
	0, 0, 0, 0, 603, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 1237, 0, 0, 0, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 624, 204, 204,
	204, 0, 204, 1261, 1261, 1261, 1155, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 88, 0,
	606, 1553, 1044, 1556, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 620, 0, 619, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	609, 0, 1047, 0, 1047, 615, 0, 0, 0, 0,
	626, 1352, 623, 0, 0, 0, 613, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 1043, 0, 0, 0, 206, 206, 1047, 0, 1047,
	1043, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	1047, 0, 1044, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 1047, 0, 1144, 0, 984,
	984, 0, 0, 984, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1555, 0, 0,
	0, 1047, 0, 1144, 0, 0, 1144, 1144, 1144, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 1145, 0, 1145,
	0, 0, 0, 0, 1145, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1145, 1145,
	0, 0, 0, 0, 0, 0, 0, 1144, 1144, 0,
	0, 0, 206, 0, 0, 0, 0, 1047, 204, 204,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 1562,
	0, 0, 1043, 0, 0, 1043, 797, 0, 204, 0,
	0, 0, 1570, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 1047, 0, 0, 0, 0, 777, 204, 0, 777,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 1047,
	0, 0, 1044, 0, 204, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 1468, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1750, 0, 1044, 0, 0, 0, 0,
	1761, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 1780, 0, 1780, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 1556, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 984, 0, 0,
	0, 1399, 0, 0, 1445, 0, 88, 0, 1043, 0,
	0, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 1820, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 1044, 1144, 1144, 1144, 0, 1831,
	0, 0, 0, 0, 0, 1837, 0, 1838, 0, 1839,
	0, 1840, 0, 1841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 1851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 204, 88, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 984, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 88, 0, 88, 1413, 1414, 0, 0,
	0, 0, 0, 0, 1145, 1145, 1145, 0, 1145, 0,
	0, 1434, 0, 204, 0, 0, 0, 0, 1419, 0,
	1043, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 88, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 0, 1043, 0, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 1144, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2101, 0, 0, 984, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 1043,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 1043,
	0, 0, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 2940, 0, 0,
	0, 2939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2227, 0, 0,
	0, 1761, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 972, 972, 0, 0, 972, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2265, 0, 0, 1261, 0, 1261, 0,
	1261, 0, 1155, 1155, 0, 0, 0, 0, 0, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 1144,
	0, 0, 204, 2301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 204, 2314, 1155, 2316, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 1145,
	0, 0, 1145, 1145, 1145, 0, 0, 0, 0, 0,
	0, 2330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 1145, 0, 0, 0, 0, 0,
	204, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 1044, 0,
	797, 1044, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 1398, 0, 0, 204, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 0, 1434,
	0, 0, 0, 0, 2522, 0, 1419, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 2559, 2227, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2597, 0, 0, 1420, 0, 0, 0, 0,
	0, 2604, 0, 0, 1044, 0, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 1145, 1145, 1145, 0, 0, 0, 1399, 0, 0,
	1445, 0, 0, 2649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 2664, 1398, 1155, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 972, 0, 1415, 0,
	2670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 2402, 0, 0, 0, 2403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 0, 1404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 1044, 0, 1044, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 0, 1434, 0, 0,
	972, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1145, 0, 1044, 0, 1145, 0, 1398, 0, 0,
	0, 1444, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 1044, 1433, 0, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 1425, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 88, 0, 1421, 1422, 1423,
	1424, 0, 0, 1420, 0, 0, 0, 1404, 0, 1044,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 2855, 1436, 1446, 2858, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 1044, 0, 2864, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2901,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	1435, 1145, 0, 1410, 1411, 1417, 1416, 1412, 1438, 1433,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 1977, 0, 0, 0, 1978, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 0, 1420, 0, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 0, 1437, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 3004, 0, 0, 0, 0, 1404, 0, 0,
	0, 2227, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 2938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 88, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3097, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3133, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 3201, 0, 0, 0,
	0, 2688, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 3235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3248, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 0, 2088, 0, 0, 0, 0, 0,
	0, 0, 0, 2089, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2962, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3066, 0,
	214, 215, 216, 217, 218, 1048, 219, 1049, 1050, 1051,
	1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 1057, 226, 227, 228,
	229, 230, 231, 1058, 1059, 232, 458, 459, 460, 1060,
	233, 461, 1061, 1046, 1062, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1063, 243, 0, 244, 245,
	246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069,
	1070, 1071, 249, 250, 251, 252, 253, 254, 462, 463,
	1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076, 259,
	260, 261, 1077, 262, 1078, 263, 264, 1079, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 1080,
	211, 1081, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 1082, 281, 1083, 1084, 924, 282,
	283, 1085, 284, 468, 1086, 469, 285, 1087, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 1088,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 1089,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 1090,
	475, 1091, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 1092, 314, 313,
	1093, 315, 477, 930, 316, 317, 931, 1094, 318, 319,
	1095, 1096, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 1097, 213,
	933, 1098, 478, 479, 334, 335, 1099, 336, 337, 338,
	1100, 1101, 340, 341, 1102, 1103, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	1104, 351, 482, 352, 483, 353, 1105, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 1106, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1107, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1108, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1109, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 1110, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 1111, 419, 420, 418, 1112,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 1113,
	488, 489, 490, 491, 1114, 1115, 428, 429, 492, 430,
	493, 1116, 431, 432, 433, 0, 434, 435, 1117, 1118,
	436, 437, 438, 439, 441, 1119, 442, 1120, 440, 443,
	444, 445, 494, 495, 496, 1121, 447, 446, 497, 1122,
	1123, 1124, 1125, 448, 449, 498, 450, 451, 452, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2713, 0, 214, 215, 216, 217,
	218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054,
	1055, 1056, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 1057, 226, 227, 228, 229, 230, 231, 1058,
	1059, 232, 458, 459, 460, 1060, 233, 461, 1061, 1046,
	1062, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1063, 243, 0, 244, 245, 246, 1064, 923, 247,
	248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250,
	251, 252, 253, 254, 462, 463, 1072, 255, 1073, 257,
	256, 1074, 258, 1075, 1076, 259, 260, 261, 1077, 262,
	1078, 263, 264, 1079, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 1080, 211, 1081, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	1082, 281, 1083, 1084, 924, 282, 283, 1085, 284, 468,
	1086, 469, 285, 1087, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 1088, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 1089, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 1090, 475, 1091, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 1092, 314, 313, 1093, 315, 477, 930,
	316, 317, 931, 1094, 318, 319, 1095, 1096, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 1097, 213, 933, 1098, 478, 479,
	334, 335, 1099, 336, 337, 338, 1100, 1101, 340, 341,
	1102, 1103, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 1104, 351, 482, 352,
	483, 353, 1105, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1106, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1107,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1108, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1109, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 1110, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1111, 419, 420, 418, 1112, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 1113, 488, 489, 490, 491,
	1114, 1115, 428, 429, 492, 430, 493, 1116, 431, 432,
	433, 0, 434, 435, 1117, 1118, 436, 437, 438, 439,
	441, 1119, 442, 1120, 440, 443, 444, 445, 494, 495,
	496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448,
	449, 498, 450, 451, 452, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2705, 0, 214, 215, 216, 217, 218, 1048, 219, 1049,
	1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 1057, 226,
	227, 228, 229, 230, 231, 1058, 1059, 232, 458, 459,
	460, 1060, 233, 461, 1061, 1046, 1062, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1063, 243, 0,
	244, 245, 246, 1064, 923, 247, 248, 1065, 1066, 1068,
	1067, 1069, 1070, 1071, 249, 250, 251, 252, 253, 254,
	462, 463, 1072, 255, 1073, 257, 256, 1074, 258, 1075,
	1076, 259, 260, 261, 1077, 262, 1078, 263, 264, 1079,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 1080, 211, 1081, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 1082, 281, 1083, 1084,
	924, 282, 283, 1085, 284, 468, 1086, 469, 285, 1087,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 1088, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 1089, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 1090, 475, 1091, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 1092,
	314, 313, 1093, 315, 477, 930, 316, 317, 931, 1094,
	318, 319, 1095, 1096, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	1097, 213, 933, 1098, 478, 479, 334, 335, 1099, 336,
	337, 338, 1100, 1101, 340, 341, 1102, 1103, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 1104, 351, 482, 352, 483, 353, 1105, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1106, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1107, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1108, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1109, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 1110, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1111, 419, 420,
	418, 1112, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 1113, 488, 489, 490, 491, 1114, 1115, 428, 429,
	492, 430, 493, 1116, 431, 432, 433, 0, 434, 435,
	1117, 1118, 436, 437, 438, 439, 441, 1119, 442, 1120,
	440, 443, 444, 445, 494, 495, 496, 1121, 447, 446,
	497, 1122, 1123, 1124, 1125, 448, 449, 498, 450, 451,
	452, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2581, 0, 214, 215,
	216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453,
	1053, 1054, 1055, 1056, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 1057, 226, 227, 228, 229, 230,
	231, 1058, 1059, 232, 458, 459, 460, 1060, 233, 461,
	1061, 1046, 1062, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1063, 243, 0, 244, 245, 246, 1064,
	923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071,
	249, 250, 251, 252, 253, 254, 462, 463, 1072, 255,
	1073, 257, 256, 1074, 258, 1075, 1076, 259, 260, 261,
	1077, 262, 1078, 263, 264, 1079, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 1080, 211, 1081,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 1082, 281, 1083, 1084, 924, 282, 283, 1085,
	284, 468, 1086, 469, 285, 1087, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 1088, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 1089, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 1090, 475, 1091,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 1092, 314, 313, 1093, 315,
	477, 930, 316, 317, 931, 1094, 318, 319, 1095, 1096,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 1097, 213, 933, 1098,
	478, 479, 334, 335, 1099, 336, 337, 338, 1100, 1101,
	340, 341, 1102, 1103, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 1104, 351,
	482, 352, 483, 353, 1105, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 1106, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 1107, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 1108,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	1109, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	1110, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 1111, 419, 420, 418, 1112, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 1113, 488, 489,
	490, 491, 1114, 1115, 428, 429, 492, 430, 493, 1116,
	431, 432, 433, 0, 434, 435, 1117, 1118, 436, 437,
	438, 439, 441, 1119, 442, 1120, 440, 443, 444, 445,
	494, 495, 496, 1121, 447, 446, 497, 1122, 1123, 1124,
	1125, 448, 449, 498, 450, 451, 452, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1990, 0, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 1149, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1733, 0,
	0, 0, 214, 215, 216, 217, 218, 1048, 219, 1049,
	1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 1057, 226,
	227, 228, 229, 230, 231, 1058, 1059, 232, 458, 459,
	460, 1060, 233, 461, 1061, 1046, 1062, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1063, 243, 0,
	244, 245, 246, 1064, 923, 247, 248, 1065, 1066, 1068,
	1067, 1069, 1070, 1071, 249, 250, 251, 252, 253, 254,
	462, 463, 1072, 255, 1073, 257, 256, 1074, 258, 1075,
	1076, 259, 260, 261, 1077, 262, 1078, 263, 264, 1079,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 1080, 211, 1081, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 1082, 281, 1083, 1084,
	924, 282, 283, 1085, 284, 468, 1086, 469, 285, 1087,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 1088, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 1089, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 1090, 475, 1091, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 1092,
	314, 313, 1093, 315, 477, 930, 316, 317, 931, 1094,
	318, 319, 1095, 1096, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	1097, 213, 933, 1098, 478, 479, 334, 335, 1099, 336,
	337, 338, 1100, 1101, 340, 341, 1102, 1103, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 1104, 351, 482, 352, 483, 353, 1105, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1106, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1107, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1108, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1109, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 1110, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1111, 419, 420,
	418, 1112, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 1113, 488, 489, 490, 491, 1114, 1115, 428, 429,
	492, 430, 493, 1116, 431, 432, 433, 0, 434, 435,
	1117, 1118, 436, 437, 438, 439, 441, 1119, 442, 1120,
	440, 443, 444, 445, 494, 495, 496, 1121, 447, 446,
	497, 1122, 1123, 1124, 1125, 448, 449, 498, 450, 451,
	452, 1038, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 1048, 219, 1049, 1050, 1051,
	1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 1057, 226, 227, 228,
	229, 230, 231, 1058, 1059, 232, 458, 459, 460, 1060,
	233, 461, 1061, 1046, 1062, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1063, 243, 0, 244, 245,
	246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069,
	1070, 1071, 249, 250, 251, 252, 253, 254, 462, 463,
	1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076, 259,
	260, 261, 1077, 262, 1078, 263, 264, 1079, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 1080,
	211, 1081, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 1082, 281, 1083, 1084, 924, 282,
	283, 1085, 284, 468, 1086, 469, 285, 1087, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 1088,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 1089,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 1090,
	475, 1091, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 1092, 314, 313,
	1093, 315, 477, 930, 316, 317, 931, 1094, 318, 319,
	1095, 1096, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 1097, 213,
	933, 1098, 478, 479, 334, 335, 1099, 336, 337, 338,
	1100, 1101, 340, 341, 1102, 1103, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	1104, 351, 482, 352, 483, 353, 1105, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 1106, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1107, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1108, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1109, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 1110, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 1111, 419, 420, 418, 1112,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 1113,
	488, 489, 490, 491, 1114, 1115, 428, 429, 492, 430,
	493, 1116, 431, 432, 433, 0, 434, 435, 1117, 1118,
	436, 437, 438, 439, 441, 1119, 442, 1120, 440, 443,
	444, 445, 494, 495, 496, 1121, 447, 446, 497, 1122,
	1123, 1124, 1125, 448, 449, 498, 450, 451, 452, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054,
	1055, 1056, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 1057, 226, 227, 228, 229, 230, 231, 1058,
	1059, 232, 458, 459, 460, 1060, 233, 461, 1061, 1046,
	1062, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1063, 243, 0, 244, 245, 246, 1064, 923, 247,
	248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250,
	251, 252, 253, 254, 462, 463, 1072, 255, 1073, 257,
	256, 1074, 258, 1075, 1076, 259, 260, 261, 1077, 262,
	1078, 263, 264, 1079, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 1080, 211, 1081, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	1082, 281, 1083, 1084, 924, 282, 283, 1085, 284, 468,
	1086, 469, 285, 1087, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 1088, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 1089, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 1090, 475, 1091, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 1092, 314, 313, 1093, 315, 477, 930,
	316, 317, 931, 1094, 318, 319, 1095, 1096, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 1097, 213, 933, 1098, 478, 479,
	334, 335, 1099, 336, 337, 338, 1100, 1101, 340, 341,
	1102, 1103, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 1104, 351, 482, 352,
	483, 353, 1105, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1106, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1107,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1108, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1109, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 1110, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1111, 419, 420, 418, 1112, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 1113, 488, 489, 490, 491,
	1114, 1115, 428, 429, 492, 430, 493, 1116, 431, 432,
	433, 0, 434, 435, 1117, 1118, 436, 437, 438, 439,
	441, 1119, 442, 1120, 440, 443, 444, 445, 494, 495,
	496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448,
	449, 498, 450, 451, 452, 1966, 0, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 1963,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 1964, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 1962,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 1965, 0,
	0, 0, 0, 0, 0, 835, 1961, 0, 0, 0,
	798, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	176, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 178, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 1286, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 170, 448, 449, 498, 450, 451, 452, 809, 171,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	1473, 1471, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 176, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 178,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 1286, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 170, 448, 449, 498, 450, 451, 452, 809,
	171, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 1473, 2352, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 176, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	178, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 1286, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 170, 448, 449, 498, 450, 451, 452,
	809, 171, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 1473, 1471, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 2050, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 2055,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 2051, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 2052, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 801, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 813, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 813, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 2875, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 1533, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 0, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 2692,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	1880, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 1879, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	1533, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 833, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 2055, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 1471, 0, 0, 0, 2060, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 2058, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 2046, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 2035, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 2033, 833,
	2025, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 2028, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 2029, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 2030, 2027, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 2031, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 2026, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 2022, 833, 2025, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 2028,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 2029, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	2030, 2027, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 2031, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 2026,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 1479, 0, 835, 0, 0, 0, 0, 0,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 1867, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 1176, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1175, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 1170,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1169, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 1165, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 3270,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 3269, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 3268, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	3270, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 3269, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 0, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 2043, 0, 0, 0, 0, 2041,
	2042, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 0, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 3270, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 0, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 0, 0, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 0, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 0, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 3269, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 798, 0, 986, 0, 0, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	214, 215, 216, 217, 218, 833, 219, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 913, 232, 458, 459, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 973, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 213,
	933, 0, 918, 479, 334, 335, 0, 336, 337, 338,
	0, 978, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 980, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 176, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 944, 0, 419, 420, 418, 178,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 945, 430,
	946, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 912, 442, 0, 440, 443,
	444, 445, 1286, 495, 496, 0, 447, 446, 497, 986,
	0, 0, 170, 448, 449, 498, 450, 451, 452, 0,
	171, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 0, 970,
	0, 1558, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	913, 232, 458, 459, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 973, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 0, 918, 479,
	334, 335, 0, 336, 337, 338, 0, 978, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 980, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	944, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 945, 430, 946, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 440, 443, 444, 445, 1286, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 170, 448,
	449, 498, 450, 451, 452, 0, 171, 0, 0, 2459,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 1558, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 913, 232, 458, 459, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 973, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 0,
	918, 479, 334, 335, 0, 336, 337, 338, 0, 978,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 980,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 945, 430, 946, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 912, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 969, 0,
	986, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 970, 914, 975,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 913, 232, 458, 459, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 973, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 213, 933, 0, 918,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 980, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 945, 430, 946, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 912, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 986, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 0, 970, 0, 975, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 913, 232, 458,
	459, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	973, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 213, 933, 0, 918, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 980, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 945, 430, 946, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 912, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 986, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 0, 970, 0, 975, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 913, 232, 458, 459, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 213, 933,
	0, 918, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	980, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 945, 430, 946,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 912, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 798, 0,
	1142, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	1460, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 176, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 178, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1286,
	495, 496, 0, 447, 446, 497, 1283, 0, 1142, 170,
	448, 449, 498, 450, 451, 452, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 148, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 176, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 178, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 1286, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 170, 448, 449,
	498, 450, 451, 452, 0, 171, 0, 0, 0, 0,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 2644, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 986, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 0, 0, 0, 1290, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 913, 232, 458, 459, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 213, 933,
	0, 918, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 945, 430, 946,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 912, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 798, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 176, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 178, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1286,
	495, 496, 0, 447, 446, 497, 208, 0, 0, 170,
	448, 449, 498, 450, 451, 452, 0, 171, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 148, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 208, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 1563, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 208, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	2261, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 675, 0, 567, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 2716, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 573, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 572, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 566, 0, 567, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 576, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 573, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 572, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 567, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 576, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 573, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	1835, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 572, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 567,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 576, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	573, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 572, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	576, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 1311, 0, 1142,
	1141, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 576, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 1310, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 1309,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 1281, 0, 1142, 1141, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1280,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 1277, 0, 1142, 1141, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1276, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1215, 0, 1142, 1141, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1214, 471, 472, 926, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 1212,
	0, 1142, 1141, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1211, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 1135, 0, 1142,
	1141, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1137, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 1142, 1141, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1142, 1141, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 926, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 1142, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 2155, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 2152, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 2296, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 2158, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 2293, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 2295, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 2292, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 2157, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 2294, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 2155, 233, 461, 0, 0, 2149, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 2152,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	2158, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 2148,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	2157, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 2156, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1354, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 1357, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 1355, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 1356, 446,
	497, 1130, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1132, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 978, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1127,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1129, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 978,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1034, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1036, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 978, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 529, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 528, 218, 518,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 521, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 522, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 523, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 517, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 518, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 521, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 522, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 523, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 978, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 2226, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1821, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 1760, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1754, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1753, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1749,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1751, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1270, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1269, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1267, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1266,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 213, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1264, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1263, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1260, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1259, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1235,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1152, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1154, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 213, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 521, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 522, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 523, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 667,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 666, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 506, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 505, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 504, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 2093, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 208, 2283, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 2837, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 208, 2283, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 2280, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 1827,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1819, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 549, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 1014, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 550, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 546, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	545, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1772,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1771, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 549, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 539, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 550, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 546, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 1289, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 545, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 1274, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1273,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1223, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1222, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 1207, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1146,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 549, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 1014, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 550, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 546, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 545, 489, 490, 491,
	0, 0, 428, 1015, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 997, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 549, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 539, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 537, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 538, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 550, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 540, 381, 0, 382,
	386, 387, 546, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 541, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 545, 489, 490, 491,
	0, 0, 428, 543, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 533, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 534, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 531, 0, 208, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 525, 0, 208, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 501,
	0, 208, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 2541, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 2539,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 2528, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 2243, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 534, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 208, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 1784, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 0, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 208, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 1243,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 208,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 1185, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 208, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 952, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 208, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 0, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 0, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 0, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 0, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	1399, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0,
	0, 1404, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 0, 1398, 0, 0, 2405, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0,
	2404, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1437, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 0, 1398, 0, 0, 2401, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0,
	0, 2400, 0, 1404, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 0, 0, 0, 0, 1434, 1404, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1425, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1437, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 1398, 0, 0, 2399, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 0, 1398,
	0, 0, 1978, 0, 1404, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 1434, 1404,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 1425, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1437, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 3230, 1398, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 3226,
	1398, 0, 0, 0, 0, 1404, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 1434,
	1404, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1425, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 1437, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 3161, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424,
	3160, 1398, 0, 0, 0, 0, 1404, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	1434, 1404, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1425, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1437, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 3069, 1398, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423,
	1424, 2987, 1398, 0, 0, 0, 0, 1404, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 1434, 1404, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 1425,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1437, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 2943, 1398, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422,
	1423, 1424, 2942, 1398, 0, 0, 0, 0, 1404, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 2941, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 2907, 1398, 0, 0, 0, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 2723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 0, 1445, 0, 0,
	0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1398, 0, 2356, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 2327, 0, 1399,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0, 0,
	1404, 3316, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 2328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 3315, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 2068, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 2067, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0,
	0, 1404, 0, 2444, 1418, 0, 2443, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 0, 1398, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0,
	0, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1437, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 0, 1398, 2711, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 2445,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0,
	0, 0, 0, 1404, 0, 0, 1418, 0, 2450, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 0, 0, 0, 0, 1434, 1404, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1425, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1437, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	2398, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 0, 1398,
	0, 0, 0, 0, 1404, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 1434, 1404,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 2412, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 1425, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1437, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 0, 1398, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 0,
	1398, 0, 0, 0, 0, 1404, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 1434,
	1404, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 1434, 0, 0, 1425, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 1420, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	1437, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 1437, 0, 1404, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 1436, 1446, 0, 1398, 1426, 1427, 1428,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 1435, 1419, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1608, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 1420, 1620, 1602,
	1609, 1592, 1630, 1629, 0, 0, 1594, 1593, 0, 0,
	1434, 0, 0, 0, 1640, 1641, 0, 1419, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1631, 0, 1627, 1626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 1624, 1622, 1623,
	0, 0, 0, 0, 1435, 0, 1420, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 0, 1604,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	1613, 1607, 1615, 1617, 1618, 1619, 1614, 0, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 1636, 1637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 0, 1605, 0, 1606, 0, 0,
	0, 0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1621, 0, 0, 0, 1589, 1587, 1588,
	1591, 1590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 705, 0, 736, 0, 0,
	0, 0, 1597, 1598, 1600, 1601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1616, 1599, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 1639, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1595, 0, 1632, 1633,
	1634, 1635, 0, 0, 711, 0, 0, 0, 0, 713,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 719,
	720, 0, 0, 0, 0, 730, 1603, 0, 0, 0,
	0, 1610, 1638, 0, 0, 0, 0, 0, 737, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 715, 0, 0, 0,
	0, 0, 0, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 725, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 726, 0, 0, 0, 742, 743,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733,
}
var sqlPact = [...]int{

	404, -1000, -47, -1000, -1000, -1000, -1000, -1000, 125, 124,
	123, 121, 108, 106, 104, 103, 102, -1000, -1000, -1000,
	101, -1000, -1000, 99, -1000, 98, 96, 95, 94, -1000,
	93, 92, -1000, -1000, -1000, -1000, 91, 83, 82, 46997,
	1489, 56347, 48215, 1577, 1974, 41711, 55939, 41303, 55531, 55123,
	81, -1000, 54715, 76, 73, 72, -1000, -1000, 70, 1576,
	33521, 64, 63, 58, 1793, 56, 55, -1000, 53, -1000,
	6850, 1106, -1000, 52, 49, -1000, 6577, 660, 47807, 1938,
	48, 45, 33112, 1936, -1000, -1000, 1129, -1000, -1000, 43,
	40, 38, 37, 35, 34, 33, 32, 29, -1000, 28,
	23, 22, 20, 19, 18, 15, 14, 13, 8, 1,
	0, -4, -5, -6, -8, -1000, 67443, 1281, 1238, 1230,
	1228, 1223, 1222, 778, -9, -10, -11, -13, -15, -16,
	-1000, -1000, -17, -19, -21, -28, -1000, -29, -30, 89,
	-33, -35, -37, -39, -40, 2413, 1940, 1186, 777, 16466,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60367, 56749, -41, -79, -43, -1000, 2241, 690, 28206, 404,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	364, -1000, -1000, -1000, 176, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1335,
	622, -1000, -1000, -1000, 54307, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56749, -1000, 1469, -38, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 619, -1000, 1466, 230, 1403, -1000,
	-1000, -1000, -1000, -1000, 56749, -1000, -1000, 2527, 2526, 1431,
	617, 53905, -1000, 1817, -1000, 728, 16897, -1000, 965, -1000,
	16897, 174, -1000, -1000, -1000, -1000, -1000, 40895, 13449, 40487,
	40079, 37235, 53497, 13031, 46595, 922, -1000, -1000, -1000, -1000,
	-1000, -49, 34727, 56749, -1000, 165, -1000, -1000, -1000, -1000,
	-1000, -1000, 24392, 750, 23947, 647, 23502, 502, -1000, -1000,
	-1000, -1000, 2524, 2523, 843, 2521, 2166, 59965, 1300, 2519,
	1151, 908, 793, 2516, 2511, 2510, 2503, 2502, 2500, 2494,
	1074, 53089, 1958, 36817, 36399, 46997, 46997, 1801, 52681, -1000,
	-1000, 1023, 996, -1000, -1000, -1000, -1000, 2075, 1949, 1931,
	46187, -1000, -1000, 2493, 2487, 2486, 2485, 2480, 59563, 1261,
	2479, 1686, 2476, 2475, 2474, 2473, 2470, 2466, 2465, 2464,
	2461, -1000, 45779, 45371, 44963, 44555, 52273, 35981, 35563, -1000,
	-1000, -1000, 29834, 4651, 51865, 30672, 46997, -1000, -1000, 24823,
	78, -1000, -1000, -1000, 1934, -1000, 24823, 78, -1000, 1336,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2247, 1212, 2355,
	35145, 1394, 1072, 2070, 2460, 1655, 2069, 2067, 2062, 2053,
	2032, 2459, 1160, 2458, 1195, 2457, 2030, 2025, 2397, 1444,
	39671, 2456, 2455, 2208, 2021, 1933, -1000, -1000, -1000, -1000,
	1141, -1000, -1000, -1000, 42113, -1000, -1000, 1392, -1000, -1000,
	1392, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 920, 58759,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1130, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1659, -1000, 1390, -1000, -1000, 2454,
	1940, 1628, 2160, 2160, 2160, 2250, 333, 331, -1000, 89,
	-1000, -1000, 66582, -1000, -1000, 24823, 24823, 24823, 24823, 24823,
	1332, -1000, 611, -1000, -1000, 655, -1000, 604, 510, -1000,
	-1000, -1000, -1000, -1000, -1000, 597, 2401, -1000, 735, -1000,
	-1000, -1000, -1000, 2361, -1000, 15590, -1000, -1000, -1000, 297,
	591, 24823, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 162, 738,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 498, 1256, 497, 497, 497, -1000,
	-1000, 787, -1000, -1000, -1000, 249, 496, 180, 495, -1000,
	-1000, -1000, -1000, 1956, 590, 588, -1000, 587, 586, 584,
	-1000, -1000, -1000, 583, 581, 566, 562, 561, 556, 541,
	536, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 780, -1000,
	534, 532, 530, 526, 525, 524, 523, 522, 520, -1000,
	-1000, -50, 56749, -1000, 364, -50, -1000, -1000, 515, -1000,
	18635, 18635, 18635, -1000, -1000, 1465, 24823, -1000, 1570, -1000,
	3824, -239, 707, 29018, -1000, 27375, 707, 666, 31892, -1000,
	1917, -1000, -1000, 514, 159, -1000, -1000, -1000, 1913, 56749,
	13865, 46997, 46997, -1000, -1000, 24823, -1000, -1000, 37651, 34325,
	56749, 47399, 2312, 67127, 34325, 56749, 1955, -1000, -1000, -1000,
	56749, -1000, 24823, -1000, 2307, 1778, -58, -1000, -1000, -1000,
	-1000, -1000, 1654, 1724, 897, 950, -1000, 16897, 2173, -1000,
	-1000, -1000, 146, 13865, -1000, 1825, 2108, 1047, -1000, 1518,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1214, 2103,
	-1000, 1419, 2102, 1207, -1000, -1000, 756, 2086, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1442, -1000, -1000,
	2201, -1000, -1000, 1291, 2077, -185, 37651, 34727, -53, -1000,
	-1000, -62, -1000, 12613, 66582, -1000, -1000, -1000, 66582, 663,
	-1000, -1000, 2074, -1000, 66582, 661, -1000, -1000, 2068, -1000,
	-1000, -1000, 2453, -1000, 2450, 1600, 2449, 2448, 2444, -1000,
	1329, 1250, 2443, -1000, 2440, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44147, 43739, 792, -1000, 1460, -1000, -1000, 43331,
	749, 1599, -1000, -1000, 1598, -1000, 637, -1000, 2439, 51457,
	1819, 749, 1596, -1000, -1000, -1000, -1000, -1000, 46997, -1000,
	46997, -1000, 46997, -1000, 1104, -1000, 59161, -239, -1000, -1000,
	-1000, -1000, -1000, 2066, 2435, 2428, 2427, -1000, 56749, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2057,
	-1000, -1000, 153, 2049, -1000, 153, 2038, -1000, 152, 2035,
	-1000, -1000, 1428, 2033, -1000, -86, 2029, -1000, -1000, -86,
	2024, -1000, -66, -1000, -1000, -1000, 690, -1000, 29426, 51049,
	37651, 742, 531, 66582, -1000, 37651, 66582, -1000, -1000, 50641,
	42929, -1000, -1000, 974, 1714, -1000, -1000, -1000, -1000, 37651,
	37651, -1000, 50233, -1000, -1000, -1000, 1400, 2197, 46997, -1000,
	-1000, 1951, -1000, 33923, 46997, -1000, 46997, -1000, 46997, -1000,
	46997, -1000, 46997, -1000, -1000, -1000, -1000, -1000, 2088, 1241,
	1237, -1000, 56749, -1000, 56749, -1000, -1000, -1000, 1653, -1000,
	-1000, -1000, -1000, 46997, -1000, -1000, -1000, -1000, -1000, -1000,
	1948, -1000, 1146, -1000, 966, -1000, -1000, 155, -1000, -1000,
	-58, -1000, 58759, -1000, -1000, 1940, 1628, -1000, 56749, -1000,
	-1000, -1000, 1940, 1496, 1739, 23057, 1747, 24823, 89, -1000,
	-1000, 89, 89, 18204, -1000, -1000, 67127, 67127, 13865, 932,
	24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823,
	24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823,
	24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823,
	24823, 24823, 24823, 24823, 24823, 1435, 24823, 919, 24823, 24823,
	24823, 24823, 1503, -1000, -1000, 1357, 388, 1406, -1000, 2344,
	2344, 2344, 66963, 66963, 467, 2426, 655, -1000, 24823, -1000,
	78, 24823, 14283, -1000, 2390, 1138, -1000, -1000, 331, 8760,
	1557, -1000, 328, 14728, -1000, -1000, -1000, 15590, 510, 22612,
	24823, 781, 66582, 12197, 1966, 1862, -1000, 2389, -1000, -1000,
	2361, -1000, -1000, -1000, -1000, 2388, 931, 927, 2387, -1000,
	2386, 2385, 509, 609, 602, 595, 594, 592, 24823, 24823,
	24823, 24823, 24823, 24823, 24823, 24823, -1000, 22181, 21736, 21291,
	26116, 20846, 24823, 16021, 20401, 19956, 56749, -50, 2305, 24823,
	228, -1000, 65133, -1000, 228, 228, 507, -68, 66582, 1731,
	1721, 28612, 1753, 1340, 1340, 1340, -1000, 506, 649, 707,
	9684, 48617, 1338, 707, 707, 145, 167, 327, 26969, 1570,
	48617, -1000, -1000, 46997, 503, 14283, 13865, 1032, -84, 141,
	1751, 1748, -1000, -85, 742, 912, -57, -1000, 4428, -90,
	-1000, 1053, -1000, -1000, -1000, -1000, 266, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 779,
	501, 499, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 498, 1256, 497, 497, 497, -1000,
	-1000, -1000, 249, 496, 180, 495, -1000, -1000, -1000, -1000,
	-1000, -1000, 1912, -62, 47399, 729, -92, 848, -58, -1000,
	1392, -1000, 1131, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2400, -1000, 2358, -1000,
	-1000, 2384, -52, -1000, -1000, 13865, -1000, -59, 1198, -1000,
	39263, 2200, 2196, 2190, 1102, -1000, 1025, 2248, 42113, 2284,
	709, -1000, 1909, -1000, -1000, 726, 961, 910, 42113, 1419,
	-1000, 67127, -1000, 1757, 2243, 1109, 1092, 1109, 1109, 1088,
	-1000, 42113, 909, 1308, 37651, -1000, 901, -1000, -60, 2268,
	664, -1000, 1897, 896, -1000, -1000, 46997, 13865, 703, -53,
	34727, 56749, 138, -1000, 24823, 78, 24823, 78, -1000, -1000,
	2023, -1000, -1000, -1000, 2424, 1224, 1684, -1000, -1000, -1000,
	494, 1591, 1419, 1585, -1000, -1000, 42521, 56749, 1777, -55,
	46997, -1000, -1000, 1286, -1000, 2020, 2018, 470, 2423, -1000,
	1459, 1583, -1000, -1000, -1000, 58357, 943, 2013, 770, 504,
	2302, 504, 32298, -1000, 56749, -1000, 56749, -1000, -1000, -1000,
	2422, -1000, 46997, -1000, -1000, 46997, -1000, 46997, -1000, 46997,
	-1000, 46997, 46997, -1000, 56749, 37651, 37651, 37651, 4428, 38459,
	-97, 326, -1000, 49831, 56749, 811, 38861, -206, 703, -1000,
	703, -1000, 46997, 1946, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56749, -1000, 56749, -1000, -1000, -1000, -1000,
	-1000, -1000, 1113, -1000, 1944, -1000, 1943, -1000, 134, -1000,
	-1000, -1000, 1606, 46997, 46997, 46997, -1000, 42113, -1000, -1000,
	1940, -1000, -1000, -1000, -1000, -1000, 66582, -1000, 399, -1000,
	-1000, 66582, 1177, 1783, -1000, 1783, -54, -1000, 64752, 1699,
	46997, -1000, -1000, -1000, -1000, -1000, 725, 407, 407, 1071,
	1071, 1071, 1071, 2308, 359, 199, 209, 4224, 4224, 4224,
	4224, 4224, 4224, 4224, 4224, 450, 984, 984, 450, 450,
	450, 450, 450, 984, 984, 984, 4224, 4224, 4224, 66963,
	66657, 5554, 24823, 24823, 895, 1346, 388, 5387, 24823, 3435,
	3435, 3435, 3435, -1000, 1723, -1000, -1000, -1000, -1000, 1896,
	493, 26116, 26116, -1000, -1000, -1000, -1000, 15159, 24823, -1000,
	-1000, -1000, -1000, 19511, -1000, -1000, 64301, -252, 325, -146,
	42, -1000, 24823, 24823, 24823, 324, -1000, 323, -1000, -1000,
	894, -1000, 891, 890, 889, -1000, 492, 133, 24823, 56749,
	-1000, 62015, 643, -93, -1000, -98, 1073, -1000, 24823, 131,
	-1000, 1334, 491, 490, 322, -100, 319, 719, 716, 318,
	316, 315, 24823, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66276, 61940, 61634, 61559, 8432, 61253, 61178,
	-103, 314, -1000, 1895, -146, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 313, -1000, 312, -1000, 66201, -146, 311, 6401,
	-1000, 26116, 26116, 26116, -1000, 305, -1000, 65058, -1000, 65895,
	19080, 19080, 19080, 301, 65820, 24823, -146, -108, -1000, -113,
	-1000, -1000, 489, -114, 770, 18635, 27797, 13865, -1000, 770,
	770, 24823, -1000, 24823, 28612, 28612, 1519, 1717, 28612, -1000,
	-1000, -1000, -1000, 48617, 576, 707, 48617, -1000, 2361, 1733,
	-1000, -1000, -1000, 56749, 364, -1000, 48617, 48617, 13865, 707,
	-1000, 300, 31078, 42, 128, -1000, -1000, 13865, 1762, 1762,
	-1000, 1889, 56749, 2327, -1000, -1000, 67127, -1000, 596, 898,
	-1000, 2369, 488, -1000, 2361, 2361, 56749, 110, 16897, -1000,
	1392, -1000, -1000, 1158, -1000, 1243, -1000, -1000, -1000, -1000,
	16897, -1000, 1514, 46997, 56749, 56749, -1000, -1000, 1562, 57955,
	1551, 67127, 56749, -1000, -1000, 480, 477, 1694, 1693, 56749,
	56749, 57553, 57151, 56749, 1289, 24823, 1464, 1211, 78, -1000,
	78, 474, 1000, 46997, 46997, 1200, -1000, -1000, -1000, -1000,
	-1000, 46997, -1000, -1000, 2368, -1000, 1109, -1000, -1000, -1000,
	1109, 1419, 1190, 46997, 37651, 755, 56749, 1298, 78, -1000,
	78, 472, 13865, 1290, -1000, 1849, -1000, 1517, -1000, -1000,
	11781, 66582, -1000, 66582, -1000, 56749, -1000, 789, 56749, 38861,
	746, 2007, -1000, 1419, 2003, 364, -1000, -1000, 107, 742,
	37651, 46997, -55, 37651, 37651, 37651, 2421, 469, 2420, -1000,
	46997, 2001, 1429, 1547, 2026, 689, 56749, 1373, -1000, 24823,
	1264, -1000, 31486, 802, 56749, 1165, 105, -1000, -1000, -1000,
	-24, 56749, -1000, 2419, -1000, -1000, 153, 153, 153, -1000,
	152, 1428, -1000, -86, -86, -1000, -1000, 4428, 742, -56,
	468, -1000, 699, 698, 30256, 37651, -115, -1000, -1000, -1000,
	-1000, -1000, 46997, 56749, 476, 1813, 56749, -1000, 742, -1000,
	752, -1000, 956, -62, -62, -1000, 1108, 1095, 56749, 13865,
	56749, 46997, 13865, 46997, -1000, -1000, -1000, -1000, -1000, 1177,
	-1000, 24823, -1000, -1000, -1000, 18204, -1000, -1000, -1000, 46997,
	-217, 24823, 24823, 5272, 5114, 24823, 26116, 26116, -1000, 24823,
	4896, -1000, -1000, -1000, -1000, -1000, 1888, 466, 24823, 67127,
	6093, 6051, -1000, 291, 9204, 450, -1000, 24823, -1000, 286,
	17773, -1000, 65439, -44, -44, -1000, 2396, 1586, 1508, 1226,
	1119, 2367, 11365, -146, -116, -1000, -1000, 582, -1000, 2034,
	-1000, 24823, 65514, 10949, -1000, 32704, 771, 1373, -1000, -1000,
	2361, 721, -1000, -1000, -1000, 721, -1000, 64226, 67127, 67127,
	24823, 24823, -1000, 24823, 24823, 24823, -1000, -1000, 24823, -1000,
	-1000, 1883, 24823, -1000, 67127, 67127, 26116, 26116, 26116, 26116,
	26116, 26116, 26116, 26116, 26116, 26116, 26116, 26116, 26116, 26116,
	26116, 26116, 26116, 26116, 26116, 1719, 26116, 2342, 2342, 2342,
	-1000, 1921, 1883, 24823, 24823, 67127, 285, 284, 279, -1000,
	24823, -146, -1000, -1000, 4428, -1000, 1861, -1000, -205, -1000,
	1570, -1000, -1000, 1861, 1861, -121, 66582, -1000, 1519, -1000,
	462, 24823, 28612, -1000, 635, -1000, -122, -1000, 48617, -1000,
	634, -249, -1000, 695, -1000, 364, -1000, -1000, -1000, 127,
	48617, -1000, -123, -1000, 2300, 278, 13865, -1000, -1000, -1000,
	-1000, -1000, 78, -62, 1389, -1000, 2364, -1000, 633, 277,
	2361, 274, 263, -62, 56749, -1000, -58, -1000, -1000, -1000,
	-1000, -1000, -1000, 887, 885, -1000, 2000, -1000, 1540, -1000,
	806, -1000, 1194, 24823, 24823, 449, 448, 1283, 2418, 1998,
	1428, 1992, 1428, -1000, -1000, 733, -1000, 66582, 447, 433,
	-1000, -59, 1196, -1000, -1000, 24823, 24823, 49425, -1000, 2201,
	-1000, 884, -1000, -1000, -1000, 1419, 882, -1000, -1000, 1270,
	-1000, -1000, -1000, -1000, 24823, -1000, -60, 878, 742, 1881,
	1011, -1000, 2417, 2416, 2414, 259, -61, -1000, 2299, 1430,
	56749, 46997, 46997, 2294, 46997, -1000, -1000, -1000, -1000, 749,
	-1000, -1000, 2412, -1000, 810, 13865, 46997, 1991, 1662, 689,
	38057, -1000, 749, 1739, -1000, 66582, -1000, 1165, 17328, 2194,
	-124, -1000, 111, -1000, -1000, -1000, 770, 32298, 28612, 24823,
	2411, -129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49023, 49023, 37651, 37651, 37651, 742, 56749, 56749, 38861, 2410,
	423, 56749, 56749, 421, -1000, -1000, -1000, 1382, 46997, -1000,
	-1000, -1000, -1000, -1000, 1310, 1510, -1000, 1402, 63920, -1000,
	2221, 13865, 2272, 3435, 24823, 24823, 4441, 5196, 436, 3435,
	24823, 24823, 67127, 66854, -131, 24823, 24823, -1000, 24823, 630,
	66582, 2395, 24823, 258, 257, 256, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 254, -1000, -1000, -1000, -1000, -1000,
	66582, 24823, 79, -1000, -1000, -1000, 60769, -1000, 24823, 253,
	252, -1000, -1000, -1000, 251, 247, 8934, 7744, 63845, 63539,
	63464, 66582, 1921, 66582, -1000, -1000, 844, 844, 1080, 1080,
	1080, 1080, 2342, 580, 402, 915, 973, 973, 973, 464,
	1029, 1029, 973, 973, 973, 1877, 1666, 416, 5788, -1000,
	-1000, 66582, 66582, 240, -1000, -1000, -1000, -146, 238, 1857,
	2240, -1000, 28612, 1857, 1857, -1000, -1000, 56749, 66582, -1000,
	-239, -1000, 2361, -1000, -1000, 1733, -1000, 10113, -1000, 13865,
	-1000, -1000, 31078, -1000, 415, -1000, -23, -1000, -1000, 451,
	-1000, -1000, 208, -1000, -1000, -62, 56749, 56749, 56749, 1990,
	-1000, 3344, -1000, 63158, -132, -1000, 64752, 24823, 56749, -1000,
	1386, 1732, 833, -1000, 56749, -1000, 56749, -1000, -1000, 56749,
	56749, 46997, 56749, 56749, -134, 66582, -67, -1000, 694, -1000,
	46997, 46997, 37651, -139, 13865, -1000, 37651, 902, -1000, -1000,
	-1000, 1809, 78, -1000, 2409, 412, 1419, 78, -1000, -1000,
	-1000, 411, 56749, 1423, 410, 13865, 1669, 689, 38057, -1000,
	943, 1165, -1000, -1000, -78, -1000, 435, 78, 56749, 2408,
	1373, -1000, -80, 66582, -1000, 693, -1000, -140, -1000, -1000,
	207, -1000, 2150, 2146, -1000, -1000, 24823, 409, 408, 56749,
	1574, -1000, -1000, -1000, 13865, 947, -1000, -1000, -1000, 2221,
	3435, 3435, 24823, 24823, 24823, 3435, 66854, -147, -1000, 3435,
	3435, -146, -1000, -1000, 65439, -1000, -1000, -1000, -1000, 66582,
	10533, 1314, -1000, 63083, -1000, -1000, -1000, -1000, 24823, 24823,
	-1000, -1000, -1000, -1000, -1000, 26116, 1876, 406, 67127, -1000,
	-1000, 761, 24823, 24823, 1570, 761, 761, -148, 707, -1000,
	-1000, -1000, 2361, -23, -1000, 2407, 13865, -1000, -1000, -1000,
	-1000, -1000, 56749, -1000, 56749, -1000, 13865, 56749, 1869, 1533,
	-1000, -1000, 1691, 405, 26116, 46997, 636, 1878, 1297, 24823,
	-1000, -150, -153, 1526, -1000, -1000, 1522, 24823, -1000, 67127,
	1428, 1428, -155, -156, -1000, 877, 876, 871, 56749, 16897,
	-1000, -1000, -1000, 870, -1000, -86, 24823, 1298, 1827, 747,
	-1000, 38861, 746, -1000, -1000, 24823, -1000, 46997, 24823, 1422,
	-1000, 689, 38057, -1000, 2026, -1000, 2120, 56749, 2184, -1000,
	-1000, -1000, 1739, 388, -1000, 742, 387, 380, -161, 24823,
	24823, -162, -87, -1000, 656, 652, -1000, -1000, 46997, -1000,
	3435, 3435, 3435, -1000, 186, -1000, -1000, 1373, 2239, -1000,
	62777, 62702, 1616, 26116, 67127, -164, -1000, 56749, 66582, -146,
	-1000, -1000, -1000, 48617, 437, -1000, -1000, 1208, -1000, -1000,
	-1000, 56749, 1539, -1000, -1000, 24823, 5788, 379, 24823, -1000,
	-1000, 1806, 1918, 1809, 378, -1000, -1000, -1000, -1000, 1201,
	-1000, -1000, 66582, 2214, -1000, -1000, 377, 376, 56749, 56749,
	374, 684, -1000, 373, 66582, 746, -1000, 1317, -1000, 1790,
	185, 2292, -167, 810, -169, 46997, 38057, -1000, 1662, 981,
	-170, 56749, 1165, -1000, -1000, 37651, 37651, 1297, -172, -177,
	-1000, 1574, -1000, 56749, -1000, 56749, -1000, -1000, 1360, 24823,
	-1000, -1000, 1616, -178, -1000, -109, -1000, 2291, -1000, -1000,
	-1000, -1000, 1988, 62396, 1642, 56749, 62321, 1914, -1000, -1000,
	1298, 56749, 46997, 809, 13865, 1310, 1310, -1000, -1000, 24823,
	16897, 24823, -1000, 46997, -1000, 2145, 1809, 78, 1297, 370,
	1297, 369, -1000, 1669, 1089, -1000, 770, -1000, -1000, -179,
	-187, 1809, 1297, -1000, -1000, -193, -195, 184, 25685, 25685,
	25685, -146, -1000, 56749, 368, 1975, -1000, 1413, 1323, 178,
	832, -1000, -1000, 1878, -198, 364, -1000, 24823, -1000, -200,
	-1000, 799, -203, -1000, 798, -210, -1000, -213, 363, -1000,
	1298, 747, 1809, 24823, 1809, 24823, -1000, 32298, -1000, 742,
	742, 1298, 1809, -1000, -1000, -1000, -1000, -1000, 26547, 1404,
	1145, 64677, -1000, -1000, -1000, -1000, 56749, -1000, 1416, 1415,
	1112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1642,
	66582, -1000, 1310, 1826, -1000, 1310, 1873, -1000, -1000, 56749,
	746, -1000, 1298, -215, 1298, -218, -209, -1000, -1000, -1000,
	1298, 2317, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2125,
	-1000, 820, 1401, 1401, 1413, -1000, 358, -1000, 347, -220,
	-1000, 765, 1297, 765, 1297, -1000, -1000, 25254, -1000, 2330,
	-1000, -1000, 1671, -1000, 1878, 24823, 24823, 1421, -1000, 2405,
	1809, -1000, 1809, -1000, -1000, -1000, -1000, -1000, -221, -228,
	-1000, -1000, -1000, -1000, 1298, 1298, 1298, 860, 765, 765,
	-1000, 344, -1000, -1000, 24823, -229, 1298, -1000,
}
var sqlPgo = [...]int{

	0, 3049, 3048, 1987, 3046, 3045, 3044, 3043, 3042, 3041,
	3037, 3035, 3034, 3032, 3031, 3030, 3027, 3023, 3018, 3016,
	3015, 3013, 3012, 3011, 3010, 3007, 3006, 3005, 3004, 3001,
	2999, 2998, 2997, 2996, 2995, 2994, 2992, 2991, 2989, 2985,
	2984, 2982, 2981, 2980, 2974, 35, 2972, 2971, 2966, 2963,
	2958, 2957, 2955, 2954, 2952, 2948, 2947, 2946, 2944, 2940,
	2928, 2927, 2923, 2921, 2920, 2919, 2915, 2911, 2908, 2907,
	2903, 2902, 2901, 2899, 2898, 126, 2895, 2894, 2893, 2892,
	2891, 2890, 2889, 2888, 2887, 2885, 2884, 2883, 2880, 2878,
	130, 2877, 2875, 2868, 2861, 2854, 2852, 2849, 2848, 2846,
	2844, 168, 2840, 2839, 2838, 2835, 2829, 2828, 2826, 2824,
	2823, 2822, 2821, 2818, 2817, 2816, 2815, 2814, 2813, 2812,
	2811, 2810, 2806, 2804, 2803, 2802, 2801, 2800, 195, 140,
	2799, 2798, 2797, 2796, 2795, 2794, 82, 84, 59, 2793,
	67, 135, 177, 6207, 170, 2792, 2791, 2789, 2787, 2786,
	69, 121, 122, 119, 118, 93, 2785, 2783, 70, 37,
	32, 27, 92, 2782, 2781, 2780, 1959, 85, 2779, 2777,
	191, 182, 2776, 1278, 2775, 127, 71, 89, 97, 66,
	2774, 107, 10, 2772, 134, 28, 2751, 117, 57, 25,
	5304, 6510, 101, 197, 73, 108, 178, 174, 159, 157,
	133, 950, 2750, 180, 120, 147, 2749, 2748, 2747, 39,
	144, 26, 3, 139, 11, 2745, 12, 2742, 7, 2739,
	2737, 2736, 2735, 20, 128, 55, 58, 2734, 56, 87,
	152, 2733, 162, 2732, 91, 2731, 186, 143, 148, 14,
	164, 2729, 2728, 2727, 2718, 2713, 103, 18, 88, 2712,
	2711, 102, 173, 2710, 52, 124, 75, 94, 194, 161,
	100, 166, 165, 2708, 2707, 2706, 156, 2702, 2700, 115,
	154, 2698, 2696, 30, 44, 169, 38, 2695, 2693, 116,
	2691, 149, 2689, 2688, 2687, 196, 132, 158, 4, 63,
	81, 22, 8, 167, 113, 90, 78, 2686, 2897, 1115,
	336, 2685, 104, 72, 36, 76, 105, 190, 41, 2684,
	2683, 1545, 2681, 2680, 2679, 2678, 125, 2675, 2669, 2668,
	95, 31, 65, 2663, 114, 62, 123, 192, 77, 155,
	175, 183, 2661, 138, 2657, 142, 106, 2654, 145, 179,
	54, 2640, 1267, 111, 2639, 160, 2637, 2632, 2630, 2629,
	251, 2625, 2623, 510, 2622, 112, 2621, 2620, 141, 153,
	99, 29, 2619, 51, 224, 2617, 146, 60, 2605, 213,
	34, 0, 6148, 4444, 5182, 2604, 3469, 2603, 151, 98,
	2600, 2599, 2594, 2588, 33, 19, 6, 9, 15, 13,
	469, 80, 2587, 2585, 74, 86, 109, 2584, 193, 163,
	2583, 2582, 2579, 64, 2577, 23, 2574, 21, 2573, 2568,
	24, 5, 2563, 2562, 184, 2561, 2560, 2559, 2556, 2300,
	2555, 188, 2554, 96, 2552, 131, 129, 2551, 2550, 2549,
	2546, 185, 2543, 189, 2542, 17, 16, 1, 2541, 2540,
	2539, 150, 2, 2116, 2538, 2535, 45, 137, 68, 2531,
	2530, 136,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 421, 421, 18, 28, 19, 29, 13, 423,
	423, 423, 423, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 420, 420, 154, 154, 153, 149,
	149, 424, 424, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 369, 369, 370, 370, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 429, 429, 430,
	430, 431, 431, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 416, 416, 237, 237, 337, 337, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 339, 339, 74, 74, 309, 309, 77, 77,
	267, 267, 78, 78, 78, 78, 78, 79, 79, 79,
	79, 89, 89, 89, 89, 419, 419, 230, 230, 170,
	170, 170, 170, 84, 84, 84, 84, 85, 85, 85,
	86, 86, 134, 134, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 94, 94, 40, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 45,
	45, 97, 97, 425, 425, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 101, 101, 101, 101, 101, 101,
	102, 102, 363, 363, 245, 245, 361, 361, 377, 377,
	362, 362, 207, 207, 207, 207, 207, 208, 208, 208,
	368, 368, 368, 368, 368, 368, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 119, 119, 119, 128, 128, 128, 128,
	128, 128, 128, 121, 121, 121, 112, 112, 104, 104,
	104, 104, 108, 108, 108, 108, 108, 105, 105, 109,
	109, 111, 111, 113, 113, 113, 113, 113, 113, 106,
	106, 106, 106, 115, 115, 115, 115, 114, 114, 124,
	124, 124, 124, 124, 124, 323, 323, 120, 120, 120,
	120, 123, 123, 123, 123, 118, 118, 118, 122, 122,
	125, 125, 125, 125, 107, 107, 107, 434, 434, 434,
	126, 126, 117, 117, 127, 127, 127, 127, 127, 127,
	127, 116, 116, 116, 422, 422, 110, 417, 417, 414,
	414, 414, 414, 414, 414, 414, 415, 415, 418, 418,
	82, 82, 82, 55, 55, 435, 435, 435, 56, 56,
	436, 436, 436, 433, 433, 433, 433, 433, 433, 433,
	433, 209, 209, 210, 210, 290, 290, 290, 290, 290,
	211, 211, 156, 156, 156, 214, 215, 215, 212, 212,
	213, 213, 213, 217, 217, 216, 219, 219, 218, 289,
	382, 382, 383, 383, 383, 383, 383, 383, 383, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 380,
	380, 380, 381, 378, 378, 379, 379, 379, 379, 437,
	437, 437, 437, 437, 437, 438, 438, 288, 288, 223,
	223, 385, 385, 385, 385, 386, 386, 386, 386, 386,
	389, 388, 387, 387, 387, 387, 387, 319, 319, 319,
	59, 59, 59, 256, 256, 255, 255, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 131, 131, 57, 57, 57, 162, 162, 54, 54,
	54, 440, 440, 58, 58, 58, 441, 441, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 442,
	442, 273, 273, 272, 272, 228, 228, 325, 174, 174,
	150, 150, 150, 21, 23, 23, 16, 16, 16, 16,
	16, 16, 31, 31, 32, 32, 27, 27, 426, 426,
	427, 427, 83, 83, 87, 87, 87, 93, 93, 130,
	130, 130, 130, 130, 130, 130, 35, 35, 35, 35,
	47, 47, 47, 47, 91, 444, 444, 444, 92, 92,
	443, 443, 169, 169, 169, 169, 171, 171, 285, 285,
	286, 286, 445, 445, 287, 287, 287, 164, 163, 165,
	165, 52, 52, 52, 158, 158, 159, 159, 160, 160,
	161, 161, 446, 446, 80, 80, 80, 133, 133, 203,
	203, 281, 281, 281, 224, 224, 179, 179, 284, 284,
	282, 282, 282, 282, 254, 254, 254, 132, 132, 233,
	233, 247, 247, 248, 248, 334, 334, 249, 90, 90,
	143, 143, 141, 141, 141, 141, 141, 141, 447, 447,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	147, 147, 147, 147, 148, 148, 148, 146, 146, 396,
	396, 396, 398, 398, 399, 395, 395, 397, 397, 439,
	439, 258, 258, 258, 221, 222, 220, 220, 448, 448,
	226, 226, 225, 227, 227, 324, 324, 324, 252, 252,
	252, 252, 276, 276, 274, 274, 275, 275, 277, 277,
	278, 278, 278, 279, 279, 280, 280, 251, 251, 305,
	305, 145, 145, 145, 232, 232, 232, 234, 234, 296,
	296, 296, 297, 297, 295, 295, 295, 295, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 327, 327, 235,
	235, 328, 283, 283, 412, 412, 412, 413, 413, 322,
	322, 329, 329, 329, 329, 329, 329, 320, 320, 321,
	321, 335, 336, 336, 261, 261, 261, 261, 259, 259,
	260, 260, 330, 330, 330, 330, 253, 253, 331, 331,
	331, 332, 291, 292, 292, 340, 340, 340, 340, 355,
	231, 231, 231, 449, 449, 341, 341, 341, 341, 341,
	341, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 345, 345, 345, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 354, 354, 354, 354, 354, 346,
	346, 351, 351, 352, 352, 352, 347, 348, 353, 353,
	353, 353, 450, 450, 357, 357, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 343, 343, 343, 350, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 268, 268, 269, 269, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 300, 300, 300, 300, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	390, 390, 390, 390, 390, 390, 390, 390, 393, 393,
	394, 394, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 400, 400, 401, 401, 403, 403, 404, 404, 405,
	406, 406, 406, 407, 408, 408, 402, 402, 409, 409,
	409, 409, 410, 410, 411, 411, 411, 411, 411, 311,
	311, 312, 312, 318, 318, 318, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 172, 172, 172, 172, 172, 243, 243, 241,
	241, 241, 244, 244, 242, 242, 240, 240, 239, 239,
	308, 308, 306, 306, 310, 310, 262, 262, 356, 356,
	356, 356, 356, 356, 356, 263, 263, 263, 271, 264,
	264, 265, 265, 265, 265, 265, 302, 303, 266, 266,
	266, 304, 304, 313, 317, 317, 316, 315, 315, 314,
	314, 293, 293, 294, 294, 250, 250, 451, 451, 246,
	246, 333, 333, 333, 333, 205, 205, 236, 236, 204,
	204, 198, 198, 199, 199, 199, 199, 229, 229, 358,
	358, 358, 359, 360, 307, 189, 188, 176, 177, 187,
	186, 185, 175, 178, 182, 183, 184, 180, 181, 194,
	193, 192, 191, 338, 200, 200, 201, 201, 201, 202,
	202, 202, 202, 173, 173, 195, 195, 196, 197, 197,
	190, 190, 190, 166, 166, 166, 167, 167, 168, 168,
	367, 367, 365, 365, 365, 366, 366, 366, 366, 364,
	364, 364, 364, 364, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 373, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 376, 376,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 2, 3, 3,
	3, 6, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 2, 3, 4, 3, 4, 5, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -428,
	82, -397, -65, -68, -70, -432, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -396,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -373, -376, 4, -371,
	-374, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 374, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -419, -230, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -419, -230, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -363, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -414, 2, 4, -374, -371,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -429, 226, 264, 280, 317, 330, 359, 369, 380,
	-433, 347, 56, 396, -440, 385, 110, -272, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -431, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -414, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -323, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -422, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -439, 2, 360, -443, 2, 378,
	378, 2, -443, 2, -443, 2, -169, 2, 378, 375,
	-444, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -447, 145,
	-225, -226, 389, 190, 118, 256, -141, -143, 2, -396,
	-361, 2, -298, -377, -300, 433, 434, 428, 239, 420,
	-311, 101, 390, 251, -376, -301, -313, 119, 311, -244,
	8, 9, 5, 6, 7, -173, -342, -307, -350, 382,
	130, 242, -202, 448, 10, 442, -393, -143, -312, 33,
	156, 54, -365, -201, -344, -352, -348, -349, -449, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -390,
	-391, -371, -372, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -353, 97, 371, 372, 373, 374, 200,
	201, -166, -373, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -392, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -450, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -398, 287, -399, -184, -398, 445, 445, 447, 445,
	-220, -221, -222, 2, 26, 108, 442, 2, -326, 2,
	440, -330, -143, 208, -329, 442, -327, -191, 252, -394,
	312, -390, -391, -173, -190, -201, 4, -3, -223, 442,
	444, 360, 65, 2, -267, 442, -166, 26, -140, 251,
	375, 447, -309, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -286, 2, -287, -163,
	-164, -165, 196, 278, 285, 419, -361, -425, 148, 425,
	375, -361, -245, 444, 2, -330, 166, -191, 2, -188,
	-364, 4, -371, -374, -372, -375, 64, -373, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -376, 2, -330, 166,
	2, -192, 166, -330, -195, 2, -369, 166, -367, 10,
	-366, 5, 4, -371, -374, -372, 2, -175, -166, 2,
	-187, -364, 2, -204, 166, -191, 375, 447, -236, -198,
	-199, -229, -166, 444, -298, 2, -90, 2, -298, 166,
	2, -90, 166, 2, -298, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -430, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -441, 287, -180, 2, -166, 145,
	-369, 166, 2, -369, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -331, 2, -332, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -238, 166,
	2, -191, -238, 166, 2, -238, 166, 2, -205, 166,
	2, -204, -175, 166, 2, -370, 166, 2, -369, -370,
	166, 2, -339, 2, -338, -366, 403, -75, 442, 331,
	442, -369, -191, -298, -90, 148, -298, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -369, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -417, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, 2, 148, 2, 5, 2, 196, 278,
	348, 2, -191, -434, 2, 360, 407, 323, 2, 2,
	72, 73, 148, 2, 148, 419, 2, -253, -330, -285,
	-286, -285, 375, -171, -447, -225, -226, -128, 335, 2,
	2, -447, -252, -274, -275, 218, 132, 247, -258, 26,
	108, -258, -258, 48, 443, 443, 11, 12, 63, 37,
	433, 434, 435, 436, 143, 437, 438, 431, 432, 430,
	423, 424, 427, 202, 203, 78, 426, 425, 71, 224,
	313, 133, 134, 135, 136, 295, 173, 174, 175, 14,
	15, 16, 30, 255, 217, 420, 169, 338, 428, 17,
	18, 19, 194, 195, 241, 40, 170, -172, -206, -298,
	-298, -298, -298, -298, 261, 442, -250, -293, 440, -143,
	442, 442, 442, 5, 442, 5, -360, 8, -143, -298,
	-311, 443, -242, 442, -143, -311, -306, 442, 311, 440,
	442, -314, -298, 444, -400, 414, -346, 442, 275, -345,
	442, -345, -345, 408, -343, 442, 421, 415, 442, -343,
	442, 442, 145, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 408, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 447, -398, -223, 442,
	-246, -333, -298, 435, -246, -246, 251, -239, -298, 83,
	-261, 199, 234, 149, 214, 306, 181, -360, -75, -295,
	448, -322, 421, -143, -327, -190, -143, -329, 442, -326,
	-322, 435, -191, 442, 148, 442, 444, 148, -229, -364,
	-191, -200, -201, -239, -369, -414, -229, -170, 34, -308,
	-340, -341, -354, -342, -351, -347, -350, 291, 292, 290,
	294, 293, 44, 50, 49, 369, 232, 325, 326, 341,
	327, 328, 42, 399, 172, 248, 250, 184, 4, 43,
	404, -353, 191, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 97, 371, 372, 373, 374, 200, 201, 405, 351,
	57, 58, -414, -229, 145, -363, -239, 34, -286, 2,
	-445, 447, 216, -208, 223, 238, 159, 252, 417, -368,
	5, 4, -307, -319, 101, 220, -350, 9, 434, -358,
	8, 433, -362, -361, 85, 444, -364, -152, 296, -151,
	23, 27, 112, 401, 124, -213, 178, 267, 119, 344,
	-421, -423, 316, 367, 368, 74, 245, 296, 119, -255,
	-257, 34, 93, 236, 263, 51, 164, 227, 228, 346,
	409, 119, 296, 413, 119, -423, 296, -423, -154, 344,
	-421, -423, 316, 296, -153, -213, 119, 448, -369, -236,
	447, 447, -364, 435, 119, 119, 119, 119, 2, 2,
	239, 2, 2, 2, 150, -433, -431, 2, 2, 2,
	-191, 166, -192, 166, 2, -195, 407, 251, -416, -237,
	360, -191, -162, -395, 413, 239, 239, 34, 442, 2,
	-177, 166, 2, -167, -166, 176, -395, 239, -331, -203,
	-191, -203, 334, -184, 34, -295, 119, 2, 2, 2,
	-166, -155, 447, 53, 302, 119, -155, 119, -155, 119,
	-155, 447, 119, -155, 119, 447, 119, 119, 443, 447,
	-339, -369, -138, 413, 148, 82, 442, -370, -175, 2,
	-191, 2, 360, 200, -369, -369, -363, 26, 336, 2,
	73, -191, -418, 145, -415, 307, -414, -191, -191, -191,
	-191, -191, 145, 2, 377, 2, 377, 2, -166, -166,
	216, -191, 145, 360, 176, 360, -155, 447, -171, -447,
	-252, -363, -447, -275, -274, -277, -298, 26, -280, 139,
	235, -298, -300, -142, -142, -142, -227, -324, -298, 277,
	176, -355, -340, -340, -189, -364, 371, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, 217, 169, 338, 40, 170, -298, 375, -298,
	-298, -298, -298, 231, 239, 242, 382, 130, 391, 108,
	245, -451, 356, 36, -304, -143, -243, 442, -318, 31,
	343, 26, -311, 442, 2, -293, -298, -294, -240, -239,
	-239, 443, 406, 26, 108, 435, 2, 8, -268, -270,
	418, 230, 98, 161, 229, -269, 321, 443, 447, 34,
	443, -298, -240, -310, -306, -239, -317, -316, 410, -364,
	435, -401, 138, 155, 8, -360, 8, 371, 371, 8,
	8, 8, 442, 443, 2, 443, 2, 443, 2, 443,
	2, 443, 2, -298, -298, -298, -298, -298, -298, -298,
	-239, -262, 2, -356, -239, 4, 418, 230, 98, 161,
	229, 321, -262, 2, -263, 2, -298, -239, -264, -299,
	-300, 433, 434, 428, -311, -265, 2, -298, -240, -298,
	47, 211, 376, -266, -298, 148, -239, -239, 2, -239,
	2, -399, 34, -239, -232, 447, 148, 34, 4, -232,
	-232, 442, 443, 447, 199, 199, -326, -261, 199, -259,
	259, -259, -259, -412, 442, 441, -322, -176, 440, 449,
	-364, -321, -320, 34, -184, 257, -322, -322, 444, 443,
	-321, -191, 442, -239, -364, 349, 443, 444, 194, 194,
	443, -138, 375, 413, -75, 443, 447, -231, 33, 440,
	-270, 442, -357, 408, 442, 442, 148, -230, -425, 443,
	378, -287, -207, 285, 342, 297, 329, 9, 8, 8,
	447, -364, 447, 375, -426, 76, 65, -289, 166, 65,
	-378, -178, 76, -379, -166, 60, 390, 277, 147, -426,
	76, -426, 76, 76, 334, 347, 48, -330, 37, -90,
	212, 148, 419, 360, 375, -330, -257, -340, 93, 227,
	228, 48, -359, -358, 434, -359, 48, -359, -359, -359,
	413, -192, -330, 375, 268, -369, 375, 447, 37, -90,
	212, 148, 375, -204, -176, -336, -335, 422, -198, -166,
	444, -298, -90, -298, -90, 119, 2, -441, 207, 442,
	-223, 239, -256, -255, 239, -194, 2, -191, -229, -337,
	192, 447, -237, 268, 119, 119, 442, 116, 283, 2,
	251, 239, -177, 166, -158, 363, 119, -292, -291, 411,
	-281, -90, 442, 101, 34, -281, -247, -248, -334, -249,
	-178, 442, -184, -166, 2, -191, -238, -238, -238, -204,
	-205, -175, -369, -370, -370, -75, -338, 443, 443, -137,
	254, -136, -166, 5, -140, 398, -210, -290, -289, -380,
	-381, -378, 217, 176, 390, 193, 131, -138, -335, -336,
	-336, -191, 145, -229, -229, 331, 145, 145, 444, 283,
	95, 360, 267, 176, -191, -204, -191, -330, -447, -278,
	-358, 442, -279, 311, 312, 447, -150, 35, 106, 204,
	-191, 419, 117, -298, -298, 375, -451, 356, -304, 117,
	-298, 231, 242, 382, 130, 391, 108, 245, 148, 442,
	-299, -299, 443, -241, -298, -298, 441, 451, 443, -448,
	447, -225, -298, -239, -239, 443, 443, 375, 375, 375,
	375, 442, 444, -239, -229, 441, 441, 447, 443, -315,
	-316, 113, -298, 444, -406, 260, 442, 442, 443, 443,
	447, 443, 419, 419, 443, 443, 443, -298, 34, 447,
	447, 447, 443, 447, 447, 447, 443, 443, 148, 443,
	443, -271, 271, 443, 11, 12, 433, 434, 435, 436,
	143, 437, 438, 431, 432, 430, 423, 424, 425, 71,
	224, 313, 14, 15, 16, 194, 170, -299, -299, -299,
	443, -302, -303, 148, 145, 34, -266, -266, -266, 443,
	148, -239, 443, 443, 442, 443, -292, -333, -234, 2,
	-326, -186, -364, -292, -292, -239, -298, -326, -326, -260,
	398, 251, 199, -326, -320, 443, -413, -360, -322, -321,
	-360, -297, -296, 146, 237, -184, -223, -321, -321, -364,
	-322, 443, -235, -328, -394, -448, 444, -364, -129, 5,
	242, -129, 148, -229, 24, -340, 440, 441, 8, 8,
	442, -360, -360, -229, 148, -361, -286, 388, 69, 285,
	-361, -151, -191, -178, -185, -166, 239, -289, 166, -157,
	239, -340, -185, 442, 442, 204, 204, -178, -185, 166,
	-178, 166, -185, -185, -420, 285, 246, -298, 219, 283,
	240, -152, 296, -90, -90, 442, -425, 398, 107, -191,
	-194, 296, -200, -359, -359, -255, 296, -192, -369, 413,
	-175, -153, -90, -90, 442, -176, -154, 296, -135, 165,
	245, 435, -166, 407, -166, -209, -210, -166, -435, 415,
	413, 119, 119, -223, 148, -138, -369, -191, -369, -369,
	-369, 2, 442, 2, -191, 119, 251, 239, -159, 114,
	-446, 425, -175, -226, -225, -298, -254, -284, 304, 251,
	-224, -179, -178, 403, -184, -254, -233, 447, 148, 425,
	444, -224, 2, -155, -155, -155, -155, -155, -75, -138,
	447, 442, 425, 425, 442, -369, -369, 443, 447, -191,
	-177, 176, 176, -183, -167, -138, -43, 413, 360, 331,
	331, -166, -187, -175, -191, -188, -204, -279, -298, -324,
	-191, 448, -298, -298, 117, 117, -298, -299, -299, -298,
	117, 148, 442, -298, -308, 30, 30, 443, 447, -294,
	-298, 443, 406, -448, -448, -448, 5, 230, 161, 229,
	-269, 229, -269, -269, 8, 435, -364, 443, -306, 115,
	-298, 370, -364, 435, -407, -181, 442, -166, 411, -225,
	-360, -343, -343, 443, -355, -340, -298, -298, -298, -298,
	-298, -298, -302, -298, -355, -340, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, 108, 239, 245, -299, -303,
	-302, -298, -298, -340, 443, 443, 443, -239, -75, -251,
	155, -336, 447, -251, -251, 443, -260, 442, -298, -326,
	441, 443, 447, -321, 441, 447, 450, 425, -223, 444,
	-320, 443, 447, -283, 34, 443, -364, -90, 253, 8,
	441, 443, -360, 443, 443, -229, 375, 375, 119, 239,
	400, -382, -379, -298, -228, -325, -298, 442, 442, -149,
	112, 334, -427, 2, 119, -155, 119, -155, 417, 442,
	442, 375, -426, 76, -239, -298, -139, 101, -363, -423,
	375, 375, 268, -239, 375, -138, 148, 358, 2, 2,
	2, 443, 34, 249, -166, -191, -192, 34, -191, -162,
	2, -273, 398, -176, -191, 119, -160, 210, -446, -367,
	-395, -276, -274, -254, -246, 240, 75, 443, 447, 444,
	-292, -248, -234, -298, 2, 443, -136, -137, -369, -369,
	-369, -138, -140, -140, -290, 2, 442, -177, -167, 442,
	254, -191, -215, -214, 267, 245, 252, 443, -150, -176,
	-298, -298, 117, 30, 30, -298, -298, -308, 443, -298,
	-298, -239, 441, 5, -298, 443, 443, 443, 443, -298,
	444, -408, -166, -298, 443, 443, 443, 443, 447, 447,
	443, 443, 443, 443, -303, 148, 108, 245, 442, 443,
	443, -305, 158, 48, -326, -305, -305, -229, -295, -360,
	-296, -176, 440, -364, -328, 442, 444, 441, 443, -178,
	-185, -289, 119, -383, 76, -384, 63, 131, 82, 239,
	242, 390, 277, 60, 101, 289, 34, 443, 443, 447,
	-150, -228, -229, 239, 353, 101, 239, 101, 94, 385,
	-178, -185, -229, -229, -191, -178, -185, 443, 447, 425,
	-194, -192, -369, 443, -176, -370, 371, -211, 179, -90,
	2, 442, -223, -256, -90, 442, -166, 251, 442, -176,
	-161, 209, -446, -367, -158, -254, -282, 442, 251, -90,
	-179, 2, -226, 425, 443, 443, 94, 94, -228, 442,
	442, -229, -44, -45, 176, 76, 270, -188, 360, -150,
	-298, -298, -298, 443, -448, -364, 435, -402, 267, 443,
	-298, -298, -299, 148, 442, -308, -403, 412, -298, -239,
	-403, -403, 443, -322, -360, 2, -289, -185, -189, -182,
	-166, 131, 166, 242, 204, 442, -299, -191, 442, 2,
	-437, 103, 180, -288, -438, 81, 354, -325, 443, 443,
	242, 242, -298, -340, -155, -155, 443, 443, 375, 375,
	375, -363, -361, 375, -298, -212, -213, 170, -436, 413,
	-209, -435, -228, -191, -228, 251, -446, -367, -159, 109,
	-229, 76, -276, -304, -138, 442, 442, 443, -228, -228,
	443, 447, 26, 442, 26, 442, -191, 443, -226, 48,
	443, 443, -299, -308, 443, -404, -405, -181, -321, 441,
	-384, -182, 239, -298, -168, 442, -298, 180, 104, 162,
	-211, 442, 289, -174, 63, 442, 442, -178, -185, 442,
	425, 442, -435, 265, 94, 236, 443, 34, 443, -273,
	443, -191, -367, -160, 393, 240, 443, -185, -254, -370,
	-370, -288, 443, 443, -45, -229, -229, -409, 283, 312,
	157, -239, 443, 447, 34, 119, 443, -385, 225, -166,
	443, 104, 162, -212, -229, -191, -424, 398, -189, -217,
	-216, -214, -219, -218, -214, -239, -361, -239, -191, 94,
	-211, -90, -288, 442, -288, 442, -161, 334, -291, 443,
	443, -211, -288, 443, 443, 443, -410, -411, 40, 387,
	85, -298, -410, -410, -405, -407, 131, -386, -389, -388,
	251, 149, 266, 339, 443, 353, 409, -437, 443, -223,
	-298, 443, 447, 403, 443, 447, 403, 443, 443, 442,
	-212, -436, -211, -228, -211, -228, -247, -138, -138, -212,
	-211, -411, 274, 144, 311, 274, 144, -182, -388, 251,
	-389, 251, 393, 105, -385, -216, 170, -218, 148, -229,
	-435, -212, 443, -212, 443, -292, -212, 30, -387, 236,
	302, 53, 334, -387, -386, 442, 442, 443, -442, 411,
	-288, -442, -288, -411, 22, 242, 101, -437, -239, -239,
	-156, 53, 302, 2, -211, -211, 443, 443, -212, -212,
	-212, 375, -442, -442, 442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 341, 343, 345, 347,
	348, 350, 352, 353, 354, 355, 356, 358, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 406, 0, 829, 831, 833, 835, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	393, 395, 0, 0, 415, 416, 0, 918, -2, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 488, 489,
	491, 493, 495, 497, 499, 501, 503, 505, 507, 509,
	511, 513, 515, 517, 519, 521, -2, -2, -2, 0,
	-2, -2, -2, 847, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 957,
	292, 294, 296, 298, 300, 0, -2, 971, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 933, 935, 937, 939, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 340, 342, 344, 346, 349, 351, 357, 359, 361,
	720, 1552, 1565, 1566, 1567, 1570, 1571, 1572, 1573, 1574,
	1575, 1896, 1976, 1977, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 0,
	371, 369, 1546, 372, 1733, 374, 376, 279, 280, 281,
	282, 283, 284, 0, 152, 0, 386, 380, 385, 387,
	389, 390, 391, 392, 367, 365, 0, 386, 1597, 384,
	827, 828, 822, 823, 1766, 857, 405, -2, -2, -2,
	1865, -2, 437, -2, 444, 1868, 1768, 447, 0, 449,
	-2, 452, 830, 832, 834, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1631, 1523, 1567, 1526, 1521, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 198, 200,
	203, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	644, 0, 0, 649, 771, 772, 793, 0, 0, 0,
	0, 287, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 231,
	325, 326, 0, 958, 0, 0, 0, 150, 143, 0,
	0, 632, 394, 396, 0, 142, 0, 0, 826, 0,
	410, 412, 414, 477, 479, 481, 483, 485, 487, 490,
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 523, 0, 0, 0,
	0, 0, 527, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 526, 528, 529, 530,
	0, 575, 614, 615, 0, 762, 959, 859, 837, 850,
	859, 839, 840, 841, 842, 843, 848, 849, 852, 0,
	844, 845, 846, 34, 36, 38, 40, 42, 44, 255,
	257, 259, 261, 265, 267, -2, 931, 932, 293, 295,
	297, 299, 301, 397, 0, 399, 0, 527, 922, 0,
	-2, 0, 963, 963, 963, 0, 0, 932, 930, 0,
	402, 403, 456, 457, 1186, 0, 0, 0, 0, 0,
	1421, 1270, 0, 458, -2, 1301, 1303, 1844, 1865, 1420,
	1305, 1306, 1307, 1308, 1309, 0, 0, 1312, 0, 1314,
	1315, 1316, 1317, 0, 1319, 0, 1323, 1324, 1325, 0,
	1849, 1500, 1563, -2, 1091, 1092, 1093, 1094, 1095, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1559, 0, 1392,
	1339, -2, 1584, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1640, -2, -2, -2, -2,
	-2, -2, -2, 1147, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1879, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 0, 1833, 1850, 1851, 1856, 1858, 1852,
	1841, 1362, -2, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1148, -2,
	1845, 1846, 1861, 1862, 1867, 1872, 1873, 1848, 1857, -2,
	-2, 949, 1741, 952, 720, 950, 934, 936, 0, 938,
	0, 0, 0, 943, 966, 964, 0, 1002, 947, 948,
	958, 1017, 1040, 0, 1022, 0, 1040, 1062, 0, 1027,
	1761, 1340, 1341, 0, 1567, 1564, -2, 2, 0, 0,
	0, 0, 0, 194, 368, 0, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 407, 408,
	0, 432, 0, 436, 1840, -2, -2, 440, 860, 864,
	865, 866, 0, 0, 0, 0, 446, 0, 0, 433,
	434, 450, 453, 0, 52, 0, 1850, 1062, 53, 0,
	1536, 1589, 1590, 1591, 1592, 1593, 1879, 1895, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 55, 0, 1850,
	58, 0, 1850, 0, -2, 62, 0, 1850, 153, 154,
	1580, 1581, 1585, 1586, 1587, 1588, 65, 0, 1542, 67,
	0, 1539, 75, 0, 1850, 1520, 0, 0, 624, 1517,
	1522, 625, 1527, 0, 176, 177, 178, 179, 180, 1850,
	182, 183, 0, 185, 186, 1850, 188, 189, 0, 191,
	206, 207, 0, 209, 0, 1850, 0, 0, 0, 215,
	-2, 232, 0, 229, 0, 219, 220, 222, 223, 224,
	225, 226, 0, 0, 0, 777, 0, 269, 1547, 0,
	-2, 1850, 765, 768, 1850, 770, 782, 1550, 0, -2,
	0, 956, 1850, 873, 645, 646, 647, 648, 0, 278,
	0, 886, 0, 888, 0, 908, 1068, 1017, 233, 234,
	235, 236, 237, 1850, 0, 0, 0, 242, 0, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 135, 1850,
	304, 323, 135, 1850, 307, 135, 1850, 310, 135, 1850,
	313, 1515, 135, 1850, 316, 317, 1850, 319, 155, 320,
	1850, 322, 0, -2, 362, 1553, -2, 328, 0, -2,
	0, 167, 0, 630, 631, 0, 824, 825, 417, 0,
	0, 524, 525, 0, 0, 535, 536, 537, 538, 1739,
	1655, 541, 0, 544, 565, 579, 0, 0, 0, 548,
	550, 629, 552, 0, 0, 554, 0, 556, 0, 558,
	0, 560, 0, 562, 564, 566, 580, 568, 0, 0,
	0, 578, 0, 584, 0, 587, 588, 589, 0, 591,
	592, 593, 594, 0, 596, 597, -2, -2, 601, 603,
	0, 609, 0, 613, 0, 531, 532, 135, 1066, 836,
	-2, 838, 0, 854, 925, -2, 0, 398, 0, 401,
	929, 923, 928, 980, 981, 0, 0, 0, 0, 961,
	962, 0, 0, 0, 920, 921, 0, 0, 0, 0,
	1426, 1427, 1428, 1429, 1430, 1431, 1434, 1435, 1432, 1433,
	1436, 1437, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 1443, 0, 1445, 0, 0, 0,
	0, 0, 0, 1249, 1251, 1508, 0, 0, 1442, 1191,
	1192, 1193, 1228, 1229, 0, 0, 1302, 1505, 1504, 1304,
	0, 1457, 0, 1311, 0, 1183, 1318, 1533, -2, 0,
	1421, 1452, 0, 0, 1326, 1327, 1328, 0, 0, 1457,
	0, 0, 1499, 0, 1394, 0, 1127, 0, 1128, 1129,
	0, 1130, 1131, 1144, 1157, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1149, 0, 0, 0,
	1480, -2, 0, 0, 0, 0, 0, 951, 0, 0,
	1006, 1509, 1513, 1514, 1006, 1006, 0, 0, 1458, 0,
	0, 0, 0, 1059, 1059, 1059, 1057, 1034, 0, 1040,
	0, 1050, 0, 1040, 1040, 0, -2, 1022, 0, 0,
	1050, 1063, 1064, 0, 0, 0, 0, 0, 0, 1568,
	0, 0, 1555, 0, 167, 0, 378, 388, 958, 0,
	1460, 1082, 1078, 1085, 1086, 1087, 1088, 1134, 1135, 1136,
	1137, 1138, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, -2,
	1145, 1147, 1168, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1140, 0, 1115, 1115, 1115, 1132,
	1133, 1156, 1167, 1159, 1167, 1163, 1083, 1084, 1150, 1151,
	1152, 1153, 0, 382, 0, 0, 0, 0, -2, 442,
	0, 862, 0, 867, 467, 468, 469, 869, 870, 445,
	470, 471, 472, 473, 474, 475, 0, 737, 0, 739,
	1529, 0, 443, 460, 448, 0, 454, 76, 819, 103,
	0, 819, 819, 0, 0, 122, 0, 0, 0, 0,
	0, 94, 99, 82, 83, 0, 0, 0, 0, 59,
	745, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 93, 0, 88, 78, 0,
	0, 96, 101, 0, 126, 128, 0, 0, 1053, 623,
	0, 0, 1568, 1525, 0, 0, 0, 0, 208, 210,
	0, 212, 213, 214, 0, 776, 0, 221, 218, 262,
	720, 1850, 744, 1850, 742, 1551, 0, 0, 276, 271,
	0, 273, 763, 0, 955, 0, 0, 0, 0, 783,
	0, 1850, 788, 1538, 1576, 1577, 875, 0, 1074, 0,
	889, 0, 0, 1069, 0, 1071, 0, 239, 240, 241,
	0, 302, 0, 133, 134, 0, 305, 0, 308, 0,
	311, 0, 0, 314, 0, 0, 0, 0, 958, 0,
	0, 0, 145, 0, 0, 0, 0, 167, 1053, 419,
	1053, 421, 0, 0, 539, 540, 542, 543, 545, 546,
	610, 547, 551, 0, 617, 1757, 627, 553, 555, 557,
	559, 561, 0, 570, 0, 572, 0, 574, 582, 585,
	590, 595, 0, 0, 0, 0, 761, 0, 853, 926,
	928, 400, 924, 978, 979, 984, 988, 989, 992, 995,
	996, 986, 1186, 944, 945, 946, 972, 973, 802, 0,
	1976, 1187, 1079, 1188, 1189, 1535, 0, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, -2, -2, -2,
	-2, -2, -2, -2, -2, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, -2, -2, -2, 1226,
	1227, -2, 1444, 1446, 0, 1508, 0, -2, 0, -2,
	-2, -2, -2, 1246, 0, 1248, 1253, 1255, 1257, 0,
	0, 0, 0, 1507, 1267, 1491, 1492, 0, 0, 1423,
	1424, 1425, 1252, 0, 1271, 1506, 1503, 0, 0, 1456,
	969, 1330, 0, 0, 0, 0, 1337, 0, 1534, 1182,
	1169, 1170, 1171, 1172, 1173, 1174, 1184, 1322, 1454, 0,
	1453, 0, 0, 0, 1464, 0, 1498, 1494, 0, 1556,
	1562, 1402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1374, 0, 1467, -2, -2, -2, -2, -2,
	-2, -2, 0, 1376, 0, 1378, 1458, 1477, 0, 0,
	1272, 0, 0, 0, 1421, 0, 1381, 1458, 1485, 0,
	0, 0, 0, 0, 1458, 0, 1490, 0, 1388, 0,
	1390, 953, 0, 0, 1074, 0, 0, 0, 1512, 1074,
	1074, 0, 1001, 0, 0, 0, 0, 0, 0, 1054,
	1058, 1055, 1056, 0, 0, 1040, 1050, 1014, 0, 0,
	1537, 1020, 1049, 0, 720, 1039, 1050, 1050, 0, -2,
	1024, 0, 0, 969, -2, 168, 719, 0, 0, 0,
	370, 0, 0, 0, 364, 366, 0, 1075, 1077, 0,
	1089, 0, 0, -2, 0, 0, 0, 0, 0, 435,
	0, 861, 868, 0, 464, 0, 466, 738, 1531, 1530,
	0, 455, 0, 0, 0, 0, 818, 105, 1850, 0,
	137, 0, 0, 704, 1543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 746, 747, 749, 755,
	757, 0, 751, 1532, 0, 752, 0, 754, 756, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 1519, 158, 1052, 0, 1518, 1528,
	0, 181, 184, 187, 190, 0, 216, 0, 0, 652,
	635, 0, 740, 743, 0, 720, 775, 1549, 0, 167,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 1850, 877, 883, 0, 971, 1073, 0,
	906, 891, 0, 0, 0, 906, 910, 911, 913, 914,
	0, 0, 1070, 0, 243, 324, 135, 135, 135, 1516,
	135, 135, 156, 318, 321, 327, 363, 958, 167, 165,
	1721, 163, 160, 162, 0, 0, 0, 653, 655, 656,
	657, 658, 0, 1577, 0, 1683, 1577, 140, 167, 418,
	423, 533, 0, 628, 626, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 612, 616, 1067, 927, 0,
	990, 0, 987, 993, 994, 0, 975, 800, 801, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1268, 0,
	-2, 1247, 1250, 1254, 1256, 1258, 0, 0, 0, 0,
	0, 0, 1447, 0, 1449, 1269, 1501, 1504, 1419, 0,
	0, 968, 969, 969, 969, 1336, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1462, 1463, 0, 1329, 0,
	1495, 0, 0, 0, 1338, 0, 0, 0, 1139, 1113,
	0, 1167, 1165, 1166, 1160, 1167, 1164, 0, 0, 0,
	0, 0, 1357, 0, 0, 0, 1361, 1373, 0, 1375,
	1377, 0, 0, 1379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 1277,
	1380, 1483, 1484, 0, 0, 0, 0, 0, 0, 1386,
	0, 1489, 1387, 1389, 958, 1003, 998, 1510, 1053, 1005,
	1007, 1511, 1540, 998, 998, 0, 1459, 1042, 0, 1044,
	0, 0, 0, 1046, 0, 1035, 0, 1037, 1050, 1019,
	0, 0, 1012, 0, 1011, 720, 1048, 1021, 1025, 1556,
	0, 1065, 0, 1029, 1032, 0, 0, 1569, 192, 195,
	196, 193, 0, 377, 0, 1461, 0, 1080, 0, 0,
	0, 0, 0, 381, 0, 431, -2, 462, 463, 465,
	461, 104, 806, 0, 0, 1541, 0, 107, 1850, 116,
	0, 681, 0, 0, 0, 0, 0, 821, 0, 1850,
	135, 1850, 135, 118, 121, 0, 125, 123, 0, 0,
	672, 77, 819, 80, 86, 0, 0, 0, 92, 0,
	812, 0, 750, 753, 759, 60, 0, 814, 804, 0,
	803, 127, 81, 87, 0, 816, 79, 0, 167, 0,
	0, 1524, 0, 0, 0, 0, 651, -2, 0, 0,
	0, 0, 0, 0, 0, 270, 275, 274, 766, -2,
	769, 778, 0, 780, 792, 0, 0, 0, 879, 883,
	0, 882, 956, 983, 970, 1072, 884, 906, 0, 0,
	0, 894, 896, 893, 890, 887, 1074, 0, 0, 0,
	0, 0, 238, 303, 306, 309, 312, 315, 329, 144,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 1577, 1577, 0, 1545, 141, 420, 0, 0, 571,
	573, 581, 604, 605, 667, 0, 608, 0, 0, 974,
	802, 0, 1190, 1231, 0, 0, -2, 0, 0, 1235,
	0, 0, 0, -2, 0, 0, 0, 1448, 1450, 0,
	1503, 1331, 0, 0, 0, 0, 1313, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 0, 1320, 1321, 1422, 1465, 1493,
	1497, 0, 1557, 1561, 1400, 1401, 1405, 1548, 0, 0,
	0, 1158, 1162, 1342, 0, 0, 0, 0, 0, 0,
	0, 1466, 1476, 1478, 1273, 1274, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, -2, -2, -2, 1291,
	1292, 1293, -2, -2, -2, 0, 0, 0, 1479, 1481,
	1482, 1486, 1487, 0, 1383, 1384, 1385, 1488, 0, 1000,
	0, 1004, 0, 1000, 1000, 965, 1043, 0, 1061, 1045,
	1017, 1036, 0, 1026, 1015, 0, 1016, 0, 1047, 0,
	1023, 1028, 0, 1031, 0, 1331, -2, 151, 379, 0,
	1081, 1090, 0, 1142, 1146, 383, 0, 0, 0, 0,
	136, 679, 703, 0, 0, 795, 802, 0, 0, 109,
	0, 0, 0, 117, 0, 114, 0, 120, 124, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 0, 95,
	0, 0, 0, 0, 0, 138, 0, 0, 211, 774,
	217, 661, 0, 636, 0, 720, 744, 0, 268, 764,
	779, 0, 0, 0, 0, 0, 881, 883, 0, 874,
	875, 906, 982, 885, 904, -2, 903, 0, 0, 0,
	971, 912, 909, 915, 916, 0, 164, 0, 159, 161,
	0, 147, 0, 0, 654, 659, 0, 0, 0, 0,
	0, 534, 606, 666, 0, 0, 985, 991, 976, 802,
	1233, 1237, 0, 0, 0, 1239, -2, 0, 1261, -2,
	-2, 1451, 1502, 1310, 969, 1332, 1334, 1335, 1185, 1496,
	0, 1407, 1404, 0, 1391, 1114, 1352, 1353, 0, 0,
	1356, 1358, 1359, 1360, 1475, 0, 0, 0, 0, 1382,
	954, 1396, 0, 0, 1008, 1396, 1396, 0, 1040, 1038,
	1013, 1009, 0, 1557, 1030, 0, 0, 1076, 1141, 808,
	810, 106, 0, 680, 0, 683, 0, 0, 0, 0,
	690, 691, 0, 0, 0, 0, 0, 709, 718, 0,
	797, 0, 0, 0, 111, 130, 0, 0, 820, 0,
	135, 135, 0, 0, 807, 0, 0, 0, 0, 0,
	813, 815, 805, 0, 817, 157, 0, 669, 0, 640,
	637, 652, 635, 741, 773, 0, 791, 0, 0, 0,
	871, 883, 0, 876, 877, 277, 0, 0, 0, 892,
	895, 897, 983, 0, 166, 167, 0, 0, 0, 0,
	0, 0, 422, 424, 0, 0, 430, 665, 0, 977,
	1241, -2, -2, 1262, 0, 1558, 1560, 971, 0, 1393,
	0, 0, -2, 0, 0, 0, 940, 0, 999, 997,
	941, 942, 1060, 1050, 0, 1033, 108, 0, 684, 685,
	1544, 687, 0, 689, 692, 0, 694, 1579, 0, 698,
	705, 710, 0, 661, 0, 715, 716, 796, 707, 0,
	110, 112, 129, 799, 113, 119, 0, 0, 0, 0,
	0, 0, 97, 0, 1051, 635, 668, 0, 638, 0,
	0, 0, 0, 792, 0, 0, 0, 878, 879, 0,
	0, 0, 906, 917, 146, 0, 0, 718, 0, 0,
	702, 0, 426, 0, 428, 0, 607, 1333, 1411, 0,
	1354, 1355, -2, 0, 1299, 1395, 1397, 0, 1018, 1010,
	682, 686, 0, 0, 724, 0, 0, 0, 713, 714,
	669, 0, 0, 132, 0, 0, 0, 809, 811, 0,
	0, 0, 633, 0, 641, 0, 661, 0, 718, 0,
	718, 0, 880, 881, 0, 899, 900, 902, 907, 0,
	0, 661, 718, 701, 425, 0, 0, 0, 0, 0,
	0, 1406, 1300, 0, 0, 0, 693, 729, 0, 0,
	0, 711, 712, 709, 0, 720, 115, 0, 798, 0,
	673, 0, 0, 676, 0, 0, 98, 0, 0, 642,
	669, 640, 661, 0, 661, 0, 872, 0, 901, 167,
	167, 669, 661, 427, 429, 1403, 1408, 1412, -2, 1814,
	1628, 0, 1409, 1410, 1398, 1399, 0, 695, 725, 726,
	0, 721, 722, 723, 1578, 696, 697, 706, 717, 724,
	131, 670, 0, 0, 671, 0, 0, 100, 102, 0,
	635, 639, 669, 0, 669, 0, 1074, 148, 149, 699,
	669, 0, 1414, 1415, 1416, 1417, 1418, 688, 727, 0,
	728, 0, 0, 0, 729, 674, 0, 677, 0, 0,
	634, 789, 718, 789, 718, 898, 700, 0, 730, 0,
	733, 734, 0, 731, 709, 0, 0, 664, 784, 0,
	661, 786, 661, 1413, 732, 735, 736, 708, 0, 0,
	660, 662, 663, 790, 669, 669, 669, 0, 789, 789,
	675, 0, 785, 787, 0, 0, 669, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1030
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1036
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1045
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1150
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1169
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1178
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1194
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1247
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1251
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1260
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1271
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1281
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1292
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1302
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1321
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1333
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1340
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1348
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1357
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1368
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1376
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1389
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1405
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1425
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1434
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1445
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1455
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1471
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1476
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1481
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1486
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1491
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1500
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1524
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1541
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1574
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1581
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1589
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1604
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1612
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1622
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1626
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1633
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1637
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1641
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1680
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1710
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1751
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1760
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1770
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1779
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1788
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1796
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1815
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1819
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1823
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1829
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1839
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1857
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1867
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1877
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1881
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1885
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1891
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1921
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1931
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1934
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1967
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1989
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2014
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2018
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2024
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2034
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2036
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2037
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2043
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2061
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2064
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2065
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2068
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2069
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2072
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2073
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2080
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2095
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2102
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2105
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2117
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       name,
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2144
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2154
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2169
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2183
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2193
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2200
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2217
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2218
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2225
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2226
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2238
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2241
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2253
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2256
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2287
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2294
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2317
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2332
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2340
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2347
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2351
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2360
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2390
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2392
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2396
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2407
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2411
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2414
		{
			return helpWith(sqllex, "DELETE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "INSERT")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2422
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2425
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2431
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2432
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2436
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2450
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2457
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2461
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2465
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2481
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2485
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2499
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2514
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2545
		{
			return helpWith(sqllex, "GRANT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2576
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2585
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2596
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2614
		{
			return helpWith(sqllex, "RESET")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2615
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2623
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2630
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2638
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2655
		{
			return helpWith(sqllex, "USE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2659
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2660
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2662
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2666
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2667
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2668
		{
			return helpWith(sqllex, "USE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2684
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2699
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2702
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2720
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2733
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2737
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2761
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2817
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2844
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2847
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2851
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2870
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2877
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return unimplemented(sqllex, "set from current")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2884
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2892
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2897
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2904
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2908
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2914
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2925
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2956
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2960
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2964
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2968
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.union.val = tree.Low
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.Normal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2986
		{
			sqlVAL.union.val = tree.High
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2997
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3059
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3070
		{
			sqlVAL.str = "client_encoding"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3073
		{
			sqlVAL.str = "timezone"
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3088
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3098
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3107
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3118
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3142
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3171
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3176
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3187
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3203
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3219
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3227
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3235
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3245
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3253
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3255
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3271
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3281
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3302
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3306
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3316
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3328
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3338
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3345
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3346
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3354
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3359
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3373
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3382
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3391
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3401
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3415
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3427
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3432
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3437
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3449
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3458
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3467
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3494
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3498
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3506
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3517
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3535
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3550
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3562
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3570
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3582
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3587
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3711
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3715
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3758
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3763
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3776
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3811
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3847
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:3864
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3882
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3883
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3884
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3888
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3904
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3921
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3922
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3923
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3937
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3938
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3940
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3941
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3942
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3943
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3944
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3965
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3971
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3974
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3978
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3998
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4003
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4008
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.str = ""
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4028
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4034
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4048
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4054
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4058
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4064
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4074
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4084
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4095
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4110
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4132
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4162
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4174
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4178
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4182
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4195
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4199
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4203
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4220
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4232
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4242
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4271
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4282
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4292
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4307
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4309
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4310
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4311
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4312
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4329
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4333
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4339
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4365
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match full")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4367
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match simple")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4368
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4423
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4433
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4437
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4443
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4462
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4471
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4479
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4483
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4491
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4494
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4498
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4500
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4502
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4504
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4505
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4507
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4510
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4512
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4520
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4523
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4538
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4542
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4546
		{
			sqlVAL.union.val = nil
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4556
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4560
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4563
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4568
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4577
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4589
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4590
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4593
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4594
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4600
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4602
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4604
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4606
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4608
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4610
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4626
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4644
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4663
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4681
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4699
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4702
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4703
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4707
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4722
		{
			sqlVAL.union.val = false
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4732
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4738
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4751
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4762
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4763
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.Descending
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4792
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4798
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4812
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4826
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4840
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4854
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4856
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4860
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4874
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4890
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4904
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4920
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4929
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4930
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4933
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4934
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4942
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4945
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4964
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4967
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4978
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4982
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4983
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4984
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5000
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5003
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5005
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5008
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5021
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5023
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5026
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5030
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5035
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5036
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5037
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5045
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5052
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5055
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5056
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5060
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5064
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5068
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5072
		{
			sqlVAL.str = ""
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5078
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5082
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5092
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5098
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5102
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5115
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5117
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5121
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5130
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5142
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5152
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 871:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5182
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.str = ""
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5196
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.str = ""
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5206
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5210
		{
			sqlVAL.str = ""
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5220
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5226
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5238
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5245
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5252
		{
			return helpWith(sqllex, "INSERT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5270
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5274
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5287
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5306
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5312
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5336
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5340
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5353
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5354
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5356
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5362
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5371
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 907:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5388
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5399
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5403
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5404
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5425
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5428
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5432
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5500
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5516
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5520
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5525
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5526
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5531
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5566
		{
			return helpWith(sqllex, "SELECT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5567
		{
			return helpWith(sqllex, "VALUES")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5568
		{
			return helpWith(sqllex, "TABLE")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5617
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5629
		{
			return helpWith(sqllex, "SELECT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5642
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5673
		{
			return helpWith(sqllex, "TABLE")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5685
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5689
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5693
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5707
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5715
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5716
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5720
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.union.val = nil
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5730
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5734
		{
			sqlVAL.union.val = true
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = false
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5742
		{
			sqlVAL.union.val = false
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = true
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5759
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5760
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5763
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5764
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5778
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5784
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5798
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5807
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5826
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5835
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5846
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5850
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5859
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5865
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5879
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5903
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5907
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5924
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5960
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5962
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5977
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5999
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6005
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6016
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6028
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6032
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6036
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6040
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6067
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6081
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6095
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6102
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6112
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6116
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6132
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6160
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6162
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = nil
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6171
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = true
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = false
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6235
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6248
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6255
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6261
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6279
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6280
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6300
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6307
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6338
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6352
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6385
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6399
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6408
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6452
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6453
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6538
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = nil
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6616
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6690
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6711
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6717
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6739
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6762
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = true
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6780
		{
			sqlVAL.union.val = false
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6789
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6793
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6794
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6795
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6797
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6804
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6809
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = true
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6813
		{
			sqlVAL.union.val = false
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = false
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6824
		{
			sqlVAL.union.val = tree.Year
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = tree.Month
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = tree.Day
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = tree.Month
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6854
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6858
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6862
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6866
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6870
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6874
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = nil
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6887
		{
			sqlVAL.union.val = tree.Second
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6890
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6914
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6925
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6934
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7178
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7216
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7244
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7261
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7266
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7460
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7465
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7474
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7476
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7492
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7523
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7538
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7549
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7550
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7563
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7574
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7590
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7595
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7615
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7683
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7688
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7693
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7698
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7703
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7705
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7708
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7713
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7718
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7727
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7728
		{
			return unimplemented(sqllex, "treat")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7749
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7754
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7759
		{
			return unimplemented(sqllex, "within group")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7760
		{
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7768
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7775
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7779
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7785
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7795
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7803
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7811
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7838
		{
			sqlVAL.str = ""
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7844
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7848
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7859
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7880
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7886
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7899
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7966
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7973
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7985
		{
			sqlVAL.union.val = tree.Any
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7989
		{
			sqlVAL.union.val = tree.Some
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.All
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7998
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7999
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8000
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.Div
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8003
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8004
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8005
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8006
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8007
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8008
		{
			sqlVAL.union.val = tree.LT
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8009
		{
			sqlVAL.union.val = tree.GT
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8010
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.LE
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8012
		{
			sqlVAL.union.val = tree.GE
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8013
		{
			sqlVAL.union.val = tree.NE
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8017
		{
			sqlVAL.union.val = tree.Like
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8018
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8019
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8020
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8043
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8057
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8061
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8086
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8093
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8099
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8109
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8129
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8139
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8143
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8165
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8169
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8173
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8179
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8186
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8190
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8223
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8235
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8241
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8245
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8249
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8255
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8267
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8274
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8290
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8294
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8301
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8307
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8311
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8318
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8324
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8333
		{
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8334
		{
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8338
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8348
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8361
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8373
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8383
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8393
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8405
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8446
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8452
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8456
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8464
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8468
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8479
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8490
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8500
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8605
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8635
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8676
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8680
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8702
		{
			sqlVAL.str = ""
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8708
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8712
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
