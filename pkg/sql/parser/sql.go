// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:66

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:624
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10280

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1110,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 71,
	189, 937,
	206, 937,
	221, 249,
	308, 249,
	317, 752,
	344, 249,
	353, 752,
	392, 752,
	416, 249,
	441, 752,
	-2, 0,
	-1, 76,
	221, 253,
	-2, 0,
	-1, 77,
	115, 1110,
	195, 1110,
	426, 1110,
	427, 1110,
	-2, 0,
	-1, 89,
	128, 1084,
	144, 1084,
	157, 1084,
	203, 1084,
	233, 1084,
	271, 1084,
	281, 1084,
	421, 1084,
	-2, 1055,
	-1, 121,
	134, 661,
	220, 661,
	311, 641,
	362, 641,
	409, 661,
	-2, 0,
	-1, 122,
	4, 1112,
	21, 1112,
	22, 1112,
	23, 1112,
	24, 1112,
	25, 1112,
	27, 1112,
	33, 1112,
	38, 1112,
	39, 1112,
	40, 1112,
	41, 1112,
	42, 1112,
	43, 1112,
	44, 1112,
	45, 1112,
	46, 1112,
	47, 1112,
	48, 1112,
	49, 1112,
	50, 1112,
	52, 1112,
	53, 1112,
	54, 1112,
	55, 1112,
	56, 1112,
	57, 1112,
	58, 1112,
	61, 1112,
	62, 1112,
	63, 1112,
	64, 1112,
	66, 1112,
	67, 1112,
	68, 1112,
	72, 1112,
	73, 1112,
	74, 1112,
	75, 1112,
	76, 1112,
	77, 1112,
	80, 1112,
	81, 1112,
	82, 1112,
	83, 1112,
	85, 1112,
	87, 1112,
	88, 1112,
	89, 1112,
	91, 1112,
	93, 1112,
	94, 1112,
	102, 1112,
	103, 1112,
	104, 1112,
	105, 1112,
	106, 1112,
	107, 1112,
	108, 1112,
	109, 1112,
	111, 1112,
	112, 1112,
	114, 1112,
	115, 1112,
	117, 1112,
	120, 1112,
	121, 1112,
	122, 1112,
	124, 1112,
	126, 1112,
	127, 1112,
	129, 1112,
	130, 1112,
	131, 1112,
	132, 1112,
	133, 1112,
	134, 1112,
	135, 1112,
	136, 1112,
	137, 1112,
	138, 1112,
	139, 1112,
	140, 1112,
	141, 1112,
	143, 1112,
	149, 1112,
	150, 1112,
	151, 1112,
	152, 1112,
	153, 1112,
	154, 1112,
	156, 1112,
	158, 1112,
	162, 1112,
	163, 1112,
	165, 1112,
	166, 1112,
	168, 1112,
	169, 1112,
	171, 1112,
	172, 1112,
	173, 1112,
	174, 1112,
	175, 1112,
	176, 1112,
	177, 1112,
	178, 1112,
	180, 1112,
	181, 1112,
	183, 1112,
	184, 1112,
	185, 1112,
	186, 1112,
	189, 1112,
	190, 1112,
	191, 1112,
	192, 1112,
	195, 1112,
	196, 1112,
	197, 1112,
	198, 1112,
	199, 1112,
	200, 1112,
	201, 1112,
	202, 1112,
	204, 1112,
	206, 1112,
	208, 1112,
	210, 1112,
	211, 1112,
	212, 1112,
	214, 1112,
	215, 1112,
	218, 1112,
	219, 1112,
	220, 1112,
	221, 1112,
	222, 1112,
	224, 1112,
	225, 1112,
	227, 1112,
	228, 1112,
	230, 1112,
	231, 1112,
	234, 1112,
	235, 1112,
	238, 1112,
	239, 1112,
	240, 1112,
	241, 1112,
	243, 1112,
	244, 1112,
	245, 1112,
	246, 1112,
	247, 1112,
	248, 1112,
	249, 1112,
	250, 1112,
	251, 1112,
	252, 1112,
	254, 1112,
	255, 1112,
	256, 1112,
	257, 1112,
	258, 1112,
	260, 1112,
	262, 1112,
	264, 1112,
	266, 1112,
	267, 1112,
	268, 1112,
	269, 1112,
	270, 1112,
	272, 1112,
	273, 1112,
	274, 1112,
	276, 1112,
	277, 1112,
	278, 1112,
	279, 1112,
	282, 1112,
	283, 1112,
	284, 1112,
	286, 1112,
	288, 1112,
	289, 1112,
	290, 1112,
	291, 1112,
	292, 1112,
	293, 1112,
	294, 1112,
	295, 1112,
	296, 1112,
	297, 1112,
	299, 1112,
	300, 1112,
	301, 1112,
	302, 1112,
	303, 1112,
	304, 1112,
	305, 1112,
	307, 1112,
	309, 1112,
	310, 1112,
	311, 1112,
	312, 1112,
	313, 1112,
	314, 1112,
	315, 1112,
	316, 1112,
	317, 1112,
	318, 1112,
	320, 1112,
	321, 1112,
	322, 1112,
	323, 1112,
	324, 1112,
	326, 1112,
	327, 1112,
	328, 1112,
	329, 1112,
	330, 1112,
	331, 1112,
	332, 1112,
	333, 1112,
	335, 1112,
	337, 1112,
	338, 1112,
	339, 1112,
	340, 1112,
	341, 1112,
	342, 1112,
	344, 1112,
	345, 1112,
	346, 1112,
	347, 1112,
	348, 1112,
	349, 1112,
	350, 1112,
	351, 1112,
	353, 1112,
	354, 1112,
	355, 1112,
	356, 1112,
	357, 1112,
	358, 1112,
	359, 1112,
	360, 1112,
	361, 1112,
	362, 1112,
	364, 1112,
	365, 1112,
	366, 1112,
	367, 1112,
	368, 1112,
	370, 1112,
	371, 1112,
	372, 1112,
	373, 1112,
	374, 1112,
	376, 1112,
	377, 1112,
	378, 1112,
	379, 1112,
	380, 1112,
	381, 1112,
	382, 1112,
	383, 1112,
	384, 1112,
	385, 1112,
	386, 1112,
	387, 1112,
	389, 1112,
	390, 1112,
	391, 1112,
	393, 1112,
	394, 1112,
	395, 1112,
	396, 1112,
	397, 1112,
	398, 1112,
	399, 1112,
	401, 1112,
	402, 1112,
	403, 1112,
	404, 1112,
	405, 1112,
	407, 1112,
	409, 1112,
	410, 1112,
	411, 1112,
	412, 1112,
	413, 1112,
	415, 1112,
	416, 1112,
	417, 1112,
	419, 1112,
	420, 1112,
	423, 1112,
	424, 1112,
	425, 1112,
	426, 1112,
	427, 1112,
	428, 1112,
	429, 1112,
	431, 1112,
	433, 1112,
	434, 1112,
	435, 1112,
	436, 1112,
	437, 1112,
	438, 1112,
	439, 1112,
	441, 1112,
	442, 1112,
	443, 1112,
	448, 1112,
	449, 1112,
	450, 1112,
	451, 1112,
	452, 1112,
	453, 1112,
	-2, 0,
	-1, 123,
	1, 989,
	210, 989,
	307, 989,
	315, 989,
	456, 989,
	479, 989,
	-2, 0,
	-1, 125,
	1, 989,
	479, 989,
	-2, 0,
	-1, 126,
	1, 989,
	479, 989,
	-2, 0,
	-1, 127,
	1, 989,
	406, 989,
	479, 989,
	-2, 0,
	-1, 152,
	128, 1083,
	144, 1083,
	157, 1083,
	203, 1083,
	233, 1083,
	271, 1083,
	281, 1083,
	421, 1083,
	-2, 1058,
	-1, 185,
	4, 1119,
	5, 1119,
	6, 1119,
	7, 1119,
	8, 1119,
	9, 1119,
	10, 1119,
	21, 1119,
	22, 1119,
	23, 1119,
	24, 1119,
	25, 1119,
	27, 1119,
	33, 1119,
	34, 1119,
	38, 1119,
	39, 1119,
	40, 1119,
	41, 1119,
	42, 1119,
	43, 1119,
	44, 1119,
	45, 1119,
	46, 1119,
	47, 1119,
	48, 1119,
	49, 1119,
	50, 1119,
	52, 1119,
	53, 1119,
	54, 1119,
	55, 1119,
	56, 1119,
	57, 1119,
	58, 1119,
	59, 1119,
	60, 1119,
	61, 1119,
	62, 1119,
	63, 1119,
	64, 1119,
	66, 1119,
	67, 1119,
	68, 1119,
	70, 1119,
	72, 1119,
	73, 1119,
	74, 1119,
	75, 1119,
	76, 1119,
	77, 1119,
	80, 1119,
	81, 1119,
	82, 1119,
	83, 1119,
	85, 1119,
	87, 1119,
	88, 1119,
	89, 1119,
	91, 1119,
	92, 1119,
	93, 1119,
	94, 1119,
	95, 1119,
	96, 1119,
	97, 1119,
	98, 1119,
	99, 1119,
	100, 1119,
	101, 1119,
	102, 1119,
	103, 1119,
	104, 1119,
	105, 1119,
	106, 1119,
	107, 1119,
	108, 1119,
	109, 1119,
	110, 1119,
	111, 1119,
	112, 1119,
	114, 1119,
	115, 1119,
	117, 1119,
	120, 1119,
	121, 1119,
	122, 1119,
	124, 1119,
	126, 1119,
	127, 1119,
	129, 1119,
	130, 1119,
	131, 1119,
	132, 1119,
	133, 1119,
	134, 1119,
	135, 1119,
	136, 1119,
	137, 1119,
	138, 1119,
	139, 1119,
	140, 1119,
	141, 1119,
	142, 1119,
	143, 1119,
	149, 1119,
	150, 1119,
	151, 1119,
	152, 1119,
	153, 1119,
	154, 1119,
	156, 1119,
	158, 1119,
	161, 1119,
	162, 1119,
	163, 1119,
	165, 1119,
	166, 1119,
	168, 1119,
	169, 1119,
	171, 1119,
	172, 1119,
	173, 1119,
	174, 1119,
	175, 1119,
	176, 1119,
	177, 1119,
	178, 1119,
	179, 1119,
	180, 1119,
	181, 1119,
	183, 1119,
	184, 1119,
	185, 1119,
	186, 1119,
	189, 1119,
	190, 1119,
	191, 1119,
	192, 1119,
	194, 1119,
	195, 1119,
	196, 1119,
	197, 1119,
	198, 1119,
	199, 1119,
	200, 1119,
	201, 1119,
	202, 1119,
	204, 1119,
	206, 1119,
	207, 1119,
	208, 1119,
	209, 1119,
	210, 1119,
	211, 1119,
	212, 1119,
	213, 1119,
	214, 1119,
	215, 1119,
	218, 1119,
	219, 1119,
	220, 1119,
	221, 1119,
	222, 1119,
	224, 1119,
	225, 1119,
	227, 1119,
	228, 1119,
	229, 1119,
	230, 1119,
	231, 1119,
	232, 1119,
	234, 1119,
	235, 1119,
	236, 1119,
	237, 1119,
	238, 1119,
	239, 1119,
	240, 1119,
	241, 1119,
	243, 1119,
	244, 1119,
	245, 1119,
	246, 1119,
	247, 1119,
	248, 1119,
	249, 1119,
	250, 1119,
	251, 1119,
	252, 1119,
	253, 1119,
	254, 1119,
	255, 1119,
	256, 1119,
	257, 1119,
	258, 1119,
	259, 1119,
	260, 1119,
	261, 1119,
	262, 1119,
	263, 1119,
	264, 1119,
	265, 1119,
	266, 1119,
	267, 1119,
	268, 1119,
	269, 1119,
	270, 1119,
	272, 1119,
	273, 1119,
	274, 1119,
	277, 1119,
	278, 1119,
	279, 1119,
	282, 1119,
	283, 1119,
	284, 1119,
	285, 1119,
	286, 1119,
	287, 1119,
	288, 1119,
	289, 1119,
	290, 1119,
	291, 1119,
	292, 1119,
	293, 1119,
	294, 1119,
	295, 1119,
	296, 1119,
	297, 1119,
	299, 1119,
	300, 1119,
	301, 1119,
	302, 1119,
	303, 1119,
	304, 1119,
	305, 1119,
	307, 1119,
	309, 1119,
	310, 1119,
	311, 1119,
	312, 1119,
	313, 1119,
	314, 1119,
	315, 1119,
	316, 1119,
	317, 1119,
	318, 1119,
	320, 1119,
	321, 1119,
	322, 1119,
	323, 1119,
	324, 1119,
	326, 1119,
	327, 1119,
	328, 1119,
	329, 1119,
	330, 1119,
	331, 1119,
	332, 1119,
	333, 1119,
	335, 1119,
	336, 1119,
	337, 1119,
	338, 1119,
	339, 1119,
	340, 1119,
	341, 1119,
	342, 1119,
	344, 1119,
	345, 1119,
	346, 1119,
	347, 1119,
	348, 1119,
	349, 1119,
	350, 1119,
	351, 1119,
	353, 1119,
	354, 1119,
	355, 1119,
	356, 1119,
	357, 1119,
	358, 1119,
	359, 1119,
	360, 1119,
	361, 1119,
	362, 1119,
	363, 1119,
	364, 1119,
	365, 1119,
	366, 1119,
	367, 1119,
	368, 1119,
	369, 1119,
	370, 1119,
	371, 1119,
	372, 1119,
	373, 1119,
	374, 1119,
	376, 1119,
	377, 1119,
	378, 1119,
	379, 1119,
	380, 1119,
	381, 1119,
	382, 1119,
	383, 1119,
	384, 1119,
	385, 1119,
	386, 1119,
	387, 1119,
	389, 1119,
	390, 1119,
	391, 1119,
	393, 1119,
	394, 1119,
	395, 1119,
	396, 1119,
	397, 1119,
	398, 1119,
	399, 1119,
	401, 1119,
	402, 1119,
	403, 1119,
	404, 1119,
	405, 1119,
	407, 1119,
	409, 1119,
	410, 1119,
	411, 1119,
	412, 1119,
	413, 1119,
	414, 1119,
	415, 1119,
	416, 1119,
	417, 1119,
	419, 1119,
	420, 1119,
	422, 1119,
	423, 1119,
	424, 1119,
	425, 1119,
	426, 1119,
	427, 1119,
	428, 1119,
	429, 1119,
	430, 1119,
	431, 1119,
	433, 1119,
	434, 1119,
	435, 1119,
	436, 1119,
	437, 1119,
	438, 1119,
	439, 1119,
	441, 1119,
	442, 1119,
	443, 1119,
	448, 1119,
	449, 1119,
	450, 1119,
	451, 1119,
	452, 1119,
	453, 1119,
	454, 1119,
	460, 1119,
	467, 1119,
	468, 1119,
	469, 1119,
	476, 1119,
	480, 1119,
	-2, 0,
	-1, 575,
	160, 1824,
	406, 1824,
	459, 1824,
	478, 1824,
	-2, 0,
	-1, 576,
	160, 1906,
	406, 1906,
	459, 1906,
	478, 1906,
	-2, 0,
	-1, 577,
	160, 1813,
	406, 1813,
	459, 1813,
	478, 1813,
	-2, 0,
	-1, 579,
	160, 2003,
	406, 2003,
	459, 2003,
	478, 2003,
	-2, 0,
	-1, 581,
	160, 2033,
	406, 2033,
	459, 2033,
	478, 2033,
	-2, 0,
	-1, 588,
	160, 1918,
	406, 1918,
	459, 1918,
	478, 1918,
	-2, 503,
	-1, 612,
	478, 1768,
	481, 1768,
	-2, 714,
	-1, 613,
	478, 1770,
	481, 1770,
	-2, 715,
	-1, 614,
	478, 1769,
	481, 1769,
	-2, 716,
	-1, 615,
	481, 1705,
	-2, 717,
	-1, 657,
	441, 917,
	-2, 753,
	-1, 696,
	4, 935,
	21, 935,
	22, 935,
	23, 935,
	24, 935,
	25, 935,
	27, 935,
	33, 935,
	38, 935,
	39, 935,
	40, 935,
	41, 935,
	42, 935,
	43, 935,
	44, 935,
	45, 935,
	46, 935,
	47, 935,
	48, 935,
	49, 935,
	50, 935,
	52, 935,
	53, 935,
	54, 935,
	55, 935,
	56, 935,
	57, 935,
	58, 935,
	61, 935,
	62, 935,
	63, 935,
	64, 935,
	66, 935,
	67, 935,
	68, 935,
	72, 935,
	73, 935,
	74, 935,
	75, 935,
	76, 935,
	77, 935,
	80, 935,
	81, 935,
	82, 935,
	83, 935,
	85, 935,
	87, 935,
	88, 935,
	89, 935,
	91, 935,
	93, 935,
	94, 935,
	102, 935,
	103, 935,
	104, 935,
	105, 935,
	106, 935,
	107, 935,
	108, 935,
	109, 935,
	111, 935,
	112, 935,
	114, 935,
	115, 935,
	117, 935,
	120, 935,
	121, 935,
	122, 935,
	124, 935,
	126, 935,
	127, 935,
	129, 935,
	130, 935,
	131, 935,
	132, 935,
	133, 935,
	134, 935,
	135, 935,
	136, 935,
	137, 935,
	138, 935,
	139, 935,
	140, 935,
	141, 935,
	143, 935,
	149, 935,
	150, 935,
	151, 935,
	152, 935,
	153, 935,
	154, 935,
	156, 935,
	158, 935,
	162, 935,
	163, 935,
	165, 935,
	166, 935,
	168, 935,
	169, 935,
	171, 935,
	172, 935,
	173, 935,
	174, 935,
	175, 935,
	176, 935,
	177, 935,
	178, 935,
	180, 935,
	181, 935,
	183, 935,
	184, 935,
	185, 935,
	186, 935,
	189, 935,
	190, 935,
	191, 935,
	192, 935,
	195, 935,
	196, 935,
	197, 935,
	198, 935,
	199, 935,
	200, 935,
	201, 935,
	202, 935,
	204, 935,
	206, 935,
	208, 935,
	210, 935,
	211, 935,
	212, 935,
	214, 935,
	215, 935,
	218, 935,
	219, 935,
	220, 935,
	221, 935,
	222, 935,
	224, 935,
	225, 935,
	227, 935,
	228, 935,
	230, 935,
	231, 935,
	234, 935,
	235, 935,
	238, 935,
	239, 935,
	240, 935,
	241, 935,
	243, 935,
	244, 935,
	245, 935,
	246, 935,
	247, 935,
	248, 935,
	249, 935,
	250, 935,
	251, 935,
	252, 935,
	254, 935,
	255, 935,
	256, 935,
	257, 935,
	258, 935,
	260, 935,
	262, 935,
	264, 935,
	266, 935,
	267, 935,
	268, 935,
	269, 935,
	270, 935,
	272, 935,
	273, 935,
	274, 935,
	277, 935,
	278, 935,
	279, 935,
	282, 935,
	283, 935,
	284, 935,
	286, 935,
	288, 935,
	289, 935,
	290, 935,
	291, 935,
	292, 935,
	293, 935,
	294, 935,
	295, 935,
	296, 935,
	297, 935,
	299, 935,
	300, 935,
	301, 935,
	302, 935,
	303, 935,
	304, 935,
	305, 935,
	307, 935,
	309, 935,
	310, 935,
	311, 935,
	312, 935,
	313, 935,
	314, 935,
	315, 935,
	316, 935,
	317, 935,
	318, 935,
	320, 935,
	321, 935,
	322, 935,
	323, 935,
	324, 935,
	326, 935,
	327, 935,
	328, 935,
	329, 935,
	330, 935,
	331, 935,
	332, 935,
	333, 935,
	335, 935,
	337, 935,
	338, 935,
	339, 935,
	340, 935,
	341, 935,
	342, 935,
	344, 935,
	345, 935,
	346, 935,
	347, 935,
	348, 935,
	349, 935,
	350, 935,
	351, 935,
	353, 935,
	354, 935,
	355, 935,
	356, 935,
	357, 935,
	358, 935,
	359, 935,
	360, 935,
	361, 935,
	362, 935,
	364, 935,
	365, 935,
	366, 935,
	367, 935,
	368, 935,
	370, 935,
	371, 935,
	372, 935,
	373, 935,
	374, 935,
	376, 935,
	377, 935,
	378, 935,
	379, 935,
	380, 935,
	381, 935,
	382, 935,
	383, 935,
	384, 935,
	385, 935,
	386, 935,
	387, 935,
	389, 935,
	390, 935,
	391, 935,
	393, 935,
	394, 935,
	395, 935,
	396, 935,
	397, 935,
	398, 935,
	399, 935,
	401, 935,
	402, 935,
	403, 935,
	404, 935,
	405, 935,
	407, 935,
	409, 935,
	410, 935,
	411, 935,
	412, 935,
	413, 935,
	415, 935,
	416, 935,
	417, 935,
	419, 935,
	420, 935,
	423, 935,
	424, 935,
	425, 935,
	426, 935,
	427, 935,
	428, 935,
	429, 935,
	431, 935,
	433, 935,
	434, 935,
	435, 935,
	436, 935,
	437, 935,
	438, 935,
	439, 935,
	441, 935,
	442, 935,
	443, 935,
	448, 935,
	449, 935,
	450, 935,
	451, 935,
	452, 935,
	453, 935,
	-2, 0,
	-1, 760,
	311, 642,
	362, 642,
	-2, 0,
	-1, 761,
	311, 641,
	362, 641,
	-2, 589,
	-1, 765,
	1, 671,
	475, 671,
	477, 671,
	479, 671,
	-2, 0,
	-1, 766,
	1, 713,
	157, 713,
	475, 713,
	477, 713,
	479, 713,
	-2, 0,
	-1, 774,
	1, 645,
	475, 645,
	477, 645,
	479, 645,
	-2, 0,
	-1, 777,
	1, 671,
	475, 671,
	477, 671,
	479, 671,
	-2, 0,
	-1, 778,
	1, 673,
	475, 673,
	477, 673,
	479, 673,
	-2, 0,
	-1, 779,
	1, 676,
	475, 676,
	477, 676,
	479, 676,
	-2, 0,
	-1, 784,
	1, 692,
	475, 692,
	477, 692,
	479, 692,
	-2, 0,
	-1, 785,
	1, 694,
	475, 694,
	477, 694,
	479, 694,
	-2, 0,
	-1, 828,
	144, 1121,
	157, 1121,
	233, 1121,
	271, 1121,
	-2, 1062,
	-1, 841,
	144, 1120,
	157, 1120,
	233, 1120,
	271, 1120,
	-2, 1059,
	-1, 865,
	478, 1767,
	-2, 511,
	-1, 893,
	476, 1759,
	-2, 1750,
	-1, 899,
	5, 1261,
	-2, 1801,
	-1, 900,
	5, 1262,
	-2, 1807,
	-1, 901,
	5, 1263,
	-2, 1806,
	-1, 902,
	5, 1264,
	-2, 2030,
	-1, 903,
	5, 1265,
	-2, 1920,
	-1, 904,
	5, 1266,
	-2, 1995,
	-1, 905,
	5, 1267,
	-2, 1997,
	-1, 906,
	5, 1268,
	-2, 2010,
	-1, 907,
	5, 1269,
	-2, 1998,
	-1, 908,
	5, 1270,
	-2, 1999,
	-1, 909,
	5, 1271,
	-2, 1800,
	-1, 910,
	5, 1272,
	-2, 2047,
	-1, 911,
	5, 1273,
	-2, 1880,
	-1, 912,
	5, 1274,
	-2, 1932,
	-1, 913,
	5, 1275,
	-2, 1934,
	-1, 914,
	5, 1276,
	-2, 1884,
	-1, 915,
	5, 1277,
	476, 1777,
	-2, 1768,
	-1, 921,
	476, 1778,
	-2, 1769,
	-1, 923,
	5, 1281,
	-2, 2080,
	-1, 924,
	5, 1282,
	-2, 2081,
	-1, 925,
	5, 1283,
	-2, 1883,
	-1, 926,
	5, 1284,
	-2, 2093,
	-1, 927,
	5, 1285,
	-2, 1885,
	-1, 928,
	5, 1286,
	-2, 1886,
	-1, 929,
	5, 1287,
	-2, 1887,
	-1, 930,
	5, 1288,
	-2, 2062,
	-1, 931,
	5, 1289,
	-2, 2091,
	-1, 932,
	5, 1290,
	-2, 1862,
	-1, 933,
	5, 1291,
	-2, 1863,
	-1, 934,
	5, 1305,
	-2, 2074,
	-1, 936,
	5, 1280,
	-2, 2070,
	-1, 937,
	5, 1280,
	-2, 2069,
	-1, 938,
	5, 1280,
	-2, 2086,
	-1, 939,
	5, 1297,
	-2, 2064,
	-1, 940,
	5, 1298,
	-2, 1802,
	-1, 941,
	5, 1308,
	-2, 2063,
	-1, 942,
	5, 1310,
	-2, 2102,
	-1, 944,
	5, 1321,
	-2, 1835,
	-1, 945,
	5, 1332,
	-2, 2095,
	-1, 946,
	5, 1324,
	-2, 2096,
	-1, 947,
	5, 1332,
	-2, 2097,
	-1, 948,
	5, 1328,
	-2, 2098,
	-1, 949,
	5, 1249,
	-2, 1893,
	-1, 950,
	5, 1250,
	-2, 1894,
	-1, 951,
	478, 1765,
	-2, 1749,
	-1, 952,
	476, 2123,
	-2, 1766,
	-1, 974,
	5, 1316,
	-2, 2021,
	-1, 992,
	5, 1315,
	-2, 2103,
	-1, 1002,
	5, 1317,
	442, 1317,
	-2, 2065,
	-1, 1003,
	5, 1318,
	442, 1318,
	-2, 2066,
	-1, 1040,
	476, 1777,
	-2, 1768,
	-1, 1068,
	160, 2033,
	406, 2033,
	459, 2033,
	478, 2033,
	-2, 0,
	-1, 1071,
	1, 489,
	479, 489,
	-2, 997,
	-1, 1192,
	326, 1745,
	469, 1745,
	-2, 1743,
	-1, 1204,
	480, 1745,
	-2, 1746,
	-1, 1205,
	1, 914,
	475, 914,
	477, 914,
	479, 914,
	-2, 1108,
	-1, 1253,
	317, 752,
	441, 752,
	-2, 248,
	-1, 1276,
	1, 914,
	475, 914,
	477, 914,
	479, 914,
	-2, 1108,
	-1, 1282,
	4, 935,
	21, 935,
	22, 935,
	23, 935,
	24, 935,
	25, 935,
	27, 935,
	33, 935,
	38, 935,
	39, 935,
	40, 935,
	41, 935,
	42, 935,
	43, 935,
	44, 935,
	45, 935,
	46, 935,
	47, 935,
	48, 935,
	49, 935,
	50, 935,
	52, 935,
	53, 935,
	54, 935,
	55, 935,
	56, 935,
	57, 935,
	58, 935,
	61, 935,
	62, 935,
	63, 935,
	64, 935,
	66, 935,
	67, 935,
	68, 935,
	72, 935,
	73, 935,
	74, 935,
	75, 935,
	76, 935,
	77, 935,
	80, 935,
	81, 935,
	82, 935,
	83, 935,
	85, 935,
	87, 935,
	88, 935,
	89, 935,
	91, 935,
	93, 935,
	94, 935,
	102, 935,
	103, 935,
	104, 935,
	105, 935,
	106, 935,
	107, 935,
	108, 935,
	109, 935,
	111, 935,
	112, 935,
	114, 935,
	115, 935,
	117, 935,
	120, 935,
	121, 935,
	122, 935,
	124, 935,
	126, 935,
	127, 935,
	129, 935,
	130, 935,
	131, 935,
	132, 935,
	133, 935,
	134, 935,
	135, 935,
	136, 935,
	137, 935,
	138, 935,
	139, 935,
	140, 935,
	141, 935,
	149, 935,
	150, 935,
	151, 935,
	152, 935,
	153, 935,
	154, 935,
	156, 935,
	158, 935,
	162, 935,
	163, 935,
	165, 935,
	166, 935,
	168, 935,
	169, 935,
	171, 935,
	172, 935,
	173, 935,
	174, 935,
	175, 935,
	176, 935,
	177, 935,
	178, 935,
	180, 935,
	181, 935,
	183, 935,
	184, 935,
	185, 935,
	186, 935,
	190, 935,
	191, 935,
	192, 935,
	195, 935,
	196, 935,
	197, 935,
	198, 935,
	199, 935,
	200, 935,
	201, 935,
	202, 935,
	204, 935,
	206, 935,
	208, 935,
	210, 935,
	211, 935,
	212, 935,
	214, 935,
	215, 935,
	218, 935,
	219, 935,
	220, 935,
	221, 935,
	222, 935,
	224, 935,
	225, 935,
	227, 935,
	228, 935,
	230, 935,
	231, 935,
	234, 935,
	235, 935,
	238, 935,
	239, 935,
	240, 935,
	241, 935,
	243, 935,
	244, 935,
	245, 935,
	246, 935,
	247, 935,
	248, 935,
	249, 935,
	250, 935,
	251, 935,
	252, 935,
	254, 935,
	255, 935,
	256, 935,
	257, 935,
	258, 935,
	260, 935,
	264, 935,
	266, 935,
	267, 935,
	268, 935,
	269, 935,
	270, 935,
	272, 935,
	273, 935,
	274, 935,
	275, 935,
	277, 935,
	278, 935,
	279, 935,
	282, 935,
	283, 935,
	284, 935,
	286, 935,
	288, 935,
	289, 935,
	290, 935,
	291, 935,
	292, 935,
	293, 935,
	294, 935,
	295, 935,
	296, 935,
	297, 935,
	299, 935,
	300, 935,
	301, 935,
	302, 935,
	303, 935,
	304, 935,
	305, 935,
	307, 935,
	309, 935,
	310, 935,
	311, 935,
	312, 935,
	313, 935,
	314, 935,
	315, 935,
	316, 935,
	317, 935,
	318, 935,
	320, 935,
	321, 935,
	322, 935,
	323, 935,
	324, 935,
	326, 935,
	327, 935,
	328, 935,
	329, 935,
	330, 935,
	331, 935,
	332, 935,
	333, 935,
	335, 935,
	337, 935,
	338, 935,
	339, 935,
	340, 935,
	341, 935,
	342, 935,
	344, 935,
	345, 935,
	346, 935,
	347, 935,
	348, 935,
	349, 935,
	350, 935,
	351, 935,
	353, 935,
	354, 935,
	355, 935,
	356, 935,
	357, 935,
	358, 935,
	359, 935,
	360, 935,
	361, 935,
	362, 935,
	364, 935,
	365, 935,
	366, 935,
	367, 935,
	368, 935,
	370, 935,
	371, 935,
	372, 935,
	373, 935,
	374, 935,
	376, 935,
	377, 935,
	378, 935,
	379, 935,
	380, 935,
	381, 935,
	382, 935,
	383, 935,
	384, 935,
	385, 935,
	386, 935,
	387, 935,
	389, 935,
	390, 935,
	391, 935,
	393, 935,
	394, 935,
	395, 935,
	396, 935,
	397, 935,
	398, 935,
	399, 935,
	401, 935,
	402, 935,
	403, 935,
	404, 935,
	405, 935,
	407, 935,
	409, 935,
	410, 935,
	411, 935,
	412, 935,
	413, 935,
	415, 935,
	416, 935,
	417, 935,
	419, 935,
	420, 935,
	423, 935,
	424, 935,
	425, 935,
	426, 935,
	427, 935,
	428, 935,
	429, 935,
	431, 935,
	433, 935,
	434, 935,
	435, 935,
	436, 935,
	437, 935,
	438, 935,
	439, 935,
	441, 935,
	442, 935,
	443, 935,
	448, 935,
	449, 935,
	450, 935,
	451, 935,
	452, 935,
	453, 935,
	-2, 0,
	-1, 1344,
	1, 364,
	475, 364,
	477, 364,
	479, 364,
	-2, 1082,
	-1, 1347,
	4, 2101,
	11, 2101,
	12, 2101,
	14, 2101,
	15, 2101,
	16, 2101,
	17, 2101,
	18, 2101,
	19, 2101,
	21, 2101,
	22, 2101,
	23, 2101,
	24, 2101,
	25, 2101,
	27, 2101,
	30, 2101,
	31, 2101,
	33, 2101,
	35, 2101,
	38, 2101,
	39, 2101,
	40, 2101,
	41, 2101,
	42, 2101,
	43, 2101,
	44, 2101,
	45, 2101,
	46, 2101,
	47, 2101,
	48, 2101,
	49, 2101,
	50, 2101,
	52, 2101,
	53, 2101,
	54, 2101,
	55, 2101,
	56, 2101,
	57, 2101,
	58, 2101,
	61, 2101,
	62, 2101,
	63, 2101,
	64, 2101,
	66, 2101,
	67, 2101,
	68, 2101,
	69, 2101,
	72, 2101,
	73, 2101,
	74, 2101,
	75, 2101,
	76, 2101,
	77, 2101,
	78, 2101,
	80, 2101,
	81, 2101,
	82, 2101,
	83, 2101,
	85, 2101,
	86, 2101,
	87, 2101,
	88, 2101,
	89, 2101,
	91, 2101,
	92, 2101,
	93, 2101,
	94, 2101,
	102, 2101,
	103, 2101,
	104, 2101,
	105, 2101,
	106, 2101,
	107, 2101,
	108, 2101,
	109, 2101,
	111, 2101,
	112, 2101,
	114, 2101,
	115, 2101,
	117, 2101,
	120, 2101,
	121, 2101,
	122, 2101,
	124, 2101,
	126, 2101,
	127, 2101,
	129, 2101,
	130, 2101,
	131, 2101,
	132, 2101,
	133, 2101,
	134, 2101,
	135, 2101,
	136, 2101,
	137, 2101,
	138, 2101,
	139, 2101,
	140, 2101,
	141, 2101,
	145, 2101,
	146, 2101,
	147, 2101,
	148, 2101,
	149, 2101,
	150, 2101,
	151, 2101,
	152, 2101,
	153, 2101,
	154, 2101,
	155, 2101,
	156, 2101,
	158, 2101,
	161, 2101,
	162, 2101,
	163, 2101,
	165, 2101,
	166, 2101,
	168, 2101,
	169, 2101,
	171, 2101,
	172, 2101,
	173, 2101,
	174, 2101,
	175, 2101,
	176, 2101,
	177, 2101,
	178, 2101,
	179, 2101,
	180, 2101,
	181, 2101,
	182, 2101,
	183, 2101,
	184, 2101,
	185, 2101,
	186, 2101,
	187, 2101,
	188, 2101,
	190, 2101,
	191, 2101,
	192, 2101,
	194, 2101,
	195, 2101,
	196, 2101,
	197, 2101,
	198, 2101,
	199, 2101,
	200, 2101,
	201, 2101,
	202, 2101,
	204, 2101,
	206, 2101,
	207, 2101,
	208, 2101,
	209, 2101,
	210, 2101,
	211, 2101,
	212, 2101,
	213, 2101,
	214, 2101,
	215, 2101,
	216, 2101,
	217, 2101,
	218, 2101,
	219, 2101,
	220, 2101,
	221, 2101,
	222, 2101,
	224, 2101,
	225, 2101,
	227, 2101,
	228, 2101,
	229, 2101,
	230, 2101,
	231, 2101,
	232, 2101,
	234, 2101,
	235, 2101,
	238, 2101,
	239, 2101,
	240, 2101,
	241, 2101,
	242, 2101,
	243, 2101,
	244, 2101,
	245, 2101,
	246, 2101,
	247, 2101,
	248, 2101,
	249, 2101,
	250, 2101,
	251, 2101,
	252, 2101,
	253, 2101,
	254, 2101,
	255, 2101,
	256, 2101,
	257, 2101,
	258, 2101,
	260, 2101,
	263, 2101,
	264, 2101,
	266, 2101,
	267, 2101,
	268, 2101,
	269, 2101,
	270, 2101,
	272, 2101,
	273, 2101,
	274, 2101,
	277, 2101,
	278, 2101,
	279, 2101,
	280, 2101,
	282, 2101,
	283, 2101,
	284, 2101,
	286, 2101,
	288, 2101,
	289, 2101,
	290, 2101,
	291, 2101,
	292, 2101,
	293, 2101,
	294, 2101,
	295, 2101,
	296, 2101,
	297, 2101,
	299, 2101,
	300, 2101,
	301, 2101,
	302, 2101,
	303, 2101,
	304, 2101,
	305, 2101,
	307, 2101,
	309, 2101,
	310, 2101,
	311, 2101,
	312, 2101,
	313, 2101,
	314, 2101,
	315, 2101,
	316, 2101,
	317, 2101,
	318, 2101,
	320, 2101,
	321, 2101,
	322, 2101,
	323, 2101,
	324, 2101,
	325, 2101,
	326, 2101,
	327, 2101,
	328, 2101,
	329, 2101,
	330, 2101,
	331, 2101,
	332, 2101,
	333, 2101,
	335, 2101,
	336, 2101,
	337, 2101,
	338, 2101,
	339, 2101,
	340, 2101,
	341, 2101,
	342, 2101,
	343, 2101,
	344, 2101,
	345, 2101,
	346, 2101,
	347, 2101,
	348, 2101,
	349, 2101,
	350, 2101,
	351, 2101,
	353, 2101,
	354, 2101,
	355, 2101,
	356, 2101,
	357, 2101,
	358, 2101,
	359, 2101,
	360, 2101,
	361, 2101,
	362, 2101,
	364, 2101,
	365, 2101,
	366, 2101,
	367, 2101,
	368, 2101,
	369, 2101,
	370, 2101,
	371, 2101,
	372, 2101,
	373, 2101,
	374, 2101,
	376, 2101,
	377, 2101,
	378, 2101,
	379, 2101,
	380, 2101,
	381, 2101,
	382, 2101,
	383, 2101,
	384, 2101,
	385, 2101,
	386, 2101,
	387, 2101,
	389, 2101,
	390, 2101,
	391, 2101,
	393, 2101,
	394, 2101,
	395, 2101,
	396, 2101,
	397, 2101,
	398, 2101,
	399, 2101,
	401, 2101,
	402, 2101,
	403, 2101,
	404, 2101,
	405, 2101,
	407, 2101,
	409, 2101,
	410, 2101,
	411, 2101,
	412, 2101,
	413, 2101,
	415, 2101,
	416, 2101,
	417, 2101,
	419, 2101,
	420, 2101,
	423, 2101,
	424, 2101,
	425, 2101,
	426, 2101,
	427, 2101,
	428, 2101,
	429, 2101,
	431, 2101,
	433, 2101,
	434, 2101,
	435, 2101,
	436, 2101,
	437, 2101,
	438, 2101,
	439, 2101,
	441, 2101,
	442, 2101,
	443, 2101,
	448, 2101,
	449, 2101,
	450, 2101,
	451, 2101,
	452, 2101,
	453, 2101,
	454, 2101,
	455, 2101,
	457, 2101,
	458, 2101,
	459, 2101,
	460, 2101,
	461, 2101,
	462, 2101,
	464, 2101,
	465, 2101,
	466, 2101,
	467, 2101,
	468, 2101,
	469, 2101,
	470, 2101,
	471, 2101,
	472, 2101,
	474, 2101,
	477, 2101,
	478, 2101,
	480, 2101,
	481, 2101,
	-2, 0,
	-1, 1352,
	160, 2003,
	406, 2003,
	459, 2003,
	478, 2003,
	-2, 0,
	-1, 1384,
	311, 642,
	362, 642,
	-2, 0,
	-1, 1408,
	1, 637,
	475, 637,
	477, 637,
	479, 637,
	-2, 0,
	-1, 1409,
	1, 662,
	475, 662,
	477, 662,
	479, 662,
	-2, 0,
	-1, 1410,
	1, 644,
	475, 644,
	477, 644,
	479, 644,
	-2, 0,
	-1, 1412,
	1, 648,
	475, 648,
	477, 648,
	479, 648,
	-2, 0,
	-1, 1439,
	1, 2054,
	475, 2054,
	477, 2054,
	478, 2054,
	479, 2054,
	-2, 690,
	-1, 1440,
	1, 2000,
	475, 2000,
	477, 2000,
	478, 2000,
	479, 2000,
	-2, 691,
	-1, 1455,
	1, 992,
	479, 992,
	-2, 997,
	-1, 1458,
	144, 1120,
	157, 1120,
	233, 1120,
	271, 1120,
	-2, 1063,
	-1, 1552,
	128, 1084,
	144, 1084,
	157, 1084,
	203, 1084,
	233, 1084,
	271, 1084,
	281, 1084,
	421, 1084,
	-2, 1491,
	-1, 1609,
	477, 1639,
	-2, 0,
	-1, 1643,
	128, 1084,
	144, 1084,
	157, 1084,
	203, 1084,
	233, 1084,
	271, 1084,
	281, 1084,
	421, 1084,
	-2, 1199,
	-1, 1702,
	476, 1320,
	-2, 1308,
	-1, 1746,
	1, 491,
	479, 491,
	-2, 997,
	-1, 1948,
	1, 639,
	475, 639,
	477, 639,
	479, 639,
	-2, 0,
	-1, 1949,
	1, 664,
	475, 664,
	477, 664,
	479, 664,
	-2, 0,
	-1, 2021,
	341, 1145,
	342, 1145,
	-2, 1353,
	-1, 2052,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1371,
	-1, 2053,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1372,
	-1, 2054,
	86, 0,
	216, 0,
	217, 0,
	461, 0,
	462, 0,
	-2, 1373,
	-1, 2055,
	86, 0,
	216, 0,
	217, 0,
	461, 0,
	462, 0,
	-2, 1374,
	-1, 2056,
	86, 0,
	216, 0,
	217, 0,
	461, 0,
	462, 0,
	-2, 1375,
	-1, 2057,
	86, 0,
	216, 0,
	217, 0,
	461, 0,
	462, 0,
	-2, 1376,
	-1, 2058,
	86, 0,
	216, 0,
	217, 0,
	461, 0,
	462, 0,
	-2, 1377,
	-1, 2059,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1378,
	-1, 2071,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1390,
	-1, 2072,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1391,
	-1, 2073,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1392,
	-1, 2076,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1397,
	-1, 2082,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1401,
	-1, 2084,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1409,
	-1, 2085,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1410,
	-1, 2086,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1411,
	-1, 2087,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1412,
	-1, 2189,
	5, 1277,
	160, 1650,
	476, 1777,
	-2, 1768,
	-1, 2190,
	160, 1651,
	-2, 2058,
	-1, 2191,
	160, 1652,
	-2, 1917,
	-1, 2192,
	160, 1653,
	-2, 1836,
	-1, 2193,
	160, 1654,
	-2, 1873,
	-1, 2194,
	160, 1655,
	-2, 1915,
	-1, 2195,
	160, 1656,
	-2, 1994,
	-1, 2196,
	160, 1657,
	-2, 1474,
	-1, 2265,
	1, 1200,
	2, 1200,
	92, 1200,
	128, 1200,
	144, 1200,
	157, 1200,
	161, 1200,
	167, 1200,
	170, 1200,
	194, 1200,
	203, 1200,
	213, 1200,
	229, 1200,
	233, 1200,
	253, 1200,
	271, 1200,
	275, 1200,
	281, 1200,
	334, 1200,
	336, 1200,
	421, 1200,
	432, 1200,
	445, 1200,
	446, 1200,
	447, 1200,
	456, 1200,
	475, 1200,
	477, 1200,
	479, 1200,
	481, 1200,
	-2, 1199,
	-1, 2278,
	476, 1751,
	-2, 1763,
	-1, 2298,
	476, 1319,
	-2, 1309,
	-1, 2400,
	1, 914,
	475, 914,
	477, 914,
	479, 914,
	-2, 1108,
	-1, 2554,
	276, 1148,
	-2, 2092,
	-1, 2555,
	276, 1149,
	-2, 1983,
	-1, 2559,
	341, 1716,
	342, 1716,
	-2, 1472,
	-1, 2560,
	341, 1720,
	342, 1720,
	-2, 1473,
	-1, 2561,
	341, 1717,
	342, 1717,
	-2, 1472,
	-1, 2562,
	341, 1721,
	342, 1721,
	-2, 1473,
	-1, 2575,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1399,
	-1, 2576,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1403,
	-1, 2582,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1405,
	-1, 2771,
	210, 997,
	307, 997,
	315, 997,
	456, 997,
	-2, 488,
	-1, 2870,
	1, 914,
	475, 914,
	477, 914,
	479, 914,
	-2, 1108,
	-1, 2960,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1407,
	-1, 2967,
	207, 0,
	209, 0,
	263, 0,
	-2, 1426,
	-1, 3031,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1455,
	-1, 3032,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1456,
	-1, 3033,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1457,
	-1, 3037,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1461,
	-1, 3038,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1462,
	-1, 3039,
	14, 0,
	15, 0,
	16, 0,
	457, 0,
	458, 0,
	459, 0,
	-2, 1463,
	-1, 3083,
	476, 1752,
	-2, 1764,
	-1, 3176,
	478, 2206,
	-2, 1041,
	-1, 3227,
	207, 0,
	209, 0,
	263, 0,
	-2, 1427,
	-1, 3230,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1430,
	-1, 3231,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1432,
	-1, 3396,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1431,
	-1, 3397,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	179, 0,
	182, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 1433,
	-1, 3407,
	207, 0,
	-2, 1464,
	-1, 3523,
	207, 0,
	-2, 1465,
	-1, 3657,
	43, 0,
	179, 0,
	232, 0,
	369, 0,
	454, 0,
	460, 0,
	-2, 2061,
}

const sqlPrivate = 57344

const sqlLast = 85297

var sqlAct = [...]int{

	921, 3790, 3439, 3466, 3436, 3656, 3544, 3667, 3559, 2702,
	3623, 3756, 3633, 3668, 2856, 2454, 3620, 3332, 2221, 3104,
	3669, 3604, 1041, 1224, 3425, 3710, 3473, 2999, 2703, 3527,
	3655, 3356, 3361, 3385, 3210, 3168, 3482, 2885, 1208, 2039,
	3345, 217, 3289, 217, 217, 851, 217, 217, 217, 217,
	217, 2099, 2878, 217, 866, 2852, 1467, 3366, 217, 2788,
	1677, 1339, 2389, 614, 2880, 3411, 3149, 586, 1838, 3105,
	2952, 2443, 2330, 2568, 1096, 943, 2487, 842, 1901, 217,
	2426, 1912, 1649, 614, 2417, 1033, 2489, 2725, 2708, 1189,
	2745, 3262, 3209, 2717, 2440, 706, 2486, 1618, 2429, 2497,
	2455, 1834, 2478, 1806, 2706, 2480, 1833, 1922, 2438, 1392,
	2688, 861, 2332, 2258, 3054, 1797, 850, 145, 2143, 209,
	2257, 4, 1837, 1580, 2603, 3528, 1560, 2112, 2032, 2552,
	1194, 88, 1910, 1197, 1269, 2496, 2401, 2141, 1829, 2687,
	2427, 1084, 917, 2391, 1784, 1782, 1455, 2751, 2132, 2096,
	1678, 1822, 2020, 2003, 2036, 2239, 1772, 2001, 1619, 1210,
	1323, 1360, 2854, 1345, 2448, 1274, 3467, 615, 1333, 616,
	211, 1073, 1638, 1867, 2218, 2490, 34, 554, 2135, 210,
	217, 217, 893, 2322, 1027, 1575, 1628, 2260, 2247, 1006,
	2113, 1468, 2366, 1024, 145, 1543, 2185, 2002, 152, 700,
	2229, 1469, 610, 570, 1343, 1866, 153, 1359, 2004, 580,
	1023, 1635, 682, 1297, 1887, 657, 1796, 1221, 2025, 2367,
	878, 557, 39, 38, 1029, 565, 36, 27, 1004, 1474,
	540, 25, 23, 619, 562, 755, 772, 1454, 1279, 3068,
	2599, 3069, 622, 3808, 1903, 1903, 1903, 2238, 3794, 1081,
	3793, 3772, 2238, 619, 2238, 3303, 3770, 3766, 2704, 3693,
	3303, 1843, 622, 3694, 3691, 3689, 3686, 3683, 2238, 2238,
	3687, 3684, 2895, 3678, 3058, 3653, 1021, 1843, 841, 1843,
	3652, 2255, 846, 3651, 1843, 717, 847, 1915, 3648, 3647,
	846, 3642, 1915, 1915, 2894, 3303, 3640, 3618, 3598, 3592,
	3303, 3303, 2293, 2238, 2769, 2238, 3591, 2231, 1482, 1483,
	2238, 1515, 1516, 1517, 1525, 1526, 1527, 3586, 3585, 3579,
	3525, 3303, 3303, 1843, 2293, 3506, 3503, 1518, 1513, 1843,
	3303, 1058, 3475, 3599, 3456, 1485, 3476, 1242, 1843, 3455,
	1531, 3447, 3446, 1843, 829, 1843, 3303, 3417, 3509, 3398,
	3383, 1843, 828, 2293, 1915, 3374, 3330, 3321, 2612, 2909,
	2238, 2238, 877, 3058, 2613, 3302, 1484, 1007, 1007, 3303,
	1039, 2230, 3229, 3184, 3178, 1504, 2293, 2925, 2925, 1053,
	3147, 3078, 3076, 1501, 3148, 3079, 3077, 836, 3061, 1915,
	1482, 1483, 2238, 1515, 1516, 1517, 1525, 1526, 1527, 2983,
	2979, 2924, 2916, 1843, 2238, 2925, 2917, 2701, 2699, 1008,
	1513, 2238, 2238, 1081, 2698, 2652, 2631, 1485, 2238, 2238,
	2632, 2614, 1531, 2476, 2475, 2238, 2403, 1918, 1918, 2306,
	1915, 2292, 2289, 2238, 3322, 2293, 2287, 1010, 1930, 1011,
	2238, 2138, 1507, 1508, 1509, 1510, 2280, 2237, 1484, 1917,
	1843, 2238, 1490, 1918, 1054, 1843, 2917, 1504, 2380, 1801,
	2321, 2385, 1752, 1902, 2353, 1501, 1843, 185, 2909, 2660,
	2661, 2423, 2678, 2679, 2680, 2567, 1522, 1842, 2319, 1532,
	2660, 2661, 2238, 1614, 1512, 1514, 1220, 3133, 3225, 2274,
	2602, 2955, 2933, 1636, 1832, 2273, 2896, 2272, 2271, 2270,
	2660, 2661, 1394, 185, 1528, 1012, 1529, 187, 2139, 1009,
	1241, 835, 834, 1499, 1500, 2897, 1551, 833, 1904, 1904,
	1904, 832, 831, 827, 1507, 1508, 1509, 1510, 1411, 1520,
	1230, 826, 825, 2532, 1490, 1551, 2675, 824, 823, 1505,
	822, 1236, 849, 187, 821, 217, 820, 2675, 819, 818,
	817, 816, 186, 2660, 2661, 815, 814, 753, 1522, 752,
	1530, 1532, 179, 751, 750, 749, 1512, 1514, 2660, 2661,
	180, 748, 747, 217, 746, 745, 744, 1519, 743, 742,
	217, 741, 2140, 2137, 740, 739, 185, 738, 186, 185,
	737, 154, 736, 2894, 3278, 1499, 1500, 735, 734, 217,
	1099, 217, 217, 217, 1099, 217, 1213, 733, 732, 731,
	1213, 1520, 730, 2666, 729, 728, 727, 726, 217, 217,
	715, 1505, 1511, 3241, 2666, 1054, 187, 154, 2230, 187,
	1083, 714, 673, 634, 1088, 633, 625, 2660, 2661, 624,
	1506, 623, 217, 596, 2666, 592, 591, 590, 574, 207,
	1077, 206, 1054, 205, 204, 217, 203, 217, 202, 1213,
	217, 217, 201, 217, 77, 2681, 1523, 2468, 1902, 1996,
	200, 186, 199, 217, 186, 1482, 1483, 198, 197, 196,
	217, 179, 195, 194, 179, 2142, 1200, 185, 193, 180,
	192, 191, 180, 190, 217, 217, 217, 2666, 217, 1213,
	2676, 189, 1485, 1213, 1511, 188, 217, 1213, 217, 217,
	154, 2676, 2666, 154, 1235, 2435, 3072, 1213, 2926, 2748,
	2625, 1192, 1506, 217, 1204, 2608, 2407, 187, 1071, 2281,
	1639, 2676, 2264, 1484, 1780, 2176, 1925, 2162, 1662, 2160,
	2660, 2661, 1569, 1583, 1226, 1090, 1043, 3674, 1523, 1582,
	3654, 1521, 1481, 1562, 1496, 1497, 1503, 1524, 1502, 1498,
	1213, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1586, 1216, 186, 3566, 3251, 3518, 3512, 1583, 3250, 1280,
	1280, 2666, 179, 1582, 217, 1223, 2136, 1222, 619, 1066,
	180, 3510, 1092, 1284, 1186, 1191, 3435, 622, 217, 2676,
	3375, 2677, 3282, 3261, 1581, 1229, 1924, 1234, 3260, 1240,
	2302, 154, 2677, 3248, 3247, 3246, 3245, 3240, 1364, 1490,
	145, 145, 3237, 2660, 2661, 1348, 1350, 3236, 1336, 3153,
	3370, 3146, 2677, 1521, 847, 3092, 1496, 1497, 1503, 1524,
	1502, 1498, 3091, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 3090, 3082, 2920, 1327, 1330, 3131, 3051, 3050,
	3049, 2975, 1346, 2971, 2743, 2695, 2686, 2659, 2676, 1077,
	2656, 2655, 1077, 2653, 2638, 2637, 2636, 2633, 185, 185,
	185, 1097, 2630, 1300, 2666, 1198, 1563, 1421, 1561, 1358,
	2624, 185, 185, 2607, 2600, 121, 2477, 1363, 2451, 1281,
	2677, 2265, 2436, 1567, 2125, 1481, 1459, 1562, 1878, 1480,
	1020, 3803, 3765, 3764, 3703, 2672, 2673, 2674, 187, 187,
	187, 3701, 2671, 2669, 2670, 2662, 2663, 2664, 2665, 2667,
	2668, 187, 187, 2671, 2669, 2670, 2662, 2663, 2664, 2665,
	2667, 2668, 3692, 1042, 1848, 1846, 3001, 3558, 3555, 3552,
	3551, 1412, 3550, 1458, 2669, 2670, 2662, 2663, 2664, 2665,
	2667, 2668, 3543, 186, 186, 186, 1550, 2666, 3537, 2677,
	1413, 2676, 3507, 179, 179, 179, 186, 186, 3502, 3501,
	2102, 180, 180, 180, 3529, 2740, 179, 179, 3489, 3486,
	3452, 1453, 1369, 3431, 180, 180, 3409, 1554, 1385, 3393,
	3392, 1559, 154, 154, 154, 3380, 217, 3379, 3349, 2662,
	2663, 2664, 2665, 2667, 2668, 154, 154, 847, 1657, 3277,
	3259, 2671, 2669, 2670, 2662, 2663, 2664, 2665, 2667, 2668,
	1616, 3369, 3152, 217, 3199, 3196, 3122, 3121, 1625, 3108,
	1464, 1456, 2108, 217, 1099, 217, 217, 217, 217, 829,
	3107, 1463, 3064, 614, 217, 217, 2966, 828, 614, 217,
	1482, 1483, 1547, 2927, 217, 2434, 1664, 2910, 1672, 2872,
	1213, 1585, 2677, 1460, 1477, 1478, 2836, 1674, 2815, 2791,
	2790, 2764, 1741, 2763, 1744, 2700, 2629, 1485, 2628, 2623,
	2591, 1099, 2670, 2662, 2663, 2664, 2665, 2667, 2668, 1482,
	1483, 2416, 1639, 1587, 1584, 1576, 1573, 2300, 1749, 2299,
	2276, 2269, 1622, 1623, 2236, 2158, 1661, 1646, 1484, 1617,
	920, 1613, 1926, 1577, 1578, 1612, 1485, 1611, 1610, 1670,
	1778, 1743, 1704, 1488, 1489, 1491, 1492, 1077, 1609, 1608,
	185, 2791, 1607, 1606, 1605, 1482, 1483, 145, 1603, 1602,
	1601, 1600, 1599, 1598, 1597, 1596, 1595, 1484, 1594, 1593,
	847, 1592, 1591, 1590, 1589, 1513, 1564, 1204, 1548, 1546,
	1541, 1065, 1485, 1056, 1049, 1666, 3352, 3279, 2204, 3233,
	187, 3088, 3075, 3067, 2611, 2267, 3420, 2295, 3281, 1668,
	2660, 2661, 3087, 1007, 1563, 2761, 2662, 2663, 2664, 2665,
	2667, 2668, 1647, 1484, 1490, 1544, 1771, 1653, 3324, 1039,
	2175, 1039, 2161, 1644, 2159, 1746, 3762, 3755, 3553, 1213,
	1213, 217, 1087, 619, 1085, 186, 3513, 1099, 619, 1669,
	1801, 2881, 622, 2818, 1615, 179, 1637, 622, 1771, 3478,
	3477, 3511, 1771, 180, 3373, 1763, 1762, 1081, 3323, 1771,
	1773, 1641, 3070, 1656, 1655, 1673, 2912, 1654, 1652, 1790,
	1740, 2911, 1651, 1650, 2450, 217, 1482, 1483, 3483, 217,
	3434, 1583, 1384, 2635, 217, 1086, 1675, 1582, 1451, 3156,
	1839, 2664, 2665, 2667, 2668, 1758, 1513, 2371, 1081, 1490,
	1598, 1598, 217, 1485, 217, 2634, 217, 1078, 2573, 2355,
	217, 1774, 1769, 1764, 1082, 3120, 1747, 1072, 1036, 2858,
	1819, 2857, 1571, 1821, 217, 812, 1826, 1081, 1393, 1923,
	1422, 1512, 1514, 3474, 1484, 1665, 3679, 3666, 1394, 1835,
	1805, 3136, 3124, 2931, 217, 3412, 3791, 2704, 3003, 3675,
	2133, 2298, 1604, 2617, 1579, 2850, 919, 2138, 1875, 1879,
	1213, 1766, 1213, 217, 1213, 813, 1257, 217, 3688, 3685,
	2890, 3099, 1213, 1871, 3545, 1213, 217, 1830, 217, 217,
	3357, 1373, 1781, 3616, 1568, 3534, 1505, 2794, 1213, 1213,
	1213, 1840, 217, 1876, 1019, 3115, 1884, 2484, 1223, 217,
	1222, 619, 2447, 1874, 1079, 2843, 3727, 3676, 614, 217,
	622, 217, 1080, 217, 3726, 217, 1906, 217, 3578, 1908,
	1490, 2947, 2773, 3313, 2139, 1913, 1245, 1825, 1255, 1680,
	2307, 217, 1982, 3800, 217, 3465, 217, 855, 810, 3458,
	808, 2392, 1980, 3138, 806, 2325, 3135, 217, 1841, 804,
	795, 2325, 1512, 1514, 801, 1768, 3134, 669, 2323, 1944,
	3096, 1881, 1928, 1204, 2323, 845, 3095, 2622, 217, 2621,
	1759, 2620, 217, 2619, 2011, 1419, 2577, 1858, 2387, 1857,
	1087, 2379, 2378, 2358, 2288, 1785, 1767, 1506, 1420, 1786,
	3750, 847, 1929, 847, 1940, 1099, 2083, 1892, 2140, 2137,
	1256, 1457, 1219, 2775, 1798, 2154, 2153, 1505, 1934, 2041,
	2334, 2009, 1300, 1856, 1889, 1886, 1889, 2011, 1844, 1346,
	1890, 1346, 1894, 1895, 1078, 1078, 1486, 1487, 1488, 1489,
	1491, 1492, 1087, 1086, 1794, 2013, 1371, 670, 2444, 2000,
	844, 1995, 1046, 1290, 1035, 1289, 1288, 1311, 1287, 3391,
	2314, 2932, 876, 1081, 2009, 1799, 1800, 2357, 2817, 1990,
	2762, 1418, 1366, 3751, 1919, 798, 1920, 1994, 1704, 1704,
	1492, 2007, 1066, 1938, 3102, 1044, 2114, 2115, 619, 1931,
	1099, 1933, 3577, 1795, 1787, 1086, 1251, 622, 1264, 2394,
	2279, 2098, 2114, 2130, 2098, 2094, 1993, 1789, 3309, 3441,
	1430, 2142, 2346, 2550, 2337, 1807, 2393, 2395, 1506, 3759,
	1962, 1486, 1487, 1488, 1489, 1491, 1492, 2565, 846, 2092,
	1952, 1079, 1079, 2010, 3645, 217, 1811, 1657, 3672, 1080,
	1080, 2345, 2184, 1891, 2188, 2188, 2202, 2296, 2114, 2024,
	3111, 2222, 2224, 2037, 2038, 2398, 2228, 1099, 2938, 217,
	1947, 3753, 2142, 1791, 2937, 2375, 1955, 2106, 217, 2529,
	1047, 2668, 2107, 2104, 1367, 1275, 2010, 1999, 1386, 2012,
	217, 1997, 1808, 1099, 2133, 2368, 2369, 2005, 1998, 1554,
	1434, 1992, 2008, 829, 3774, 3325, 829, 829, 847, 2992,
	2277, 2028, 2887, 3443, 2029, 2030, 2557, 2558, 724, 847,
	2129, 1273, 2136, 847, 3739, 2151, 1948, 2368, 2369, 2252,
	2152, 2368, 2369, 2155, 3738, 2156, 2157, 3726, 1775, 1776,
	2286, 1408, 3715, 3215, 2564, 2008, 1462, 2088, 2244, 3214,
	2209, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 2089, 1450,
	1037, 1956, 2090, 1064, 1646, 667, 2095, 666, 2110, 3307,
	1417, 2336, 3390, 217, 1812, 1792, 1253, 1949, 843, 3673,
	2356, 1213, 1989, 3786, 2127, 1382, 3596, 2772, 672, 671,
	1081, 1081, 1409, 1394, 1792, 1394, 2040, 2829, 2266, 1903,
	3123, 552, 2823, 1818, 2399, 1801, 2324, 847, 2811, 1803,
	1275, 1099, 2142, 3546, 2243, 2774, 217, 3752, 699, 1749,
	1574, 2888, 2535, 145, 217, 547, 3757, 2839, 2290, 1792,
	2213, 1372, 1007, 2197, 2226, 217, 1813, 1814, 2251, 2805,
	2256, 2759, 1039, 2262, 2263, 1809, 3387, 2245, 217, 3341,
	1077, 2249, 2250, 2234, 2235, 3211, 1310, 3671, 1039, 1981,
	1644, 1785, 217, 1099, 3714, 1786, 802, 1213, 802, 1979,
	1482, 1483, 802, 217, 217, 1680, 1680, 803, 2989, 1810,
	2887, 2145, 802, 1045, 2804, 3403, 1585, 2335, 3735, 3628,
	1513, 3300, 2326, 3308, 3557, 1250, 217, 1485, 2807, 217,
	1540, 2627, 3112, 3758, 1991, 2248, 217, 2538, 1431, 3775,
	2325, 2091, 217, 1704, 2301, 2305, 3442, 1788, 2124, 2420,
	2093, 3297, 217, 2340, 217, 1801, 2809, 217, 1484, 2261,
	3594, 846, 3351, 217, 3205, 3760, 217, 2376, 217, 2360,
	217, 1577, 1578, 2388, 3084, 217, 1213, 1213, 790, 1213,
	2304, 3386, 2990, 2308, 217, 217, 1059, 217, 217, 3595,
	1787, 1213, 2579, 3216, 1954, 2097, 3298, 1192, 1815, 217,
	840, 2949, 1368, 1789, 2278, 799, 2548, 2808, 1785, 1396,
	3560, 1204, 1786, 2588, 3670, 217, 217, 217, 2361, 3725,
	217, 2329, 217, 2404, 2458, 217, 2080, 217, 1429, 217,
	2339, 2342, 3696, 2352, 1951, 1432, 725, 2586, 2472, 3697,
	3713, 2537, 3342, 2519, 1490, 2520, 1472, 2348, 3723, 2467,
	217, 217, 217, 217, 217, 217, 2105, 217, 2359, 1791,
	2498, 2534, 2384, 1816, 1946, 2370, 2372, 2373, 2374, 3574,
	1223, 2377, 2405, 619, 3488, 3166, 1512, 1514, 791, 1820,
	2483, 2874, 622, 2414, 2409, 2142, 2411, 3787, 217, 3388,
	1865, 1624, 1057, 1052, 145, 539, 217, 2500, 2517, 2473,
	2503, 2504, 2424, 1904, 2310, 2470, 3151, 1787, 1433, 2509,
	2510, 2511, 2442, 3040, 2502, 2453, 2312, 2505, 1627, 2506,
	1789, 3257, 2320, 2514, 2449, 1471, 2464, 2449, 2465, 548,
	2466, 1505, 2540, 2521, 2542, 2523, 1204, 2525, 1346, 1461,
	2536, 2460, 2474, 3212, 2027, 2583, 2516, 3293, 2313, 2485,
	1802, 3294, 2501, 2533, 1760, 2522, 1063, 2524, 2953, 2526,
	2584, 1792, 2078, 2311, 2589, 2081, 1792, 3780, 1471, 3449,
	1204, 1370, 1204, 790, 3448, 2341, 1791, 3429, 1381, 1383,
	3533, 1466, 3167, 549, 2543, 217, 2752, 1631, 2209, 3312,
	3098, 1631, 3296, 2580, 2778, 840, 3311, 2605, 2606, 1828,
	1540, 2875, 2609, 2869, 2786, 3299, 2727, 1036, 2610, 1036,
	2556, 2782, 2527, 2547, 1470, 2077, 2546, 2428, 1757, 1827,
	1634, 2418, 3695, 550, 1634, 551, 792, 1885, 1877, 2551,
	1680, 1870, 1506, 2024, 1852, 2017, 3561, 2988, 2950, 1629,
	3605, 1471, 1986, 2246, 1753, 2240, 2362, 3169, 2566, 1823,
	2545, 3362, 1472, 2601, 2415, 1632, 3041, 1470, 1313, 1632,
	3217, 3472, 3470, 3430, 3042, 2797, 2793, 2792, 2209, 2209,
	1799, 1800, 3258, 791, 2571, 1939, 2549, 3066, 1792, 1630,
	2716, 2715, 1397, 1410, 2285, 2284, 2728, 1755, 2283, 2282,
	2578, 844, 721, 1099, 847, 1472, 2422, 3437, 1824, 2697,
	3539, 2719, 1296, 1788, 2711, 2712, 1756, 3333, 3295, 2585,
	1282, 1783, 217, 713, 2242, 2713, 2921, 217, 2587, 2241,
	217, 1294, 3779, 217, 217, 1099, 1883, 1283, 2726, 217,
	1470, 3218, 723, 2402, 3732, 3468, 3608, 793, 2018, 3427,
	2616, 3540, 1099, 2733, 3613, 3602, 3263, 3310, 2730, 217,
	3055, 1448, 2079, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1633, 1446, 217, 2149, 1633, 1426, 3734, 1424,
	3690, 3428, 2757, 1407, 3554, 1405, 794, 3438, 2209, 2209,
	2209, 1403, 1401, 217, 217, 217, 3408, 2768, 3562, 217,
	2363, 2364, 217, 3256, 597, 2721, 2723, 1399, 2689, 2965,
	217, 217, 3609, 217, 217, 217, 838, 3541, 790, 2929,
	2846, 2770, 2742, 2654, 1391, 2747, 2590, 217, 217, 217,
	1788, 792, 2746, 2419, 1389, 2776, 217, 1292, 2729, 1704,
	840, 2386, 2722, 1035, 2354, 1035, 1077, 2731, 2303, 217,
	217, 1663, 2739, 2734, 2735, 1660, 2753, 2749, 1099, 2705,
	2692, 2693, 2694, 1449, 1361, 2779, 2780, 2148, 2718, 1213,
	2796, 2720, 1978, 2801, 2802, 2783, 1704, 2690, 1099, 626,
	2946, 839, 2795, 217, 1039, 2799, 217, 217, 2765, 2766,
	217, 2767, 2945, 1213, 217, 1466, 217, 3665, 2531, 1039,
	2530, 2754, 2755, 2756, 1213, 2508, 602, 2006, 2737, 2820,
	2738, 719, 720, 217, 2760, 1295, 217, 2732, 791, 1447,
	2837, 217, 2868, 217, 2771, 1988, 2883, 2822, 3329, 1039,
	217, 1445, 711, 712, 1293, 1425, 2777, 1423, 2830, 217,
	217, 1406, 793, 1404, 1959, 722, 3320, 1204, 1742, 1402,
	1400, 2787, 1588, 1365, 1213, 1213, 1268, 3601, 1790, 2855,
	3360, 2892, 217, 217, 2810, 1398, 217, 2816, 1874, 607,
	3286, 1627, 3165, 3161, 3118, 3116, 3097, 2844, 2825, 2845,
	2831, 794, 1390, 2867, 2710, 1790, 2859, 2828, 2469, 2832,
	2445, 604, 1388, 2498, 2433, 1291, 2812, 2813, 2425, 2863,
	2814, 2360, 2498, 217, 2840, 1099, 217, 217, 1099, 217,
	2838, 2847, 2412, 2900, 2901, 2902, 2736, 1830, 1669, 2905,
	2903, 2876, 2884, 1916, 1914, 1830, 1909, 1977, 2833, 2834,
	2866, 1907, 2835, 2750, 2826, 1905, 1896, 1849, 2827, 1037,
	1631, 1037, 217, 1847, 1836, 1831, 2882, 1817, 1804, 1793,
	3711, 2985, 847, 2879, 800, 2908, 2889, 1016, 1204, 1204,
	2923, 3495, 145, 145, 1475, 2898, 792, 2906, 2907, 2569,
	1671, 2919, 2904, 1634, 3727, 3636, 3382, 3377, 3376, 1099,
	2928, 1017, 2943, 2499, 1779, 1247, 2325, 3497, 627, 628,
	2944, 2344, 1629, 3177, 2325, 599, 1099, 1950, 217, 2323,
	1039, 1801, 2934, 1335, 2935, 1976, 2936, 2343, 1632, 1882,
	2891, 1443, 1444, 1975, 3635, 603, 1334, 1957, 3314, 3548,
	1387, 951, 2968, 3520, 605, 3264, 1680, 2365, 1204, 1482,
	1483, 2347, 1630, 1479, 3728, 553, 2941, 1704, 2940, 606,
	3721, 1750, 2383, 2381, 2349, 1482, 1483, 3600, 3570, 2570,
	3567, 2948, 2977, 2978, 2382, 601, 1476, 3160, 3150, 2750,
	2209, 2209, 213, 1680, 542, 543, 2951, 558, 542, 558,
	568, 573, 1485, 1018, 589, 837, 3081, 793, 2452, 595,
	805, 807, 809, 564, 213, 3052, 1335, 1484, 630, 629,
	1704, 1704, 2227, 1335, 598, 1745, 658, 2973, 1676, 2351,
	710, 698, 3754, 1484, 213, 2758, 1704, 1704, 217, 217,
	2984, 2350, 2995, 3778, 3569, 1633, 794, 2660, 2661, 1099,
	1036, 3005, 1551, 3000, 3004, 3071, 3238, 3006, 2991, 2993,
	2994, 3007, 608, 1482, 1483, 2144, 1036, 1704, 631, 632,
	217, 2317, 2318, 600, 2209, 2209, 2209, 2209, 2209, 2209,
	2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209,
	2209, 2209, 2209, 3093, 2209, 2037, 3010, 3017, 3044, 3009,
	2315, 2316, 1375, 3086, 3062, 3063, 2317, 2315, 1374, 2150,
	1428, 2037, 3020, 1427, 3234, 3019, 1198, 145, 217, 1097,
	3085, 2996, 3053, 1549, 3797, 3767, 3059, 3060, 3045, 3057,
	3740, 542, 542, 3530, 3125, 3462, 3421, 3419, 3348, 213,
	3280, 3202, 3048, 3195, 1213, 3183, 3163, 1213, 3145, 3144,
	3143, 3073, 3114, 3109, 2899, 3137, 2873, 2871, 2513, 3074,
	217, 2512, 2462, 2437, 2413, 2109, 1974, 1973, 217, 1972,
	1971, 1899, 1898, 1897, 1880, 217, 1860, 1859, 3117, 1855,
	3119, 1213, 1854, 3089, 1853, 3129, 1851, 1850, 1442, 1441,
	2981, 1322, 1321, 1320, 1319, 217, 1318, 215, 1039, 1039,
	2021, 3101, 1317, 3179, 1316, 1315, 1314, 2997, 3141, 1312,
	217, 217, 1213, 1213, 1213, 1307, 217, 217, 217, 3171,
	1306, 217, 217, 1305, 3174, 217, 217, 1304, 1213, 3157,
	1303, 1704, 2360, 217, 1099, 3130, 3132, 1263, 1262, 1261,
	1260, 1259, 1258, 1252, 3170, 3158, 1246, 1244, 1243, 1062,
	1061, 991, 898, 1751, 1680, 3142, 1099, 3159, 811, 797,
	3440, 3173, 1436, 75, 1254, 645, 70, 2458, 3113, 653,
	3615, 2803, 2390, 1958, 1395, 1960, 1035, 3162, 2741, 2268,
	3593, 3242, 2626, 3185, 3172, 3175, 3526, 1874, 3402, 3203,
	2147, 3232, 1035, 1570, 72, 3180, 886, 973, 2498, 3340,
	3181, 3339, 217, 3287, 3100, 2488, 2787, 1680, 1680, 3337,
	1342, 3192, 3193, 3187, 3194, 3186, 3198, 3336, 3220, 854,
	3200, 1102, 3191, 1680, 1680, 3201, 1761, 3228, 3219, 3197,
	3083, 892, 1777, 1770, 2297, 2187, 2205, 3213, 1684, 895,
	1681, 1683, 1704, 897, 896, 1682, 1572, 894, 1679, 3208,
	2421, 2456, 1299, 865, 1680, 776, 1765, 2103, 2131, 2615,
	1565, 867, 888, 2128, 1055, 217, 2724, 2886, 3080, 3368,
	2016, 1099, 661, 1099, 2657, 2134, 1048, 2210, 1039, 2203,
	2199, 2446, 1452, 1542, 2457, 1089, 870, 2101, 3269, 1556,
	2595, 2026, 2893, 2744, 2294, 3632, 217, 217, 217, 2031,
	1864, 1015, 1014, 1013, 3622, 3619, 3204, 2853, 1754, 217,
	2309, 1534, 2860, 882, 1203, 2709, 2922, 217, 1265, 217,
	594, 3547, 217, 217, 217, 1533, 2397, 3305, 3255, 2396,
	3536, 1076, 3306, 3272, 1099, 217, 217, 1075, 1074, 1099,
	2785, 3785, 3110, 184, 2563, 3317, 3318, 3265, 1473, 217,
	1465, 3266, 3267, 217, 181, 3270, 3271, 3268, 183, 182,
	3275, 3344, 217, 3127, 18, 2746, 1099, 217, 3283, 3284,
	3276, 1213, 1037, 17, 3285, 92, 37, 16, 3316, 120,
	3304, 119, 118, 117, 116, 115, 114, 109, 1037, 3315,
	113, 112, 111, 110, 108, 107, 1050, 106, 105, 104,
	217, 3331, 103, 102, 101, 100, 99, 98, 97, 3364,
	96, 95, 1099, 94, 93, 585, 3378, 582, 1680, 51,
	50, 3334, 91, 3381, 1060, 3328, 90, 15, 3358, 35,
	3367, 589, 13, 3327, 3363, 3335, 55, 56, 12, 3350,
	3353, 1039, 1099, 30, 3365, 31, 81, 80, 29, 1039,
	213, 14, 213, 213, 1195, 1874, 213, 3372, 28, 26,
	3355, 10, 1039, 8, 7, 32, 1648, 11, 150, 213,
	1225, 149, 148, 74, 147, 2592, 2593, 146, 73, 1099,
	24, 9, 142, 3414, 3481, 3155, 3389, 217, 69, 217,
	144, 1099, 217, 1249, 3394, 143, 141, 140, 139, 67,
	217, 138, 137, 68, 136, 22, 1267, 5, 1272, 54,
	6, 213, 213, 3399, 1195, 3384, 2930, 85, 86, 33,
	3410, 65, 64, 217, 213, 63, 21, 3343, 53, 1680,
	3424, 1309, 3415, 3416, 20, 1704, 174, 3354, 173, 172,
	171, 166, 217, 165, 170, 213, 213, 213, 3423, 1195,
	217, 168, 1036, 167, 3274, 3371, 3418, 589, 217, 213,
	213, 1099, 169, 3422, 1213, 3480, 3471, 1036, 2209, 3461,
	217, 164, 176, 3444, 710, 3445, 175, 178, 3485, 162,
	158, 157, 161, 163, 160, 2683, 2684, 2685, 159, 1704,
	3459, 217, 217, 3496, 3453, 3454, 156, 1036, 177, 3504,
	3505, 3469, 3492, 60, 3494, 3479, 135, 134, 133, 132,
	2209, 3516, 3517, 217, 131, 130, 129, 59, 3493, 19,
	3484, 2, 2855, 3490, 1, 3499, 0, 3491, 217, 3367,
	3498, 0, 0, 0, 0, 213, 0, 0, 0, 0,
	0, 0, 3463, 0, 2553, 0, 0, 0, 0, 213,
	0, 0, 3532, 0, 0, 0, 0, 3542, 0, 0,
	0, 0, 0, 0, 3451, 0, 3531, 0, 0, 0,
	3524, 0, 3549, 3515, 0, 0, 0, 217, 0, 0,
	3519, 3556, 865, 3500, 0, 1704, 865, 0, 0, 217,
	0, 3508, 1213, 1097, 0, 0, 0, 1184, 217, 0,
	0, 1184, 1213, 1213, 0, 0, 3571, 0, 1213, 3573,
	3584, 1204, 217, 0, 217, 0, 0, 3563, 3568, 0,
	2209, 0, 0, 3400, 2205, 2205, 0, 0, 0, 3576,
	3575, 0, 3564, 3565, 0, 3589, 3581, 3590, 217, 3597,
	0, 0, 0, 3588, 217, 0, 3610, 217, 0, 1099,
	3484, 0, 0, 0, 0, 0, 0, 3580, 217, 217,
	3400, 0, 3612, 3582, 3583, 3630, 0, 3611, 1036, 3587,
	0, 3625, 2040, 0, 3629, 217, 0, 0, 1035, 0,
	0, 0, 0, 0, 3637, 3621, 3624, 3649, 3617, 2209,
	2209, 0, 3650, 1035, 0, 0, 0, 0, 0, 3626,
	217, 0, 0, 0, 3641, 0, 0, 0, 3646, 3644,
	0, 0, 0, 0, 0, 3677, 1205, 0, 0, 0,
	1217, 0, 1680, 1035, 0, 3682, 3661, 3662, 3664, 3663,
	0, 3634, 0, 0, 2205, 2205, 2205, 3680, 0, 0,
	0, 3698, 0, 0, 0, 3702, 217, 3700, 0, 0,
	0, 0, 0, 3708, 0, 0, 0, 542, 0, 0,
	0, 3704, 0, 3712, 0, 3699, 217, 3707, 0, 1276,
	0, 0, 0, 0, 0, 0, 1680, 0, 213, 0,
	213, 0, 0, 3724, 213, 0, 0, 3718, 3719, 3722,
	3720, 0, 0, 217, 1225, 217, 1195, 213, 3733, 213,
	3730, 3731, 3729, 3743, 213, 1225, 558, 3737, 3742, 213,
	1225, 3748, 0, 3741, 3747, 589, 3736, 1354, 2458, 3621,
	3745, 3744, 3624, 3746, 0, 0, 3749, 1217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3763, 1626, 3761,
	0, 0, 0, 0, 3638, 0, 0, 3639, 0, 3771,
	3768, 0, 0, 3773, 0, 3705, 3706, 2961, 2962, 3709,
	3776, 3769, 0, 0, 0, 0, 0, 3634, 3782, 0,
	1376, 0, 1680, 3788, 1037, 3792, 0, 3789, 0, 0,
	1482, 1483, 0, 3783, 3784, 0, 0, 0, 0, 1037,
	3795, 0, 3796, 0, 1035, 0, 0, 3799, 0, 0,
	1513, 0, 3802, 0, 3805, 3804, 3807, 1485, 0, 0,
	3798, 0, 3809, 0, 3801, 0, 0, 0, 0, 1037,
	0, 0, 3806, 0, 0, 0, 0, 0, 0, 0,
	2040, 0, 0, 0, 0, 0, 1036, 1036, 1484, 0,
	0, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
	3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
	0, 3043, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 3300, 0, 0, 0, 0,
	0, 0, 61, 0, 853, 0, 0, 66, 0, 2660,
	2661, 0, 2678, 2679, 2680, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 3297, 213, 0, 0, 3290,
	213, 0, 66, 0, 1490, 213, 0, 0, 0, 0,
	71, 0, 0, 0, 3288, 0, 0, 0, 0, 0,
	3292, 1184, 0, 213, 0, 213, 0, 213, 0, 0,
	0, 542, 0, 0, 0, 71, 1512, 1514, 0, 0,
	3298, 0, 76, 0, 0, 1900, 2675, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 77, 84, 0,
	0, 0, 865, 0, 0, 213, 0, 76, 1184, 0,
	1037, 0, 0, 3291, 0, 0, 0, 87, 0, 0,
	0, 0, 77, 84, 589, 0, 2205, 2205, 710, 0,
	0, 1505, 0, 0, 0, 0, 1036, 213, 0, 1195,
	213, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 2666, 0, 0, 78, 0, 0, 213,
	213, 0, 213, 0, 213, 0, 213, 0, 213, 0,
	0, 0, 1035, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 1983, 0, 0, 1984, 0, 1985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205,
	2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 573,
	2205, 3293, 1506, 589, 0, 3294, 0, 2291, 0, 0,
	0, 0, 0, 0, 1184, 0, 0, 0, 0, 0,
	2676, 0, 0, 0, 0, 0, 79, 887, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3296, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 3299,
	151, 82, 0, 83, 0, 0, 0, 0, 0, 1036,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 0,
	0, 0, 185, 0, 0, 151, 82, 0, 83, 0,
	1036, 0, 0, 0, 705, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 89, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	1217, 2677, 187, 121, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 187, 1037, 1037,
	0, 0, 0, 0, 0, 0, 542, 0, 0, 155,
	0, 0, 3295, 0, 0, 0, 0, 186, 0, 0,
	122, 213, 0, 830, 0, 0, 0, 179, 0, 0,
	542, 0, 848, 0, 155, 180, 0, 213, 0, 542,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 179, 0, 0, 0, 154, 0, 0, 0,
	180, 0, 0, 853, 0, 1025, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 2672, 2673, 2674, 0, 0,
	0, 0, 2671, 2669, 2670, 2662, 2663, 2664, 2665, 2667,
	2668, 0, 0, 0, 1921, 0, 1227, 0, 1231, 0,
	1237, 0, 1217, 0, 0, 1932, 0, 0, 0, 0,
	128, 0, 1184, 0, 0, 0, 61, 0, 1941, 1942,
	1943, 0, 0, 0, 558, 0, 0, 61, 0, 0,
	62, 123, 0, 0, 0, 1035, 0, 0, 0, 0,
	0, 62, 0, 1035, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 1035, 66, 0, 0,
	0, 0, 41, 125, 0, 3407, 0, 2333, 1037, 0,
	0, 0, 0, 0, 0, 213, 0, 40, 0, 71,
	1357, 0, 0, 0, 0, 0, 213, 0, 1362, 0,
	71, 0, 0, 0, 0, 0, 0, 1184, 0, 213,
	43, 58, 0, 0, 0, 0, 44, 3432, 0, 0,
	0, 76, 0, 213, 126, 0, 0, 0, 0, 0,
	42, 87, 76, 0, 213, 2406, 77, 84, 0, 0,
	0, 0, 87, 701, 0, 0, 0, 77, 84, 0,
	0, 0, 0, 0, 1414, 0, 0, 1225, 0, 0,
	213, 0, 0, 45, 0, 0, 0, 213, 61, 704,
	703, 0, 0, 2441, 1184, 0, 0, 0, 0, 0,
	78, 0, 62, 2333, 0, 542, 0, 0, 2461, 0,
	0, 78, 0, 0, 213, 0, 0, 213, 66, 213,
	1184, 213, 0, 0, 0, 0, 1195, 0, 0, 0,
	0, 0, 0, 0, 0, 2481, 710, 0, 2333, 2333,
	0, 0, 0, 0, 0, 0, 0, 3523, 0, 0,
	213, 71, 0, 0, 0, 1535, 1536, 1537, 1538, 1539,
	0, 1037, 0, 0, 0, 0, 213, 1195, 213, 1037,
	0, 1225, 0, 1225, 0, 0, 1195, 0, 1195, 0,
	1195, 0, 1037, 76, 1553, 0, 0, 0, 0, 0,
	1566, 0, 0, 87, 0, 0, 0, 0, 77, 84,
	0, 213, 213, 213, 213, 1195, 213, 0, 213, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1184, 213,
	0, 0, 78, 0, 2205, 0, 0, 213, 49, 151,
	82, 0, 83, 0, 47, 0, 0, 0, 127, 0,
	151, 82, 0, 83, 48, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 52, 0, 0, 2205, 121, 0, 0,
	1184, 0, 0, 0, 705, 0, 0, 124, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 1620, 1620, 1620, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 89, 0, 89, 0,
	89, 0, 0, 0, 122, 0, 1225, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 186, 79, 0, 155,
	0, 0, 0, 0, 0, 0, 179, 186, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 179, 0, 0,
	0, 0, 0, 853, 0, 180, 0, 0, 0, 0,
	0, 151, 82, 0, 83, 154, 2205, 0, 3, 0,
	848, 89, 89, 0, 0, 0, 1351, 2400, 0, 0,
	89, 0, 0, 185, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 705, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 542, 0, 0, 0, 0, 542, 0,
	0, 542, 89, 0, 542, 542, 122, 0, 0, 0,
	542, 0, 0, 0, 0, 0, 2471, 0, 213, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	1225, 1217, 0, 0, 0, 0, 1482, 1483, 179, 0,
	0, 0, 0, 0, 0, 1225, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 1485, 2333, 2333, 213, 702, 0, 0,
	2333, 0, 0, 2789, 0, 0, 0, 0, 830, 0,
	0, 2333, 2789, 0, 2333, 2789, 2789, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 1545, 0, 213, 213,
	213, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 1552, 0, 0, 0, 1558, 0, 0,
	213, 1195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3223, 0, 2849, 0, 0, 2851, 2333, 0,
	0, 213, 0, 0, 0, 213, 0, 1272, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 2441, 0, 0, 1195, 0, 213,
	0, 0, 2333, 0, 542, 0, 0, 0, 0, 0,
	0, 2333, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 213, 1512, 1514, 0, 0, 0, 0, 0, 0,
	1184, 0, 0, 0, 0, 0, 0, 0, 1482, 1483,
	0, 0, 0, 213, 2441, 0, 0, 2441, 0, 0,
	0, 1499, 1500, 0, 0, 0, 0, 0, 1513, 0,
	0, 0, 1184, 0, 1640, 1485, 1643, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1184,
	0, 0, 0, 0, 2939, 0, 0, 1195, 213, 0,
	213, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 865, 0, 1504, 0, 0, 0, 2015,
	0, 2019, 0, 1501, 0, 0, 0, 865, 2033, 0,
	0, 0, 0, 213, 0, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	1511, 2082, 0, 2084, 2085, 2086, 2087, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 1506, 3002,
	0, 0, 1490, 2111, 0, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1553, 0, 0, 0,
	2126, 0, 0, 0, 0, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2164, 2167, 2170, 2173, 0, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 0, 1499, 1500, 0, 2201, 0, 2212, 2214,
	2219, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 213, 1505,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 542,
	542, 0, 0, 0, 0, 0, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 2841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 1225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1184, 2864, 0, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 2870, 0, 0, 0, 0, 0,
	0, 76, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 77, 84, 0, 589,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 848,
	0, 0, 0, 0, 2914, 2915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1184, 0, 0, 0,
	78, 213, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 1184, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2333, 213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2481, 2481, 0, 0, 0, 0, 710, 710, 2333,
	0, 0, 2441, 2441, 0, 0, 710, 2333, 0, 0,
	0, 0, 0, 0, 213, 2408, 0, 2410, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 830, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 1184, 0, 0, 0,
	1525, 1526, 1527, 3243, 0, 0, 0, 0, 0, 151,
	82, 0, 83, 0, 1513, 0, 0, 0, 0, 0,
	2100, 1485, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 185, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 1552, 0, 121, 0, 1552,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	213, 1504, 0, 0, 0, 2528, 1225, 0, 213, 1501,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 2333, 2333, 2333,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	1225, 1535, 1536, 0, 0, 0, 186, 1025, 2333, 0,
	2789, 0, 692, 1225, 1225, 213, 179, 0, 1507, 1508,
	1509, 1510, 0, 1643, 180, 0, 213, 213, 1490, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	2333, 0, 0, 0, 3346, 1349, 0, 0, 0, 0,
	0, 0, 1522, 213, 89, 1532, 2575, 2576, 213, 0,
	1512, 1514, 2582, 0, 0, 0, 0, 0, 0, 0,
	675, 1184, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 2596, 2597, 0, 0, 0, 0, 2126, 0, 1499,
	1500, 1225, 0, 1184, 3139, 0, 2604, 677, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 952, 0, 0,
	0, 0, 2618, 0, 697, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	678, 0, 0, 0, 0, 0, 0, 2639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3188, 3189, 3190, 0, 0, 0, 0, 680,
	214, 0, 681, 0, 89, 0, 0, 607, 2333, 0,
	2789, 0, 0, 3426, 0, 0, 0, 0, 0, 0,
	214, 213, 0, 0, 2219, 2219, 2219, 0, 1511, 696,
	0, 0, 0, 89, 0, 0, 0, 0, 1184, 1620,
	1184, 0, 0, 0, 589, 0, 1506, 2714, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 89, 0, 0,
	0, 0, 0, 3426, 0, 0, 0, 0, 0, 0,
	0, 2333, 1523, 0, 0, 0, 0, 0, 0, 3487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1225, 0, 0, 0, 89, 0, 0, 89, 0,
	0, 1184, 0, 0, 0, 0, 1184, 0, 0, 0,
	0, 0, 213, 213, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 853, 0,
	683, 0, 0, 1184, 3002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 3426,
	684, 0, 0, 0, 0, 2806, 0, 1521, 0, 0,
	0, 0, 0, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 606, 0, 1184,
	0, 0, 0, 89, 685, 0, 0, 686, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 3346, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 1184,
	213, 0, 0, 0, 0, 0, 0, 1482, 1483, 2789,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 688, 695, 1225, 0, 1225, 1518, 1513, 0, 689,
	0, 0, 0, 0, 1485, 0, 1184, 0, 0, 1531,
	0, 0, 691, 0, 0, 0, 0, 690, 1184, 3606,
	0, 0, 0, 0, 0, 1225, 0, 0, 213, 0,
	608, 0, 0, 0, 0, 1484, 0, 0, 0, 213,
	2333, 693, 0, 0, 1504, 0, 0, 0, 0, 2100,
	0, 865, 1501, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3002, 0, 0, 0, 0, 0, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 2333, 0, 0,
	0, 0, 0, 0, 0, 0, 2033, 0, 0, 0,
	0, 0, 2956, 2957, 0, 1522, 2960, 3426, 1532, 0,
	2963, 0, 0, 1512, 1514, 0, 0, 0, 0, 2967,
	0, 0, 0, 0, 0, 0, 0, 0, 2974, 0,
	0, 2714, 0, 1528, 1225, 1529, 2333, 0, 0, 0,
	0, 0, 1499, 1500, 0, 0, 2986, 0, 2660, 2661,
	0, 2678, 2679, 2680, 0, 0, 0, 0, 1520, 1025,
	0, 0, 0, 0, 0, 0, 0, 3224, 1505, 0,
	0, 0, 0, 0, 1025, 3011, 3012, 0, 3013, 3014,
	3015, 0, 0, 3016, 0, 0, 0, 3018, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 2675, 0, 0, 3046, 3047,
	0, 0, 0, 0, 0, 0, 2660, 2661, 0, 2678,
	2679, 2680, 0, 3056, 0, 0, 1184, 0, 0, 0,
	0, 865, 0, 0, 0, 2970, 0, 0, 3065, 0,
	0, 1511, 0, 0, 0, 0, 214, 1104, 214, 214,
	0, 1104, 214, 1104, 0, 0, 0, 1104, 0, 1506,
	0, 0, 0, 0, 0, 214, 0, 89, 89, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2666, 2675, 0, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 3094, 0, 0, 0, 0, 89,
	89, 0, 0, 89, 0, 0, 1104, 214, 214, 3103,
	3106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2681, 3126, 0, 0, 0, 0,
	0, 214, 214, 214, 0, 0, 1104, 0, 0, 0,
	1104, 0, 0, 0, 1104, 214, 214, 0, 0, 0,
	2666, 0, 0, 0, 1104, 1025, 0, 0, 848, 2676,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 0, 89, 89, 0, 0, 3249, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1620, 1104, 0, 0,
	0, 0, 2681, 0, 0, 3182, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 214, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 214, 0, 2676, 0, 0,
	0, 0, 0, 1518, 1513, 0, 1484, 0, 0, 0,
	0, 1485, 0, 0, 918, 1504, 1531, 0, 0, 0,
	2677, 0, 0, 0, 0, 0, 0, 3221, 3222, 0,
	0, 0, 0, 3226, 3227, 0, 0, 0, 3230, 3231,
	0, 0, 1484, 0, 0, 3235, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 212, 3239, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3244, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 620, 2677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 1512, 1514, 0, 0, 1490, 0,
	0, 0, 0, 0, 2672, 2673, 2674, 0, 0, 0,
	0, 2671, 2669, 2670, 2662, 2663, 2664, 2665, 2667, 2668,
	0, 0, 1522, 0, 0, 1532, 0, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 3106, 0, 0, 1505,
	1528, 0, 1529, 1025, 1025, 0, 0, 0, 0, 1499,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 1520, 0, 0, 0, 0,
	0, 1031, 2672, 2673, 2674, 1505, 0, 0, 0, 2671,
	2669, 2670, 2662, 2663, 2664, 2665, 2667, 2668, 0, 0,
	214, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 1104, 0, 214, 214, 214, 0, 0, 0, 0,
	214, 0, 208, 1519, 0, 214, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 3106, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 3395, 3396, 3397, 0, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 3405, 3406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1025, 0, 0, 0, 0, 0, 0,
	0, 0, 3106, 0, 0, 0, 0, 0, 0, 0,
	3450, 0, 0, 0, 0, 0, 0, 0, 0, 3457,
	0, 0, 853, 0, 0, 0, 0, 89, 3464, 0,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1104, 1104, 214, 0,
	0, 0, 0, 0, 1104, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 3106, 3106,
	2648, 0, 0, 0, 2649, 2660, 2661, 0, 2678, 2679,
	2680, 0, 214, 0, 0, 0, 214, 0, 0, 0,
	0, 214, 0, 0, 2969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 214, 0, 214, 0, 0, 0, 0, 0, 0,
	3535, 0, 0, 3538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 0, 0, 0, 0, 0,
	0, 3106, 2675, 0, 0, 0, 1025, 0, 0, 0,
	0, 214, 0, 1513, 1025, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 1104, 0, 1104,
	0, 1104, 0, 0, 0, 3106, 0, 0, 3106, 1104,
	0, 0, 1104, 214, 0, 0, 214, 0, 0, 0,
	0, 1484, 0, 0, 0, 1104, 1104, 1104, 0, 0,
	1504, 0, 0, 0, 0, 0, 214, 0, 1501, 0,
	0, 0, 0, 0, 0, 214, 214, 0, 214, 2666,
	214, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 212, 212, 0, 89, 212,
	0, 0, 853, 0, 0, 0, 0, 0, 89, 2964,
	0, 0, 620, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 1507, 1508, 1509,
	1510, 2681, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 3660, 3660, 3660, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 212, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 3681, 2676, 212, 0, 1512,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 212,
	212, 0, 0, 0, 0, 0, 0, 0, 1499, 1500,
	0, 0, 212, 212, 0, 0, 3660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 1482, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	3106, 1513, 3106, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 2677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1094, 0, 212, 0, 0, 0, 1202, 0, 1504, 0,
	0, 0, 0, 3660, 3777, 0, 1501, 1511, 0, 0,
	0, 3781, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 2100, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 2959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 2672, 2673, 2674, 0, 1326, 1326, 1326, 2671, 2669,
	2670, 2662, 2663, 2664, 2665, 2667, 2668, 0, 0, 1355,
	1356, 0, 0, 0, 0, 0, 0, 1512, 1514, 0,
	0, 2660, 2661, 0, 2678, 2679, 2680, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 0, 0, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 1104, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 1435, 0, 0, 2675, 0,
	0, 0, 214, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 0, 214,
	1104, 0, 0, 0, 1104, 89, 0, 0, 89, 0,
	214, 1642, 0, 1038, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 1642, 212, 0, 0, 1511, 214, 620, 0, 0,
	0, 0, 620, 214, 0, 2666, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 2682, 214, 0, 214, 0, 214, 0, 0,
	0, 0, 0, 1104, 1104, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2681, 1104, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 2676, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 214, 214,
	214, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 620, 0, 0, 2660, 2661,
	0, 2678, 2679, 2680, 1658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1667, 0, 1202,
	0, 0, 0, 2677, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 212, 1518, 1513, 0, 0, 212, 0,
	0, 0, 1485, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 2675, 212, 0, 212, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2672, 2673, 2674,
	212, 0, 2666, 212, 2671, 2669, 2670, 2662, 2663, 2664,
	2665, 2667, 2668, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 212, 0, 0, 0, 0, 0, 1490,
	0, 0, 620, 212, 0, 212, 0, 212, 0, 212,
	0, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 1522, 2681, 0, 1532, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 1104, 1529, 0, 0, 0, 0, 0, 2676,
	1499, 1500, 0, 0, 0, 0, 1862, 0, 0, 1104,
	1869, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 1301, 0, 1888, 0, 1888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 1100, 1202, 1214, 0, 0, 0,
	1214, 0, 0, 0, 214, 214, 214, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	2677, 0, 0, 0, 0, 0, 214, 1869, 0, 1511,
	1936, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 1506, 0, 1214,
	1953, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	1963, 0, 1965, 0, 1967, 0, 1969, 214, 1970, 0,
	1104, 214, 0, 1523, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 1214,
	0, 0, 0, 1214, 1038, 0, 0, 1214, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 0, 0,
	1038, 0, 0, 0, 0, 0, 214, 214, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 635,
	0, 1104, 1104, 0, 2672, 2673, 2674, 0, 0, 214,
	0, 2671, 2669, 2670, 2662, 2663, 2664, 2665, 2667, 2668,
	1214, 0, 636, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 3607, 1104, 0, 214, 1104, 214, 637, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 638, 0, 0, 639, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 641, 0, 0, 212,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 642, 0, 0, 643,
	664, 0, 0, 0, 607, 0, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 212, 0, 0,
	212, 646, 212, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 644, 0, 0,
	1101, 0, 0, 0, 1101, 0, 1215, 647, 0, 212,
	1215, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 648, 0, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 212, 212, 212, 212, 0, 212,
	1214, 212, 0, 0, 606, 0, 0, 0, 0, 1215,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 649, 0, 0,
	0, 1104, 212, 1202, 1104, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 654, 214, 0, 1215,
	0, 0, 0, 1215, 0, 214, 0, 1215, 650, 0,
	0, 667, 214, 666, 0, 0, 651, 1215, 1104, 0,
	1869, 0, 0, 0, 0, 0, 0, 2432, 0, 652,
	0, 0, 0, 0, 659, 0, 0, 0, 0, 668,
	0, 665, 0, 0, 0, 0, 0, 608, 0, 1104,
	1104, 1104, 0, 0, 2463, 0, 0, 1326, 0, 1326,
	1215, 1326, 0, 0, 0, 1104, 0, 0, 0, 0,
	214, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2507, 0, 0, 1104, 0, 0, 0, 0, 0, 1214,
	1214, 0, 0, 0, 0, 0, 2515, 1100, 2518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 2539, 1202, 2541, 1202, 0, 2544, 0, 0, 1518,
	1513, 0, 0, 1482, 1483, 0, 0, 1485, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 1326,
	1485, 0, 0, 0, 0, 0, 1038, 2572, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 1038, 0, 0, 0, 1501, 0, 0, 1104, 0,
	1104, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	1214, 1642, 1214, 0, 1214, 0, 0, 0, 0, 0,
	0, 0, 1214, 0, 0, 1214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1214, 1214,
	1214, 214, 0, 0, 1507, 1508, 1509, 1510, 0, 2958,
	0, 1104, 214, 214, 1490, 0, 1104, 0, 613, 212,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 1522, 214,
	0, 1532, 0, 1104, 214, 0, 1512, 1514, 1104, 0,
	0, 212, 212, 212, 0, 0, 0, 0, 0, 0,
	1642, 0, 0, 0, 0, 0, 1528, 0, 1529, 1512,
	1514, 0, 0, 212, 0, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 1104,
	0, 1520, 0, 0, 0, 0, 0, 0, 1499, 1500,
	0, 1505, 0, 0, 0, 1100, 0, 0, 0, 0,
	1215, 0, 0, 0, 212, 0, 0, 0, 212, 1104,
	0, 0, 1530, 0, 1505, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 212, 212, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 1511, 0, 212, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 2781, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 1523, 0,
	0, 212, 0, 212, 0, 0, 0, 0, 1104, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 2819, 2821,
	2432, 0, 0, 0, 0, 0, 0, 1100, 0, 1215,
	1215, 0, 0, 0, 0, 0, 212, 1101, 214, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2861, 0, 1521, 0, 2865, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 2122, 0, 0, 0,
	2123, 0, 0, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 0,
	1202, 1202, 0, 0, 0, 0, 214, 0, 0, 1104,
	0, 1214, 0, 0, 0, 0, 0, 0, 0, 1104,
	1104, 0, 0, 2918, 0, 1104, 0, 0, 0, 0,
	1215, 0, 1215, 0, 1215, 0, 0, 0, 0, 0,
	0, 1100, 1215, 0, 0, 1215, 0, 0, 0, 0,
	1038, 1038, 0, 0, 0, 0, 0, 0, 1215, 1215,
	1215, 0, 0, 0, 214, 0, 1104, 0, 2942, 0,
	1202, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 214, 1100, 0, 0, 0, 1214, 0, 1518,
	1513, 0, 0, 2954, 0, 0, 0, 1485, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1214, 1214, 0, 1214,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 1214, 0, 0, 212, 1485, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 1484, 0, 0, 0,
	1038, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 1522, 0,
	1101, 1532, 0, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 2581, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 1505, 1490, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1512, 1514, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3154, 0, 1038, 1511, 0, 0, 0, 0, 1505,
	0, 1038, 0, 0, 0, 0, 3164, 0, 0, 0,
	0, 0, 1506, 0, 1642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1215, 0, 0, 0, 0, 0, 0, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 1101, 0, 0, 3206, 0, 0, 0, 0, 212,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 212, 0, 0, 0,
	1506, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 1215, 0, 0,
	0, 0, 0, 1521, 0, 1100, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1100, 0, 0, 0, 0, 0, 0, 0,
	2972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 1215, 1215, 0, 1215,
	0, 0, 1485, 0, 0, 0, 0, 1531, 0, 0,
	0, 1215, 0, 0, 0, 0, 0, 0, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 0, 0, 1484, 212, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 1100, 0,
	1501, 0, 0, 0, 0, 3319, 0, 0, 0, 1214,
	0, 0, 0, 0, 0, 0, 2432, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2432, 1214, 0, 0, 0, 3359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 212, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 1214, 1214, 1532, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 1520, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 1530, 0, 0,
	0, 3433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 1100, 0, 0, 1511,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 212,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 3514, 1202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	3572, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 2651, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3614, 1215,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 3631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1215, 1214, 0, 3643, 1214, 0, 0,
	0, 0, 0, 0, 1215, 0, 0, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1513, 1214, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1215, 1215, 0, 0, 0, 0,
	0, 0, 1214, 1214, 1214, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 1214, 0,
	0, 0, 0, 0, 1100, 1501, 0, 0, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 1101, 1100, 0, 1101, 0,
	0, 1518, 1513, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	1484, 0, 0, 0, 1490, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 1101,
	0, 1532, 0, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	0, 1100, 0, 1100, 0, 0, 1507, 1508, 1509, 1510,
	0, 1520, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 1530, 1532, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 1100, 0, 0, 0, 1528, 1100,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 1100, 0, 0, 1101,
	0, 1214, 0, 1505, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 1100, 0, 0, 0, 0, 0, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 1215, 0, 0, 1215, 0, 0,
	1482, 1483, 0, 0, 1506, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 1100, 0, 0, 0, 0, 0, 1485, 0, 0,
	1523, 1215, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1484, 0,
	2650, 0, 1215, 1215, 1215, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 1215, 0,
	0, 0, 1482, 1483, 1101, 1515, 1516, 1517, 1525, 1526,
	1527, 1100, 0, 0, 1214, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 0, 1101, 0, 0, 1485,
	0, 0, 0, 0, 1531, 1521, 2574, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 1507, 1508, 1509, 1510, 0, 0,
	1484, 0, 2647, 0, 1490, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 1101, 1214, 1101, 0, 0, 1490, 0, 0, 0,
	0, 1505, 1214, 1214, 0, 0, 0, 0, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 1100,
	1529, 0, 0, 0, 1101, 0, 0, 1499, 1500, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 1511, 0, 1101, 0, 0, 0,
	0, 1215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1523, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 2646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1215, 1215, 0, 0, 0, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 1105, 227, 1106, 1107, 1108, 1101,
	1109, 493, 1110, 1111, 1112, 1113, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 1114,
	237, 238, 239, 240, 241, 242, 243, 1115, 1116, 244,
	498, 499, 500, 1117, 245, 246, 501, 1118, 1103, 1119,
	247, 248, 249, 250, 251, 252, 0, 1120, 254, 255,
	256, 253, 1121, 257, 0, 258, 259, 260, 1122, 261,
	975, 262, 263, 1123, 1124, 1126, 1125, 1127, 1128, 1129,
	264, 265, 266, 267, 268, 269, 502, 503, 1130, 270,
	271, 1131, 273, 272, 1132, 274, 1133, 1134, 275, 276,
	277, 1135, 278, 1136, 279, 280, 1137, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 505, 506,
	1138, 219, 1139, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 1140, 298, 1141, 1142, 976,
	299, 300, 1143, 301, 508, 1144, 509, 302, 1145, 303,
	304, 305, 306, 510, 511, 512, 362, 978, 307, 308,
	1146, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 1147, 977, 315, 513, 317, 316, 318, 319, 320,
	514, 1148, 515, 1149, 322, 979, 516, 980, 323, 324,
	325, 981, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 1150, 334, 333, 1151, 335, 517, 982, 336, 337,
	983, 1152, 338, 339, 1153, 1154, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 1155,
	221, 986, 360, 1156, 518, 361, 519, 363, 364, 1157,
	365, 366, 367, 1158, 1159, 369, 370, 371, 1160, 1161,
	372, 373, 520, 987, 374, 988, 521, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 1162, 383, 384, 522,
	385, 523, 386, 387, 1163, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 1164, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 1165, 411, 989, 412, 413, 414, 415, 525,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	1166, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 1167, 438, 418, 419, 439, 440, 990, 441, 442,
	526, 443, 444, 1168, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 527, 1169, 456, 457, 455,
	1170, 458, 459, 460, 461, 462, 286, 463, 1171, 464,
	528, 529, 530, 531, 1172, 471, 1173, 465, 466, 532,
	467, 533, 1174, 468, 469, 470, 0, 472, 473, 1175,
	1176, 474, 475, 476, 478, 479, 477, 481, 1177, 482,
	1178, 480, 483, 484, 485, 534, 535, 536, 1179, 487,
	486, 537, 1180, 1181, 1182, 1183, 488, 489, 538, 490,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 2253, 0, 0, 0, 0, 0, 0, 0,
	2254, 222, 223, 224, 225, 226, 1105, 227, 1106, 1107,
	1108, 0, 1109, 493, 1110, 1111, 1112, 1113, 228, 230,
	229, 231, 232, 494, 495, 233, 496, 236, 234, 235,
	497, 1114, 237, 238, 239, 240, 241, 242, 243, 1115,
	1116, 244, 498, 499, 500, 1117, 245, 246, 501, 1118,
	1103, 1119, 247, 248, 249, 250, 251, 252, 0, 1120,
	254, 255, 256, 253, 1121, 257, 0, 258, 259, 260,
	1122, 261, 975, 262, 263, 1123, 1124, 1126, 1125, 1127,
	1128, 1129, 264, 265, 266, 267, 268, 269, 502, 503,
	1130, 270, 271, 1131, 273, 272, 1132, 274, 1133, 1134,
	275, 276, 277, 1135, 278, 1136, 279, 280, 1137, 281,
	504, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	505, 506, 1138, 219, 1139, 0, 0, 0, 0, 292,
	293, 294, 507, 295, 296, 0, 297, 1140, 298, 1141,
	1142, 976, 299, 300, 1143, 301, 508, 1144, 509, 302,
	1145, 303, 304, 305, 306, 510, 511, 512, 362, 978,
	307, 308, 1146, 309, 310, 311, 313, 0, 0, 220,
	312, 314, 321, 1147, 977, 315, 513, 317, 316, 318,
	319, 320, 514, 1148, 515, 1149, 322, 979, 516, 980,
	323, 324, 325, 981, 326, 327, 0, 0, 328, 329,
	330, 331, 332, 1150, 334, 333, 1151, 335, 517, 982,
	336, 337, 983, 1152, 338, 339, 1153, 1154, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 353, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 1155, 221, 986, 360, 1156, 518, 361, 519, 363,
	364, 1157, 365, 366, 367, 1158, 1159, 369, 370, 371,
	1160, 1161, 372, 373, 520, 987, 374, 988, 521, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 1162, 383,
	384, 522, 385, 523, 386, 387, 1163, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 524, 396, 397, 1164,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 1165, 411, 989, 412, 413, 414,
	415, 525, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 1166, 433, 434, 428, 430, 431, 432, 429,
	435, 436, 437, 1167, 438, 418, 419, 439, 440, 990,
	441, 442, 526, 443, 444, 1168, 445, 446, 447, 448,
	420, 449, 453, 454, 450, 451, 452, 527, 1169, 456,
	457, 455, 1170, 458, 459, 460, 461, 462, 286, 463,
	1171, 464, 528, 529, 530, 531, 1172, 471, 1173, 465,
	466, 532, 467, 533, 1174, 468, 469, 470, 0, 472,
	473, 1175, 1176, 474, 475, 476, 478, 479, 477, 481,
	1177, 482, 1178, 480, 483, 484, 485, 534, 535, 536,
	1179, 487, 486, 537, 1180, 1181, 1182, 1183, 488, 489,
	538, 490, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 2980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2982, 222, 223, 224, 225, 226, 1105, 227, 1106, 1107,
	1108, 0, 1109, 493, 1110, 1111, 1112, 1113, 228, 230,
	229, 231, 232, 494, 495, 233, 496, 236, 234, 235,
	497, 1114, 237, 238, 239, 240, 241, 242, 243, 1115,
	1116, 244, 498, 499, 500, 1117, 245, 246, 501, 1118,
	1103, 1119, 247, 248, 249, 250, 251, 252, 0, 1120,
	254, 255, 256, 253, 1121, 257, 0, 258, 259, 260,
	1122, 261, 975, 262, 263, 1123, 1124, 1126, 1125, 1127,
	1128, 1129, 264, 265, 266, 267, 268, 269, 502, 503,
	1130, 270, 271, 1131, 273, 272, 1132, 274, 1133, 1134,
	275, 276, 277, 1135, 278, 1136, 279, 280, 1137, 281,
	504, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	505, 506, 1138, 219, 1139, 0, 0, 0, 0, 292,
	293, 294, 507, 295, 296, 0, 297, 1140, 298, 1141,
	1142, 976, 299, 300, 1143, 301, 508, 1144, 509, 302,
	1145, 303, 304, 305, 306, 510, 511, 512, 362, 978,
	307, 308, 1146, 309, 310, 311, 313, 0, 0, 220,
	312, 314, 321, 1147, 977, 315, 513, 317, 316, 318,
	319, 320, 514, 1148, 515, 1149, 322, 979, 516, 980,
	323, 324, 325, 981, 326, 327, 0, 0, 328, 329,
	330, 331, 332, 1150, 334, 333, 1151, 335, 517, 982,
	336, 337, 983, 1152, 338, 339, 1153, 1154, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 353, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 1155, 221, 986, 360, 1156, 518, 361, 519, 363,
	364, 1157, 365, 366, 367, 1158, 1159, 369, 370, 371,
	1160, 1161, 372, 373, 520, 987, 374, 988, 521, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 1162, 383,
	384, 522, 385, 523, 386, 387, 1163, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 524, 396, 397, 1164,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 1165, 411, 989, 412, 413, 414,
	415, 525, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 1166, 433, 434, 428, 430, 431, 432, 429,
	435, 436, 437, 1167, 438, 418, 419, 439, 440, 990,
	441, 442, 526, 443, 444, 1168, 445, 446, 447, 448,
	420, 449, 453, 454, 450, 451, 452, 527, 1169, 456,
	457, 455, 1170, 458, 459, 460, 461, 462, 286, 463,
	1171, 464, 528, 529, 530, 531, 1172, 471, 1173, 465,
	466, 532, 467, 533, 1174, 468, 469, 470, 0, 472,
	473, 1175, 1176, 474, 475, 476, 478, 479, 477, 481,
	1177, 482, 1178, 480, 483, 484, 485, 534, 535, 536,
	1179, 487, 486, 537, 1180, 1181, 1182, 1183, 488, 489,
	538, 490, 491, 492, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3273, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3401, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3326, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3207, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2998, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2848, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2146, 0, 222, 223, 224, 225, 226,
	1105, 227, 1106, 1107, 1108, 0, 1109, 493, 1110, 1111,
	1112, 1113, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 1114, 237, 238, 239, 240,
	241, 242, 243, 1115, 1116, 244, 498, 499, 500, 1117,
	245, 246, 501, 1118, 1103, 1119, 247, 248, 249, 250,
	251, 252, 0, 1120, 254, 255, 256, 253, 1121, 257,
	0, 258, 259, 260, 1122, 261, 975, 262, 263, 1123,
	1124, 1126, 1125, 1127, 1128, 1129, 264, 265, 266, 267,
	268, 269, 502, 503, 1130, 270, 271, 1131, 273, 272,
	1132, 274, 1133, 1134, 275, 276, 277, 1135, 278, 1136,
	279, 280, 1137, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 1138, 219, 1139, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 1140, 298, 1141, 1142, 976, 299, 300, 1143, 301,
	508, 1144, 509, 302, 1145, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 1146, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 1147, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 1148, 515, 1149,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 1150, 334, 333,
	1151, 335, 517, 982, 336, 337, 983, 1152, 338, 339,
	1153, 1154, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 1155, 221, 986, 360, 1156,
	518, 361, 519, 363, 364, 1157, 365, 366, 367, 1158,
	1159, 369, 370, 371, 1160, 1161, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 1162, 383, 384, 522, 385, 523, 386, 387,
	1163, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 1164, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 1165, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 1166, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 1167, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 1168,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 1169, 456, 457, 455, 1170, 458, 459, 460,
	461, 462, 286, 463, 1171, 464, 528, 529, 530, 531,
	1172, 471, 1173, 465, 466, 532, 467, 533, 1174, 468,
	469, 470, 0, 472, 473, 1175, 1176, 474, 475, 476,
	478, 479, 477, 481, 1177, 482, 1178, 480, 483, 484,
	485, 534, 535, 536, 1179, 487, 486, 537, 1180, 1181,
	1182, 1183, 488, 489, 538, 490, 491, 492, 1196, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1845, 0, 0, 0, 222, 223, 224,
	225, 226, 1105, 227, 1106, 1107, 1108, 0, 1109, 493,
	1110, 1111, 1112, 1113, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 1114, 237, 238,
	239, 240, 241, 242, 243, 1115, 1116, 244, 498, 499,
	500, 1117, 245, 246, 501, 1118, 1103, 1119, 247, 248,
	249, 250, 251, 252, 0, 1120, 254, 255, 256, 253,
	1121, 257, 0, 258, 259, 260, 1122, 261, 975, 262,
	263, 1123, 1124, 1126, 1125, 1127, 1128, 1129, 264, 265,
	266, 267, 268, 269, 502, 503, 1130, 270, 271, 1131,
	273, 272, 1132, 274, 1133, 1134, 275, 276, 277, 1135,
	278, 1136, 279, 280, 1137, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 1138, 219,
	1139, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 1140, 298, 1141, 1142, 976, 299, 300,
	1143, 301, 508, 1144, 509, 302, 1145, 303, 304, 305,
	306, 510, 511, 512, 362, 978, 307, 308, 1146, 309,
	310, 311, 313, 0, 0, 220, 312, 314, 321, 1147,
	977, 315, 513, 317, 316, 318, 319, 320, 514, 1148,
	515, 1149, 322, 979, 516, 980, 323, 324, 325, 981,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 1150,
	334, 333, 1151, 335, 517, 982, 336, 337, 983, 1152,
	338, 339, 1153, 1154, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 984,
	354, 355, 358, 359, 357, 985, 356, 1155, 221, 986,
	360, 1156, 518, 361, 519, 363, 364, 1157, 365, 366,
	367, 1158, 1159, 369, 370, 371, 1160, 1161, 372, 373,
	520, 987, 374, 988, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 1162, 383, 384, 522, 385, 523,
	386, 387, 1163, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 1164, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	1165, 411, 989, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 1166, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 1167,
	438, 418, 419, 439, 440, 990, 441, 442, 526, 443,
	444, 1168, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 1169, 456, 457, 455, 1170, 458,
	459, 460, 461, 462, 286, 463, 1171, 464, 528, 529,
	530, 531, 1172, 471, 1173, 465, 466, 532, 467, 533,
	1174, 468, 469, 470, 0, 472, 473, 1175, 1176, 474,
	475, 476, 478, 479, 477, 481, 1177, 482, 1178, 480,
	483, 484, 485, 534, 535, 536, 1179, 487, 486, 537,
	1180, 1181, 1182, 1183, 488, 489, 538, 490, 491, 492,
	1095, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 1105, 227, 1106, 1107, 1108, 0,
	1109, 493, 1110, 1111, 1112, 1113, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 1114,
	237, 238, 239, 240, 241, 242, 243, 1115, 1116, 244,
	498, 499, 500, 1117, 245, 246, 501, 1118, 1103, 1119,
	247, 248, 249, 250, 251, 252, 0, 1120, 254, 255,
	256, 253, 1121, 257, 0, 258, 259, 260, 1122, 261,
	975, 262, 263, 1123, 1124, 1126, 1125, 1127, 1128, 1129,
	264, 265, 266, 267, 268, 269, 502, 503, 1130, 270,
	271, 1131, 273, 272, 1132, 274, 1133, 1134, 275, 276,
	277, 1135, 278, 1136, 279, 280, 1137, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 505, 506,
	1138, 219, 1139, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 1140, 298, 1141, 1142, 976,
	299, 300, 1143, 301, 508, 1144, 509, 302, 1145, 303,
	304, 305, 306, 510, 511, 512, 362, 978, 307, 308,
	1146, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 1147, 977, 315, 513, 317, 316, 318, 319, 320,
	514, 1148, 515, 1149, 322, 979, 516, 980, 323, 324,
	325, 981, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 1150, 334, 333, 1151, 335, 517, 982, 336, 337,
	983, 1152, 338, 339, 1153, 1154, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 1155,
	221, 986, 360, 1156, 518, 361, 519, 363, 364, 1157,
	365, 366, 367, 1158, 1159, 369, 370, 371, 1160, 1161,
	372, 373, 520, 987, 374, 988, 521, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 1162, 383, 384, 522,
	385, 523, 386, 387, 1163, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 1164, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 1165, 411, 989, 412, 413, 414, 415, 525,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	1166, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 1167, 438, 418, 419, 439, 440, 990, 441, 442,
	526, 443, 444, 1168, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 527, 1169, 456, 457, 455,
	1170, 458, 459, 460, 461, 462, 286, 463, 1171, 464,
	528, 529, 530, 531, 1172, 471, 1173, 465, 466, 532,
	467, 533, 1174, 468, 469, 470, 0, 472, 473, 1175,
	1176, 474, 475, 476, 478, 479, 477, 481, 1177, 482,
	1178, 480, 483, 484, 485, 534, 535, 536, 1179, 487,
	486, 537, 1180, 1181, 1182, 1183, 488, 489, 538, 490,
	491, 492, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 1105, 227, 1106, 1107, 1108, 0,
	1109, 493, 1110, 1111, 1112, 1113, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 1114,
	237, 238, 239, 240, 241, 242, 243, 1115, 1116, 244,
	498, 499, 500, 1117, 245, 246, 501, 1118, 1103, 1119,
	247, 248, 249, 250, 251, 252, 0, 1120, 254, 255,
	256, 253, 1121, 257, 0, 258, 259, 260, 1122, 261,
	975, 262, 263, 1123, 1124, 1126, 1125, 1127, 1128, 1129,
	264, 265, 266, 267, 268, 269, 502, 503, 1130, 270,
	271, 1131, 273, 272, 1132, 274, 1133, 1134, 275, 276,
	277, 1135, 278, 1136, 279, 280, 1137, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 505, 506,
	1138, 219, 1139, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 1140, 298, 1141, 1142, 976,
	299, 300, 1143, 301, 508, 1144, 509, 302, 1145, 303,
	304, 305, 306, 510, 511, 512, 362, 978, 307, 308,
	1146, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 1147, 977, 315, 513, 317, 316, 318, 319, 320,
	514, 1148, 515, 1149, 322, 979, 516, 980, 323, 324,
	325, 981, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 1150, 334, 333, 1151, 335, 517, 982, 336, 337,
	983, 1152, 338, 339, 1153, 1154, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 1155,
	221, 986, 360, 1156, 518, 361, 519, 363, 364, 1157,
	365, 366, 367, 1158, 1159, 369, 370, 371, 1160, 1161,
	372, 373, 520, 987, 374, 988, 521, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 1162, 383, 384, 522,
	385, 523, 386, 387, 1163, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 1164, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 1165, 411, 989, 412, 413, 414, 415, 525,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	1166, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 1167, 438, 418, 419, 439, 440, 990, 441, 442,
	526, 443, 444, 1168, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 527, 1169, 456, 457, 455,
	1170, 458, 459, 460, 461, 462, 286, 463, 1171, 464,
	528, 529, 530, 531, 1172, 471, 1173, 465, 466, 532,
	467, 533, 1174, 468, 469, 470, 0, 472, 473, 1175,
	1176, 474, 475, 476, 478, 479, 477, 481, 1177, 482,
	1178, 480, 483, 484, 485, 534, 535, 536, 1179, 487,
	486, 537, 1180, 1181, 1182, 1183, 488, 489, 538, 490,
	491, 492, 2121, 0, 915, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 2118, 227, 0, 0,
	0, 0, 0, 966, 889, 0, 0, 0, 228, 230,
	229, 231, 232, 494, 930, 909, 941, 236, 899, 940,
	939, 0, 237, 238, 901, 900, 241, 242, 243, 891,
	965, 244, 1002, 1003, 500, 0, 245, 246, 972, 0,
	953, 0, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 975, 262, 263, 956, 954, 955, 962, 958,
	957, 961, 264, 265, 266, 267, 944, 269, 937, 936,
	862, 270, 271, 0, 273, 272, 0, 274, 2119, 0,
	275, 935, 277, 0, 278, 0, 279, 280, 0, 281,
	868, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	993, 994, 880, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 934, 932, 933, 0, 297, 0, 298, 0,
	0, 976, 299, 300, 0, 301, 1000, 0, 890, 302,
	0, 303, 304, 305, 306, 967, 968, 971, 362, 978,
	307, 308, 0, 309, 310, 311, 911, 0, 0, 220,
	312, 314, 321, 0, 977, 315, 923, 914, 925, 927,
	928, 929, 924, 0, 916, 0, 322, 979, 969, 980,
	323, 324, 325, 981, 949, 950, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 1001, 982,
	336, 337, 983, 0, 338, 339, 960, 959, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 903, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 859, 221, 986, 360, 881, 970, 361, 938, 363,
	364, 0, 912, 366, 913, 0, 0, 369, 370, 371,
	0, 0, 372, 373, 520, 987, 374, 988, 995, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	384, 996, 385, 523, 386, 387, 0, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 931, 396, 397, 0,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 0, 411, 989, 412, 413, 414,
	415, 869, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 0, 433, 434, 904, 905, 907, 908, 429,
	435, 436, 437, 963, 438, 418, 419, 439, 440, 990,
	441, 442, 926, 906, 444, 0, 445, 446, 447, 448,
	420, 449, 453, 974, 450, 451, 452, 997, 0, 456,
	457, 455, 0, 458, 459, 460, 461, 462, 286, 902,
	0, 464, 945, 946, 947, 948, 0, 471, 0, 465,
	466, 998, 467, 999, 879, 468, 469, 470, 0, 472,
	473, 0, 863, 474, 475, 476, 478, 479, 477, 481,
	964, 482, 0, 910, 483, 484, 485, 534, 942, 992,
	2117, 487, 486, 537, 0, 0, 0, 0, 488, 489,
	538, 490, 491, 492, 860, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 856, 857, 2120,
	0, 0, 0, 0, 0, 0, 885, 2116, 0, 849,
	883, 915, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	966, 889, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 930, 909, 941, 236, 899, 940, 939, 0, 237,
	238, 901, 900, 241, 242, 243, 891, 965, 244, 1002,
	1003, 500, 0, 245, 246, 972, 0, 953, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 956, 954, 955, 962, 958, 957, 961, 264,
	265, 266, 267, 944, 269, 937, 936, 862, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 935, 277,
	0, 278, 0, 279, 280, 0, 281, 868, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 993, 994, 880,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 934,
	932, 933, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 1000, 0, 890, 302, 0, 303, 304,
	305, 306, 967, 968, 971, 362, 978, 307, 308, 0,
	309, 310, 311, 911, 0, 0, 220, 312, 314, 321,
	0, 977, 315, 923, 914, 925, 927, 928, 929, 924,
	0, 916, 0, 322, 979, 969, 980, 323, 324, 325,
	981, 949, 950, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 1001, 982, 336, 337, 983,
	0, 338, 339, 960, 959, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 903, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 859, 221,
	986, 360, 881, 970, 361, 938, 363, 364, 0, 912,
	366, 913, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 995, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 996, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 931, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 869, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 185,
	433, 434, 904, 905, 907, 908, 429, 435, 436, 437,
	963, 438, 418, 419, 439, 440, 990, 441, 442, 926,
	906, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	974, 450, 451, 452, 997, 0, 456, 457, 455, 187,
	458, 459, 460, 461, 462, 286, 902, 0, 464, 945,
	946, 947, 948, 0, 471, 0, 465, 466, 998, 467,
	999, 879, 468, 469, 470, 0, 472, 473, 0, 863,
	474, 475, 476, 478, 479, 477, 481, 964, 482, 0,
	910, 483, 484, 485, 1347, 942, 992, 0, 487, 486,
	537, 0, 0, 0, 179, 488, 489, 538, 490, 491,
	492, 860, 180, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 856, 857, 915, 873, 874, 875,
	871, 872, 884, 1557, 1555, 0, 0, 883, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 966, 889, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 930, 909, 941, 236,
	899, 940, 939, 0, 237, 238, 901, 900, 241, 242,
	243, 891, 965, 244, 1002, 1003, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 944, 269,
	937, 936, 862, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 935, 277, 0, 278, 0, 279, 280,
	0, 281, 868, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 880, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 934, 932, 933, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 1000, 0,
	890, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 911, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 923, 914,
	925, 927, 928, 929, 924, 0, 916, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 949, 950, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 903, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 859, 221, 986, 360, 881, 970, 361,
	938, 363, 364, 0, 912, 366, 913, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 931, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 869, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 185, 433, 434, 904, 905, 907,
	908, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 926, 906, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 974, 450, 451, 452, 997,
	0, 456, 457, 455, 187, 458, 459, 460, 461, 462,
	286, 902, 0, 464, 945, 946, 947, 948, 0, 471,
	0, 465, 466, 998, 467, 999, 879, 468, 469, 470,
	0, 472, 473, 0, 863, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 910, 483, 484, 485, 1347,
	942, 992, 0, 487, 486, 537, 0, 0, 0, 179,
	488, 489, 538, 490, 491, 492, 860, 180, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 856,
	857, 915, 873, 874, 875, 871, 872, 884, 1557, 2594,
	0, 0, 883, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	966, 889, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 930, 909, 941, 236, 899, 940, 939, 0, 237,
	238, 901, 900, 241, 242, 243, 891, 965, 244, 1002,
	1003, 500, 0, 245, 246, 972, 0, 953, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 956, 954, 955, 962, 958, 957, 961, 264,
	265, 266, 267, 944, 269, 937, 936, 862, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 935, 277,
	0, 278, 0, 279, 280, 0, 281, 868, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 993, 994, 880,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 934,
	932, 933, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 1000, 0, 890, 302, 0, 303, 304,
	305, 306, 967, 968, 971, 362, 978, 307, 308, 0,
	309, 310, 311, 911, 0, 0, 220, 312, 314, 321,
	0, 977, 315, 923, 914, 925, 927, 928, 929, 924,
	0, 916, 0, 322, 979, 969, 980, 323, 324, 325,
	981, 949, 950, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 1001, 982, 336, 337, 983,
	0, 338, 339, 960, 959, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 903, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 859, 221,
	986, 360, 881, 970, 361, 938, 363, 364, 0, 912,
	366, 913, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 995, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 996, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 931, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 869, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 185,
	433, 434, 904, 905, 907, 908, 429, 435, 436, 437,
	963, 438, 418, 419, 439, 440, 990, 441, 442, 926,
	906, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	974, 450, 451, 452, 997, 0, 456, 457, 455, 187,
	458, 459, 460, 461, 462, 286, 902, 0, 464, 945,
	946, 947, 948, 0, 471, 0, 465, 466, 998, 467,
	999, 879, 468, 469, 470, 0, 472, 473, 0, 863,
	474, 475, 476, 478, 479, 477, 481, 964, 482, 0,
	910, 483, 484, 485, 1347, 942, 992, 0, 487, 486,
	537, 0, 0, 0, 179, 488, 489, 538, 490, 491,
	492, 860, 180, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 856, 857, 915, 873, 874, 875,
	871, 872, 884, 1557, 1555, 0, 0, 883, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 966, 889, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 930, 909, 941, 236,
	899, 940, 939, 2215, 237, 238, 901, 900, 241, 242,
	243, 891, 965, 244, 1002, 1003, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 944, 269,
	937, 936, 862, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 935, 277, 0, 278, 0, 279, 280,
	0, 281, 868, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 880, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 934, 932, 933, 0, 297, 0,
	298, 0, 2220, 976, 299, 300, 0, 301, 1000, 0,
	890, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 911, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 923, 914,
	925, 927, 928, 929, 924, 0, 916, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 949, 950, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 2216, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 903, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 859, 221, 986, 360, 881, 970, 361,
	938, 363, 364, 0, 912, 366, 913, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 931, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 869, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 904, 905, 907,
	908, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 926, 906, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 974, 450, 451, 452, 997,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 902, 0, 464, 945, 946, 947, 948, 0, 471,
	2217, 465, 466, 998, 467, 999, 879, 468, 469, 470,
	0, 472, 473, 0, 863, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 910, 483, 484, 485, 534,
	942, 992, 0, 487, 486, 537, 0, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 860, 0, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 856,
	857, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 2174, 883, 915, 873, 874, 875, 871, 872, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 966, 889, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 930, 909, 941, 236, 899, 940, 939,
	0, 237, 238, 901, 900, 241, 242, 243, 891, 965,
	244, 1002, 1003, 500, 0, 245, 246, 972, 0, 953,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 975, 262, 263, 956, 954, 955, 962, 958, 957,
	961, 264, 265, 266, 267, 944, 269, 937, 936, 862,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	935, 277, 0, 278, 0, 279, 280, 0, 281, 868,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 993,
	994, 880, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 934, 932, 933, 0, 297, 0, 298, 0, 0,
	976, 299, 300, 0, 301, 1000, 0, 890, 302, 0,
	303, 304, 305, 306, 967, 968, 971, 362, 978, 307,
	308, 0, 309, 310, 311, 911, 0, 0, 220, 312,
	314, 321, 0, 977, 315, 923, 914, 925, 927, 928,
	929, 924, 0, 916, 0, 322, 979, 969, 980, 323,
	324, 325, 981, 949, 950, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 1001, 982, 336,
	337, 983, 0, 338, 339, 960, 959, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	903, 351, 984, 354, 355, 358, 359, 357, 985, 356,
	859, 221, 986, 360, 881, 970, 361, 938, 363, 364,
	0, 912, 366, 913, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 987, 374, 988, 995, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	996, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 931, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 989, 412, 413, 414, 415,
	869, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 904, 905, 907, 908, 429, 435,
	436, 437, 963, 438, 418, 419, 439, 440, 990, 441,
	442, 926, 906, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 974, 450, 451, 452, 997, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 902, 0,
	464, 945, 946, 947, 948, 0, 471, 0, 465, 466,
	998, 467, 999, 879, 468, 469, 470, 0, 472, 473,
	0, 863, 474, 475, 476, 478, 479, 477, 481, 964,
	482, 0, 910, 483, 484, 485, 534, 942, 992, 0,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 860, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 885, 2172, 0, 2171, 883,
	915, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 966,
	889, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	930, 909, 941, 236, 899, 940, 939, 0, 237, 238,
	901, 900, 241, 242, 243, 891, 965, 244, 1002, 1003,
	500, 0, 245, 246, 972, 0, 953, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 975, 262,
	263, 956, 954, 955, 962, 958, 957, 961, 264, 265,
	266, 267, 944, 269, 937, 936, 862, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 935, 277, 0,
	278, 0, 279, 280, 0, 281, 868, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 993, 994, 880, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 934, 932,
	933, 0, 297, 0, 298, 0, 0, 976, 299, 300,
	0, 301, 1000, 0, 890, 302, 0, 303, 304, 305,
	306, 967, 968, 971, 362, 978, 307, 308, 0, 309,
	310, 311, 911, 0, 0, 220, 312, 314, 321, 0,
	977, 315, 923, 914, 925, 927, 928, 929, 924, 0,
	916, 0, 322, 979, 969, 980, 323, 324, 325, 981,
	949, 950, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 1001, 982, 336, 337, 983, 0,
	338, 339, 960, 959, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 903, 351, 984,
	354, 355, 358, 359, 357, 985, 356, 859, 221, 986,
	360, 881, 970, 361, 938, 363, 364, 0, 912, 366,
	913, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 987, 374, 988, 995, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 996, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 931, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 989, 412, 413, 414, 415, 869, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 904, 905, 907, 908, 429, 435, 436, 437, 963,
	438, 418, 419, 439, 440, 990, 441, 442, 926, 906,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 974,
	450, 451, 452, 997, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 902, 0, 464, 945, 946,
	947, 948, 0, 471, 0, 465, 466, 998, 467, 999,
	879, 468, 469, 470, 0, 472, 473, 0, 863, 474,
	475, 476, 478, 479, 477, 481, 964, 482, 0, 910,
	483, 484, 485, 534, 942, 992, 0, 487, 486, 537,
	0, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	860, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 856, 857, 0, 0, 0, 0, 0,
	0, 0, 885, 2169, 0, 2168, 883, 915, 873, 874,
	875, 871, 872, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 862, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 859, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 472, 473, 0, 863, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 860, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	856, 857, 0, 0, 0, 0, 0, 0, 0, 885,
	2166, 0, 2165, 883, 915, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 966, 889, 0, 0, 0, 228, 230,
	229, 231, 232, 494, 930, 909, 941, 236, 899, 940,
	939, 0, 237, 238, 901, 900, 241, 242, 243, 891,
	965, 244, 1002, 1003, 500, 0, 245, 246, 972, 0,
	953, 0, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 975, 262, 263, 956, 954, 955, 962, 958,
	957, 961, 264, 265, 266, 267, 944, 269, 937, 936,
	862, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 935, 277, 0, 278, 0, 279, 280, 0, 281,
	868, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	993, 994, 880, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 934, 932, 933, 0, 297, 0, 298, 0,
	0, 976, 299, 300, 0, 301, 1000, 0, 890, 302,
	0, 303, 304, 305, 306, 967, 968, 971, 362, 978,
	307, 308, 0, 309, 310, 311, 911, 0, 0, 220,
	312, 314, 321, 0, 977, 315, 923, 914, 925, 927,
	928, 929, 924, 0, 916, 0, 322, 979, 969, 980,
	323, 324, 325, 981, 949, 950, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 1001, 982,
	336, 337, 983, 0, 338, 339, 960, 959, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 903, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 859, 221, 986, 360, 881, 970, 361, 938, 363,
	364, 0, 912, 366, 913, 0, 0, 369, 370, 371,
	0, 0, 372, 373, 520, 987, 374, 988, 995, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	384, 996, 385, 523, 386, 387, 0, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 931, 396, 397, 0,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 0, 411, 989, 412, 413, 414,
	415, 869, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 0, 433, 434, 904, 905, 907, 908, 429,
	435, 436, 437, 963, 438, 418, 419, 439, 440, 990,
	441, 442, 926, 906, 444, 0, 445, 446, 447, 448,
	420, 449, 453, 974, 450, 451, 452, 997, 0, 456,
	457, 455, 0, 458, 459, 460, 461, 462, 286, 902,
	0, 464, 945, 946, 947, 948, 0, 471, 0, 465,
	466, 998, 467, 999, 879, 468, 469, 470, 0, 472,
	473, 0, 863, 474, 475, 476, 478, 479, 477, 481,
	964, 482, 0, 910, 483, 484, 485, 534, 942, 992,
	0, 487, 486, 537, 0, 0, 0, 0, 488, 489,
	538, 490, 491, 492, 860, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 856, 857, 0,
	0, 0, 0, 0, 0, 0, 885, 2163, 0, 1416,
	883, 915, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	966, 889, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 930, 909, 941, 236, 899, 940, 939, 0, 237,
	238, 901, 900, 241, 242, 243, 891, 965, 244, 1002,
	1003, 500, 0, 245, 246, 972, 0, 953, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 956, 954, 955, 962, 958, 957, 961, 264,
	265, 266, 267, 944, 269, 937, 936, 862, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 935, 277,
	0, 278, 0, 279, 280, 0, 281, 868, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 993, 994, 880,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 934,
	932, 933, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 1000, 0, 890, 302, 0, 303, 304,
	305, 306, 967, 968, 971, 362, 978, 307, 308, 0,
	309, 310, 311, 911, 0, 0, 220, 312, 314, 321,
	0, 977, 315, 923, 914, 925, 927, 928, 929, 924,
	0, 916, 0, 322, 979, 969, 980, 323, 324, 325,
	981, 949, 950, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 1001, 982, 336, 337, 983,
	0, 338, 339, 960, 959, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 903, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 859, 221,
	986, 360, 881, 970, 361, 938, 363, 364, 0, 912,
	366, 913, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 995, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 996, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 931, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 869, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 904, 905, 907, 908, 429, 435, 436, 437,
	963, 438, 418, 419, 439, 440, 990, 441, 442, 926,
	906, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	974, 450, 451, 452, 997, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 902, 0, 464, 945,
	946, 947, 948, 0, 471, 0, 465, 466, 998, 467,
	999, 879, 468, 469, 470, 0, 472, 473, 0, 863,
	474, 475, 476, 478, 479, 477, 481, 964, 482, 0,
	910, 483, 484, 485, 534, 942, 992, 0, 487, 486,
	537, 1415, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 860, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 852, 883, 915, 873,
	874, 875, 871, 872, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 966, 889, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 930, 909,
	941, 236, 899, 940, 939, 0, 237, 238, 901, 900,
	241, 242, 243, 891, 965, 244, 1002, 1003, 500, 0,
	245, 246, 972, 0, 953, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 975, 262, 263, 956,
	954, 955, 962, 958, 957, 961, 264, 265, 266, 267,
	944, 269, 937, 936, 862, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 935, 277, 0, 278, 0,
	279, 280, 0, 281, 868, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 993, 994, 880, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 934, 932, 933, 0,
	297, 0, 298, 0, 0, 976, 299, 300, 0, 301,
	1000, 0, 890, 302, 0, 303, 304, 305, 306, 967,
	968, 971, 362, 978, 307, 308, 0, 309, 310, 311,
	911, 0, 0, 220, 312, 314, 321, 0, 977, 315,
	923, 914, 925, 927, 928, 929, 924, 0, 916, 0,
	322, 979, 969, 980, 323, 324, 325, 981, 949, 950,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 1001, 982, 336, 337, 983, 0, 338, 339,
	960, 959, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 903, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 859, 221, 986, 360, 881,
	970, 361, 938, 363, 364, 0, 912, 366, 913, 864,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 987,
	374, 988, 995, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 996, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	931, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	989, 412, 413, 414, 415, 869, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 0, 433, 434, 904,
	905, 907, 908, 429, 435, 436, 437, 963, 438, 418,
	419, 439, 440, 990, 441, 442, 926, 906, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 974, 450, 451,
	452, 997, 0, 456, 457, 455, 0, 458, 459, 460,
	461, 462, 286, 902, 0, 464, 945, 946, 947, 948,
	0, 471, 0, 465, 466, 998, 467, 999, 879, 468,
	469, 470, 0, 472, 473, 0, 863, 474, 475, 476,
	478, 479, 477, 481, 964, 482, 0, 910, 483, 484,
	485, 534, 942, 992, 0, 487, 486, 537, 0, 0,
	0, 0, 488, 489, 538, 490, 491, 492, 860, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 856, 857, 915, 873, 874, 875, 871, 872, 884,
	885, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 966, 889, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 930, 909, 941, 236, 899, 940, 939,
	0, 237, 238, 901, 900, 241, 242, 243, 891, 965,
	244, 1002, 1003, 500, 0, 245, 246, 972, 0, 953,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 3627, 260, 0,
	261, 975, 262, 263, 956, 954, 955, 962, 958, 957,
	961, 264, 265, 266, 267, 944, 269, 937, 936, 862,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	935, 277, 0, 278, 0, 279, 280, 0, 281, 868,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 993,
	994, 880, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 934, 932, 933, 0, 297, 0, 298, 0, 0,
	976, 299, 300, 0, 301, 1000, 0, 890, 302, 0,
	303, 304, 305, 306, 967, 968, 971, 362, 978, 307,
	308, 0, 309, 310, 311, 911, 0, 0, 220, 312,
	314, 321, 0, 977, 315, 923, 914, 925, 927, 928,
	929, 924, 0, 916, 0, 322, 979, 969, 980, 323,
	324, 325, 981, 949, 950, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 1001, 982, 336,
	337, 983, 0, 338, 339, 960, 959, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	903, 351, 984, 354, 355, 358, 359, 357, 985, 356,
	859, 221, 986, 360, 881, 970, 361, 938, 363, 364,
	0, 912, 366, 913, 864, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 987, 374, 988, 995, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	996, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 931, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 989, 412, 413, 414, 415,
	869, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 904, 905, 907, 908, 429, 435,
	436, 437, 963, 438, 418, 419, 439, 440, 990, 441,
	442, 926, 906, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 974, 450, 451, 452, 997, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 902, 0,
	464, 945, 946, 947, 948, 0, 471, 0, 465, 466,
	998, 467, 999, 879, 468, 469, 470, 0, 472, 473,
	0, 863, 474, 475, 476, 478, 479, 477, 481, 964,
	482, 0, 910, 483, 484, 485, 534, 942, 992, 0,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 860, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 856, 857, 915, 873,
	874, 875, 871, 872, 884, 885, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 966, 889, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 930, 909,
	941, 236, 899, 940, 939, 0, 237, 238, 901, 900,
	241, 242, 243, 891, 965, 244, 1002, 1003, 500, 0,
	245, 246, 972, 0, 953, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 3460, 260, 0, 261, 975, 262, 263, 956,
	954, 955, 962, 958, 957, 961, 264, 265, 266, 267,
	944, 269, 937, 936, 862, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 935, 277, 0, 278, 0,
	279, 280, 0, 281, 868, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 993, 994, 880, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 934, 932, 933, 0,
	297, 0, 298, 0, 0, 976, 299, 300, 0, 301,
	1000, 0, 890, 302, 0, 303, 304, 305, 306, 967,
	968, 971, 362, 978, 307, 308, 0, 309, 310, 311,
	911, 0, 0, 220, 312, 314, 321, 0, 977, 315,
	923, 914, 925, 927, 928, 929, 924, 0, 916, 0,
	322, 979, 969, 980, 323, 324, 325, 981, 949, 950,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 1001, 982, 336, 337, 983, 0, 338, 339,
	960, 959, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 903, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 859, 221, 986, 360, 881,
	970, 361, 938, 363, 364, 0, 912, 366, 913, 864,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 987,
	374, 988, 995, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 996, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	931, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	989, 412, 413, 414, 415, 869, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 0, 433, 434, 904,
	905, 907, 908, 429, 435, 436, 437, 963, 438, 418,
	419, 439, 440, 990, 441, 442, 926, 906, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 974, 450, 451,
	452, 997, 0, 456, 457, 455, 0, 458, 459, 460,
	461, 462, 286, 902, 0, 464, 945, 946, 947, 948,
	0, 471, 0, 465, 466, 998, 467, 999, 879, 468,
	469, 470, 0, 472, 473, 0, 863, 474, 475, 476,
	478, 479, 477, 481, 964, 482, 0, 910, 483, 484,
	485, 534, 942, 992, 0, 487, 486, 537, 0, 0,
	0, 0, 488, 489, 538, 490, 491, 492, 860, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 856, 857, 915, 873, 874, 875, 871, 872, 884,
	885, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 966, 889, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 930, 909, 941, 236, 899, 940, 939,
	0, 237, 238, 901, 900, 241, 242, 243, 891, 965,
	244, 1002, 1003, 500, 0, 245, 246, 972, 0, 953,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 975, 262, 263, 956, 954, 955, 962, 958, 957,
	961, 264, 265, 266, 267, 944, 269, 937, 936, 862,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	935, 277, 0, 278, 0, 279, 280, 0, 281, 868,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 993,
	994, 880, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 934, 932, 933, 0, 297, 0, 298, 0, 0,
	976, 299, 300, 0, 301, 1000, 0, 890, 302, 0,
	303, 304, 305, 306, 967, 968, 971, 362, 978, 307,
	308, 0, 309, 310, 311, 911, 0, 0, 220, 312,
	314, 321, 0, 977, 315, 923, 914, 925, 927, 928,
	929, 924, 0, 916, 0, 322, 979, 969, 980, 323,
	324, 325, 981, 949, 950, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 1001, 982, 336,
	337, 983, 0, 338, 339, 960, 959, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	903, 351, 984, 354, 355, 358, 359, 357, 985, 356,
	859, 3176, 986, 360, 881, 970, 361, 938, 363, 364,
	0, 912, 366, 913, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 987, 374, 988, 995, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	996, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 931, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 989, 412, 413, 414, 415,
	869, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 904, 905, 907, 908, 429, 435,
	436, 437, 963, 438, 418, 419, 439, 440, 990, 441,
	442, 926, 906, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 974, 450, 451, 452, 997, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 902, 0,
	464, 945, 946, 947, 948, 0, 471, 0, 465, 466,
	998, 467, 999, 879, 468, 469, 470, 0, 472, 473,
	0, 863, 474, 475, 476, 478, 479, 477, 481, 964,
	482, 0, 910, 483, 484, 485, 534, 942, 992, 0,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 860, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 856, 857, 1621, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 883,
	915, 873, 874, 875, 871, 872, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 966,
	889, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	930, 909, 941, 236, 899, 940, 939, 0, 237, 238,
	901, 900, 241, 242, 243, 891, 965, 244, 1002, 1003,
	500, 0, 245, 246, 972, 0, 953, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 975, 262,
	263, 956, 954, 955, 962, 958, 957, 961, 264, 265,
	266, 267, 944, 269, 937, 936, 862, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 935, 277, 0,
	278, 0, 279, 280, 0, 281, 868, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 993, 994, 880, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 934, 932,
	933, 0, 297, 0, 298, 0, 0, 976, 299, 300,
	0, 301, 1000, 0, 890, 302, 0, 303, 304, 305,
	306, 967, 968, 971, 362, 978, 307, 308, 0, 309,
	310, 311, 911, 0, 0, 220, 312, 314, 321, 0,
	977, 315, 923, 914, 925, 927, 928, 929, 924, 0,
	916, 0, 322, 979, 969, 980, 323, 324, 325, 981,
	949, 950, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 1001, 982, 336, 337, 983, 0,
	338, 339, 960, 959, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 903, 351, 984,
	354, 355, 358, 359, 357, 985, 356, 859, 221, 986,
	360, 881, 970, 361, 938, 363, 364, 0, 912, 366,
	913, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 987, 374, 988, 995, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 996, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 931, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 989, 412, 413, 414, 415, 869, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 904, 905, 907, 908, 429, 435, 436, 437, 963,
	438, 418, 419, 439, 440, 990, 441, 442, 926, 906,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 974,
	450, 451, 452, 997, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 902, 0, 464, 945, 946,
	947, 948, 0, 471, 0, 465, 466, 998, 467, 999,
	879, 468, 469, 470, 0, 472, 473, 0, 863, 474,
	475, 476, 478, 479, 477, 481, 964, 482, 0, 910,
	483, 484, 485, 534, 942, 992, 2976, 487, 486, 537,
	0, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	860, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 856, 857, 915, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 966, 889, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 930, 909, 941, 236, 899,
	940, 939, 0, 237, 238, 901, 900, 241, 242, 243,
	891, 965, 244, 1002, 1003, 500, 0, 245, 246, 972,
	0, 953, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 956, 954, 955, 962,
	958, 957, 961, 264, 265, 266, 267, 944, 269, 937,
	936, 862, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 935, 277, 0, 278, 0, 279, 280, 0,
	281, 868, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 993, 994, 880, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 934, 932, 933, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 1000, 0, 890,
	302, 0, 303, 304, 305, 306, 967, 968, 971, 362,
	978, 307, 308, 0, 309, 310, 311, 911, 0, 0,
	2035, 312, 314, 321, 0, 977, 315, 923, 914, 925,
	927, 928, 929, 924, 0, 916, 0, 322, 979, 969,
	980, 323, 324, 325, 981, 949, 950, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 1001,
	982, 336, 337, 983, 0, 338, 339, 960, 959, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 903, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 859, 221, 986, 360, 881, 970, 361, 938,
	363, 364, 0, 912, 366, 913, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 995,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 996, 385, 523, 386, 387, 2034, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 931, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 869, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 904, 905, 907, 908,
	429, 435, 436, 437, 963, 438, 418, 419, 439, 440,
	990, 441, 442, 926, 906, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 974, 450, 451, 452, 997, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	902, 0, 464, 945, 946, 947, 948, 0, 471, 0,
	465, 466, 998, 467, 999, 879, 468, 469, 470, 0,
	472, 473, 0, 863, 474, 475, 476, 478, 479, 477,
	481, 964, 482, 0, 910, 483, 484, 485, 534, 942,
	992, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 860, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 856, 857,
	915, 873, 874, 875, 871, 872, 884, 885, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 966,
	889, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	930, 909, 941, 236, 899, 940, 939, 0, 237, 238,
	901, 900, 241, 242, 243, 891, 965, 244, 1002, 1003,
	500, 0, 245, 246, 972, 0, 953, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 975, 262,
	263, 956, 954, 955, 962, 958, 957, 961, 264, 265,
	266, 267, 944, 269, 937, 936, 862, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 935, 277, 0,
	278, 0, 279, 280, 0, 281, 868, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 993, 994, 880, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 934, 932,
	933, 0, 297, 0, 298, 0, 0, 976, 299, 300,
	0, 301, 1000, 0, 890, 302, 0, 303, 304, 305,
	306, 967, 968, 971, 362, 978, 307, 308, 0, 309,
	310, 311, 911, 0, 0, 220, 312, 314, 321, 0,
	977, 315, 923, 914, 925, 927, 928, 929, 924, 0,
	916, 0, 322, 979, 969, 980, 323, 324, 325, 981,
	949, 950, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 1001, 982, 336, 337, 983, 0,
	338, 339, 960, 959, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 903, 351, 984,
	354, 355, 358, 359, 357, 985, 356, 859, 221, 986,
	360, 881, 970, 361, 938, 363, 364, 0, 912, 366,
	913, 864, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 987, 374, 988, 995, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 996, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 931, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 989, 412, 413, 414, 415, 869, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 904, 905, 907, 908, 429, 435, 436, 437, 963,
	438, 418, 419, 439, 440, 990, 441, 442, 926, 906,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 974,
	450, 451, 452, 997, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 902, 0, 464, 945, 946,
	947, 948, 0, 471, 0, 465, 466, 998, 467, 999,
	879, 468, 469, 470, 0, 472, 473, 0, 863, 474,
	475, 476, 478, 479, 477, 481, 964, 482, 0, 910,
	483, 484, 485, 534, 942, 992, 0, 487, 486, 537,
	0, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	860, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 856, 857, 915, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 966, 889, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 930, 909, 941, 236, 899,
	940, 939, 0, 237, 238, 901, 900, 241, 242, 243,
	891, 965, 244, 1002, 1003, 500, 0, 245, 246, 972,
	0, 953, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 956, 954, 955, 962,
	958, 957, 961, 264, 265, 266, 267, 944, 269, 937,
	936, 862, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 935, 277, 0, 278, 0, 279, 280, 0,
	281, 868, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 993, 994, 880, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 934, 932, 933, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 1000, 0, 890,
	302, 0, 303, 304, 305, 306, 967, 968, 971, 362,
	978, 307, 308, 0, 309, 310, 311, 911, 0, 0,
	220, 312, 314, 321, 0, 977, 315, 923, 914, 925,
	927, 928, 929, 924, 0, 916, 0, 322, 979, 969,
	980, 323, 324, 325, 981, 949, 950, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 1001,
	982, 336, 337, 983, 0, 338, 339, 960, 959, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 903, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 859, 221, 986, 360, 881, 970, 361, 938,
	363, 364, 0, 912, 366, 913, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 995,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 996, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 931, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 869, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 904, 905, 907, 908,
	429, 435, 436, 437, 963, 438, 418, 419, 439, 440,
	990, 441, 442, 926, 906, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 974, 450, 451, 452, 997, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	902, 0, 464, 945, 946, 947, 948, 0, 471, 0,
	465, 466, 998, 467, 999, 879, 468, 469, 470, 0,
	472, 473, 0, 863, 474, 475, 476, 478, 479, 477,
	481, 964, 482, 0, 910, 483, 484, 485, 534, 942,
	992, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 860, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 856, 857,
	1621, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 883, 915, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 2220, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 856, 857, 915, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 862, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 859, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 472, 473, 0, 863, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 860, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	856, 857, 0, 0, 0, 0, 0, 0, 0, 885,
	1555, 0, 2225, 883, 915, 873, 874, 875, 871, 872,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 966, 889, 0, 0, 0, 228, 230,
	229, 231, 232, 494, 930, 909, 941, 236, 899, 940,
	939, 0, 237, 238, 901, 900, 241, 242, 243, 891,
	965, 244, 1002, 1003, 500, 0, 245, 246, 972, 0,
	953, 0, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 975, 262, 263, 956, 954, 955, 962, 958,
	957, 961, 264, 265, 266, 267, 944, 269, 937, 936,
	862, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 935, 277, 0, 278, 0, 279, 280, 0, 281,
	868, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	993, 994, 880, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 934, 932, 933, 0, 297, 0, 298, 0,
	0, 976, 299, 300, 0, 301, 1000, 0, 890, 302,
	0, 303, 304, 305, 306, 967, 968, 971, 362, 978,
	307, 308, 0, 309, 310, 311, 911, 0, 0, 220,
	312, 314, 321, 0, 977, 315, 923, 914, 925, 927,
	928, 929, 924, 0, 916, 0, 322, 979, 969, 980,
	323, 324, 325, 981, 949, 950, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 1001, 982,
	336, 337, 983, 0, 338, 339, 960, 959, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 903, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 859, 221, 986, 360, 881, 970, 361, 938, 363,
	364, 0, 912, 366, 913, 0, 0, 369, 370, 371,
	0, 0, 372, 373, 520, 987, 374, 988, 995, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	384, 996, 385, 523, 386, 387, 0, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 931, 396, 397, 0,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 0, 411, 989, 412, 413, 414,
	415, 869, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 0, 433, 434, 904, 905, 907, 908, 429,
	435, 436, 437, 963, 438, 418, 419, 439, 440, 990,
	441, 442, 926, 906, 444, 0, 445, 446, 447, 448,
	420, 449, 453, 974, 450, 451, 452, 997, 0, 456,
	457, 455, 0, 458, 459, 460, 461, 462, 286, 902,
	0, 464, 945, 946, 947, 948, 0, 471, 0, 465,
	466, 998, 467, 999, 879, 468, 469, 470, 0, 472,
	473, 0, 863, 474, 475, 476, 478, 479, 477, 481,
	964, 482, 0, 910, 483, 484, 485, 534, 942, 992,
	0, 487, 486, 537, 0, 0, 0, 0, 488, 489,
	538, 490, 491, 492, 860, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 856, 857, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 2223,
	883, 915, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	966, 889, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 930, 909, 941, 236, 899, 940, 939, 0, 237,
	238, 901, 900, 241, 242, 243, 891, 965, 244, 1002,
	1003, 500, 0, 245, 246, 972, 0, 953, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 956, 954, 955, 962, 958, 957, 961, 264,
	265, 266, 267, 944, 269, 937, 936, 862, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 935, 277,
	0, 278, 0, 279, 280, 0, 281, 868, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 993, 994, 880,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 934,
	932, 933, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 1000, 0, 890, 302, 0, 303, 304,
	305, 306, 967, 968, 971, 362, 978, 307, 308, 0,
	309, 310, 311, 911, 0, 0, 220, 312, 314, 321,
	0, 977, 315, 923, 914, 925, 927, 928, 929, 924,
	0, 916, 0, 322, 979, 969, 980, 323, 324, 325,
	981, 949, 950, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 1001, 982, 336, 337, 983,
	0, 338, 339, 960, 959, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 903, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 859, 221,
	986, 360, 881, 970, 361, 938, 363, 364, 0, 912,
	366, 913, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 995, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 996, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 931, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 869, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 904, 905, 907, 908, 429, 435, 436, 437,
	963, 438, 418, 419, 439, 440, 990, 441, 442, 926,
	906, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	974, 450, 451, 452, 997, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 902, 0, 464, 945,
	946, 947, 948, 0, 471, 0, 465, 466, 998, 467,
	999, 879, 468, 469, 470, 0, 472, 473, 0, 863,
	474, 475, 476, 478, 479, 477, 481, 964, 482, 0,
	910, 483, 484, 485, 534, 942, 992, 0, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 860, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 2211, 883, 915, 873,
	874, 875, 871, 872, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 966, 889, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 930, 909,
	941, 236, 899, 940, 939, 0, 237, 238, 901, 900,
	241, 242, 243, 891, 965, 244, 1002, 1003, 500, 0,
	245, 246, 972, 0, 953, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 975, 262, 263, 956,
	954, 955, 962, 958, 957, 961, 264, 265, 266, 267,
	944, 269, 937, 936, 862, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 935, 277, 0, 278, 0,
	279, 280, 0, 281, 868, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 993, 994, 880, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 934, 932, 933, 0,
	297, 0, 298, 0, 0, 976, 299, 300, 0, 301,
	1000, 0, 890, 302, 0, 303, 304, 305, 306, 967,
	968, 971, 362, 978, 307, 308, 0, 309, 310, 311,
	911, 0, 0, 220, 312, 314, 321, 0, 977, 315,
	923, 914, 925, 927, 928, 929, 924, 0, 916, 0,
	322, 979, 969, 980, 323, 324, 325, 981, 949, 950,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 1001, 982, 336, 337, 983, 0, 338, 339,
	960, 959, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 903, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 859, 221, 986, 360, 881,
	970, 361, 938, 363, 364, 0, 912, 366, 913, 0,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 987,
	374, 988, 995, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 996, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	931, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	989, 412, 413, 414, 415, 869, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 0, 433, 434, 904,
	905, 907, 908, 429, 435, 436, 437, 963, 438, 418,
	419, 439, 440, 990, 441, 442, 926, 906, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 974, 450, 451,
	452, 997, 0, 456, 457, 455, 0, 458, 459, 460,
	461, 462, 286, 902, 0, 464, 945, 946, 947, 948,
	0, 471, 0, 465, 466, 998, 467, 999, 879, 468,
	469, 470, 0, 472, 473, 0, 863, 474, 475, 476,
	478, 479, 477, 481, 964, 482, 0, 910, 483, 484,
	485, 534, 942, 992, 0, 487, 486, 537, 0, 0,
	0, 0, 488, 489, 538, 490, 491, 492, 860, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 2200, 883, 915, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 966, 889, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 930, 909, 941, 236, 899,
	940, 939, 0, 237, 238, 901, 900, 241, 242, 243,
	891, 965, 244, 1002, 1003, 500, 0, 245, 246, 972,
	0, 953, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 956, 954, 955, 962,
	958, 957, 961, 264, 265, 266, 267, 944, 269, 937,
	936, 862, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 935, 277, 0, 278, 0, 279, 280, 0,
	281, 868, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 993, 994, 880, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 934, 932, 933, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 1000, 0, 890,
	302, 0, 303, 304, 305, 306, 967, 968, 971, 362,
	978, 307, 308, 0, 309, 310, 311, 911, 0, 0,
	220, 312, 314, 321, 0, 977, 315, 923, 914, 925,
	927, 928, 929, 924, 0, 916, 0, 322, 979, 969,
	980, 323, 324, 325, 981, 949, 950, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 1001,
	982, 336, 337, 983, 0, 338, 339, 960, 959, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 903, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 859, 221, 986, 360, 881, 970, 361, 938,
	363, 364, 0, 912, 366, 913, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 995,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 996, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 931, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 869, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 904, 905, 907, 908,
	429, 435, 436, 437, 963, 438, 418, 419, 439, 440,
	990, 441, 442, 926, 906, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 974, 450, 451, 452, 997, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	902, 0, 464, 945, 946, 947, 948, 0, 471, 0,
	465, 466, 998, 467, 999, 879, 468, 469, 470, 0,
	472, 473, 0, 863, 474, 475, 476, 478, 479, 477,
	481, 964, 482, 0, 910, 483, 484, 485, 534, 942,
	992, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 860, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 856, 857,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	2198, 883, 2189, 2196, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 2192, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 2193, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 2194, 2191, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 2195,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	2190, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 2186, 883, 2189,
	2196, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 966, 889,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 930,
	909, 941, 236, 899, 940, 939, 0, 237, 238, 901,
	900, 241, 242, 243, 891, 965, 244, 1002, 1003, 500,
	0, 245, 246, 972, 0, 953, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 975, 262, 263,
	956, 954, 955, 962, 958, 957, 961, 264, 265, 266,
	267, 944, 2192, 937, 936, 862, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 935, 277, 0, 278,
	0, 279, 280, 0, 281, 868, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 993, 994, 880, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 934, 932, 933,
	0, 297, 0, 298, 0, 0, 976, 299, 300, 0,
	301, 1000, 0, 890, 302, 0, 303, 304, 305, 2193,
	967, 968, 971, 362, 978, 307, 308, 0, 309, 310,
	311, 911, 0, 0, 220, 312, 314, 321, 0, 977,
	315, 923, 914, 925, 927, 928, 929, 924, 0, 916,
	0, 322, 979, 969, 980, 323, 324, 325, 981, 949,
	950, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 1001, 982, 336, 337, 983, 0, 338,
	339, 960, 959, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 2194, 2191, 352, 903, 351, 984, 354,
	355, 358, 359, 357, 985, 356, 859, 221, 986, 360,
	881, 970, 361, 938, 363, 364, 0, 912, 366, 913,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	987, 374, 988, 995, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 996, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 931, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 989, 412, 413, 414, 415, 869, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 2195, 0, 433, 434,
	904, 905, 907, 908, 429, 435, 436, 437, 963, 438,
	418, 419, 439, 440, 990, 441, 442, 926, 906, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 974, 450,
	451, 452, 997, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 902, 0, 464, 945, 946, 947,
	948, 0, 471, 0, 465, 466, 998, 467, 999, 879,
	468, 469, 470, 0, 472, 473, 0, 863, 474, 475,
	476, 478, 479, 477, 481, 964, 482, 0, 910, 483,
	484, 485, 534, 942, 992, 0, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 2190, 492, 860,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 856, 857, 915, 873, 874, 875, 871, 872,
	884, 885, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 966, 889, 0, 0, 0, 228, 230,
	229, 231, 232, 494, 930, 909, 941, 236, 899, 940,
	939, 0, 237, 238, 901, 900, 241, 242, 243, 891,
	965, 244, 1002, 1003, 500, 0, 245, 246, 972, 0,
	953, 0, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 975, 262, 263, 956, 954, 955, 962, 958,
	957, 961, 264, 265, 266, 267, 944, 269, 937, 936,
	862, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 935, 277, 0, 278, 0, 279, 280, 0, 281,
	868, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	993, 994, 880, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 934, 932, 933, 0, 297, 0, 298, 0,
	0, 976, 299, 300, 0, 301, 1000, 0, 890, 302,
	0, 303, 304, 305, 306, 967, 968, 971, 362, 978,
	307, 308, 0, 309, 310, 311, 911, 0, 0, 220,
	312, 314, 321, 0, 977, 315, 923, 914, 925, 927,
	928, 929, 924, 0, 916, 0, 322, 979, 969, 980,
	323, 324, 325, 981, 949, 950, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 1001, 982,
	336, 337, 983, 0, 338, 339, 960, 959, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 903, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 859, 221, 986, 360, 881, 970, 361, 938, 363,
	364, 0, 912, 366, 913, 0, 0, 369, 370, 371,
	0, 0, 372, 373, 520, 987, 374, 988, 995, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	384, 996, 385, 523, 386, 387, 0, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 931, 396, 397, 0,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 0, 411, 989, 412, 413, 414,
	415, 869, 416, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 0, 433, 434, 904, 905, 907, 908, 429,
	435, 436, 437, 963, 438, 418, 419, 439, 440, 990,
	441, 442, 926, 906, 444, 0, 445, 446, 447, 448,
	420, 449, 453, 974, 450, 451, 452, 997, 0, 456,
	457, 455, 0, 458, 459, 460, 461, 462, 286, 902,
	0, 464, 945, 946, 947, 948, 0, 471, 0, 465,
	466, 998, 467, 999, 879, 468, 469, 470, 0, 472,
	473, 0, 863, 474, 475, 476, 478, 479, 477, 481,
	964, 482, 0, 910, 483, 484, 485, 534, 942, 992,
	0, 487, 486, 537, 0, 0, 0, 0, 488, 489,
	538, 490, 491, 492, 860, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 856, 857, 0,
	0, 0, 0, 0, 1563, 0, 885, 0, 0, 0,
	883, 915, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 2014, 227, 0, 0, 0, 0, 0,
	966, 889, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 930, 909, 941, 236, 899, 940, 939, 0, 237,
	238, 901, 900, 241, 242, 243, 891, 965, 244, 1002,
	1003, 500, 0, 245, 246, 972, 0, 953, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 956, 954, 955, 962, 958, 957, 961, 264,
	265, 266, 267, 944, 269, 937, 936, 862, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 935, 277,
	0, 278, 0, 279, 280, 0, 281, 868, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 993, 994, 880,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 934,
	932, 933, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 1000, 0, 890, 302, 0, 303, 304,
	305, 306, 967, 968, 971, 362, 978, 307, 308, 0,
	309, 310, 311, 911, 0, 0, 220, 312, 314, 321,
	0, 977, 315, 923, 914, 925, 927, 928, 929, 924,
	0, 916, 0, 322, 979, 969, 980, 323, 324, 325,
	981, 949, 950, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 1001, 982, 336, 337, 983,
	0, 338, 339, 960, 959, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 903, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 859, 221,
	986, 360, 881, 970, 361, 938, 363, 364, 0, 912,
	366, 913, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 995, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 996, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 931, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 869, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 904, 905, 907, 908, 429, 435, 436, 437,
	963, 438, 418, 419, 439, 440, 990, 441, 442, 926,
	906, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	974, 450, 451, 452, 997, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 902, 0, 464, 945,
	946, 947, 948, 0, 471, 0, 465, 466, 998, 467,
	999, 879, 468, 469, 470, 0, 472, 473, 0, 863,
	474, 475, 476, 478, 479, 477, 481, 964, 482, 0,
	910, 483, 484, 485, 534, 942, 992, 0, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 860, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 1239, 883, 915, 873,
	874, 875, 871, 872, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 966, 889, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 930, 909,
	941, 236, 899, 940, 939, 0, 237, 238, 901, 900,
	241, 242, 243, 891, 965, 244, 1002, 1003, 500, 0,
	245, 246, 972, 0, 953, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 975, 262, 263, 956,
	954, 955, 962, 958, 957, 961, 264, 265, 266, 267,
	944, 269, 937, 936, 862, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 935, 277, 0, 278, 0,
	279, 280, 0, 281, 868, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 993, 994, 880, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 934, 932, 933, 0,
	297, 0, 298, 0, 0, 976, 299, 300, 0, 301,
	1000, 0, 890, 302, 0, 303, 304, 305, 306, 1238,
	968, 971, 362, 978, 307, 308, 0, 309, 310, 311,
	911, 0, 0, 220, 312, 314, 321, 0, 977, 315,
	923, 914, 925, 927, 928, 929, 924, 0, 916, 0,
	322, 979, 969, 980, 323, 324, 325, 981, 949, 950,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 1001, 982, 336, 337, 983, 0, 338, 339,
	960, 959, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 903, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 859, 221, 986, 360, 881,
	970, 361, 938, 363, 364, 0, 912, 366, 913, 0,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 987,
	374, 988, 995, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 996, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	931, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	989, 412, 413, 414, 415, 869, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 0, 433, 434, 904,
	905, 907, 908, 429, 435, 436, 437, 963, 438, 418,
	419, 439, 440, 990, 441, 442, 926, 906, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 974, 450, 451,
	452, 997, 0, 456, 457, 455, 0, 458, 459, 460,
	461, 462, 286, 902, 0, 464, 945, 946, 947, 948,
	0, 471, 0, 465, 466, 998, 467, 999, 879, 468,
	469, 470, 0, 472, 473, 0, 863, 474, 475, 476,
	478, 479, 477, 481, 964, 482, 0, 910, 483, 484,
	485, 534, 942, 992, 0, 487, 486, 537, 0, 0,
	0, 0, 488, 489, 538, 490, 491, 492, 860, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 1233, 883, 915, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 966, 889, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 930, 909, 941, 236, 899,
	940, 939, 0, 237, 238, 901, 900, 241, 242, 243,
	891, 965, 244, 1002, 1003, 500, 0, 245, 246, 972,
	0, 953, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 956, 954, 955, 962,
	958, 957, 961, 264, 265, 266, 267, 944, 269, 937,
	936, 862, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 935, 277, 0, 278, 0, 279, 280, 0,
	281, 868, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 993, 994, 880, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 934, 932, 933, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 1000, 0, 890,
	302, 0, 303, 304, 305, 306, 1232, 968, 971, 362,
	978, 307, 308, 0, 309, 310, 311, 911, 0, 0,
	220, 312, 314, 321, 0, 977, 315, 923, 914, 925,
	927, 928, 929, 924, 0, 916, 0, 322, 979, 969,
	980, 323, 324, 325, 981, 949, 950, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 1001,
	982, 336, 337, 983, 0, 338, 339, 960, 959, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 903, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 859, 221, 986, 360, 881, 970, 361, 938,
	363, 364, 0, 912, 366, 913, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 995,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 996, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 931, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 869, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 904, 905, 907, 908,
	429, 435, 436, 437, 963, 438, 418, 419, 439, 440,
	990, 441, 442, 926, 906, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 974, 450, 451, 452, 997, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	902, 0, 464, 945, 946, 947, 948, 0, 471, 0,
	465, 466, 998, 467, 999, 879, 468, 469, 470, 0,
	472, 473, 0, 863, 474, 475, 476, 478, 479, 477,
	481, 964, 482, 0, 910, 483, 484, 485, 534, 942,
	992, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 860, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 856, 857,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	1228, 883, 915, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 856, 857, 915, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 862, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 859, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 472, 473, 0, 863, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 860, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	856, 857, 915, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 3659, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 3658, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 856, 857, 915, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 3657, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 3659, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 862, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 859, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 3658, 473, 0, 863, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 860, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	856, 857, 915, 873, 874, 875, 2561, 2562, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 856, 857, 915, 873, 874,
	875, 2559, 2560, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 862, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 859, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 472, 473, 0, 863, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 860, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	856, 857, 915, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 860, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 2022, 2023, 915, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 966, 889, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 930, 909, 941,
	236, 899, 940, 939, 0, 237, 238, 901, 900, 241,
	242, 243, 891, 965, 244, 1002, 1003, 500, 0, 245,
	246, 972, 0, 953, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 956, 954,
	955, 962, 958, 957, 961, 264, 265, 266, 267, 944,
	269, 937, 936, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 935, 277, 0, 278, 0, 279,
	280, 0, 281, 868, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 993, 994, 880, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 934, 932, 933, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 1000,
	0, 890, 302, 0, 303, 304, 305, 306, 967, 968,
	971, 362, 978, 307, 308, 0, 309, 310, 311, 911,
	0, 0, 220, 312, 314, 321, 0, 977, 315, 923,
	914, 925, 927, 928, 929, 924, 0, 916, 0, 322,
	979, 969, 980, 323, 324, 325, 981, 949, 950, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 1001, 982, 336, 337, 983, 0, 338, 339, 960,
	959, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 903, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 0, 221, 986, 360, 881, 970,
	361, 938, 363, 364, 0, 912, 366, 913, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 995, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 996, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 931,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 869, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 904, 905,
	907, 908, 429, 435, 436, 437, 963, 438, 418, 419,
	439, 440, 990, 441, 442, 926, 906, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 974, 450, 451, 452,
	997, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 902, 0, 464, 945, 946, 947, 948, 0,
	471, 0, 465, 466, 998, 467, 999, 879, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 964, 482, 0, 910, 483, 484, 485,
	534, 942, 992, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 2208, 0, 0, 0, 0, 0, 0,
	2206, 2207, 915, 873, 874, 875, 871, 872, 884, 885,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 0,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 2554,
	2555, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	0, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 915, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 1775, 1776, 0, 0, 222,
	223, 224, 225, 226, 885, 227, 0, 0, 883, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 0, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 0,
	221, 986, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 472, 473, 0,
	0, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 915, 873, 874, 875, 871, 872, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 885, 227, 0, 0, 883, 0,
	0, 966, 889, 0, 0, 0, 228, 230, 229, 231,
	232, 0, 930, 909, 941, 236, 899, 940, 939, 0,
	237, 238, 901, 900, 241, 242, 243, 891, 965, 244,
	1002, 1003, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 3659, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 944, 269, 937, 936, 862, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 935,
	277, 0, 278, 0, 279, 280, 0, 281, 868, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	880, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	934, 932, 933, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 890, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 0, 307, 308,
	0, 309, 310, 311, 911, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 923, 914, 925, 927, 928, 929,
	924, 0, 916, 0, 322, 0, 969, 0, 323, 324,
	325, 981, 949, 950, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 1001, 982, 336, 337,
	0, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 903,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 859,
	221, 0, 360, 881, 970, 361, 938, 363, 364, 0,
	912, 366, 913, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 931, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 869,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 904, 905, 907, 908, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 0, 441, 442,
	926, 906, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 974, 450, 451, 452, 997, 0, 456, 457, 455,
	0, 458, 459, 460, 461, 462, 286, 902, 0, 464,
	945, 946, 947, 948, 0, 471, 0, 465, 466, 998,
	467, 999, 879, 468, 469, 470, 0, 3658, 473, 0,
	863, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 910, 483, 484, 485, 534, 942, 992, 0, 487,
	486, 537, 0, 0, 0, 0, 488, 489, 538, 490,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 1040, 0, 0, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 883, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 965, 244,
	498, 499, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 268, 269, 502, 503, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 509, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 513, 317, 316, 318, 319, 320,
	514, 0, 515, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 1026, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 0,
	221, 986, 360, 0, 970, 361, 519, 363, 364, 0,
	365, 366, 367, 0, 1032, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 525,
	1034, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	185, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	526, 443, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 997, 0, 456, 457, 455,
	187, 458, 459, 460, 461, 462, 286, 463, 0, 464,
	528, 529, 530, 531, 0, 471, 0, 465, 466, 998,
	467, 999, 0, 468, 469, 470, 0, 472, 473, 0,
	0, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 480, 483, 484, 485, 1347, 535, 536, 0, 487,
	486, 537, 1040, 0, 0, 179, 488, 489, 538, 490,
	491, 492, 0, 180, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 966, 1030, 0, 1645, 0, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 965, 244,
	498, 499, 500, 0, 245, 246, 972, 0, 953, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	975, 262, 263, 956, 954, 955, 962, 958, 957, 961,
	264, 265, 266, 267, 268, 269, 502, 503, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 993, 994,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 0, 298, 0, 0, 976,
	299, 300, 0, 301, 1000, 0, 509, 302, 0, 303,
	304, 305, 306, 967, 968, 971, 362, 978, 307, 308,
	0, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 0, 977, 315, 513, 317, 316, 318, 319, 320,
	514, 0, 515, 0, 322, 979, 969, 980, 323, 324,
	325, 981, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 1026, 334, 333, 0, 335, 1001, 982, 336, 337,
	983, 0, 338, 339, 960, 959, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 984, 354, 355, 358, 359, 357, 985, 356, 0,
	221, 986, 360, 0, 970, 361, 519, 363, 364, 0,
	365, 366, 367, 0, 1032, 369, 370, 371, 0, 0,
	372, 373, 520, 987, 374, 988, 995, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 996,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 989, 412, 413, 414, 415, 525,
	1034, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	185, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 963, 438, 418, 419, 439, 440, 990, 441, 442,
	526, 443, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 997, 0, 456, 457, 455,
	187, 458, 459, 460, 461, 462, 286, 463, 0, 464,
	528, 529, 530, 531, 0, 471, 0, 465, 466, 998,
	467, 999, 0, 468, 469, 470, 0, 472, 473, 0,
	0, 474, 475, 476, 478, 479, 477, 481, 964, 482,
	0, 480, 483, 484, 485, 1347, 535, 536, 0, 487,
	486, 537, 2707, 0, 1040, 179, 488, 489, 538, 490,
	491, 492, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 1030, 966, 1645, 0, 0, 0, 228, 230,
	229, 231, 232, 494, 495, 233, 496, 236, 234, 235,
	497, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	965, 244, 498, 499, 500, 0, 245, 246, 972, 0,
	953, 0, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 975, 262, 263, 956, 954, 955, 962, 958,
	957, 961, 264, 265, 266, 267, 268, 269, 502, 503,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	504, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	993, 994, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 507, 295, 296, 0, 297, 0, 298, 0,
	0, 976, 299, 300, 0, 301, 1000, 0, 509, 302,
	0, 303, 304, 305, 306, 967, 968, 971, 362, 978,
	307, 308, 0, 309, 310, 311, 313, 0, 0, 220,
	312, 314, 321, 0, 977, 315, 513, 317, 316, 318,
	319, 320, 514, 0, 515, 0, 322, 979, 969, 980,
	323, 324, 325, 981, 326, 327, 0, 0, 328, 329,
	330, 331, 332, 1026, 334, 333, 0, 335, 1001, 982,
	336, 337, 983, 0, 338, 339, 960, 959, 340, 341,
	342, 343, 0, 344, 345, 347, 349, 346, 348, 350,
	352, 353, 351, 984, 354, 355, 358, 359, 357, 985,
	356, 0, 221, 986, 360, 0, 970, 361, 519, 363,
	364, 0, 365, 366, 367, 0, 1032, 369, 370, 371,
	0, 0, 372, 373, 520, 987, 374, 988, 995, 375,
	368, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	384, 996, 385, 523, 386, 387, 0, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 524, 396, 397, 0,
	398, 399, 400, 401, 402, 0, 404, 405, 406, 403,
	407, 408, 409, 410, 0, 411, 989, 412, 413, 414,
	415, 525, 1034, 0, 417, 421, 422, 423, 424, 425,
	426, 427, 0, 433, 434, 428, 430, 431, 432, 429,
	435, 436, 437, 963, 438, 418, 419, 439, 440, 990,
	441, 442, 526, 443, 444, 0, 445, 446, 447, 448,
	420, 449, 453, 454, 450, 451, 452, 997, 0, 456,
	457, 455, 0, 458, 459, 460, 461, 462, 286, 463,
	0, 464, 528, 529, 530, 531, 0, 471, 0, 465,
	466, 998, 467, 999, 0, 468, 469, 470, 0, 472,
	473, 0, 0, 474, 475, 476, 478, 479, 477, 481,
	964, 482, 0, 480, 483, 484, 485, 534, 535, 536,
	0, 487, 486, 537, 1022, 0, 1040, 0, 488, 489,
	538, 490, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 1030, 966, 1028, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 965, 244, 498, 499, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 1000, 0,
	509, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 1026, 334, 333, 0, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 221, 986, 360, 0, 970, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 1032, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 1034, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 997,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 998, 467, 999, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 1040, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 966, 1030, 0, 1028, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 965, 244, 498, 499, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 1000, 0,
	509, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 1026, 334, 333, 0, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 221, 986, 360, 0, 970, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 1032, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 1034, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 997,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 998, 467, 999, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 1040, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 966, 1030, 0, 1028, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 965, 244, 498, 499, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 1000, 0,
	509, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 221, 986, 360, 0, 970, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 1034, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 997,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 998, 467, 999, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 849, 0, 1212, 0,
	488, 489, 538, 490, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 493, 1546, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 498, 499, 500, 0,
	245, 246, 501, 0, 1103, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 975, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	268, 269, 502, 503, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 0, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 0, 298, 0, 0, 976, 299, 300, 0, 301,
	508, 0, 509, 302, 0, 303, 304, 305, 306, 510,
	511, 512, 362, 978, 307, 308, 0, 309, 310, 311,
	313, 0, 0, 0, 312, 314, 321, 0, 977, 315,
	513, 317, 316, 318, 319, 320, 514, 0, 515, 0,
	322, 979, 516, 980, 323, 324, 325, 981, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 517, 982, 336, 337, 983, 0, 338, 339,
	0, 0, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 984, 354, 355,
	358, 359, 357, 985, 356, 0, 0, 986, 360, 0,
	518, 361, 519, 363, 364, 0, 365, 366, 367, 0,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 987,
	374, 988, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 522, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	989, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 185, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 0, 438, 418,
	419, 439, 440, 990, 441, 442, 526, 443, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 0, 456, 457, 455, 187, 458, 459, 460,
	461, 462, 286, 463, 0, 464, 528, 529, 530, 531,
	0, 471, 0, 465, 466, 532, 467, 533, 0, 468,
	469, 470, 0, 472, 473, 0, 0, 474, 475, 476,
	478, 479, 477, 481, 0, 482, 0, 480, 483, 484,
	485, 1347, 535, 536, 0, 487, 486, 537, 1344, 0,
	1212, 179, 488, 489, 538, 490, 491, 492, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	154, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 1103, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 975, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 976, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 978, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 0, 312, 314, 321, 0,
	977, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 979, 516, 980, 323, 324, 325, 981,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 982, 336, 337, 983, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 984,
	354, 355, 358, 359, 357, 985, 356, 0, 0, 986,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 987, 374, 988, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 989, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 185, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 990, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 187, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 1347, 535, 536, 0, 487, 486, 537,
	0, 0, 0, 179, 488, 489, 538, 490, 491, 492,
	0, 180, 0, 0, 0, 0, 1212, 1211, 0, 0,
	0, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 498, 499, 500, 0, 245, 246,
	501, 0, 1103, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 505, 506, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 508, 0,
	509, 302, 0, 303, 304, 305, 306, 510, 511, 512,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 0, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	516, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	517, 982, 336, 337, 983, 0, 338, 339, 0, 0,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 0, 986, 360, 0, 518, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	521, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 522, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 0, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 527,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 532, 467, 533, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 0, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 0, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 1212, 1211, 0, 0,
	0, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 2913, 227,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 498, 499, 500, 0, 245, 246,
	501, 0, 1103, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 505, 506, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 508, 0,
	509, 302, 0, 303, 304, 305, 306, 510, 511, 512,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 0, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	516, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	517, 982, 336, 337, 983, 0, 338, 339, 0, 0,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 0, 986, 360, 0, 518, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	521, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 522, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 0, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 527,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 532, 467, 533, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 0, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 0, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 1212, 1211, 0, 0,
	0, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 1218, 227,
	0, 0, 0, 0, 0, 493, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 498, 499, 500, 0, 245, 246,
	501, 0, 1103, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 505, 506, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 508, 0,
	509, 302, 0, 303, 304, 305, 306, 510, 511, 512,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 0, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	516, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	517, 982, 336, 337, 983, 0, 338, 339, 0, 0,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 0, 986, 360, 0, 518, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	521, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 522, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 0, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 527,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 532, 467, 533, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 0, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 1040, 0, 0, 0,
	488, 489, 538, 490, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 966, 0, 0, 1353, 0,
	228, 230, 229, 231, 232, 494, 495, 233, 496, 236,
	234, 235, 497, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 965, 244, 498, 499, 500, 0, 245, 246,
	972, 0, 953, 0, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 975, 262, 263, 956, 954, 955,
	962, 958, 957, 961, 264, 265, 266, 267, 268, 269,
	502, 503, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 504, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 993, 994, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 507, 295, 296, 0, 297, 0,
	298, 0, 0, 976, 299, 300, 0, 301, 1000, 0,
	509, 302, 0, 303, 304, 305, 306, 967, 968, 971,
	362, 978, 307, 308, 0, 309, 310, 311, 313, 0,
	0, 220, 312, 314, 321, 0, 977, 315, 513, 317,
	316, 318, 319, 320, 514, 0, 515, 0, 322, 979,
	969, 980, 323, 324, 325, 981, 326, 327, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	1001, 982, 336, 337, 983, 0, 338, 339, 960, 959,
	340, 341, 342, 343, 0, 344, 345, 347, 349, 346,
	348, 350, 352, 353, 351, 984, 354, 355, 358, 359,
	357, 985, 356, 0, 221, 986, 360, 0, 970, 361,
	519, 363, 364, 0, 365, 366, 367, 0, 0, 369,
	370, 371, 0, 0, 372, 373, 520, 987, 374, 988,
	995, 375, 368, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 384, 996, 385, 523, 386, 387, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 524, 396,
	397, 0, 398, 399, 400, 401, 402, 0, 404, 405,
	406, 403, 407, 408, 409, 410, 0, 411, 989, 412,
	413, 414, 415, 525, 416, 0, 417, 421, 422, 423,
	424, 425, 426, 427, 0, 433, 434, 428, 430, 431,
	432, 429, 435, 436, 437, 963, 438, 418, 419, 439,
	440, 990, 441, 442, 526, 443, 444, 0, 445, 446,
	447, 448, 420, 449, 453, 454, 450, 451, 452, 997,
	0, 456, 457, 455, 0, 458, 459, 460, 461, 462,
	286, 463, 0, 464, 528, 529, 530, 531, 0, 471,
	0, 465, 466, 998, 467, 999, 0, 468, 469, 470,
	0, 472, 473, 0, 0, 474, 475, 476, 478, 479,
	477, 481, 964, 482, 0, 480, 483, 484, 485, 534,
	535, 536, 0, 487, 486, 537, 849, 0, 216, 0,
	488, 489, 538, 490, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 498, 499, 500, 0,
	245, 246, 501, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	268, 269, 502, 503, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 0, 298, 0, 0, 0, 299, 300, 0, 301,
	508, 0, 509, 302, 0, 303, 304, 305, 306, 510,
	511, 512, 362, 0, 307, 308, 0, 309, 310, 311,
	313, 0, 0, 0, 312, 314, 321, 0, 0, 315,
	513, 317, 316, 318, 319, 320, 514, 0, 515, 0,
	322, 0, 516, 0, 323, 324, 325, 0, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 517, 0, 336, 337, 0, 0, 338, 339,
	0, 0, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 0, 354, 355,
	358, 359, 357, 0, 356, 0, 0, 0, 360, 0,
	518, 361, 519, 363, 364, 0, 365, 366, 367, 0,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 0,
	374, 0, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 522, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	0, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 185, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 0, 438, 418,
	419, 439, 440, 0, 441, 442, 526, 443, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 0, 456, 457, 455, 187, 458, 459, 460,
	461, 462, 286, 463, 0, 464, 528, 529, 530, 531,
	0, 471, 0, 465, 466, 532, 467, 533, 0, 468,
	469, 470, 0, 472, 473, 0, 0, 474, 475, 476,
	478, 479, 477, 481, 0, 482, 0, 480, 483, 484,
	485, 1347, 535, 536, 0, 487, 486, 537, 216, 0,
	0, 179, 488, 489, 538, 490, 491, 492, 0, 180,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 493, 0, 0,
	154, 0, 228, 230, 229, 231, 232, 494, 495, 233,
	496, 236, 234, 235, 497, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 498, 499, 500, 0,
	245, 246, 501, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	268, 269, 502, 503, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 504, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 505, 506, 0, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 507, 295, 296, 0,
	297, 0, 298, 0, 0, 0, 299, 300, 0, 301,
	508, 0, 509, 302, 0, 303, 304, 305, 306, 510,
	511, 512, 362, 0, 307, 308, 0, 309, 310, 311,
	313, 0, 0, 220, 312, 314, 321, 0, 0, 315,
	513, 317, 316, 318, 319, 320, 514, 0, 515, 0,
	322, 0, 516, 0, 323, 324, 325, 0, 326, 327,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 517, 0, 336, 337, 0, 0, 338, 339,
	0, 0, 340, 341, 342, 343, 0, 344, 345, 347,
	349, 346, 348, 350, 352, 353, 351, 0, 354, 355,
	358, 359, 357, 0, 356, 0, 221, 0, 360, 0,
	518, 361, 519, 363, 364, 0, 365, 366, 367, 0,
	0, 369, 370, 371, 0, 0, 372, 373, 520, 0,
	374, 0, 521, 375, 368, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 384, 522, 385, 523, 386, 387,
	0, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	524, 396, 397, 0, 398, 399, 400, 401, 402, 0,
	404, 405, 406, 403, 407, 408, 409, 410, 0, 411,
	0, 412, 413, 414, 415, 525, 416, 0, 417, 421,
	422, 423, 424, 425, 426, 427, 0, 433, 434, 428,
	430, 431, 432, 429, 435, 436, 437, 0, 438, 418,
	419, 439, 440, 0, 441, 442, 526, 443, 444, 0,
	445, 446, 447, 448, 420, 449, 453, 454, 450, 451,
	452, 527, 0, 456, 457, 455, 0, 458, 459, 460,
	461, 462, 286, 463, 0, 464, 528, 529, 530, 531,
	0, 471, 0, 465, 466, 532, 467, 533, 0, 468,
	469, 470, 0, 472, 473, 0, 0, 474, 475, 476,
	478, 479, 477, 481, 0, 482, 0, 480, 483, 484,
	485, 534, 535, 536, 0, 487, 486, 537, 1298, 0,
	216, 0, 488, 489, 538, 490, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	1659, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 220, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 221, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	216, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	1302, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 220, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 221, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	216, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	2862, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 220, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 221, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	216, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	1302, 0, 0, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 0, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 0, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	216, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	0, 0, 2459, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 0, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 0, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	216, 0, 0, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 493,
	0, 0, 3001, 0, 228, 230, 229, 231, 232, 494,
	495, 233, 496, 236, 234, 235, 497, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 498, 499,
	500, 0, 245, 246, 501, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 502, 503, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 504, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 505, 506, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 507, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 508, 0, 509, 302, 0, 303, 304, 305,
	306, 510, 511, 512, 362, 0, 307, 308, 0, 309,
	310, 311, 313, 0, 0, 0, 312, 314, 321, 0,
	0, 315, 513, 317, 316, 318, 319, 320, 514, 0,
	515, 0, 322, 0, 516, 0, 323, 324, 325, 0,
	326, 327, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 517, 0, 336, 337, 0, 0,
	338, 339, 0, 0, 340, 341, 342, 343, 0, 344,
	345, 347, 349, 346, 348, 350, 352, 353, 351, 0,
	354, 355, 358, 359, 357, 0, 356, 0, 0, 0,
	360, 0, 518, 361, 519, 363, 364, 0, 365, 366,
	367, 0, 0, 369, 370, 371, 0, 0, 372, 373,
	520, 0, 374, 0, 521, 375, 368, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 384, 522, 385, 523,
	386, 387, 0, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 524, 396, 397, 0, 398, 399, 400, 401,
	402, 0, 404, 405, 406, 403, 407, 408, 409, 410,
	0, 411, 0, 412, 413, 414, 415, 525, 416, 0,
	417, 421, 422, 423, 424, 425, 426, 427, 0, 433,
	434, 428, 430, 431, 432, 429, 435, 436, 437, 0,
	438, 418, 419, 439, 440, 0, 441, 442, 526, 443,
	444, 0, 445, 446, 447, 448, 420, 449, 453, 454,
	450, 451, 452, 527, 0, 456, 457, 455, 0, 458,
	459, 460, 461, 462, 286, 463, 0, 464, 528, 529,
	530, 531, 0, 471, 0, 465, 466, 532, 467, 533,
	0, 468, 469, 470, 0, 472, 473, 0, 0, 474,
	475, 476, 478, 479, 477, 481, 0, 482, 0, 480,
	483, 484, 485, 534, 535, 536, 0, 487, 486, 537,
	718, 0, 612, 0, 488, 489, 538, 490, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 493, 1927, 0, 0, 0, 228, 230, 229, 231,
	232, 494, 495, 233, 496, 236, 234, 235, 497, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	498, 499, 500, 0, 245, 246, 501, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 618, 267, 268, 269, 502, 503, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 504, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 505, 506,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	507, 295, 296, 0, 297, 0, 298, 0, 716, 0,
	299, 300, 0, 301, 508, 0, 509, 302, 0, 303,
	304, 305, 306, 510, 511, 512, 362, 0, 307, 308,
	0, 309, 310, 311, 313, 0, 0, 220, 312, 314,
	321, 0, 0, 315, 513, 317, 316, 318, 319, 320,
	514, 0, 515, 0, 322, 0, 516, 0, 323, 324,
	325, 0, 326, 327, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 517, 0, 336, 337,
	0, 0, 338, 339, 0, 0, 340, 341, 342, 343,
	0, 344, 345, 347, 349, 346, 348, 350, 352, 353,
	351, 0, 354, 355, 358, 359, 357, 0, 356, 0,
	221, 0, 360, 0, 518, 361, 519, 363, 364, 0,
	365, 366, 367, 0, 0, 369, 370, 371, 0, 0,
	372, 373, 520, 0, 374, 0, 521, 375, 368, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 384, 522,
	385, 523, 386, 387, 0, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 524, 396, 397, 0, 398, 399,
	400, 401, 402, 0, 404, 405, 406, 403, 407, 408,
	409, 410, 0, 411, 0, 412, 413, 414, 415, 525,
	416, 0, 417, 421, 422, 423, 424, 425, 426, 427,
	0, 433, 434, 428, 430, 431, 432, 429, 435, 436,
	437, 0, 438, 418, 419, 439, 440, 0, 441, 442,
	526, 443, 444, 0, 445, 446, 447, 448, 420, 449,
	453, 454, 450, 451, 452, 527, 0, 456, 457, 455,
	617, 458, 459, 460, 461, 462, 286, 463, 0, 464,
	528, 529, 530, 531, 0, 471, 0, 465, 466, 532,
	467, 533, 0, 468, 469, 470, 0, 472, 473, 0,
	0, 474, 475, 476, 478, 479, 477, 481, 0, 482,
	0, 480, 483, 484, 485, 534, 535, 536, 0, 487,
	486, 537, 0, 611, 0, 612, 488, 489, 538, 490,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 621, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 618, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 617, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 609, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 1212, 1211, 0, 0, 0,
	0, 1209, 0, 0, 0, 0, 0, 0, 0, 0,
	621, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 1103, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	978, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 977, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 979, 516,
	980, 323, 324, 325, 981, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	982, 336, 337, 983, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 0, 0, 986, 360, 3140, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	990, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 1212, 1211, 0, 0, 0,
	0, 1209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 1103, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	978, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 977, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 979, 516,
	980, 323, 324, 325, 981, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	982, 336, 337, 983, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 0, 0, 986, 360, 2842, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	990, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 612, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 618, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 1961, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 617,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 612, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 621, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 618, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 617,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 1380, 0, 1212, 1211, 0, 0, 0, 0, 1209,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 1103,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 975, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 219, 0, 0, 0, 0, 0, 1379, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	976, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 978, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 977, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 979, 516, 980, 323,
	324, 325, 981, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 982, 336,
	337, 983, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 984, 354, 355, 358, 359, 357, 985, 356,
	0, 0, 986, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 987, 374, 988, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 1378, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 989, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 1377, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 990, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 1341, 0, 1212, 1211, 0, 0, 0,
	0, 1209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 1103, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 1340, 511, 512, 362,
	978, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 977, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 979, 516,
	980, 323, 324, 325, 981, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	982, 336, 337, 983, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 0, 0, 986, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	990, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 1278, 0, 1212, 1211, 0,
	0, 0, 0, 1209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 1103, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 975, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 976, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 1277, 511,
	512, 362, 978, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 977, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	979, 516, 980, 323, 324, 325, 981, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 982, 336, 337, 983, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 984, 354, 355, 358,
	359, 357, 985, 356, 0, 0, 986, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 987, 374,
	988, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 989,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 990, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 1207, 0, 1212,
	1211, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 1103, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 975, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 976, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	1206, 511, 512, 362, 978, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 977,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 979, 516, 980, 323, 324, 325, 981, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 982, 336, 337, 983, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 984, 354,
	355, 358, 359, 357, 985, 356, 0, 0, 986, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	987, 374, 988, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 989, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 990, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 1212,
	1211, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 1103, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 975, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 976, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 978, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 977,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 979, 516, 980, 323, 324, 325, 981, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 982, 336, 337, 983, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 984, 354,
	355, 358, 359, 357, 985, 356, 0, 0, 986, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	987, 374, 988, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 989, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 990, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 1212, 1211, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	621, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 1103, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 1748, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	978, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 977, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 979, 516,
	980, 323, 324, 325, 981, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	982, 336, 337, 983, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 0, 0, 986, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	990, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 1212, 1211, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 1103, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 975, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 976, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	978, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 977, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 979, 516,
	980, 323, 324, 325, 981, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	982, 336, 337, 983, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 984, 354, 355, 358, 359, 357,
	985, 356, 0, 0, 986, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 987, 374, 988, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 989, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	990, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 1212, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 1103, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 975,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 976, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 978, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 977, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 979, 516, 980, 323, 324, 325,
	981, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 982, 336, 337, 983,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	984, 354, 355, 358, 359, 357, 985, 356, 0, 0,
	986, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 987, 374, 988, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 989, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 990, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 2334, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 2331, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 2338, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 2495, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 2337, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 2492, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 2494,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 2491, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 2336,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 2493, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 2334, 245, 246, 501, 0, 0,
	2328, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 2331, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 2338, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 2337, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 2327, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 2336, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 2335, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 1437, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 1440, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 1438, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 1439, 486, 537, 1188, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 1190, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 220, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 221, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 1032,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 1185, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	1187, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 220, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 221, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 1032, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 1091,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 1093, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 1032, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 567, 0, 216, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 566, 226, 556, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 559,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 560, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 561, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 555, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 556, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 559, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 560, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 561, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 216, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 2824, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 220, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 221, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 1032,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 2431, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	2430, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 220, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 221, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 1937,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 220, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 221, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 1868, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 1873, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	1872, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 220, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 221, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 1861,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 1863, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 220, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 221,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 1332, 0, 216, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 1331, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 220, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 221, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 1329, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 1328, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 1325, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 1324, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 220, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 221, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 1199, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	1201, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 220, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 221, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 216, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 559, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 560, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 561,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 1968, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 220, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 221, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 1966, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 220, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 221, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 216,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 1964,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 220, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 221, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 1911, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	220, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 221, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 709, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 708, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 707, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 2495, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 3338, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 546, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 545, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 544, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 216, 3347, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 216, 2482, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 216, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 3128, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 2259, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 216, 2482, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 2479, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 1945, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 1935, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 587, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 1069, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 1067, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 588, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	584, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 1070, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 583, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 587, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 577, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 588, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 584, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 1352, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 583, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 1338,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 1337, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 1286, 0, 216, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 1285, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 1271, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 1270, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 1266, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 1193, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 587,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 1069, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 1067, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 588,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 584, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 1070, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 583,
	529, 530, 531, 0, 471, 0, 465, 1068, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 1051,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 593, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 0,
	487, 486, 537, 587, 0, 216, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 577, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 575, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 576, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 588, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 578, 416, 0, 417, 421, 422, 584, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 579, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 583, 529, 530, 531, 0, 471, 0,
	465, 581, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 571, 0, 216, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 510, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 572, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 0, 487, 486, 537, 569, 0, 216,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 0, 487, 486, 537, 563,
	0, 216, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 0, 487, 486,
	537, 541, 0, 216, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 510, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 216,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 2877, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 216, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 2800, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 438, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 2798, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 2784, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 216,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	2439, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 396, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	302, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 416, 0, 417, 572, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 216, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	493, 0, 1893, 0, 0, 228, 230, 229, 231, 232,
	494, 495, 233, 496, 236, 234, 235, 497, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 498,
	499, 500, 0, 245, 246, 501, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 502, 503, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 504, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 505, 506, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 507,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 508, 0, 509, 302, 0, 303, 304,
	305, 306, 510, 511, 512, 362, 0, 307, 308, 0,
	309, 310, 311, 313, 0, 0, 0, 312, 314, 321,
	0, 0, 315, 513, 317, 316, 318, 319, 320, 514,
	0, 515, 0, 322, 0, 516, 0, 323, 324, 325,
	0, 326, 327, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 517, 0, 336, 337, 0,
	0, 338, 339, 0, 0, 340, 341, 342, 343, 0,
	344, 345, 347, 349, 346, 348, 350, 352, 353, 351,
	0, 354, 355, 358, 359, 357, 0, 356, 0, 0,
	0, 360, 0, 518, 361, 519, 363, 364, 0, 365,
	366, 367, 0, 0, 369, 370, 371, 0, 0, 372,
	373, 520, 0, 374, 0, 521, 375, 368, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 384, 522, 385,
	523, 386, 387, 0, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 524, 396, 397, 0, 398, 399, 400,
	401, 402, 0, 404, 405, 406, 403, 407, 408, 409,
	410, 0, 411, 0, 412, 413, 414, 415, 525, 416,
	0, 417, 421, 422, 423, 424, 425, 426, 427, 0,
	433, 434, 428, 430, 431, 432, 429, 435, 436, 437,
	0, 0, 418, 419, 439, 440, 0, 441, 442, 526,
	443, 444, 0, 445, 446, 447, 448, 420, 449, 453,
	454, 450, 451, 452, 527, 0, 456, 457, 455, 0,
	458, 459, 460, 461, 462, 286, 463, 0, 464, 528,
	529, 530, 531, 0, 471, 0, 465, 466, 532, 467,
	533, 0, 468, 469, 470, 0, 472, 473, 0, 0,
	474, 475, 476, 478, 479, 477, 481, 0, 482, 0,
	480, 483, 484, 485, 534, 535, 536, 216, 487, 486,
	537, 0, 0, 0, 0, 488, 489, 538, 490, 491,
	492, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 494, 495, 233, 496,
	236, 234, 235, 497, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 498, 499, 500, 0, 245,
	246, 501, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 502, 503, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 504, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 505, 506, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 507, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 508,
	0, 509, 302, 0, 303, 304, 305, 306, 1308, 511,
	512, 362, 0, 307, 308, 0, 309, 310, 311, 313,
	0, 0, 0, 312, 314, 321, 0, 0, 315, 513,
	317, 316, 318, 319, 320, 514, 0, 515, 0, 322,
	0, 516, 0, 323, 324, 325, 0, 326, 327, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 517, 0, 336, 337, 0, 0, 338, 339, 0,
	0, 340, 341, 342, 343, 0, 344, 345, 347, 349,
	346, 348, 350, 352, 353, 351, 0, 354, 355, 358,
	359, 357, 0, 356, 0, 0, 0, 360, 0, 518,
	361, 519, 363, 364, 0, 365, 366, 367, 0, 0,
	369, 370, 371, 0, 0, 372, 373, 520, 0, 374,
	0, 521, 375, 368, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 384, 522, 385, 523, 386, 387, 0,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 524,
	396, 397, 0, 398, 399, 400, 401, 402, 0, 404,
	405, 406, 403, 407, 408, 409, 410, 0, 411, 0,
	412, 413, 414, 415, 525, 416, 0, 417, 421, 422,
	423, 424, 425, 426, 427, 0, 433, 434, 428, 430,
	431, 432, 429, 435, 436, 437, 0, 438, 418, 419,
	439, 440, 0, 441, 442, 526, 443, 444, 0, 445,
	446, 447, 448, 420, 449, 453, 454, 450, 451, 452,
	527, 0, 456, 457, 455, 0, 458, 459, 460, 461,
	462, 286, 463, 0, 464, 528, 529, 530, 531, 0,
	471, 0, 465, 466, 532, 467, 533, 0, 468, 469,
	470, 0, 472, 473, 0, 0, 474, 475, 476, 478,
	479, 477, 481, 0, 482, 0, 480, 483, 484, 485,
	534, 535, 536, 216, 487, 486, 537, 0, 0, 0,
	0, 488, 489, 538, 490, 491, 492, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 494, 495, 233, 496, 236, 234, 235, 497,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 498, 499, 500, 0, 245, 246, 501, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 502, 503, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 504,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 505,
	506, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 507, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 508, 0, 509, 302, 0,
	303, 304, 305, 306, 1248, 511, 512, 362, 0, 307,
	308, 0, 309, 310, 311, 313, 0, 0, 0, 312,
	314, 321, 0, 0, 315, 513, 317, 316, 318, 319,
	320, 514, 0, 515, 0, 322, 0, 516, 0, 323,
	324, 325, 0, 326, 327, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 517, 0, 336,
	337, 0, 0, 338, 339, 0, 0, 340, 341, 342,
	343, 0, 344, 345, 347, 349, 346, 348, 350, 352,
	353, 351, 0, 354, 355, 358, 359, 357, 0, 356,
	0, 0, 0, 360, 0, 518, 361, 519, 363, 364,
	0, 365, 366, 367, 0, 0, 369, 370, 371, 0,
	0, 372, 373, 520, 0, 374, 0, 521, 375, 368,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 384,
	522, 385, 523, 386, 387, 0, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 524, 396, 397, 0, 398,
	399, 400, 401, 402, 0, 404, 405, 406, 403, 407,
	408, 409, 410, 0, 411, 0, 412, 413, 414, 415,
	525, 416, 0, 417, 421, 422, 423, 424, 425, 426,
	427, 0, 433, 434, 428, 430, 431, 432, 429, 435,
	436, 437, 0, 438, 418, 419, 439, 440, 0, 441,
	442, 526, 443, 444, 0, 445, 446, 447, 448, 420,
	449, 453, 454, 450, 451, 452, 527, 0, 456, 457,
	455, 0, 458, 459, 460, 461, 462, 286, 463, 0,
	464, 528, 529, 530, 531, 0, 471, 0, 465, 466,
	532, 467, 533, 0, 468, 469, 470, 0, 472, 473,
	0, 0, 474, 475, 476, 478, 479, 477, 481, 0,
	482, 0, 480, 483, 484, 485, 534, 535, 536, 216,
	487, 486, 537, 0, 0, 0, 0, 488, 489, 538,
	490, 491, 492, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 494, 495,
	233, 496, 236, 234, 235, 497, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 498, 499, 500,
	0, 245, 246, 501, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 502, 503, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 504, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 505, 506, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 507, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 508, 0, 509, 302, 0, 303, 304, 305, 306,
	510, 511, 512, 362, 0, 307, 308, 0, 309, 310,
	311, 313, 0, 0, 0, 312, 314, 321, 0, 0,
	315, 513, 317, 316, 318, 319, 320, 514, 0, 515,
	0, 322, 0, 516, 0, 323, 324, 325, 0, 326,
	327, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 517, 0, 336, 337, 0, 0, 338,
	339, 0, 0, 340, 341, 342, 343, 0, 344, 345,
	347, 349, 346, 348, 350, 352, 353, 351, 0, 354,
	355, 358, 359, 357, 0, 356, 0, 0, 0, 360,
	0, 518, 361, 519, 363, 364, 0, 365, 366, 367,
	0, 0, 369, 370, 371, 0, 0, 372, 373, 520,
	0, 374, 0, 521, 375, 368, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 384, 522, 385, 523, 386,
	387, 0, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 524, 1005, 397, 0, 398, 399, 400, 401, 402,
	0, 404, 405, 406, 403, 407, 408, 409, 410, 0,
	411, 0, 412, 413, 414, 415, 525, 416, 0, 417,
	421, 422, 423, 424, 425, 426, 427, 0, 433, 434,
	428, 430, 431, 432, 429, 435, 436, 437, 0, 438,
	418, 419, 439, 440, 0, 441, 442, 526, 443, 444,
	0, 445, 446, 447, 448, 420, 449, 453, 454, 450,
	451, 452, 527, 0, 456, 457, 455, 0, 458, 459,
	460, 461, 462, 286, 463, 0, 464, 528, 529, 530,
	531, 0, 471, 0, 465, 466, 532, 467, 533, 0,
	468, 469, 470, 0, 472, 473, 0, 0, 474, 475,
	476, 478, 479, 477, 481, 0, 482, 0, 480, 483,
	484, 485, 534, 535, 536, 216, 487, 486, 537, 0,
	0, 0, 0, 488, 489, 538, 490, 491, 492, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 494, 495, 233, 496, 236, 234,
	235, 497, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 498, 499, 500, 0, 245, 246, 501,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 502,
	503, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 504, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 505, 506, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 507, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 508, 0, 509,
	0, 0, 303, 304, 305, 306, 510, 511, 512, 362,
	0, 307, 308, 0, 309, 310, 311, 313, 0, 0,
	0, 312, 314, 321, 0, 0, 315, 513, 317, 316,
	318, 319, 320, 514, 0, 515, 0, 322, 0, 516,
	0, 323, 324, 325, 0, 326, 327, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 517,
	0, 336, 337, 0, 0, 338, 339, 0, 0, 340,
	341, 342, 343, 0, 344, 345, 347, 349, 346, 348,
	350, 352, 353, 351, 0, 354, 355, 358, 359, 357,
	0, 356, 0, 0, 0, 360, 0, 518, 361, 519,
	363, 364, 0, 365, 366, 367, 0, 0, 369, 370,
	371, 0, 0, 372, 373, 520, 0, 374, 0, 521,
	375, 368, 376, 377, 0, 379, 380, 381, 382, 0,
	383, 384, 522, 385, 523, 386, 387, 0, 388, 0,
	389, 390, 391, 392, 0, 394, 395, 524, 396, 397,
	0, 398, 399, 400, 401, 402, 0, 404, 405, 406,
	403, 407, 408, 409, 410, 0, 411, 0, 412, 413,
	414, 415, 525, 0, 0, 417, 421, 422, 423, 424,
	425, 426, 427, 0, 433, 434, 428, 430, 431, 432,
	429, 435, 436, 437, 0, 438, 418, 419, 439, 440,
	0, 441, 442, 526, 443, 444, 0, 445, 446, 447,
	448, 420, 449, 453, 454, 450, 451, 452, 527, 0,
	456, 457, 455, 0, 458, 459, 460, 461, 462, 286,
	463, 0, 464, 528, 529, 530, 531, 0, 471, 0,
	465, 466, 532, 467, 533, 0, 468, 469, 470, 0,
	472, 473, 0, 0, 474, 475, 476, 478, 479, 477,
	481, 0, 482, 0, 480, 483, 484, 485, 534, 535,
	536, 0, 487, 486, 537, 0, 0, 0, 0, 488,
	489, 538, 490, 491, 492, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 1518, 1513, 0, 0, 0, 0, 0,
	1501, 1485, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 0, 0, 1532, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 1532, 1520, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 0, 0, 0, 1530, 0, 1499,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 1523, 0, 0, 0, 0, 1511, 1518,
	1513, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 1531, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 1523, 0, 0, 1482, 1483, 1504, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 1531, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1484, 0, 2645, 0, 0, 0, 0,
	0, 0, 1504, 0, 1507, 1508, 1509, 1510, 0, 0,
	1501, 0, 0, 0, 1490, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 1522, 0,
	0, 1532, 0, 0, 2123, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 1507,
	1508, 1509, 1510, 0, 0, 1499, 1500, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1522, 0, 0, 1532, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 1519,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 0,
	0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1511,
	1518, 1513, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 1531, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 1484,
	0, 0, 0, 1523, 0, 0, 0, 0, 1504, 1518,
	1513, 0, 0, 0, 0, 0, 1501, 1485, 0, 0,
	0, 0, 1531, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 3603, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 1522,
	0, 3522, 1532, 0, 0, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 1532, 1520, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 1530, 0, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 1523,
	0, 0, 0, 0, 1511, 1518, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 1531, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 1523, 0,
	0, 1482, 1483, 1504, 1515, 1516, 1517, 1525, 1526, 1527,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 1531, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 3521, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	1507, 1508, 1509, 1510, 0, 0, 1501, 0, 0, 0,
	1490, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 1522, 0, 3404, 1532, 0, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 1529, 1507, 1508, 1509, 1510, 0,
	0, 1499, 1500, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1522,
	0, 0, 1532, 0, 0, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 1519, 1499, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1523, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 0, 0, 1531,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 1484, 0, 0, 0, 1523,
	0, 0, 0, 0, 1504, 1518, 1513, 0, 0, 0,
	0, 0, 1501, 1485, 0, 0, 0, 0, 1531, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	0, 0, 3301, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 1522, 0, 3254, 1532, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 0, 1532, 1520, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 1529, 0, 0, 0, 0, 1530,
	0, 1499, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 1523, 0, 0, 0, 0,
	1511, 1518, 1513, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 0, 0, 1531, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 1523, 0, 0, 1482, 1483, 1504,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 0, 0, 1531,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 0, 3253, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 1507, 1508, 1509, 1510,
	0, 0, 1501, 0, 0, 0, 1490, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	1522, 0, 3252, 1532, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 1507, 1508, 1509, 1510, 0, 0, 1499, 1500, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1522, 0, 0, 1532, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 1519, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1523, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 1531, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 1484, 0, 0, 0, 1523, 0, 0, 0, 0,
	1504, 1518, 1513, 0, 0, 0, 0, 0, 1501, 1485,
	0, 0, 0, 0, 1531, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 3008, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 1522, 0, 2643, 1532, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 0, 1499, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 1520, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 0, 0, 0, 1530, 0, 1499, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 1523, 0, 0, 0, 0, 1511, 1518, 1513, 0,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 0,
	1531, 0, 0, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	1523, 0, 0, 1482, 1483, 1504, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 1531, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 2642,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1507, 1508, 1509, 1510, 0, 0, 1501, 0,
	0, 0, 1490, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 1522, 0, 2641, 1532,
	0, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 1507, 1508, 1509,
	1510, 0, 0, 1499, 1500, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1522, 0, 0, 1532, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 1519, 1499, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 0, 0, 0,
	1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 1518,
	1513, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 1531, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 1523, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 0, 0, 0, 2640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 3717, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 2598, 1522, 0,
	0, 1532, 0, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 1518, 1513, 0, 1499, 1500, 0, 2569, 0,
	1485, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1530, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2570, 0,
	0, 3716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 1522, 0, 0, 1532, 0, 0, 0, 1523, 1512,
	1514, 1518, 1513, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 0, 1499, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 1520, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 1505, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 1519, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 2690, 0,
	0, 2689, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 1506, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 1523, 0, 0, 0, 2233, 0, 1499, 1500, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 1518, 1513, 1505, 0, 0, 2232, 0, 0, 1485,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1519, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1521, 1501, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 1483, 1506, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 1518, 1513, 0, 0, 0, 1490, 0, 0, 1485,
	1523, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 1512, 1514,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 1530, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 1482, 1483, 1506, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 1518, 1513, 1505, 0, 0, 0, 0, 0, 1485,
	1523, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1519, 846, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 1506, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527,
	1522, 0, 0, 1532, 0, 0, 0, 0, 1512, 1514,
	1518, 1513, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 1520, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 1505, 0, 1521, 1501, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	2696, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 0, 1532, 0, 1506, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 1528, 0, 1529,
	1523, 0, 0, 1518, 1513, 0, 1499, 1500, 2691, 0,
	0, 1485, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 2987, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 1530, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 1532, 0, 0, 0, 1523,
	1512, 1514, 0, 0, 0, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	1528, 0, 1529, 0, 0, 0, 1518, 1513, 0, 1499,
	1500, 0, 0, 0, 1485, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 1530, 0, 0, 0,
	0, 0, 1501, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 1519, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 1522, 0, 0, 1532, 0,
	0, 0, 1523, 1512, 1514, 1518, 1513, 0, 0, 0,
	2644, 0, 0, 1485, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 1520, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 1505, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 1519, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 2658, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 0, 1532, 0, 1506,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 1528, 0, 1529, 1523, 0, 0, 1518, 1513,
	0, 1499, 1500, 0, 0, 0, 1485, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 1530, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 1522, 0, 0,
	1532, 0, 0, 0, 1523, 1512, 1514, 1518, 1513, 0,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	1520, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	1505, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 1519, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 0, 0, 1532,
	0, 1506, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527,
	0, 0, 0, 0, 1528, 0, 1529, 1523, 0, 0,
	0, 1513, 0, 1499, 1500, 0, 0, 0, 1485, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	1530, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 0, 1532, 0, 0, 0, 1523, 1512, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 1701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 1718, 1695, 1702, 0, 1685, 1728, 1727, 0, 0,
	0, 1687, 1686, 1506, 0, 0, 0, 0, 0, 1738,
	1739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1729, 0, 1725, 1724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1723, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1722,
	1720, 1721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 1697, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1711, 1700, 1713, 1715, 1716, 1717, 1712,
	0, 1705, 0, 0, 0, 754, 0, 790, 0, 0,
	0, 1734, 1735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 773, 759, 0, 0, 0, 1689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1726, 0, 0, 0, 1698,
	760, 1699, 0, 0, 0, 763, 0, 0, 0, 796,
	0, 0, 0, 0, 0, 0, 0, 770, 771, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 791, 765, 0,
	0, 0, 0, 1719, 0, 0, 0, 1708, 1706, 1707,
	1710, 1709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1690, 1691, 1693, 1694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 1714,
	1692, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	1737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 767, 768, 0, 0, 1688, 0, 0, 1730,
	1731, 1732, 1733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 775, 774, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	1696, 0, 0, 0, 0, 1703, 1736, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 787, 788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 781, 0,
	0, 778, 0, 0, 0, 0, 0, 779, 0, 0,
	0, 0, 0, 0, 756, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 780, 0, 0, 0, 777, 0, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 0, 0,
	0, 0, 0, 782, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 786,
}
var sqlPact = [...]int{

	4359, -1000, -1000, -1000, -1000, -1000, -1000, 226, 222, 214,
	212, 211, 209, 204, 203, -1000, -1000, -1000, -1000, -1000,
	200, -1000, -1000, 199, -1000, 198, 193, 191, 183, -1000,
	179, 177, 175, -1000, -1000, -1000, -1000, 174, 172, 170,
	60571, 1760, 73759, 64071, 1769, 55291, 73317, 54849, 72875, 72433,
	169, -1000, 71991, 168, 167, 166, -1000, 71549, -1000, -1000,
	164, 2332, 45981, 162, 160, 157, 2407, 156, -1000, 154,
	-1000, 8347, 1332, -1000, 153, -1000, 5770, 4501, 63193, 2251,
	152, 141, 45538, 2230, 2270, -1000, -1000, 1627, -1000, -1000,
	138, 137, 136, 135, 133, 130, 129, 128, 119, -1000,
	118, 113, 111, 108, 106, 105, 102, -1000, 100, 99,
	97, 96, 95, 93, 92, 86, 85, 84, 80, 78,
	-1000, 84843, 1553, 1442, 1437, 1432, 1428, 1426, 905, 77,
	76, 72, 71, 70, 69, 67, -1000, 65, 61, 59,
	58, 53, -1000, 52, 44, 151, 43, 42, 38, 33,
	32, 2344, -1000, 1327, 540, 22164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78555,
	74195, 30, -42, 26, -1000, 2585, 908, 38012, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 467, -1000,
	-1000, -1000, 268, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1461,
	698, -1000, -1000, -1000, 71113, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1758, -27, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 697, -1000, 1757, 171, 1648, -1000, -1000, -1000,
	-1000, -1000, 74195, -1000, -1000, 2948, 2947, 1731, 695, 70677,
	-1000, 1305, -1000, 851, 24966, -1000, 1064, -1000, 24966, 267,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54407, 16528,
	53965, 53523, 70235, 16076, 60135, 49565, -1000, -1000, -1000, 40682,
	1086, -1000, -1000, -1000, -1000, -1000, 5, 50451, 74195, -1000,
	266, -1000, -1000, -1000, -1000, -1000, -1000, 31608, 528, 31131,
	539, 30654, 335, -1000, -1000, -1000, 2946, 2945, 1004, 2944,
	2528, 78119, 1473, 2941, 1418, 1074, 915, 2940, 2939, 2938,
	2937, 2936, 2935, 1186, 69793, 2329, 69351, 1338, 49113, 60571,
	60571, 2061, 68909, 1142, 1139, -1000, -1000, -1000, -1000, 2365,
	2259, 2240, 42896, -1000, 2928, 2925, 2921, 2918, 2913, 77683,
	1434, 2907, 1977, 2904, 2903, 2902, 2900, 2894, 2892, 2891,
	2890, 2889, -1000, 59693, 59251, 58809, 2644, 68467, 48661, -1000,
	-1000, -1000, 39776, 5329, 4370, 68025, 41132, 60571, 60571, -1000,
	-1000, 32073, 115, -1000, -1000, -1000, 40682, 2234, -1000, 32073,
	115, -1000, 74195, -1000, 2326, 1550, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2109, 1369, 2800, 48209,
	1753, 1205, 2583, 2362, 2352, 1316, 1947, 2335, 2320, 2319,
	2313, 2311, 1400, 2011, 526, 21687, 1331, 1318, 2307, 2305,
	2808, 1588, 1668, 53081, 2887, 2886, 2561, 2301, 2289, 2233,
	-1000, -1000, -1000, -1000, 1276, -1000, -1000, 56163, -1000, -1000,
	1087, -1000, -1000, 1087, -1000, -1000, -1000, -1000, -1000, 1085,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1327, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1914, -1000, 1714,
	-1000, -1000, 1964, 2568, 2568, 2568, 2610, 432, 428, -1000,
	151, -1000, -1000, 84008, -1000, -1000, 32073, 32073, 32073, 32073,
	32073, 1583, -1000, 694, -1000, -1000, 731, -1000, 693, 586,
	-1000, -1000, -1000, -1000, -1000, -1000, 692, 2818, -1000, -1000,
	-1000, -1000, -1000, 2744, -1000, 18837, -1000, -1000, -1000, 412,
	690, 32073, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 898, -1000, 264, 864,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 630, 1487, 629, 629, 629, -1000,
	-1000, 902, -1000, -1000, -1000, 328, 628, 294, 627, -1000,
	-1000, -1000, -1000, 2325, 688, 687, -1000, 686, 685, 683,
	682, 680, -1000, -1000, -1000, 679, 678, 677, 676, 675,
	674, 673, 672, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 900, -1000, 668, 667, 666, 663, 662, 652, 651,
	649, 645, -1000, -1000, 2, 74195, -1000, 467, 2, -1000,
	-1000, 643, -1000, 25431, 25431, 25431, -1000, -1000, 1756, 32073,
	-1000, 2409, -1000, 13, 13, 647, 38892, -1000, 37128, 647,
	527, 549, 42454, -1000, 2225, -1000, -1000, 640, 260, -1000,
	-1000, 2221, 74195, 16978, 74195, 60571, 60571, 60571, 2483, 32073,
	-1000, -1000, 47757, 74195, 61007, 2693, 84637, 47757, 74195, 2321,
	-1000, -1000, -1000, 74195, -1000, 32073, -1000, 2690, 1304, 50891,
	2632, -19, -1000, -1000, -1000, -1000, -1000, -1000, 1953, 1986,
	1009, 1825, 1241, -1000, 24966, 2520, -1000, -1000, -1000, 256,
	16978, -1000, 1925, 2449, 1148, -1000, 1821, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1453, 2448, -1000, 1560,
	2447, 1447, -1000, -1000, 1693, -1000, -1000, 2549, -1000, -1000,
	1813, 2445, 14, -1000, -1000, 882, 2444, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 791, -1000, 50015, 40682,
	50451, -4, -1000, -1000, -26, -1000, 15624, 84008, -1000, -1000,
	-1000, 84008, 815, -1000, -1000, 2443, -1000, 84008, 814, -1000,
	-1000, 2437, -1000, -1000, -1000, 2885, -1000, 2884, 1913, 2882,
	2880, 2877, -1000, 1341, 1480, 2875, -1000, 2874, -1000, -1000,
	-1000, -1000, -1000, -1000, 58367, 1755, -1000, -1000, 57483, -1000,
	1910, -1000, -1000, 57925, 907, -1000, 882, 1907, -1000, 873,
	-1000, 2872, 2637, 2077, 882, 1906, -1000, -1000, -1000, -1000,
	-1000, 43776, -1000, 43776, -1000, 43776, -1000, 1259, -1000, 77247,
	13, 13, 2744, -1000, -1000, -1000, -1000, -1000, 2436, 2871,
	2870, 2869, -1000, 74195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 187, 2435, -1000, -1000, 187, 2431, -1000,
	187, 2426, -1000, 62751, -1000, -1000, 1711, 2424, -1000, -92,
	2423, -1000, -1000, -28, -1000, -1000, -1000, 908, -1000, 39334,
	-1000, 39334, 67583, 50015, 872, 646, 45096, 84008, -1000, -43,
	-1000, 40682, 84008, -1000, 50015, 57483, -1000, 67141, 57047, -1000,
	-1000, 1171, 2001, -1000, -1000, -1000, 872, 50015, 50015, 50015,
	-1000, 66699, -1000, -1000, 1638, 1385, 2546, 1608, 60571, -1000,
	1542, -1000, -1000, -1000, 2574, 2317, -1000, 47317, 62315, -1000,
	61879, -1000, 61443, -1000, 60571, -1000, 60571, -1000, 2868, 2867,
	2865, -1000, 2864, 2566, 84008, 2558, -1000, 2400, 1430, 1420,
	74195, -1000, -1000, 74195, -1000, 74195, -1000, -1000, -1000, -1000,
	-1000, 1951, -1000, -1000, -1000, -1000, 60571, -1000, -1000, -1000,
	-1000, -1000, -1000, 2298, -1000, 1360, -1000, 1482, -1000, 1165,
	-1000, -1000, 188, -1000, -1000, -19, -1000, 76811, -1000, 1964,
	-1000, 74195, -1000, 1921, 2268, 2280, 1246, 1715, 2037, -1000,
	30177, 2024, 34398, 1815, 151, -1000, -1000, 151, 151, 24501,
	-1000, -1000, 84637, 84637, 16978, 1097, 32073, 32073, 32073, 32073,
	32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073,
	32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073,
	32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073, 32073,
	32073, 1923, 32073, 1080, 32073, 32073, 32073, 32073, 1467, -1000,
	-1000, 1547, 504, 1621, -1000, 2752, 2752, 2752, 84350, 84350,
	566, 2863, 731, -1000, 32073, -1000, 115, 32073, 17430, -1000,
	-1000, -1000, 428, 8849, 1853, -1000, 427, 17907, -1000, -1000,
	-1000, 18837, 586, 29700, 32073, 896, 84008, 1240, 2757, 15174,
	2247, 2138, -1000, 2801, -1000, -1000, 2757, -1000, -1000, -1000,
	-1000, 2757, 1094, 1093, 2757, -1000, 2757, 2757, 639, 737,
	735, 21210, 20733, 20256, 19779, 733, 32073, 32073, 32073, 32073,
	32073, 32073, 32073, 32073, -1000, 29235, 28758, 28281, 34863, 27804,
	32073, 19302, 27327, 26850, 74195, 2, 2687, 32073, 147, -1000,
	82811, -1000, 147, 147, 638, -30, 84008, 2014, 2014, 38452,
	1970, 1590, 1590, 1590, -1000, 647, 11548, 647, 65823, 1617,
	647, 647, 254, 275, 424, 36688, 2409, 65823, 710, 635,
	20, 19, 18, -1000, -1000, 16, 10, -1000, -1000, 60571,
	634, 17430, 16978, 1199, -31, 251, 2022, 2021, 2018, -1000,
	2017, 1368, -41, 1068, -15, -1000, 3840, -46, -1000, 1153,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 899, 633, 631, 334, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 630, 1487, 629, 629, 629, -1000, -1000, -1000,
	328, 628, 294, 627, -1000, -1000, -1000, -1000, -1000, -1000,
	2218, -26, 61007, 816, -48, 1010, -19, -1000, -1000, -1000,
	50891, 1087, -1000, 1729, -1000, -1000, -1000, -1000, -1000, -1000,
	1150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 898, -1000,
	-1000, -1000, -1000, -1000, -1000, 2792, 2763, -3, -1000, -1000,
	16978, -1000, -21, 1370, -1000, 52639, 1809, 2553, 2537, 1257,
	-1000, 1213, 2608, 56163, 2636, 2703, 237, -1000, 2214, -1000,
	-1000, 846, 1358, 1067, 56163, 1560, -1000, 84637, -1000, 2084,
	2604, 1230, 1234, 1230, 1230, 1198, -1000, 56163, 1066, -1000,
	1065, -1000, -23, 2635, 2646, 234, -1000, 2211, 1062, -1000,
	-1000, 60571, 16978, -1000, 1340, -1000, 50015, 2088, -1000, -51,
	791, -4, 50451, 74195, 248, -1000, 32073, 115, 32073, 115,
	-1000, -1000, 2412, -1000, -1000, -1000, 2862, 1463, 1973, -1000,
	-1000, -1000, 625, 1900, 2203, 74195, 2031, -10, 60571, -1000,
	2398, 1560, 1896, -1000, -1000, 56605, -1000, 2394, 589, 2861,
	-1000, 76375, -1000, 2554, 1133, 2390, 960, 788, 2673, -1000,
	788, 44216, -1000, 74195, -1000, -1000, 74195, -1000, -1000, -1000,
	2860, -1000, 60571, -1000, -1000, 60571, -1000, 60571, -1000, 60571,
	186, 2388, -1000, -1000, 74195, 50015, 50015, 3865, 51767, -53,
	-54, 419, -1000, 66263, 74195, 955, 52203, 74195, 2510, 872,
	40682, -43, 872, 872, 791, -1000, 791, -1000, 60571, 2278,
	-1000, 872, 872, 872, -1000, -1000, -1000, -1000, 2859, 2856,
	-1000, -1000, -1000, 881, 60571, 74195, 60571, -1000, -1000, 74195,
	-1000, 74195, -1000, 881, 74195, 881, 74195, 881, 74195, -1000,
	-1000, -1000, -1000, -1000, -1000, 115, 32073, 1288, -1000, 2273,
	-1000, 2271, -1000, 55, -1000, -1000, -1000, -1000, 1688, 60571,
	60571, 60571, 60571, 74195, 60571, -1000, 56163, -1000, 1921, 2268,
	-1000, -1000, -1000, -1000, -1000, -1000, 1289, 1670, -1000, 1998,
	-1000, 1226, -1000, -1000, -1000, 84008, 35328, -1000, -1000, 84008,
	1345, -1000, 33933, 33468, -1000, -1000, 1343, 60571, 2028, -1000,
	2028, -6, -1000, 82442, 1996, 60571, -1000, -1000, -1000, -1000,
	-1000, 845, 664, 664, 1088, 1088, 1088, 1088, 2664, 1255,
	1134, 3769, 5633, 5633, 6607, 6607, 6607, 6607, 6607, 5633,
	1829, 1049, 1049, 1829, 1829, 1829, 1829, 1829, 1049, 1049,
	1049, 5633, 5633, 5633, 84350, 84167, 10869, 32073, 32073, 1060,
	1544, 504, 9507, 32073, 5127, 5127, 5127, 5127, -1000, 1835,
	-1000, -1000, -1000, -1000, 2196, 614, 34863, 34863, -1000, -1000,
	-1000, -1000, 18372, 32073, -1000, -1000, -1000, -1000, 26373, -1000,
	-1000, 81962, -244, 417, -176, 9, -1000, 32073, 32073, 32073,
	416, -1000, 247, 32073, 74195, -1000, 79483, 709, -117, -1000,
	-56, 1220, -1000, 32073, -1000, -1000, 1057, -1000, 1055, 1053,
	1051, -1000, 613, 413, -1000, 242, -1000, 1585, 612, 610,
	405, -61, 400, 842, 820, 399, 398, 397, 32073, -1000,
	-1000, -1000, -1000, -1000, 81897, -1000, -1000, 81601, -1000, -1000,
	81552, -1000, -1000, 81256, -1000, -1000, -1000, 83825, 79434, 10951,
	10541, 6643, 10459, 9914, -62, 396, -1000, 2193, -176, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 394, -1000, 393,
	-1000, 83666, -176, 390, 7590, -1000, 34863, 34863, 34863, -1000,
	389, -1000, 82601, -1000, 83483, 25908, 25908, 25908, 388, 83300,
	32073, -176, -63, -1000, -69, -1000, -1000, 609, -70, 892,
	25431, 37570, 16978, -1000, 892, 892, 32073, -1000, 32073, 2008,
	-1000, -1000, -1000, 2007, 1966, 2014, 38452, -1000, -1000, -1000,
	-1000, 65823, -1000, 2744, 2110, -1000, 65823, -1000, -1000, 74195,
	467, -1000, 65823, 65823, 16978, 647, -1000, 647, 65823, 508,
	-1000, -1000, -1000, -1000, -1000, 387, 41572, 9, 241, 872,
	-1000, 16978, 2121, 2121, 2121, 2121, -1000, -1000, 74195, 2711,
	-1000, 1512, -1000, 84637, -1000, 721, 1075, 605, -1000, 2757,
	2757, -1000, 2757, 74195, 144, 24966, -1000, 1087, -1000, -1000,
	1337, -1000, 1470, -1000, 1091, -1000, -1000, -1000, -1000, 24966,
	-1000, 1808, 74195, 74195, 60571, -1000, -1000, 1890, 75939, 1883,
	84637, 74195, -1000, -1000, 604, 603, 1989, 1988, 945, 74195,
	74195, 1987, 75503, 75067, 74195, 1539, 32073, 1634, 1452, 115,
	115, -1000, -1000, 115, 602, 1116, 60571, 60571, 60571, 1446,
	-1000, -1000, -1000, -1000, -1000, 55727, -1000, -1000, 2799, 2798,
	-1000, 1230, -1000, -1000, -1000, 1230, 1560, 1441, 60571, 74195,
	1506, 115, 115, -1000, -1000, 115, 600, 16978, 1471, -1000,
	1340, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46881, 967,
	882, 872, 2190, -1000, 2088, -1000, -1000, 14724, 84008, -1000,
	84008, -1000, 74195, -1000, 904, 74195, 52203, 862, 2386, 43336,
	-26, 872, 50015, 60571, -10, 74195, -1000, 1560, 2383, 467,
	1882, -1000, -1000, 50015, 2855, 593, 2854, -1000, 1746, 1880,
	-1000, -1000, 74631, 2459, 772, 74195, 892, 38452, 1516, -1000,
	42014, 923, 74195, 1348, 112, -1000, -1000, -1000, 37, 74195,
	-1000, 2852, -1000, -1000, 187, 187, 187, -1000, 60571, 60571,
	1711, -1000, -92, -1000, -1000, 3865, 3865, 872, -13, 591,
	-1000, 802, 797, 40232, 50015, -75, -1000, -1000, -1000, -1000,
	-1000, 60571, 74195, 665, 2067, 74195, -76, -1000, 240, 587,
	-1000, -1000, 872, 2189, -1000, -1000, 886, -1000, 1149, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12, -26,
	-26, -1000, 881, -1000, 881, -1000, 881, -1000, 84008, -1000,
	1283, 1277, 74195, -1000, 16978, 74195, 60571, 16978, 60571, 2265,
	2253, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 985,
	-1000, 1345, 1665, -1000, 586, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1940, -1000, -18, 24501, 1831, -1000,
	-1000, 60571, 11, 32073, 32073, 8872, 7410, 32073, 34863, 34863,
	-1000, 32073, 7172, -1000, -1000, -1000, -1000, -1000, 2179, 580,
	32073, 84637, 7114, 6425, -1000, 386, 9419, 1829, -1000, 32073,
	-1000, 384, 24036, -1000, 82931, 1, -77, -1000, 12010, -176,
	-78, -1000, -1000, 720, -1000, 2456, -1000, 32073, 83141, 1928,
	1674, 1431, 1291, 2757, 2816, 14274, -1000, 44656, 893, 1620,
	-1000, -1000, 2757, 822, -1000, -1000, -1000, 822, -1000, 81191,
	-1000, -1000, -1000, -1000, 84637, 84637, 32073, 32073, -1000, 32073,
	32073, 32073, -1000, -1000, 32073, -1000, -1000, 2178, 32073, -1000,
	84637, 84637, 34863, 34863, 34863, 34863, 34863, 34863, 34863, 34863,
	34863, 34863, 34863, 34863, 34863, 34863, 34863, 34863, 34863, 34863,
	34863, 1935, 34863, 2736, 2736, 2736, -1000, 2250, 2178, 32073,
	32073, 84637, 383, 382, 381, -1000, 32073, -176, -1000, -1000,
	3865, -1000, 2123, -1000, 32073, -1000, -207, -1000, 2409, -1000,
	-1000, 2123, 2123, -89, 84008, 38452, 38452, -1000, 576, 32073,
	2004, -1000, -1000, 708, -242, -1000, 793, -1000, -1000, -1000,
	-1000, -1000, 467, -1000, -1000, -1000, 238, 65823, 65823, 707,
	-1000, -95, -1000, -1000, -96, -1000, 2671, 376, 16978, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -26, 1636, 2815,
	-1000, 2795, 718, 706, 2757, 375, 365, 358, -26, 74195,
	-1000, -19, -1000, -1000, -1000, 32073, -1000, -1000, 2545, 1050,
	1044, -1000, 2376, -1000, 1869, -1000, 927, -1000, 1435, -1000,
	32073, 32073, 574, 563, 2851, 1508, 2850, 953, 2375, 1711,
	2374, 1711, -1000, -1000, 854, -1000, 84008, 561, 560, -1000,
	-21, 1364, 885, -1000, -1000, 32073, 32073, 65387, -1000, 377,
	2549, 7, -1000, 1040, -1000, -1000, -1000, -1000, 1560, 1030,
	-1000, -1000, -1000, 884, -1000, -1000, 32073, -1000, -23, 1027,
	-1000, -1000, -1000, 46431, -1000, -1000, 50015, 872, -1000, 2848,
	2847, 2846, 354, -97, -25, 84637, 2653, 1773, 556, 60571,
	832, -1000, 2744, -1000, -1000, -1000, -1000, 60571, 2652, 2373,
	882, -1000, 2844, -1000, 60571, 2372, 1740, 1861, 1962, 772,
	51331, -1000, 882, 1620, -118, -1000, 1348, 23559, 2540, -103,
	-1000, -1000, -1000, 892, 44216, 38452, 32073, 2843, -104, -1000,
	-1000, -1000, -1000, -1000, 186, -1000, -1000, -1000, -1000, 64951,
	64951, 50015, 50015, 50015, 872, 74195, 74195, 52203, 2841, 559,
	74195, 74195, 558, -1000, 74195, 74195, 2839, 50015, -1000, 115,
	-1000, 1625, 60571, 13824, -1000, -1000, -1000, -1000, -1000, 881,
	-1000, -1000, 1532, 1814, 1532, 1378, 1372, -1000, 1657, -1000,
	-1000, -1000, -1000, 2049, 2563, 16978, 2648, 5127, 32073, 32073,
	4935, 6347, 458, 5127, 32073, 32073, 84637, 379, -105, 32073,
	32073, -1000, 32073, 704, 84008, 2809, 32073, 350, 345, -1000,
	-1000, -1000, 2748, -1000, -1000, -1000, 84008, 32073, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 340, -1000, 145, -1000, -1000,
	-1000, 78991, -1000, 32073, 339, 338, -1000, -1000, -1000, 337,
	336, 6136, 297, 80895, 80846, 80550, 84008, 2250, 84008, -1000,
	-1000, 812, 812, 1179, 1179, 1179, 1179, 2736, 626, 729,
	489, 469, 469, 469, 557, 542, 542, 469, 469, 469,
	2173, 1943, 544, 7897, -1000, -1000, 84008, 84008, 331, -1000,
	-1000, -1000, -176, 326, 2116, 2602, 84008, -1000, 38452, 2116,
	2116, -1000, -1000, 1966, 74195, 84008, 38452, -1000, 2110, -1000,
	12470, -1000, 16978, -1000, -1000, -1000, -1000, 2744, -1000, 41572,
	-1000, 543, -1000, 116, -1000, -1000, 702, 2838, 714, 325,
	-1000, -1000, -1000, -26, 84008, 74195, 74195, 74195, 2370, -1000,
	3850, -1000, 945, 80485, -112, -1000, 82442, 32073, 74195, -1000,
	-1000, 1478, 2026, 996, -1000, 2576, 74195, -1000, 74195, -1000,
	-1000, 74195, 74195, 60571, 2340, -120, 84008, -47, -1000, 789,
	-1000, 1206, -1000, 13374, 60571, 60571, 2322, -121, 16978, -1000,
	-1000, -92, -1000, -1000, -1000, -1000, 2055, -1000, 63629, 1676,
	115, -1000, 64511, 2836, 532, -1000, 1623, -1000, 701, 1560,
	115, 60571, -1000, -1000, 938, 16978, 60571, 2360, 1967, 772,
	51331, -1000, 1133, 2037, -1000, -110, -1000, 555, 115, 1620,
	-1000, -118, 84008, -1000, 785, -1000, -1000, -122, -1000, -1000,
	323, -1000, 2505, 2504, -1000, -1000, 32073, 531, 529, 74195,
	2503, -1000, -1000, -127, -1000, 1732, -1000, -1000, -1000, -1000,
	-1000, 16978, 1350, -1000, 524, 523, -1000, -1000, -1000, -1000,
	2563, 5127, 5127, 32073, 32073, 32073, 5127, 379, -128, -1000,
	5127, 5127, -176, -1000, -1000, 82931, -1000, -1000, -1000, 84008,
	-1000, 12924, 1562, -1000, 80189, -1000, -1000, -1000, -1000, 32073,
	32073, -1000, -1000, -1000, -1000, -1000, 34863, 2166, 520, 84637,
	-1000, -1000, 889, 32073, 32073, 2409, 889, 889, -1000, -130,
	-1000, -1000, -1000, 2744, 116, -1000, -1000, 2835, 16978, 712,
	-1000, 2834, -1000, -1000, -1000, -1000, 74195, -1000, 74195, -1000,
	16978, 74195, 2136, 1852, -1000, -1000, 1985, 517, 34863, 60571,
	794, 2124, 1500, 32073, 1831, -135, -136, 1849, -1000, -1000,
	1844, 32073, -1000, 84637, 514, 1711, 1711, -138, -143, -1000,
	32073, 1023, 74195, 23094, -1000, 2833, 2549, -1000, -1000, 32073,
	1019, -1000, 1506, 2093, -1000, -1000, -1000, -1000, 1984, -1000,
	-1000, 74195, 1983, 876, -145, -1000, 781, 780, -1000, 52203,
	862, 861, -1000, -1000, -1000, 467, 513, 74195, 1739, 512,
	16978, -1000, 772, 51331, -1000, 2459, 1348, -1000, 2472, 74195,
	2533, -1000, 2037, 504, -1000, 872, 503, 502, -151, 32073,
	32073, -152, 496, 872, -133, -1000, 765, 750, -1000, -1000,
	60571, 60571, 32073, 32073, -1000, 5127, 5127, 5127, -1000, 298,
	-1000, -1000, 1620, 2600, -1000, 80140, 79844, 3888, 34863, 84637,
	-157, -1000, 74195, 84008, -176, -1000, -1000, -1000, 509, -1000,
	2831, -1000, -1000, 1826, -1000, -1000, -1000, 74195, 1859, -1000,
	943, 32073, 7897, 492, 32073, -1000, -1000, 2047, 2167, 2055,
	486, -1000, -1000, -1000, -1000, -1000, 932, 1464, -1000, -1000,
	84008, 2580, 32073, -1000, -1000, 476, 474, 84008, 473, 759,
	2154, -1000, -1000, -1000, 84008, 472, 862, -1000, 1573, 1676,
	471, -1000, -1000, 1675, 2073, -1000, 64511, 35778, 35778, 296,
	2645, 861, -1000, 2735, -1000, 2643, 32073, -1000, 60571, 32073,
	1734, 51331, -1000, 1962, -1000, 1146, -158, 74195, 1348, -1000,
	-1000, 50015, 50015, 932, -159, -160, -1000, 50015, -1000, 1732,
	-1000, 74195, -1000, 74195, -1000, -1000, -171, -178, -1000, 1587,
	32073, -1000, -1000, 3888, -179, -1000, -148, -1000, 2642, -1000,
	-1000, -1000, -1000, 2357, 2114, 79779, 1937, 74195, 7924, 2162,
	-1000, -1000, 1506, 74195, 2055, 2113, 60571, 941, 16978, -180,
	1532, 1532, 32073, 22629, 1568, 32073, 1675, 60571, 74195, -1000,
	2570, -1000, 2502, -1000, -1000, -1000, 2055, 115, -1000, -1000,
	115, -181, 938, -186, 60571, -1000, 1967, 1250, -1000, 892,
	-1000, -1000, -188, -189, 1500, 932, -1000, -194, -1000, -197,
	-202, -1000, -1000, 273, 33003, 33003, 33003, -176, -1000, 74195,
	470, 2284, 880, -1000, 1679, 1457, 270, 954, -1000, -1000,
	2124, -204, -1000, 879, 467, -1000, 32073, -1000, 932, -210,
	-1000, 922, -211, -1000, 921, -212, -1000, 2150, -1000, -213,
	-1000, 466, -218, -1000, -1000, 1857, -1000, 1506, 876, -1000,
	932, 445, 1500, 438, -1000, 44216, -1000, 872, 872, 2055,
	1500, 872, -1000, -1000, -1000, 2451, -1000, 36228, 1678, 1371,
	82259, 2451, 2451, -1000, -1000, 74195, 2623, -1000, 1713, 1684,
	1281, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2617,
	1937, 84008, 2055, -1000, 1532, 2092, -1000, 1532, 2148, -1000,
	1567, -1000, 74195, -1000, 74195, 1362, 1352, 2828, 862, 1675,
	1500, 32073, 2055, 32073, -187, -1000, -1000, 1506, 2055, -1000,
	-1000, 1386, 2702, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 758, -1000, 2489, -1000, 978, 1541, 1541, 757, 1679,
	-1000, -1000, 437, -1000, 436, -1000, -220, -1000, -1000, 2823,
	-1000, 1675, -1000, 2055, -221, 1506, -226, -1000, -1000, 1506,
	1333, -1000, -1000, 1596, 32538, 32073, -1000, 2721, -1000, -1000,
	1997, -1000, 32073, 2124, 32073, 32073, 1695, -1000, -1000, 1506,
	932, 891, 1500, -1000, -1000, -1000, -1000, 84008, -1000, -1000,
	-1000, 84008, -1000, -227, -229, -1000, -1000, -1000, 891, 1500,
	-1000, 2822, 2055, 1506, 1017, -1000, 2055, -1000, 1506, -1000,
	435, 1506, 891, 32073, 891, -1000, -234, -1000, 1506, -1000,
}
var sqlPgo = [...]int{

	0, 3424, 3421, 3419, 3417, 3416, 3415, 3414, 3409, 3408,
	3407, 3406, 3403, 3398, 3396, 3388, 3384, 3383, 3382, 3381,
	3380, 3379, 3377, 3376, 3372, 3371, 3362, 3353, 3351, 3344,
	3343, 3341, 3340, 3339, 3338, 3336, 3334, 3328, 3326, 3325,
	3322, 3321, 3319, 3318, 3317, 3316, 3315, 33, 3310, 3309,
	3307, 3305, 3304, 3303, 3302, 3301, 3299, 3298, 3297, 3296,
	3295, 3290, 3288, 3285, 3284, 36, 3282, 232, 3281, 3280,
	3278, 3277, 3274, 3273, 3272, 3271, 3268, 231, 3267, 121,
	3266, 3265, 3264, 3263, 3261, 227, 3259, 3258, 3251, 3248,
	3247, 3246, 3245, 3243, 161, 207, 3238, 176, 3237, 3236,
	3232, 3229, 3227, 3226, 3222, 3220, 3219, 3217, 209, 3215,
	226, 3214, 3213, 3211, 3210, 3208, 3207, 3206, 3205, 3204,
	3203, 3202, 3199, 3198, 3197, 3195, 3194, 3193, 3192, 3191,
	3190, 3187, 3186, 3185, 3184, 3183, 3182, 3181, 3179, 235,
	147, 3177, 3176, 223, 222, 3175, 3173, 3164, 136, 105,
	102, 107, 3163, 95, 40, 3161, 14, 131, 206, 4137,
	198, 3159, 3158, 3154, 208, 153, 3150, 201, 3148, 3144,
	3143, 3142, 73, 70, 144, 145, 138, 151, 78, 3141,
	3140, 71, 52, 35, 32, 3138, 3137, 3131, 2651, 94,
	3130, 221, 203, 143, 3129, 3126, 3125, 1542, 3121, 3120,
	130, 62, 108, 72, 99, 3118, 125, 24, 3116, 187,
	59, 3115, 133, 74, 39, 6684, 6881, 3114, 89, 238,
	98, 119, 179, 170, 134, 169, 167, 142, 182, 3113,
	214, 3112, 81, 132, 3111, 3110, 3108, 55, 162, 84,
	3107, 8, 17, 3, 166, 34, 92, 16, 3105, 10,
	3104, 3103, 3102, 3101, 22, 135, 3100, 124, 77, 3099,
	19, 3095, 23, 177, 3094, 200, 104, 3093, 3092, 217,
	173, 160, 3091, 18, 190, 3090, 3089, 3087, 3086, 3085,
	97, 15, 100, 3084, 3083, 114, 197, 157, 3082, 37,
	3081, 140, 80, 103, 229, 109, 188, 93, 186, 155,
	196, 3080, 3079, 3077, 174, 3076, 3075, 178, 137, 3074,
	3072, 168, 236, 31, 56, 191, 57, 152, 129, 3070,
	164, 3069, 3068, 3067, 237, 146, 171, 6, 2, 76,
	96, 28, 9, 195, 127, 211, 87, 3066, 3738, 1178,
	1427, 54, 139, 110, 51, 91, 126, 220, 60, 3064,
	3063, 111, 3062, 3061, 3060, 3059, 148, 3058, 3057, 3056,
	113, 120, 172, 3055, 128, 69, 12, 88, 210, 224,
	90, 184, 193, 213, 3052, 158, 3051, 68, 122, 3050,
	163, 204, 150, 3048, 362, 123, 3047, 185, 3046, 3045,
	3044, 3043, 3041, 3040, 3039, 75, 3038, 154, 3035, 3034,
	219, 156, 3033, 218, 118, 192, 82, 45, 3032, 67,
	281, 3031, 159, 38, 3026, 3010, 61, 0, 8030, 5867,
	7610, 3021, 2897, 3019, 175, 112, 3017, 3009, 3005, 86,
	3004, 66, 3003, 3001, 42, 2999, 21, 7, 11, 20,
	13, 1346, 1120, 2997, 2996, 85, 101, 116, 2994, 228,
	189, 2993, 2990, 2988, 65, 2986, 29, 2982, 27, 2981,
	2980, 30, 5, 25, 2979, 2978, 202, 2975, 205, 2974,
	2973, 2665, 106, 2972, 2971, 216, 115, 2970, 215, 2969,
	2654, 141, 183, 2968, 2966, 2965, 2964, 212, 2963, 2962,
	26, 4, 2960, 2959, 165, 1, 2584, 2958, 2953, 64,
	2952, 2951, 149,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 11, 11, 7, 7, 8, 8,
	8, 35, 35, 9, 9, 9, 10, 10, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 25,
	25, 15, 15, 27, 27, 16, 16, 28, 28, 475,
	475, 19, 30, 20, 31, 13, 476, 476, 476, 476,
	24, 21, 32, 22, 22, 22, 22, 22, 152, 152,
	152, 152, 18, 18, 26, 26, 175, 175, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	474, 474, 177, 177, 176, 171, 171, 477, 477, 178,
	178, 178, 180, 180, 36, 36, 36, 93, 93, 93,
	94, 94, 95, 95, 153, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 81, 81, 415, 415, 416, 416,
	148, 148, 149, 149, 149, 149, 150, 150, 151, 151,
	151, 50, 38, 38, 38, 38, 38, 38, 38, 39,
	39, 39, 39, 40, 40, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 48, 48, 48, 48, 140,
	140, 51, 51, 51, 51, 51, 51, 51, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 485, 485,
	486, 486, 487, 487, 488, 488, 488, 488, 488, 488,
	488, 488, 488, 488, 488, 488, 488, 488, 488, 488,
	488, 488, 488, 488, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 62, 62, 256, 256, 231, 231, 63, 63, 63,
	64, 64, 65, 65, 52, 52, 468, 468, 270, 270,
	379, 379, 67, 67, 290, 290, 68, 68, 68, 68,
	68, 68, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 75, 75, 75,
	76, 76, 76, 74, 74, 74, 72, 72, 72, 71,
	71, 71, 73, 73, 73, 271, 271, 77, 77, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	381, 381, 78, 78, 78, 349, 349, 82, 82, 82,
	305, 305, 83, 83, 83, 83, 83, 84, 84, 84,
	84, 96, 96, 96, 96, 471, 471, 263, 263, 191,
	191, 191, 191, 89, 89, 89, 89, 90, 90, 90,
	91, 91, 145, 145, 102, 102, 102, 102, 102, 101,
	101, 101, 101, 101, 101, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 46, 46, 47, 47, 47, 47,
	47, 104, 104, 481, 481, 106, 103, 103, 103, 105,
	105, 105, 105, 107, 108, 108, 108, 108, 108, 108,
	108, 108, 109, 109, 409, 409, 279, 279, 407, 407,
	423, 423, 408, 408, 235, 235, 235, 235, 235, 236,
	236, 236, 414, 414, 414, 414, 414, 414, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 146, 146, 147, 129, 129, 129, 139, 139,
	139, 139, 139, 139, 139, 132, 132, 132, 119, 119,
	111, 111, 111, 111, 111, 115, 115, 115, 115, 115,
	115, 115, 115, 112, 112, 121, 121, 121, 121, 121,
	116, 116, 118, 118, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 113, 113, 113, 113, 123, 123, 123,
	123, 312, 312, 312, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 135, 135, 135, 135, 135, 135,
	363, 363, 130, 130, 130, 130, 134, 134, 134, 134,
	295, 295, 127, 127, 127, 128, 128, 128, 133, 133,
	131, 131, 136, 136, 136, 136, 114, 114, 114, 489,
	489, 489, 137, 137, 126, 126, 138, 138, 138, 138,
	138, 138, 138, 138, 125, 125, 125, 124, 124, 124,
	124, 117, 469, 469, 466, 466, 466, 466, 466, 466,
	466, 467, 467, 470, 470, 87, 87, 87, 57, 57,
	57, 58, 58, 156, 156, 156, 156, 241, 241, 241,
	241, 154, 154, 155, 155, 59, 59, 490, 490, 490,
	478, 478, 478, 479, 479, 479, 479, 479, 479, 237,
	237, 238, 238, 330, 330, 330, 330, 330, 242, 242,
	179, 179, 179, 245, 246, 246, 243, 243, 244, 244,
	244, 248, 248, 247, 250, 250, 249, 329, 430, 430,
	432, 432, 432, 432, 432, 432, 432, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 428, 428,
	428, 429, 424, 424, 425, 425, 425, 425, 425, 239,
	239, 240, 240, 240, 240, 426, 427, 261, 261, 366,
	431, 431, 433, 433, 435, 491, 491, 491, 491, 491,
	491, 492, 492, 492, 328, 328, 327, 327, 254, 254,
	436, 436, 436, 436, 437, 437, 437, 437, 437, 440,
	439, 438, 438, 438, 438, 438, 61, 61, 61, 292,
	292, 291, 291, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 142, 142,
	194, 194, 56, 56, 56, 12, 12, 12, 480, 480,
	480, 60, 60, 60, 60, 193, 193, 193, 193, 193,
	193, 473, 473, 472, 472, 195, 195, 494, 494, 66,
	66, 66, 66, 66, 66, 55, 55, 55, 55, 55,
	495, 495, 313, 313, 311, 311, 310, 310, 260, 260,
	365, 198, 198, 172, 172, 172, 23, 17, 17, 33,
	33, 34, 34, 29, 29, 482, 482, 483, 483, 88,
	88, 92, 92, 92, 100, 100, 141, 141, 141, 141,
	141, 141, 141, 37, 37, 37, 37, 49, 49, 49,
	49, 98, 497, 497, 497, 99, 99, 99, 496, 496,
	192, 192, 324, 324, 325, 325, 498, 498, 326, 326,
	326, 326, 186, 185, 187, 187, 54, 54, 54, 181,
	181, 182, 182, 183, 183, 184, 184, 499, 499, 85,
	85, 85, 144, 144, 230, 230, 230, 320, 320, 320,
	255, 255, 204, 204, 323, 323, 321, 321, 321, 321,
	289, 289, 289, 143, 143, 268, 268, 281, 281, 282,
	282, 376, 376, 283, 97, 97, 159, 159, 157, 157,
	157, 157, 157, 157, 157, 157, 164, 164, 165, 165,
	166, 166, 167, 168, 168, 168, 168, 272, 272, 169,
	169, 169, 158, 158, 158, 160, 160, 160, 160, 160,
	160, 160, 163, 163, 163, 163, 170, 170, 170, 162,
	162, 447, 447, 447, 449, 449, 450, 446, 446, 448,
	448, 493, 493, 294, 294, 294, 252, 253, 251, 251,
	258, 258, 257, 259, 259, 364, 364, 364, 173, 173,
	173, 286, 286, 286, 286, 287, 287, 316, 316, 314,
	314, 314, 314, 315, 315, 317, 317, 317, 318, 318,
	319, 319, 285, 285, 345, 345, 161, 161, 161, 265,
	265, 265, 266, 266, 336, 336, 336, 336, 336, 336,
	337, 337, 335, 335, 335, 335, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 368, 369, 369, 267, 267,
	370, 322, 322, 464, 464, 464, 465, 465, 362, 362,
	371, 371, 371, 371, 371, 371, 360, 360, 361, 361,
	377, 378, 378, 298, 298, 298, 298, 296, 296, 299,
	299, 299, 299, 297, 297, 372, 372, 372, 372, 288,
	288, 373, 373, 373, 373, 374, 331, 332, 332, 382,
	382, 382, 382, 397, 264, 264, 264, 264, 264, 500,
	500, 383, 383, 383, 383, 383, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 387, 387,
	387, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 396,
	396, 396, 396, 396, 388, 388, 393, 393, 394, 394,
	394, 389, 390, 395, 395, 395, 395, 501, 501, 399,
	399, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	385, 385, 385, 392, 392, 392, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 306,
	306, 308, 308, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 340, 340,
	340, 340, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 441, 441, 441,
	441, 441, 441, 441, 441, 444, 444, 445, 445, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 451, 451,
	452, 452, 454, 454, 455, 455, 456, 457, 457, 457,
	458, 459, 459, 453, 453, 460, 460, 460, 460, 461,
	461, 462, 462, 462, 462, 462, 463, 463, 463, 463,
	463, 351, 351, 352, 352, 358, 358, 358, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 196, 196, 196, 196, 196, 277,
	277, 275, 275, 275, 278, 278, 276, 276, 274, 274,
	273, 273, 348, 348, 346, 346, 350, 350, 300, 300,
	398, 398, 398, 398, 398, 398, 398, 398, 301, 301,
	301, 309, 302, 302, 303, 303, 303, 303, 303, 342,
	343, 304, 304, 304, 344, 344, 353, 357, 357, 356,
	355, 355, 354, 354, 333, 333, 334, 334, 284, 284,
	502, 502, 280, 280, 375, 375, 375, 375, 233, 233,
	269, 269, 232, 232, 225, 225, 226, 226, 226, 226,
	262, 262, 359, 359, 400, 400, 401, 401, 402, 402,
	403, 403, 404, 405, 406, 347, 347, 214, 213, 201,
	202, 212, 211, 210, 200, 203, 207, 208, 209, 205,
	206, 220, 219, 218, 224, 216, 217, 380, 199, 227,
	227, 228, 228, 228, 229, 229, 229, 229, 197, 197,
	221, 221, 222, 223, 223, 215, 215, 215, 188, 188,
	188, 189, 189, 190, 190, 413, 413, 411, 411, 411,
	412, 412, 412, 412, 410, 410, 410, 410, 410, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 419, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 422, 422,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 1,
	3, 4, 6, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 10, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 5, 6, 2,
	1, 3, 1, 3, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 6, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 6, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 5, 7, 3, 4,
	6, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 3, 6, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 3, 3, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 2, 1, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	4, 5, 5, 5, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 10, 10, 3, 5, 5, 5,
	3, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 3, 6,
	3, 11, 14, 0, 2, 4, 3, 0, 4, 5,
	4, 3, 3, 1, 3, 10, 13, 0, 2, 3,
	1, 1, 0, 1, 2, 2, 2, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 8, 4, 2, 5, 5, 5, 2, 9, 10,
	6, 5, 3, 1, 5, 8, 7, 11, 3, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 1, 4, 0, 6, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	2, 2, 4, 7, 3, 4, 6, 3, 1, 1,
	1, 8, 11, 7, 5, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 3, 0, 1, 6,
	7, 6, 5, 3, 4, 16, 19, 15, 18, 4,
	0, 2, 2, 0, 1, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 4, 2, 1, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 3, 4, 5, 2, 2,
	0, 2, 2, 1, 1, 1, 0, 1, 0, 2,
	2, 5, 4, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 4, 4, 3, 4,
	1, 5, 3, 4, 5, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 2, 5, 1, 4, 2, 5, 1, 4,
	3, 3, 0, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	1, 1, 1, 1, 2, 1, 5, 5, 6, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 3, 4, 3, 3, 4, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 3, 3, 3, 0, 1,
	4, 2, 2, 2, 2, 2, 3, 2, 2, 3,
	0, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 479, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -146, -147, -3,
	-36, -38, -51, -67, -69, -77, -86, -85, -87, -89,
	-93, -92, -81, -42, -97, -101, -110, -142, -143, -144,
	88, 73, 131, 111, 117, 164, 304, 335, 345, 329,
	-105, -106, 364, -37, -49, -99, -98, 66, 112, -4,
	-12, 27, 41, -39, -40, -41, 57, -56, -53, -62,
	-484, 90, -448, -70, -73, -488, 122, 137, 181, 296,
	-90, -91, 331, 333, 138, -44, -43, 132, -157, -159,
	-103, -104, -145, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -131,
	-127, -128, -129, -130, -132, -133, -134, -135, -136, -137,
	-138, 368, 415, 42, 378, 74, 125, 339, 21, -5,
	-6, -7, -8, -9, -10, -11, -52, -54, -55, -57,
	-58, -59, -66, -60, -61, -447, -71, -72, -74, -75,
	-76, 330, -160, -158, 476, 429, -14, -19, -20, -15,
	-16, -18, -21, -17, -25, -30, -31, -27, -28, -26,
	-29, -32, -33, -34, -35, -23, -24, -13, -22, 447,
	455, -163, -161, -162, -170, 352, 437, 392, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, -216, -221,
	-222, -223, -215, -188, -419, -422, 4, -417, -420, 143,
	189, 262, 21, 22, 23, 24, 25, 27, 38, 40,
	39, 41, 42, 45, 48, 49, 47, 52, 53, 54,
	55, 56, 57, 58, 61, 66, 67, 72, 73, 74,
	75, 76, 77, 83, 80, 81, 82, 85, 87, 88,
	89, 91, 93, 94, 102, 103, 104, 105, 106, 107,
	111, 112, 115, 114, 117, 120, 121, 122, 124, 126,
	127, 129, 131, 132, 135, 133, 398, 134, 136, 137,
	138, 139, 149, 150, 151, 153, 154, 156, 158, 162,
	163, 165, 169, 171, 172, 173, 174, 180, 181, 183,
	184, 185, 190, 186, 191, 195, 198, 197, 199, 200,
	201, 192, 206, 210, 211, 212, 214, 215, 218, 219,
	220, 221, 222, 225, 224, 227, 230, 231, 234, 235,
	238, 239, 240, 241, 243, 244, 247, 245, 248, 246,
	249, 252, 250, 251, 254, 255, 260, 258, 256, 257,
	264, 267, 178, 269, 270, 272, 273, 274, 290, 277,
	278, 279, 282, 283, 286, 289, 291, 292, 293, 294,
	295, 296, 297, 299, 300, 302, 304, 305, 307, 309,
	310, 311, 312, 313, 314, 315, 317, 318, 320, 321,
	322, 323, 324, 329, 326, 327, 328, 330, 331, 332,
	333, 335, 337, 338, 339, 340, 342, 344, 365, 366,
	380, 345, 346, 347, 348, 349, 350, 351, 355, 359,
	356, 357, 358, 353, 354, 360, 361, 362, 364, 367,
	368, 370, 371, 373, 374, 376, 377, 378, 379, 381,
	384, 385, 386, 382, 383, 391, 389, 390, 393, 394,
	395, 396, 397, 399, 401, 409, 410, 412, 415, 416,
	417, 407, 419, 420, 423, 424, 425, 428, 426, 427,
	433, 429, 431, 434, 435, 436, 442, 441, 448, 449,
	451, 452, 453, 33, 43, 44, 46, 50, 62, 63,
	64, 68, 108, 109, 130, 140, 141, 152, 166, 168,
	175, 176, 177, 196, 202, 204, 208, 228, 266, 268,
	284, 288, 301, 303, 316, 341, 372, 387, 402, 403,
	404, 405, 411, 413, 437, 438, 439, 443, 450, 275,
	-209, 2, -188, -188, 304, 26, 2, 26, 300, 354,
	394, 396, 2, -471, -263, 2, 26, -191, -188, 90,
	164, 352, -209, 2, -471, -263, 24, 2, -188, 2,
	-192, 2, 345, -188, 479, 85, 235, 67, 341, 361,
	-108, 410, -107, 402, 347, -109, -409, 2, 252, -188,
	479, 479, 479, 26, -199, -188, 479, 2, 392, 293,
	441, 353, 104, 313, 189, -480, 337, 167, 430, 406,
	-466, 2, 4, -420, -417, -226, -225, 392, 104, -223,
	-215, 469, -222, 479, 479, 479, 2, 211, 212, 312,
	311, 361, 362, 479, 479, 2, 25, 60, 84, 87,
	110, 139, 159, 162, 280, -485, 244, 290, 310, 360,
	391, 399, 412, -479, 379, 61, 347, -478, -480, 417,
	120, -310, 104, 235, 163, 424, 396, 394, 422, 115,
	195, 427, 426, 479, 25, 60, 70, 87, 120, 139,
	159, 162, -487, 290, 310, 344, 347, 360, 391, 399,
	417, 412, 2, 441, 353, 392, 189, 104, -480, 308,
	-79, 2, 476, 29, 28, 364, -153, 392, 205, 2,
	-188, 211, 212, 2, 479, 479, 160, -466, 2, 211,
	212, 2, 205, 2, 61, 349, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, 2, -139, 361, 379, 173, 41,
	67, 26, 309, 72, 294, 105, 165, 189, 190, 219,
	84, 85, -312, 40, 212, 211, -363, 393, 348, 354,
	389, 345, 410, 90, 431, 338, 453, 313, 314, 133,
	4, 104, 252, 363, 402, 235, 76, -493, 2, 392,
	-496, 2, 410, 410, 2, -496, 2, -496, 2, -496,
	2, -497, 410, 450, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, -158, -160,
	-159, 479, 479, 479, 479, 479, -139, 361, 2, 67,
	26, -257, -258, 421, 203, 128, 281, -157, -159, 2,
	-447, -407, 2, -338, -423, -340, 467, 468, 460, 261,
	454, -351, 110, 422, 275, -422, -341, -353, 130, 341,
	-278, 8, 9, 5, 6, 7, -197, -384, -347, 414,
	142, 265, -229, 480, 10, 476, -444, -159, -352, 34,
	168, 59, -411, -228, -386, -394, -390, -391, -500, 48,
	55, 54, 399, 251, 355, 356, 373, 357, 358, 45,
	433, 186, 272, 274, 197, 4, 204, -227, -215, -441,
	-442, -417, -418, 196, 202, 198, 372, 199, 200, 201,
	44, 316, 153, 154, 152, 121, 109, 108, 268, 50,
	49, 46, 438, -395, 106, 402, 403, 404, 405, 214,
	215, -188, -419, 70, 96, 97, 95, 100, 99, 237,
	236, 101, 98, 363, 430, 60, 33, 175, 176, 208,
	266, 177, 68, -443, 383, 92, 161, 194, 179, 207,
	209, 213, 229, 232, 253, 259, 263, 285, 287, 336,
	369, -501, 439, 140, 141, 288, 301, 387, 411, 413,
	166, 228, 62, 63, -449, 317, -450, -209, -449, 479,
	479, 481, 479, -251, -252, -253, 2, 26, 118, 476,
	2, -367, 2, -368, -372, -159, 223, -371, 476, -369,
	474, -216, 276, -445, 342, -441, -442, -197, -215, -228,
	4, -254, 476, 478, 104, 392, 71, 189, -305, 476,
	-188, 26, 275, 406, 481, -349, 476, 275, 160, 278,
	-188, 2, 2, 365, 2, 476, -108, 64, 410, 39,
	361, -325, 2, -326, -185, -186, -187, -377, 210, 307,
	315, 456, 453, -407, -481, 160, 459, 406, -407, -279,
	478, 2, -372, 175, -216, 2, -213, -410, 4, -417,
	-420, -418, -421, 70, -419, 26, 28, 29, 30, 32,
	34, 35, 36, 37, 51, 59, 60, 65, 69, 71,
	79, 84, 90, 95, 96, 98, 97, 99, 100, 101,
	110, 113, 116, 118, 119, 123, 125, 128, 142, 144,
	157, 159, 160, 164, 167, 170, 182, 193, 203, 205,
	223, 226, 233, 236, 237, 261, 265, 271, 275, 276,
	280, 281, 298, 306, 319, 334, 352, 363, 375, 388,
	392, 400, 406, 408, 414, 421, 422, 430, 432, 440,
	444, 445, 446, 447, -422, 2, -372, 175, 2, -218,
	175, -372, -221, 2, -200, -188, 2, -212, -410, 2,
	-232, 175, -216, -217, -221, -415, 175, 2, -413, 10,
	-412, 5, 4, -417, -420, -418, -94, -415, 476, 406,
	481, -269, -225, -226, -262, -188, 478, -338, 2, -97,
	2, -338, 175, 2, -97, 175, 2, -338, 175, 2,
	-97, 175, 2, 2, 2, 412, 2, 87, 175, -188,
	392, 103, 2, 328, -486, 344, 416, 441, 2, 2,
	2, 2, 2, 2, 392, -205, 2, -188, 157, -224,
	175, 2, -188, 353, -494, 317, -415, 175, 2, -219,
	-221, -219, 189, 206, -200, 175, 2, 396, 394, 396,
	394, 160, 2, 205, 2, 205, 2, -373, 2, -374,
	-368, -216, 474, 2, 2, 2, 2, 2, 175, -188,
	392, 103, 2, 221, 2, 2, 2, 2, 2, 2,
	2, 2, 2, -271, 175, 2, -216, -271, 175, 2,
	-271, 175, 2, -311, 2, 79, -200, 175, 2, -416,
	175, 2, -415, -381, 2, -380, -412, 437, -79, 476,
	-79, 476, 361, 476, -415, -216, -216, -338, -97, -95,
	-94, 160, -338, -97, -153, 157, 2, 104, 392, -139,
	2, 157, 432, 2, 8, 2, -415, 348, 314, 149,
	2, 365, 2, 366, 67, -312, 453, 67, 160, 2,
	160, 2, -295, 2, 447, -469, 2, 275, 160, 2,
	160, 2, 160, 2, 160, 2, 160, 2, 311, 362,
	212, 2, -97, 444, -338, 444, 2, 409, 220, 134,
	160, -295, 2, 160, 2, 160, 2, 5, 2, 380,
	2, 210, 307, 380, 2, -216, -489, 2, 392, 441,
	353, 2, 2, 80, 81, 160, 2, 160, 2, 160,
	453, 2, -288, -372, -324, -325, -324, 406, -257, -258,
	-139, 365, 2, -164, -286, -166, 157, -314, -315, -167,
	233, 144, 271, -168, -294, 26, 118, -294, -294, 53,
	477, 477, 11, 12, 69, 38, 467, 468, 469, 470,
	155, 471, 472, 465, 466, 464, 457, 458, 462, 216,
	217, 86, 461, 459, 78, 242, 343, 145, 146, 147,
	148, 325, 187, 31, 188, 14, 15, 16, 30, 280,
	232, 454, 179, 369, 460, 17, 18, 19, 207, 209,
	263, 43, 182, -196, -234, -338, -338, -338, -338, -338,
	287, 476, -284, -333, 474, -159, 476, 476, 476, 5,
	-406, 8, -159, -338, -351, 477, -276, 476, -159, -351,
	-346, 476, 341, 474, 476, -354, -338, 5, 476, 478,
	-451, 448, -388, 476, 303, -387, 476, -387, -387, 442,
	-385, 476, 455, 449, 476, -385, 476, 476, 157, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 442, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 481, -449, -254, 476, -280, -375,
	-338, 469, -280, -280, 275, -273, -338, 92, -298, 213,
	253, 161, 229, 336, 194, -335, 480, -335, -362, 455,
	-159, -369, -215, -159, -371, 476, -367, -362, -80, -406,
	-67, -77, -85, -97, -110, -143, -144, 469, -216, 476,
	160, 476, 478, 160, -262, -410, -200, -216, -227, -228,
	-232, 117, -273, -466, -262, -191, 35, -348, -382, -383,
	-384, -393, -389, -392, -396, 48, 55, 54, 399, 251,
	355, 356, 373, 357, 358, 45, 433, 186, 272, 274,
	197, 4, 46, 438, -395, 204, 321, 322, 320, 324,
	323, 196, 202, 198, 372, 199, 200, 201, 44, 316,
	153, 154, 152, 121, 109, 108, 268, 50, 49, 106,
	402, 403, 404, 405, 214, 215, 439, 383, 62, 63,
	-466, -262, 157, -409, -273, 35, -325, 2, 110, -413,
	39, -498, 481, 231, -236, 241, 260, 172, 276, 451,
	269, -414, 5, 4, -347, -359, 110, 235, 204, -400,
	-402, 8, -401, 9, -403, 467, 468, -408, -407, 94,
	478, -410, -175, 326, -174, 23, 27, 122, 435, 135,
	-244, 191, 293, 130, 376, 425, -475, -476, 346, 397,
	398, 82, 269, 326, 130, -291, -293, 35, 102, 255,
	289, 56, 184, 246, 247, 378, 443, 130, 326, -476,
	326, -476, -177, 376, 425, -475, -476, 346, 326, -176,
	-244, 130, 480, -472, -446, 447, 130, -378, -377, -416,
	-94, -269, 481, 481, -410, 469, 130, 130, 130, 130,
	2, 2, 261, 2, 2, 2, 162, -478, -487, 2,
	2, 2, -216, 175, -256, 275, -468, -270, 392, -216,
	261, -218, 175, 2, -221, 441, -472, 261, 35, 476,
	2, -311, 2, 189, -446, 261, -373, -230, -216, -368,
	-230, 364, -209, 35, -335, -335, 130, 2, 2, 2,
	-188, -178, 481, 58, 332, 130, -178, 130, -178, 130,
	-233, 175, -232, -178, 130, 481, 130, 477, 481, -381,
	-381, -415, -151, 447, 160, 90, 476, 476, -153, -378,
	481, -95, -415, -468, -200, 2, -216, 2, 392, 214,
	-151, -415, -415, -415, -409, 26, 366, 2, 311, 362,
	81, 366, 2, -216, 392, 104, 189, 73, -470, 157,
	-467, 337, -466, -216, 104, -216, 104, -216, 104, -216,
	-216, 2, 2, 2, 2, 77, 77, 157, 2, 409,
	2, 409, 2, -188, -188, -188, 231, -216, 157, 392,
	189, 392, 189, 104, 392, -178, 481, -192, -164, -286,
	-409, -287, -286, -165, -164, -167, 157, 315, 426, 255,
	367, 218, -315, -314, 26, -338, -319, 151, 254, -338,
	-317, -340, 467, 468, -401, -403, -272, 269, -158, -158,
	-158, -259, -364, -338, 306, 189, -397, -382, -382, -214,
	-410, 402, -338, -338, -338, -338, -338, -338, -338, -338,
	-338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
	-338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
	-338, -338, -338, -338, -338, -338, -338, 232, 179, 369,
	43, 182, -338, 406, -338, -338, -338, -338, 250, 261,
	265, 414, 142, 423, 118, 269, -502, 388, 37, -344,
	-159, -277, 476, -358, 32, 375, 26, -351, 476, 2,
	-333, -338, -334, -274, -273, -273, 477, 440, 26, 118,
	469, 2, 477, 481, 35, 477, -338, -274, -350, -346,
	-273, -357, -356, 444, -306, -307, 452, 249, 107, 174,
	248, -308, 351, -404, 8, -410, 469, -452, 150, 167,
	8, -404, -404, 402, 402, -404, -404, -404, 476, 477,
	2, 477, 2, 477, -338, 2, 477, -338, 2, 477,
	-338, 2, 477, -338, 2, 477, 2, -338, -338, -338,
	-338, -338, -338, -338, -273, -300, 2, -398, -273, 4,
	452, 249, 107, 174, 248, 351, 5, -300, 2, -301,
	2, -338, -273, -302, -339, -340, 467, 468, 460, -351,
	-303, 2, -338, -274, -338, 51, 226, 408, -304, -338,
	160, -273, -273, 2, -273, 2, -450, 35, -273, -265,
	481, 160, 35, 4, -265, -265, 476, 477, 481, -299,
	171, 245, 240, -299, -367, -298, 213, -296, 285, -296,
	-296, -362, -201, 474, 482, -410, -362, -361, -360, 35,
	-209, 282, -362, -362, 478, 477, -361, 475, -464, 476,
	479, 479, 479, 479, 479, -216, 476, -273, -410, 381,
	477, 478, 207, 207, 207, 207, 342, 477, 406, 447,
	-79, 277, 477, 481, -264, 34, 474, -399, 442, 476,
	476, -307, 476, 160, -263, -481, 477, 410, -326, -235,
	315, 374, 327, 359, 390, 8, 9, 8, 9, 481,
	-410, 481, -482, 84, 406, 71, -329, 175, 71, -424,
	-203, 84, -425, -188, 65, 422, 306, 159, 129, -482,
	84, 306, -482, 84, 84, 364, 379, 53, -372, 38,
	38, 26, -97, 227, 160, 453, 392, 189, 406, -372,
	-293, -382, 102, 246, 247, 53, -405, -400, 467, 468,
	-405, 53, -405, -405, -405, 447, -218, -372, 406, 406,
	481, 38, 38, 26, -97, 227, 160, 406, -232, -201,
	-473, -193, 91, 256, 239, 257, -194, -195, 295, 434,
	-415, -148, 185, 477, -378, -225, -188, 478, -338, -97,
	-338, -97, 130, 2, -494, 221, 476, -239, 261, 160,
	-262, -379, 205, 481, -270, 130, -292, -291, 261, -220,
	175, 2, -216, 130, 476, 126, 313, 2, -202, 175,
	-189, -188, -311, -181, 395, 130, -290, 432, -320, -97,
	476, 110, 35, -320, -281, -282, -376, -283, -203, 476,
	-209, -188, 2, -216, -271, -271, -271, -178, 481, 130,
	-200, -415, -416, -79, -380, 477, 477, 477, -150, 279,
	-149, -188, 5, -153, 432, -238, -330, -329, -428, -429,
	-424, 232, 189, 422, 206, 143, -255, -204, -203, 103,
	-151, -94, -378, -151, -151, -378, -378, -216, 157, -151,
	-151, -151, 2, 2, -295, -216, -200, -232, -216, -262,
	-262, -295, -200, -295, -200, -295, -200, -97, -338, 361,
	157, 157, 478, -295, 313, 104, 392, 293, 189, -216,
	-232, -216, -232, -200, -216, -372, -287, -165, 276, 218,
	367, -317, -318, -340, 341, 342, -318, 341, 342, 8,
	9, 8, 9, -169, 371, 264, -271, 481, -172, 36,
	116, 218, -216, 453, 127, -338, -338, 406, -502, 388,
	-344, 127, -338, 250, 265, 414, 142, 423, 118, 269,
	160, 476, -339, -339, 477, -275, -338, -338, 475, 484,
	477, -258, 481, -257, -338, -273, -273, 477, 478, -273,
	-262, 475, 475, 481, 477, -355, -356, 123, -338, 406,
	406, 406, 406, 476, 477, 478, -457, 286, 476, 476,
	477, 477, 481, 477, 453, 453, 477, 477, 477, -338,
	477, 477, 477, 477, 35, 481, 481, 481, 477, 481,
	481, 481, 477, 477, 160, 477, 477, -309, 298, 477,
	11, 12, 467, 468, 469, 470, 155, 471, 472, 465,
	466, 464, 457, 458, 459, 78, 242, 343, 14, 15,
	16, 207, 182, -339, -339, -339, 477, -342, -343, 160,
	157, 35, -304, -304, -304, 477, 160, -273, 477, 477,
	476, 477, -332, -331, 445, -375, -266, 2, -367, -211,
	-410, -332, -332, -273, -338, 213, 213, -297, 432, 275,
	-299, -367, -361, -406, -337, -336, 158, 36, 116, 258,
	178, -361, -209, -254, -361, -361, -410, -362, -362, -360,
	477, -465, -406, 477, -267, -370, -445, -258, 478, -151,
	-410, -140, 5, 265, -140, -140, -140, -262, 24, 299,
	-382, 474, 475, 8, 476, -404, -404, -404, -262, 160,
	-407, -325, 420, 75, 315, 402, -407, -174, 326, -203,
	-203, -216, 261, -329, 175, -180, 261, -382, -210, -188,
	476, 476, 218, 218, 432, -203, -210, 218, 175, -203,
	175, -210, -210, -474, 315, 270, -338, 234, 313, 262,
	-175, 326, -97, -97, -97, 476, -481, 432, 117, -216,
	-232, -216, -220, 326, 259, -227, -405, -405, -291, 326,
	-218, -200, -176, -97, -97, -97, 476, -201, -177, 326,
	-193, -415, 265, 428, -472, -151, 160, -148, 469, -188,
	441, -188, -237, -240, -238, -203, -156, 449, 447, 130,
	-231, -216, 474, -151, -415, -216, -224, 130, -254, 261,
	-415, 2, 476, 2, 275, 261, -202, 175, -182, 124,
	-499, 459, -200, -332, -266, -289, -323, 334, 275, -255,
	437, -209, -289, -268, 481, 160, 459, 478, -255, 2,
	-178, -178, -178, -232, -233, -178, -79, -79, -151, 481,
	476, 459, 459, 476, -415, -415, 477, 481, -216, -202,
	189, 189, -208, -189, 477, 481, 478, 476, -151, 160,
	-45, 447, 392, 480, -295, -295, -295, 361, 361, -188,
	-212, -200, -216, -213, -232, 157, 157, 426, -318, 276,
	238, -364, -173, 267, -216, 480, -338, -338, 127, 127,
	-338, -339, -339, -338, 127, 160, 476, -338, -348, 30,
	30, 477, 481, -334, -338, 477, 440, -258, -258, 477,
	469, -410, 480, 477, -346, 125, -338, 400, 249, 174,
	248, -308, 248, -308, -308, -404, 5, -410, 469, -458,
	-206, 476, -188, 445, -257, -404, -385, -385, 477, -397,
	-382, -338, -338, -338, -338, -338, -338, -342, -338, -397,
	-382, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	118, 261, 269, -339, -343, -342, -338, -338, -382, 477,
	477, 477, -273, -79, -285, 167, -338, -378, 481, -285,
	-285, 477, -367, -367, 476, -338, 213, 475, 481, 483,
	459, -254, 478, -360, -361, 475, 477, 481, 477, 481,
	-322, 35, 477, -410, 278, 5, 8, 474, 475, -404,
	477, 477, 477, -262, -338, 406, 406, 130, 261, 434,
	-430, -425, 129, -338, -260, -365, -338, 476, 476, 2,
	-171, 122, 364, -483, 2, 432, 130, -178, 130, -178,
	451, 476, 476, 406, 447, -273, -338, -152, 110, -409,
	-476, 480, -476, 480, 406, 406, 447, -273, 406, -415,
	265, -416, -151, 2, 2, 2, 477, 477, 481, -431,
	35, 273, 476, 273, -216, -63, 447, -377, -406, -218,
	35, 130, -472, 2, -216, 130, 275, 261, -183, 225,
	-499, -413, -446, -258, -289, -280, 262, 83, 477, -332,
	-282, -266, -338, 2, 477, -178, -149, -150, -415, -415,
	-415, -151, -153, -153, -330, 2, 476, -202, -189, 476,
	-153, -204, 2, -416, -97, 279, -216, 469, -295, -246,
	-245, 293, 269, -246, 341, 341, 276, 151, 222, -172,
	-201, -338, -338, 127, 30, 30, -338, -338, -348, 477,
	-338, -338, -273, 475, 5, -338, 477, 477, 8, -338,
	477, 478, -459, -188, -338, 477, 477, 477, 477, 481,
	481, 477, 477, 477, 477, -343, 160, 118, 269, 476,
	477, 477, -345, 170, 53, -367, -345, -345, -297, -262,
	-367, -336, -201, 474, -410, -406, -370, 476, 478, 475,
	2, 474, 477, -203, -203, -329, 130, -432, 84, -434,
	69, 143, 90, 261, 265, 422, 306, 65, 110, 319,
	35, 477, 477, 481, -172, -260, -262, 261, 385, 110,
	261, 110, 103, 417, 72, -203, -210, -262, -262, -216,
	136, 477, 481, 459, 2, 469, 469, -220, -218, 136,
	477, -201, -242, 192, -203, -429, -426, -427, 306, -433,
	-435, 143, 306, -97, -155, -154, -188, 5, 2, 476,
	-239, 279, 475, -292, -97, -220, -313, 432, -201, -216,
	130, -184, 224, -499, -413, -181, -316, -314, -321, 476,
	275, -97, -258, 459, 477, 477, 103, 103, -260, 476,
	476, -262, 103, 477, -46, -47, 189, 84, 297, -213,
	392, 189, 476, 476, -172, -338, -338, -338, 477, -258,
	-410, 469, -453, 293, 477, -338, -338, -339, 160, 476,
	-348, -454, 446, -338, -273, -454, -454, 477, -406, 2,
	474, 2, -329, -210, -214, -207, -188, 143, 175, 265,
	218, 476, -339, -216, 476, 2, -491, 113, 193, -328,
	-492, 89, 386, 183, -365, -173, 477, 477, 265, 265,
	-338, -382, 476, -178, -178, 477, 477, -338, 406, -409,
	88, -407, 2, -476, -338, 406, -243, -244, 182, -431,
	218, -207, 218, -490, 447, 477, 481, 459, 459, -237,
	-156, -64, -65, 407, -377, -254, 476, -188, 275, 476,
	-201, -499, -413, -182, -289, 119, -262, 84, -316, -344,
	-151, 476, 476, 477, -260, -260, 477, 476, -151, 481,
	26, 476, 26, 476, -216, -232, -273, -273, 477, -258,
	53, 477, 477, -339, -348, 477, -455, -456, -206, 475,
	2, -434, -207, 261, 432, -338, -190, 476, -338, 193,
	114, 180, -242, 476, -327, 432, 319, -198, 69, -260,
	476, 476, 476, 459, 160, 476, -156, 291, 476, -241,
	275, 103, 255, -154, -341, -341, 477, 35, -65, 9,
	35, -260, -216, -260, 275, -413, -183, 426, 262, 477,
	-210, -289, -416, -416, -327, 477, 477, -416, -47, -262,
	-262, 477, 477, -460, 313, 342, 169, -273, 477, 481,
	35, 130, 171, 477, -436, 243, -188, 477, 114, 180,
	-243, -262, -242, 171, -216, -477, 432, -214, 477, -248,
	-247, -245, -250, -249, -245, -273, -407, 88, 291, -273,
	-241, -216, -261, -366, -203, 74, 103, -242, -97, -97,
	477, -313, 477, -216, -184, 364, -331, 477, 477, -328,
	-327, 477, 477, 477, 477, -461, -462, 43, 419, 94,
	-338, -461, -461, -456, -458, 143, 447, -437, -440, -439,
	275, 370, 161, 292, 477, 385, 443, -491, 477, 447,
	-254, -338, -327, 477, 481, 437, 477, 481, 437, 477,
	160, 477, 476, 477, 481, 305, 115, 122, -243, -490,
	-327, 476, -328, 476, -281, -151, -151, -242, -328, -151,
	-463, 129, -462, 302, 156, 341, 302, 156, -463, -463,
	-207, 47, -439, 275, -440, 275, 426, 115, 47, -436,
	-242, -247, 182, -249, 160, 291, -262, -366, 342, 342,
	2, -156, -241, -328, -260, -242, -260, -332, -243, -242,
	94, 167, 401, 255, 30, 459, -438, 255, 332, 58,
	364, -438, 459, -437, 476, 476, 477, 2, -241, -242,
	477, -243, 477, -243, 341, 283, -462, -338, 22, 265,
	110, -338, -491, -273, -273, -179, 58, 332, -243, -327,
	-495, 445, -328, 477, 477, -495, -328, 2, -242, -243,
	406, -242, -243, 476, -243, -495, -273, -495, 477, -243,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 365,
	366, 368, 369, 370, 372, 373, 375, 377, 379, 381,
	382, 384, 386, 388, 389, 390, 391, 392, 394, 396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 456, 0, 966, 968, 970, 972, 0, 584, 27,
	28, 0, 0, 192, 194, 196, 0, 221, 223, 224,
	226, -2, 0, 322, 323, 325, -2, -2, 0, 0,
	443, 445, 0, 0, 0, 465, 466, 0, 1054, -2,
	459, 461, 463, 528, 530, 532, 534, 536, 538, 540,
	541, 543, 545, 547, 549, 551, 553, 555, 556, 558,
	560, 562, 564, 566, 568, 570, 572, 574, 576, 578,
	580, -2, -2, -2, 0, -2, -2, -2, 984, 31,
	33, 35, 37, 39, 41, 43, 274, 275, 277, 279,
	281, 283, 286, 287, 289, 1109, 327, 329, 331, 333,
	335, 0, -2, 1121, 0, 0, 45, 46, 47, 48,
	49, 50, 51, 52, 68, 69, 70, 71, 72, 73,
	74, 75, 56, 58, 59, 63, 64, 66, 54, 0,
	0, 1085, 1087, 1089, 1091, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 367, 371, 374, 376,
	378, 380, 383, 385, 387, 393, 395, 397, 849, 1745,
	1760, 1761, 1762, 1765, 1766, 1767, 1768, 1769, 1770, 2124,
	2205, 2206, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 0,
	421, 419, 1738, 422, 1953, 424, 426, 316, 317, 318,
	319, 320, 321, 0, 436, 430, 435, 437, 439, 440,
	441, 442, 416, 414, 0, 436, 1792, 434, 964, 965,
	959, 960, 1988, 991, 455, -2, -2, -2, 2092, -2,
	487, -2, 494, 2095, 1990, 499, 0, 501, -2, 504,
	967, 969, 971, 582, 583, 1748, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 899, 900, 0,
	0, 156, -2, -2, -2, -2, 0, 0, 1833, 1706,
	1762, 1709, 1704, 193, 195, 197, 198, 0, 0, 0,
	0, 0, 0, 222, 225, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 758, 750, 751, 936, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 0, -2, 0, 0, 252,
	357, 358, 0, 1110, 1110, 0, 0, 0, 0, 173,
	164, 0, 0, 727, 444, 446, 0, 0, 159, 0,
	0, 963, 0, 175, 0, 0, 460, 462, 464, 529,
	531, 533, 535, 537, 539, 542, 544, 546, 548, 550,
	552, 554, 557, 559, 561, 563, 565, 567, 569, 571,
	573, 575, 577, 579, 581, 585, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	588, 590, 591, 592, 0, 643, 660, 0, 889, 1111,
	993, 974, 988, 993, 976, 977, 978, 979, 980, 985,
	987, 981, 982, 983, 32, 34, 36, 38, 40, 42,
	44, 276, 278, 280, 282, 284, 288, 290, -2, 1083,
	1084, 328, 330, 332, 334, 336, 447, 0, 449, 0,
	589, -2, 0, 1115, 1115, 1115, 0, 0, 1084, 1082,
	0, 452, 453, 508, 509, 1353, 0, 0, 0, 0,
	0, 1603, 1437, 0, 510, -2, 1468, 1470, 2071, 2092,
	1602, 1472, 1473, 1474, 1475, 1476, 0, 0, 1479, 1480,
	1481, 1482, 1483, 0, 1485, 0, 1490, 1491, 1492, 0,
	2076, 1683, 1758, -2, 1256, 1257, 1258, 1259, 1260, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 2082, 1754, 0, 1569,
	1506, -2, 1779, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1843, -2, -2, -2, -2,
	-2, -2, -2, 1312, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2106, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 0, 2060, 2077, 2078, 2083,
	2085, 2079, 2068, 1531, -2, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 1313, -2, 2072, 2073, 2088, 2089, 2094, 2099, 2100,
	2075, 2084, -2, -2, 1101, 1963, 1104, 849, 1102, 1086,
	1088, 0, 1090, 0, 0, 0, 1095, 1118, 1116, 0,
	1157, 1099, 1100, 1175, 1175, 1199, 0, 1180, 0, 1199,
	1110, 1225, 0, 1186, 1983, 1507, 1508, 0, 1762, 1759,
	-2, 0, 0, 0, 0, 0, 0, 0, 417, 0,
	423, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 457, 458, 0, 482, 0, 486, 2067, -2, 1797,
	2003, -2, 490, 994, 998, 999, 1000, 1001, 0, 0,
	0, 0, 0, 496, 0, 0, 483, 484, 502, 505,
	0, 53, 0, 2077, 1225, 55, 0, 1728, 1784, 1785,
	1786, 1787, 1788, 2106, 2123, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
	2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
	2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 2201, 2202, 2203, 2204, 57, 0, 2077, 60, 0,
	2077, 0, -2, 65, 0, 1734, 67, 0, 1731, 76,
	0, 2077, 0, 1703, -2, -2, 2077, 897, 176, 177,
	1775, 1776, 1780, 1781, 1782, 1783, 1212, 160, 0, 0,
	0, 719, 1700, 1705, 720, 1710, 0, 199, 200, 201,
	202, 203, 2077, 205, 206, 0, 208, 209, 2077, 211,
	212, 0, 214, 228, 229, 0, 231, 0, 2077, 0,
	0, 0, 237, -2, 253, 0, 250, 0, 241, 242,
	244, 245, 246, 247, 0, 294, 292, 1739, 0, 728,
	2077, 730, 1744, 0, 0, 918, -2, 2077, 894, 923,
	1742, 0, -2, 0, 1108, 2077, 1008, 754, 755, 756,
	757, 0, 313, 0, 1021, 0, 1023, 0, 1044, 1231,
	1175, 1175, 0, 254, 255, 256, 257, 258, 2077, 0,
	0, 0, 263, 0, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 151, 2077, 339, 355, 151, 2077, 342,
	151, 2077, 345, 0, 348, 934, 151, 2077, 351, 352,
	2077, 354, 178, 0, -2, 410, 1747, -2, 360, 0,
	361, 0, -2, 0, 190, 0, 0, 725, 726, 1212,
	162, 0, 961, 962, 0, 0, 467, 0, 0, 586,
	587, 0, 0, 597, 598, 599, 190, 1991, 1961, 1859,
	604, 0, 607, 610, -2, 0, 0, 0, 0, 614,
	0, 619, 620, 621, 0, 724, 623, 0, 0, 625,
	0, 629, 0, 632, 0, 634, 0, 636, -2, -2,
	-2, 647, -2, 0, 651, 0, 653, 0, 0, 0,
	0, 668, 669, 0, 674, 0, 677, 678, 679, 680,
	681, 0, 683, 684, 685, 686, 0, 688, 689, -2,
	-2, 693, 695, 0, 702, 0, 706, 0, 710, 0,
	593, 594, 151, 1229, 973, -2, 975, 0, -2, 0,
	448, 0, 451, 1136, 1069, 1066, 0, 1133, 1134, 1070,
	0, 0, 0, 1077, 0, 1113, 1114, 0, 0, 0,
	1056, 1057, 0, 0, 0, 0, 1608, 1609, 1610, 1611,
	1612, 1613, 1616, 1617, 1614, 1615, 1618, 1619, 0, 0,
	0, 0, 0, 1620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 1622, 1623, 0, 0,
	1625, 0, 1627, 0, 0, 0, 0, 0, 0, 1416,
	1418, 1691, 0, 0, 1624, 1358, 1359, 1360, 1395, 1396,
	0, 0, 1469, 1688, 1687, 1471, 0, 1639, 0, 1478,
	1484, 1724, -2, 0, 1603, 1634, 0, 0, 1493, 1494,
	1495, 0, 0, 1639, 0, 0, 1682, 1350, 0, 0,
	1571, 0, 1292, 0, 1293, 1294, 0, 1295, 1296, 1309,
	1322, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 0, 1663, -2,
	0, 0, 0, 0, 0, 1103, 0, 0, 1161, 1692,
	1696, 1697, 1161, 1161, 0, 0, 1640, 1222, 1222, 0,
	0, 1218, 1218, 1218, 1216, 1199, 0, 1199, 1209, 0,
	1199, 1199, 0, -2, 1180, 0, 0, 1209, 0, 1193,
	398, 400, 402, 404, 405, 406, 408, 1226, 1227, 0,
	0, 0, 0, 0, 0, 1763, 0, 0, 0, 1750,
	0, 0, 0, 0, 428, 438, 1110, 0, 1642, 1248,
	1251, 1252, 1253, 1254, 1255, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, -2, 1310, 1312, 1333, 1299, 1300, 1301, 1302,
	1303, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1305, 0, 1280, 1280, 1280, 1297, 1298, 1321,
	1332, 1324, 1332, 1328, 1249, 1250, 1315, 1316, 1317, 1318,
	0, 432, 0, 0, 0, 0, -2, 492, 497, 498,
	0, 0, 996, 0, 1002, 519, 520, 521, 1004, 1005,
	0, 495, 522, 523, 524, 525, 526, 527, 0, 1712,
	1713, 1714, 1715, 1718, 1719, 0, 0, 493, 512, 500,
	0, 506, 77, 956, 116, 0, 956, 956, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 101, 112, 89,
	90, 0, 0, 0, 0, 61, 871, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 100,
	0, 95, 79, 0, 0, 0, 102, 114, 0, 142,
	144, 0, 0, 895, 0, 1107, 0, 181, 1211, 0,
	1212, 718, 0, 0, 1763, 1708, 0, 0, 0, 0,
	230, 232, 0, 234, 235, 236, 0, 917, 0, 243,
	240, 285, 820, 2077, 0, 0, 311, 306, 0, 308,
	0, 870, 2077, 868, 1743, 0, 892, 0, 0, 0,
	924, 1772, 929, 935, 1010, 0, 315, 0, 1024, 1026,
	0, 0, 1232, 0, 1234, 1235, 0, 260, 261, 262,
	0, 337, 0, 149, 150, 0, 340, 0, 343, 0,
	151, 2077, 1698, 349, 0, 0, 0, 1110, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 0, 190,
	0, 1212, 190, 190, 1212, 469, 1212, 471, 0, 0,
	600, 190, 190, 190, 605, 606, 608, 609, -2, -2,
	703, 611, 612, 671, 0, 0, 0, 670, 622, 0,
	712, 1979, 722, 671, 1833, 671, 1833, 671, 1833, 633,
	635, 638, 663, 646, 650, 0, 0, 0, 655, 0,
	657, 0, 659, 671, 672, 675, 682, 687, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 986, 1136, 1069,
	450, 1060, 1135, 1061, 1068, 1071, 0, 0, 1073, 0,
	1075, 0, 1131, 1132, 1139, 1140, 0, 1150, 1151, 1143,
	0, -2, 0, 0, 1146, 1147, 1079, 0, 1096, 1097,
	1098, 1122, 1123, 945, 0, 2205, 1354, 1243, 1355, 1356,
	1727, 0, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, -2, -2, -2, -2, -2, -2, -2, -2,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, -2, -2, -2, 1393, 1394, -2, 1626, 1628, 0,
	1691, 0, -2, 0, -2, -2, -2, -2, 1413, 0,
	1415, 1420, 1422, 1424, 0, 0, 0, 0, 1690, 1434,
	1674, 1675, 0, 0, 1605, 1606, 1607, 1419, 0, 1438,
	1689, 1686, 0, 0, 1638, 1121, 1497, 0, 0, 0,
	0, 1504, 1489, 1636, 0, 1635, 0, 0, 0, 1646,
	0, 1681, 1677, 0, 1725, 1349, 1336, 1337, 1338, 1339,
	1340, 1341, 1351, 0, 1722, 1751, 1757, 1579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1532,
	1533, 1534, 1535, 1536, 0, 1538, 1539, 0, 1541, 1542,
	0, 1544, 1545, 0, 1547, 1548, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 1649, -2,
	-2, -2, -2, -2, -2, -2, -2, 0, 1553, 0,
	1555, 1640, 1660, 0, 0, 1439, 0, 0, 0, 1603,
	0, 1558, 1640, 1668, 0, 0, 0, 0, 0, 1640,
	0, 1673, 0, 1565, 0, 1567, 1105, 0, 0, 1238,
	0, 0, 0, 1695, 1238, 1238, 0, 1156, 0, 0,
	1219, 1220, 1221, 0, 0, 1222, 0, 1213, 1217, 1214,
	1215, 1209, 1172, 0, 0, 1729, 1209, 1178, 1208, 0,
	849, 1198, 1209, 1209, 0, -2, 1182, 1199, 0, 0,
	399, 401, 403, 407, 409, 0, 0, 1121, -2, 190,
	848, 0, 0, 0, 0, 0, 418, 420, 0, 0,
	412, 0, 415, 0, 1239, 1242, 0, 0, -2, 0,
	0, 1334, 0, 0, 0, 0, 485, 0, 995, 1003,
	0, 516, 0, 518, 0, 1716, 1720, 1717, 1721, 0,
	507, 0, 0, 0, 0, 955, 120, 2077, 0, 153,
	0, 0, 813, 1735, 0, 0, 0, 0, 1848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 91, 0, 0, 0, 0, 0, 0, 0,
	872, 873, 875, 882, 884, 0, 878, 1723, 0, 0,
	879, 0, 881, 883, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 92, 0, 0, 0, 0, 1702,
	913, 911, 905, 906, 907, 908, 909, 910, 0, 0,
	-2, 190, 0, 161, 181, 1701, 1711, 0, 204, 207,
	210, 213, 0, 238, 0, 0, 760, 733, 0, 0,
	293, 190, 0, 0, 307, 0, 866, 869, 0, 849,
	2077, 904, 1741, 0, 0, 0, 0, 922, 0, 2077,
	1730, 1771, 1772, 1012, 1018, 0, 1238, 0, 1042, 1027,
	0, 0, 0, 1042, 1046, 1047, 1049, 1050, 0, 0,
	1233, 0, 264, 356, 151, 151, 151, 346, 0, 0,
	151, 179, 353, 359, 411, 1110, 1110, 190, 188, 1938,
	186, 183, 185, 0, 0, 0, 761, 763, 764, 765,
	766, 0, 1772, 0, 1889, 1772, 0, 1030, 1032, 0,
	157, 163, 190, 0, 305, 468, 473, 595, 0, 601,
	602, 603, 640, 665, 613, 615, 616, 617, 0, 723,
	721, 624, 671, 627, 671, 630, 671, 649, 652, 654,
	0, 0, 0, 667, 0, 0, 0, 0, 0, 0,
	0, 707, 708, 709, 711, 1230, 1064, 1065, 1067, 0,
	1076, 0, 0, 1145, -2, -2, 1144, 1148, 1149, -2,
	-2, -2, -2, 1072, 0, 1081, 1078, 0, 1130, 943,
	944, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1435, 0, -2, 1414, 1417, 1421, 1423, 1425, 0, 0,
	0, 0, 0, 0, 1629, 0, 1631, 1436, 1684, 1687,
	1601, 0, 0, 1120, 1121, 1121, 0, 1503, 0, 1637,
	0, 1644, 1645, 0, 1496, 0, 1678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	1304, 1278, 0, 1332, 1330, 1331, 1325, 1332, 1329, 0,
	1537, 1540, 1543, 1546, 0, 0, 0, 0, 1526, 0,
	0, 0, 1530, 1550, 0, 1552, 1554, 0, 0, 1556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 1444, 1557, 1666, 1667, 0,
	0, 0, 0, 0, 0, 1563, 0, 1672, 1564, 1566,
	1110, 1158, 1153, 1237, 0, 1693, 1212, 1160, 1162, 1694,
	1732, 1153, 1153, 0, 1641, 0, 0, 1203, 0, 0,
	0, 1205, 1176, 0, 0, 1170, 0, 1166, 1167, 1168,
	1169, 1177, 849, 1207, 1179, 1183, 1751, 0, 1209, 0,
	1194, 0, 1196, 1228, 0, 1188, 1191, 0, 0, 191,
	1764, 215, 219, 220, 216, 217, 218, 427, 0, 0,
	1643, 0, 1244, 0, 0, 0, 0, 0, 431, 0,
	481, -2, 514, 515, 517, 0, 513, 117, 956, 0,
	0, 947, 0, 122, 2077, 131, 0, 789, 0, 1733,
	0, 0, 0, 0, 0, 958, 0, 0, 2077, 151,
	2077, 151, 134, 137, 0, 141, 139, 0, 0, 780,
	78, 956, 81, 85, 93, 0, 0, 0, 99, 0,
	0, 0, 949, 0, 876, 877, 880, 886, 62, 0,
	951, 946, 143, 83, 87, 94, 0, 953, 80, 0,
	912, 890, 891, 0, 896, 154, 0, 190, 1707, 0,
	0, 0, 0, 0, 759, 831, 0, 0, 0, 0,
	299, 295, 0, 304, 310, 309, 729, 0, 0, 0,
	-2, 919, 0, 921, 0, 0, 0, 2077, 1014, 1018,
	0, 1017, 1108, 1121, 314, 1019, 1042, 0, 0, 0,
	1029, 1025, 1022, 1238, 0, 0, 0, 0, 0, 259,
	338, 341, 344, 1699, 151, 350, 362, 363, 165, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	1772, 1772, 0, 1737, 0, 0, 0, 0, 158, 0,
	470, 0, 0, 0, 626, 628, 631, 656, 658, 671,
	696, 697, 775, 0, 775, 0, 0, 1074, 0, 1142,
	1080, 1124, 1125, 0, 945, 0, 1357, 1398, 0, 0,
	-2, 0, 0, 1402, 0, 0, 0, -2, 0, 0,
	0, 1630, 1632, 0, 1686, 1498, 0, 0, 0, 1502,
	1486, 1487, 0, 1604, 1647, 1676, 1680, 0, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 0, 1726, 1752, 1756, 1577,
	1578, 1582, 1740, 0, 0, 0, 1323, 1327, 1509, 0,
	0, 0, 0, 0, 0, 0, 1648, 1659, 1661, 1440,
	1441, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, -2, -2, -2, 1458, 1459, 1460, -2, -2, -2,
	0, 0, 0, 1662, 1664, 1665, 1669, 1670, 0, 1560,
	1561, 1562, 1671, 0, 1155, 0, 1236, 1159, 0, 1155,
	1155, 1117, 1201, 0, 0, 1224, 0, 1173, 0, 1174,
	0, 1206, 0, 1181, 1184, 1185, 1195, 0, 1187, 0,
	1190, 0, 1498, -2, 429, 413, 0, 0, 1246, 0,
	1307, 1311, 1335, 433, 1210, 0, 0, 0, 0, 152,
	787, 812, 0, 0, 0, 938, 945, 0, 0, 818,
	124, 0, 0, 0, 132, 0, 0, 129, 0, 136,
	140, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	103, 0, 104, 0, 0, 0, 0, 0, 0, 915,
	916, 180, 155, 233, 903, 239, 769, 819, 0, 821,
	0, 734, 0, 0, 820, 291, 0, 298, 0, 870,
	0, 0, 893, 920, 933, 0, 0, 0, 1016, 1018,
	0, 1009, 1010, 1138, 1020, 1040, -2, 1039, 0, 1121,
	1048, 1045, 1051, 1052, 0, 347, 187, 0, 182, 184,
	0, 168, 0, 0, 762, 767, 0, 0, 0, 0,
	0, 1031, 1033, 0, 174, 0, 596, 618, 666, 698,
	774, 0, 0, 700, 0, 0, 1141, 1128, 1129, 1126,
	945, 1400, 1404, 0, 0, 0, 1406, -2, 0, 1428,
	-2, -2, 1633, 1685, 1477, 1121, 1499, 1501, 1488, 1679,
	1352, 0, 1584, 1581, 0, 1568, 1279, 1521, 1522, 0,
	0, 1525, 1527, 1528, 1529, 1658, 0, 0, 0, 0,
	1559, 1106, 1573, 0, 0, 1163, 1573, 1573, 1202, 0,
	1204, 1171, 1164, 0, 1752, 1197, 1189, 0, 0, 1240,
	1245, 0, 1306, 118, 119, 121, 0, 788, 0, 791,
	0, 0, 0, 0, 798, 799, 0, 0, 0, 0,
	0, 835, 845, 0, 1130, 0, 0, 0, 126, 146,
	0, 0, 957, 0, 0, 151, 151, 0, 0, 948,
	0, 0, 0, 0, 106, 0, 0, 950, 952, 0,
	0, 954, 777, 0, 831, 823, 824, 825, 0, 830,
	832, 0, 0, 747, 0, 743, 0, 0, 736, 760,
	733, 0, 296, 867, 901, 849, 0, 0, 0, 0,
	0, 1006, 1018, 0, 1011, 1012, 1042, 1137, 0, 0,
	0, 1028, 1138, 0, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 190, 472, 474, 0, 0, 480, 773,
	0, 0, 0, 0, 1127, 1408, -2, -2, 1429, 0,
	1753, 1755, 1121, 0, 1570, 0, 0, -2, 0, 0,
	0, 1092, 0, 1154, 1152, 1093, 1094, 1223, 0, 1192,
	0, 1247, 123, 0, 792, 793, 1736, 795, 0, 797,
	800, 0, 803, 1774, 0, 807, 814, 836, 0, 769,
	0, 841, 842, 843, 939, 940, 847, 0, 125, 127,
	145, 942, 0, 128, 135, 0, 0, 82, 0, 0,
	1826, 109, 107, 105, 84, 0, 733, 776, 0, 822,
	0, 833, 834, 737, 0, 735, 0, 0, 0, 0,
	0, 297, 300, 0, 303, 0, 0, 932, 0, 0,
	0, 0, 1013, 1014, 312, 0, 0, 0, 1042, 1053,
	167, 0, 0, 847, 0, 0, 811, 0, 172, 0,
	476, 0, 478, 0, 699, 701, 0, 0, 1500, 1588,
	0, 1523, 1524, -2, 0, 1466, 1572, 1574, 0, 1165,
	1241, 790, 794, 0, 0, 0, 853, 0, 0, 0,
	839, 840, 777, 0, 769, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 745,
	0, 748, 0, 744, 741, 742, 769, 0, 301, 302,
	0, 0, 933, 0, 0, 1015, 1016, 0, 1035, 1036,
	1038, 1043, 0, 0, 845, 847, 810, 0, 475, 0,
	0, 704, 705, 0, 0, 0, 0, 1583, 1467, 0,
	0, 0, 0, 802, 858, 0, 0, 0, 837, 838,
	835, 0, 816, 0, 849, 130, 0, 941, 847, 0,
	781, 0, 0, 784, 0, 0, 110, 1826, 108, 0,
	731, 0, 0, 827, 829, 0, 749, 777, 747, 902,
	847, 0, 845, 0, 1007, 0, 1037, 190, 190, 769,
	845, 190, 477, 479, 1580, 1600, 1589, -2, 2039, 1830,
	0, 1600, 1600, 1575, 1576, 0, 0, 804, 854, 855,
	0, 850, 851, 852, 1773, 805, 806, 815, 844, 0,
	853, 147, 769, 778, 0, 0, 779, 0, 0, 113,
	0, 115, 0, 826, 0, 0, 0, 0, 733, 737,
	845, 0, 769, 0, 1238, 169, 170, 777, 769, 171,
	1585, 0, 0, 1591, 1592, 1593, 1594, 1595, 1586, 1587,
	796, 0, 856, 0, 857, 0, 0, 0, 0, 858,
	133, 782, 0, 785, 0, 111, 0, 828, 738, 0,
	740, 737, 746, 769, 0, 777, 0, 1034, 808, 777,
	0, 1597, 1598, 0, 0, 0, 859, 0, 862, 863,
	0, 860, 0, 835, 0, 0, 772, 739, 732, 777,
	847, 930, 845, 809, 1596, 1599, 1590, 801, 861, 864,
	865, 846, 817, 0, 0, 768, 770, 771, 930, 845,
	927, 0, 769, 777, 0, 925, 769, 931, 777, 783,
	0, 777, 930, 0, 930, 928, 0, 926, 777, 786,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 465, 3, 471, 466, 3,
	476, 477, 469, 467, 481, 468, 478, 470, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 484, 3,
	457, 459, 458, 462, 480, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 474, 3, 475, 472, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 482, 464, 483, 460,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 461,
	57800, 463, 57801, 473, 57802, 479, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1123
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1132
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1133
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1134
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1135
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1136
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1137
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1145
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1163
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1244
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1270
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1292
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1311
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1343
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1367
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1376
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1397
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1429
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1440
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1447
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1466
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1474
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1494
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1502
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1523
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1533
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1542
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1553
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1559
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1585
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1590
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1710
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1752
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1759
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1794
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1885
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1889
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1892
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1900
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1906
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1916
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1953
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1962
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1968
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1973
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1978
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1983
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1988
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2019
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2089
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2139
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2162
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2205
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2213
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2237
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2252
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2279
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2283
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2286
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2287
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2308
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2309
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2315
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2320
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2321
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2322
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2367
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2390
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2421
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2429
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2464
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2492
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2517
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2521
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2523
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2603
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2630
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2637
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2674
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2682
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2698
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2706
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2724
		{
			return helpWith(sqllex, "DELETE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2727
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "INSERT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2742
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2743
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "DELETE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2749
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "INSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2783
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2795
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2816
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2824
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2832
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "GRANT")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2928
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "RESET")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2997
		{
			return helpWith(sqllex, "USE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3003
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3008
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3010
		{
			return helpWith(sqllex, "USE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3154
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3207
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3229
		{
			return unimplemented(sqllex, "set from current")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3310
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = tree.Low
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = tree.Normal
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = tree.High
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3347
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3385
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3386
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3389
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3390
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3391
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3395
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3396
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3406
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3410
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3430
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3434
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3452
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3456
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3475
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3500
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3509
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3517
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3527
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3548
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3556
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3559
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3606
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3614
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3683
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3705
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3714
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3716
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3732
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3744
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3749
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3751
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3755
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3758
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3759
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3767
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3770
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3772
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3775
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3783
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3803
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3806
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3809
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3817
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3821
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3824
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3831
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3838
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3859
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3867
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3872
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3877
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3881
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3893
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3897
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3913
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3928
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3932
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3936
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3944
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3952
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3959
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3981
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3989
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3995
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4004
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4009
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4016
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4020
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4027
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4156
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4160
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4203
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4212
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4232
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4244
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4256
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4276
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4315
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4330
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = nil
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4351
		{

			sqlVAL.union.val = nil
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4357
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4362
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4372
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4377
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4382
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4409
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4422
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4436
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4438
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4456
		{
			sqlVAL.union.val = true
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = false
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4466
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4496
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4500
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4516
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4521
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4526
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4566
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4582
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4616
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4653
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4661
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4710
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4724
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 808:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4792
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4798
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4821
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4832
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4849
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4859
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4874
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4939
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4940
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4941
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4942
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4943
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4944
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5008
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5012
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5016
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5033
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5037
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5057
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5065
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5069
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5073
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5100
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5109
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5117
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5121
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5128
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5133
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5148
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5153
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5156
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5158
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5160
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5171
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5175
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5179
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5196
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5208
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5211
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = true
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5221
		{

			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5236
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5247
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5257
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5258
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5274
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5292
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5296
		{
			sqlVAL.union.val = nil
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5302
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5306
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5311
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5318
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5320
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5322
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5324
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5326
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5328
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5344
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5360
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5377
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5392
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5407
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5410
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5411
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5415
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = false
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5436
		{
			sqlVAL.union.val = true
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = false
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5446
		{
			sqlVAL.union.val = true
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = false
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5456
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5469
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5491
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.str = ""
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5500
		{
			sqlVAL.union.val = tree.Descending
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5516
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5522
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5530
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5536
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5544
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5550
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5567
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5568
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5571
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5572
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5583
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5605
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5616
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5620
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5621
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5622
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5641
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5646
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5656
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5659
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5661
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5664
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5673
		{
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5675
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5692
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5695
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5696
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5700
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5704
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5710
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5720
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5724
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5737
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5739
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5743
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5778
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5788
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5808
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5816
		{
			sqlVAL.str = ""
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5822
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.str = ""
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5836
		{
			sqlVAL.str = ""
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.str = ""
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5851
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5852
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5878
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5900
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5909
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5958
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5962
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5975
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5976
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5984
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6022
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6028
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6054
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6154
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6168
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6188
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6194
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6198
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6204
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6239
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6240
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6241
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6346
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6362
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6391
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6392
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = nil
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6405
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6406
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = true
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = false
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = false
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = true
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6435
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6436
		{
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6450
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6466
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6487
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6492
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6521
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6554
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6609
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6610
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6613
		{
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6667
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6669
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6684
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6706
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6711
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6716
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6727
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6739
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6758
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6797
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6807
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6842
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6853
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6883
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6916
		{
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = nil
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = true
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = false
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6987
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.str = tree.AstFull
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.str = tree.AstRight
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.str = tree.AstInner
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7036
		{
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.str = tree.AstHash
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.str = ""
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7098
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7121
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7133
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7143
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7172
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7185
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7193
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7194
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7212
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7222
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = types.String
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = types.Name
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7275
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = types.INet
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = types.Oid
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7324
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7363
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = nil
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = types.Int2
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = types.Int2
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = types.Int4
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = types.Int
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = types.Int
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = types.Int
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = types.Float4
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = types.Float4
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = types.Float
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = types.Float
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7430
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7438
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7446
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7454
		{
			sqlVAL.union.val = types.Bool
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7458
		{
			sqlVAL.union.val = types.Bool
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = types.RegType
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7487
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = types.Float
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7506
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7512
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7534
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = types.String
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = true
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = false
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = types.Date
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7583
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7591
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7605
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7614
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7622
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7635
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7639
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = true
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = false
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = false
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = types.Interval
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7663
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7762
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = nil
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7792
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7833
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7852
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8162
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8184
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8378
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8383
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8409
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8418
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8425
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8433
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8460
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8463
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8474
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8475
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8501
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8621
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8626
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8628
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8632
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8635
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8644
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8646
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8653
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8659
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8662
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8667
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8672
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8677
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8682
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8691
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8692
		{
			return unimplemented(sqllex, "treat")
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8710
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8713
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8718
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8723
		{
			return unimplemented(sqllex, "within group")
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8724
		{
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.str = ""
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8808
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8848
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8861
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8929
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8934
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8951
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8958
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8970
		{
			sqlVAL.union.val = tree.Any
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{
			sqlVAL.union.val = tree.Some
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8978
		{
			sqlVAL.union.val = tree.All
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8984
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8985
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = tree.Div
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8988
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8989
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8990
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8992
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8993
		{
			sqlVAL.union.val = tree.LT
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = tree.GT
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8995
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8996
		{
			sqlVAL.union.val = tree.LE
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8997
		{
			sqlVAL.union.val = tree.GE
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = tree.NE
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = tree.Like
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9004
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9005
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9032
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9038
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9042
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9057
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9061
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9067
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9071
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9078
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9084
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9094
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9104
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9114
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9172
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9176
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9193
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9201
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9205
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9209
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9215
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9221
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9227
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9231
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9235
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9241
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9253
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9260
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9270
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9276
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9280
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9287
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9293
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9297
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9304
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9310
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9319
		{
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9320
		{
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9324
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9334
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9343
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9347
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9351
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9359
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9369
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9392
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9400
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9423
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9432
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9436
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9440
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9450
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9469
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9473
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9485
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9489
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9498
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9509
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9518
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9526
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9538
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9639
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9646
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9650
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9654
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9668
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9672
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9676
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9689
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9707
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9720
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9727
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9752
		{
			sqlVAL.str = ""
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9758
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9762
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
